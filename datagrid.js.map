{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards v3.1.0 (2024-12-04)\n *\n * (c) 2009-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = (root && root.document) ?\n            factory(root) :\n            factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('datagrid/datagrid', function () {\n            return factory(root);\n        });\n    } else {\n        if (root.DataGrid) {\n            root.DataGrid.error(16, true);\n        }\n        root.DataGrid = factory(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function (window) {\n    'use strict';\n    var _modules = {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (window && typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DataGridModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Shared Highcharts properties.\n         * @private\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.SVG_NS = 'http://www.w3.org/2000/svg', Globals.product = 'Highcharts', Globals.version = '3.1.0', Globals.win = (typeof window !== 'undefined' ?\n                window :\n                {}), // eslint-disable-line node/no-unsupported-features/es-builtins\n            Globals.doc = Globals.win.document, Globals.svg = (Globals.doc &&\n                Globals.doc.createElementNS &&\n                !!Globals.doc.createElementNS(Globals.SVG_NS, 'svg').createSVGRect), Globals.userAgent = (Globals.win.navigator && Globals.win.navigator.userAgent) || '', Globals.isChrome = Globals.win.chrome, Globals.isFirefox = Globals.userAgent.indexOf('Firefox') !== -1, Globals.isMS = /(edge|msie|trident)/i.test(Globals.userAgent) && !Globals.win.opera, Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1, Globals.isTouchDevice = /(Mobile|Android|Windows Phone)/.test(Globals.userAgent), Globals.isWebKit = Globals.userAgent.indexOf('AppleWebKit') !== -1, Globals.deg2rad = Math.PI * 2 / 360, Globals.marginNames = [\n                'plotTop',\n                'marginRight',\n                'marginBottom',\n                'plotLeft'\n            ], Globals.noop = function () { }, Globals.supportsPassiveEvents = (function () {\n                // Checks whether the browser supports passive events, (#11353).\n                let supportsPassive = false;\n                // Object.defineProperty doesn't work on IE as well as passive\n                // events - instead of using polyfill, we can exclude IE totally.\n                if (!Globals.isMS) {\n                    const opts = Object.defineProperty({}, 'passive', {\n                        get: function () {\n                            supportsPassive = true;\n                        }\n                    });\n                    if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                        Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                        Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n                    }\n                }\n                return supportsPassive;\n            }());\n            /**\n             * An array containing the current chart objects in the page. A chart's\n             * position in the array is preserved throughout the page's lifetime. When\n             * a chart is destroyed, the array item becomes `undefined`.\n             *\n             * @name Highcharts.charts\n             * @type {Array<Highcharts.Chart|undefined>}\n             */\n            Globals.charts = [];\n            /**\n             * A shared registry between all bundles to keep track of applied\n             * compositions.\n             * @private\n             */\n            Globals.composed = [];\n            /**\n             * A hook for defining additional date format specifiers. New\n             * specifiers are defined as key-value pairs by using the\n             * specifier as key, and a function which takes the timestamp as\n             * value. This function returns the formatted portion of the\n             * date.\n             *\n             * Using `dateFormats` is also a convenient way to define new keys for\n             * complex locale-aware date formats compatible with the\n             * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat)\n             * browser API, whenever the built-in formats are not sufficient.\n             *\n             * @sample highcharts/global/dateformats/\n             *         Adding support for week number\n             * @sample highcharts/global/dateformats-object/\n             *         A locale-aware date format using `Intl.DateTimeFormat`\n             *\n             * @name Highcharts.dateFormats\n             * @type {Record<string, Highcharts.TimeFormatCallbackFunction>}\n             */\n            Globals.dateFormats = {};\n            /**\n             * @private\n             * @deprecated\n             * @todo Use only `Core/Series/SeriesRegistry.seriesTypes`\n             */\n            Globals.seriesTypes = {};\n            /**\n             * @private\n             */\n            Globals.symbolSizes = {};\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            // eslint-disable-next-line prefer-const\n            Globals.chartCount = 0;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Theme options that should get applied to the chart. In module mode it\n         * might not be possible to change this property because of read-only\n         * restrictions, instead use {@link Highcharts.setOptions}.\n         *\n         * @deprecated\n         * @name Highcharts.theme\n         * @type {Highcharts.Options}\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Core/Utilities.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { charts, doc, win } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Highcharts.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        Reference to the chart that causes the error. Used in 'debugger'\n         *        module to display errors directly on the chart.\n         *        Important note: This argument is undefined for errors that lack\n         *        access to the Chart instance. In such case, the error will be\n         *        displayed on the last created chart.\n         *\n         * @param {Highcharts.Dictionary<string>} [params]\n         *        Additional parameters for the generated message.\n         *\n         * @return {void}\n         */\n        function error(code, stop, chart, params) {\n            const severity = stop ? 'Highcharts error' : 'Highcharts warning';\n            if (code === 32) {\n                code = `${severity}: Deprecated member`;\n            }\n            const isCode = isNumber(code);\n            let message = isCode ?\n                `${severity} #${code}: www.highcharts.com/errors/${code}/` :\n                code.toString();\n            const defaultHandler = function () {\n                if (stop) {\n                    throw new Error(message);\n                }\n                // Else ...\n                if (win.console &&\n                    error.messages.indexOf(message) === -1 // Prevent console flooting\n                ) {\n                    console.warn(message); // eslint-disable-line no-console\n                }\n            };\n            if (typeof params !== 'undefined') {\n                let additionalMessages = '';\n                if (isCode) {\n                    message += '?';\n                }\n                objectEach(params, function (value, key) {\n                    additionalMessages += `\\n - ${key}: ${value}`;\n                    if (isCode) {\n                        message += encodeURI(key) + '=' + encodeURI(value);\n                    }\n                });\n                message += additionalMessages;\n            }\n            fireEvent(H, 'displayError', { chart, code, message, params }, defaultHandler);\n            error.messages.push(message);\n        }\n        (function (error) {\n            error.messages = [];\n        })(error || (error = {}));\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {true | T} extendOrSource\n         *        Whether to extend the left-side object,\n         *        or the first object to merge as a deep copy.\n         *\n         * @param {...Array<object|undefined>} [sources]\n         *        Object(s) to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */\n        function merge(extendOrSource, ...sources) {\n            let i, args = [extendOrSource, ...sources], ret = {};\n            const doCopy = function (copy, original) {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                objectEach(original, function (value, key) {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (extendOrSource === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Constrain a value to within a lower and upper threshold.\n         *\n         * @private\n         * @param {number} value The initial value\n         * @param {number} min The lower threshold\n         * @param {number} max The upper threshold\n         * @return {number} Returns a number value within min and max.\n         */\n        function clamp(value, min, max) {\n            return value > min ? value < max ? value : max : min;\n        }\n        /**\n         * Utility for crisping a line position to the nearest full pixel depening on\n         * the line width\n         * @param {number} value       The raw pixel position\n         * @param {number} lineWidth   The line width\n         * @param {boolean} [inverted] Whether the containing group is inverted.\n         *                             Crisping round numbers on the y-scale need to go\n         *                             to the other side because the coordinate system\n         *                             is flipped (scaleY is -1)\n         * @return {number}            The pixel position to use for a crisp display\n         */\n        function crisp(value, lineWidth = 0, inverted) {\n            const mod = lineWidth % 2 / 2, inverter = inverted ? -1 : 1;\n            return (Math.round(value * inverter - mod) + mod) * inverter;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Return the deep difference between two objects. It can either return the new\n         * properties, or optionally return the old values of new properties.\n         * @private\n         */\n        function diffObjects(newer, older, keepOlder, collectionsWithUpdate) {\n            const ret = {};\n            /**\n             * Recurse over a set of options and its current values, and store the\n             * current values in the ret object.\n             */\n            function diff(newer, older, ret, depth) {\n                const keeper = keepOlder ? older : newer;\n                objectEach(newer, function (newerVal, key) {\n                    if (!depth &&\n                        collectionsWithUpdate &&\n                        collectionsWithUpdate.indexOf(key) > -1 &&\n                        older[key]) {\n                        newerVal = splat(newerVal);\n                        ret[key] = [];\n                        // Iterate over collections like series, xAxis or yAxis and map\n                        // the items by index.\n                        for (let i = 0; i < Math.max(newerVal.length, older[key].length); i++) {\n                            // Item exists in current data (#6347)\n                            if (older[key][i]) {\n                                // If the item is missing from the new data, we need to\n                                // save the whole config structure. Like when\n                                // responsively updating from a dual axis layout to a\n                                // single axis and back (#13544).\n                                if (newerVal[i] === void 0) {\n                                    ret[key][i] = older[key][i];\n                                    // Otherwise, proceed\n                                }\n                                else {\n                                    ret[key][i] = {};\n                                    diff(newerVal[i], older[key][i], ret[key][i], depth + 1);\n                                }\n                            }\n                        }\n                    }\n                    else if (isObject(newerVal, true) &&\n                        !newerVal.nodeType // #10044\n                    ) {\n                        ret[key] = isArray(newerVal) ? [] : {};\n                        diff(newerVal, older[key] || {}, ret[key], depth + 1);\n                        // Delete empty nested objects\n                        if (Object.keys(ret[key]).length === 0 &&\n                            // Except colorAxis which is a special case where the empty\n                            // object means it is enabled. Which is unfortunate and we\n                            // should try to find a better way.\n                            !(key === 'colorAxis' && depth === 0)) {\n                            delete ret[key];\n                        }\n                    }\n                    else if (newer[key] !== older[key] ||\n                        // If the newer key is explicitly undefined, keep it (#10525)\n                        (key in newer && !(key in older))) {\n                        if (key !== '__proto__' && key !== 'constructor') {\n                            ret[key] = keeper[key];\n                        }\n                    }\n                });\n            }\n            diff(newer, older, ret, 0);\n            return ret;\n        }\n        /**\n         * Shortcut for parseInt\n         *\n         * @private\n         * @function Highcharts.pInt\n         *\n         * @param {*} s\n         *        any\n         *\n         * @param {number} [mag]\n         *        Magnitude\n         *\n         * @return {number}\n         *         number\n         */\n        function pInt(s, mag) {\n            return parseInt(s, mag || 10);\n        }\n        /**\n         * Utility function to check for string type.\n         *\n         * @function Highcharts.isString\n         *\n         * @param {*} s\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a string.\n         */\n        function isString(s) {\n            return typeof s === 'string';\n        }\n        /**\n         * Utility function to check if an item is an array.\n         *\n         * @function Highcharts.isArray\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is an array.\n         */\n        function isArray(obj) {\n            const str = Object.prototype.toString.call(obj);\n            return str === '[object Array]' || str === '[object Array Iterator]';\n        }\n        /**\n         * Utility function to check if an item is of type object.\n         *\n         * @function Highcharts.isObject\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @param {boolean} [strict=false]\n         *        Also checks that the object is not an array.\n         *\n         * @return {boolean}\n         *         True if the argument is an object.\n         */\n        function isObject(obj, strict) {\n            return (!!obj &&\n                typeof obj === 'object' &&\n                (!strict || !isArray(obj))); // eslint-disable-line @typescript-eslint/no-explicit-any\n        }\n        /**\n         * Utility function to check if an Object is a HTML Element.\n         *\n         * @function Highcharts.isDOMElement\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a HTML Element.\n         */\n        function isDOMElement(obj) {\n            return isObject(obj) && typeof obj.nodeType === 'number';\n        }\n        /**\n         * Utility function to check if an Object is a class.\n         *\n         * @function Highcharts.isClass\n         *\n         * @param {object|undefined} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a class.\n         */\n        function isClass(obj) {\n            const c = obj && obj.constructor;\n            return !!(isObject(obj, true) &&\n                !isDOMElement(obj) &&\n                (c && c.name && c.name !== 'Object'));\n        }\n        /**\n         * Utility function to check if an item is a number and it is finite (not NaN,\n         * Infinity or -Infinity).\n         *\n         * @function Highcharts.isNumber\n         *\n         * @param {*} n\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the item is a finite number\n         */\n        function isNumber(n) {\n            return typeof n === 'number' && !isNaN(n) && n < Infinity && n > -Infinity;\n        }\n        /**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function Highcharts.erase\n         *\n         * @param {Array<*>} arr\n         *        The array.\n         *\n         * @param {*} item\n         *        The item to remove.\n         *\n         * @return {void}\n         */\n        function erase(arr, item) {\n            let i = arr.length;\n            while (i--) {\n                if (arr[i] === item) {\n                    arr.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        /**\n         * Insert a series or an axis in a collection with other items, either the\n         * chart series or yAxis series or axis collections, in the correct order\n         * according to the index option and whether it is internal. Used internally\n         * when adding series and axes.\n         *\n         * @private\n         * @function Highcharts.Chart#insertItem\n         * @param  {Highcharts.Series|Highcharts.Axis} item\n         *         The item to insert\n         * @param  {Array<Highcharts.Series>|Array<Highcharts.Axis>} collection\n         *         A collection of items, like `chart.series` or `xAxis.series`.\n         * @return {number} The index of the series in the collection.\n         */\n        function insertItem(item, collection) {\n            const indexOption = item.options.index, length = collection.length;\n            let i;\n            for (\n            // Internal item (navigator) should always be pushed to the end\n            i = item.options.isInternal ? length : 0; i < length + 1; i++) {\n                if (\n                // No index option, reached the end of the collection,\n                // equivalent to pushing\n                !collection[i] ||\n                    // Handle index option, the element to insert has lower index\n                    (isNumber(indexOption) &&\n                        indexOption < pick(collection[i].options.index, collection[i]._i)) ||\n                    // Insert the new item before other internal items\n                    // (navigator)\n                    collection[i].options.isInternal) {\n                    collection.splice(i, 0, item);\n                    break;\n                }\n            }\n            return i;\n        }\n        /**\n         * Adds an item to an array, if it is not present in the array.\n         *\n         * @function Highcharts.pushUnique\n         *\n         * @param {Array<unknown>} array\n         * The array to add the item to.\n         *\n         * @param {unknown} item\n         * The item to add.\n         *\n         * @return {boolean}\n         * Returns true, if the item was not present and has been added.\n         */\n        function pushUnique(array, item) {\n            return array.indexOf(item) < 0 && !!array.push(item);\n        }\n        /**\n         * Check if an object is null or undefined.\n         *\n         * @function Highcharts.defined\n         *\n         * @param {*} obj\n         *        The object to check.\n         *\n         * @return {boolean}\n         *         False if the object is null or undefined, otherwise true.\n         */\n        function defined(obj) {\n            return typeof obj !== 'undefined' && obj !== null;\n        }\n        /**\n         * Set or get an attribute or an object of attributes.\n         *\n         * To use as a setter, pass a key and a value, or let the second argument be a\n         * collection of keys and values. When using a collection, passing a value of\n         * `null` or `undefined` will remove the attribute.\n         *\n         * To use as a getter, pass only a string as the second argument.\n         *\n         * @function Highcharts.attr\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} elem\n         *        The DOM element to receive the attribute(s).\n         *\n         * @param {string|Highcharts.HTMLAttributes|Highcharts.SVGAttributes} [keyOrAttribs]\n         *        The property or an object of key-value pairs.\n         *\n         * @param {number|string} [value]\n         *        The value if a single property is set.\n         *\n         * @return {string|null|undefined}\n         *         When used as a getter, return the value.\n         */\n        function attr(elem, keyOrAttribs, value) {\n            const isGetter = isString(keyOrAttribs) && !defined(value);\n            let ret;\n            const attrSingle = (value, key) => {\n                // Set the value\n                if (defined(value)) {\n                    elem.setAttribute(key, value);\n                    // Get the value\n                }\n                else if (isGetter) {\n                    ret = elem.getAttribute(key);\n                    // IE7 and below cannot get class through getAttribute (#7850)\n                    if (!ret && key === 'class') {\n                        ret = elem.getAttribute(key + 'Name');\n                    }\n                    // Remove the value\n                }\n                else {\n                    elem.removeAttribute(key);\n                }\n            };\n            // If keyOrAttribs is a string\n            if (isString(keyOrAttribs)) {\n                attrSingle(value, keyOrAttribs);\n                // Else if keyOrAttribs is defined, it is a hash of key/value pairs\n            }\n            else {\n                objectEach(keyOrAttribs, attrSingle);\n            }\n            return ret;\n        }\n        /**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function Highcharts.splat\n         *\n         * @param {*} obj\n         *        The object to splat.\n         *\n         * @return {Array}\n         *         The produced or original array.\n         */\n        function splat(obj) {\n            return isArray(obj) ? obj : [obj];\n        }\n        /**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function Highcharts.syncTimeout\n         *\n         * @param {Function} fn\n         *        The function callback.\n         *\n         * @param {number} delay\n         *        Delay in milliseconds.\n         *\n         * @param {*} [context]\n         *        An optional context to send to the function callback.\n         *\n         * @return {number}\n         *         An identifier for the timeout that can later be cleared with\n         *         Highcharts.clearTimeout. Returns -1 if there is no timeout.\n         */\n        function syncTimeout(fn, delay, context) {\n            if (delay > 0) {\n                return setTimeout(fn, delay, context);\n            }\n            fn.call(0, context);\n            return -1;\n        }\n        /**\n         * Internal clear timeout. The function checks that the `id` was not removed\n         * (e.g. by `chart.destroy()`). For the details see\n         * [issue #7901](https://github.com/highcharts/highcharts/issues/7901).\n         *\n         * @function Highcharts.clearTimeout\n         *\n         * @param {number|undefined} id\n         * Id of a timeout.\n         */\n        function internalClearTimeout(id) {\n            if (defined(id)) {\n                clearTimeout(id);\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function Highcharts.extend<T>\n         *\n         * @param {T|undefined} a\n         *        The object to be extended.\n         *\n         * @param {Partial<T>} b\n         *        The object to add to the first one.\n         *\n         * @return {T}\n         *         Object a, the original object.\n         */\n        function extend(a, b) {\n            /* eslint-enable valid-jsdoc */\n            let n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) { // eslint-disable-line guard-for-in\n                a[n] = b[n];\n            }\n            return a;\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Return the first value that is not null or undefined.\n         *\n         * @function Highcharts.pick<T>\n         *\n         * @param {...Array<T|null|undefined>} items\n         *        Variable number of arguments to inspect.\n         *\n         * @return {T}\n         *         The value of the first argument that is not null or undefined.\n         */\n        function pick() {\n            const args = arguments;\n            const length = args.length;\n            for (let i = 0; i < length; i++) {\n                const arg = args[i];\n                if (typeof arg !== 'undefined' && arg !== null) {\n                    return arg;\n                }\n            }\n        }\n        /**\n         * Set CSS on a given element.\n         *\n         * @function Highcharts.css\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} el\n         *        An HTML DOM element.\n         *\n         * @param {Highcharts.CSSObject} styles\n         *        Style object with camel case property names.\n         *\n         * @return {void}\n         */\n        function css(el, styles) {\n            extend(el.style, styles);\n        }\n        /**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function Highcharts.createElement\n         *\n         * @param {string} tag\n         *        The HTML tag.\n         *\n         * @param {Highcharts.HTMLAttributes} [attribs]\n         *        Attributes as an object of key-value pairs.\n         *\n         * @param {Highcharts.CSSObject} [styles]\n         *        Styles as an object of key-value pairs.\n         *\n         * @param {Highcharts.HTMLDOMElement} [parent]\n         *        The parent HTML object.\n         *\n         * @param {boolean} [nopad=false]\n         *        If true, remove all padding, border and margin.\n         *\n         * @return {Highcharts.HTMLDOMElement}\n         *         The created DOM element.\n         */\n        function createElement(tag, attribs, styles, parent, nopad) {\n            const el = doc.createElement(tag);\n            if (attribs) {\n                extend(el, attribs);\n            }\n            if (nopad) {\n                css(el, { padding: '0', border: 'none', margin: '0' });\n            }\n            if (styles) {\n                css(el, styles);\n            }\n            if (parent) {\n                parent.appendChild(el);\n            }\n            return el;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Extend a prototyped class by new members.\n         *\n         * @deprecated\n         * @function Highcharts.extendClass<T>\n         *\n         * @param {Highcharts.Class<T>} parent\n         *        The parent prototype to inherit.\n         *\n         * @param {Highcharts.Dictionary<*>} members\n         *        A collection of prototype members to add or override compared to the\n         *        parent prototype.\n         *\n         * @return {Highcharts.Class<T>}\n         *         A new prototype.\n         */\n        function extendClass(parent, members) {\n            const obj = (function () { });\n            obj.prototype = new parent(); // eslint-disable-line new-cap\n            extend(obj.prototype, members);\n            return obj;\n        }\n        /**\n         * Left-pad a string to a given length by adding a character repetitively.\n         *\n         * @function Highcharts.pad\n         *\n         * @param {number} number\n         *        The input string or number.\n         *\n         * @param {number} [length]\n         *        The desired string length.\n         *\n         * @param {string} [padder=0]\n         *        The character to pad with.\n         *\n         * @return {string}\n         *         The padded string.\n         */\n        function pad(number, length, padder) {\n            return new Array((length || 2) +\n                1 -\n                String(number)\n                    .replace('-', '')\n                    .length).join(padder || '0') + number;\n        }\n        /**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function Highcharts.relativeLength\n         *\n         * @param {Highcharts.RelativeSize} value\n         *        A percentage string or a number.\n         *\n         * @param {number} base\n         *        The full length that represents 100%.\n         *\n         * @param {number} [offset=0]\n         *        A pixel offset to apply for percentage values. Used internally in\n         *        axis positioning.\n         *\n         * @return {number}\n         *         The computed length.\n         */\n        function relativeLength(value, base, offset) {\n            return (/%$/).test(value) ?\n                (base * parseFloat(value) / 100) + (offset || 0) :\n                parseFloat(value);\n        }\n        /**\n         * Replaces text in a string with a given replacement in a loop to catch nested\n         * matches after previous replacements.\n         *\n         * @function Highcharts.replaceNested\n         *\n         * @param {string} text\n         * Text to search and modify.\n         *\n         * @param {...Array<(RegExp|string)>} replacements\n         * One or multiple tuples with search pattern (`[0]: (string|RegExp)`) and\n         * replacement (`[1]: string`) for matching text.\n         *\n         * @return {string}\n         * Text with replacements.\n         */\n        function replaceNested(text, ...replacements) {\n            let previous, replacement;\n            do {\n                previous = text;\n                for (replacement of replacements) {\n                    text = text.replace(replacement[0], replacement[1]);\n                }\n            } while (text !== previous);\n            return text;\n        }\n        /**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function Highcharts.wrap\n         *\n         * @param {*} obj\n         *        The context object that the method belongs to. In real cases, this is\n         *        often a prototype.\n         *\n         * @param {string} method\n         *        The name of the method to extend.\n         *\n         * @param {Highcharts.WrapProceedFunction} func\n         *        A wrapper function callback. This function is called with the same\n         *        arguments as the original function, except that the original function\n         *        is unshifted and passed as the first argument.\n         */\n        function wrap(obj, method, func) {\n            const proceed = obj[method];\n            obj[method] = function () {\n                const outerArgs = arguments, scope = this;\n                return func.apply(this, [\n                    function () {\n                        return proceed.apply(scope, arguments.length ? arguments : outerArgs);\n                    }\n                ].concat([].slice.call(arguments)));\n            };\n        }\n        /**\n         * Get the magnitude of a number.\n         *\n         * @function Highcharts.getMagnitude\n         *\n         * @param {number} num\n         *        The number.\n         *\n         * @return {number}\n         *         The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc.\n         */\n        function getMagnitude(num) {\n            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n        }\n        /**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @deprecated\n         * @function Highcharts.normalizeTickInterval\n         *\n         * @param {number} interval\n         *        The raw, un-rounded interval.\n         *\n         * @param {Array<*>} [multiples]\n         *        Allowed multiples.\n         *\n         * @param {number} [magnitude]\n         *        The magnitude of the number.\n         *\n         * @param {boolean} [allowDecimals]\n         *        Whether to allow decimals.\n         *\n         * @param {boolean} [hasTickAmount]\n         *        If it has tickAmount, avoid landing on tick intervals lower than\n         *        original.\n         *\n         * @return {number}\n         *         The normalized interval.\n         *\n         * @todo\n         * Move this function to the Axis prototype. It is here only for historical\n         * reasons.\n         */\n        function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, hasTickAmount) {\n            let i, retInterval = interval;\n            // Round to a tenfold of 1, 2, 2.5 or 5\n            magnitude = pick(magnitude, getMagnitude(interval));\n            const normalized = interval / magnitude;\n            // Multiples for a linear scale\n            if (!multiples) {\n                multiples = hasTickAmount ?\n                    // Finer grained ticks when the tick amount is hard set, including\n                    // when alignTicks is true on multiple axes (#4580).\n                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n                    // Else, let ticks fall on rounder numbers\n                    [1, 2, 2.5, 5, 10];\n                // The allowDecimals option\n                if (allowDecimals === false) {\n                    if (magnitude === 1) {\n                        multiples = multiples.filter(function (num) {\n                            return num % 1 === 0;\n                        });\n                    }\n                    else if (magnitude <= 0.1) {\n                        multiples = [1 / magnitude];\n                    }\n                }\n            }\n            // Normalize the interval to the nearest multiple\n            for (i = 0; i < multiples.length; i++) {\n                retInterval = multiples[i];\n                // Only allow tick amounts smaller than natural\n                if ((hasTickAmount &&\n                    retInterval * magnitude >= interval) ||\n                    (!hasTickAmount &&\n                        (normalized <=\n                            (multiples[i] +\n                                (multiples[i + 1] || multiples[i])) / 2))) {\n                    break;\n                }\n            }\n            // Multiply back to the correct magnitude. Correct floats to appropriate\n            // precision (#6085).\n            retInterval = correctFloat(retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10));\n            return retInterval;\n        }\n        /**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function Highcharts.stableSort\n         *\n         * @param {Array<*>} arr\n         *        The array to sort.\n         *\n         * @param {Function} sortFunction\n         *        The function to sort it with, like with regular Array.prototype.sort.\n         */\n        function stableSort(arr, sortFunction) {\n            // @todo It seems like Chrome since v70 sorts in a stable way internally,\n            // plus all other browsers do it, so over time we may be able to remove this\n            // function\n            const length = arr.length;\n            let sortValue, i;\n            // Add index to each item\n            for (i = 0; i < length; i++) {\n                arr[i].safeI = i; // Stable sort index\n            }\n            arr.sort(function (a, b) {\n                sortValue = sortFunction(a, b);\n                return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n            });\n            // Remove index from items\n            for (i = 0; i < length; i++) {\n                delete arr[i].safeI; // Stable sort index\n            }\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMin\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The lowest number.\n         */\n        function arrayMin(data) {\n            let i = data.length, min = data[0];\n            while (i--) {\n                if (data[i] < min) {\n                    min = data[i];\n                }\n            }\n            return min;\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMax\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The highest number.\n         */\n        function arrayMax(data) {\n            let i = data.length, max = data[0];\n            while (i--) {\n                if (data[i] > max) {\n                    max = data[i];\n                }\n            }\n            return max;\n        }\n        /**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function Highcharts.destroyObjectProperties\n         *\n         * @param {*} obj\n         *        The object to destroy properties on.\n         *\n         * @param {*} [except]\n         *        Exception, do not destroy this property, only delete it.\n         */\n        function destroyObjectProperties(obj, except, destructablesOnly) {\n            objectEach(obj, function (val, n) {\n                // If the object is non-null and destroy is defined\n                if (val !== except && val?.destroy) {\n                    // Invoke the destroy\n                    val.destroy();\n                }\n                // Delete the property from the object\n                if (val?.destroy || !destructablesOnly) {\n                    delete obj[n];\n                }\n            });\n        }\n        /**\n         * Discard a HTML element\n         *\n         * @function Highcharts.discardElement\n         *\n         * @param {Highcharts.HTMLDOMElement} element\n         *        The HTML node to discard.\n         */\n        function discardElement(element) {\n            if (element && element.parentElement) {\n                element.parentElement.removeChild(element);\n            }\n        }\n        /**\n         * Fix JS round off float errors.\n         *\n         * @function Highcharts.correctFloat\n         *\n         * @param {number} num\n         *        A float number to fix.\n         *\n         * @param {number} [prec=14]\n         *        The precision.\n         *\n         * @return {number}\n         *         The corrected float number.\n         */\n        function correctFloat(num, prec) {\n            // When the number is higher than 1e14 use the number (#16275)\n            return num > 1e14 ? num : parseFloat(num.toPrecision(prec || 14));\n        }\n        /**\n         * The time unit lookup\n         *\n         * @ignore\n         */\n        const timeUnits = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 24 * 3600000,\n            week: 7 * 24 * 3600000,\n            month: 28 * 24 * 3600000,\n            year: 364 * 24 * 3600000\n        };\n        /**\n         * Easing definition\n         *\n         * @private\n         * @function Math.easeInOutSine\n         *\n         * @param {number} pos\n         *        Current position, ranging from 0 to 1.\n         *\n         * @return {number}\n         *         Ease result\n         */\n        Math.easeInOutSine = function (pos) {\n            return -0.5 * (Math.cos(Math.PI * pos) - 1);\n        };\n        /**\n         * Convenience function to get the align factor, used several places for\n         * computing positions\n         * @private\n         */\n        const getAlignFactor = (align = '') => ({\n            center: 0.5,\n            right: 1,\n            middle: 0.5,\n            bottom: 1\n        }[align] || 0);\n        /**\n         * Find the closest distance between two values of a two-dimensional array\n         * @private\n         * @function Highcharts.getClosestDistance\n         *\n         * @param {Array<Array<number>>} arrays\n         *          An array of arrays of numbers\n         *\n         * @return {number | undefined}\n         *          The closest distance between values\n         */\n        function getClosestDistance(arrays, onError) {\n            const allowNegative = !onError;\n            let closest, loopLength, distance, i;\n            arrays.forEach((xData) => {\n                if (xData.length > 1) {\n                    loopLength = xData.length - 1;\n                    for (i = loopLength; i > 0; i--) {\n                        distance = xData[i] - xData[i - 1];\n                        if (distance < 0 && !allowNegative) {\n                            onError?.();\n                            // Only one call\n                            onError = void 0;\n                        }\n                        else if (distance && (typeof closest === 'undefined' || distance < closest)) {\n                            closest = distance;\n                        }\n                    }\n                }\n            });\n            return closest;\n        }\n        /**\n         * Returns the value of a property path on a given object.\n         *\n         * @private\n         * @function getNestedProperty\n         *\n         * @param {string} path\n         * Path to the property, for example `custom.myValue`.\n         *\n         * @param {unknown} obj\n         * Instance containing the property on the specific path.\n         *\n         * @return {unknown}\n         * The unknown property value.\n         */\n        function getNestedProperty(path, parent) {\n            const pathElements = path.split('.');\n            while (pathElements.length && defined(parent)) {\n                const pathElement = pathElements.shift();\n                // Filter on the key\n                if (typeof pathElement === 'undefined' ||\n                    pathElement === '__proto__') {\n                    return; // Undefined\n                }\n                if (pathElement === 'this') {\n                    let thisProp;\n                    if (isObject(parent)) {\n                        thisProp = parent['@this'];\n                    }\n                    return thisProp ?? parent;\n                }\n                const child = parent[pathElement];\n                // Filter on the child\n                if (!defined(child) ||\n                    typeof child === 'function' ||\n                    typeof child.nodeType === 'number' ||\n                    child === win) {\n                    return; // Undefined\n                }\n                // Else, proceed\n                parent = child;\n            }\n            return parent;\n        }\n        /**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function Highcharts.getStyle\n         *\n         * @param {Highcharts.HTMLDOMElement} el\n         * An HTML element.\n         *\n         * @param {string} prop\n         * The property name.\n         *\n         * @param {boolean} [toInt=true]\n         * Parse to integer.\n         *\n         * @return {number|string|undefined}\n         * The style value.\n         */\n        function getStyle(el, prop, toInt) {\n            let style;\n            // For width and height, return the actual inner pixel size (#4913)\n            if (prop === 'width') {\n                let offsetWidth = Math.min(el.offsetWidth, el.scrollWidth);\n                // In flex boxes, we need to use getBoundingClientRect and floor it,\n                // because scrollWidth doesn't support subpixel precision (#6427) ...\n                const boundingClientRectWidth = el.getBoundingClientRect &&\n                    el.getBoundingClientRect().width;\n                // ...unless if the containing div or its parents are transform-scaled\n                // down, in which case the boundingClientRect can't be used as it is\n                // also scaled down (#9871, #10498).\n                if (boundingClientRectWidth < offsetWidth &&\n                    boundingClientRectWidth >= offsetWidth - 1) {\n                    offsetWidth = Math.floor(boundingClientRectWidth);\n                }\n                return Math.max(0, // #8377\n                (offsetWidth -\n                    (getStyle(el, 'padding-left', true) || 0) -\n                    (getStyle(el, 'padding-right', true) || 0)));\n            }\n            if (prop === 'height') {\n                return Math.max(0, // #8377\n                (Math.min(el.offsetHeight, el.scrollHeight) -\n                    (getStyle(el, 'padding-top', true) || 0) -\n                    (getStyle(el, 'padding-bottom', true) || 0)));\n            }\n            // Otherwise, get the computed style\n            const css = win.getComputedStyle(el, void 0); // eslint-disable-line no-undefined\n            if (css) {\n                style = css.getPropertyValue(prop);\n                if (pick(toInt, prop !== 'opacity')) {\n                    style = pInt(style);\n                }\n            }\n            return style;\n        }\n        /**\n         * Return the value of the first element in the array that satisfies the\n         * provided testing function.\n         *\n         * @function Highcharts.find<T>\n         *\n         * @param {Array<T>} arr\n         *        The array to test.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if this item satisfies the condition.\n         *\n         * @return {T|undefined}\n         *         The value of the element.\n         */\n        const find = Array.prototype.find ?\n            function (arr, callback) {\n                return arr.find(callback);\n            } :\n            // Legacy implementation. PhantomJS, IE <= 11 etc. #7223.\n            function (arr, callback) {\n                let i;\n                const length = arr.length;\n                for (i = 0; i < length; i++) {\n                    if (callback(arr[i], i)) { // eslint-disable-line node/callback-return\n                        return arr[i];\n                    }\n                }\n            };\n        /**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function Highcharts.offset\n         *\n         * @param {global.Element} el\n         *        The DOM element.\n         *\n         * @return {Highcharts.OffsetObject}\n         *         An object containing `left` and `top` properties for the position in\n         *         the page.\n         */\n        function offset(el) {\n            const docElem = doc.documentElement, box = (el.parentElement || el.parentNode) ?\n                el.getBoundingClientRect() :\n                { top: 0, left: 0, width: 0, height: 0 };\n            return {\n                top: box.top + (win.pageYOffset || docElem.scrollTop) -\n                    (docElem.clientTop || 0),\n                left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n                    (docElem.clientLeft || 0),\n                width: box.width,\n                height: box.height\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Iterate over object key pairs in an object.\n         *\n         * @function Highcharts.objectEach<T>\n         *\n         * @param {*} obj\n         *        The object to iterate over.\n         *\n         * @param {Highcharts.ObjectEachCallbackFunction<T>} fn\n         *        The iterator callback. It passes three arguments:\n         *        * value - The property value.\n         *        * key - The property key.\n         *        * obj - The object that objectEach is being applied to.\n         *\n         * @param {T} [ctx]\n         *        The context.\n         */\n        function objectEach(obj, fn, ctx) {\n            /* eslint-enable valid-jsdoc */\n            for (const key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    fn.call(ctx || obj[key], obj[key], key, obj);\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Add an event listener.\n         *\n         * @function Highcharts.addEvent<T>\n         *\n         * @param  {Highcharts.Class<T>|T} el\n         *         The element or object to add a listener to. It can be a\n         *         {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         *\n         * @param  {string} type\n         *         The event type.\n         *\n         * @param  {Highcharts.EventCallbackFunction<T>|Function} fn\n         *         The function callback to execute when the event is fired.\n         *\n         * @param  {Highcharts.EventOptionsObject} [options]\n         *         Options for adding the event.\n         *\n         * @sample highcharts/members/addevent\n         *         Use a general `render` event to draw shapes on a chart\n         *\n         * @return {Function}\n         *         A callback function to remove the added event.\n         */\n        function addEvent(el, type, fn, options = {}) {\n            /* eslint-enable valid-jsdoc */\n            // Add hcEvents to either the prototype (in case we're running addEvent on a\n            // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n            // inherited down the prototype chain, in which case we need to set the\n            // property on this instance (which may itself be a prototype).\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                owner.hcEvents = {};\n            }\n            const events = owner.hcEvents;\n            // Allow click events added to points, otherwise they will be prevented by\n            // the TouchPointer.pinch function after a pinch zoom operation (#7091).\n            if (H.Point && // Without H a dependency loop occurs\n                el instanceof H.Point &&\n                el.series &&\n                el.series.chart) {\n                el.series.chart.runTrackerClick = true;\n            }\n            // Handle DOM events\n            // If the browser supports passive events, add it to improve performance\n            // on touch events (#11353).\n            const addEventListener = el.addEventListener;\n            if (addEventListener) {\n                addEventListener.call(el, type, fn, H.supportsPassiveEvents ? {\n                    passive: options.passive === void 0 ?\n                        type.indexOf('touch') !== -1 : options.passive,\n                    capture: false\n                } : false);\n            }\n            if (!events[type]) {\n                events[type] = [];\n            }\n            const eventObject = {\n                fn,\n                order: typeof options.order === 'number' ? options.order : Infinity\n            };\n            events[type].push(eventObject);\n            // Order the calls\n            events[type].sort((a, b) => a.order - b.order);\n            // Return a function that can be called to remove this event.\n            return function () {\n                removeEvent(el, type, fn);\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.removeEvent<T>\n         *\n         * @param {Highcharts.Class<T>|T} el\n         *        The element to remove events on.\n         *\n         * @param {string} [type]\n         *        The type of events to remove. If undefined, all events are removed\n         *        from the element.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>} [fn]\n         *        The specific callback to remove. If undefined, all events that match\n         *        the element and optionally the type are removed.\n         *\n         * @return {void}\n         */\n        function removeEvent(el, type, fn) {\n            /* eslint-enable valid-jsdoc */\n            /**\n             * @private\n             */\n            function removeOneEvent(type, fn) {\n                const removeEventListener = el.removeEventListener;\n                if (removeEventListener) {\n                    removeEventListener.call(el, type, fn, false);\n                }\n            }\n            /**\n             * @private\n             */\n            function removeAllEvents(eventCollection) {\n                let types, len;\n                if (!el.nodeName) {\n                    return; // Break on non-DOM events\n                }\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                }\n                else {\n                    types = eventCollection;\n                }\n                objectEach(types, function (_val, n) {\n                    if (eventCollection[n]) {\n                        len = eventCollection[n].length;\n                        while (len--) {\n                            removeOneEvent(n, eventCollection[n][len].fn);\n                        }\n                    }\n                });\n            }\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                const events = owner.hcEvents;\n                if (type) {\n                    const typeEvents = (events[type] || []);\n                    if (fn) {\n                        events[type] = typeEvents.filter(function (obj) {\n                            return fn !== obj.fn;\n                        });\n                        removeOneEvent(type, fn);\n                    }\n                    else {\n                        removeAllEvents(events);\n                        events[type] = [];\n                    }\n                }\n                else {\n                    removeAllEvents(events);\n                    delete owner.hcEvents;\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.fireEvent<T>\n         *\n         * @param {T} el\n         *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n         *        an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The type of event.\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Custom event arguments that are passed on as an argument to the event\n         *        handler.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>|Function} [defaultFunction]\n         *        The default function to execute if the other listeners haven't\n         *        returned false.\n         *\n         * @return {void}\n         */\n        function fireEvent(el, type, eventArguments, defaultFunction) {\n            /* eslint-enable valid-jsdoc */\n            eventArguments = eventArguments || {};\n            if (doc.createEvent &&\n                (el.dispatchEvent ||\n                    (el.fireEvent &&\n                        // Enable firing events on Highcharts instance.\n                        el !== H))) {\n                const e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                eventArguments = extend(e, eventArguments);\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(eventArguments);\n                }\n                else {\n                    el.fireEvent(type, eventArguments);\n                }\n            }\n            else if (el.hcEvents) {\n                if (!eventArguments.target) {\n                    // We're running a custom event\n                    extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip\n                        // default handler if called. The built-in\n                        // defaultPrevented property is not overwritable (#5112)\n                        preventDefault: function () {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking\n                        // the zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event\n                        // (#2297). If it is set, we're running a browser event.\n                        type: type\n                    });\n                }\n                const events = [];\n                let object = el;\n                let multilevel = false;\n                // Recurse up the inheritance chain and collect hcEvents set as own\n                // objects on the prototypes.\n                while (object.hcEvents) {\n                    if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                        object.hcEvents[type]) {\n                        if (events.length) {\n                            multilevel = true;\n                        }\n                        events.unshift.apply(events, object.hcEvents[type]);\n                    }\n                    object = Object.getPrototypeOf(object);\n                }\n                // For performance reasons, only sort the event handlers in case we are\n                // dealing with multiple levels in the prototype chain. Otherwise, the\n                // events are already sorted in the addEvent function.\n                if (multilevel) {\n                    // Order the calls\n                    events.sort((a, b) => a.order - b.order);\n                }\n                // Call the collected event handlers\n                events.forEach((obj) => {\n                    // If the event handler returns false, prevent the default handler\n                    // from executing\n                    if (obj.fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                });\n            }\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction.call(el, eventArguments);\n            }\n        }\n        let serialMode;\n        /**\n         * Get a unique key for using in internal element id's and pointers. The key is\n         * composed of a random hash specific to this Highcharts instance, and a\n         * counter.\n         *\n         * @example\n         * let id = uniqueKey(); // => 'highcharts-x45f6hp-0'\n         *\n         * @function Highcharts.uniqueKey\n         *\n         * @return {string}\n         * A unique key.\n         */\n        const uniqueKey = (function () {\n            const hash = Math.random().toString(36).substring(2, 9) + '-';\n            let id = 0;\n            return function () {\n                return 'highcharts-' + (serialMode ? '' : hash) + id++;\n            };\n        }());\n        /**\n         * Activates a serial mode for element IDs provided by\n         * {@link Highcharts.uniqueKey}. This mode can be used in automated tests, where\n         * a simple comparison of two rendered SVG graphics is needed.\n         *\n         * **Note:** This is only for testing purposes and will break functionality in\n         * webpages with multiple charts.\n         *\n         * @example\n         * if (\n         *   process &&\n         *   process.env.NODE_ENV === 'development'\n         * ) {\n         *   Highcharts.useSerialIds(true);\n         * }\n         *\n         * @function Highcharts.useSerialIds\n         *\n         * @param {boolean} [mode]\n         * Changes the state of serial mode.\n         *\n         * @return {boolean|undefined}\n         * State of the serial mode.\n         */\n        function useSerialIds(mode) {\n            return (serialMode = pick(mode, serialMode));\n        }\n        function isFunction(obj) {\n            return typeof obj === 'function';\n        }\n        function ucfirst(s) {\n            return ((isString(s) ?\n                s.substring(0, 1).toUpperCase() + s.substring(1) :\n                String(s)));\n        }\n        /* *\n         *\n         *  External\n         *\n         * */\n        // Register Highcharts as a plugin in jQuery\n        if (win.jQuery) {\n            /**\n             * Highcharts-extended JQuery.\n             *\n             * @external JQuery\n             */\n            /**\n             * Helper function to return the chart of the current JQuery selector\n             * element.\n             *\n             * @function external:JQuery#highcharts\n             *\n             * @return {Highcharts.Chart}\n             *         The chart that is linked to the JQuery selector element.\n             */ /**\n            * Factory function to create a chart in the current JQuery selector\n            * element.\n            *\n            * @function external:JQuery#highcharts\n            *\n            * @param {'Chart'|'Map'|'StockChart'|string} [className]\n            *        Name of the factory class in the Highcharts namespace.\n            *\n            * @param {Highcharts.Options} [options]\n            *        The chart options structure.\n            *\n            * @param {Highcharts.ChartCallbackFunction} [callback]\n            *        Function to run when the chart has loaded and all external\n            *        images are loaded. Defining a\n            *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n            *        handler is equivalent.\n            *\n            * @return {JQuery}\n            *         The current JQuery selector.\n            */\n            win.jQuery.fn.highcharts = function () {\n                const args = [].slice.call(arguments);\n                if (this[0]) { // `this[0]` is the renderTo div\n                    // Create the chart\n                    if (args[0]) {\n                        new H[ // eslint-disable-line computed-property-spacing, no-new\n                        // Constructor defaults to Chart\n                        isString(args[0]) ? args.shift() : 'Chart'](this[0], args[0], args[1]);\n                        return this;\n                    }\n                    // When called without parameters or with the return argument,\n                    // return an existing chart\n                    return charts[attr(this[0], 'data-highcharts-chart')];\n                }\n            };\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // TODO use named exports when supported.\n        const Utilities = {\n            addEvent,\n            arrayMax,\n            arrayMin,\n            attr,\n            clamp,\n            clearTimeout: internalClearTimeout,\n            correctFloat,\n            createElement,\n            crisp,\n            css,\n            defined,\n            destroyObjectProperties,\n            diffObjects,\n            discardElement,\n            erase,\n            error,\n            extend,\n            extendClass,\n            find,\n            fireEvent,\n            getAlignFactor,\n            getClosestDistance,\n            getMagnitude,\n            getNestedProperty,\n            getStyle,\n            insertItem,\n            isArray,\n            isClass,\n            isDOMElement,\n            isFunction,\n            isNumber,\n            isObject,\n            isString,\n            merge,\n            normalizeTickInterval,\n            objectEach,\n            offset,\n            pad,\n            pick,\n            pInt,\n            pushUnique,\n            relativeLength,\n            removeEvent,\n            replaceNested,\n            splat,\n            stableSort,\n            syncTimeout,\n            timeUnits,\n            ucfirst,\n            uniqueKey,\n            useSerialIds,\n            wrap\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms and defer of 0ms.\n         *\n         * @interface Highcharts.AnimationOptionsObject\n         */ /**\n        * A callback function to execute when the animation finishes.\n        * @name Highcharts.AnimationOptionsObject#complete\n        * @type {Function|undefined}\n        */ /**\n        * The animation defer in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#defer\n        * @type {number|undefined}\n        */ /**\n        * The animation duration in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#duration\n        * @type {number|undefined}\n        */ /**\n        * The name of an easing function as defined on the `Math` object.\n        * @name Highcharts.AnimationOptionsObject#easing\n        * @type {string|Function|undefined}\n        */ /**\n        * A callback function to execute on each step of each attribute or CSS property\n        * that's being animated. The first argument contains information about the\n        * animation and progress.\n        * @name Highcharts.AnimationOptionsObject#step\n        * @type {Function|undefined}\n        */\n        /**\n         * Creates a frame for the animated SVG element.\n         *\n         * @callback Highcharts.AnimationStepCallbackFunction\n         *\n         * @param {Highcharts.SVGElement} this\n         *        The SVG element to animate.\n         *\n         * @return {void}\n         */\n        /**\n         * Interface description for a class.\n         *\n         * @interface Highcharts.Class<T>\n         * @extends Function\n         */ /**\n        * Class constructor.\n        * @function Highcharts.Class<T>#new\n        * @param {...Array<*>} args\n        *        Constructor arguments.\n        * @return {T}\n        *         Class instance.\n        */\n        /**\n         * A style object with camel case property names to define visual appearance of\n         * a SVG element or HTML element. The properties can be whatever styles are\n         * supported on the given SVG or HTML element.\n         *\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         *\n         * @interface Highcharts.CSSObject\n         */ /**\n        * @name Highcharts.CSSObject#[key:string]\n        * @type {boolean|number|string|undefined}\n        */ /**\n        * Background style for the element.\n        * @name Highcharts.CSSObject#background\n        * @type {string|undefined}\n        */ /**\n        * Background color of the element.\n        * @name Highcharts.CSSObject#backgroundColor\n        * @type {Highcharts.ColorString|undefined}\n        */ /**\n        * Border style for the element.\n        * @name Highcharts.CSSObject#border\n        * @type {string|undefined}\n        */ /**\n        * Radius of the element border.\n        * @name Highcharts.CSSObject#borderRadius\n        * @type {number|undefined}\n        */ /**\n        * Color used in the element. The 'contrast' option is a Highcharts custom\n        * property that results in black or white, depending on the background of the\n        * element.\n        * @name Highcharts.CSSObject#color\n        * @type {'contrast'|Highcharts.ColorString|undefined}\n        */ /**\n        * Style of the mouse cursor when resting over the element.\n        * @name Highcharts.CSSObject#cursor\n        * @type {Highcharts.CursorValue|undefined}\n        */ /**\n        * Font family of the element text. Multiple values have to be in decreasing\n        * preference order and separated by comma.\n        * @name Highcharts.CSSObject#fontFamily\n        * @type {string|undefined}\n        */ /**\n        * Font size of the element text.\n        * @name Highcharts.CSSObject#fontSize\n        * @type {string|undefined}\n        */ /**\n        * Font weight of the element text.\n        * @name Highcharts.CSSObject#fontWeight\n        * @type {string|undefined}\n        */ /**\n        * Height of the element.\n        * @name Highcharts.CSSObject#height\n        * @type {number|undefined}\n        */ /**\n        * The maximum number of lines. If lines are cropped away, an ellipsis will be\n        * added.\n        * @name Highcharts.CSSObject#lineClamp\n        * @type {number|undefined}\n        */ /**\n        * Width of the element border.\n        * @name Highcharts.CSSObject#lineWidth\n        * @type {number|undefined}\n        */ /**\n        * Opacity of the element.\n        * @name Highcharts.CSSObject#opacity\n        * @type {number|undefined}\n        */ /**\n        * Space around the element content.\n        * @name Highcharts.CSSObject#padding\n        * @type {string|undefined}\n        */ /**\n        * Behaviour of the element when the mouse cursor rests over it.\n        * @name Highcharts.CSSObject#pointerEvents\n        * @type {string|undefined}\n        */ /**\n        * Positioning of the element.\n        * @name Highcharts.CSSObject#position\n        * @type {string|undefined}\n        */ /**\n        * Alignment of the element text.\n        * @name Highcharts.CSSObject#textAlign\n        * @type {string|undefined}\n        */ /**\n        * Additional decoration of the element text.\n        * @name Highcharts.CSSObject#textDecoration\n        * @type {string|undefined}\n        */ /**\n        * Outline style of the element text.\n        * @name Highcharts.CSSObject#textOutline\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text. Highcharts SVG elements support\n        * `ellipsis` when a `width` is set.\n        * @name Highcharts.CSSObject#textOverflow\n        * @type {string|undefined}\n        */ /**\n        * Top spacing of the element relative to the parent element.\n        * @name Highcharts.CSSObject#top\n        * @type {string|undefined}\n        */ /**\n        * Animated transition of selected element properties.\n        * @name Highcharts.CSSObject#transition\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text.\n        * @name Highcharts.CSSObject#whiteSpace\n        * @type {string|undefined}\n        */ /**\n        * Width of the element.\n        * @name Highcharts.CSSObject#width\n        * @type {number|undefined}\n        */\n        /**\n         * All possible cursor styles.\n         *\n         * @typedef {'alias'|'all-scroll'|'auto'|'cell'|'col-resize'|'context-menu'|'copy'|'crosshair'|'default'|'e-resize'|'ew-resize'|'grab'|'grabbing'|'help'|'move'|'n-resize'|'ne-resize'|'nesw-resize'|'no-drop'|'none'|'not-allowed'|'ns-resize'|'nw-resize'|'nwse-resize'|'pointer'|'progress'|'row-resize'|'s-resize'|'se-resize'|'sw-resize'|'text'|'vertical-text'|'w-resize'|'wait'|'zoom-in'|'zoom-out'} Highcharts.CursorValue\n         */\n        /**\n         * All possible dash styles.\n         *\n         * @typedef {'Dash'|'DashDot'|'Dot'|'LongDash'|'LongDashDot'|'LongDashDotDot'|'ShortDash'|'ShortDashDot'|'ShortDashDotDot'|'ShortDot'|'Solid'} Highcharts.DashStyleValue\n         */\n        /**\n         * Generic dictionary in TypeScript notation.\n         * Use the native `AnyRecord` instead.\n         *\n         * @deprecated\n         * @interface Highcharts.Dictionary<T>\n         */ /**\n        * @name Highcharts.Dictionary<T>#[key:string]\n        * @type {T}\n        */\n        /**\n         * The function callback to execute when the event is fired. The `this` context\n         * contains the instance, that fired the event.\n         *\n         * @callback Highcharts.EventCallbackFunction<T>\n         *\n         * @param {T} this\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Event arguments.\n         *\n         * @return {boolean|void}\n         */\n        /**\n         * The event options for adding function callback.\n         *\n         * @interface Highcharts.EventOptionsObject\n         */ /**\n        * The order the event handler should be called. This opens for having one\n        * handler be called before another, independent of in which order they were\n        * added.\n        * @name Highcharts.EventOptionsObject#order\n        * @type {number}\n        */ /**\n        * Whether an event should be passive or not.\n        * When set to `true`, the function specified by listener will never call\n        * `preventDefault()`.\n        * @name Highcharts.EventOptionsObject#passive\n        * @type boolean\n        */\n        /**\n         * Formats data as a string. Usually the data is accessible through the `this`\n         * keyword.\n         *\n         * @callback Highcharts.FormatterCallbackFunction<T>\n         *\n         * @param {T} this\n         *        Context to format\n         *\n         * @return {string}\n         *         Formatted text\n         */\n        /**\n         * An object of key-value pairs for HTML attributes.\n         *\n         * @typedef {Highcharts.Dictionary<boolean|number|string|Function>} Highcharts.HTMLAttributes\n         */\n        /**\n         * An HTML DOM element. The type is a reference to the regular HTMLElement in\n         * the global scope.\n         *\n         * @typedef {global.HTMLElement} Highcharts.HTMLDOMElement\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\n         */\n        /**\n         * The iterator callback.\n         *\n         * @callback Highcharts.ObjectEachCallbackFunction<T>\n         *\n         * @param {T} this\n         *        The context.\n         *\n         * @param {*} value\n         *        The property value.\n         *\n         * @param {string} key\n         *        The property key.\n         *\n         * @param {*} obj\n         *        The object that objectEach is being applied to.\n         */\n        /**\n         * An object containing `left` and `top` properties for the position in the\n         * page.\n         *\n         * @interface Highcharts.OffsetObject\n         */ /**\n        * Left distance to the page border.\n        * @name Highcharts.OffsetObject#left\n        * @type {number}\n        */ /**\n        * Top distance to the page border.\n        * @name Highcharts.OffsetObject#top\n        * @type {number}\n        */\n        /**\n         * Describes a range.\n         *\n         * @interface Highcharts.RangeObject\n         */ /**\n        * Maximum number of the range.\n        * @name Highcharts.RangeObject#max\n        * @type {number}\n        */ /**\n        * Minimum number of the range.\n        * @name Highcharts.RangeObject#min\n        * @type {number}\n        */\n        /**\n         * If a number is given, it defines the pixel length. If a percentage string is\n         * given, like for example `'50%'`, the setting defines a length relative to a\n         * base size, for example the size of a container.\n         *\n         * @typedef {number|string} Highcharts.RelativeSize\n         */\n        /**\n         * Proceed function to call original (wrapped) function.\n         *\n         * @callback Highcharts.WrapProceedFunction\n         *\n         * @param {*} [arg1]\n         *        Optional argument. Without any arguments defaults to first argument of\n         *        the wrapping function.\n         *\n         * @param {*} [arg2]\n         *        Optional argument. Without any arguments defaults to second argument\n         *        of the wrapping function.\n         *\n         * @param {*} [arg3]\n         *        Optional argument. Without any arguments defaults to third argument of\n         *        the wrapping function.\n         *\n         * @return {*}\n         *         Return value of the original function.\n         */\n        /**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions. The most important member of the namespace would be the\n         * chart constructor.\n         *\n         * @example\n         * let chart = Highcharts.chart('container', { ... });\n         *\n         * @namespace Highcharts\n         */\n        ''; // Detach doclets above\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Core/Renderer/HTML/AST.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { SVG_NS, win } = H;\n        const { attr, createElement, css, error, isFunction, isString, objectEach, splat } = U;\n        const { trustedTypes } = win;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // Create the trusted type policy. This should not be exposed.\n        const trustedTypesPolicy = (trustedTypes &&\n            isFunction(trustedTypes.createPolicy) &&\n            trustedTypes.createPolicy('highcharts', {\n                createHTML: (s) => s\n            }));\n        const emptyHTML = trustedTypesPolicy ?\n            trustedTypesPolicy.createHTML('') :\n            '';\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AST class represents an abstract syntax tree of HTML or SVG content. It\n         * can take HTML as an argument, parse it, optionally transform it to SVG, then\n         * perform sanitation before inserting it into the DOM.\n         *\n         * @class\n         * @name Highcharts.AST\n         *\n         * @param {string|Array<Highcharts.ASTNode>} source\n         * Either an HTML string or an ASTNode list to populate the tree.\n         */\n        class AST {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Filter an object of SVG or HTML attributes against the allow list.\n             *\n             * @static\n             *\n             * @function Highcharts.AST#filterUserAttributes\n             *\n             * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The filtered attributes\n             */\n            static filterUserAttributes(attributes) {\n                objectEach(attributes, (val, key) => {\n                    let valid = true;\n                    if (AST.allowedAttributes.indexOf(key) === -1) {\n                        valid = false;\n                    }\n                    if (['background', 'dynsrc', 'href', 'lowsrc', 'src']\n                        .indexOf(key) !== -1) {\n                        valid = isString(val) && AST.allowedReferences.some((ref) => val.indexOf(ref) === 0);\n                    }\n                    if (!valid) {\n                        error(33, false, void 0, {\n                            'Invalid attribute in config': `${key}`\n                        });\n                        delete attributes[key];\n                    }\n                    // #17753, < is not allowed in SVG attributes\n                    if (isString(val) && attributes[key]) {\n                        attributes[key] = val.replace(/</g, '&lt;');\n                    }\n                });\n                return attributes;\n            }\n            static parseStyle(style) {\n                return style\n                    .split(';')\n                    .reduce((styles, line) => {\n                    const pair = line.split(':').map((s) => s.trim()), key = pair.shift();\n                    if (key && pair.length) {\n                        styles[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = pair.join(':'); // #17146\n                    }\n                    return styles;\n                }, {});\n            }\n            /**\n             * Utility function to set html content for an element by passing in a\n             * markup string. The markup is safely parsed by the AST class to avoid\n             * XSS vulnerabilities. This function should be used instead of setting\n             * `innerHTML` in all cases where the content is not fully trusted.\n             *\n             * @static\n             * @function Highcharts.AST#setElementHTML\n             *\n             * @param {SVGDOMElement|HTMLDOMElement} el\n             * Node to set content of.\n             *\n             * @param {string} html\n             * Markup string\n             */\n            static setElementHTML(el, html) {\n                el.innerHTML = AST.emptyHTML; // Clear previous\n                if (html) {\n                    const ast = new AST(html);\n                    ast.addToDOM(el);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n            constructor(source) {\n                this.nodes = typeof source === 'string' ?\n                    this.parseMarkup(source) : source;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add the tree defined as a hierarchical JS structure to the DOM\n             *\n             * @function Highcharts.AST#addToDOM\n             *\n             * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n             * The node where it should be added\n             *\n             * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n             * The inserted node.\n             */\n            addToDOM(parent) {\n                /**\n                 * @private\n                 * @param {Highcharts.ASTNode} subtree\n                 * HTML/SVG definition\n                 * @param {Element} [subParent]\n                 * parent node\n                 * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n                 * The inserted node.\n                 */\n                function recurse(subtree, subParent) {\n                    let ret;\n                    splat(subtree).forEach(function (item) {\n                        const tagName = item.tagName;\n                        const textNode = item.textContent ?\n                            H.doc.createTextNode(item.textContent) :\n                            void 0;\n                        // Whether to ignore the AST filtering totally, #15345\n                        const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n                        let node;\n                        if (tagName) {\n                            if (tagName === '#text') {\n                                node = textNode;\n                            }\n                            else if (AST.allowedTags.indexOf(tagName) !== -1 ||\n                                bypassHTMLFiltering) {\n                                const NS = tagName === 'svg' ?\n                                    SVG_NS :\n                                    (subParent.namespaceURI || SVG_NS);\n                                const element = H.doc.createElementNS(NS, tagName);\n                                const attributes = item.attributes || {};\n                                // Apply attributes from root of AST node, legacy from\n                                // from before TextBuilder\n                                objectEach(item, function (val, key) {\n                                    if (key !== 'tagName' &&\n                                        key !== 'attributes' &&\n                                        key !== 'children' &&\n                                        key !== 'style' &&\n                                        key !== 'textContent') {\n                                        attributes[key] = val;\n                                    }\n                                });\n                                attr(element, bypassHTMLFiltering ?\n                                    attributes :\n                                    AST.filterUserAttributes(attributes));\n                                if (item.style) {\n                                    css(element, item.style);\n                                }\n                                // Add text content\n                                if (textNode) {\n                                    element.appendChild(textNode);\n                                }\n                                // Recurse\n                                recurse(item.children || [], element);\n                                node = element;\n                            }\n                            else {\n                                error(33, false, void 0, {\n                                    'Invalid tagName in config': tagName\n                                });\n                            }\n                        }\n                        // Add to the tree\n                        if (node) {\n                            subParent.appendChild(node);\n                        }\n                        ret = node;\n                    });\n                    // Return last node added (on top level it's the only one)\n                    return ret;\n                }\n                return recurse(this.nodes, parent);\n            }\n            /**\n             * Parse HTML/SVG markup into AST Node objects. Used internally from the\n             * constructor.\n             *\n             * @private\n             *\n             * @function Highcharts.AST#getNodesFromMarkup\n             *\n             * @param {string} markup The markup string.\n             *\n             * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n             */\n            parseMarkup(markup) {\n                const nodes = [];\n                markup = markup\n                    .trim()\n                    // The style attribute throws a warning when parsing when CSP is\n                    // enabled (#6884), so use an alias and pick it up below\n                    // Make all quotation marks parse correctly to DOM (#17627)\n                    .replace(/ style=([\"'])/g, ' data-style=$1');\n                let doc;\n                try {\n                    doc = new DOMParser().parseFromString(trustedTypesPolicy ?\n                        trustedTypesPolicy.createHTML(markup) :\n                        markup, 'text/html');\n                }\n                catch (e) {\n                    // There are two cases where this fails:\n                    // 1. IE9 and PhantomJS, where the DOMParser only supports parsing\n                    //    XML\n                    // 2. Due to a Chromium issue where chart redraws are triggered by\n                    //    a `beforeprint` event (#16931),\n                    //    https://issues.chromium.org/issues/40222135\n                }\n                if (!doc) {\n                    const body = createElement('div');\n                    body.innerHTML = markup;\n                    doc = { body };\n                }\n                const appendChildNodes = (node, addTo) => {\n                    const tagName = node.nodeName.toLowerCase();\n                    // Add allowed tags\n                    const astNode = {\n                        tagName\n                    };\n                    if (tagName === '#text') {\n                        astNode.textContent = node.textContent || '';\n                    }\n                    const parsedAttributes = node.attributes;\n                    // Add attributes\n                    if (parsedAttributes) {\n                        const attributes = {};\n                        [].forEach.call(parsedAttributes, (attrib) => {\n                            if (attrib.name === 'data-style') {\n                                astNode.style = AST.parseStyle(attrib.value);\n                            }\n                            else {\n                                attributes[attrib.name] = attrib.value;\n                            }\n                        });\n                        astNode.attributes = attributes;\n                    }\n                    // Handle children\n                    if (node.childNodes.length) {\n                        const children = [];\n                        [].forEach.call(node.childNodes, (childNode) => {\n                            appendChildNodes(childNode, children);\n                        });\n                        if (children.length) {\n                            astNode.children = children;\n                        }\n                    }\n                    addTo.push(astNode);\n                };\n                [].forEach.call(doc.body.childNodes, (childNode) => appendChildNodes(childNode, nodes));\n                return nodes;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * The list of allowed SVG or HTML attributes, used for sanitizing\n         * potentially harmful content from the chart configuration before adding to\n         * the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n         *\n         * @example\n         * // Allow a custom, trusted attribute\n         * Highcharts.AST.allowedAttributes.push('data-value');\n         *\n         * @name Highcharts.AST.allowedAttributes\n         * @type {Array<string>}\n         */\n        AST.allowedAttributes = [\n            'alt',\n            'aria-controls',\n            'aria-describedby',\n            'aria-expanded',\n            'aria-haspopup',\n            'aria-hidden',\n            'aria-label',\n            'aria-labelledby',\n            'aria-live',\n            'aria-pressed',\n            'aria-readonly',\n            'aria-roledescription',\n            'aria-selected',\n            'class',\n            'clip-path',\n            'color',\n            'colspan',\n            'cx',\n            'cy',\n            'd',\n            'dx',\n            'dy',\n            'disabled',\n            'fill',\n            'filterUnits',\n            'flood-color',\n            'flood-opacity',\n            'height',\n            'href',\n            'id',\n            'in',\n            'in2',\n            'markerHeight',\n            'markerWidth',\n            'offset',\n            'opacity',\n            'operator',\n            'orient',\n            'padding',\n            'paddingLeft',\n            'paddingRight',\n            'patternUnits',\n            'r',\n            'radius',\n            'refX',\n            'refY',\n            'role',\n            'scope',\n            'slope',\n            'src',\n            'startOffset',\n            'stdDeviation',\n            'stroke',\n            'stroke-linecap',\n            'stroke-width',\n            'style',\n            'tableValues',\n            'result',\n            'rowspan',\n            'summary',\n            'target',\n            'tabindex',\n            'text-align',\n            'text-anchor',\n            'textAnchor',\n            'textLength',\n            'title',\n            'type',\n            'valign',\n            'width',\n            'x',\n            'x1',\n            'x2',\n            'xlink:href',\n            'y',\n            'y1',\n            'y2',\n            'zIndex'\n        ];\n        /**\n         * The list of allowed references for referring attributes like `href` and\n         * `src`. Attribute values will only be allowed if they start with one of\n         * these strings.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n         *\n         * @example\n         * // Allow tel:\n         * Highcharts.AST.allowedReferences.push('tel:');\n         *\n         * @name    Highcharts.AST.allowedReferences\n         * @type    {Array<string>}\n         */\n        AST.allowedReferences = [\n            'https://',\n            'http://',\n            'mailto:',\n            '/',\n            '../',\n            './',\n            '#'\n        ];\n        /**\n         * The list of allowed SVG or HTML tags, used for sanitizing potentially\n         * harmful content from the chart configuration before adding to the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n         *\n         * @example\n         * // Allow a custom, trusted tag\n         * Highcharts.AST.allowedTags.push('blink'); // ;)\n         *\n         * @name    Highcharts.AST.allowedTags\n         * @type    {Array<string>}\n         */\n        AST.allowedTags = [\n            'a',\n            'abbr',\n            'b',\n            'br',\n            'button',\n            'caption',\n            'circle',\n            'clipPath',\n            'code',\n            'dd',\n            'defs',\n            'div',\n            'dl',\n            'dt',\n            'em',\n            'feComponentTransfer',\n            'feComposite',\n            'feDropShadow',\n            'feFlood',\n            'feFuncA',\n            'feFuncB',\n            'feFuncG',\n            'feFuncR',\n            'feGaussianBlur',\n            'feMorphology',\n            'feOffset',\n            'feMerge',\n            'feMergeNode',\n            'filter',\n            'h1',\n            'h2',\n            'h3',\n            'h4',\n            'h5',\n            'h6',\n            'hr',\n            'i',\n            'img',\n            'li',\n            'linearGradient',\n            'marker',\n            'ol',\n            'p',\n            'path',\n            'pattern',\n            'pre',\n            'rect',\n            'small',\n            'span',\n            'stop',\n            'strong',\n            'style',\n            'sub',\n            'sup',\n            'svg',\n            'table',\n            'text',\n            'textPath',\n            'thead',\n            'title',\n            'tbody',\n            'tspan',\n            'td',\n            'th',\n            'tr',\n            'u',\n            'ul',\n            '#text'\n        ];\n        AST.emptyHTML = emptyHTML;\n        /**\n         * Allow all custom SVG and HTML attributes, references and tags (together\n         * with potentially harmful ones) to be added to the DOM from the chart\n         * configuration. In other words, disable the allow-listing which is the\n         * primary functionality of the AST.\n         *\n         * WARNING: Setting this property to `true` while allowing untrusted user\n         * data in the chart configuration will expose your application to XSS\n         * security risks!\n         *\n         * Note that in case you want to allow a known set of tags or attributes,\n         * you should allow-list them instead of disabling the filtering totally.\n         * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n         * [allowedReferences](Highcharts.AST#.allowedReferences) and\n         * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n         * setting is intended only for those cases where allow-listing is not\n         * practical, and the chart configuration already comes from a secure\n         * source.\n         *\n         * @example\n         * // Allow all custom attributes, references and tags (disable DOM XSS\n         * // filtering)\n         * Highcharts.AST.bypassHTMLFiltering = true;\n         *\n         * @name Highcharts.AST.bypassHTMLFiltering\n         * @static\n         */\n        AST.bypassHTMLFiltering = false;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Serialized form of an SVG/HTML definition, including children.\n         *\n         * @interface Highcharts.ASTNode\n         */ /**\n        * @name Highcharts.ASTNode#attributes\n        * @type {Highcharts.SVGAttributes|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#children\n        * @type {Array<Highcharts.ASTNode>|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#tagName\n        * @type {string|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#textContent\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in file\n\n        return AST;\n    });\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         */\n        class DataModifier {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            benchmark(dataTable, options) {\n                const results = [];\n                const modifier = this;\n                const execute = () => {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                const defaultOptions = {\n                    iterations: 1\n                };\n                const { iterations } = merge(defaultOptions, options);\n                modifier.on('afterBenchmarkIteration', () => {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                const times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', () => {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', () => {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            }\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifier = this;\n                return new Promise((resolve, reject) => {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        reject(e);\n                    }\n                });\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/DataTableCore.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *\n         * */\n        const { fireEvent, isArray, objectEach, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTableCore {\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @example\n             * const dataTable = new Highcharts.DataTableCore({\n             *   columns: {\n             *     year: [2020, 2021, 2022, 2023],\n             *     cost: [11, 13, 12, 14],\n             *     revenue: [12, 15, 14, 18]\n             *   }\n             * });\n\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            constructor(options = {}) {\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for indentification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                let rowCount = 0;\n                objectEach(options.columns || {}, (column, columnName) => {\n                    this.columns[columnName] = column.slice();\n                    rowCount = Math.max(rowCount, column.length);\n                });\n                this.applyRowCount(rowCount);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies a row count to the table by setting the `rowCount` property and\n             * adjusting the length of all columns.\n             *\n             * @private\n             * @param {number} rowCount The new row count.\n             */\n            applyRowCount(rowCount) {\n                this.rowCount = rowCount;\n                objectEach(this.columns, (column) => {\n                    if (isArray(column)) { // Not on typed array\n                        column.length = rowCount;\n                    }\n                });\n            }\n            /**\n             * Fetches the given column by the canonical column name. Simplified version\n             * of the full `DataTable.getRow` method, always returning by reference.\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnName, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            asReference) {\n                return this.columns[columnName];\n            }\n            /**\n             * Retrieves all or the given columns. Simplified version of the full\n             * `DataTable.getColumns` method, always returning by reference.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNames, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            asReference) {\n                return (columnNames || Object.keys(this.columns)).reduce((columns, columnName) => {\n                    columns[columnName] = this.columns[columnName];\n                    return columns;\n                }, {});\n            }\n            /**\n             * Retrieves the row at a given index.\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @return {Record<string, number|string|undefined>|undefined}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNames) {\n                return (columnNames || Object.keys(this.columns)).map((key) => this.columns[key]?.[rowIndex]);\n            }\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumn(columnName, column = [], rowIndex = 0, eventDetail) {\n                this.setColumns({ [columnName]: column }, rowIndex, eventDetail);\n            }\n            /**\n             * * Sets cell values for multiple columns. Will insert new columns, if not\n             * found. Simplified version of the full `DataTable.setColumns`, limited to\n             * full replacement of the columns (undefined `rowIndex`).\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                let rowCount = this.rowCount;\n                objectEach(columns, (column, columnName) => {\n                    this.columns[columnName] = column.slice();\n                    rowCount = column.length;\n                });\n                this.applyRowCount(rowCount);\n                if (!eventDetail?.silent) {\n                    fireEvent(this, 'afterSetColumns');\n                    this.versionTag = uniqueKey();\n                }\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             * A simplified version of the full `DateTable.setRow`, limited to objects.\n             *\n             * @param {Record<string, number|string|undefined>} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex = this.rowCount, insert, eventDetail) {\n                const { columns } = this, indexRowCount = insert ? this.rowCount + 1 : rowIndex + 1;\n                objectEach(row, (cellValue, columnName) => {\n                    const column = columns[columnName] ||\n                        eventDetail?.addColumns !== false && new Array(indexRowCount);\n                    if (column) {\n                        if (insert) {\n                            column.splice(rowIndex, 0, cellValue);\n                        }\n                        else {\n                            column[rowIndex] = cellValue;\n                        }\n                        columns[columnName] = column;\n                    }\n                });\n                if (indexRowCount > this.rowCount) {\n                    this.applyRowCount(indexRowCount);\n                }\n                if (!eventDetail?.silent) {\n                    fireEvent(this, 'afterSetRows');\n                    this.versionTag = uniqueKey();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * A column of values in a data table.\n         * @typedef {Array<boolean|null|number|string|undefined>} Highcharts.DataTableColumn\n         */ /**\n        * A collection of data table columns defined by a object where the key is the\n        * column name and the value is an array of the column values.\n        * @typedef {Record<string, Highcharts.DataTableColumn>} Highcharts.DataTableColumnCollection\n        */\n        /**\n         * Options for the `DataTable` or `DataTableCore` classes.\n         * @interface Highcharts.DataTableOptions\n         */ /**\n        * The column options for the data table. The columns are defined by an object\n        * where the key is the column ID and the value is an array of the column\n        * values.\n        *\n        * @name Highcharts.DataTableOptions.columns\n        * @type {Highcharts.DataTableColumnCollection|undefined}\n        */ /**\n        * Custom ID to identify the new DataTable instance.\n        *\n        * @name Highcharts.DataTableOptions.id\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return DataTableCore;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Data/DataTableCore.js'], _modules['Core/Utilities.js']], function (DataTableCore, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *  - Jomar Hønsi\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, defined, fireEvent, extend, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTable extends DataTableCore {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            static isNull(row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    const columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = {}) {\n                super(options);\n                this.modified = this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            clone(skipColumns, eventDetail) {\n                const table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                const tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                    tableClone.originalRowIndexes = table.originalRowIndexes;\n                    tableClone.localRowIndexes = table.localRowIndexes;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone\n                });\n                return tableClone;\n            }\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            deleteColumns(columnNames, eventDetail) {\n                const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                        this.deleteRowIndexReferences();\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            }\n            /**\n             * Deletes the row index references. This is useful when the original table\n             * is deleted, and the references are no longer needed. This table is\n             * then considered an original table or a table that has the same row's\n             * order as the original table.\n             */\n            deleteRowIndexReferences() {\n                delete this.originalRowIndexes;\n                delete this.localRowIndexes;\n                // Here, in case of future need, can be implemented updating of the\n                // modified tables' row indexes references.\n            }\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1, eventDetail) {\n                const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    const columns = table.columns, columnNames = Object.keys(columns);\n                    for (let i = 0, iEnd = columnNames.length, column, deletedCells; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            }\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                if ([\n                    'afterDeleteColumns',\n                    'afterDeleteRows',\n                    'afterSetCell',\n                    'afterSetColumns',\n                    'afterSetRows'\n                ].includes(e.type)) {\n                    this.versionTag = uniqueKey();\n                }\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnName\n             * Column name of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            getCell(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    return column[rowIndex];\n                }\n            }\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            getCellAsBoolean(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                return !!(column && column[rowIndex]);\n            }\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnName\n             * Column name or to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            getCellAsNumber(columnName, rowIndex, useNaN) {\n                const table = this;\n                const column = table.columns[columnName];\n                let cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(`${cellValue ?? ''}`);\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            }\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            getCellAsString(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                return `${(column && column[rowIndex])}`;\n            }\n            /**\n             * Fetches the given column by the canonical column name.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnName, asReference) {\n                return this.getColumns([columnName], asReference)[columnName];\n            }\n            /**\n             * Fetches the given column by the canonical column name, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            getColumnAsNumbers(columnName, useNaN) {\n                const table = this, columns = table.columns;\n                const column = columns[columnName], columnAsNumber = [];\n                if (column) {\n                    const columnLength = column.length;\n                    if (useNaN) {\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i, true));\n                        }\n                    }\n                    else {\n                        for (let i = 0, cellValue; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            }\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            getColumnNames() {\n                const table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            }\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNames, asReference) {\n                const table = this, tableColumns = table.columns, columns = {};\n                columnNames = (columnNames || Object.keys(tableColumns));\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = tableColumns[columnName];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Takes the original row index and returns the local row index in the\n             * modified table for which this function is called.\n             *\n             * @param {number} originalRowIndex\n             * Original row index to get the local row index for.\n             *\n             * @return {number|undefined}\n             * Returns the local row index or `undefined` if not found.\n             */\n            getLocalRowIndex(originalRowIndex) {\n                const { localRowIndexes } = this;\n                if (localRowIndexes) {\n                    return localRowIndexes[originalRowIndex];\n                }\n                return originalRowIndex;\n            }\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            getModifier() {\n                return this.modifier;\n            }\n            /**\n             * Takes the local row index and returns the index of the corresponding row\n             * in the original table.\n             *\n             * @param {number} rowIndex\n             * Local row index to get the original row index for.\n             *\n             * @return {number|undefined}\n             * Returns the original row index or `undefined` if not found.\n             */\n            getOriginalRowIndex(rowIndex) {\n                const { originalRowIndexes } = this;\n                if (originalRowIndexes) {\n                    return originalRowIndexes[rowIndex];\n                }\n                return rowIndex;\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNames) {\n                return this.getRows(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            getRowCount() {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            }\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            getRowIndexBy(columnName, cellValue, rowIndexOffset) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    const rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRowObject(rowIndex, columnNames) {\n                return this.getRowObjects(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            getVersionTag() {\n                return this.versionTag;\n            }\n            /**\n             * Checks for given column names.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNames\n             * Column names to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            hasColumns(columnNames) {\n                const table = this, columns = table.columns;\n                for (let i = 0, iEnd = columnNames.length, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    if (!columns[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            hasRowWith(columnName, cellValue) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            renameColumn(columnName, newColumnName) {\n                const table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Sets a cell value based on the row index and column.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            setCell(columnName, rowIndex, cellValue, eventDetail) {\n                const table = this, columns = table.columns, modifier = table.modifier;\n                let column = columns[columnName];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!column) {\n                    column = columns[columnName] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnName, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                const table = this, tableColumns = table.columns, tableModifier = table.modifier, columnNames = Object.keys(columns);\n                let rowCount = table.rowCount;\n                table.emit({\n                    type: 'setColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (typeof rowIndex === 'undefined') {\n                    super.setColumns(columns, rowIndex, extend(eventDetail, { silent: true }));\n                }\n                else {\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        const tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                            tableColumn[i] = column[i];\n                        }\n                        rowCount = Math.max(rowCount, tableColumn.length);\n                    }\n                    this.applyRowCount(rowCount);\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, rowIndex || 0);\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets or unsets the modifier for the table.\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successful, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            setModifier(modifier, eventDetail) {\n                const table = this;\n                let promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then((table) => {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch']((error) => {\n                    table.emit({\n                        type: 'setModifierError',\n                        error,\n                        modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            }\n            /**\n             * Sets the original row indexes for the table. It is used to keep the\n             * reference to the original rows when modifying the table.\n             *\n             * @param {Array<number|undefined>} originalRowIndexes\n             * Original row indexes array.\n             *\n             * @param {boolean} omitLocalRowIndexes\n             * Whether to omit the local row indexes calculation. Defaults to `false`.\n             */\n            setOriginalRowIndexes(originalRowIndexes, omitLocalRowIndexes = false) {\n                this.originalRowIndexes = originalRowIndexes;\n                if (omitLocalRowIndexes) {\n                    return;\n                }\n                const modifiedIndexes = this.localRowIndexes = [];\n                for (let i = 0, iEnd = originalRowIndexes.length, originalIndex; i < iEnd; ++i) {\n                    originalIndex = originalRowIndexes[i];\n                    if (defined(originalIndex)) {\n                        modifiedIndexes[originalIndex] = i;\n                    }\n                }\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex, insert, eventDetail) {\n                this.setRows([row], rowIndex, insert, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefined` to add as new rows.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRows(rows, rowIndex = this.rowCount, insert, eventDetail) {\n                const table = this, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n                for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            if (insert) {\n                                columns[columnNames[j]].splice(i2, 0, null);\n                            }\n                            else {\n                                columns[columnNames[j]][i2] = null;\n                            }\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        super.setRow(row, i2, void 0, { silent: true });\n                    }\n                }\n                const indexRowCount = insert ?\n                    rowCount + rows.length :\n                    rowIndex + rowCount;\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Null state for a row record. In some cases, a row in a table may not\n         * contain any data or may be invalid. In these cases, a null state can be\n         * used to indicate that the row record is empty or invalid.\n         *\n         * @name Highcharts.DataTable.NULL\n         * @type {Highcharts.DataTableRowObject}\n         *\n         * @see {@link Highcharts.DataTable.isNull} for a null test.\n         *\n         * @example\n         * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n         */\n        DataTable.NULL = {};\n        /**\n         * Semantic version string of the DataTable class.\n         * @internal\n         */\n        DataTable.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        class DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            constructor(options = {}) {\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            /**\n             * Poll timer ID, if active.\n             */\n            get polling() {\n                return !!this.polling;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            describeColumn(name, columnMeta) {\n                const connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            }\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            describeColumns(columns) {\n                const connector = this, columnNames = Object.keys(columns);\n                let columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            }\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            getColumnOrder(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort((a, b) => (pick(columns[a].index, 0) - pick(columns[b].index, 0)));\n                }\n            }\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            getSortedColumns(usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            }\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            load() {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            }\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            save() {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            }\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            setColumnOrder(columnNames) {\n                const connector = this;\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            }\n            setModifierOptions(modifierOptions) {\n                const ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(() => this);\n            }\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            startPolling(refreshTime = 1000) {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(() => connector\n                    .load()['catch']((error) => connector.emit({\n                    type: 'loadError',\n                    error,\n                    table: connector.table\n                }))\n                    .then(() => {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }), refreshTime);\n            }\n            /**\n             * Stops polling data.\n             */\n            stopPolling() {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            }\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            whatIs(name) {\n                return this.metadata.columns[name];\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        const { addEvent, fireEvent, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        class DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^(\\d{4})([\\-\\.\\/])(\\d{1,2})\\2(\\d{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            const d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            let year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                const mergedOptions = merge(DataConverter.defaultOptions, options);\n                let regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            asBoolean(value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            }\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            asDate(value) {\n                let timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            }\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            asGuessedType(value) {\n                const converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            }\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            asNumber(value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    const decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            }\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            asString(value) {\n                return '' + value;\n            }\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            deduceDateFormat(data, limit, save) {\n                const parser = this, stable = [], max = [];\n                let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[\\-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            }\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            export(\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            getTable() {\n                throw new Error('Not implemented');\n            }\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            guessType(value) {\n                const converter = this;\n                let result = 'string';\n                if (typeof value === 'string') {\n                    const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n                    let innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    const floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        const dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            parse(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            parseDate(value, dateFormatProp) {\n                const converter = this, options = converter.options;\n                let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            trim(str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[\\d\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        DataConverter.defaultOptions = {\n            dateFormat: '',\n            alternativeFormat: '',\n            startColumn: 0,\n            endColumn: Number.MAX_VALUE,\n            startRow: 0,\n            endRow: Number.MAX_VALUE,\n            firstRowAsNames: true,\n            switchRowsAndColumns: false\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns = [], headers = []) {\n                const table = new DataTable();\n                for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || `${i}`, columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        class DataCursor {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(stateMap = {}) {\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            addListener(tableId, state, listener) {\n                const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                const listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            }\n            /**\n             * @private\n             */\n            buildEmittingTag(e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            }\n            /**\n             * This function emits a state cursor related to a table. It will provide\n             * lasting state cursors of the table to listeners.\n             *\n             * @example\n             * ```ts\n             * dataCursor.emit(myTable, {\n             *     type: 'position',\n             *     column: 'city',\n             *     row: 4,\n             *     state: 'hover',\n             * });\n             * ```\n             *\n             * @param {Data.DataTable} table\n             * The related table of the cursor.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * The state cursor to emit.\n             *\n             * @param {Event} [event]\n             * Optional event information from a related source.\n             *\n             * @param {boolean} [lasting]\n             * Whether this state cursor should be kept until it is cleared with\n             * {@link DataCursor#remitCursor}.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            emitCursor(table, cursor, event, lasting) {\n                const tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ?? {});\n                    const cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    const e = {\n                        cursor,\n                        cursors,\n                        table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        const index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            }\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            remitCursor(tableId, cursor) {\n                const cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    const index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            removeListener(tableId, state, listener) {\n                const listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataCursor class.\n         * @internal\n         */\n        DataCursor.version = '1.0.0';\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    const columnNeedle = JSON.stringify(needle.columns);\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                const needleColumns = needle.columns;\n                const rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                const columns = (cursor.columns || []);\n                const positions = [];\n                const state = cursor.state;\n                for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row,\n                            state\n                        });\n                        continue;\n                    }\n                    for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row,\n                            state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                const range = {\n                    type: 'range',\n                    firstRow: (cursor.row ??\n                        (defaultRange && defaultRange.firstRow) ??\n                        0),\n                    lastRow: (cursor.row ??\n                        (defaultRange && defaultRange.lastRow) ??\n                        Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'DataGrid/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Global DataGrid namespace.\n         *\n         * @namespace DataGrid\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.classNamePrefix = 'highcharts-datagrid-';\n            Globals.classNames = {\n                container: Globals.classNamePrefix + 'container',\n                tableElement: Globals.classNamePrefix + 'table',\n                captionElement: Globals.classNamePrefix + 'caption',\n                theadElement: Globals.classNamePrefix + 'thead',\n                tbodyElement: Globals.classNamePrefix + 'tbody',\n                rowElement: Globals.classNamePrefix + 'row',\n                rowEven: Globals.classNamePrefix + 'row-even',\n                rowOdd: Globals.classNamePrefix + 'row-odd',\n                hoveredRow: Globals.classNamePrefix + 'hovered-row',\n                columnElement: Globals.classNamePrefix + 'column',\n                hoveredCell: Globals.classNamePrefix + 'hovered-cell',\n                hoveredColumn: Globals.classNamePrefix + 'hovered-column',\n                editedCell: Globals.classNamePrefix + 'edited-cell',\n                rowsContentNowrap: Globals.classNamePrefix + 'rows-content-nowrap',\n                headerCell: Globals.classNamePrefix + 'header-cell',\n                headerCellContent: Globals.classNamePrefix + 'header-cell-content',\n                headerRow: Globals.classNamePrefix + 'head-row-content',\n                noData: Globals.classNamePrefix + 'no-data',\n                columnFirst: Globals.classNamePrefix + 'column-first',\n                columnSortable: Globals.classNamePrefix + 'column-sortable',\n                columnSortableIcon: Globals.classNamePrefix + 'column-sortable-icon',\n                columnSortedAsc: Globals.classNamePrefix + 'column-sorted-asc',\n                columnSortedDesc: Globals.classNamePrefix + 'column-sorted-desc',\n                resizerHandles: Globals.classNamePrefix + 'column-resizer',\n                resizedColumn: Globals.classNamePrefix + 'column-resized',\n                creditsContainer: Globals.classNamePrefix + 'credits-container',\n                creditsText: Globals.classNamePrefix + 'credits',\n                visuallyHidden: Globals.classNamePrefix + 'visually-hidden'\n            };\n            Globals.win = window;\n            Globals.userAgent = (Globals.win.navigator && Globals.win.navigator.userAgent) || '';\n            Globals.isChrome = Globals.userAgent.indexOf('Chrome') !== -1;\n            Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Globals;\n    });\n    _registerModule(_modules, 'DataGrid/Utils.js', [], function () {\n        /* *\n         *\n         *  DataGrid utilities\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var DataGridUtils;\n        (function (DataGridUtils) {\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Creates a HTML element with the provided options.\n             *\n             * @param tagName\n             * The tag name of the element.\n             *\n             * @param params\n             * The parameters of the element.\n             *\n             * @param parent\n             * The parent element.\n             */\n            function makeHTMLElement(tagName, params, parent) {\n                const element = document.createElement(tagName);\n                if (params) {\n                    const paramsKeys = Object.keys(params);\n                    for (let i = 0; i < paramsKeys.length; i++) {\n                        const key = paramsKeys[i];\n                        const value = params[key];\n                        if (value !== void 0) {\n                            if (key === 'style') {\n                                Object.assign(element.style, value);\n                            }\n                            else {\n                                element[key] = value;\n                            }\n                        }\n                    }\n                }\n                if (parent) {\n                    parent.appendChild(element);\n                }\n                return element;\n            }\n            DataGridUtils.makeHTMLElement = makeHTMLElement;\n            /**\n             * Creates a div element with the provided class name and id.\n             *\n             * @param className\n             * The class name of the div.\n             *\n             * @param id\n             * The id of the element.\n             */\n            function makeDiv(className, id) {\n                return makeHTMLElement('div', { className, id });\n            }\n            DataGridUtils.makeDiv = makeDiv;\n            /**\n             * Gets the translateY value of an element.\n             *\n             * @param element\n             * The element to get the translateY value from.\n             *\n             * @returns The translateY value of the element.\n             */\n            function getTranslateY(element) {\n                const transform = element.style.transform;\n                if (transform) {\n                    const match = transform.match(/translateY\\(([^)]+)\\)/);\n                    if (match) {\n                        return parseFloat(match[1]);\n                    }\n                }\n                return 0;\n            }\n            DataGridUtils.getTranslateY = getTranslateY;\n            /**\n             * Check if there's a possibility that the given string is an HTML\n             * (contains '<').\n             *\n             * @param str\n             * Text to verify.\n             */\n            function isHTML(str) {\n                return str.indexOf('<') !== -1;\n            }\n            DataGridUtils.isHTML = isHTML;\n            /**\n             * Returns a string containing plain text format by removing HTML tags\n             *\n             * @param text\n             * String to be sanitized\n             *\n             * @returns\n             * Sanitized plain text string\n            */\n            function sanitizeText(text) {\n                try {\n                    return new DOMParser().parseFromString(text, 'text/html')\n                        .body.textContent || '';\n                }\n                catch (error) {\n                    return '';\n                }\n            }\n            DataGridUtils.sanitizeText = sanitizeText;\n        })(DataGridUtils || (DataGridUtils = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridUtils;\n    });\n    _registerModule(_modules, 'DataGrid/Accessibility/Accessibility.js', [_modules['DataGrid/Globals.js'], _modules['DataGrid/Utils.js']], function (Globals, DGUtils) {\n        /* *\n         *\n         *  DataGrid Accessibility class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = DGUtils;\n        /**\n         *  Representing the accessibility functionalities for the Data Grid.\n         */\n        class Accessibility {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Construct the accessibility object.\n             *\n             * @param dataGrid\n             * The DataGrid Table instance which the accessibility controller belong to.\n             */\n            constructor(dataGrid) {\n                this.dataGrid = dataGrid;\n                this.element = document.createElement('div');\n                this.element.classList.add(Globals.classNames.visuallyHidden);\n                this.dataGrid.container?.prepend(this.element);\n                this.announcerElement = document.createElement('p');\n                this.announcerElement.setAttribute('aria-atomic', 'true');\n                this.announcerElement.setAttribute('aria-hidden', 'false');\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Add the 'editable' hint span element for the editable cell.\n             *\n             * @param cellElement\n             * The cell element to add the description to.\n             */\n            addEditableCellHint(cellElement) {\n                const editableLang = this.dataGrid.options?.lang?.accessibility?.cellEditing?.editable;\n                if (!editableLang) {\n                    return;\n                }\n                makeHTMLElement('span', {\n                    className: Globals.classNames.visuallyHidden,\n                    innerText: ', ' + editableLang\n                }, cellElement);\n            }\n            /**\n             * Add the description to the header cell.\n             *\n             * @param thElement\n             * The header cell element to add the description to.\n             *\n             * @param description\n             * The description to be added.\n             */\n            addHeaderCellDescription(thElement, description) {\n                if (description) {\n                    thElement.setAttribute('aria-description', description);\n                }\n            }\n            /**\n             * Announce the message to the screen reader.\n             *\n             * @param msg\n             * The message to be announced.\n             *\n             * @param assertive\n             * Whether the message should be assertive. Default is false.\n             */\n            announce(msg, assertive = false) {\n                if (this.announcerTimeout) {\n                    clearTimeout(this.announcerTimeout);\n                }\n                this.announcerElement.remove();\n                this.announcerElement.setAttribute('aria-live', assertive ? 'assertive' : 'polite');\n                this.element.appendChild(this.announcerElement);\n                this.announcerElement.textContent = msg;\n                this.announcerTimeout = setTimeout(() => {\n                    this.announcerElement.remove();\n                }, 3000);\n            }\n            /**\n             * Announce the message to the screen reader that the user sorted the\n             * column.\n             *\n             * @param order\n             * The order of the sorting.\n             */\n            userSortedColumn(order) {\n                const { options } = this.dataGrid;\n                const announcementsLang = options?.lang\n                    ?.accessibility?.sorting?.announcements;\n                if (!options?.accessibility?.announcements?.sorting) {\n                    return;\n                }\n                let msg;\n                switch (order) {\n                    case 'asc':\n                        msg = announcementsLang?.ascending;\n                        break;\n                    case 'desc':\n                        msg = announcementsLang?.descending;\n                        break;\n                    default:\n                        msg = announcementsLang?.none;\n                }\n                if (!msg) {\n                    return;\n                }\n                this.announce(msg, true);\n            }\n            /**\n             * Announce the message to the screen reader that the user edited the cell.\n             *\n             * @param msgType\n             * The type of the edit message.\n             */\n            userEditedCell(msgType) {\n                const { options } = this.dataGrid;\n                const announcementsLang = options?.lang\n                    ?.accessibility?.cellEditing?.announcements;\n                if (!options?.accessibility?.announcements?.cellEditing) {\n                    return;\n                }\n                const msg = announcementsLang?.[msgType];\n                if (!msg) {\n                    return;\n                }\n                this.announce(msg);\n            }\n            /**\n             * Set the aria sort state of the column header cell element.\n             *\n             * @param thElement\n             * The header cell element to set the `aria-sort` state to.\n             *\n             * @param state\n             * The sort state to be set for the column header cell.\n             */\n            setColumnSortState(thElement, state) {\n                thElement?.setAttribute('aria-sort', state);\n            }\n            /**\n             * Set the row index attribute for the row element.\n             *\n             * @param el\n             * The row element to set the index to.\n             *\n             * @param idx\n             * The index of the row in the data table.\n             */\n            setRowIndex(el, idx) {\n                el.setAttribute('aria-rowindex', idx);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Accessibility;\n    });\n    _registerModule(_modules, 'DataGrid/Credits.js', [_modules['DataGrid/Globals.js'], _modules['DataGrid/Utils.js']], function (Globals, DGUtils) {\n        /* *\n         *\n         *  DataGrid Credits class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { makeHTMLElement } = DGUtils;\n        /* *\n         *\n         *  Abstract Class of Row\n         *\n         * */\n        /**\n         * Represents a credits in the data grid.\n         */\n        class Credits {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Construct the credits.\n             *\n             * @param dataGrid\n             * The DataGrid Table instance which the credits belong to.\n             */\n            constructor(dataGrid) {\n                this.dataGrid = dataGrid;\n                this.options = dataGrid.options?.credits ?? {};\n                this.containerElement = makeHTMLElement('div', {\n                    className: Globals.classNames.creditsContainer\n                });\n                this.textElement = makeHTMLElement('a', {\n                    className: Globals.classNames.creditsText\n                }, this.containerElement);\n                this.textElement.setAttribute('target', '_top');\n                this.render();\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Set the content of the credits.\n             */\n            setContent() {\n                const { text, href } = this.options;\n                this.textElement.innerText = text || '';\n                this.textElement.setAttribute('href', href || '');\n            }\n            /**\n             * Append the credits to the container. The position of the credits is\n             * determined by the `position` option.\n             */\n            appendToContainer() {\n                const { position } = this.options;\n                if (position === 'top') {\n                    // Append the credits to the top of the table.\n                    this.dataGrid.contentWrapper?.prepend(this.containerElement);\n                    return;\n                }\n                // Append the credits to the bottom of the table.\n                this.dataGrid.contentWrapper?.appendChild(this.containerElement);\n            }\n            /**\n             * Update the credits with new options.\n             *\n             * @param options\n             * The new options for the credits.\n             *\n             * @param render\n             * Whether to render the credits after the update.\n             */\n            update(options, render = true) {\n                if (options) {\n                    this.dataGrid.update({\n                        credits: options\n                    }, false);\n                    this.options = this.dataGrid.options?.credits ?? {};\n                }\n                if (render) {\n                    this.render();\n                }\n            }\n            /**\n             * Render the credits. If the credits are disabled, they will be removed\n             * from the container. If also reflows the viewport dimensions.\n             */\n            render() {\n                const enabled = this.options.enabled ?? false;\n                this.containerElement.remove();\n                if (enabled) {\n                    this.setContent();\n                    this.appendToContainer();\n                }\n                else {\n                    this.destroy();\n                }\n                this.dataGrid.viewport?.reflow();\n            }\n            /**\n             * Get the height of the credits container.\n             */\n            getHeight() {\n                return this.containerElement.offsetHeight;\n            }\n            /**\n             * Destroy the credits. The credits will be removed from the container and\n             * the reference to the credits will be deleted from the DataGrid instance\n             * it belongs to.\n             */\n            destroy() {\n                this.containerElement.remove();\n                delete this.dataGrid.credits;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Credits;\n    });\n    _registerModule(_modules, 'DataGrid/Defaults.js', [_modules['Core/Utilities.js']], function (Utils) {\n        /* *\n         *\n         *  DataGrid default options\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n        *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { merge } = Utils;\n        /**\n         * Namespace for default options.\n         */\n        var Defaults;\n        (function (Defaults) {\n            /**\n             * Default options for the DataGrid.\n             */\n            Defaults.defaultOptions = {\n                accessibility: {\n                    enabled: true,\n                    announcements: {\n                        cellEditing: true,\n                        sorting: true\n                    }\n                },\n                lang: {\n                    accessibility: {\n                        cellEditing: {\n                            editable: 'Editable.',\n                            announcements: {\n                                started: 'Entered cell editing mode.',\n                                edited: 'Edited cell value.',\n                                cancelled: 'Editing canceled.'\n                            }\n                        },\n                        sorting: {\n                            announcements: {\n                                ascending: 'Sorted ascending.',\n                                descending: 'Sorted descending.',\n                                none: 'Not sorted.'\n                            }\n                        }\n                    },\n                    noData: 'No data to display'\n                },\n                rendering: {\n                    columns: {\n                        distribution: 'full'\n                    },\n                    rows: {\n                        bufferSize: 10,\n                        strictHeights: false\n                    },\n                    header: {\n                        enabled: true\n                    }\n                },\n                credits: {\n                    enabled: true,\n                    text: 'Highcharts.com',\n                    href: 'https://www.highcharts.com?credits',\n                    position: 'bottom'\n                },\n                columnDefaults: {\n                    sorting: {\n                        sortable: true\n                    },\n                    resizing: true\n                }\n            };\n            /**\n             * Merge the default options with custom options. Commonly used for defining\n             * reusable templates.\n             *\n             * @param options\n             * The new custom chart options.\n             */\n            function setOptions(options) {\n                merge(true, Defaults.defaultOptions, options);\n            }\n            Defaults.setOptions = setOptions;\n        })(Defaults || (Defaults = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Defaults;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * General options for the chart.\n         *\n         * @optionparent chart\n         */\n        const ChartDefaults = {\n            /**\n             * Default `mapData` for all series, in terms of a GeoJSON or TopoJSON\n             * object. If set to a string, it functions as an index into the\n             * `Highcharts.maps` array.\n             *\n             * For picking out individual shapes and geometries to use for each series\n             * of the map, see [series.mapData](#series.map.mapData).\n             *\n             * @sample    maps/demo/geojson\n             *            Loading GeoJSON data\n             * @sample    maps/chart/topojson\n             *            Loading TopoJSON data\n             *\n             * @type      {string|Array<*>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.map\n             */\n            /**\n             * Set lat/lon transformation definitions for the chart. If not defined,\n             * these are extracted from the map data.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.mapTransforms\n             */\n            /**\n             * When using multiple axes, the ticks of two or more opposite axes\n             * will automatically be aligned by adding ticks to the axis or axes\n             * with the least ticks, as if `tickAmount` were specified.\n             *\n             * This can be prevented by setting `alignTicks` to false. If the grid\n             * lines look messy, it's a good idea to hide them for the secondary\n             * axis by setting `gridLineWidth` to 0.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false,\n             * then the `alignTicks ` will be disabled for the axis.\n             *\n             * Disabled for logarithmic axes.\n             *\n             * @sample {highcharts} highcharts/chart/alignticks-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/alignticks-false/\n             *         False\n             * @sample {highstock} stock/chart/alignticks-true/\n             *         True by default\n             * @sample {highstock} stock/chart/alignticks-false/\n             *         False\n             *\n             * @type      {boolean}\n             * @default   true\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignTicks\n             */\n            /**\n             * When using multiple axes, align the thresholds. When this is true, other\n             * ticks will also be aligned.\n             *\n             * Note that for line series and some other series types, the `threshold`\n             * option is set to `null` by default. This will in turn cause their y-axis\n             * to not have a threshold. In order to avoid that, set the series\n             * `threshold` to 0 or another number.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false, or\n             * if the axis is logarithmic, the threshold will not be aligned.\n             *\n             * @sample {highcharts} highcharts/chart/alignthresholds/ Set to true\n             *\n             * @since 10.0.0\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignThresholds\n             */\n            alignThresholds: false,\n            /**\n             * Set the overall animation for all chart updating. Animation can be\n             * disabled throughout the chart by setting it to false here. It can\n             * be overridden for each individual API method as a function parameter.\n             * The only animation not affected by this option is the initial series\n             * animation, see [plotOptions.series.animation](\n             * #plotOptions.series.animation).\n             *\n             * The animation can either be set as a boolean or a configuration\n             * object. If `true`, it will use the 'swing' jQuery easing and a\n             * duration of 500 ms. If used as a configuration object, the following\n             * properties are supported:\n             *\n             * - `defer`: The animation delay time in milliseconds.\n             *\n             * - `duration`: The duration of the animation in milliseconds.\n             *\n             * - `easing`: A string reference to an easing function set on the\n             *   `Math` object. See\n             *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n             *\n             * When zooming on a series with less than 100 points, the chart redraw\n             * will be done with animation, but in case of more data points, it is\n             * necessary to set this option to ensure animation on zoom.\n             *\n             * @sample {highcharts} highcharts/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highcharts} highcharts/chart/animation-duration/\n             *         With a longer duration\n             * @sample {highcharts} highcharts/chart/animation-easing/\n             *         With a jQuery UI easing\n             * @sample {highmaps} maps/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highmaps} maps/chart/animation-duration/\n             *         With a longer duration\n             *\n             * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @default   true\n             * @apioption chart.animation\n             */\n            /**\n             * A CSS class name to apply to the charts container `div`, allowing\n             * unique CSS styling for each chart.\n             *\n             * @type      {string}\n             * @apioption chart.className\n             */\n            /**\n             * Event listeners for the chart.\n             *\n             * @apioption chart.events\n             */\n            /**\n             * Fires when a series is added to the chart after load time, using the\n             * `addSeries` method. One parameter, `event`, is passed to the\n             * function, containing common event information. Through\n             * `event.options` you can access the series options that were passed to\n             * the `addSeries` method. Returning false prevents the series from\n             * being added.\n             *\n             * @sample {highcharts} highcharts/chart/events-addseries/\n             *         Alert on add series\n             * @sample {highstock} stock/chart/events-addseries/\n             *         Alert on add series\n             *\n             * @type      {Highcharts.ChartAddSeriesCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.addSeries\n             */\n            /**\n             * Fires when clicking on the plot background. One parameter, `event`,\n             * is passed to the function, containing common event information.\n             *\n             * Information on the clicked spot can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' value at the clicked spot. The primary axes\n             * are `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * click: function(e) {\n             *     console.log(\n             *         Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n             *         e.yAxis[0].value\n             *     )\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highcharts} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highstock} stock/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highstock} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highmaps} maps/chart/events-click/\n             *         Record coordinates on click\n             * @sample {highmaps} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             *\n             * @type      {Highcharts.ChartClickCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.click\n             */\n            /**\n             * Fires when the chart is finished loading. Since v4.2.2, it also waits\n             * for images to be loaded, for example from point markers. One\n             * parameter, `event`, is passed to the function, containing common\n             * event information.\n             *\n             * There is also a second parameter to the chart constructor where a\n             * callback function can be passed to be executed on chart.load.\n             *\n             * @sample {highcharts} highcharts/chart/events-load/\n             *         Alert on chart load\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-load/\n             *         Alert on chart load\n             * @sample {highmaps} maps/chart/events-load/\n             *         Add series on chart load\n             *\n             * @type      {Highcharts.ChartLoadCallbackFunction}\n             * @context   Highcharts.Chart\n             * @apioption chart.events.load\n             */\n            /**\n             * Fires when the chart is redrawn, either after a call to\n             * `chart.redraw()` or after an axis, series or point is modified with\n             * the `redraw` option set to `true`. One parameter, `event`, is passed\n             * to the function, containing common event information.\n             *\n             * @sample {highcharts} highcharts/chart/events-redraw/\n             *         Alert on chart redraw\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-redraw/\n             *         Alert on chart redraw when adding a series or moving the\n             *         zoomed range\n             * @sample {highmaps} maps/chart/events-redraw/\n             *         Set subtitle on chart redraw\n             *\n             * @type      {Highcharts.ChartRedrawCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.redraw\n             */\n            /**\n             * Fires after initial load of the chart (directly after the `load`\n             * event), and after each redraw (directly after the `redraw` event).\n             *\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             *\n             * @type      {Highcharts.ChartRenderCallbackFunction}\n             * @since     5.0.7\n             * @context   Highcharts.Chart\n             * @apioption chart.events.render\n             */\n            /**\n             * Fires when an area of the chart has been selected. Selection is\n             * enabled by setting the chart's zoomType. One parameter, `event`, is\n             * passed to the function, containing common event information. The\n             * default action for the selection event is to zoom the chart to the\n             * selected area. It can be prevented by calling\n             * `event.preventDefault()` or return false.\n             *\n             * Information on the selected area can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' min and max values. The primary axes are\n             * `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * selection: function(event) {\n             *     // log the min and max of the primary, datetime x-axis\n             *     console.log(\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].min\n             *         ),\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].max\n             *         )\n             *     );\n             *     // log the min and max of the y axis\n             *     console.log(event.yAxis[0].min, event.yAxis[0].max);\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highcharts} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample {highstock} stock/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highstock} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             *         (Highcharts)\n             *\n             * @type      {Highcharts.ChartSelectionCallbackFunction}\n             * @apioption chart.events.selection\n             */\n            /**\n             * The margin between the outer edge of the chart and the plot area.\n             * The numbers in the array designate top, right, bottom and left\n             * respectively. Use the options `marginTop`, `marginRight`,\n             * `marginBottom` and `marginLeft` for shorthand setting of one option.\n             *\n             * By default there is no margin. The actual space is dynamically\n             * calculated from the offset of axis labels, axis title, title,\n             * subtitle and legend in addition to the `spacingTop`, `spacingRight`,\n             * `spacingBottom` and `spacingLeft` options.\n             *\n             * @sample {highcharts} highcharts/chart/margins-zero/\n             *         Zero margins\n             * @sample {highstock} stock/chart/margin-zero/\n             *         Zero margins\n             *\n             * @type      {number|Array<number>}\n             * @apioption chart.margin\n             */\n            /**\n             * The margin between the bottom outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingBottom`.\n             *\n             * @sample {highcharts} highcharts/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highstock} stock/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginBottom\n             */\n            /**\n             * The margin between the left outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingLeft`.\n             *\n             * @sample {highcharts} highcharts/chart/marginleft/\n             *         150px left margin\n             * @sample {highstock} stock/chart/marginleft/\n             *         150px left margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginLeft\n             */\n            /**\n             * The margin between the right outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingRight`.\n             *\n             * @sample {highcharts} highcharts/chart/marginright/\n             *         100px right margin\n             * @sample {highstock} stock/chart/marginright/\n             *         100px right margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginRight\n             */\n            /**\n             * The margin between the top outer edge of the chart and the plot area.\n             * Use this to set a fixed pixel value for the margin as opposed to\n             * the default dynamic margin. See also `spacingTop`.\n             *\n             * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n             * @sample {highstock} stock/chart/margintop/\n             *         100px top margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginTop\n             */\n            /**\n             * Callback function to override the default function that formats all\n             * the numbers in the chart. Returns a string with the formatted number.\n             *\n             * @sample highcharts/members/highcharts-numberformat\n             *      Arabic digits in Highcharts\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             * @since 8.0.0\n             * @apioption chart.numberFormatter\n             */\n            /**\n             * When a chart with an x and a y-axis is rendered, we first pre-render the\n             * labels of both in order to measure them. Then, if either of the axis\n             * labels take up so much space that it significantly affects the length of\n             * the other axis, we repeat the process.\n             *\n             * By default we stop at two axis layout runs, but it may be that the second\n             * run also alter the space required by either axis, for example if it\n             * causes the labels to rotate. In this situation, a subsequent redraw of\n             * the chart may cause the tick and label placement to change for apparently\n             * no reason.\n             *\n             * Use the `axisLayoutRuns` option to set the maximum allowed number of\n             * repetitions. But keep in mind that the default value of 2 is set because\n             * every run costs performance time.\n             *\n             * **Note:** Changing that option to higher than the default might decrease\n             * performance significantly, especially with bigger sets of data.\n             *\n             * @type      {number}\n             * @default   2\n             * @since     11.3.0\n             * @apioption chart.axisLayoutRuns\n             */\n            /**\n             * Allows setting a key to switch between zooming and panning. Can be\n             * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n             * key on Windows) or `shift`. The keys are mapped directly to the key\n             * properties of the click event argument (`event.altKey`,\n             * `event.ctrlKey`, `event.metaKey` and `event.shiftKey`).\n             *\n             * @type       {string}\n             * @since      4.0.3\n             * @product    highcharts gantt\n             * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n             * @apioption  chart.panKey\n             */\n            /**\n             * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n             * to combine zooming and panning.\n             *\n             * On touch devices, when the [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) option is `true` (default), panning\n             * requires two fingers. To allow panning with one finger, set\n             * `followTouchMove` to `false`.\n             *\n             * @sample  {highcharts} highcharts/chart/pankey/ Zooming and panning\n             * @sample  {highstock} stock/chart/panning/ Zooming and xy panning\n             */\n            panning: {\n                /**\n                 * Enable or disable chart panning.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock|highmaps} true\n                 */\n                enabled: false,\n                /**\n                 * Decides in what dimensions the user can pan the chart. Can be\n                 * one of `x`, `y`, or `xy`.\n                 *\n                 * During panning, all axes will behave as if\n                 * [`startOnTick`](#yAxis.startOnTick) and\n                 * [`endOnTick`](#yAxis.endOnTick) were set to `false`. After the\n                 * panning action is finished, the axes will adjust to their actual\n                 * settings.\n                 *\n                 * @sample {highcharts} highcharts/chart/panning-type\n                 *         Zooming and xy panning\n                 *\n                 * @declare    Highcharts.OptionsChartPanningTypeValue\n                 * @type       {string}\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @product    highcharts highstock gantt\n                 */\n                type: 'x'\n            },\n            /**\n             * Equivalent to [zoomType](#chart.zoomType), but for multitouch\n             * gestures only. By default, the `pinchType` is the same as the\n             * `zoomType` setting. However, pinching can be enabled separately in\n             * some cases, for example in stock charts where a mouse drag pans the\n             * chart, while pinching is enabled. When [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) is true, pinchType only applies to\n             * two-finger touches.\n             *\n             * @type       {string}\n             * @default    {highcharts} undefined\n             * @default    {highstock} undefined\n             * @since      3.0\n             * @product    highcharts highstock gantt\n             * @deprecated\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @apioption  chart.pinchType\n             */\n            /**\n             * Whether to apply styled mode. When in styled mode, no presentational\n             * attributes or CSS are applied to the chart SVG. Instead, CSS rules\n             * are required to style the chart. The default style sheet is\n             * available from `https://code.highcharts.com/css/highcharts.css`.\n             *\n             * [Read more in the docs](https://www.highcharts.com/docs/chart-design-and-style/style-by-css)\n             * on what classes and variables are available.\n             *\n             * @sample highcharts/css/colors\n             *         Color theming with CSS\n             * @sample highcharts/css/prefers-color-scheme\n             *         Dynamic theme based on system settings\n             * @type       {boolean}\n             * @default    false\n             * @since      7.0\n             * @apioption  chart.styledMode\n             */\n            styledMode: false,\n            /**\n             * The corner radius of the outer chart border.\n             *\n             * @sample {highcharts} highcharts/chart/borderradius/\n             *         20px radius\n             * @sample {highstock} stock/chart/border/\n             *         10px radius\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             */\n            borderRadius: 0,\n            /**\n             * In styled mode, this sets how many colors the class names\n             * should rotate between. With ten colors, series (or points) are\n             * given class names like `highcharts-color-0`, `highcharts-color-1`\n             * [...] `highcharts-color-9`. The equivalent in non-styled mode\n             * is to set colors using the [colors](#colors) setting.\n             *\n             * @since      5.0.0\n             */\n            colorCount: 10,\n            /**\n             * By default, (because of memory and performance reasons) the chart does\n             * not copy the data but keeps it as a reference. In some cases, this might\n             * result in mutating the original data source. In order to prevent that,\n             * set that property to false. Please note that changing that might decrease\n             * performance, especially with bigger sets of data.\n             *\n             * @type       {boolean}\n             * @since 10.1.0\n             */\n            allowMutatingData: true,\n            /**\n             * If true, the axes will scale to the remaining visible series once\n             * one series is hidden. If false, hiding and showing a series will\n             * not affect the axes or the other series. For stacks, once one series\n             * within the stack is hidden, the rest of the stack will close in\n             * around it even if the axis is not affected.\n             *\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n             *         False\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n             *         True with stack\n             * @sample {highstock} stock/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highstock} stock/chart/ignorehiddenseries-false/\n             *         False\n             *\n             * @since   1.2.0\n             * @product highcharts highstock gantt\n             */\n            ignoreHiddenSeries: true,\n            /**\n             * Whether to invert the axes so that the x axis is vertical and y axis\n             * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n             * by default.\n             *\n             * @productdesc {highcharts}\n             * If a bar series is present in the chart, it will be inverted\n             * automatically. Inverting the chart doesn't have an effect if there\n             * are no cartesian series in the chart.\n             *\n             * @sample {highcharts} highcharts/chart/inverted/\n             *         Inverted line\n             * @sample {highstock} stock/navigator/inverted/\n             *         Inverted stock chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @product   highcharts highstock gantt\n             * @apioption chart.inverted\n             */\n            /**\n             * The distance between the outer edge of the chart and the content,\n             * like title or legend, or axis title and labels if present. The\n             * numbers in the array designate top, right, bottom and left\n             * respectively. Use the options spacingTop, spacingRight, spacingBottom\n             * and spacingLeft options for shorthand setting of one option.\n             *\n             * @type    {Array<number>}\n             * @see     [chart.margin](#chart.margin)\n             * @default [10, 10, 15, 10]\n             * @since   3.0.6\n             */\n            spacing: [10, 10, 15, 10],\n            /**\n             * The button that appears after a selection zoom, allowing the user\n             * to reset zoom. This option is deprecated in favor of\n             * [zooming](#chart.zooming).\n             *\n             * @since      2.2\n             * @deprecated 10.2.1\n             */\n            resetZoomButton: {\n                /**\n                 * What frame the button placement should be related to. Can be\n                 * either `plotBox` or `spacingBox`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 *\n                 * @type      {Highcharts.ButtonRelativeToValue}\n                 * @apioption chart.resetZoomButton.relativeTo\n                 */\n                /**\n                 * A collection of attributes for the button. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                 * border radius. The theme also supports `style`, a collection of\n                 * CSS properties for the text. Equivalent attributes for the hover\n                 * state are given in `theme.states.hover`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                theme: {\n                /**\n                 * The z-index of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.theme.zIndex\n                 */\n                },\n                /**\n                 * The position of the button.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 *\n                 * @type {Highcharts.AlignObject}\n                 */\n                position: {\n                /**\n                 * The horizontal alignment of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.align\n                 */\n                /**\n                 * The horizontal offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.x\n                 */\n                /**\n                 * The vertical alignment of the button.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @apioption chart.resetZoomButton.position.verticalAlign\n                 */\n                /**\n                 * The vertical offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.y\n                 */\n                }\n            },\n            /**\n             * The pixel width of the plot area border.\n             *\n             * @sample {highcharts} highcharts/chart/plotborderwidth/\n             *         1px border\n             * @sample {highstock} stock/chart/plotborder/\n             *         2px border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.plotBorderWidth\n             */\n            /**\n             * Whether to apply a drop shadow to the plot area. Requires that\n             * plotBackgroundColor be set. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample {highcharts} highcharts/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highstock} stock/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.plotShadow\n             */\n            /**\n             * When true, cartesian charts like line, spline, area and column are\n             * transformed into the polar coordinate system. This produces _polar\n             * charts_, also known as _radar charts_.\n             *\n             * @sample {highcharts} highcharts/demo/polar/\n             *         Polar chart\n             * @sample {highcharts} highcharts/demo/polar-wind-rose/\n             *         Wind rose, stacked polar column chart\n             * @sample {highcharts} highcharts/demo/polar-spider/\n             *         Spider web chart\n             * @sample {highcharts} highcharts/parallel-coordinates/polar/\n             *         Star plot, multivariate data in a polar chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     2.3.0\n             * @product   highcharts\n             * @requires  highcharts-more\n             * @apioption chart.polar\n             */\n            /**\n             * Whether to reflow the chart to fit the width of the container div\n             * on resizing the window.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/reflow-false/\n             *         False\n             * @sample {highstock} stock/chart/reflow-true/\n             *         True by default\n             * @sample {highstock} stock/chart/reflow-false/\n             *         False\n             * @sample {highmaps} maps/chart/reflow-true/\n             *         True by default\n             * @sample {highmaps} maps/chart/reflow-false/\n             *         False\n             *\n             * @since     2.1\n             */\n            reflow: true,\n            /**\n             * The HTML element where the chart will be rendered. If it is a string,\n             * the element by that id is used. The HTML element can also be passed\n             * by direct reference, or as the first argument of the chart\n             * constructor, in which case the option is not needed.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         String\n             * @sample {highcharts} highcharts/chart/renderto-object/\n             *         Object reference\n             * @sample {highstock} stock/chart/renderto-string/\n             *         String\n             * @sample {highstock} stock/chart/renderto-object/\n             *         Object reference\n             *\n             * @type      {string|Highcharts.HTMLDOMElement}\n             * @apioption chart.renderTo\n             */\n            /**\n             * The background color of the marker square when selecting (zooming\n             * in on) an area of the chart.\n             *\n             * @see In styled mode, the selection marker fill is set with the\n             *      `.highcharts-selection-marker` class.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   rgba(51,92,173,0.25)\n             * @since     2.1.7\n             * @apioption chart.selectionMarkerFill\n             */\n            /**\n             * Whether to apply a drop shadow to the global series group. This causes\n             * all the series to have the same shadow. Contrary to the `series.shadow`\n             * option, this prevents items from casting shadows on each other, like for\n             * others series in a stack. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample highcharts/chart/seriesgroupshadow/ Shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to apply a drop shadow to the outer chart area. Requires\n             * that backgroundColor be set. The shadow can be an object\n             * configuration containing `color`, `offsetX`, `offsetY`, `opacity` and\n             * `width`.\n             *\n             * @sample {highcharts} highcharts/chart/shadow/\n             *         Shadow\n             * @sample {highstock} stock/chart/shadow/\n             *         Shadow\n             * @sample {highmaps} maps/chart/border/\n             *         Chart border and shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to show the axes initially. This only applies to empty charts\n             * where series are added dynamically, as axes are automatically added\n             * to cartesian series.\n             *\n             * @sample {highcharts} highcharts/chart/showaxes-false/\n             *         False by default\n             * @sample {highcharts} highcharts/chart/showaxes-true/\n             *         True\n             *\n             * @type      {boolean}\n             * @since     1.2.5\n             * @product   highcharts gantt\n             * @apioption chart.showAxes\n             */\n            /**\n             * The space between the bottom edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highstock} stock/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   15\n             * @since     2.1\n             * @apioption chart.spacingBottom\n             */\n            /**\n             * The space between the left edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highstock} stock/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingLeft\n             */\n            /**\n             * The space between the right edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingright-100/\n             *         Spacing set to 100\n             * @sample {highcharts} highcharts/chart/spacingright-legend/\n             *         Legend in right position with default spacing\n             * @sample {highstock} stock/chart/spacingright/\n             *         Spacing set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingRight\n             */\n            /**\n             * The space between the top edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingtop-100/\n             *         A top spacing of 100\n             * @sample {highcharts} highcharts/chart/spacingtop-10/\n             *         Floating chart title makes the plot area align to the default\n             *         spacingTop of 10.\n             * @sample {highstock} stock/chart/spacingtop/\n             *         A top spacing of 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingTop\n             */\n            /**\n             * Additional CSS styles to apply inline to the container `div` and the root\n             * SVG.\n             *\n             * According to the CSS syntax documentation, it is recommended to quote\n             * font family names that contain white space, digits, or punctuation\n             * characters other than hyphens. In such cases, wrap the fontFamily\n             * name as follows: `fontFamily: '\"Font name\"'`.\n             *\n             * Since v11, the root font size is 1rem by default, and all child element\n             * are given a relative `em` font size by default. This allows implementers\n             * to control all the chart's font sizes by only setting the root level.\n             *\n             * @see    In styled mode, general chart styles can be set with the\n             *         `.highcharts-root` class.\n             * @sample {highcharts} highcharts/chart/style-serif-font/\n             *         Using a serif type font\n             * @sample {highcharts} highcharts/chart/style-special-font/\n             *         Using a font with special character in name\n             * @sample {highcharts} highcharts/members/relative-font-size/\n             *         Relative font sizes\n             * @sample {highcharts} highcharts/css/em/\n             *         Styled mode with relative font sizes\n             * @sample {highstock} stock/chart/style/\n             *         Using a serif type font\n             * @sample {highmaps} maps/chart/style-serif-font/\n             *         Using a serif type font\n             *\n             * @type      {Highcharts.CSSObject}\n             * @default   {\"fontFamily\": \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', sans-serif\", \"fontSize\":\"1rem\"}\n             * @apioption chart.style\n             */\n            /**\n             * The default series type for the chart. Can be any of the chart types\n             * listed under [plotOptions](#plotOptions) and [series](#series) or can\n             * be a series provided by an additional module.\n             *\n             * In TypeScript this option has no effect in sense of typing and\n             * instead the `type` option must always be set in the series.\n             *\n             * @sample {highcharts} highcharts/chart/type-bar/\n             *         Bar\n             * @sample {highstock} stock/chart/type/\n             *         Areaspline\n             * @sample {highmaps} maps/chart/type-mapline/\n             *         Mapline\n             *\n             * @type       {string}\n             * @default    {highcharts} line\n             * @default    {highstock} line\n             * @default    {highmaps} map\n             * @since      2.1.0\n             * @apioption  chart.type\n             */\n            type: 'line',\n            /**\n             * Decides in what dimensions the user can zoom by dragging the mouse.\n             * Can be one of `x`, `y` or `xy`.\n             *\n             * @see [panKey](#chart.panKey)\n             *\n             * @sample {highcharts} highcharts/chart/zoomtype-none/\n             *         None by default\n             * @sample {highcharts} highcharts/chart/zoomtype-x/\n             *         X\n             * @sample {highcharts} highcharts/chart/zoomtype-y/\n             *         Y\n             * @sample {highcharts} highcharts/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highcharts} highcharts/chart/zoomtype-polar/\n             *         Zoom on polar chart\n             * @sample {highstock} stock/demo/basic-line/\n             *         None by default\n             * @sample {highstock} stock/chart/zoomtype-x/\n             *         X\n             * @sample {highstock} stock/chart/zoomtype-y/\n             *         Y\n             * @sample {highstock} stock/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highmaps} maps/chart/zoomtype-xy/\n             *         Map with selection zoom\n             *\n             * @type       {string}\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @deprecated\n             * @apioption  chart.zoomType\n             */\n            /**\n             * Enables zooming by a single touch, in combination with\n             * [chart.zoomType](#chart.zoomType). When enabled, two-finger pinch\n             * will still work as set up by [chart.pinchType](#chart.pinchType).\n             * However, `zoomBySingleTouch` will interfere with touch-dragging the\n             * chart to read the tooltip. And especially when vertical zooming is\n             * enabled, it will make it hard to scroll vertically on the page.\n             * @since      9.0.0\n             * @sample     highcharts/chart/zoombysingletouch\n             *             Zoom by single touch enabled, with buttons to toggle\n             * @product    highcharts highstock gantt\n             * @deprecated\n             */\n            /**\n             * Chart zooming options.\n             * @since 10.2.1\n             */\n            zooming: {\n                /**\n                 * Equivalent to [type](#chart.zooming.type), but for multitouch\n                 * gestures only. By default, the `pinchType` is the same as the\n                 * `type` setting. However, pinching can be enabled separately in\n                 * some cases, for example in stock charts where a mouse drag pans the\n                 * chart, while pinching is enabled. When [tooltip.followTouchMove](\n                 * #tooltip.followTouchMove) is true, pinchType only applies to\n                 * two-finger touches.\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @default    {highstock} x\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.pinchType\n                 */\n                /**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * @declare    Highcharts.OptionsChartZoomingTypeValue\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.type\n                 */\n                /**\n                 * Set a key to hold when dragging to zoom the chart. This is useful to\n                 * avoid zooming while moving points. Should be set different than\n                 * [chart.panKey](#chart.panKey).\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @requires   modules/draggable-points\n                 * @apioption  chart.zooming.key\n                 */\n                /**\n                 * Enables zooming by a single touch, in combination with\n                 * [chart.zooming.type](#chart.zooming.type). When enabled, two-finger\n                 * pinch will still work as set up by [chart.zooming.pinchType]\n                 * (#chart.zooming.pinchType). However, `singleTouch` will interfere\n                 * with touch-dragging the chart to read the tooltip. And especially\n                 * when vertical zooming is enabled, it will make it hard to scroll\n                 * vertically on the page.\n                 *\n                 * @sample  highcharts/chart/zoombysingletouch\n                 *          Zoom by single touch enabled, with buttons to toggle\n                 *\n                 * @product highcharts highstock gantt\n                 */\n                singleTouch: false,\n                /**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 */\n                resetButton: {\n                    /**\n                     * What frame the button placement should be related to. Can be\n                     * either `plotBox` or `spacingBox`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     *\n                     * @type      {Highcharts.ButtonRelativeToValue}\n                     * @default   plot\n                     * @apioption chart.zooming.resetButton.relativeTo\n                     */\n                    /**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                     * border radius. The theme also supports `style`, a collection of\n                     * CSS properties for the text. Equivalent attributes for the hover\n                     * state are given in `theme.states.hover`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     *\n                     * @type  {Highcharts.SVGAttributes}\n                     * @since 10.2.1\n                     */\n                    theme: {\n                        /** @internal */\n                        zIndex: 6\n                    },\n                    /**\n                     * The position of the button.\n                     *\n                     * Note: Adjusting position values might cause overlap with chart\n                     * elements. Ensure coordinates do not obstruct other components or\n                     * data visibility.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     *\n                     * @type  {Highcharts.AlignObject}\n                     * @since 10.2.1\n                     */\n                    position: {\n                        /**\n                         * The horizontal alignment of the button.\n                         */\n                        align: 'right',\n                        /**\n                         * The horizontal offset of the button.\n                         */\n                        x: -10,\n                        /**\n                         * The vertical alignment of the button.\n                         *\n                         * @type       {Highcharts.VerticalAlignValue}\n                         * @default    top\n                         * @apioption  chart.zooming.resetButton.position.verticalAlign\n                         */\n                        /**\n                         * The vertical offset of the button.\n                         */\n                        y: 10\n                    }\n                }\n            },\n            /**\n             * An explicit width for the chart. By default (when `null`) the width\n             * is calculated from the offset width of the containing element.\n             *\n             * @sample {highcharts} highcharts/chart/width/\n             *         800px wide\n             * @sample {highstock} stock/chart/width/\n             *         800px wide\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             *\n             * @type {null|number|string}\n             */\n            width: null,\n            /**\n             * An explicit height for the chart. If a _number_, the height is\n             * given in pixels. If given a _percentage string_ (for example\n             * `'56%'`), the height is given as the percentage of the actual chart\n             * width. This allows for preserving the aspect ratio across responsive\n             * sizes.\n             *\n             * By default (when `null`) the height is calculated from the offset\n             * height of the containing element, or 400 pixels if the containing\n             * element's height is 0.\n             *\n             * @sample {highcharts} highcharts/chart/height/\n             *         Forced 200px height\n             * @sample {highstock} stock/chart/height/\n             *         300px height\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             * @sample highcharts/chart/height-percent/\n             *         Highcharts with percentage height\n             * @sample highcharts/chart/height-inherited/\n             *         Chart with inherited height\n             *\n             * @type {null|number|string}\n             */\n            height: null,\n            /**\n             * The color of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/bordercolor/\n             *         Brown border\n             * @sample {highstock} stock/chart/border/\n             *         Brown border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: \"#334eff\" /* Palette.highlightColor80 */,\n            /**\n             * The pixel width of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/borderwidth/\n             *         5px border\n             * @sample {highstock} stock/chart/border/\n             *         2px border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.borderWidth\n             */\n            /**\n             * The background color or gradient for the outer chart area.\n             *\n             * @see In styled mode, the background is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The background color or gradient for the plot area.\n             *\n             * @see In styled mode, the plot background is set with the\n             *      `.highcharts-plot-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption chart.plotBackgroundColor\n             */\n            /**\n             * The URL for an image to use as the plot background. To set an image\n             * as the background for the entire chart, set a CSS background image\n             * to the container element. Note that for the image to be applied to\n             * exported charts, its URL needs to be accessible by the export server.\n             *\n             * @see In styled mode, a plot background image can be set with the\n             *      `.highcharts-plot-background` class and a [custom pattern](\n             *      https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundimage/\n             *         Skies\n             * @sample {highstock} stock/chart/plotbackgroundimage/\n             *         Skies\n             *\n             * @type      {string}\n             * @apioption chart.plotBackgroundImage\n             */\n            /**\n             * The color of the inner chart or plot area border.\n             *\n             * @see In styled mode, a plot border stroke can be set with the\n             *      `.highcharts-plot-border` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbordercolor/\n             *         Blue border\n             * @sample {highstock} stock/chart/plotborder/\n             *         Blue border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            plotBorderColor: \"#cccccc\" /* Palette.neutralColor20 */\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartDefaults;\n    });\n    _registerModule(_modules, 'Core/Color/Palettes.js', [], function () {\n        /*\n         * Series palettes for Highcharts. Series colors are defined in highcharts.css.\n         * **Do not edit this file!** This file is generated using the 'gulp palette' task.\n         */\n        const SeriesPalettes = {\n            /**\n             * Colors for data series and points\n             */\n            colors: [\n                '#2caffe',\n                '#544fc5',\n                '#00e272',\n                '#fe6a35',\n                '#6b8abc',\n                '#d568fb',\n                '#2ee0ca',\n                '#fa4b42',\n                '#feb56a',\n                '#91e8e1'\n            ]\n        };\n\n        return SeriesPalettes;\n    });\n    _registerModule(_modules, 'Core/Time.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { defined, error, extend, isNumber, isObject, isString, merge, objectEach, pad, splat, timeUnits, ucfirst } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // To do: Remove this when we no longer need support for Safari < v14.1\n        const hasOldSafariBug = H.isSafari &&\n            win.Intl &&\n            !win.Intl.DateTimeFormat.prototype.formatRange;\n        const isDateTimeFormatOptions = (obj) => obj.main === void 0;\n        // We use the Spanish locale for internal weekday handling because it uses\n        // unique letters for narrow weekdays\n        const spanishWeekdayIndex = (weekday) => ['D', 'L', 'M', 'X', 'J', 'V', 'S'].indexOf(weekday);\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The Time class. Time settings are applied in general for each page using\n         * `Highcharts.setOptions`, or individually for each Chart item through the\n         * [time](https://api.highcharts.com/highcharts/time) options set.\n         *\n         * The Time object is available from {@link Highcharts.Chart#time},\n         * which refers to  `Highcharts.time` if no individual time settings are\n         * applied.\n         *\n         * @example\n         * // Apply time settings globally\n         * Highcharts.setOptions({\n         *     time: {\n         *         timezone: 'Europe/London'\n         *     }\n         * });\n         *\n         * // Apply time settings by instance\n         * const chart = Highcharts.chart('container', {\n         *     time: {\n         *         timezone: 'America/New_York'\n         *     },\n         *     series: [{\n         *         data: [1, 4, 3, 5]\n         *     }]\n         * });\n         *\n         * // Use the Time object of a chart instance\n         * console.log(\n         *        'Current time in New York',\n         *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n         * );\n         *\n         * // Standalone use\n         * const time = new Highcharts.Time({\n         *    timezone: 'America/New_York'\n         * });\n         * const s = time.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2020, 0, 1));\n         * console.log(s); // => 2019-12-31 19:00:00\n         *\n         * @since 6.0.5\n         *\n         * @class\n         * @name Highcharts.Time\n         *\n         * @param {Highcharts.TimeOptions} [options]\n         * Time options as defined in [chart.options.time](/highcharts/time).\n         */\n        class Time {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = {};\n                this.variableTimezone = false;\n                this.Date = win.Date;\n                this.update(options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Update the Time object with current options. It is called internally on\n             * initializing Highcharts, after running `Highcharts.setOptions` and on\n             * `Chart.update`.\n             *\n             * @private\n             * @function Highcharts.Time#update\n             *\n             * @param {Highcharts.TimeOptions} [options]\n             *\n             */\n            update(options = {}) {\n                let timezone = options.timezone ?? 'UTC';\n                this.dTLCache = {};\n                this.options = options = merge(true, this.options, options);\n                const { timezoneOffset, useUTC } = options;\n                // Allow using a different Date class\n                this.Date = options.Date || win.Date || Date;\n                if (defined(useUTC)) {\n                    timezone = useUTC ? 'UTC' : void 0;\n                }\n                // The Etc/GMT time zones do not support offsets with half-hour\n                // resolutions\n                if (timezoneOffset && timezoneOffset % 60 === 0) {\n                    timezone = 'Etc/GMT' + ((timezoneOffset > 0 ? '+' : '')) + timezoneOffset / 60;\n                }\n                /*\n                 * The time object has options allowing for variable time zones, meaning\n                 * the axis ticks or series data needs to consider this.\n                 */\n                this.variableTimezone = timezone !== 'UTC' &&\n                    timezone?.indexOf('Etc/GMT') !== 0;\n                this.timezone = timezone;\n                // Assign default time formats from locale strings\n                ['months', 'shortMonths', 'weekdays', 'shortWeekdays'].forEach((name) => {\n                    const isMonth = /months/i.test(name), isShort = /short/.test(name), options = { timeZone: 'UTC' };\n                    options[isMonth ? 'month' : 'weekday'] = isShort ? 'short' : 'long';\n                    this[name] = (isMonth ?\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] :\n                        [3, 4, 5, 6, 7, 8, 9]).map((position) => this.dateFormat(options, (isMonth ? 31 : 1) * 24 * 36e5 * position));\n                });\n            }\n            /**\n             * Get a date in terms of numbers (year, month, day etc) for further\n             * processing. Takes the current `timezone` setting into account. Inverse of\n             * `makeTime` and the native `Date` constructor and `Date.UTC`.\n             *\n             * The date is returned in array format with the following indices:\n             *\n             * 0: year,\n             * 1: month (zero based),\n             * 2: day,\n             * 3: hours,\n             * 4: minutes,\n             * 5: seconds,\n             * 6: milliseconds,\n             * 7: weekday (Sunday as 0)\n             *\n             * @function Highcharts.Time#toParts\n             *\n             * @param {number|Date} [timestamp]\n             *                 The timestamp in milliseconds since January 1st 1970.\n             *                 A Date object is also accepted.\n             *\n             * @return {Array<number>} The date parts in array format.\n             */\n            toParts(timestamp) {\n                const [weekday, dayOfMonth, month, year, hours, minutes, seconds] = this.dateTimeFormat({\n                    weekday: 'narrow',\n                    day: 'numeric',\n                    month: 'numeric',\n                    year: 'numeric',\n                    hour: 'numeric',\n                    minute: 'numeric',\n                    second: 'numeric'\n                }, timestamp, 'es')\n                    .split(/(?:, |\\/|:)/g);\n                return [\n                    year,\n                    +month - 1,\n                    dayOfMonth,\n                    hours,\n                    minutes,\n                    seconds,\n                    // Milliseconds\n                    Math.floor(Number(timestamp) || 0) % 1000,\n                    // Weekday index\n                    spanishWeekdayIndex(weekday)\n                ].map(Number);\n            }\n            /**\n             * Shorthand to get a cached `Intl.DateTimeFormat` instance.\n             */\n            dateTimeFormat(options, timestamp, locale = this.options.locale) {\n                const cacheKey = JSON.stringify(options) + locale;\n                if (isString(options)) {\n                    options = this.str2dtf(options);\n                }\n                let dTL = this.dTLCache[cacheKey];\n                if (!dTL) {\n                    options.timeZone ?? (options.timeZone = this.timezone);\n                    try {\n                        dTL = new Intl.DateTimeFormat(locale, options);\n                    }\n                    catch (e) {\n                        if (/Invalid time zone/i.test(e.message)) {\n                            error(34);\n                            options.timeZone = 'UTC';\n                            dTL = new Intl.DateTimeFormat(locale, options);\n                        }\n                        else {\n                            error(e.message, false);\n                        }\n                    }\n                }\n                this.dTLCache[cacheKey] = dTL;\n                return dTL?.format(timestamp) || '';\n            }\n            /**\n             * Take a locale-aware string format and return a full DateTimeFormat in\n             * object form.\n             */\n            str2dtf(s, dtf = {}) {\n                const mapping = {\n                    L: { fractionalSecondDigits: 3 },\n                    S: { second: '2-digit' },\n                    M: { minute: 'numeric' },\n                    H: { hour: '2-digit' },\n                    k: { hour: 'numeric' },\n                    E: { weekday: 'narrow' },\n                    a: { weekday: 'short' },\n                    A: { weekday: 'long' },\n                    d: { day: '2-digit' },\n                    e: { day: 'numeric' },\n                    b: { month: 'short' },\n                    B: { month: 'long' },\n                    m: { month: '2-digit' },\n                    o: { month: 'numeric' },\n                    y: { year: '2-digit' },\n                    Y: { year: 'numeric' }\n                };\n                Object.keys(mapping).forEach((key) => {\n                    if (s.indexOf(key) !== -1) {\n                        extend(dtf, mapping[key]);\n                    }\n                });\n                return dtf;\n            }\n            /**\n             * Make a time and returns milliseconds. Similar to `Date.UTC`, but takes\n             * the current `timezone` setting into account.\n             *\n             * @function Highcharts.Time#makeTime\n             *\n             * @param {number} year\n             *        The year\n             *\n             * @param {number} month\n             *        The month. Zero-based, so January is 0.\n             *\n             * @param {number} [date=1]\n             *        The day of the month\n             *\n             * @param {number} [hours=0]\n             *        The hour of the day, 0-23.\n             *\n             * @param {number} [minutes=0]\n             *        The minutes\n             *\n             * @param {number} [seconds=0]\n             *        The seconds\n             *\n             * @return {number}\n             *         The time in milliseconds since January 1st 1970.\n             */\n            makeTime(year, month, date = 1, hours = 0, minutes, seconds, milliseconds) {\n                // eslint-disable-next-line new-cap\n                let d = this.Date.UTC(year, month, date, hours, minutes || 0, seconds || 0, milliseconds || 0);\n                if (this.timezone !== 'UTC') {\n                    const offset = this.getTimezoneOffset(d);\n                    d += offset;\n                    // Adjustments close to DST transitions\n                    if (\n                    // Optimize for speed by limiting the number of calls to\n                    // `getTimezoneOffset`. According to\n                    // https://en.wikipedia.org/wiki/Daylight_saving_time_by_country,\n                    // DST change may only occur in these months.\n                    [2, 3, 8, 9, 10, 11].indexOf(month) !== -1 &&\n                        // DST transitions occur only in the night-time\n                        (hours < 5 || hours > 20)) {\n                        const newOffset = this.getTimezoneOffset(d);\n                        if (offset !== newOffset) {\n                            d += newOffset - offset;\n                            // A special case for transitioning from summer time to winter\n                            // time. When the clock is set back, the same time is repeated\n                            // twice, i.e. 02:30 am is repeated since the clock is set back\n                            // from 3 am to 2 am. We need to make the same time as local\n                            // Date does.\n                        }\n                        else if (offset - 36e5 === this.getTimezoneOffset(d - 36e5) &&\n                            !hasOldSafariBug) {\n                            d -= 36e5;\n                        }\n                    }\n                }\n                return d;\n            }\n            /**\n             * Parse a datetime string. Unless the string contains time zone\n             * information, apply the current `timezone` from options. If the argument\n             * is a number, return it.\n             *\n             * @function Highcharts.Time#parse\n             * @param    {string|number|undefined} s The datetime string to parse\n             * @return   {number|undefined}          Parsed JavaScript timestamp\n             */\n            parse(s) {\n                if (!isString(s)) {\n                    return s ?? void 0;\n                }\n                s = s\n                    // Firefox fails on YYYY/MM/DD\n                    .replace(/\\//g, '-')\n                    // Replace some non-standard notations\n                    .replace(/(GMT|UTC)/, '');\n                // Extend shorthand hour timezone offset like +02\n                // .replace(/([+-][0-9]{2})$/, '$1:00');\n                // Check if the string has time zone information\n                const hasTimezone = s.indexOf('Z') > -1 ||\n                    /([+-][0-9]{2}):?[0-9]{2}$/.test(s), isYYYYMMDD = /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(s);\n                if (!hasTimezone && !isYYYYMMDD) {\n                    s += 'Z';\n                }\n                const ts = Date.parse(s);\n                if (isNumber(ts)) {\n                    // Unless the string contains time zone information, convert from\n                    // the local time result of `Date.parse` via UTC into the current\n                    // timezone of the time object.\n                    return ts + ((!hasTimezone || isYYYYMMDD) ?\n                        this.getTimezoneOffset(ts) :\n                        0);\n                }\n            }\n            /**\n             * Get the time zone offset based on the current timezone information as\n             * set in the global options.\n             *\n             * @function Highcharts.Time#getTimezoneOffset\n             *\n             * @param {number} timestamp\n             *        The JavaScript timestamp to inspect.\n             *\n             * @return {number}\n             *         The timezone offset in minutes compared to UTC.\n             */\n            getTimezoneOffset(timestamp) {\n                if (this.timezone !== 'UTC') {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const [date, gmt, hours, colon, minutes = 0] = this.dateTimeFormat({ timeZoneName: 'shortOffset' }, timestamp, 'en')\n                        .split(/(GMT|:)/)\n                        .map(Number), offset = -(hours + minutes / 60) * 60 * 60000;\n                    // Possible future NaNs stop here\n                    if (isNumber(offset)) {\n                        return offset;\n                    }\n                }\n                return 0;\n            }\n            /**\n             * Formats a JavaScript date timestamp (milliseconds since January 1 1970)\n             * into a human readable date string.\n             *\n             * The `format` parameter accepts two types of values:\n             * - An object containing settings that are passed directly on to\n             *   [Intl.DateTimeFormat.prototype.format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format).\n             * - A format string containing either individual or locale-aware format\n             *   keys. **Individual keys**, for example `%Y-%m-%d`, are listed below.\n             *   **Locale-aware keys** are grouped by square brackets, for example\n             *   `%[Ymd]`. The order of keys within the square bracket doesn't affect\n             *   the output, which is determined by the locale. See example below.\n             *   Internally, the locale-aware format keys are just a shorthand for the\n             *   full object formats, but are particularly practical in\n             *   [templating](https://www.highcharts.com/docs/chart-concepts/templating)\n             *   where full object definitions are not an option.\n             *\n             * The available string format keys are listed below. Additional formats can\n             * be given in the {@link Highcharts.dateFormats} hook.\n             *\n             * Supported format keys:\n             * | Key  | Description                     | Notes on locale-aware format |\n             * -------|----------------------------------------------|-------|\n             * | `%A` | Long weekday, like 'Monday'                  |       |\n             * | `%a` | Short weekday, like 'Mon'                    |       |\n             * | `%E` | Narrow weekday, single character             |       |\n             * | `%d` | Two digit day of the month, 01 to 31         |       |\n             * | `%e` | Day of the month, 1 through 31               |       |\n             * | `%w` | Day of the week, 0 through 6                 | N/A   |\n             * | `%b` | Short month, like 'Jan'                      |       |\n             * | `%B` | Long month, like 'January'                   |       |\n             * | `%m` | Two digit month number, 01 through 12        |       |\n             * | `%o` | Month number, 1 through 12                   |       |\n             * | `%y` | Two digits year, like 24 for 2024            |       |\n             * | `%Y` | Four digits year, like 2024                  |       |\n             * | `%H` | Two digits hours in 24h format, 00 through 23 | Depending on the locale, 12h format may be instered. |\n             * | `%k` | Hours in 24h format, 0 through 23            | Depending on the locale, 12h format may be instered. |\n             * | `%I` | Two digits hours in 12h format, 00 through 11 | N/A. The locale determines the hour format. |\n             * | `%l` | Hours in 12h format, 1 through 12            | N/A. The locale determines the hour format. |\n             * | `%M` | Two digits minutes, 00 through 59            |       |\n             * | `%p` | Upper case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n             * | `%P` | Lower case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n             * | `%S` | Two digits seconds, 00 through 59            |       |\n             * | `%L` | Milliseconds (naming from Ruby)              |       |\n             *\n             * @example\n             * // Object format, US English\n             * const time1 = new Highcharts.Time({ locale: 'en-US' });\n             * console.log(\n             *     time1.dateFormat({\n             *         day: 'numeric',\n             *         month: 'short',\n             *         year: 'numeric',\n             *         hour: 'numeric',\n             *         minute: 'numeric'\n             *     }, Date.UTC(2024, 11, 31))\n             * ); // => Dec 31, 2024, 12:00 AM\n             *\n             * // Object format, British English\n             * const time2 = new Highcharts.Time({ locale: 'en-GB' });\n             * console.log(\n             *     time2.dateFormat({\n             *         day: 'numeric',\n             *         month: 'short',\n             *         year: 'numeric',\n             *         hour: 'numeric',\n             *         minute: 'numeric'\n             *     }, Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * // Individual key string replacement\n             * const time3 = new Highcharts.Time();\n             * console.log(\n             *     time3.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2024, 11, 31))\n             * ); // => 2024-12-31 00:00:00\n             *\n             * // Locale-aware keys, US English\n             * const time4 = new Highcharts.Time({ locale: 'en-US' });\n             * console.log(\n             *     time4.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n             * ); // => Dec 31, 2024, 12:00 AM\n             *\n             * // Locale-aware keys, British English\n             * const time5 = new Highcharts.Time({ locale: 'en-GB' });\n             * console.log(\n             *     time5.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * // Mixed locale-aware and individual keys\n             * console.log(\n             *     time5.dateFormat('%[Yeb], %H:%M', Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * @function Highcharts.Time#dateFormat\n             *\n             * @param {string|Highcharts.DateTimeFormatOptions} format\n             *        The desired string format where various time representations are\n             *        prefixed with %, or an object representing the locale-aware format\n             *        options.\n             *\n             * @param {number} [timestamp]\n             *        The JavaScript timestamp.\n             *\n             * @param {boolean} [upperCaseFirst=false]\n             *        Upper case first letter in the return.\n             *\n             * @return {string}\n             *         The formatted date.\n             */\n            dateFormat(format, timestamp, upperCaseFirst) {\n                const lang = H.defaultOptions?.lang;\n                if (!defined(timestamp) || isNaN(timestamp)) {\n                    return lang?.invalidDate || '';\n                }\n                format = format ?? '%Y-%m-%d %H:%M:%S';\n                // First, identify and replace locale-aware formats like %[Ymd]\n                if (isString(format)) {\n                    const localeAwareRegex = /%\\[([a-zA-Z]+)\\]/g;\n                    let match;\n                    while ((match = localeAwareRegex.exec(format))) {\n                        format = format.replace(match[0], this.dateTimeFormat(match[1], timestamp));\n                    }\n                }\n                // Then, replace static formats like %Y, %m, %d etc.\n                if (isString(format) && format.indexOf('%') !== -1) {\n                    const time = this, [fullYear, month, dayOfMonth, hours, minutes, seconds, milliseconds, weekday] = this.toParts(timestamp), langWeekdays = lang?.weekdays || this.weekdays, shortWeekdays = lang?.shortWeekdays || this.shortWeekdays, months = lang?.months || this.months, shortMonths = lang?.shortMonths || this.shortMonths, \n                    // List all format keys. Custom formats can be added from the\n                    // outside.\n                    replacements = extend({\n                        // Day\n                        // Short weekday, like 'Mon'\n                        a: shortWeekdays ?\n                            shortWeekdays[weekday] :\n                            langWeekdays[weekday].substr(0, 3),\n                        // Long weekday, like 'Monday'\n                        A: langWeekdays[weekday],\n                        // Two digit day of the month, 01 to 31\n                        d: pad(dayOfMonth),\n                        // Day of the month, 1 through 31\n                        e: pad(dayOfMonth, 2, ' '),\n                        // Day of the week, 0 through 6\n                        w: weekday,\n                        // Week (none implemented)\n                        // 'W': weekNumber(),\n                        // Month\n                        // Short month, like 'Jan'\n                        b: shortMonths[month],\n                        // Long month, like 'January'\n                        B: months[month],\n                        // Two digit month number, 01 through 12\n                        m: pad(month + 1),\n                        // Month number, 1 through 12 (#8150)\n                        o: month + 1,\n                        // Year\n                        // Two digits year, like 09 for 2009\n                        y: fullYear.toString().substr(2, 2),\n                        // Four digits year, like 2009\n                        Y: fullYear,\n                        // Time\n                        // Two digits hours in 24h format, 00 through 23\n                        H: pad(hours),\n                        // Hours in 24h format, 0 through 23\n                        k: hours,\n                        // Two digits hours in 12h format, 00 through 11\n                        I: pad((hours % 12) || 12),\n                        // Hours in 12h format, 1 through 12\n                        l: (hours % 12) || 12,\n                        // Two digits minutes, 00 through 59\n                        M: pad(minutes),\n                        // Upper case AM or PM\n                        p: hours < 12 ? 'AM' : 'PM',\n                        // Lower case AM or PM\n                        P: hours < 12 ? 'am' : 'pm',\n                        // Two digits seconds, 00 through 59\n                        S: pad(seconds),\n                        // Milliseconds (naming from Ruby)\n                        L: pad(milliseconds, 3)\n                    }, H.dateFormats);\n                    // Do the replaces\n                    objectEach(replacements, function (val, key) {\n                        if (isString(format)) {\n                            // Regex would do it in one line, but this is faster\n                            while (format.indexOf('%' + key) !== -1) {\n                                format = format.replace('%' + key, typeof val === 'function' ?\n                                    val.call(time, timestamp) :\n                                    val);\n                            }\n                        }\n                    });\n                }\n                else if (isObject(format)) {\n                    const tzHours = (this.getTimezoneOffset(timestamp) || 0) /\n                        (60000 * 60), timeZone = this.options.timezone || ('Etc/GMT' + (tzHours >= 0 ? '+' : '') + tzHours), { prefix = '', suffix = '' } = format;\n                    format = prefix + this.dateTimeFormat(extend({ timeZone }, format), timestamp) + suffix;\n                }\n                // Optionally sentence-case the string and return\n                return upperCaseFirst ? ucfirst(format) : format;\n            }\n            /**\n             * Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\n             * an object.\n             * @private\n             * @param {string|Array<T>|Highcharts.Dictionary<T>} f\n             * General format description\n             * @return {Highcharts.Dictionary<T>}\n             * The object definition\n             */\n            resolveDTLFormat(f) {\n                if (!isObject(f, true)) { // Check for string or array\n                    f = splat(f);\n                    return {\n                        main: f[0],\n                        from: f[1],\n                        to: f[2]\n                    };\n                }\n                // Type-check DateTimeFormatOptions against DateTimeLabelFormatObject\n                if (isObject(f, true) && isDateTimeFormatOptions(f)) {\n                    return { main: f };\n                }\n                return f;\n            }\n            /**\n             * Return an array with time positions distributed on round time values\n             * right and right after min and max. Used in datetime axes as well as for\n             * grouping data on a datetime axis.\n             *\n             * @function Highcharts.Time#getTimeTicks\n             *\n             * @param {Highcharts.TimeNormalizedObject} normalizedInterval\n             *        The interval in axis values (ms) and the count\n             *\n             * @param {number} [min]\n             *        The minimum in axis values\n             *\n             * @param {number} [max]\n             *        The maximum in axis values\n             *\n             * @param {number} [startOfWeek=1]\n             *\n             * @return {Highcharts.AxisTickPositionsArray}\n             * Time positions\n             */\n            getTimeTicks(normalizedInterval, min, max, startOfWeek) {\n                const time = this, tickPositions = [], higherRanks = {}, { count = 1, unitRange } = normalizedInterval;\n                let [year, month, dayOfMonth, hours, minutes, seconds] = time.toParts(min), milliseconds = (min || 0) % 1000, variableDayLength;\n                startOfWeek ?? (startOfWeek = 1);\n                if (defined(min)) { // #1300\n                    milliseconds = unitRange >= timeUnits.second ?\n                        0 : // #3935\n                        count * Math.floor(milliseconds / count);\n                    if (unitRange >= timeUnits.second) { // Second\n                        seconds = unitRange >= timeUnits.minute ?\n                            0 : // #3935\n                            count * Math.floor(seconds / count);\n                    }\n                    if (unitRange >= timeUnits.minute) { // Minute\n                        minutes = unitRange >= timeUnits.hour ?\n                            0 :\n                            count * Math.floor(minutes / count);\n                    }\n                    if (unitRange >= timeUnits.hour) { // Hour\n                        hours = unitRange >= timeUnits.day ?\n                            0 :\n                            count * Math.floor(hours / count);\n                    }\n                    if (unitRange >= timeUnits.day) { // Day\n                        dayOfMonth = unitRange >= timeUnits.month ?\n                            1 :\n                            Math.max(1, count * Math.floor(dayOfMonth / count));\n                    }\n                    if (unitRange >= timeUnits.month) { // Month\n                        month = unitRange >= timeUnits.year ? 0 :\n                            count * Math.floor(month / count);\n                    }\n                    if (unitRange >= timeUnits.year) { // Year\n                        year -= year % count;\n                    }\n                    // Week is a special case that runs outside the hierarchy\n                    if (unitRange === timeUnits.week) {\n                        if (count) {\n                            min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n                        }\n                        // Get start of current week, independent of count\n                        const weekday = this.dateTimeFormat({\n                            timeZone: this.timezone,\n                            weekday: 'narrow'\n                        }, min, 'es'), weekdayNo = spanishWeekdayIndex(weekday);\n                        dayOfMonth += -weekdayNo + startOfWeek +\n                            // We don't want to skip days that are before\n                            // startOfWeek (#7051)\n                            (weekdayNo < startOfWeek ? -7 : 0);\n                    }\n                    min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n                    // Handle local timezone offset\n                    if (time.variableTimezone && defined(max)) {\n                        // Detect whether we need to take the DST crossover into\n                        // consideration. If we're crossing over DST, the day length may\n                        // be 23h or 25h and we need to compute the exact clock time for\n                        // each tick instead of just adding hours. This comes at a cost,\n                        // so first we find out if it is needed (#4951).\n                        variableDayLength = (\n                        // Long range, assume we're crossing over.\n                        max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time\n                            // zones.\n                            time.getTimezoneOffset(min) !==\n                                time.getTimezoneOffset(max));\n                    }\n                    // Iterate and add tick positions at appropriate values\n                    let t = min, i = 1;\n                    while (t < max) {\n                        tickPositions.push(t);\n                        // Increase the years\n                        if (unitRange === timeUnits.year) {\n                            t = time.makeTime(year + i * count, 0);\n                            // Increase the months\n                        }\n                        else if (unitRange === timeUnits.month) {\n                            t = time.makeTime(year, month + i * count);\n                            // If we're using local time, the interval is not fixed as it\n                            // jumps one hour at the DST crossover\n                        }\n                        else if (variableDayLength && (unitRange === timeUnits.day ||\n                            unitRange === timeUnits.week)) {\n                            t = time.makeTime(year, month, dayOfMonth +\n                                i * count * (unitRange === timeUnits.day ? 1 : 7));\n                        }\n                        else if (variableDayLength &&\n                            unitRange === timeUnits.hour &&\n                            count > 1) {\n                            // Make sure higher ranks are preserved across DST (#6797,\n                            // #7621)\n                            t = time.makeTime(year, month, dayOfMonth, hours + i * count);\n                            // Else, the interval is fixed and we use simple addition\n                        }\n                        else {\n                            t += unitRange * count;\n                        }\n                        i++;\n                    }\n                    // Push the last time\n                    tickPositions.push(t);\n                    // Handle higher ranks. Mark new days if the time is on midnight\n                    // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold\n                    // to prevent looping over dense data grouping (#6156).\n                    if (unitRange <= timeUnits.hour && tickPositions.length < 10000) {\n                        tickPositions.forEach((t) => {\n                            if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            t % 1800000 === 0 &&\n                                // Check for local or global midnight\n                                time.dateFormat('%H%M%S%L', t) === '000000000') {\n                                higherRanks[t] = 'day';\n                            }\n                        });\n                    }\n                }\n                // Record information on the chosen unit - for dynamic label formatter\n                tickPositions.info = extend(normalizedInterval, {\n                    higherRanks,\n                    totalRange: unitRange * count\n                });\n                return tickPositions;\n            }\n            /**\n             * Get the optimal date format for a point, based on a range.\n             *\n             * @private\n             * @function Highcharts.Time#getDateFormat\n             *\n             * @param {number} range\n             *        The time range\n             *\n             * @param {number} timestamp\n             *        The timestamp of the date\n             *\n             * @param {number} startOfWeek\n             *        An integer representing the first day of the week, where 0 is\n             *        Sunday.\n             *\n             * @param {Highcharts.Dictionary<string>} dateTimeLabelFormats\n             *        A map of time units to formats.\n             *\n             * @return {string}\n             *         The optimal date format for a point.\n             */\n            getDateFormat(range, timestamp, startOfWeek, dateTimeLabelFormats) {\n                const dateStr = this.dateFormat('%m-%d %H:%M:%S.%L', timestamp), blank = '01-01 00:00:00.000', strpos = {\n                    millisecond: 15,\n                    second: 12,\n                    minute: 9,\n                    hour: 6,\n                    day: 3\n                };\n                let n = 'millisecond', \n                // For sub-millisecond data, #4223\n                lastN = n;\n                for (n in timeUnits) { // eslint-disable-line guard-for-in\n                    // If the range is exactly one week and we're looking at a\n                    // Sunday/Monday, go for the week format\n                    if (range === timeUnits.week &&\n                        +this.dateFormat('%w', timestamp) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n                    // The first format that is too great for the range\n                    if (timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] &&\n                        dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n                    // Weeks are outside the hierarchy, only apply them on\n                    // Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n                return this.resolveDTLFormat(dateTimeLabelFormats[n]).main;\n            }\n        }\n        /* *\n         *\n         * Default export\n         *\n         * */\n        /* *\n         *\n         * API Declarations\n         *\n         * */\n        /**\n         * Normalized interval.\n         *\n         * @interface Highcharts.TimeNormalizedObject\n         */ /**\n        * The count.\n        *\n        * @name Highcharts.TimeNormalizedObject#count\n        * @type {number|undefined}\n        */ /**\n        * The interval in axis values (ms).\n        *\n        * @name Highcharts.TimeNormalizedObject#unitRange\n        * @type {number}\n        */\n        /**\n         * Function of an additional date format specifier.\n         *\n         * @callback Highcharts.TimeFormatCallbackFunction\n         *\n         * @param {number} timestamp\n         *        The time to format.\n         *\n         * @return {string}\n         *         The formatted portion of the date.\n         */\n        /**\n         * Time ticks.\n         *\n         * @interface Highcharts.AxisTickPositionsArray\n         * @extends global.Array<number>\n         */ /**\n        * @name Highcharts.AxisTickPositionsArray#info\n        * @type {Highcharts.TimeTicksInfoObject|undefined}\n        */\n        /**\n         * A callback to return the time zone offset for a given datetime. It\n         * takes the timestamp in terms of milliseconds since January 1 1970,\n         * and returns the timezone offset in minutes. This provides a hook\n         * for drawing time based charts in specific time zones using their\n         * local DST crossover dates, with the help of external libraries.\n         *\n         * @callback Highcharts.TimezoneOffsetCallbackFunction\n         *\n         * @param {number} timestamp\n         * Timestamp in terms of milliseconds since January 1 1970.\n         *\n         * @return {number}\n         * Timezone offset in minutes.\n         */\n        /**\n         * Options for formatting dates and times using the [Intl.DateTimeFormat](\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\n         * ) API, and extended with some custom options for Highcharts.\n         *\n         * @interface Highcharts.DateTimeFormatOptions\n         */ /**\n        * The locale matching algorithm to use.\n        *\n        * @name Highcharts.DateTimeFormatOptions#localeMatcher\n        * @type {string|undefined}\n        */ /**\n        * The time zone to use. The default is the browser's default time zone.\n        *\n        * @name Highcharts.DateTimeFormatOptions#timeZone\n        * @type {string|undefined}\n        */ /**\n        * Whether to use 12-hour time (as opposed to 24-hour time).\n        *\n        * @name Highcharts.DateTimeFormatOptions#hour12\n        * @type {'auto'|'always'|'never'|undefined}\n        */ /**\n        * The format matching algorithm to use.\n        *\n        * @name Highcharts.DateTimeFormatOptions#formatMatcher\n        * @type {string|undefined}\n        */ /**\n        * The representation of the weekday.\n        *\n        * @name Highcharts.DateTimeFormatOptions#weekday\n        * @type {'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the era.\n        *\n        * @name Highcharts.DateTimeFormatOptions#era\n        * @type {'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the year.\n        *\n        * @name Highcharts.DateTimeFormatOptions#year\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the month.\n        * \"narrow\", \"short\", \"long\".\n        *\n        * @name Highcharts.DateTimeFormatOptions#month\n        * @type {'numeric'|'2-digit'|'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the day.\n        *\n        * @name Highcharts.DateTimeFormatOptions#day\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the hour.\n        *\n        * @name Highcharts.DateTimeFormatOptions#hour\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the minute.\n        *\n        * @name Highcharts.DateTimeFormatOptions#minute\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the second.\n        *\n        * @name Highcharts.DateTimeFormatOptions#second\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The number of fractional digits to use. 3 means milliseconds.\n        *\n        * @name Highcharts.DateTimeFormatOptions#fractionalSecondDigits\n        * @type {number|undefined}\n        */ /**\n        * The representation of the time zone name.\n        *\n        * @name Highcharts.DateTimeFormatOptions#timeZoneName\n        * @type {'short'|'long'|undefined}\n        */ /**\n        * A prefix for the time string. Custom Highcharts option.\n        *\n        * @name Highcharts.DateTimeFormatOptions#prefix\n        * @type {'string'|undefined}\n        */ /**\n        * A suffix for the time string. Custom Highcharts option.\n        *\n        * @name Highcharts.DateTimeFormatOptions#suffix\n        * @type {'string'|undefined}\n        */\n        ''; // Keeps doclets above in JS file\n\n        return Time;\n    });\n    _registerModule(_modules, 'Core/Defaults.js', [_modules['Core/Chart/ChartDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Time.js'], _modules['Core/Utilities.js']], function (ChartDefaults, H, Palettes, Time, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { fireEvent, merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Global default settings.\n         *\n         * @name Highcharts.defaultOptions\n         * @type {Highcharts.Options}\n         */ /**\n        * @optionparent\n        * @private\n        */\n        const defaultOptions = {\n            /**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors),\n             * [pie.colors](#plotOptions.pie.colors).\n             *\n             * In styled mode, the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             * @sample {highcharts} highcharts/chart/colors/\n             *         Assign a global color theme\n             * @sample highcharts/members/theme-v10/\n             *         Latest release styled like version 10\n             *\n             * @type    {Array<(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)>}\n             * @default [\n             *     \"#2caffe\",\n             *     \"#544fc5\",\n             *     \"#00e272\",\n             *     \"#fe6a35\",\n             *     \"#6b8abc\",\n             *     \"#d568fb\",\n             *     \"#2ee0ca\",\n             *     \"#fa4b42\",\n             *     \"#feb56a\",\n             *     \"#91e8e1\"\n             * ]\n             */\n            colors: Palettes.colors,\n            /**\n             * Styled mode only. Configuration object for adding SVG definitions for\n             * reusable elements. See [gradients, shadows and\n             * patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\n             * for more information and code examples.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @apioption defs\n             */\n            /**\n             * @ignore-option\n             */\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            /**\n             * An object containing language-related strings and settings. A typical\n             * setup uses `Highcharts.setOptions` to make the options apply to all\n             * charts in the same page.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     lang: {\n             *         locale: 'fr'\n             *     }\n             * });\n             * ```\n             */\n            lang: {\n                /**\n                 * The browser locale to use for date and number formatting. The actual\n                 * locale used for each chart is determined in three steps:\n                 * 1. If this `lang.locale` option is specified, it is used.\n                 * 2. Else, look for the closest ancestor HTML element with a `lang`\n                 *    attribute, typically the `<html>` element.\n                 * 3. If no 'lang' attribute is found, use the default browser locale.\n                 *\n                 * Use `en-GB`, British English, for approximate consistency with\n                 * Highcharts v < 12.\n                 *\n                 * @sample highcharts/lang/locale/\n                 *         Set the locale using the `lang.locale` option\n                 * @sample highcharts/lang/locale-attribute/\n                 *         Pick up the locale from the HTML `lang` attribute\n                 * @sample highcharts/members/highcharts-numberformat\n                 *         Arabic locale with digits and dates         *\n                 *\n                 * @since 12.0.0\n                 * @type {string|Array<string>}\n                 */\n                locale: void 0,\n                /**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 */\n                loading: 'Loading...',\n                /**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`. Defaults to 'undefined',\n                 * meaning the default month names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                months: void 0,\n                /**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`. Defaults to\n                 * 'undefined', meaning the default short month names are used according\n                 * to the `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                shortMonths: void 0,\n                /**\n                 * An array containing the weekday names. Defaults to 'undefined',\n                 * meaning the default weekday names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                weekdays: void 0,\n                /**\n                 * Short week days, starting Sunday. Defaults to 'undefined', meaning\n                 * the default short weekday names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @sample highcharts/lang/shortweekdays/\n                 *         Finnish two-letter abbreviations\n                 *\n                 * @type      {Array<string>}\n                 * @since     4.2.4\n                 * @apioption lang.shortWeekdays\n                 */\n                /**\n                 * What to show in a date field for invalid dates. Defaults to an empty\n                 * string.\n                 *\n                 * @type      {string}\n                 * @since     4.1.8\n                 * @product   highcharts highstock\n                 * @apioption lang.invalidDate\n                 */\n                /**\n                 * The title appearing on hovering the zoom in button. The text itself\n                 * defaults to \"+\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom in\n                 * @product   highmaps\n                 * @apioption lang.zoomIn\n                 */\n                /**\n                 * The title appearing on hovering the zoom out button. The text itself\n                 * defaults to \"-\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom out\n                 * @product   highmaps\n                 * @apioption lang.zoomOut\n                 */\n                /**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to the locale decimal point as determined by `lang.locale`.\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     1.2.2\n                 * @apioption lang.decimalPoint\n                 */\n                /**\n                 * [Metric prefixes](https://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the\n                 * positions with `null` causes the full number to be written. Setting\n                 * `numericSymbols` to `undefined` disables shortening altogether.\n                 *\n                 * @sample {highcharts} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n                 * @since   2.3.0\n                 */\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'],\n                /**\n                 * The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\n                 * Use 10000 for Japanese, Korean and various Chinese locales, which\n                 * use symbols for 10^4, 10^8 and 10^12.\n                 *\n                 * @sample highcharts/lang/numericsymbolmagnitude/\n                 *         10000 magnitude for Japanese\n                 *\n                 * @type      {number}\n                 * @default   1000\n                 * @since     5.0.3\n                 * @apioption lang.numericSymbolMagnitude\n                 */\n                /**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to the locale thousands separator as determined by `lang.locale`.\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     1.2.2\n                 * @apioption lang.thousandsSep\n                 */\n                /**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoom: 'Reset zoom',\n                /**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoomTitle: 'Reset zoom level 1:1'\n            },\n            /**\n             * Global options that don't apply to each chart. These options, like\n             * the `lang` options, must be set using the `Highcharts.setOptions`\n             * method.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     global: {\n             *         buttonTheme: {\n             *             fill: '#d0d0d0'\n             *         }\n             *     }\n             * });\n             * ```\n             */\n            global: {\n                /**\n                 * General theme for buttons. This applies to the zoom button, exporting\n                 * context menu, map navigation, range selector buttons and custom\n                 * buttons generated using the `SVGRenderer.button` function. However,\n                 * each of these may be overridden with more specific options.\n                 *\n                 * @sample highcharts/global/buttontheme\n                 *         General button theme\n                 * @since 11.4.2\n                 */\n                buttonTheme: {\n                    /**\n                     * The fill color for buttons\n                     */\n                    fill: \"#f7f7f7\" /* Palette.neutralColor3 */,\n                    /**\n                     * The padding of buttons\n                     */\n                    padding: 8,\n                    /**\n                     * The border radius for buttons\n                     */\n                    r: 2,\n                    /**\n                     * The stroke color for buttons\n                     */\n                    stroke: \"#cccccc\" /* Palette.neutralColor20 */,\n                    /**\n                     * The stroke width for buttons\n                     */\n                    'stroke-width': 1,\n                    /**\n                     * CSS styling for the buttons' text\n                     */\n                    style: {\n                        color: \"#333333\" /* Palette.neutralColor80 */,\n                        cursor: 'pointer',\n                        fontSize: '0.8em',\n                        fontWeight: 'normal'\n                    },\n                    /**\n                     * State overrides for the buttons\n                     */\n                    states: {\n                        /**\n                         * Hover state overrides for the buttons are applied in addition\n                         * to the normal state options\n                         */\n                        hover: {\n                            fill: \"#e6e6e6\" /* Palette.neutralColor10 */\n                        },\n                        /**\n                         * Select state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        select: {\n                            fill: \"#e6e9ff\" /* Palette.highlightColor10 */,\n                            style: {\n                                color: \"#000000\" /* Palette.neutralColor100 */,\n                                fontWeight: 'bold'\n                            }\n                        },\n                        /**\n                         * Disabled state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        disabled: {\n                            /**\n                             * Disabled state CSS style overrides for the buttons' text\n                             */\n                            style: {\n                                color: \"#cccccc\" /* Palette.neutralColor20 */\n                            }\n                        }\n                    }\n                }\n            },\n            /**\n             * Time options that can apply globally or to individual charts. These\n             * settings affect how `datetime` axes are laid out, how tooltips are\n             * formatted, how series\n             * [pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\n             * the Highcharts Stock range selector handles time.\n             *\n             * The common use case is that all charts in the same Highcharts object\n             * share the same time settings, in which case the global settings are set\n             * using `setOptions`.\n             *\n             * ```js\n             * // Apply time settings globally\n             * Highcharts.setOptions({\n             *     time: {\n             *         timezone: 'Europe/London'\n             *     }\n             * });\n             * // Apply time settings by instance\n             * const chart = Highcharts.chart('container', {\n             *     time: {\n             *         timezone: 'America/New_York'\n             *     },\n             *     series: [{\n             *         data: [1, 4, 3, 5]\n             *     }]\n             * });\n             *\n             * // Use the Time object\n             * console.log(\n             *        'Current time in New York',\n             *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n             * );\n             * ```\n             *\n             * Since v6.0.5, the time options were moved from the `global` object to the\n             * `time` object, and time options can be set on each individual chart.\n             *\n             * @sample {highcharts|highstock}\n             *         highcharts/time/timezone/\n             *         Set the timezone globally\n             * @sample {highcharts}\n             *         highcharts/time/individual/\n             *         Set the timezone per chart instance\n             * @sample {highstock}\n             *         stock/time/individual/\n             *         Set the timezone per chart instance\n             *\n             * @since     6.0.5\n             * @optionparent time\n             */\n            time: {\n                /**\n                 * A custom `Date` class for advanced date handling. For example,\n                 * [JDate](https://github.com/tahajahangir/jdate) can be hooked in to\n                 * handle Jalali dates.\n                 *\n                 * @type      {*}\n                 * @since     4.0.4\n                 * @product   highcharts highstock gantt\n                 */\n                Date: void 0,\n                /**\n                 * A named time zone. Supported time zone names rely on the browser\n                 * implementations, as described in the [mdn\n                 * docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#timezone).\n                 * If the given time zone is not recognized by the browser, Highcharts\n                 * provides a warning and falls back to returning a 0 offset,\n                 * corresponding to the UTC time zone.\n                 *\n                 * The time zone affects axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`.\n                 *\n                 * Setting `timezone` to `undefined` falls back to the default browser\n                 * timezone setting.\n                 *\n                 * Until v11.2.0, this option depended on moment.js.\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezone/ Europe/Oslo\n                 *\n                 * @type      {string}\n                 * @since     5.0.7\n                 * @product   highcharts highstock gantt\n                 */\n                timezone: 'UTC',\n                /**\n                 * The timezone offset in minutes. Positive values are west, negative\n                 * values are east of UTC, as in the ECMAScript\n                 * [getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n                 * method. Use this to display UTC based data in a predefined time zone.\n                 *\n                 * This option is deprecated as of v11.4.1 and will be removed in a\n                 * future release. Use the [time.timezone](#time.timezone) option\n                 * instead.\n                 *\n                 * @see [time.getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezoneoffset/\n                 *         Timezone offset\n                 *\n                 * @since     3.0.8\n                 * @deprecated 11.4.2\n                 * @product   highcharts highstock gantt\n                 */\n                timezoneOffset: 0,\n                /**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * Setting `useUTC` to true is equivalent to setting `time.timezone` to\n                 * `\"UTC\"`. Setting `useUTC` to false is equivalent to setting\n                 * `time.timezone` to `undefined`.\n                 *\n                 * @see [time.timezone](#timezone)\n                 *\n                 * @sample {highcharts} highcharts/time/useutc-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/time/useutc-false/\n                 *         False\n                 *\n                 * @deprecated\n                 */\n                useUTC: void 0\n            },\n            chart: ChartDefaults,\n            /**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/\n             *         Title options demonstrated\n             * @sample {highcharts} highcharts/title/align-auto/\n             *         Default title alignment\n             */\n            title: {\n                /**\n                 * When the title is floating, the plot area will not move to make space\n                 * for it.\n                 *\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/\n                 *         False by default\n                 * @sample {highcharts} highcharts/title/floating/\n                 *         True - title on top of the plot area\n                 * @sample {highstock} stock/chart/title-floating/\n                 *         True - title on top of the plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption title.floating\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption title.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\n                 * as if [floating](#title.floating) were `true`.\n                 *\n                 * @sample {highcharts} highcharts/title/verticalalign/\n                 *         Chart title in bottom right corner\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption title.verticalAlign\n                 */\n                /**\n                 * The x position of the title relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption title.x\n                 */\n                /**\n                 * The y position of the title relative to the alignment within\n                 * [chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](\n                 * #chart.spacingBottom). By default it depends on the font size.\n                 *\n                 * @sample {highcharts} highcharts/title/y/\n                 *         Title inside the plot area\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption title.y\n                 */\n                /**\n                 * CSS styles for the title. Use this for font styling, but use `align`,\n                 * `x` and `y` for text alignment.\n                 *\n                 * Note that the default [title.minScale](#title.minScale) option also\n                 * affects the rendered font size. In order to keep the font size fixed\n                 * regardless of title length, set `minScale` to 1.\n                 *\n                 * In styled mode, the title style is given in the `.highcharts-title`\n                 * class.\n                 *\n                 * @sample {highcharts} highcharts/title/style/\n                 *         Custom color and weight\n                 * @sample {highstock} stock/chart/title-style/\n                 *         Custom color and weight\n                 * @sample highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {highcharts|highmaps} { \"color\": \"#333333\", \"fontSize\": \"18px\" }\n                 * @default   {highstock} { \"color\": \"#333333\", \"fontSize\": \"16px\" }\n                 */\n                style: {\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    fontWeight: 'bold'\n                },\n                /**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `undefined`.\n                 *\n                 * @sample {highcharts} highcharts/title/text/\n                 *         Custom title\n                 * @sample {highstock} stock/chart/title-text/\n                 *         Custom title\n                 *\n                 * @default {highcharts|highmaps} Chart title\n                 * @default {highstock} undefined\n                 */\n                text: 'Chart title',\n                /**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * Since v12 it defaults to `undefined`, meaning the alignment is\n                 * computed for best fit. If the text fits in one line, it aligned to\n                 * the center, but if it is wrapped into multiple lines, it is aligned\n                 * to the left.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Default alignment, dynamic\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {Highcharts.AlignValue}\n                 * @default   undefined\n                 * @since     2.0\n                 * @apioption title.align\n                 */\n                /**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @sample {highcharts} highcharts/title/margin-50/\n                 *         A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/\n                 *         The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/\n                 *         A chart title margin of 50\n                 *\n                 * @since 2.1\n                 */\n                margin: 15,\n                /**\n                 * When the title is too wide to fit in the chart, the default behavior\n                 * is to scale it down to fit, or apply word wrap if it is scaled down\n                 * to `minScale` and still doesn't fit.\n                 *\n                 * The default value reflects the scale, when using default font sizes,\n                 * when the title font size matches that of the subtitle. The title\n                 * still stands out as it is bold by default.\n                 *\n                 * Set `minScale` to 1 to avoid downscaling.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Downscaling demonstrated\n                 *\n                 * @since 12.0.0\n                 */\n                minScale: 0.67\n            },\n            /**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highcharts} highcharts/title/align-auto/\n             *         Default title alignment\n             * @sample {highmaps} maps/title/subtitle/\n             *         Subtitle options demonstrated\n             */\n            subtitle: {\n                /**\n                 * When the subtitle is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/floating/\n                 *         Floating title and subtitle\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote floating at bottom right of plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption subtitle.floating\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 * @apioption subtitle.style\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption subtitle.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\n                 * floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption subtitle.verticalAlign\n                 */\n                /**\n                 * The x position of the subtitle relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption subtitle.x\n                 */\n                /**\n                 * The y position of the subtitle relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\n                 * is laid out below the title unless the title is floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption subtitle.y\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The subtitle of the chart.\n                 *\n                 * @sample {highcharts|highstock} highcharts/subtitle/text/\n                 *         Custom subtitle\n                 * @sample {highcharts|highstock} highcharts/subtitle/text-formatted/\n                 *         Formatted and linked text.\n                 */\n                text: ''\n                /**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 * \"center\" and \"right\". Since v12, it defaults to `undefined`, meaning\n                 * the actual alignment is inherited from the alignment of the main\n                 * title.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Default title and subtitle alignment, dynamic\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at bottom right of plot area\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @default undefined\n                 * @since 2.0\n                 * @apioption subtitle.align\n                 */\n            },\n            /**\n             * The chart's caption, which will render below the chart and will be part\n             * of exported charts. The caption can be updated after chart initialization\n             * through the `Chart.update` or `Chart.caption.update` methods.\n             *\n             * @sample highcharts/caption/text/\n             *         A chart with a caption\n             * @since  7.2.0\n             */\n            caption: {\n                /**\n                 * When the caption is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.floating\n                 */\n                /**\n                 * The margin between the caption and the plot area.\n                 */\n                margin: 15,\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.useHTML\n                 */\n                /**\n                 * The x position of the caption relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption caption.x\n                 */\n                /**\n                 * The y position of the caption relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`.\n                 *\n                 * @type      {number}\n                 * @apioption caption.y\n                 */\n                /**\n                 * CSS styles for the caption.\n                 *\n                 * In styled mode, the caption style is given in the\n                 * `.highcharts-caption` class.\n                 *\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The caption text of the chart.\n                 *\n                 * @sample {highcharts} highcharts/caption/text/\n                 *         Custom caption\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the caption. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * The vertical alignment of the caption. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\n                 * floating.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'bottom'\n            },\n            /**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](\n             * #plotOptions.series) object. Then options for all series of a specific\n             * type are given in the plotOptions of that type, for example\n             * `plotOptions.line`. Next, options for one single series are given in\n             * [the series array](#series).\n             */\n            plotOptions: {},\n            /**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and create\n             * [custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */\n            legend: {\n                /**\n                 * The background color of the legend.\n                 *\n                 * @see In styled mode, the legend background fill can be applied with\n                 *      the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/backgroundcolor/\n                 *         Yellowish background\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption legend.backgroundColor\n                 */\n                /**\n                 * The width of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke width can be applied\n                 *      with the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderwidth/\n                 *         2px border width\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption legend.borderWidth\n                 */\n                /**\n                 * Enable or disable the legend. There is also a series-specific option,\n                 * [showInLegend](#plotOptions.series.showInLegend), that can hide the\n                 * series from the legend. In some series types this is `false` by\n                 * default, so it must set to `true` in order to show the legend for the\n                 * series.\n                 *\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 *\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @default {gantt} false\n                 */\n                enabled: true,\n                /**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/align/\n                 *         Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * If the [layout](legend.layout) is `horizontal` and the legend items\n                 * span over two lines or more, whether to align the items into vertical\n                 * columns. Setting this to `false` makes room for more items, but will\n                 * look more messy.\n                 *\n                 * @since 6.1.0\n                 */\n                alignColumns: true,\n                /**\n                 * A CSS class name to apply to the legend group.\n                 */\n                className: 'highcharts-no-tooltip',\n                /**\n                 * General event handlers for the legend. These event hooks can\n                 * also be attached to the legend at run time using the\n                 * `Highcharts.addEvent` function.\n                 *\n                 * @declare Highcharts.LegendEventsOptionsObject\n                 *\n                 * @private\n                 */\n                events: {},\n                /**\n                 * Fires when the legend item belonging to the series is clicked. One\n                 * parameter, `event`, is passed to the function. The default action\n                 * is to toggle the visibility of the series, point or data class. This\n                 * can be prevented by returning `false` or calling\n                 * `event.preventDefault()`.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemclick/\n                 *         Confirm hiding and showing\n                 * @sample {highcharts} highcharts/legend/pie-legend-itemclick/\n                 *         Confirm toggle visibility of pie slices\n                 *\n                 * @type      {Highcharts.LegendItemClickCallbackFunction}\n                 * @context   Highcharts.Legend\n                 * @apioption legend.events.itemClick\n                 */\n                /**\n                 * When the legend is floating, the plot area ignores it and is allowed\n                 * to be placed below it.\n                 *\n                 * @sample {highcharts} highcharts/legend/floating-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/legend/floating-true/\n                 *         True\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Floating legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption legend.floating\n                 */\n                /**\n                 * The layout of the legend items. Can be one of `horizontal` or\n                 * `vertical` or `proximate`. When `proximate`, the legend items will be\n                 * placed as close as possible to the graphs they're representing,\n                 * except in inverted charts or when the legend position doesn't allow\n                 * it.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/\n                 *         Vertical\n                 * @sample highcharts/legend/layout-proximate\n                 *         Labels proximate to the data\n                 * @sample {highstock} stock/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/\n                 *         Vertical with color axis gradient\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\", \"proximate\"]\n                 */\n                layout: 'horizontal',\n                /**\n                 * In a legend with horizontal layout, the itemDistance defines the\n                 * pixel distance between each item.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 * @sample {highstock} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 *\n                 * @type      {number}\n                 * @default   {highcharts} 20\n                 * @default   {highstock} 20\n                 * @default   {highmaps} 8\n                 * @since     3.0.3\n                 * @apioption legend.itemDistance\n                 */\n                /**\n                 * The pixel bottom margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginBottom: 2,\n                /**\n                 * The pixel top margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginTop: 2,\n                /**\n                 * The width for each legend item. By default the items are laid out\n                 * successively. In a [horizontal layout](legend.layout), if the items\n                 * are laid out across two rows or more, they will be vertically aligned\n                 * depending on the [legend.alignColumns](legend.alignColumns) option.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemwidth-default/\n                 *         Undefined by default\n                 * @sample {highcharts} highcharts/legend/itemwidth-80/\n                 *         80 for aligned legend items\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption legend.itemWidth\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for each legend label. Available variables relates to properties on\n                 * the series, or the point in case of pies.\n                 *\n                 * @type      {string}\n                 * @default   {name}\n                 * @since     1.3\n                 * @apioption legend.labelFormat\n                 */\n                /* eslint-disable valid-jsdoc */\n                /**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case of\n                 * pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps the context can also be a data class in case of a\n                 * `colorAxis`.\n                 *\n                 * @sample {highcharts} highcharts/legend/labelformatter/\n                 *         Add text\n                 * @sample {highmaps} maps/legend/labelformatter/\n                 *         Data classes with label formatter\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Point|Series>}\n                 */\n                labelFormatter: function () {\n                    // eslint-enable valid-jsdoc\n                    return this.name;\n                },\n                /**\n                 * Line height for the legend items. Deprecated as of 2.1\\. Instead,\n                 * the line height for each item can be set using\n                 * `itemStyle.lineHeight`, and the padding between items using\n                 * `itemMarginTop` and `itemMarginBottom`.\n                 *\n                 * @sample {highcharts} highcharts/legend/lineheight/\n                 *         Setting padding\n                 *\n                 * @deprecated\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @since     2.0\n                 * @product   highcharts gantt\n                 * @apioption legend.lineHeight\n                 */\n                /**\n                 * If the plot area sized is calculated automatically and the legend is\n                 * not floating, the legend margin is the space between the legend and\n                 * the axis labels or plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/margin-default/\n                 *         12 pixels by default\n                 * @sample {highcharts} highcharts/legend/margin-30/\n                 *         30 pixels\n                 *\n                 * @type      {number}\n                 * @default   12\n                 * @since     2.1\n                 * @apioption legend.margin\n                 */\n                /**\n                 * Maximum pixel height for the legend. When the maximum height is\n                 * extended, navigation will show.\n                 *\n                 * @type      {number}\n                 * @since     2.3.0\n                 * @apioption legend.maxHeight\n                 */\n                /**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke can be applied with the\n                 *      `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/bordercolor/\n                 *         Brown border\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                /**\n                 * The border corner radius of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderradius-default/\n                 *         Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/\n                 *         5px rounded\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 */\n                borderRadius: 0,\n                /**\n                 * Options for the paging or navigation appearing when the legend is\n                 * overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to\n                 * [increase the chart height in\n                 * export](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/).\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 */\n                navigation: {\n                    /**\n                     * How to animate the pages when navigating up or down. A value of\n                     * `true` applies the default navigation given in the\n                     * `chart.animation` option. Additional options can be given as an\n                     * object containing values for easing and duration.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @default   true\n                     * @since     2.2.4\n                     * @apioption legend.navigation.animation\n                     */\n                    /**\n                     * The pixel size of the up and down arrows in the legend paging\n                     * navigation.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {number}\n                     * @default   12\n                     * @since     2.2.4\n                     * @apioption legend.navigation.arrowSize\n                     */\n                    /**\n                     * Whether to enable the legend navigation. In most cases, disabling\n                     * the navigation results in an unwanted overflow.\n                     *\n                     * See also the\n                     * [adapt chart to legend](https://github.com/highcharts/adapt-chart-to-legend)\n                     * plugin for a solution to extend the chart height to make room for\n                     * the legend, optionally in exported charts only.\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     4.2.4\n                     * @apioption legend.navigation.enabled\n                     */\n                    /**\n                     * Text styles for the legend page navigation.\n                     *\n                     * @see In styled mode, the navigation items are styled with the\n                     *      `.highcharts-legend-navigation` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {Highcharts.CSSObject}\n                     * @since     2.2.4\n                     * @apioption legend.navigation.style\n                     */\n                    style: {\n                        /**\n                         * @type {number|string}\n                         */\n                        fontSize: '0.8em'\n                    },\n                    /**\n                     * The color for the active up or down arrow in the legend page\n                     * navigation.\n                     *\n                     * @see In styled mode, the active arrow be styled with the\n                     *      `.highcharts-legend-nav-active` class.\n                     *\n                     * @sample  {highcharts} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     * @sample  {highstock} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    activeColor: \"#0022ff\" /* Palette.highlightColor100 */,\n                    /**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @see In styled mode, the inactive arrow be styled with the\n                     *      `.highcharts-legend-nav-inactive` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    inactiveColor: \"#cccccc\" /* Palette.neutralColor20 */\n                },\n                /**\n                 * The inner padding of the legend box.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @type      {number}\n                 * @default   8\n                 * @since     2.2.0\n                 * @apioption legend.padding\n                 */\n                /**\n                 * Whether to reverse the order of the legend items compared to the\n                 * order of the series or points as defined in the configuration object.\n                 *\n                 * @see [yAxis.reversedStacks](#yAxis.reversedStacks),\n                 *      [series.legendIndex](#series.legendIndex)\n                 *\n                 * @sample {highcharts} highcharts/legend/reversed/\n                 *         Stacked bar with reversed legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.2.5\n                 * @apioption legend.reversed\n                 */\n                /**\n                 * Whether to show the symbol on the right side of the text rather than\n                 * the left side. This is common in Arabic and Hebrew.\n                 *\n                 * @sample {highcharts} highcharts/legend/rtl/\n                 *         Symbol to the right\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption legend.rtl\n                 */\n                /**\n                 * CSS styles for the legend area. In the 1.x versions the position\n                 * of the legend area was determined by CSS. In 2.x, the position is\n                 * determined by properties like `align`, `verticalAlign`, `x` and `y`,\n                 * but the styles are still parsed for backwards compatibility.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @product   highcharts highstock\n                 * @apioption legend.style\n                 */\n                /**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `undefined` to wrap\n                 * text instead. A `width` property can be added to control the text\n                 * width.\n                 *\n                 * @see In styled mode, the legend items can be styled with the\n                 *      `.highcharts-legend-item` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemstyle/\n                 *         Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"0.8em\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}\n                 */\n                itemStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /**\n                     * @ignore\n                     */\n                    cursor: 'pointer',\n                    /**\n                     * @ignore\n                     */\n                    fontSize: '0.8em',\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'none',\n                    /**\n                     * @ignore\n                     */\n                    textOverflow: 'ellipsis'\n                },\n                /**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @see In styled mode, the hovered legend items can be styled with\n                 *      the `.highcharts-legend-item:hover` pseudo-class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/\n                 *         Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#000000\"}\n                 */\n                itemHoverStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @see In styled mode, the hidden legend items can be styled with\n                 *      the `.highcharts-legend-item-hidden` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/\n                 *         Darker gray color\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#cccccc\"}\n                 */\n                itemHiddenStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'line-through'\n                },\n                /**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {boolean|Highcharts.CSSObject}\n                 */\n                shadow: false,\n                /**\n                 * Default styling for the checkbox next to a legend item when\n                 * `showCheckbox` is true.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 * @default {\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}\n                 */\n                itemCheckboxStyle: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    width: '13px', // For IE precision\n                    /**\n                     * @ignore\n                     */\n                    height: '13px'\n                },\n                /// itemWidth: undefined,\n                /**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @since 5.0.0\n                 */\n                squareSymbol: true,\n                /**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * Note: This option is a default source of color axis height, if the\n                 * [colorAxis.height](https://api.highcharts.com/highcharts/colorAxis.height)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolHeight\n                 */\n                /**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`, effectively\n                 * creating a circle.\n                 *\n                 * For color axis scales, it defaults to 3.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolRadius\n                 */\n                /**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * Note: This option is a default source of color axis width, if the\n                 * [colorAxis.width](https://api.highcharts.com/highcharts/colorAxis.width)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 *\n                 * @type      {number}\n                 * @apioption legend.symbolWidth\n                 */\n                /**\n                 * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the legend item texts.\n                 *\n                 * Prior to 4.1.7, when using HTML, [legend.navigation](\n                 * #legend.navigation) was disabled.\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption legend.useHTML\n                 */\n                /**\n                 * For a color axis with data classes, how many decimals to render in\n                 * the legend. The default preserves the decimals of the range numbers.\n                 *\n                 * @type      {number}\n                 * @default   -1\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueDecimals\n                 */\n                /**\n                 * For a color axis with data classes, a suffix for the range numbers in\n                 * the legend.\n                 *\n                 * @type      {string}\n                 * @default   ''\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueSuffix\n                 */\n                /**\n                 * The width of the legend box. If a number is set, it translates to\n                 * pixels. Since v7.0.2 it allows setting a percent string of the full\n                 * chart width, for example `40%`.\n                 *\n                 * Defaults to the full chart width for legends below or above the\n                 * chart, half the chart width for legends to the left and right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 * @sample {highcharts} highcharts/legend/width-percent/\n                 *         A percent of the chart width\n                 *\n                 * @type      {number|string}\n                 * @since     2.0\n                 * @apioption legend.width\n                 */\n                /**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolpadding/\n                 *         Greater symbol width and padding\n                 */\n                symbolPadding: 5,\n                /**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * When the [layout](#legend.layout) option is `proximate`, the\n                 * `verticalAlign` option doesn't apply.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'bottom',\n                // Width: undefined,\n                /**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 *\n                 * @since 2.0\n                 */\n                x: 0,\n                /**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @since 2.0\n                 */\n                y: 0,\n                /**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/\n                 *         Legend title\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend with title\n                 *\n                 * @since 3.0\n                 */\n                title: {\n                    /**\n                     * A text or HTML string for the title.\n                     *\n                     * @type      {string}\n                     * @since     3.0\n                     * @apioption legend.title.text\n                     */\n                    /**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @see In styled mode, the legend title is styled with the\n                     *      `.highcharts-legend-title` class.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"fontSize\": \"0.8em\", \"fontWeight\": \"bold\"}\n                     * @since   3.0\n                     */\n                    style: {\n                        /**\n                         * @ignore\n                         */\n                        fontSize: '0.8em',\n                        /**\n                         * @ignore\n                         */\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            /**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             */\n            loading: {\n                /**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.hideDuration\n                 */\n                /**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.showDuration\n                 */\n                /**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @see In styled mode, the loading label is styled with the\n                 *      `.highcharts-loading-inner` class.\n                 *\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/\n                 *         Vertically centered\n                 * @sample {highstock} stock/loading/general/\n                 *         Label styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}\n                 * @since   1.2.0\n                 */\n                labelStyle: {\n                    /**\n                     * @ignore\n                     */\n                    fontWeight: 'bold',\n                    /**\n                     * @ignore\n                     */\n                    position: 'relative',\n                    /**\n                     * @ignore\n                     */\n                    top: '45%'\n                },\n                /**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * In styled mode, the loading label is styled with the\n                 * `.highcharts-loading` class.\n                 *\n                 * @sample  {highcharts|highmaps} highcharts/loading/style/\n                 *          Gray plot area, white text\n                 * @sample  {highstock} stock/loading/general/\n                 *          Gray plot area, white text\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}\n                 * @since   1.2.0\n                 */\n                style: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                    /**\n                     * @ignore\n                     */\n                    opacity: 0.5,\n                    /**\n                     * @ignore\n                     */\n                    textAlign: 'center'\n                }\n            },\n            /**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @declare Highcharts.TooltipOptions\n             */\n            tooltip: {\n                /**\n                 * The color of the tooltip border. When `undefined`, the border takes\n                 * the color of the corresponding series or point.\n                 *\n                 * Note that the [borderWidth](#tooltip.borderWidth) is usually 0 by\n                 * default, so the border color may not be visible until a border width\n                 * is set.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ Follow\n                 *         series by default\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-black/ Black\n                 *         border\n                 * @sample {highstock} stock/tooltip/general/ Styled tooltip\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and\n                 *         border demo\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption tooltip.borderColor\n                 */\n                /**\n                 * A CSS class name to apply to the tooltip's container div,\n                 * allowing unique CSS styling for each chart.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.className\n                 */\n                /**\n                 * Since 4.1, the crosshair definitions are moved to the Axis object\n                 * in order for a better separation from the tooltip. See\n                 * [xAxis.crosshair](#xAxis.crosshair).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/crosshairs-x/\n                 *         Enable a crosshair for the x value\n                 *\n                 * @deprecated\n                 *\n                 * @type      {*}\n                 * @default   true\n                 * @apioption tooltip.crosshairs\n                 */\n                /**\n                 * Distance from point to tooltip in pixels.\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @apioption tooltip.distance\n                 */\n                /**\n                 * Whether the tooltip should follow the mouse as it moves across\n                 * columns, pie slices and other point types with an extent.\n                 * By default it behaves this way for pie, polygon, map, sankey\n                 * and wordcloud series by override in the `plotOptions`\n                 * for those series types.\n                 *\n                 * Does not apply if [split](#tooltip.split) is `true`.\n                 *\n                 * For touch moves to behave the same way, [followTouchMove](\n                 * #tooltip.followTouchMove) must be `true` also.\n                 *\n                 * @sample highcharts/tooltip/followpointer/\n                 *         Tooltip follow pointer comparison\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} false\n                 * @default   {highmaps} true\n                 * @since     3.0\n                 * @apioption tooltip.followPointer\n                 */\n                /**\n                 * Whether the tooltip should update as the finger moves on a touch\n                 * device. If this is `true` and [chart.panning](#chart.panning) is\n                 * set,`followTouchMove` will take over one-finger touches, so the user\n                 * needs to use two fingers for zooming and panning.\n                 *\n                 * Note the difference to [followPointer](#tooltip.followPointer) that\n                 * only defines the _position_ of the tooltip. If `followPointer` is\n                 * false in for example a column series, the tooltip will show above or\n                 * below the column, but as `followTouchMove` is true, the tooltip will\n                 * jump from column to column as the user swipes across the plot area.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} true\n                 * @default   {highstock} true\n                 * @default   {highmaps} false\n                 * @since     3.0.1\n                 * @apioption tooltip.followTouchMove\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for the whole shared tooltip. When format strings are a requirement,\n                 * it is usually more convenient to use `headerFormat`, `pointFormat`\n                 * and `footerFormat`, but the `format` option allows combining them\n                 * into one setting.\n                 *\n                 * The context of the format string is the same as that of the\n                 * `tooltip.formatter` callback.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/format-shared/\n                 *         Format for shared tooltip\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     11.1.0\n                 * @apioption tooltip.format\n                 */\n                /**\n                 * Callback function to format the text of the tooltip from scratch. In\n                 * case of single or [shared](#tooltip.shared) tooltips, a string should\n                 * be returned. In case of [split](#tooltip.split) tooltips, it should\n                 * return an array where the first item is the header, and subsequent\n                 * items are mapped to the points. Return `false` to disable tooltip for\n                 * a specific point on series.\n                 *\n                 * A subset of HTML is supported. Unless `useHTML` is true, the HTML of\n                 * the tooltip is parsed and converted to SVG, therefore this isn't a\n                 * complete HTML renderer. The following HTML tags are supported: `b`,\n                 * `br`, `em`, `i`, `span`, `strong`. Spans can be styled with a `style`\n                 * attribute, but only text-related CSS, that is shared with SVG, is\n                 * handled.\n                 *\n                 * The context of the formatter (since v12) is the\n                 * [Point](https://api.highcharts.com/class-reference/Highcharts.Point)\n                 * instance. If the tooltip is shared or split, an array `this.points`\n                 * contains all points of the hovered x-value.\n                 *\n                 * Common properties from the Point to use in the formatter include:\n                 *\n                 * - **Point.percentage**:\n                 *   Stacked series and pies only. The point's percentage of the total.\n                 *\n                 * - **Point.points**:\n                 *   In a shared or split tooltip, this is an array containing all the\n                 *   hovered points.\n                 *\n                 * - **this.series**:\n                 *   The series object. The series name is available through\n                 *   `this.series.name`.\n                 *\n                 * - **this.total**:\n                 *   The total value at this point's x value in a stacked series, or the\n                 *   sum of all slices in a pie series.\n                 *\n                 * - **this.x**:\n                 *   The x value.\n                 *\n                 * - **this.y**:\n                 *   The y value.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/formatter-simple/\n                 *         Simple string formatting\n                 * @sample {highcharts} highcharts/tooltip/formatter-shared/\n                 *         Formatting with shared tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Formatting with split tooltip\n                 * @sample highcharts/tooltip/formatter-conditional-default/\n                 *         Extending default formatter\n                 * @sample {highstock} stock/tooltip/formatter/\n                 *         Formatting with shared tooltip\n                 * @sample {highmaps} maps/tooltip/formatter/\n                 *         String formatting\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.formatter\n                 */\n                /**\n                 * Callback function to format the text of the tooltip for\n                 * visible null points.\n                 * Works analogously to [formatter](#tooltip.formatter).\n                 *\n                 * @sample highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.nullFormatter\n                 */\n                /**\n                 * Whether to allow the tooltip to render outside the chart's SVG\n                 * element box. By default (`false`), the tooltip is rendered within the\n                 * chart's SVG element, which results in the tooltip being aligned\n                 * inside the chart area. For small charts, this may result in clipping\n                 * or overlapping. When `true`, a separate SVG element is created and\n                 * overlaid on the page, allowing the tooltip to be aligned inside the\n                 * page itself. Beware that with this option active, CSS classes on the\n                 * chart's target container, with classnames matching the pattern\n                 * 'highcharts-*', will be set on the tooltip as well. This is done to\n                 * support theming for tooltips with this option.\n                 *\n                 * Defaults to `true` if `chart.scrollablePlotArea` is activated,\n                 * otherwise `false`.\n                 *\n                 * @sample highcharts/tooltip/outside\n                 *         Small charts with tooltips outside\n                 *\n                 * @type      {boolean|undefined}\n                 * @default   undefined\n                 * @since     6.1.1\n                 * @apioption tooltip.outside\n                 */\n                /**\n                 * A callback function for formatting the HTML output for a single point\n                 * in the tooltip. Like the `pointFormat` string, but with more\n                 * flexibility.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n                 * @since     4.1.0\n                 * @context   Highcharts.Point\n                 * @apioption tooltip.pointFormatter\n                 */\n                /**\n                 * A callback function to place the tooltip in a custom position. The\n                 * callback receives three parameters: `labelWidth`, `labelHeight` and\n                 * `point`, where point contains values for `plotX` and `plotY` telling\n                 * where the reference point is in the plot area. Add `chart.plotLeft`\n                 * and `chart.plotTop` to get the full coordinates.\n                 *\n                 * To find the actual hovered `Point` instance, use\n                 * `this.chart.hoverPoint`. For shared or split tooltips, all the hover\n                 * points are available in `this.chart.hoverPoints`.\n                 *\n                 * Since v7, when [tooltip.split](#tooltip.split) option is enabled,\n                 * positioner is called for each of the boxes separately, including\n                 * xAxis header. xAxis header is not a point, instead `point` argument\n                 * contains info: `{ plotX: Number, plotY: Number, isHeader: Boolean }`\n                 *\n                 * The return should be an object containing x and y values, for example\n                 * `{ x: 100, y: 100 }`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/positioner/\n                 *         A fixed tooltip position on top of the chart\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Split tooltip with fixed positions\n                 * @sample {highstock} stock/tooltip/positioner-scrollable-plotarea/\n                 *         Scrollable plot area combined with tooltip positioner\n                 *\n                 * @type      {Highcharts.TooltipPositionerCallbackFunction}\n                 * @since     2.2.4\n                 * @apioption tooltip.positioner\n                 */\n                /**\n                 * Shows tooltip for all points with the same X value. Splits the\n                 * tooltip into one label per series, with the header close to the axis.\n                 * This is recommended over [shared](#tooltip.shared)\n                 * tooltips for charts with multiple line series, generally making them\n                 * easier to read. This option takes precedence over `tooltip.shared`.\n                 *\n                 * Not supported for [polar](#chart.polar) and [inverted](#chart.inverted) charts.\n                 *\n                 * @productdesc {highstock} In Highcharts Stock, tooltips are split\n                 * by default since v6.0.0. Stock charts typically contain\n                 * multi-dimension points and multiple panes, making split tooltips\n                 * the preferred layout over\n                 * the previous `shared` tooltip.\n                 *\n                 * @sample highcharts/tooltip/split/\n                 *         Split tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Split tooltip and custom formatter callback\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} true\n                 * @since     5.0.0\n                 * @product   highcharts highstock\n                 * @apioption tooltip.split\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing, when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @type      {boolean}\n                 * @since     8.0.1\n                 * @apioption tooltip.stickOnContact\n                 */\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption tooltip.useHTML\n                 */\n                /**\n                 * How many decimals to show in each series' y value. This is\n                 * overridable in each series' tooltip options object. The default is to\n                 * preserve all decimals.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {number|undefined}\n                 * @since     2.2\n                 * @apioption tooltip.valueDecimals\n                 */\n                /**\n                 * A string to prepend to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valuePrefix\n                 */\n                /**\n                 * A string to append to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valueSuffix\n                 */\n                /**\n                 * The format for the date in the tooltip header if the X axis is a\n                 * datetime axis. The default is a best guess based on the smallest\n                 * distance between points in the chart.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/xdateformat/\n                 *         A different format\n                 *\n                 * @type      {string|Highcharts.DateTimeFormatOptions}\n                 * @product   highcharts highstock gantt\n                 * @apioption tooltip.xDateFormat\n                 */\n                /**\n                 * How many decimals to show for the `point.change`\n                 * or the `point.cumulativeSum` value when the `series.compare`\n                 * or the `series.cumulative` option is set.\n                 * This is overridable in each series' tooltip options object.\n                 *\n                 * @type      {number}\n                 * @default   2\n                 * @since     1.0.1\n                 * @product   highstock\n                 * @apioption tooltip.changeDecimals\n                 */\n                /**\n                 * Enable or disable the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/enabled/\n                 *         Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n                 *         Disable tooltip and show values on chart instead\n                 */\n                enabled: true,\n                /**\n                 * Enable or disable animation of the tooltip.\n                 *\n                 * @type       {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                 * @since      2.3.0\n                 */\n                animation: {\n                    duration: 300,\n                    // EaseOutCirc\n                    easing: (x) => Math.sqrt(1 - Math.pow(x - 1, 2))\n                },\n                /**\n                 * The radius of the rounded border corners.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         Default border radius\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/\n                 *         Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 */\n                borderRadius: 3,\n                /**\n                 * For series on datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the string or object configuration, see\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat).\n                 *\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 *\n                 * @type    {Highcharts.Dictionary<string|Highcharts.DateTimeFormatOptions>}\n                 * @product highcharts highstock gantt\n                 */\n                dateTimeLabelFormats: {\n                    /** @internal */\n                    millisecond: '%[AebHMSL]',\n                    /** @internal */\n                    second: '%[AebHMS]',\n                    /** @internal */\n                    minute: '%[AebHM]',\n                    /** @internal */\n                    hour: '%[AebHM]',\n                    /** @internal */\n                    day: '%[AebY]',\n                    /** @internal */\n                    week: 'Week from %[AebY]',\n                    /** @internal */\n                    month: '%[BY]',\n                    /** @internal */\n                    year: '%Y'\n                },\n                /**\n                 * A string to append to the tooltip format.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @since 2.2\n                 */\n                footerFormat: '',\n                /**\n                 * The name of a symbol to use for the border around the tooltip\n                 * header. Applies only when [tooltip.split](#tooltip.split) is\n                 * enabled.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @see [tooltip.shape](#tooltip.shape)\n                 *\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Different shapes for header and split boxes\n                 *\n                 * @type       {Highcharts.TooltipShapeValue}\n                 * @validvalue [\"callout\", \"rect\"]\n                 * @since      7.0\n                 */\n                headerShape: 'callout',\n                /**\n                 * The number of milliseconds to wait until the tooltip is hidden when\n                 * mouse out from a point or chart.\n                 *\n                 * @since 3.0\n                 */\n                hideDelay: 500,\n                /**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @since 5.0.0\n                 */\n                padding: 8,\n                /**\n                 * The name of a symbol to use for the border around the tooltip. Can\n                 * be one of: `\"callout\"`, `\"circle\"` or `\"rect\"`. When\n                 * [tooltip.split](#tooltip.split)\n                 * option is enabled, shape is applied to all boxes except header, which\n                 * is controlled by\n                 * [tooltip.headerShape](#tooltip.headerShape).\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @type  {Highcharts.TooltipShapeValue}\n                 * @since 4.0\n                 */\n                shape: 'callout',\n                /**\n                 * Shows information in the tooltip for all points with the same X\n                 * value. When the tooltip is shared, the entire plot area will capture\n                 * mouse movement or touch events. Tooltip texts for series types with\n                 * ordered data (not pie, scatter, flags etc) will be shown in a single\n                 * bubble. This is recommended for single series charts and for\n                 * tablet/mobile optimized charts.\n                 *\n                 * See also [tooltip.split](#tooltip.split), that is better suited for\n                 * charts with many series, especially line-type series. The\n                 * `tooltip.split` option takes precedence over `tooltip.shared`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/shared-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/tooltip/shared-true/\n                 *         True\n                 * @sample {highcharts} highcharts/tooltip/shared-x-crosshair/\n                 *         True with x axis crosshair\n                 * @sample {highcharts} highcharts/tooltip/shared-true-mixed-types/\n                 *         True with mixed series types\n                 *\n                 * @since   2.1\n                 * @product highcharts highstock\n                 */\n                shared: false,\n                /**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense. This\n                 * applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/\n                 *         50 px on graph\n                 *\n                 * @type    {number}\n                 * @default 10/25\n                 * @since   1.2.0\n                 * @product highcharts highstock\n                 */\n                snap: isTouchDevice ? 25 : 10,\n                /**\n                 * The HTML of the tooltip header line. The context is the\n                 * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n                 * Variables are enclosed in curly brackets. Examples of common\n                 * variables to include are `x`, `y`, `series.name` and `series.color`\n                 * and other properties on the same form. The `point.key` variable\n                 * contains the category name, x value or datetime string depending on\n                 * the type of axis. For datetime axes, the `point.key` date format can\n                 * be set using `tooltip.xDateFormat`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.headerFormat\n                 */\n                headerFormat: '<span style=\"font-size: 0.8em\">{ucfirst point.key}</span><br/>',\n                /**\n                 * The HTML of the null point's line in the tooltip. Works analogously\n                 * to [pointFormat](#tooltip.pointFormat).\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.nullFormat\n                 */\n                /**\n                 * The HTML of the point's line in the tooltip. The context is the\n                 * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n                 * Variables are enclosed in curly brackets. Examples of common\n                 * variables to include are `x`, `y`, `series.name` and `series.color`\n                 * and other properties on the same form. Furthermore, `y` can be\n                 * extended by the `tooltip.valuePrefix` and `tooltip.valueSuffix`\n                 * variables. This can also be overridden for each series, which makes\n                 * it a good hook for displaying units.\n                 *\n                 * In styled mode, the dot is colored by a class name rather than the\n                 * point color.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/pointformat/\n                 *         A different point format with value suffix\n                 * @sample {highcharts|highstock} highcharts/tooltip/pointformat-extra-information/\n                 *         Show extra information about points in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type       {string}\n                 * @since      2.2\n                 * @apioption  tooltip.pointFormat\n                 */\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n                /**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/\n                 *         Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                /**\n                 * The pixel width of the tooltip border. Defaults to 0 for single\n                 * tooltips and 1 for split tooltips.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         2 pixels\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/\n                 *         No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {number}\n                 */\n                borderWidth: void 0,\n                /**\n                 * Whether to apply a drop shadow to the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/\n                 *         False\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         Fixed tooltip position, border and shadow disabled\n                 *\n                 * @type {boolean|Highcharts.ShadowOptionsObject}\n                 */\n                shadow: true,\n                /**\n                 * Prevents the tooltip from switching or closing when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @since 8.0.1\n                 */\n                stickOnContact: false,\n                /**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * Note that the default `pointerEvents` style makes the tooltip ignore\n                 * mouse events, so in order to use clickable tooltips, this value must\n                 * be set to `auto`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/style/\n                 *         Greater padding, bold text\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @internal */\n                    cursor: 'default',\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @since 2.2\n                 */\n                useHTML: false\n            },\n            /**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             */\n            credits: {\n                /**\n                 * Credits for map source to be concatenated with conventional credit\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapTextFull](#credits.mapTextFull)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   \\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapText\n                 */\n                /**\n                 * Detailed credits for map source to be displayed on hover of credits\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapText](#credits.mapText)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   {geojson.copyright}\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapTextFull\n                 */\n                /**\n                 * Whether to show the credits text.\n                 *\n                 * @sample {highcharts} highcharts/credits/enabled-false/\n                 *         Credits disabled\n                 * @sample {highstock} stock/credits/enabled/\n                 *         Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/\n                 *         Credits disabled\n                 */\n                enabled: true,\n                /**\n                 * The URL for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                href: 'https://www.highcharts.com?credits',\n                /**\n                 * Position configuration for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 *\n                 * @type    {Highcharts.AlignObject}\n                 * @since   2.1\n                 */\n                position: {\n                    /** @internal */\n                    align: 'right',\n                    /** @internal */\n                    x: -10,\n                    /** @internal */\n                    verticalAlign: 'bottom',\n                    /** @internal */\n                    y: -5\n                },\n                /**\n                 * CSS styles for the credits label.\n                 *\n                 * @see In styled mode, credits styles can be set with the\n                 *      `.highcharts-credits` class.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    cursor: 'pointer',\n                    /** @internal */\n                    color: \"#999999\" /* Palette.neutralColor40 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.6em'\n                },\n                /**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to\n                 * `Highcharts @ {map-credits}`. Otherwise, it defaults to\n                 * `Highcharts.com`.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                text: 'Highcharts.com'\n            }\n        };\n        /* eslint-disable spaced-comment */\n\n        defaultOptions.chart.styledMode = false;\n\n        '';\n        const defaultTime = new Time(defaultOptions.time);\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions\n         * for outside modules wasn't enough because the setOptions method created a new\n         * object.\n         *\n         * @function Highcharts.getOptions\n         *\n         * @return {Highcharts.Options}\n         * Default options.\n         */\n        function getOptions() {\n            return defaultOptions;\n        }\n        /**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @sample highcharts/members/setoptions Applying a global theme\n         *\n         * @function Highcharts.setOptions\n         *\n         * @param {Highcharts.Options} options\n         * The new custom chart options.\n         *\n         * @return {Highcharts.Options}\n         * Updated options.\n         */\n        function setOptions(options) {\n            fireEvent(H, 'setOptions', { options });\n            // Copy in the default options\n            merge(true, defaultOptions, options);\n            // Update the time object\n            if (options.time) {\n                defaultTime.update(defaultOptions.time);\n            }\n            if (options.lang && 'locale' in options.lang) {\n                defaultTime.update({\n                    locale: options.lang.locale\n                });\n            }\n            return defaultOptions;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DefaultOptions = {\n            defaultOptions,\n            defaultTime,\n            getOptions,\n            setOptions\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"plotBox\"|\"spacingBox\"} Highcharts.ButtonRelativeToValue\n         */\n        /**\n         * Gets fired when a series is added to the chart after load time, using the\n         * `addSeries` method. Returning `false` prevents the series from being added.\n         *\n         * @callback Highcharts.ChartAddSeriesCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.ChartAddSeriesEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains common event information. Through the `options` property you can\n         * access the series options that were passed to the `addSeries` method.\n         *\n         * @interface Highcharts.ChartAddSeriesEventObject\n         */ /**\n        * The series options that were passed to the `addSeries` method.\n        * @name Highcharts.ChartAddSeriesEventObject#options\n        * @type {Highcharts.SeriesOptionsType}\n        */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.ChartAddSeriesEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The event target.\n        * @name Highcharts.ChartAddSeriesEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.ChartAddSeriesEventObject#type\n        * @type {\"addSeries\"}\n        */\n        /**\n         * Gets fired when clicking on the plot background.\n         *\n         * @callback Highcharts.ChartClickCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.PointerEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains an axes of the clicked spot.\n         *\n         * @interface Highcharts.ChartClickEventAxisObject\n         */ /**\n        * Axis at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#axis\n        * @type {Highcharts.Axis}\n        */ /**\n        * Axis value at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#value\n        * @type {number}\n        */\n        /**\n         * Contains information about the clicked spot on the chart. Remember the unit\n         * of a datetime axis is milliseconds since 1970-01-01 00:00:00.\n         *\n         * @interface Highcharts.ChartClickEventObject\n         * @extends Highcharts.PointerEventObject\n         */ /**\n        * Information about the x-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#xAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the y-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#yAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the z-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#zAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>|undefined}\n        */\n        /**\n         * Gets fired when the chart is finished loading.\n         *\n         * @callback Highcharts.ChartLoadCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Fires when the chart is redrawn, either after a call to `chart.redraw()` or\n         * after an axis, series or point is modified with the `redraw` option set to\n         * `true`.\n         *\n         * @callback Highcharts.ChartRedrawCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired after initial load of the chart (directly after the `load` event),\n         * and after each redraw (directly after the `redraw` event).\n         *\n         * @callback Highcharts.ChartRenderCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired when an area of the chart has been selected. The default action\n         * for the selection event is to zoom the chart to the selected area. It can be\n         * prevented by calling `event.preventDefault()` or return false.\n         *\n         * @callback Highcharts.ChartSelectionCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.SelectEventObject} event\n         *        Event informations\n         *\n         * @return {boolean|undefined}\n         *         Return false to prevent the default action, usually zoom.\n         */\n        (''); // Detach doclets above\n\n        return DefaultOptions;\n    });\n    _registerModule(_modules, 'Core/Templating.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (D, G, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, defaultTime } = D;\n        const { doc } = G;\n        const { extend, getNestedProperty, isArray, isNumber, isObject, pick, ucfirst } = U;\n        const helpers = {\n            // Built-in helpers\n            add: (a, b) => a + b,\n            divide: (a, b) => (b !== 0 ? a / b : ''),\n            // eslint-disable-next-line eqeqeq\n            eq: (a, b) => a == b,\n            each: function (arr) {\n                const match = arguments[arguments.length - 1];\n                return isArray(arr) ?\n                    arr.map((item, i) => format(match.body, extend(isObject(item) ? item : { '@this': item }, {\n                        '@index': i,\n                        '@first': i === 0,\n                        '@last': i === arr.length - 1\n                    }))).join('') :\n                    false;\n            },\n            ge: (a, b) => a >= b,\n            gt: (a, b) => a > b,\n            'if': (condition) => !!condition,\n            le: (a, b) => a <= b,\n            lt: (a, b) => a < b,\n            multiply: (a, b) => a * b,\n            // eslint-disable-next-line eqeqeq\n            ne: (a, b) => a != b,\n            subtract: (a, b) => a - b,\n            ucfirst,\n            unless: (condition) => !condition\n        };\n        const numberFormatCache = {};\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime](https://www.php.net/manual/en/function.strftime.php) function.\n         * Additional formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * Since v6.0.5, all internal dates are formatted through the\n         * {@link Highcharts.Chart#time} instance to respect chart-level time settings.\n         * The `Highcharts.dateFormat` function only reflects global time settings set\n         * with `setOptions`.\n         *\n         * Supported format keys:\n         * - `%a`: Short weekday, like 'Mon'\n         * - `%A`: Long weekday, like 'Monday'\n         * - `%d`: Two digit day of the month, 01 to 31\n         * - `%e`: Day of the month, 1 through 31\n         * - `%w`: Day of the week, 0 through 6\n         * - `%b`: Short month, like 'Jan'\n         * - `%B`: Long month, like 'January'\n         * - `%m`: Two digit month number, 01 through 12\n         * - `%y`: Two digits year, like 09 for 2009\n         * - `%Y`: Four digits year, like 2009\n         * - `%H`: Two digits hours in 24h format, 00 through 23\n         * - `%k`: Hours in 24h format, 0 through 23\n         * - `%I`: Two digits hours in 12h format, 00 through 11\n         * - `%l`: Hours in 12h format, 1 through 12\n         * - `%M`: Two digits minutes, 00 through 59\n         * - `%p`: Upper case AM or PM\n         * - `%P`: Lower case AM or PM\n         * - `%S`: Two digits seconds, 00 through 59\n         * - `%L`: Milliseconds (naming from Ruby)\n         *\n         * @function Highcharts.dateFormat\n         *\n         * @param {string} format\n         *        The desired format where various time representations are prefixed\n         *        with `%`.\n         *\n         * @param {number} timestamp\n         *        The JavaScript timestamp.\n         *\n         * @param {boolean} [upperCaseFirst=false]\n         *        Upper case first letter in the return.\n         *\n         * @return {string}\n         *         The formatted date.\n         */\n        function dateFormat(format, timestamp, upperCaseFirst) {\n            return defaultTime.dateFormat(format, timestamp, upperCaseFirst);\n        }\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @example\n         * let s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         *\n         * @function Highcharts.format\n         *\n         * @param {string} str\n         *        The string to format.\n         *\n         * @param {Record<string, *>} ctx\n         *        The context, a collection of key-value pairs where each key is\n         *        replaced by its value.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        A `Chart` instance used to get numberFormatter and time.\n         *\n         * @return {string}\n         *         The formatted string.\n         */\n        function format(str = '', ctx, chart) {\n            const regex = /\\{([\\p{L}\\d:\\.,;\\-\\/<>\\[\\]%_@\"'’= #\\(\\)]+)\\}/gu, \n            // The sub expression regex is the same as the top expression regex,\n            // but except parens and block helpers (#), and surrounded by parens\n            // instead of curly brackets.\n            subRegex = /\\(([\\p{L}\\d:\\.,;\\-\\/<>\\[\\]%_@\"'= ]+)\\)/gu, matches = [], floatRegex = /f$/, decRegex = /\\.(\\d)/, lang = chart?.options.lang || defaultOptions.lang, time = chart && chart.time || defaultTime, numberFormatter = chart && chart.numberFormatter || numberFormat;\n            /*\n             * Get a literal or variable value inside a template expression. May be\n             * extended with other types like string or null if needed, but keep it\n             * small for now.\n             */\n            const resolveProperty = (key = '') => {\n                let n;\n                // Literals\n                if (key === 'true') {\n                    return true;\n                }\n                if (key === 'false') {\n                    return false;\n                }\n                if ((n = Number(key)).toString() === key) {\n                    return n;\n                }\n                if (/^[\"'].+[\"']$/.test(key)) {\n                    return key.slice(1, -1);\n                }\n                // Variables and constants\n                return getNestedProperty(key, ctx);\n            };\n            let match, currentMatch, depth = 0, hasSub;\n            // Parse and create tree\n            while ((match = regex.exec(str)) !== null) {\n                // When a sub expression is found, it is evaluated first, and the\n                // results recursively evaluated until no subexpression exists.\n                const mainMatch = match, subMatch = subRegex.exec(match[1]);\n                if (subMatch) {\n                    match = subMatch;\n                    hasSub = true;\n                }\n                if (!currentMatch || !currentMatch.isBlock) {\n                    currentMatch = {\n                        ctx,\n                        expression: match[1],\n                        find: match[0],\n                        isBlock: match[1].charAt(0) === '#',\n                        start: match.index,\n                        startInner: match.index + match[0].length,\n                        length: match[0].length\n                    };\n                }\n                // Identify helpers\n                const fn = (currentMatch.isBlock ? mainMatch : match)[1].split(' ')[0].replace('#', '');\n                if (helpers[fn]) {\n                    // Block helper, only 0 level is handled\n                    if (currentMatch.isBlock && fn === currentMatch.fn) {\n                        depth++;\n                    }\n                    if (!currentMatch.fn) {\n                        currentMatch.fn = fn;\n                    }\n                }\n                // Closing a block helper\n                const startingElseSection = match[1] === 'else';\n                if (currentMatch.isBlock &&\n                    currentMatch.fn && (match[1] === `/${currentMatch.fn}` ||\n                    startingElseSection)) {\n                    if (!depth) { // === 0\n                        const start = currentMatch.startInner, body = str.substr(start, match.index - start);\n                        // Either closing without an else section, or when encountering\n                        // an else section\n                        if (currentMatch.body === void 0) {\n                            currentMatch.body = body;\n                            currentMatch.startInner = match.index + match[0].length;\n                            // The body exists already, so this is the else section\n                        }\n                        else {\n                            currentMatch.elseBody = body;\n                        }\n                        currentMatch.find += body + match[0];\n                        if (!startingElseSection) {\n                            matches.push(currentMatch);\n                            currentMatch = void 0;\n                        }\n                    }\n                    else if (!startingElseSection) {\n                        depth--;\n                    }\n                    // Common expression\n                }\n                else if (!currentMatch.isBlock) {\n                    matches.push(currentMatch);\n                }\n                // Evaluate sub-matches one by one to prevent orphaned block closers\n                if (subMatch && !currentMatch?.isBlock) {\n                    break;\n                }\n            }\n            // Execute\n            matches.forEach((match) => {\n                const { body, elseBody, expression, fn } = match;\n                let replacement, i;\n                // Helper function\n                if (fn) {\n                    // Pass the helpers the amount of arguments defined by the function,\n                    // then the match as the last argument.\n                    const args = [match], parts = [], len = expression.length;\n                    let start = 0, startChar;\n                    for (i = 0; i <= len; i++) {\n                        const char = expression.charAt(i);\n                        // Start of string\n                        if (!startChar && (char === '\"' || char === '\\'')) {\n                            startChar = char;\n                            // End of string\n                        }\n                        else if (startChar === char) {\n                            startChar = '';\n                        }\n                        if (!startChar &&\n                            (char === ' ' || i === len)) {\n                            parts.push(expression.substr(start, i - start));\n                            start = i + 1;\n                        }\n                    }\n                    i = helpers[fn].length;\n                    while (i--) {\n                        args.unshift(resolveProperty(parts[i + 1]));\n                    }\n                    replacement = helpers[fn].apply(ctx, args);\n                    // Block helpers may return true or false. They may also return a\n                    // string, like the `each` helper.\n                    if (match.isBlock && typeof replacement === 'boolean') {\n                        replacement = format(replacement ? body : elseBody, ctx, chart);\n                    }\n                    // Simple variable replacement\n                }\n                else {\n                    const valueAndFormat = expression.split(':');\n                    replacement = resolveProperty(valueAndFormat.shift() || '');\n                    // Format the replacement\n                    if (valueAndFormat.length && typeof replacement === 'number') {\n                        const segment = valueAndFormat.join(':');\n                        if (floatRegex.test(segment)) { // Float\n                            const decimals = parseInt((segment.match(decRegex) || ['', '-1'])[1], 10);\n                            if (replacement !== null) {\n                                replacement = numberFormatter(replacement, decimals, lang.decimalPoint, segment.indexOf(',') > -1 ? lang.thousandsSep : '');\n                            }\n                        }\n                        else {\n                            replacement = time.dateFormat(segment, replacement);\n                            // Use string literal in order to be preserved in the outer\n                            // expression\n                            if (hasSub) {\n                                replacement = `\"${replacement}\"`;\n                            }\n                        }\n                    }\n                }\n                str = str.replace(match.find, pick(replacement, ''));\n            });\n            return hasSub ? format(str, ctx, chart) : str;\n        }\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @sample highcharts/members/highcharts-numberformat/\n         *         Custom number format\n         *\n         * @function Highcharts.numberFormat\n         *\n         * @param {number} number\n         *        The input number to format.\n         *\n         * @param {number} decimals\n         *        The amount of decimals. A value of -1 preserves the amount in the\n         *        input number.\n         *\n         * @param {string} [decimalPoint]\n         *        The decimal point, defaults to the one given in the lang options, or\n         *        a dot.\n         *\n         * @param {string} [thousandsSep]\n         *        The thousands separator, defaults to the one given in the lang\n         *        options, or a space character.\n         *\n         * @return {string}\n         *         The formatted number.\n         */\n        function numberFormat(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n            let ret, fractionDigits, [mantissa, exp] = number.toString().split('e').map(Number);\n            const lang = this?.options?.lang || defaultOptions.lang, origDec = (number.toString().split('.')[1] || '').split('e')[0].length, firstDecimals = decimals, options = {};\n            decimalPoint ?? (decimalPoint = lang.decimalPoint);\n            thousandsSep ?? (thousandsSep = lang.thousandsSep);\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            }\n            else if (!isNumber(decimals)) {\n                decimals = 2;\n            }\n            else if (decimals && exp < 0) {\n                // Expose decimals from exponential notation (#7042)\n                fractionDigits = decimals + exp;\n                if (fractionDigits >= 0) {\n                    // Remove too small part of the number while keeping the notation\n                    mantissa = +mantissa.toExponential(fractionDigits).split('e')[0];\n                    decimals = fractionDigits;\n                }\n                else {\n                    // `fractionDigits < 0`\n                    mantissa = Math.floor(mantissa);\n                    if (decimals < 20) {\n                        // Use number instead of exponential notation (#7405)\n                        number = +(mantissa * Math.pow(10, exp)).toFixed(decimals);\n                    }\n                    else {\n                        // Or zero\n                        number = 0;\n                    }\n                    exp = 0;\n                }\n            }\n            if (exp) {\n                decimals ?? (decimals = 2);\n                number = mantissa;\n            }\n            if (isNumber(decimals) && decimals >= 0) {\n                options.minimumFractionDigits = decimals;\n                options.maximumFractionDigits = decimals;\n            }\n            if (thousandsSep === '') {\n                options.useGrouping = false;\n            }\n            const hasSeparators = thousandsSep || decimalPoint, locale = hasSeparators ?\n                'en' :\n                (this?.locale ||\n                    lang.locale ||\n                    doc.body.closest('[lang]')?.lang), cacheKey = JSON.stringify(options) + locale, nf = numberFormatCache[cacheKey] ?? (numberFormatCache[cacheKey] = new Intl.NumberFormat(locale, options));\n            ret = nf.format(number);\n            // If thousandsSep or decimalPoint are set, fall back to using English\n            // format with string replacement for the separators.\n            if (hasSeparators) {\n                ret = ret\n                    .replace(/\\,/g, thousandsSep ?? ',')\n                    .replace('.', decimalPoint ?? '.');\n            }\n            if (\n            // Remove signed zero (#20564)\n            (!decimals && +ret === 0) ||\n                // Small numbers, no decimals (#14023)\n                (exp < 0 && !firstDecimals)) {\n                ret = '0';\n            }\n            if (exp && +ret !== 0) {\n                ret += 'e' + (exp < 0 ? '' : '+') + exp;\n            }\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Templating = {\n            dateFormat,\n            format,\n            helpers,\n            numberFormat\n        };\n\n        return Templating;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Column.js', [_modules['DataGrid/Globals.js'], _modules['Core/Utilities.js'], _modules['DataGrid/Utils.js'], _modules['Core/Templating.js']], function (Globals, Utils, DGUtils, Templating) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { merge } = Utils;\n        const { makeHTMLElement } = DGUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a column in the data grid.\n         */\n        class Column {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a column in the data grid.\n             *\n             * @param viewport\n             * The viewport (table) the column belongs to.\n             *\n             * @param id\n             * The id of the column (`name` in the Data Table).\n             *\n             * @param index\n             * The index of the column.\n             */\n            constructor(viewport, id, index) {\n                /**\n                 * The cells of the column.\n                 */\n                this.cells = [];\n                this.options = merge(viewport.dataGrid.options?.columnDefaults ?? {}, viewport.dataGrid.columnOptionsMap?.[id] ?? {});\n                this.id = id;\n                this.index = index;\n                this.viewport = viewport;\n                this.width = this.getInitialWidth();\n                this.loadData();\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Loads the data of the column from the viewport's data table.\n             */\n            loadData() {\n                this.data = this.viewport.dataTable.getColumn(this.id, true);\n            }\n            /**\n             * Registers a cell in the column.\n             *\n             * @param cell\n             * The cell to register.\n             */\n            registerCell(cell) {\n                cell.htmlElement.setAttribute('data-column-id', this.id);\n                if (this.options.className) {\n                    cell.htmlElement.classList.add(...this.options.className.split(/\\s+/g));\n                }\n                if (this.viewport.dataGrid.hoveredColumnId === this.id) {\n                    cell.htmlElement.classList.add(Globals.classNames.hoveredColumn);\n                }\n                this.cells.push(cell);\n            }\n            /**\n             * Unregister a cell from the column.\n             *\n             * @param cell\n             * The cell to unregister.\n             */\n            unregisterCell(cell) {\n                const index = this.cells.indexOf(cell);\n                if (index > -1) {\n                    this.cells.splice(index, 1);\n                }\n            }\n            /**\n             * Returns the width of the column in pixels.\n             */\n            getWidth() {\n                const vp = this.viewport;\n                return vp.columnDistribution === 'full' ?\n                    vp.getWidthFromRatio(this.width) :\n                    this.width;\n            }\n            /**\n             * Adds or removes the hovered CSS class to the column element\n             * and its cells.\n             *\n             * @param hovered\n             * Whether the column should be hovered.\n             */\n            setHoveredState(hovered) {\n                this.header?.htmlElement?.classList[hovered ? 'add' : 'remove'](Globals.classNames.hoveredColumn);\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    this.cells[i].htmlElement.classList[hovered ? 'add' : 'remove'](Globals.classNames.hoveredColumn);\n                }\n            }\n            /**\n             * Creates a mock element to measure the width of the column from the CSS.\n             * The element is appended to the viewport container and then removed.\n             * It should be called only once for each column.\n             *\n             * @returns The initial width of the column.\n             */\n            getInitialWidth() {\n                let result;\n                const { viewport } = this;\n                // Set the initial width of the column.\n                const mock = makeHTMLElement('div', {\n                    className: Globals.classNames.columnElement\n                }, viewport.dataGrid.container);\n                mock.setAttribute('data-column-id', this.id);\n                if (this.options.className) {\n                    mock.classList.add(...this.options.className.split(/\\s+/g));\n                }\n                if (viewport.columnDistribution === 'full') {\n                    result = this.getInitialFullDistWidth(mock);\n                }\n                else {\n                    result = mock.offsetWidth || 100;\n                }\n                mock.remove();\n                return result;\n            }\n            /**\n             * The initial width of the column in the full distribution mode. The last\n             * column in the viewport will have to fill the remaining space.\n             *\n             * @param mock\n             * The mock element to measure the width.\n             */\n            getInitialFullDistWidth(mock) {\n                const vp = this.viewport;\n                const columnsCount = vp.dataGrid.enabledColumns?.length ?? 0;\n                if (this.index < columnsCount - 1) {\n                    return vp.getRatioFromWidth(mock.offsetWidth) || 1 / columnsCount;\n                }\n                let allPreviousWidths = 0;\n                for (let i = 0, iEnd = columnsCount - 1; i < iEnd; i++) {\n                    allPreviousWidths += vp.columns[i].width;\n                }\n                const result = 1 - allPreviousWidths;\n                if (result < 0) {\n                    // eslint-disable-next-line no-console\n                    console.warn('The sum of the columns\\' widths exceeds the ' +\n                        'viewport width. It may cause unexpected behavior in the ' +\n                        'full distribution mode. Check the CSS styles of the ' +\n                        'columns. Corrections may be needed.');\n                }\n                return result;\n            }\n            /**\n             * Returns the formatted string where the templating context is the column.\n             *\n             * @param template\n             * The template string.\n             *\n             * @return\n             * The formatted string.\n             */\n            format(template) {\n                return Templating.format(template, this);\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        /**\n         * The minimum width of a column.\n         * @internal\n         */\n        Column.MIN_COLUMN_WIDTH = 20;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Column;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Row.js', [_modules['DataGrid/Utils.js']], function (DGUtils) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = DGUtils;\n        /* *\n         *\n         *  Abstract Class of Row\n         *\n         * */\n        /**\n         * Represents a row in the data grid.\n         */\n        class Row {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a row in the data grid.\n             *\n             * @param viewport\n             * The DataGrid Table instance which the row belongs to.\n             */\n            constructor(viewport) {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * The cells of the row.\n                 */\n                this.cells = [];\n                this.viewport = viewport;\n                this.htmlElement = makeHTMLElement('tr', {});\n            }\n            /**\n             * Renders the row's content. It does not attach the row element to the\n             * viewport nor pushes the rows to the viewport.rows array.\n             */\n            render() {\n                const columns = this.viewport.columns;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    const cell = this.createCell(columns[i]);\n                    cell.render();\n                }\n                this.reflow();\n            }\n            /**\n             * Reflows the row's content dimensions.\n             */\n            reflow() {\n                for (let j = 0, jEnd = this.cells.length; j < jEnd; ++j) {\n                    this.cells[j].reflow();\n                }\n                const vp = this.viewport;\n                if (vp.rowsWidth) {\n                    this.htmlElement.style.width = vp.rowsWidth + 'px';\n                }\n            }\n            /**\n             * Destroys the row.\n             */\n            destroy() {\n                this.destroyed = true;\n                if (!this.htmlElement) {\n                    return;\n                }\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    this.cells[i].destroy();\n                }\n                this.htmlElement.remove();\n            }\n            /**\n             * Returns the cell with the given column ID.\n             *\n             * @param columnId\n             * The column ID that the cell belongs to.\n             *\n             * @returns\n             * The cell with the given column ID or undefined if not found.\n             */\n            getCell(columnId) {\n                return this.cells.find((cell) => cell.column.id === columnId);\n            }\n            /**\n             * Registers a cell in the row.\n             *\n             * @param cell\n             * The cell to register.\n             */\n            registerCell(cell) {\n                this.cells.push(cell);\n            }\n            /**\n             * Unregister a cell from the row.\n             *\n             * @param cell\n             * The cell to unregister.\n             */\n            unregisterCell(cell) {\n                if (this.destroyed) {\n                    return;\n                }\n                const index = this.cells.indexOf(cell);\n                if (index > -1) {\n                    this.cells.splice(index, 1);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Row;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Cell.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Templating.js']], function (AST, Templating) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Abstract Class of Cell\n         *\n         * */\n        class Cell {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a cell in the data grid.\n             *\n             * @param column\n             * The column of the cell.\n             *\n             * @param row\n             * The row of the cell.\n             */\n            constructor(column, row) {\n                /**\n                 * Array of cell events to be removed when the cell is destroyed.\n                 */\n                this.cellEvents = [];\n                this.column = column;\n                this.row = row;\n                this.row.registerCell(this);\n                this.htmlElement = this.init();\n                this.htmlElement.setAttribute('tabindex', '-1');\n                this.initEvents();\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Init element.\n             * @internal\n             */\n            init() {\n                return document.createElement('td', {});\n            }\n            /**\n             * Initialize event listeners. Events added to the `cellEvents` array will\n             * be registered now and unregistered when the cell is destroyed.\n             */\n            initEvents() {\n                this.cellEvents.push(['blur', () => this.onBlur()]);\n                this.cellEvents.push(['focus', () => this.onFocus()]);\n                this.cellEvents.push(['click', (e) => {\n                        this.onClick(e);\n                    }]);\n                this.cellEvents.push(['keydown', (e) => {\n                        this.onKeyDown(e);\n                    }]);\n                this.cellEvents.forEach((pair) => {\n                    this.htmlElement.addEventListener(pair[0], pair[1]);\n                });\n            }\n            /**\n             * Handles the focus event on the cell.\n             */\n            onFocus() {\n                const vp = this.row.viewport;\n                const focusAnchor = vp.rowsVirtualizer.focusAnchorCell?.htmlElement;\n                focusAnchor?.setAttribute('tabindex', '-1');\n            }\n            /**\n             * Handles the blur event on the cell.\n             */\n            onBlur() {\n                const vp = this.row.viewport;\n                const focusAnchor = vp.rowsVirtualizer.focusAnchorCell?.htmlElement;\n                focusAnchor?.setAttribute('tabindex', '0');\n                delete vp.focusCursor;\n            }\n            /**\n             * Handles user keydown on the cell.\n             *\n             * @param e\n             * Keyboard event object.\n             */\n            onKeyDown(e) {\n                const { row, column } = this;\n                const vp = row.viewport;\n                const changeFocusKeys = {\n                    ArrowDown: [1, 0],\n                    ArrowUp: [-1, 0],\n                    ArrowLeft: [0, -1],\n                    ArrowRight: [0, 1]\n                };\n                const dir = changeFocusKeys[e.key];\n                if (dir) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    const localRowIndex = row.index === void 0 ? -1 : (row.index - vp.rows[0].index);\n                    const nextVerticalDir = localRowIndex + dir[0];\n                    if (nextVerticalDir < 0 && vp.header) {\n                        vp.columns[column.index + dir[1]]?.header?.htmlElement.focus();\n                        return;\n                    }\n                    const nextRow = vp.rows[nextVerticalDir];\n                    if (nextRow) {\n                        nextRow.cells[column.index + dir[1]]?.htmlElement.focus();\n                    }\n                }\n            }\n            /**\n             * Renders the cell by appending the HTML element to the row.\n             */\n            render() {\n                this.row.htmlElement.appendChild(this.htmlElement);\n            }\n            /**\n             * Reflows the cell dimensions.\n             */\n            reflow() {\n                const column = this.column;\n                const elementStyle = this.htmlElement.style;\n                elementStyle.width = elementStyle.maxWidth = column.getWidth() + 'px';\n            }\n            /**\n             * Returns the formatted string where the templating context is the cell.\n             *\n             * @param template\n             * The template string.\n             *\n             * @return\n             * The formatted string.\n             */\n            format(template) {\n                return Templating.format(template, this);\n            }\n            /**\n             * Sets the custom class name of the cell based on the template.\n             *\n             * @param template\n             * The template string.\n             */\n            setCustomClassName(template) {\n                const element = this.htmlElement;\n                if (this.customClassName) {\n                    element.classList.remove(...this.customClassName.split(/\\s+/g));\n                }\n                if (!template) {\n                    delete this.customClassName;\n                    return;\n                }\n                const newClassName = this.format(template);\n                if (!newClassName) {\n                    delete this.customClassName;\n                    return;\n                }\n                element.classList.add(...newClassName.split(/\\s+/g));\n                this.customClassName = newClassName;\n            }\n            /**\n             * Renders content of cell.\n             *\n             * @param cellContent\n             * Content to render.\n             *\n             * @param parentElement\n             * Parent element where the content should be.\n             *\n             * @internal\n             */\n            renderHTMLCellContent(cellContent, parentElement) {\n                const formattedNodes = new AST(cellContent);\n                formattedNodes.addToDOM(parentElement);\n            }\n            /**\n             * Destroys the cell.\n             */\n            destroy() {\n                this.cellEvents.forEach((pair) => {\n                    this.htmlElement.removeEventListener(pair[0], pair[1]);\n                });\n                this.column.unregisterCell(this);\n                this.row.unregisterCell(this);\n                this.htmlElement.remove();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Cell;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Actions/ColumnSorting.js', [_modules['DataGrid/Globals.js'], _modules['DataGrid/Utils.js']], function (Globals, DGUtils) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = DGUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that manages sorting for a dedicated column.\n         */\n        class ColumnSorting {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs sorting for a dedicated column.\n             *\n             * @param column\n             * The column that be sorted.\n             *\n             * @param headerCellElement\n             * The head element of the column.\n             */\n            constructor(column, headerCellElement) {\n                /**\n                 * Toggle sorting order for the column in the order: asc -> desc -> none\n                 */\n                this.toggle = () => {\n                    const viewport = this.column.viewport;\n                    const querying = viewport.dataGrid.querying;\n                    const sortingController = querying.sorting;\n                    const currentOrder = (sortingController.currentSorting?.columnId === this.column.id ?\n                        sortingController.currentSorting.order : null) || 'none';\n                    const consequents = {\n                        none: 'asc',\n                        asc: 'desc',\n                        desc: null\n                    };\n                    void this.setOrder(consequents[currentOrder]);\n                };\n                this.column = column;\n                this.headerCellElement = headerCellElement;\n                this.addHeaderElementAttributes();\n                if (column.options.sorting?.sortable) {\n                    makeHTMLElement('span', {\n                        className: Globals.classNames.columnSortableIcon,\n                        innerText: '▲'\n                    }, headerCellElement).setAttribute('aria-hidden', true);\n                    headerCellElement.classList.add(Globals.classNames.columnSortable);\n                }\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Adds attributes to the column header.\n             */\n            addHeaderElementAttributes() {\n                const col = this.column;\n                const a11y = col.viewport.dataGrid.accessibility;\n                const sortingOptions = col.options.sorting;\n                const { currentSorting } = col.viewport.dataGrid.querying.sorting;\n                const el = this.headerCellElement;\n                if (currentSorting?.columnId !== col.id || !currentSorting?.order) {\n                    el.classList.remove(Globals.classNames.columnSortedAsc);\n                    el.classList.remove(Globals.classNames.columnSortedDesc);\n                    if (sortingOptions?.sortable) {\n                        a11y?.setColumnSortState(el, 'none');\n                    }\n                    return;\n                }\n                switch (currentSorting?.order) {\n                    case 'asc':\n                        el.classList.add(Globals.classNames.columnSortedAsc);\n                        el.classList.remove(Globals.classNames.columnSortedDesc);\n                        a11y?.setColumnSortState(el, 'ascending');\n                        break;\n                    case 'desc':\n                        el.classList.remove(Globals.classNames.columnSortedAsc);\n                        el.classList.add(Globals.classNames.columnSortedDesc);\n                        a11y?.setColumnSortState(el, 'descending');\n                        break;\n                }\n            }\n            /**\n             * Set sorting order for the column. It will modify the presentation data\n             * and rerender the rows.\n             *\n             * @param order\n             * The order of sorting. It can be `'asc'`, `'desc'` or `null` if the\n             * sorting should be disabled.\n             */\n            async setOrder(order) {\n                const viewport = this.column.viewport;\n                const querying = viewport.dataGrid.querying;\n                const sortingController = querying.sorting;\n                const a11y = viewport.dataGrid.accessibility;\n                sortingController.setSorting(order, this.column.id);\n                await querying.proceed();\n                viewport.loadPresentationData();\n                for (const col of viewport.columns) {\n                    col.sorting?.addHeaderElementAttributes();\n                }\n                a11y?.userSortedColumn(order);\n                viewport.dataGrid.options?.events?.column?.afterSorting?.call(this.column);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnSorting;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Header/HeaderCell.js', [_modules['DataGrid/Table/Cell.js'], _modules['DataGrid/Utils.js'], _modules['DataGrid/Globals.js'], _modules['DataGrid/Table/Actions/ColumnSorting.js'], _modules['Core/Utilities.js']], function (Cell, DGUtils, Globals, ColumnSorting, Utilities) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement, isHTML } = DGUtils;\n        const { merge } = Utilities;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a cell in the data grid header.\n         */\n        class HeaderCell extends Cell {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a cell in the data grid header.\n             *\n             * @param column\n             * The column of the cell.\n             *\n             * @param row\n             * The row of the cell.\n             */\n            constructor(column, row) {\n                super(column, row);\n                /**\n                 * Reference to options in settings header.\n                 */\n                this.options = {};\n                /**\n                 * Content value of the header cell.\n                 */\n                this.value = '';\n                column.header = this;\n                this.isMain = !!this.row.viewport.getColumn(this.column.id);\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Init element.\n             */\n            init() {\n                const elem = document.createElement('th', {});\n                elem.classList.add(Globals.classNames.headerCell);\n                return elem;\n            }\n            /**\n             * Render the cell container.\n             */\n            render() {\n                const column = this.column;\n                const options = merge(column.options, this.options); // ??\n                const headerCellOptions = options.header || {};\n                if (headerCellOptions.formatter) {\n                    this.value = headerCellOptions.formatter.call(this).toString();\n                }\n                else if (headerCellOptions.format) {\n                    this.value = column.format(headerCellOptions.format);\n                }\n                else {\n                    this.value = column.id;\n                }\n                // Render content of th element\n                this.row.htmlElement.appendChild(this.htmlElement);\n                this.headerContent = makeHTMLElement(options.sorting?.sortable && column.data ? 'button' : 'span', {\n                    className: Globals.classNames.headerCellContent\n                }, this.htmlElement);\n                if (isHTML(this.value)) {\n                    this.renderHTMLCellContent(this.value, this.headerContent);\n                }\n                else {\n                    this.headerContent.innerText = this.value;\n                }\n                this.htmlElement.setAttribute('scope', 'col');\n                if (this.options.className) {\n                    this.htmlElement.classList.add(...this.options.className.split(/\\s+/g));\n                }\n                if (this.isMain) {\n                    this.htmlElement.setAttribute('data-column-id', column.id);\n                    // Add user column classname\n                    if (column.options.className) {\n                        this.htmlElement.classList.add(...column.options.className.split(/\\s+/g));\n                    }\n                    // Add resizing\n                    this.column.viewport.columnsResizer?.renderColumnDragHandles(this.column, this);\n                    // Add sorting\n                    this.initColumnSorting();\n                }\n                this.setCustomClassName(options.header?.className);\n            }\n            reflow() {\n                const cell = this;\n                const th = cell.htmlElement;\n                const vp = cell.column.viewport;\n                if (!th) {\n                    return;\n                }\n                let width = 0;\n                if (cell.columns) {\n                    for (const col of cell.columns) {\n                        width += (vp.getColumn(col.columnId || '')?.getWidth()) || 0;\n                    }\n                }\n                else {\n                    width = cell.column.getWidth();\n                }\n                // Set the width of the column. Max width is needed for the\n                // overflow: hidden to work.\n                th.style.width = th.style.maxWidth = width + 'px';\n            }\n            onKeyDown(e) {\n                if (e.target !== this.htmlElement) {\n                    return;\n                }\n                if (e.key === 'Enter') {\n                    if (this.column.options.sorting?.sortable) {\n                        this.column.sorting?.toggle();\n                    }\n                    return;\n                }\n                super.onKeyDown(e);\n            }\n            onClick(e) {\n                const column = this.column;\n                if (!this.isMain || (e.target !== this.htmlElement &&\n                    e.target !== column.header?.headerContent)) {\n                    return;\n                }\n                if (column.options.sorting?.sortable) {\n                    column.sorting?.toggle();\n                }\n                column.viewport.dataGrid.options?.events?.header?.click?.call(column);\n            }\n            /**\n             * Add sorting option to the column.\n             */\n            initColumnSorting() {\n                const { column } = this;\n                column.sorting = new ColumnSorting(column, this.htmlElement);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HeaderCell;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Header/HeaderRow.js', [_modules['DataGrid/Table/Row.js'], _modules['DataGrid/Globals.js'], _modules['DataGrid/Table/Header/HeaderCell.js'], _modules['DataGrid/Table/Column.js'], _modules['DataGrid/Utils.js']], function (Row, Globals, HeaderCell, Column, DGUtils) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { sanitizeText } = DGUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a row in the data grid header.\n         */\n        class HeaderRow extends Row {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a row in the data grid.\n             *\n             * @param viewport\n             * The DataGrid Table instance which the row belongs to.\n             *\n             * @param level\n             * The current level of header that is rendered.\n             */\n            constructor(viewport, level) {\n                super(viewport);\n                this.level = level;\n                this.setRowAttributes();\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            createCell(column) {\n                return new HeaderCell(column, this);\n            }\n            /**\n             * Renders the row's content in the header.\n             *\n             * @param level\n             * The current level in the header tree\n             */\n            renderMultipleLevel(level) {\n                const header = this.viewport.dataGrid.options?.header;\n                const vp = this.viewport;\n                const enabledColumns = vp.dataGrid.enabledColumns;\n                // Render element\n                vp.theadElement?.appendChild(this.htmlElement);\n                this.htmlElement.classList.add(Globals.classNames.headerRow);\n                if (!header) {\n                    super.render();\n                    return;\n                }\n                const columnsOnLevel = this.getColumnsAtLevel(header, level);\n                for (let i = 0, iEnd = columnsOnLevel.length; i < iEnd; i++) {\n                    const column = columnsOnLevel[i];\n                    const colSpan = (typeof column !== 'string' && column.columns) ?\n                        vp.dataGrid.getColumnIds(column.columns).length : 0;\n                    const columnId = typeof column === 'string' ?\n                        column : column.columnId;\n                    const dataColumn = vp.getColumn(columnId || '');\n                    const headerFormat = (typeof column !== 'string') ?\n                        column.format : void 0;\n                    const className = (typeof column !== 'string') ?\n                        column.className : void 0;\n                    // Skip hidden column or header when all columns are hidden.\n                    if ((columnId &&\n                        enabledColumns && enabledColumns?.indexOf(columnId) < 0) || (!dataColumn && colSpan === 0)) {\n                        continue;\n                    }\n                    const headerCell = this.createCell(vp.getColumn(columnId || '') ||\n                        new Column(vp, \n                        // Remove HTML tags and empty spaces.\n                        sanitizeText(headerFormat || '').trim() || '', i));\n                    if (typeof column !== 'string') {\n                        vp.dataGrid.accessibility?.addHeaderCellDescription(headerCell.htmlElement, column.accessibility?.description);\n                    }\n                    if (headerFormat) {\n                        if (!headerCell.options.header) {\n                            headerCell.options.header = {};\n                        }\n                        headerCell.options.header.format = headerFormat;\n                    }\n                    if (className) {\n                        headerCell.options.className = className;\n                    }\n                    // Add class to disable left border on first column\n                    if (dataColumn?.index === 0 && i === 0) {\n                        headerCell.htmlElement.classList.add(Globals.classNames.columnFirst);\n                    }\n                    headerCell.render();\n                    headerCell.columns =\n                        typeof column !== 'string' ? column.columns : void 0;\n                    if (columnId) {\n                        headerCell.htmlElement.setAttribute('rowSpan', (this.viewport.header?.levels || 1) - level);\n                    }\n                    else {\n                        if (colSpan > 1) {\n                            headerCell.htmlElement.setAttribute('colSpan', colSpan);\n                        }\n                    }\n                }\n            }\n            reflow() {\n                const row = this;\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; i++) {\n                    const cell = row.cells[i];\n                    cell.reflow();\n                }\n            }\n            /**\n             * Get all headers that should be rendered in a level.\n             *\n             * @param scope\n             * Level that we start from\n             *\n             * @param targetLevel\n             * Max level\n             *\n             * @param currentLevel\n             * Current level\n             *\n             * @return\n             * Array of headers that should be rendered in a level\n             */\n            getColumnsAtLevel(scope, targetLevel, currentLevel = 0) {\n                let result = [];\n                for (const column of scope) {\n                    if (currentLevel === targetLevel) {\n                        result.push(column);\n                    }\n                    if (typeof column !== 'string' && column.columns) {\n                        result = result.concat(this.getColumnsAtLevel(column.columns, targetLevel, currentLevel + 1));\n                    }\n                }\n                return result;\n            }\n            /**\n             * Sets the row HTML element attributes and additional classes.\n             */\n            setRowAttributes() {\n                const a11y = this.viewport.dataGrid.accessibility;\n                a11y?.setRowIndex(this.htmlElement, this.level);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HeaderRow;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Header/TableHeader.js', [_modules['DataGrid/Table/Header/HeaderRow.js'], _modules['Core/Utilities.js']], function (HeaderRow, Utils) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { getStyle } = Utils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a table header row containing the cells (headers) with\n         * column names.\n         */\n        class TableHeader {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a new table head.\n             *\n             * @param viewport\n             * The viewport (table) the table head belongs to.\n             */\n            constructor(viewport) {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * The visible columns of the table.\n                 */\n                this.columns = [];\n                /**\n                 * The container of the table head.\n                 */\n                this.rows = [];\n                /**\n                 * Amount of levels in the header, that is used in creating correct rows.\n                 */\n                this.levels = 1;\n                this.viewport = viewport;\n                this.columns = viewport.columns;\n                if (viewport.dataGrid.options?.header) {\n                    this.levels = this.getRowLevels(viewport.dataGrid.options?.header);\n                }\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Renders the table head content.\n             */\n            render() {\n                const vp = this.viewport;\n                const dataGrid = vp.dataGrid;\n                if (!dataGrid.enabledColumns) {\n                    return;\n                }\n                for (let i = 0, iEnd = this.levels; i < iEnd; i++) {\n                    const row = new HeaderRow(vp, i + 1); // Avoid indexing from 0\n                    row.renderMultipleLevel(i);\n                    this.rows.push(row);\n                }\n            }\n            /**\n             * Reflows the table head's content dimensions.\n             */\n            reflow() {\n                const vp = this.viewport;\n                if (!vp.theadElement) {\n                    return;\n                }\n                const { clientWidth, offsetWidth } = vp.tbodyElement;\n                const header = vp.header;\n                const rows = this.rows;\n                const tableEl = header?.viewport.dataGrid.tableElement;\n                const theadEL = header?.viewport.theadElement;\n                const theadBorder = theadEL && getStyle(theadEL, 'border-right-width', true) || 0;\n                const tableBorder = (tableEl && getStyle(tableEl, 'border-right-width', true)) || 0;\n                const bordersWidth = offsetWidth - clientWidth - theadBorder - tableBorder;\n                for (const row of rows) {\n                    row.reflow();\n                }\n                if (vp.rowsWidth) {\n                    vp.theadElement.style.width =\n                        Math.max(vp.rowsWidth, clientWidth) + bordersWidth + 'px';\n                }\n                // Adjust cell's width when scrollbar is enabled.\n                if (header && bordersWidth > 0) {\n                    const cells = header.rows[header.rows.length - 1].cells;\n                    const cellHtmlElement = cells[cells.length - 1].htmlElement;\n                    cellHtmlElement.style.width = cellHtmlElement.style.maxWidth =\n                        cellHtmlElement.offsetWidth + bordersWidth + 'px';\n                }\n            }\n            /**\n             * Returns amount of rows for the current cell in header tree.\n             *\n             * @param scope\n             * Structure of header\n             *\n             * @returns\n             */\n            getRowLevels(scope) {\n                let maxDepth = 0;\n                for (const item of scope) {\n                    if (typeof item !== 'string' && item.columns) {\n                        const depth = this.getRowLevels(item.columns);\n                        if (depth > maxDepth) {\n                            maxDepth = depth;\n                        }\n                    }\n                }\n                return maxDepth + 1;\n            }\n            /**\n             * Scrolls the table head horizontally.\n             *\n             * @param scrollLeft\n             * The left scroll position.\n             */\n            scrollHorizontally(scrollLeft) {\n                const el = this.viewport.theadElement;\n                if (!el) {\n                    return;\n                }\n                el.style.transform = `translateX(${-scrollLeft}px)`;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TableHeader;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Content/TableCell.js', [_modules['DataGrid/Table/Cell.js'], _modules['Core/Utilities.js'], _modules['DataGrid/Utils.js']], function (Cell, Utils, DGUtils) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { defined, fireEvent } = Utils;\n        const { isHTML } = DGUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a cell in the data grid.\n         */\n        class TableCell extends Cell {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a cell in the data grid.\n             *\n             * @param column\n             * The column of the cell.\n             *\n             * @param row\n             * The row of the cell.\n             */\n            constructor(column, row) {\n                super(column, row);\n                this.row = row;\n                this.column.registerCell(this);\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Renders the cell by appending it to the row and setting its value.\n             */\n            render() {\n                super.render();\n                // It may happen that `await` will be needed here in the future.\n                void this.setValue(this.column.data?.[this.row.index], false);\n            }\n            initEvents() {\n                this.cellEvents.push(['dblclick', (e) => {\n                        this.onDblClick(e);\n                    }]);\n                this.cellEvents.push(['mouseout', () => this.onMouseOut()]);\n                this.cellEvents.push(['mouseover', () => this.onMouseOver()]);\n                this.cellEvents.push(['mousedown', (e) => {\n                        this.onMouseDown(e);\n                    }]);\n                super.initEvents();\n            }\n            /**\n             * Handles the focus event on the cell.\n             */\n            onFocus() {\n                super.onFocus();\n                const vp = this.row.viewport;\n                vp.focusCursor = [\n                    this.row.index,\n                    this.column.index\n                ];\n            }\n            /**\n             * Handles the mouse down event on the cell.\n             *\n             * @param e\n             * The mouse event object.\n             */\n            onMouseDown(e) {\n                const { dataGrid } = this.row.viewport;\n                if (e.target === this.htmlElement) {\n                    this.htmlElement.focus();\n                }\n                fireEvent(dataGrid, 'cellMouseDown', {\n                    target: this\n                });\n            }\n            /**\n             * Handles the mouse over event on the cell.\n             */\n            onMouseOver() {\n                const { dataGrid } = this.row.viewport;\n                dataGrid.hoverRow(this.row.index);\n                dataGrid.hoverColumn(this.column.id);\n                dataGrid.options?.events?.cell?.mouseOver?.call(this);\n                fireEvent(dataGrid, 'cellMouseOver', {\n                    target: this\n                });\n            }\n            /**\n             * Handles the mouse out event on the cell.\n             */\n            onMouseOut() {\n                const { dataGrid } = this.row.viewport;\n                dataGrid.hoverRow();\n                dataGrid.hoverColumn();\n                dataGrid.options?.events?.cell?.mouseOut?.call(this);\n                fireEvent(dataGrid, 'cellMouseOut', {\n                    target: this\n                });\n            }\n            /**\n             * Handles the double click event on the cell.\n             *\n             * @param e\n             * The mouse event object.\n             */\n            onDblClick(e) {\n                const vp = this.row.viewport;\n                const { dataGrid } = vp;\n                if (this.column.options.cells?.editable) {\n                    e.preventDefault();\n                    vp.cellEditing.startEditing(this);\n                }\n                dataGrid.options?.events?.cell?.dblClick?.call(this);\n                fireEvent(dataGrid, 'cellDblClick', {\n                    target: this\n                });\n            }\n            onClick() {\n                const vp = this.row.viewport;\n                const { dataGrid } = vp;\n                dataGrid.options?.events?.cell?.click?.call(this);\n                fireEvent(dataGrid, 'cellClick', {\n                    target: this\n                });\n            }\n            onKeyDown(e) {\n                if (e.target !== this.htmlElement) {\n                    return;\n                }\n                if (e.key === 'Enter') {\n                    if (this.column.options.cells?.editable) {\n                        this.row.viewport.cellEditing.startEditing(this);\n                    }\n                    return;\n                }\n                super.onKeyDown(e);\n            }\n            /**\n             * Sets the value & updating content of the cell.\n             *\n             * @param value\n             * The raw value to set.\n             *\n             * @param updateTable\n             * Whether to update the table after setting the content.\n             */\n            async setValue(value, updateTable) {\n                this.value = value;\n                const vp = this.column.viewport;\n                const element = this.htmlElement;\n                const cellContent = this.formatCell();\n                if (isHTML(cellContent)) {\n                    this.renderHTMLCellContent(cellContent, element);\n                }\n                else {\n                    element.innerText = cellContent;\n                }\n                this.htmlElement.setAttribute('data-value', this.value + '');\n                this.setCustomClassName(this.column.options.cells?.className);\n                if (this.column.options.cells?.editable) {\n                    vp.dataGrid.accessibility?.addEditableCellHint(this.htmlElement);\n                }\n                vp.dataGrid.options?.events?.cell?.afterSetValue?.call(this);\n                if (!updateTable) {\n                    return;\n                }\n                const { dataTable: originalDataTable } = vp.dataGrid;\n                // Taken the local row index of the original datagrid data table, but\n                // in the future it should affect the globally original data table.\n                // (To be done after the DataLayer refinement)\n                const rowTableIndex = this.row.id && originalDataTable?.getLocalRowIndex(this.row.id);\n                if (!originalDataTable || rowTableIndex === void 0) {\n                    return;\n                }\n                originalDataTable.setCell(this.column.id, rowTableIndex, this.value);\n                if (vp.dataGrid.querying.willNotModify()) {\n                    // If the data table does not need to be modified, skip the\n                    // data modification and don't update the whole table. It checks\n                    // if the modifiers are globally set. Can be changed in the future\n                    // to check if the modifiers are set for the specific columns.\n                    return;\n                }\n                let focusedRowId;\n                if (vp.focusCursor) {\n                    focusedRowId = vp.dataTable.getOriginalRowIndex(vp.focusCursor[0]);\n                }\n                await vp.dataGrid.querying.proceed(true);\n                vp.loadPresentationData();\n                if (focusedRowId !== void 0 && vp.focusCursor) {\n                    const newRowIndex = vp.dataTable.getLocalRowIndex(focusedRowId);\n                    if (newRowIndex !== void 0) {\n                        vp.rows[newRowIndex - vp.rows[0].index]\n                            ?.cells[vp.focusCursor[1]].htmlElement.focus();\n                    }\n                }\n            }\n            /**\n             * Handle the formatting content of the cell.\n             */\n            formatCell() {\n                const options = this.column.options.cells || {};\n                const { format, formatter } = options;\n                let value = this.value;\n                if (!defined(value)) {\n                    value = '';\n                }\n                let cellContent = '';\n                if (formatter) {\n                    cellContent = formatter.call(this).toString();\n                }\n                else {\n                    cellContent = (format ? this.format(format) : value + '');\n                }\n                return cellContent;\n            }\n            /**\n             * Destroys the cell.\n             */\n            destroy() {\n                super.destroy();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TableCell;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Content/TableRow.js', [_modules['DataGrid/Table/Row.js'], _modules['DataGrid/Table/Content/TableCell.js'], _modules['DataGrid/Globals.js']], function (Row, TableCell, Globals) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a row in the data grid.\n         */\n        class TableRow extends Row {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a row in the data grid.\n             *\n             * @param viewport\n             * The DataGrid Table instance which the row belongs to.\n             *\n             * @param index\n             * The index of the row in the data table.\n             */\n            constructor(viewport, index) {\n                super(viewport);\n                this.index = index;\n                this.id = viewport.dataTable.getOriginalRowIndex(index);\n                this.setRowAttributes();\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            createCell(column) {\n                return new TableCell(column, this);\n            }\n            /**\n             * Adds or removes the hovered CSS class to the row element.\n             *\n             * @param hovered\n             * Whether the row should be hovered.\n             */\n            setHoveredState(hovered) {\n                this.htmlElement.classList[hovered ? 'add' : 'remove'](Globals.classNames.hoveredRow);\n                if (hovered) {\n                    this.viewport.dataGrid.hoveredRowIndex = this.index;\n                }\n            }\n            /**\n             * Sets the row HTML element attributes and additional classes.\n             */\n            setRowAttributes() {\n                const idx = this.index;\n                const el = this.htmlElement;\n                const a11y = this.viewport.dataGrid.accessibility;\n                el.style.transform = `translateY(${this.getDefaultTopOffset()}px)`;\n                el.classList.add(Globals.classNames.rowElement);\n                // Index of the row in the presentation data table\n                el.setAttribute('data-row-index', idx);\n                // Index of the row in the original data table (ID)\n                if (this.id !== void 0) {\n                    el.setAttribute('data-row-id', this.id);\n                }\n                // Calculate levels of header, 1 to avoid indexing from 0\n                a11y?.setRowIndex(el, idx + (this.viewport.header?.levels ?? 1) + 1);\n                // Indexing from 0, so rows with even index are odd.\n                el.classList.add(Globals.classNames[idx % 2 ? 'rowEven' : 'rowOdd']);\n                if (this.viewport.dataGrid.hoveredRowIndex === idx) {\n                    el.classList.add(Globals.classNames.hoveredRow);\n                }\n            }\n            /**\n             * Returns the default top offset of the row (before adjusting row heights).\n             * @internal\n             */\n            getDefaultTopOffset() {\n                return this.index * this.viewport.rowsVirtualizer.defaultRowHeight;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TableRow;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Actions/RowsVirtualizer.js', [_modules['DataGrid/Utils.js'], _modules['DataGrid/Globals.js'], _modules['DataGrid/Table/Content/TableRow.js']], function (DGUtils, Globals, TableRow) {\n        /* *\n         *\n         *  DataGrid Rows Renderer class.\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { makeHTMLElement, getTranslateY } = DGUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a virtualized rows renderer for the data grid.\n         */\n        class RowsVirtualizer {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the rows virtualizer.\n             *\n             * @param viewport\n             * The viewport of the data grid to render rows in.\n             */\n            constructor(viewport) {\n                /**\n                 * The index of the first visible row.\n                 */\n                this.rowCursor = 0;\n                /**\n                 * Flag indicating if the scrolling handler should be prevented to avoid\n                 * flickering loops when scrolling to the last row.\n                 */\n                this.preventScroll = false;\n                const rowSettings = viewport.dataGrid.options?.rendering?.rows;\n                this.viewport = viewport;\n                this.strictRowHeights = rowSettings?.strictHeights;\n                this.buffer = Math.max(rowSettings?.bufferSize, 0);\n                this.defaultRowHeight = this.getDefaultRowHeight();\n                if (this.strictRowHeights) {\n                    viewport.tbodyElement.classList.add(Globals.classNames.rowsContentNowrap);\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Renders the rows in the viewport for the first time.\n             */\n            initialRender() {\n                // Initial reflow to set the viewport height\n                this.viewport.reflow();\n                // Load & render rows\n                this.renderRows(this.rowCursor);\n                this.adjustRowHeights();\n            }\n            /**\n             * Renders the rows in the viewport. It is called when the rows need to be\n             * re-rendered, e.g., after a sort or filter operation.\n             */\n            rerender() {\n                const rows = this.viewport.rows;\n                const tbody = this.viewport.tbodyElement;\n                let oldScrollTop;\n                if (rows.length) {\n                    oldScrollTop = tbody.scrollTop;\n                    for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                        rows[i].destroy();\n                    }\n                    rows.length = 0;\n                }\n                this.renderRows(this.rowCursor);\n                if (oldScrollTop !== void 0) {\n                    tbody.scrollTop = oldScrollTop;\n                }\n                this.scroll();\n                // Reflow the rendered row cells widths (check redundancy)\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rows[i].reflow();\n                }\n            }\n            /**\n             * Method called on the viewport scroll event.\n             */\n            scroll() {\n                const target = this.viewport.tbodyElement;\n                const { defaultRowHeight: rowHeight } = this;\n                const lastScrollTop = target.scrollTop;\n                if (this.preventScroll) {\n                    if (lastScrollTop <= target.scrollTop) {\n                        this.preventScroll = false;\n                    }\n                    this.adjustBottomRowHeights();\n                    return;\n                }\n                // Do vertical virtual scrolling\n                const rowCursor = Math.floor(target.scrollTop / rowHeight);\n                if (this.rowCursor !== rowCursor) {\n                    this.renderRows(rowCursor);\n                }\n                this.rowCursor = rowCursor;\n                this.adjustRowHeights();\n                if (!this.strictRowHeights &&\n                    lastScrollTop > target.scrollTop &&\n                    !this.preventScroll) {\n                    target.scrollTop = lastScrollTop;\n                    this.preventScroll = true;\n                }\n            }\n            /**\n             * Adjusts the visible row heights from the bottom of the viewport.\n             */\n            adjustBottomRowHeights() {\n                const rows = this.viewport.rows;\n                const rowsLn = rows.length;\n                const lastRow = rows[rowsLn - 1];\n                let rowTop = getTranslateY(lastRow.htmlElement);\n                const rowBottom = rowTop + lastRow.htmlElement.offsetHeight;\n                let newHeight = lastRow.cells[0].htmlElement.offsetHeight;\n                rowTop = rowBottom - newHeight;\n                lastRow.htmlElement.style.height = newHeight + 'px';\n                lastRow.htmlElement.style.transform = `translateY(${rowTop}px)`;\n                for (let j = 0, jEnd = lastRow.cells.length; j < jEnd; ++j) {\n                    lastRow.cells[j].htmlElement.style.transform = '';\n                }\n                for (let i = rowsLn - 2; i >= 0; i--) {\n                    const row = rows[i];\n                    newHeight = row.cells[0].htmlElement.offsetHeight;\n                    rowTop -= newHeight;\n                    row.htmlElement.style.height = newHeight + 'px';\n                    row.htmlElement.style.transform = `translateY(${rowTop}px)`;\n                    for (let j = 0, jEnd = row.cells.length; j < jEnd; ++j) {\n                        row.cells[j].htmlElement.style.transform = '';\n                    }\n                }\n            }\n            /**\n             * Renders rows in the specified range. Removes rows that are out of the\n             * range except the last row.\n             *\n             * @param rowCursor\n             * The index of the first visible row.\n             */\n            renderRows(rowCursor) {\n                const { viewport: vp, buffer } = this;\n                const rowsPerPage = Math.ceil(vp.tbodyElement.offsetHeight / this.defaultRowHeight);\n                const rows = vp.rows;\n                if (!rows.length) {\n                    const last = new TableRow(vp, vp.dataTable.getRowCount() - 1);\n                    last.render();\n                    rows.push(last);\n                    vp.tbodyElement.appendChild(last.htmlElement);\n                }\n                const from = Math.max(0, Math.min(rowCursor - buffer, vp.dataTable.getRowCount() - rowsPerPage));\n                const to = Math.min(rowCursor + rowsPerPage + buffer, rows[rows.length - 1].index - 1);\n                const alwaysLastRow = rows.pop();\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rows[i].destroy();\n                }\n                rows.length = 0;\n                for (let i = from; i <= to; ++i) {\n                    const newRow = new TableRow(vp, i);\n                    newRow.render();\n                    vp.tbodyElement.insertBefore(newRow.htmlElement, vp.tbodyElement.lastChild);\n                    rows.push(newRow);\n                }\n                if (alwaysLastRow) {\n                    rows.push(alwaysLastRow);\n                }\n                // Focus the cell if the focus cursor is set\n                if (vp.focusCursor) {\n                    const [rowIndex, columnIndex] = vp.focusCursor;\n                    const row = rows.find((row) => row.index === rowIndex);\n                    if (row) {\n                        row.cells[columnIndex]?.htmlElement.focus({\n                            preventScroll: true\n                        });\n                    }\n                }\n                const firstVisibleRow = rows[rowCursor - rows[0].index];\n                this.focusAnchorCell = firstVisibleRow?.cells[0];\n                this.focusAnchorCell?.htmlElement.setAttribute('tabindex', '0');\n            }\n            /**\n             * Adjusts the heights of the rows based on the current scroll position.\n             * It handles the possibility of the rows having different heights than\n             * the default height.\n             */\n            adjustRowHeights() {\n                if (this.strictRowHeights) {\n                    return;\n                }\n                const { rowCursor: cursor, defaultRowHeight: defaultH } = this;\n                const { rows, tbodyElement } = this.viewport;\n                const rowsLn = rows.length;\n                let translateBuffer = rows[0].getDefaultTopOffset();\n                for (let i = 0; i < rowsLn; ++i) {\n                    const row = rows[i];\n                    // Reset row height and cell transforms\n                    row.htmlElement.style.height = '';\n                    if (row.cells[0].htmlElement.style.transform) {\n                        for (let j = 0, jEnd = row.cells.length; j < jEnd; ++j) {\n                            const cell = row.cells[j];\n                            cell.htmlElement.style.transform = '';\n                        }\n                    }\n                    // Rows above the first visible row\n                    if (row.index < cursor) {\n                        row.htmlElement.style.height = defaultH + 'px';\n                        continue;\n                    }\n                    const cellHeight = row.cells[0].htmlElement.offsetHeight;\n                    row.htmlElement.style.height = cellHeight + 'px';\n                    // Rows below the first visible row\n                    if (row.index > cursor) {\n                        continue;\n                    }\n                    // First visible row\n                    if (row.htmlElement.offsetHeight > defaultH) {\n                        const newHeight = Math.floor(cellHeight - (cellHeight - defaultH) * (tbodyElement.scrollTop / defaultH - cursor));\n                        row.htmlElement.style.height = newHeight + 'px';\n                        for (let j = 0, jEnd = row.cells.length; j < jEnd; ++j) {\n                            const cell = row.cells[j];\n                            cell.htmlElement.style.transform = `translateY(${newHeight - cellHeight}px)`;\n                        }\n                    }\n                }\n                for (let i = 1, iEnd = rowsLn - 1; i < iEnd; ++i) {\n                    translateBuffer += rows[i - 1].htmlElement.offsetHeight;\n                    rows[i].htmlElement.style.transform =\n                        `translateY(${translateBuffer}px)`;\n                }\n                // Set the proper offset for the last row\n                const lastRow = rows[rowsLn - 1];\n                const preLastRow = rows[rowsLn - 2];\n                if (preLastRow && preLastRow.index === lastRow.index - 1) {\n                    lastRow.htmlElement.style.transform = `translateY(${preLastRow.htmlElement.offsetHeight +\n                        getTranslateY(preLastRow.htmlElement)}px)`;\n                }\n            }\n            /**\n             * Reflow the rendered rows content dimensions.\n             */\n            reflowRows() {\n                const rows = this.viewport.rows;\n                if (rows.length < 1) {\n                    return;\n                }\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rows[i].reflow();\n                }\n                this.adjustRowHeights();\n            }\n            /**\n             * Returns the default height of a row. This method should be called only\n             * once on initialization.\n             */\n            getDefaultRowHeight() {\n                const mockRow = makeHTMLElement('tr', {\n                    className: Globals.classNames.rowElement\n                }, this.viewport.tbodyElement);\n                const defaultRowHeight = mockRow.offsetHeight;\n                mockRow.remove();\n                return defaultRowHeight;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RowsVirtualizer;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Actions/ColumnsResizer.js', [_modules['DataGrid/Table/Column.js'], _modules['DataGrid/Globals.js'], _modules['DataGrid/Utils.js']], function (Column, Globals, DGUtils) {\n        /* *\n         *\n         *  DataGrid Columns Resizer class.\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = DGUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The class that handles the resizing of columns in the data grid.\n         */\n        class ColumnsResizer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(viewport) {\n                /**\n                 * The handles and their mouse down event listeners.\n                 */\n                this.handles = [];\n                /**\n                 * Handles the mouse move event on the document.\n                 *\n                 * @param e\n                 * The mouse event.\n                 */\n                this.onDocumentMouseMove = (e) => {\n                    if (!this.draggedResizeHandle || !this.draggedColumn) {\n                        return;\n                    }\n                    const diff = e.pageX - (this.dragStartX || 0);\n                    if (this.viewport.columnDistribution === 'full') {\n                        this.fullDistributionResize(diff);\n                    }\n                    else {\n                        this.fixedDistributionResize(diff);\n                    }\n                    this.viewport.reflow();\n                    this.viewport.rowsVirtualizer.adjustRowHeights();\n                    this.viewport.dataGrid.options?.events?.column?.afterResize?.call(this.draggedColumn);\n                };\n                /**\n                 * Handles the mouse up event on the document.\n                 */\n                this.onDocumentMouseUp = () => {\n                    this.draggedColumn?.header?.htmlElement?.classList.remove(Globals.classNames.resizedColumn);\n                    this.dragStartX = void 0;\n                    this.draggedColumn = void 0;\n                    this.draggedResizeHandle = void 0;\n                    this.columnStartWidth = void 0;\n                    this.nextColumnStartWidth = void 0;\n                };\n                this.viewport = viewport;\n                document.addEventListener('mousemove', this.onDocumentMouseMove);\n                document.addEventListener('mouseup', this.onDocumentMouseUp);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Resizes the columns in the full distribution mode.\n             *\n             * @param diff\n             * The X position difference in pixels.\n             */\n            fullDistributionResize(diff) {\n                const vp = this.viewport;\n                const column = this.draggedColumn;\n                if (!column) {\n                    return;\n                }\n                const nextColumn = vp.columns[column.index + 1];\n                if (!nextColumn) {\n                    return;\n                }\n                const leftColW = this.columnStartWidth ?? 0;\n                const rightColW = this.nextColumnStartWidth ?? 0;\n                const MIN_WIDTH = Column.MIN_COLUMN_WIDTH;\n                let newLeftW = leftColW + diff;\n                let newRightW = rightColW - diff;\n                if (newLeftW < MIN_WIDTH) {\n                    newLeftW = MIN_WIDTH;\n                    newRightW = leftColW + rightColW - MIN_WIDTH;\n                }\n                if (newRightW < MIN_WIDTH) {\n                    newRightW = MIN_WIDTH;\n                    newLeftW = leftColW + rightColW - MIN_WIDTH;\n                }\n                column.width = vp.getRatioFromWidth(newLeftW);\n                nextColumn.width = vp.getRatioFromWidth(newRightW);\n            }\n            /**\n             * Render the drag handle for resizing columns.\n             *\n             * @param column\n             * The reference to rendered column\n             *\n             * @param cell\n             * The reference to rendered cell, where hadles should be added\n             */\n            renderColumnDragHandles(column, cell) {\n                const vp = column.viewport;\n                if (vp.columnsResizer && (vp.columnDistribution !== 'full' ||\n                    (vp.dataGrid.enabledColumns &&\n                        column.index < vp.dataGrid.enabledColumns.length - 1))) {\n                    const handle = makeHTMLElement('div', {\n                        className: Globals.classNames.resizerHandles\n                    }, cell.htmlElement);\n                    handle.setAttribute('aria-hidden', true);\n                    vp.columnsResizer?.addHandleListeners(handle, column);\n                }\n            }\n            /**\n             * Resizes the columns in the fixed distribution mode.\n             *\n             * @param diff\n             * The X position difference in pixels.\n             */\n            fixedDistributionResize(diff) {\n                const column = this.draggedColumn;\n                if (!column) {\n                    return;\n                }\n                const colW = this.columnStartWidth ?? 0;\n                const MIN_WIDTH = Column.MIN_COLUMN_WIDTH;\n                let newW = colW + diff;\n                if (newW < MIN_WIDTH) {\n                    newW = MIN_WIDTH;\n                }\n                column.width = newW;\n            }\n            /**\n             * Adds event listeners to the handle.\n             *\n             * @param handle\n             * The handle element.\n             *\n             * @param column\n             * The column the handle belongs to.\n             */\n            addHandleListeners(handle, column) {\n                const onHandleMouseDown = (e) => {\n                    this.dragStartX = e.pageX;\n                    this.draggedColumn = column;\n                    this.draggedResizeHandle = handle;\n                    this.columnStartWidth = column.getWidth();\n                    this.nextColumnStartWidth =\n                        this.viewport.columns[column.index + 1]?.getWidth();\n                    column.header?.htmlElement.classList.add(Globals.classNames.resizedColumn);\n                };\n                this.handles.push([handle, onHandleMouseDown]);\n                handle.addEventListener('mousedown', onHandleMouseDown);\n            }\n            /**\n             * Removes all added event listeners from the document and handles. This\n             * should be called on the destroy of the data grid.\n             */\n            removeEventListeners() {\n                document.removeEventListener('mousemove', this.onDocumentMouseMove);\n                document.removeEventListener('mouseup', this.onDocumentMouseUp);\n                for (let i = 0, iEnd = this.handles.length; i < iEnd; i++) {\n                    const [handle, listener] = this.handles[i];\n                    handle.removeEventListener('mousedown', listener);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnsResizer;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Actions/CellEditing.js', [_modules['DataGrid/Globals.js'], _modules['DataGrid/Utils.js']], function (Globals, DGUtils) {\n        /* *\n         *\n         *  DataGrid Cell Editing class.\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = DGUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The class that handles the manual editing of cells in the data grid.\n         */\n        class CellEditing {\n            constructor() {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * Handles the blur event on the input field.\n                 */\n                this.onInputBlur = () => {\n                    this.stopEditing();\n                };\n                /**\n                 * Handles the keydown event on the input field. Cancels editing on escape\n                 * and saves the value on enter.\n                 *\n                 * @param e\n                 * The keyboard event.\n                 */\n                this.onInputKeyDown = (e) => {\n                    const { keyCode } = e;\n                    // Enter / Escape\n                    if (keyCode === 13 || keyCode === 27) {\n                        // Cancel editing on escape\n                        this.stopEditing(keyCode === 13);\n                    }\n                };\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            /**\n             * Turns the cell into an editable input field.\n             *\n             * @param cell\n             * The cell that is to be edited.\n             */\n            startEditing(cell) {\n                if (this.editedCell === cell) {\n                    return;\n                }\n                if (this.editedCell) {\n                    this.stopEditing();\n                }\n                this.editedCell = cell;\n                const cellElement = cell.htmlElement;\n                cellElement.innerHTML = '';\n                cellElement.classList.add(Globals.classNames.editedCell);\n                cell.row.viewport.dataGrid.accessibility?.userEditedCell('started');\n                this.renderInput();\n            }\n            /**\n             * Stops the editing of the cell.\n             *\n             * @param submit\n             * Whether to save the value of the input to the cell. Defaults to true.\n             */\n            stopEditing(submit = true) {\n                const cell = this.editedCell;\n                const input = this.inputElement;\n                if (!cell || !input) {\n                    return;\n                }\n                const dataGrid = cell.column.viewport.dataGrid;\n                let newValue = input.value;\n                this.destroyInput();\n                cell.htmlElement.classList.remove(Globals.classNames.editedCell);\n                cell.htmlElement.focus();\n                // Convert to number if possible\n                if (!isNaN(+newValue)) {\n                    newValue = +newValue;\n                }\n                void cell.setValue(submit ? newValue : cell.value, submit && cell.value !== newValue);\n                dataGrid.options?.events?.cell?.afterEdit?.call(cell);\n                cell.row.viewport.dataGrid.accessibility?.userEditedCell(submit ? 'edited' : 'cancelled');\n                delete this.editedCell;\n            }\n            /**\n             * Renders the input field for the cell, focuses it and sets up event\n             * listeners.\n             */\n            renderInput() {\n                const cell = this.editedCell;\n                if (!cell) {\n                    return;\n                }\n                const cellEl = cell.htmlElement;\n                const input = this.inputElement = makeHTMLElement('input', {}, cellEl);\n                input.value = '' + cell.value;\n                input.focus();\n                input.addEventListener('blur', this.onInputBlur);\n                input.addEventListener('keydown', this.onInputKeyDown);\n            }\n            /**\n             * Removes event listeners and the input element.\n             */\n            destroyInput() {\n                const input = this.inputElement;\n                if (!input) {\n                    return;\n                }\n                input.removeEventListener('keydown', this.onInputKeyDown);\n                input.removeEventListener('blur', this.onInputBlur);\n                input.remove();\n                delete this.inputElement;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellEditing;\n    });\n    _registerModule(_modules, 'DataGrid/Table/Table.js', [_modules['DataGrid/Utils.js'], _modules['DataGrid/Table/Column.js'], _modules['DataGrid/Table/Header/TableHeader.js'], _modules['DataGrid/Table/Actions/RowsVirtualizer.js'], _modules['DataGrid/Table/Actions/ColumnsResizer.js'], _modules['DataGrid/Globals.js'], _modules['Core/Utilities.js'], _modules['DataGrid/Table/Actions/CellEditing.js']], function (DGUtils, Column, TableHeader, RowsVirtualizer, ColumnsResizer, Globals, Utils, CellEditing) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = DGUtils;\n        const { getStyle } = Utils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a table viewport of the data grid.\n         */\n        class Table {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a new data grid table.\n             *\n             * @param dataGrid\n             * The data grid instance which the table (viewport) belongs to.\n             *\n             * @param tableElement\n             * The HTML table element of the data grid.\n             */\n            constructor(dataGrid, tableElement) {\n                /**\n                 * The visible columns of the table.\n                 */\n                this.columns = [];\n                /**\n                 * The visible rows of the table.\n                 */\n                this.rows = [];\n                /**\n                 * Handles the focus event on the table body.\n                 *\n                 * @param e\n                 * The focus event.\n                 */\n                this.onTBodyFocus = (e) => {\n                    e.preventDefault();\n                    this.rows[this.rowsVirtualizer.rowCursor - this.rows[0].index]\n                        ?.cells[0]?.htmlElement.focus();\n                };\n                /**\n                 * Handles the resize event.\n                 */\n                this.onResize = () => {\n                    this.reflow();\n                };\n                /**\n                 * Handles the scroll event.\n                 */\n                this.onScroll = () => {\n                    this.rowsVirtualizer.scroll();\n                    this.header?.scrollHorizontally(this.tbodyElement.scrollLeft);\n                };\n                this.dataGrid = dataGrid;\n                this.dataTable = this.dataGrid.presentationTable;\n                const dgOptions = dataGrid.options;\n                const customClassName = dgOptions?.rendering?.table?.className;\n                this.columnDistribution =\n                    dgOptions?.rendering?.columns?.distribution;\n                this.renderCaption();\n                if (dgOptions?.rendering?.header?.enabled) {\n                    this.theadElement = makeHTMLElement('thead', {}, tableElement);\n                }\n                this.tbodyElement = makeHTMLElement('tbody', {}, tableElement);\n                this.rowsVirtualizer = new RowsVirtualizer(this);\n                if (dgOptions?.columnDefaults?.resizing) {\n                    this.columnsResizer = new ColumnsResizer(this);\n                }\n                this.cellEditing = new CellEditing();\n                if (customClassName) {\n                    tableElement.classList.add(...customClassName.split(/\\s+/g));\n                }\n                this.init();\n                // Add event listeners\n                this.resizeObserver = new ResizeObserver(this.onResize);\n                this.resizeObserver.observe(tableElement);\n                this.tbodyElement.addEventListener('scroll', this.onScroll);\n                this.tbodyElement.addEventListener('focus', this.onTBodyFocus);\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Initializes the data grid table.\n             */\n            init() {\n                // Load columns\n                this.loadColumns();\n                // Load & render head\n                if (this.dataGrid.options?.rendering?.header?.enabled) {\n                    this.header = new TableHeader(this);\n                    this.header.render();\n                }\n                // TODO: Load & render footer\n                // this.footer = new TableFooter(this);\n                // this.footer.render();\n                this.rowsVirtualizer.initialRender();\n            }\n            /**\n             * Loads the columns of the table.\n             */\n            loadColumns() {\n                const { enabledColumns } = this.dataGrid;\n                if (!enabledColumns) {\n                    return;\n                }\n                let columnId;\n                for (let i = 0, iEnd = enabledColumns.length; i < iEnd; ++i) {\n                    columnId = enabledColumns[i];\n                    this.columns.push(new Column(this, columnId, i));\n                }\n            }\n            /**\n             * Loads the modified data from the data table and renders the rows.\n             */\n            loadPresentationData() {\n                this.dataTable = this.dataGrid.presentationTable;\n                for (const column of this.columns) {\n                    column.loadData();\n                }\n                this.rowsVirtualizer.rerender();\n            }\n            /**\n             * Reflows the table's content dimensions.\n             */\n            reflow() {\n                const tableEl = this.dataGrid.tableElement;\n                const borderWidth = tableEl ? ((getStyle(tableEl, 'border-top-width', true) || 0) +\n                    (getStyle(tableEl, 'border-bottom-width', true) || 0)) : 0;\n                this.tbodyElement.style.height = this.tbodyElement.style.minHeight = `${(this.dataGrid.container?.clientHeight || 0) -\n                    (this.theadElement?.offsetHeight || 0) -\n                    (this.captionElement?.offsetHeight || 0) -\n                    (this.dataGrid.credits?.getHeight() || 0) -\n                    borderWidth}px`;\n                // Get the width of the rows.\n                if (this.columnDistribution === 'fixed') {\n                    let rowsWidth = 0;\n                    for (let i = 0, iEnd = this.columns.length; i < iEnd; ++i) {\n                        rowsWidth += this.columns[i].width;\n                    }\n                    this.rowsWidth = rowsWidth;\n                }\n                // Reflow the head\n                this.header?.reflow();\n                // Reflow rows content dimensions\n                this.rowsVirtualizer.reflowRows();\n            }\n            /**\n             * Scrolls the table to the specified row.\n             *\n             * @param index\n             * The index of the row to scroll to.\n             *\n             * Try it: {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/data-grid/basic/scroll-to-row | Scroll to row}\n             */\n            scrollToRow(index) {\n                this.tbodyElement.scrollTop =\n                    index * this.rowsVirtualizer.defaultRowHeight;\n            }\n            /**\n             * Get the widthRatio value from the width in pixels. The widthRatio is\n             * calculated based on the width of the viewport.\n             *\n             * @param width\n             * The width in pixels.\n             *\n             * @return The width ratio.\n             *\n             * @internal\n             */\n            getRatioFromWidth(width) {\n                return width / this.tbodyElement.clientWidth;\n            }\n            /**\n             * Get the width in pixels from the widthRatio value. The width is\n             * calculated based on the width of the viewport.\n             *\n             * @param ratio\n             * The width ratio.\n             *\n             * @returns The width in pixels.\n             *\n             * @internal\n             */\n            getWidthFromRatio(ratio) {\n                return this.tbodyElement.clientWidth * ratio;\n            }\n            /**\n             * Render caption above the datagrid\n             * @internal\n             */\n            renderCaption() {\n                const captionOptions = this.dataGrid.options?.caption;\n                if (!captionOptions?.text) {\n                    return;\n                }\n                this.captionElement = makeHTMLElement('caption', {\n                    innerText: captionOptions.text,\n                    className: Globals.classNames.captionElement\n                }, this.dataGrid.tableElement);\n                if (captionOptions.className) {\n                    this.captionElement.classList.add(...captionOptions.className.split(/\\s+/g));\n                }\n            }\n            /**\n             * Destroys the data grid table.\n             */\n            destroy() {\n                this.tbodyElement.removeEventListener('focus', this.onTBodyFocus);\n                this.tbodyElement.removeEventListener('scroll', this.onScroll);\n                this.resizeObserver.disconnect();\n                this.columnsResizer?.removeEventListeners();\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    this.rows[i].destroy();\n                }\n            }\n            /**\n             * Get the viewport state metadata. It is used to save the state of the\n             * viewport and restore it when the data grid is re-rendered.\n             *\n             * @returns\n             * The viewport state metadata.\n             */\n            getStateMeta() {\n                return {\n                    scrollTop: this.tbodyElement.scrollTop,\n                    scrollLeft: this.tbodyElement.scrollLeft,\n                    columnDistribution: this.columnDistribution,\n                    columnWidths: this.columns.map((column) => column.width),\n                    focusCursor: this.focusCursor\n                };\n            }\n            /**\n             * Apply the metadata to the viewport state. It is used to restore the state\n             * of the viewport when the data grid is re-rendered.\n             *\n             * @param meta\n             * The viewport state metadata.\n             */\n            applyStateMeta(meta) {\n                this.tbodyElement.scrollTop = meta.scrollTop;\n                this.tbodyElement.scrollLeft = meta.scrollLeft;\n                if (this.columnDistribution === meta.columnDistribution &&\n                    this.columns.length === meta.columnWidths.length) {\n                    const widths = meta.columnWidths;\n                    for (let i = 0, iEnd = widths.length; i < iEnd; ++i) {\n                        this.columns[i].width = widths[i];\n                    }\n                    this.reflow();\n                    if (meta.focusCursor) {\n                        const [rowIndex, columnIndex] = meta.focusCursor;\n                        const row = this.rows[rowIndex - this.rows[0].index];\n                        row?.cells[columnIndex]?.htmlElement.focus();\n                    }\n                }\n            }\n            /**\n             * Returns the column with the provided ID.\n             *\n             * @param id\n             * The ID of the column.\n             */\n            getColumn(id) {\n                const columns = this.dataGrid.enabledColumns;\n                if (!columns) {\n                    return;\n                }\n                const columnIndex = columns.indexOf(id);\n                if (columnIndex < 0) {\n                    return;\n                }\n                return this.columns[columnIndex];\n            }\n            /**\n             * Returns the row with the provided ID.\n             *\n             * @param id\n             * The ID of the row.\n             */\n            getRow(id) {\n                return this.rows.find((row) => row.id === id);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Table;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         */\n        class ChainModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            constructor(options, ...chain) {\n                super();\n                this.chain = chain;\n                this.options = merge(ChainModifier.defaultOptions, options);\n                const optionsChain = this.options.chain || [];\n                for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            add(modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            clear(eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            async modify(table, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                let modified = table;\n                for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    try {\n                        await modifiers[i].modify(modified, eventDetail);\n                    }\n                    catch (error) {\n                        this.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        throw error;\n                    }\n                    modified = modified.modified;\n                }\n                table.modified = modified;\n                return table;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            modifyTable(table, eventDetail) {\n                const chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table\n                });\n                const modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                let modified = table.modified;\n                for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table\n                });\n                return table;\n            }\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            remove(modifier, eventDetail) {\n                const modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default option for the ordered modifier chain.\n         */\n        ChainModifier.defaultOptions = {\n            type: 'Chain'\n        };\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         */\n        class SortModifier extends DataModifier {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static ascending(a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            }\n            static descending(a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(SortModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            getRowReferences(table) {\n                const rows = table.getRows(), rowReferences = [];\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n                }\n                if (orderInColumn) {\n                    const column = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns({ [orderInColumn]: column });\n                }\n                else {\n                    const originalIndexes = [];\n                    const rows = [];\n                    let rowReference;\n                    for (let i = 0; i < rowCount; ++i) {\n                        rowReference = rowReferences[i];\n                        originalIndexes.push(modified.getOriginalRowIndex(rowReference.index));\n                        rows.push(rowReference.row);\n                    }\n                    modified.setRows(rows, 0);\n                    modified.setOriginalRowIndexes(originalIndexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options to group table rows.\n         */\n        SortModifier.defaultOptions = {\n            type: 'Sort',\n            direction: 'desc',\n            orderByColumn: 'y'\n        };\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'DataGrid/Querying/SortingController.js', [_modules['Data/Modifiers/SortModifier.js']], function (SortModifier) {\n        /* *\n         *\n         *  DataGrid Sorting Controller class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that manages one of the data grid querying types - sorting.\n         */\n        class SortingController {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs the SortingController instance.\n             *\n             * @param dataGrid\n             * The data grid instance.\n             */\n            constructor(dataGrid) {\n                /**\n                 * The flag that indicates if the data should be updated because of the\n                 * change in the sorting options.\n                 */\n                this.shouldBeUpdated = false;\n                this.dataGrid = dataGrid;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Sets the sorting state. If the new sorting state is different than the\n             * current one, the `shouldBeUpdated` flag is set to `true`. If the\n             * same, the flag is set to `false`.\n             *\n             * @param order\n             * The sorting order.\n             *\n             * @param columnId\n             * The column ID to sort by.\n             */\n            setSorting(order, columnId) {\n                if (this.currentSorting?.columnId !== columnId ||\n                    this.currentSorting?.order !== order) {\n                    this.shouldBeUpdated = true;\n                    this.currentSorting = {\n                        columnId,\n                        order\n                    };\n                }\n                this.modifier = this.createModifier();\n            }\n            /**\n             * Returns the sorting options from the data grid options.\n             */\n            getSortingOptions() {\n                const dataGrid = this.dataGrid, { columnOptionsMap } = dataGrid;\n                if (!columnOptionsMap) {\n                    return { order: null };\n                }\n                const columnIDs = Object.keys(columnOptionsMap);\n                let foundOrder = null;\n                let foundColumnId;\n                for (let i = columnIDs.length - 1; i > -1; --i) {\n                    const columnId = columnIDs[i];\n                    const columnOptions = columnOptionsMap[columnId];\n                    const order = columnOptions.sorting?.order;\n                    if (order) {\n                        if (foundColumnId) {\n                            // eslint-disable-next-line no-console\n                            console.warn('DataGrid: Only one column can be sorted at a time. ' +\n                                'Data will be sorted only by the last found column ' +\n                                `with the sorting order defined in the options: \"${foundColumnId}\".`);\n                            break;\n                        }\n                        foundOrder = order;\n                        foundColumnId = columnId;\n                    }\n                }\n                return {\n                    columnId: foundColumnId,\n                    order: foundOrder\n                };\n            }\n            /**\n             * Loads sorting options from the data grid options.\n             */\n            loadOptions() {\n                const stateFromOptions = this.getSortingOptions();\n                if (stateFromOptions.columnId !== this.initialSorting?.columnId ||\n                    stateFromOptions.order !== this.initialSorting?.order) {\n                    this.initialSorting = stateFromOptions;\n                    this.setSorting(stateFromOptions.order, stateFromOptions.columnId);\n                }\n            }\n            /**\n             * Returns the sorting modifier based on the loaded sorting options.\n             */\n            createModifier() {\n                if (!this.currentSorting) {\n                    return;\n                }\n                const { columnId, order } = this.currentSorting;\n                if (!order) {\n                    return;\n                }\n                return new SortModifier({\n                    orderByColumn: columnId,\n                    direction: order\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortingController;\n    });\n    _registerModule(_modules, 'DataGrid/Querying/QueryingController.js', [_modules['Data/Modifiers/ChainModifier.js'], _modules['DataGrid/Querying/SortingController.js']], function (ChainModifier, SortingController) {\n        /* *\n         *\n         *  DataGrid Querying Controller class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that manage data modification of the visible data in the data grid.\n         * It manages the modifiers that are applied to the data table.\n         */\n        class QueryingController {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(dataGrid) {\n                this.dataGrid = dataGrid;\n                this.sorting = new SortingController(dataGrid);\n                /// this.filtering = new FilteringController(dataGrid);\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Proceeds with the data modification if needed.\n             *\n             * @param force\n             * If the data should be modified even if the significant options are not\n             * changed.\n             */\n            async proceed(force = false) {\n                if (force ||\n                    this.sorting.shouldBeUpdated // ||\n                // this.filtering.shouldBeUpdated\n                ) {\n                    await this.modifyData();\n                }\n            }\n            /**\n             * Load all options needed to generate the modifiers.\n             */\n            loadOptions() {\n                this.sorting.loadOptions();\n            }\n            /**\n             * Check if the data table does not need to be modified.\n             */\n            willNotModify() {\n                return (!this.sorting.modifier\n                // && !this.filtering.modifier\n                );\n            }\n            /**\n             * Apply all modifiers to the data table.\n             */\n            async modifyData() {\n                const originalDataTable = this.dataGrid.dataTable;\n                if (!originalDataTable) {\n                    return;\n                }\n                const modifiers = [];\n                // TODO: Implement filtering\n                // if (this.filtering.modifier) {\n                //     modifiers.push(this.filtering.modifier);\n                // }\n                if (this.sorting.modifier) {\n                    modifiers.push(this.sorting.modifier);\n                }\n                if (modifiers.length > 0) {\n                    const chainModifier = new ChainModifier({}, ...modifiers);\n                    const dataTableCopy = originalDataTable.clone();\n                    await chainModifier.modify(dataTableCopy.modified);\n                    this.dataGrid.presentationTable = dataTableCopy.modified;\n                }\n                else {\n                    this.dataGrid.presentationTable = originalDataTable.modified;\n                }\n                this.sorting.shouldBeUpdated = false;\n                /// this.filtering.shouldBeUpdated = false;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QueryingController;\n    });\n    _registerModule(_modules, 'DataGrid/DataGrid.js', [_modules['DataGrid/Accessibility/Accessibility.js'], _modules['Core/Renderer/HTML/AST.js'], _modules['DataGrid/Credits.js'], _modules['DataGrid/Defaults.js'], _modules['DataGrid/Utils.js'], _modules['Data/DataTable.js'], _modules['DataGrid/Globals.js'], _modules['DataGrid/Table/Table.js'], _modules['Core/Utilities.js'], _modules['DataGrid/Querying/QueryingController.js']], function (Accessibility, AST, Credits, Defaults, DataGridUtils, DataTable, Globals, Table, U, QueryingController) {\n        /* *\n         *\n         *  DataGrid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = DataGridUtils;\n        const { win } = Globals;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Creates a grid structure (table).\n         */\n        class DataGrid {\n            // Implementation\n            static dataGrid(renderTo, options, async) {\n                if (async) {\n                    return new Promise((resolve) => {\n                        void new DataGrid(renderTo, options, (dataGrid) => {\n                            resolve(dataGrid);\n                        });\n                    });\n                }\n                return new DataGrid(renderTo, options);\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a new data grid.\n             *\n             * @param renderTo\n             * The render target (container) of the data grid.\n             *\n             * @param options\n             * The options of the data grid.\n             *\n             * @param afterLoadCallback\n             * The callback that is called after the data grid is loaded.\n             */\n            constructor(renderTo, options, afterLoadCallback) {\n                /**\n                 * The user options declared for the columns as an object of column ID to\n                 * column options.\n                 */\n                this.columnOptionsMap = {};\n                /**\n                 * The options that were declared by the user when creating the data grid\n                 * or when updating it.\n                 */\n                this.userOptions = {};\n                this.loadUserOptions(options);\n                this.querying = new QueryingController(this);\n                this.initContainers(renderTo);\n                this.initAccessibility();\n                this.loadDataTable(this.options?.dataTable);\n                this.querying.loadOptions();\n                void this.querying.proceed().then(() => {\n                    this.renderViewport();\n                    afterLoadCallback?.(this);\n                });\n                DataGrid.dataGrids.push(this);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            /**\n             * Initializes the accessibility controller.\n             */\n            initAccessibility() {\n                if (!this.options?.accessibility?.enabled) {\n                    return;\n                }\n                // Can be moved to a separate module in the future (if needed).\n                this.accessibility = new Accessibility(this);\n            }\n            /**\n             * Initializes the container of the data grid.\n             *\n             * @param renderTo\n             * The render target (html element or id) of the data grid.\n             *\n             */\n            initContainers(renderTo) {\n                const container = (typeof renderTo === 'string') ?\n                    win.document.getElementById(renderTo) : renderTo;\n                // Display an error if the renderTo is wrong\n                if (!container) {\n                    // eslint-disable-next-line no-console\n                    console.error(`\n                        Rendering div not found. It is unable to find the HTML element\n                        to render the DataGrid in.\n                    `);\n                    return;\n                }\n                this.container = container;\n                this.container.innerHTML = AST.emptyHTML;\n                this.contentWrapper = makeHTMLElement('div', {\n                    className: Globals.classNames.container\n                }, this.container);\n            }\n            /**\n             * Loads the new user options to all the important fields (`userOptions`,\n             * `options` and `columnOptionsMap`).\n             *\n             * @param newOptions\n             * The options that were declared by the user.\n             *\n             * @param oneToOne\n             * When `false` (default), the existing column options will be merged with\n             * the ones that are currently defined in the user options. When `true`,\n             * the columns not defined in the new options will be removed.\n             */\n            loadUserOptions(newOptions, oneToOne = false) {\n                // Operate on a copy of the options argument\n                newOptions = merge(newOptions);\n                if (newOptions.columns) {\n                    if (oneToOne) {\n                        this.loadColumnOptionsOneToOne(newOptions.columns);\n                    }\n                    else {\n                        this.loadColumnOptions(newOptions.columns);\n                    }\n                    delete newOptions.columns;\n                }\n                this.userOptions = merge(this.userOptions, newOptions);\n                this.options = merge(this.options ?? Defaults.defaultOptions, this.userOptions);\n                const columnOptionsArray = this.options?.columns;\n                if (!columnOptionsArray) {\n                    return;\n                }\n                const columnOptionsObj = {};\n                for (let i = 0, iEnd = columnOptionsArray?.length ?? 0; i < iEnd; ++i) {\n                    columnOptionsObj[columnOptionsArray[i].id] = columnOptionsArray[i];\n                }\n                this.columnOptionsMap = columnOptionsObj;\n            }\n            /**\n             * Loads the new column options to the userOptions field.\n             *\n             * @param newColumnOptions\n             * The new column options that should be loaded.\n             *\n             * @param overwrite\n             * Whether to overwrite the existing column options with the new ones.\n             * Default is `false`.\n             */\n            loadColumnOptions(newColumnOptions, overwrite = false) {\n                if (!this.userOptions.columns) {\n                    this.userOptions.columns = [];\n                }\n                const columnOptions = this.userOptions.columns;\n                for (let i = 0, iEnd = newColumnOptions.length; i < iEnd; ++i) {\n                    const newOptions = newColumnOptions[i];\n                    const indexInPrevOptions = columnOptions.findIndex((prev) => prev.id === newOptions.id);\n                    // If the new column options contain only the id.\n                    if (Object.keys(newOptions).length < 2) {\n                        if (overwrite && indexInPrevOptions !== -1) {\n                            columnOptions.splice(indexInPrevOptions, 1);\n                        }\n                        continue;\n                    }\n                    if (indexInPrevOptions === -1) {\n                        columnOptions.push(newOptions);\n                    }\n                    else if (overwrite) {\n                        columnOptions[indexInPrevOptions] = newOptions;\n                    }\n                    else {\n                        columnOptions[indexInPrevOptions] = merge(columnOptions[indexInPrevOptions], newOptions);\n                    }\n                }\n                if (columnOptions.length < 1) {\n                    delete this.userOptions.columns;\n                }\n            }\n            /**\n             * Loads the new column options to the userOptions field in a one-to-one\n             * manner. It means that all the columns that are not defined in the new\n             * options will be removed.\n             *\n             * @param newColumnOptions\n             * The new column options that should be loaded.\n             */\n            loadColumnOptionsOneToOne(newColumnOptions) {\n                const prevColumnOptions = this.userOptions.columns;\n                const columnOptions = [];\n                let prevOptions;\n                for (let i = 0, iEnd = newColumnOptions.length; i < iEnd; ++i) {\n                    const newOptions = newColumnOptions[i];\n                    const indexInPrevOptions = prevColumnOptions?.findIndex((prev) => prev.id === newOptions.id);\n                    if (indexInPrevOptions !== void 0 && indexInPrevOptions !== -1) {\n                        prevOptions = prevColumnOptions?.[indexInPrevOptions];\n                    }\n                    const resultOptions = merge(prevOptions ?? {}, newOptions);\n                    if (Object.keys(resultOptions).length > 1) {\n                        columnOptions.push(resultOptions);\n                    }\n                }\n                this.userOptions.columns = columnOptions;\n            }\n            /**\n             * Updates the data grid with new options.\n             *\n             * @param options\n             * The options of the data grid that should be updated. If not provided,\n             * the update will be proceeded based on the `this.userOptions` property.\n             * The `column` options are merged using the `id` property as a key.\n             *\n             * @param render\n             * Whether to re-render the data grid after updating the options.\n             *\n             * @param oneToOne\n             * When `false` (default), the existing column options will be merged with\n             * the ones that are currently defined in the user options. When `true`,\n             * the columns not defined in the new options will be removed.\n             */\n            async update(options = {}, render = true, oneToOne = false) {\n                this.loadUserOptions(options, oneToOne);\n                let newDataTable = false;\n                if (!this.dataTable || options.dataTable) {\n                    this.userOptions.dataTable = options.dataTable;\n                    (this.options ?? {}).dataTable = options.dataTable;\n                    this.loadDataTable(this.options?.dataTable);\n                    newDataTable = true;\n                }\n                this.querying.loadOptions();\n                if (render) {\n                    await this.querying.proceed(newDataTable);\n                    this.renderViewport();\n                }\n            }\n            /**\n             * Updates the column of the data grid with new options.\n             *\n             * @param columnId\n             * The ID of the column that should be updated.\n             *\n             * @param options\n             * The options of the columns that should be updated. If null,\n             * column options for this column ID will be removed.\n             *\n             * @param render\n             * Whether to re-render the data grid after updating the columns.\n             *\n             * @param overwrite\n             * If true, the column options will be updated by replacing the existing\n             * options with the new ones instead of merging them.\n             */\n            async updateColumn(columnId, options, render = true, overwrite = false) {\n                this.loadColumnOptions([{\n                        id: columnId,\n                        ...options\n                    }], overwrite);\n                await this.update(void 0, render);\n            }\n            /**\n             * Hovers the row with the provided index. It removes the hover effect from\n             * the previously hovered row.\n             *\n             * @param rowIndex\n             * The index of the row.\n             */\n            hoverRow(rowIndex) {\n                const rows = this.viewport?.rows;\n                if (!rows) {\n                    return;\n                }\n                const firstRowIndex = this.viewport?.rows[0]?.index ?? 0;\n                if (this.hoveredRowIndex !== void 0) {\n                    rows[this.hoveredRowIndex - firstRowIndex]?.setHoveredState(false);\n                }\n                if (rowIndex !== void 0) {\n                    rows[rowIndex - firstRowIndex]?.setHoveredState(true);\n                }\n                this.hoveredRowIndex = rowIndex;\n            }\n            /**\n             * Hovers the column with the provided ID. It removes the hover effect from\n             * the previously hovered column.\n             *\n             * @param columnId\n             * The ID of the column.\n             */\n            hoverColumn(columnId) {\n                const vp = this.viewport;\n                if (!vp) {\n                    return;\n                }\n                if (this.hoveredColumnId) {\n                    vp.getColumn(this.hoveredColumnId)?.setHoveredState(false);\n                }\n                if (columnId) {\n                    vp.getColumn(columnId)?.setHoveredState(true);\n                }\n                this.hoveredColumnId = columnId;\n            }\n            /**\n             * Renders the viewport of the data grid. If the data grid is already\n             * rendered, it will be destroyed and re-rendered with the new data.\n             * @internal\n             */\n            renderViewport() {\n                let vp = this.viewport;\n                const viewportMeta = vp?.getStateMeta();\n                this.enabledColumns = this.getEnabledColumnIDs();\n                this.credits?.destroy();\n                vp?.destroy();\n                if (this.contentWrapper) {\n                    this.contentWrapper.innerHTML = AST.emptyHTML;\n                }\n                if (this.enabledColumns.length > 0) {\n                    this.renderTable();\n                    vp = this.viewport;\n                    if (viewportMeta && vp) {\n                        vp.applyStateMeta(viewportMeta);\n                    }\n                }\n                else {\n                    this.renderNoData();\n                }\n                if (this.options?.credits?.enabled) {\n                    this.credits = new Credits(this);\n                }\n                this.viewport?.reflow();\n            }\n            /**\n             * Renders the table (viewport) of the data grid.\n             */\n            renderTable() {\n                this.tableElement = makeHTMLElement('table', {\n                    className: Globals.classNames.tableElement\n                }, this.contentWrapper);\n                this.viewport = new Table(this, this.tableElement);\n                // Accessibility\n                this.tableElement.setAttribute('aria-rowcount', this.dataTable?.getRowCount() ?? 0);\n            }\n            /**\n             * Renders a message that there is no data to display.\n             */\n            renderNoData() {\n                makeHTMLElement('div', {\n                    className: Globals.classNames.noData,\n                    innerText: this.options?.lang?.noData\n                }, this.contentWrapper);\n            }\n            /**\n             * Returns the array of IDs of columns that should be displayed in the data\n             * grid, in the correct order.\n             */\n            getEnabledColumnIDs() {\n                const { columnOptionsMap } = this;\n                const header = this.options?.header;\n                const headerColumns = this.getColumnIds(header || [], false);\n                const columnsIncluded = this.options?.rendering?.columns?.included || (headerColumns && headerColumns.length > 0 ?\n                    headerColumns : this.dataTable?.getColumnNames());\n                if (!columnsIncluded?.length) {\n                    return [];\n                }\n                if (!columnOptionsMap) {\n                    return columnsIncluded;\n                }\n                let columnName;\n                const result = [];\n                for (let i = 0, iEnd = columnsIncluded.length; i < iEnd; ++i) {\n                    columnName = columnsIncluded[i];\n                    if (columnOptionsMap?.[columnName]?.enabled !== false) {\n                        result.push(columnName);\n                    }\n                }\n                return result;\n            }\n            loadDataTable(tableOptions) {\n                // If the table is passed as a reference, it should be used instead of\n                // creating a new one.\n                if (tableOptions?.id) {\n                    this.dataTable = tableOptions;\n                    this.presentationTable = this.dataTable.modified;\n                    return;\n                }\n                this.dataTable = this.presentationTable =\n                    new DataTable(tableOptions);\n            }\n            /**\n             * Extracts all references to columnIds on all levels below defined level\n             * in the settings.header structure.\n             *\n             * @param columns\n             * Structure that we start calculation\n             *\n             * @param [onlyEnabledColumns=true]\n             * Extract all columns from header or columns filtered by enabled param\n             * @returns\n             */\n            getColumnIds(columns, onlyEnabledColumns = true) {\n                let columnIds = [];\n                const { enabledColumns } = this;\n                for (const column of columns) {\n                    const columnId = typeof column === 'string' ? column : column.columnId;\n                    if (columnId &&\n                        (!onlyEnabledColumns || (enabledColumns?.includes(columnId)))) {\n                        columnIds.push(columnId);\n                    }\n                    if (typeof column !== 'string' && column.columns) {\n                        columnIds = columnIds.concat(this.getColumnIds(column.columns, onlyEnabledColumns));\n                    }\n                }\n                return columnIds;\n            }\n            /**\n             * Destroys the data grid.\n             */\n            destroy() {\n                const dgIndex = DataGrid.dataGrids.findIndex((dg) => dg === this);\n                this.viewport?.destroy();\n                if (this.container) {\n                    this.container.innerHTML = AST.emptyHTML;\n                    this.container.classList.remove(Globals.classNames.container);\n                }\n                // Clear all properties\n                Object.keys(this).forEach((key) => {\n                    delete this[key];\n                });\n                DataGrid.dataGrids.splice(dgIndex, 1);\n            }\n            /**\n             * Returns the current dataGrid data as a JSON string.\n             *\n             * @return\n             * JSON representation of the data\n             */\n            getJSON() {\n                const json = this.viewport?.dataTable.modified.columns;\n                if (!this.enabledColumns || !json) {\n                    return '{}';\n                }\n                for (const key of Object.keys(json)) {\n                    if (this.enabledColumns.indexOf(key) === -1) {\n                        delete json[key];\n                    }\n                }\n                return JSON.stringify(json);\n            }\n            /**\n             * Returns the current DataGrid options as a JSON string.\n             *\n             * @param onlyUserOptions\n             * Whether to return only the user options or all options (user options\n             * merged with the default ones). Default is `true`.\n             *\n             * @returns\n             * Options as a JSON string.\n             */\n            getOptionsJSON(onlyUserOptions = true) {\n                const optionsCopy = onlyUserOptions ? merge(this.userOptions) : merge(this.options);\n                if (optionsCopy.dataTable?.id) {\n                    optionsCopy.dataTable = {\n                        columns: optionsCopy.dataTable.columns\n                    };\n                }\n                return JSON.stringify(optionsCopy);\n            }\n        }\n        /* *\n        *\n        *  Properties\n        *\n        * */\n        /**\n         * An array containing the current DataGrid objects in the page.\n         */\n        DataGrid.dataGrids = [];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGrid;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        class DataPool {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = DataPoolDefaults) {\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                U.fireEvent(this, e.type, e);\n            }\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            getConnector(connectorId) {\n                const connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                let waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    const connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(`Connector '${connectorId}' not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then((connector) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch']((error) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise((resolve, reject) => {\n                    waitingList.push([resolve, reject]);\n                });\n            }\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            getConnectorIds() {\n                const connectors = this.options.connectors, connectorIds = [];\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            }\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            getConnectorOptions(connectorId) {\n                const connectors = this.options.connectors;\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            }\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            getConnectorTable(connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then((connector) => connector.table);\n            }\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            isNewConnector(connectorId) {\n                return !this.connectors[connectorId];\n            }\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            loadConnector(options) {\n                return new Promise((resolve, reject) => {\n                    this.emit({\n                        type: 'load',\n                        options\n                    });\n                    const ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(`Connector type not found. (${options.type})`);\n                    }\n                    const connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then((connector) => {\n                        this.connectors[options.id] = connector;\n                        this.emit({\n                            type: 'afterLoad',\n                            options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return U.addEvent(this, type, callback);\n            }\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            setConnectorOptions(options) {\n                const connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options\n                });\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataPool class.\n         * @internal\n         */\n        DataPool.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Accessibility/HighContrastMode.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Handling for Windows High Contrast Mode.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { doc, isMS, win } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Detect WHCM in the browser.\n         *\n         * @function Highcharts#isHighContrastModeActive\n         * @private\n         * @return {boolean} Returns true if the browser is in High Contrast mode.\n         */\n        function isHighContrastModeActive() {\n            // Use media query on Edge, but not on IE\n            const isEdge = /(Edg)/.test(win.navigator.userAgent);\n            if (win.matchMedia && isEdge) {\n                return win.matchMedia('(-ms-high-contrast: active)').matches;\n            }\n            // Test BG image for IE\n            if (isMS && win.getComputedStyle) {\n                const testDiv = doc.createElement('div');\n                const imageSrc = 'data:image/gif;base64,' +\n                    'R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==';\n                testDiv.style.backgroundImage = `url(${imageSrc})`; // #13071\n                doc.body.appendChild(testDiv);\n                const bi = (testDiv.currentStyle ||\n                    win.getComputedStyle(testDiv)).backgroundImage;\n                doc.body.removeChild(testDiv);\n                return bi === 'none';\n            }\n            // Other browsers use the forced-colors standard\n            return win.matchMedia && win.matchMedia('(forced-colors: active)').matches;\n        }\n        /**\n         * Force high contrast theme for the chart. The default theme is defined in\n         * a separate file.\n         *\n         * @function Highcharts#setHighContrastTheme\n         * @private\n         * @param {Highcharts.AccessibilityChart} chart The chart to set the theme of.\n         * @return {void}\n         */\n        function setHighContrastTheme(chart) {\n            // We might want to add additional functionality here in the future for\n            // storing the old state so that we can reset the theme if HC mode is\n            // disabled. For now, the user will have to reload the page.\n            chart.highContrastModeActive = true;\n            // Apply theme to chart\n            const theme = (chart.options.accessibility.highContrastTheme);\n            chart.update(theme, false);\n            const hasCustomColors = theme.colors?.length > 1;\n            // Force series colors (plotOptions is not enough)\n            chart.series.forEach(function (s) {\n                const plotOpts = theme.plotOptions[s.type] || {};\n                const fillColor = hasCustomColors && s.colorIndex !== void 0 ?\n                    theme.colors[s.colorIndex] :\n                    plotOpts.color || 'window';\n                const seriesOptions = {\n                    color: plotOpts.color || 'windowText',\n                    colors: hasCustomColors ?\n                        theme.colors : [plotOpts.color || 'windowText'],\n                    borderColor: plotOpts.borderColor || 'window',\n                    fillColor\n                };\n                s.update(seriesOptions, false);\n                if (s.points) {\n                    // Force point colors if existing\n                    s.points.forEach(function (p) {\n                        if (p.options && p.options.color) {\n                            p.update({\n                                color: plotOpts.color || 'windowText',\n                                borderColor: plotOpts.borderColor || 'window'\n                            }, false);\n                        }\n                    });\n                }\n            });\n            // The redraw for each series and after is required for 3D pie\n            // (workaround)\n            chart.redraw();\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const whcm = {\n            isHighContrastModeActive,\n            setHighContrastTheme\n        };\n\n        return whcm;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        class CSVConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            export(connector, options = this.options) {\n                const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n                let { decimalPoint, itemDelimiter } = options;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    const columnMeta = connector.whatIs(columnName);\n                    let columnDataType;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = `\"${cellValue}\"`;\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            let i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                const cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            }\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n                let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (let i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    let offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                let cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Internal method that parses a single CSV row\n             */\n            parseCSVRow(columnStr, rowNumber) {\n                const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                let { decimalPoint } = converter.options;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                let i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                const read = (j) => {\n                    c = columnStr[j];\n                };\n                const pushType = (type) => {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                const push = () => {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        const initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[A-F\\d]{3,3}|[A-F\\d]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            }\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            guessDelimiter(lines) {\n                let points = 0, commas = 0, guessed;\n                const potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (let i = 0; i < linesCount; i++) {\n                    let inStr = false, c, cn, cl, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    const columnStr = lines[i];\n                    for (let j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        CSVConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            lineDelimiter: '\\n'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        class CSVConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new CSVConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { csv, csvURL, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    csv,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then((response) => response.text()) :\n                    csv || '')\n                    .then((csv) => {\n                    if (csv) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(() => csv);\n                })\n                    .then((csv) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CSVConnector.defaultOptions = {\n            csv: '',\n            csvURL: '',\n            enablePolling: false,\n            dataRefreshRate: 1,\n            firstRowAsNames: true\n        };\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        class GoogleSheetsConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.header = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, parseOptions = merge(converter.options, options);\n                let columns = ((parseOptions.json?.values) || []).map((column) => column.slice());\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                // If beforeParse is defined, use it to modify the data\n                const { beforeParse, json } = parseOptions;\n                if (beforeParse && json) {\n                    columns = beforeParse(json.values);\n                }\n                let column;\n                converter.columns = columns;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        `${column.shift()}` :\n                        uniqueKey());\n                    for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            let cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        GoogleSheetsConverter.defaultOptions = {\n            ...DataConverter.defaultOptions\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *  - Jomar Hønsi\n         *\n         * */\n        const { merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        class GoogleSheetsConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new GoogleSheetsConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, dataRefreshRate, enablePolling, firstRowAsNames, googleAPIKey, googleSpreadsheetKey } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    url\n                });\n                if (!URL.canParse(url)) {\n                    throw new Error('Invalid URL: ' + url);\n                }\n                return fetch(url)\n                    .then((response) => (response.json()))\n                    .then((json) => {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames,\n                        json\n                    });\n                    // If already loaded, clear the current table\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GoogleSheetsConnector.defaultOptions = {\n            googleAPIKey: '',\n            googleSpreadsheetKey: '',\n            enablePolling: false,\n            dataRefreshRate: 2,\n            firstRowAsNames: true\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options = {}) {\n                const url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/`);\n                const range = options.onlyColumnNames ?\n                    'A1:Z1' : buildQueryRange(options);\n                url.pathname += range;\n                const searchParams = url.searchParams;\n                searchParams.set('alt', 'json');\n                if (!options.onlyColumnNames) {\n                    searchParams.set('dateTimeRenderOption', 'FORMATTED_STRING');\n                    searchParams.set('majorDimension', 'COLUMNS');\n                    searchParams.set('valueRenderOption', 'UNFORMATTED_VALUE');\n                }\n                searchParams.set('prettyPrint', 'false');\n                searchParams.set('key', apiKey);\n                return url.href;\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options = {}) {\n                const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            let i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        class HTMLTableConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    this.tableElement = mergedOptions.tableElement;\n                    this.tableElementID = mergedOptions.tableElement.id;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            export(connector, options = this.options) {\n                const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                let tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    const subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (const name of columnNames) {\n                            const subhead = (columns[name].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                let caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            }\n            /**\n             * Get table cell markup from row data.\n             */\n            getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n                let val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            }\n            /**\n             * Get table header markup from row data.\n             */\n            getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n                const { useMultiLevelHeaders, useRowspanHeaders } = options;\n                let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            }\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            parse(options, eventDetail) {\n                const converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns,\n                        detail: eventDetail,\n                        headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                let rowIndex = 0, item, { startRow } = parseOptions;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    const items = rows[0].children, itemsLength = items.length;\n                    for (let i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        let columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                let cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                let i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns,\n                    detail: eventDetail,\n                    headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        HTMLTableConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            useRowspanHeaders: true,\n            useMultiLevelHeaders: true\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { win } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        class HTMLTableConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new HTMLTableConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    tableElement: connector.tableElement\n                });\n                let tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    const error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HTMLTableConnector.defaultOptions = {\n            table: ''\n        };\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { error, isArray, merge, objectEach } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        class JSONConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                this.table = new DataTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this;\n                options = merge(converter.options, options);\n                const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n                let data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                        const item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(`${item.shift()}`);\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        let row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            const columnNames = converter.headers;\n                            if (columnNames && !(columnNames instanceof Array)) {\n                                const newRow = {};\n                                objectEach(columnNames, (arrayWithPath, name) => {\n                                    newRow[name] = arrayWithPath.reduce((acc, key) => acc[key], row);\n                                });\n                                row = newRow;\n                            }\n                            this.table.setRows([row], rowIndex);\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return this.table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        JSONConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            data: [],\n            orientation: 'rows'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        class JSONConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new JSONConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { data, dataUrl, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    data,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then((json) => json.json()) :\n                    data || [])\n                    .then((data) => {\n                    if (data) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ data });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector.setModifierOptions(dataModifier).then(() => data);\n                })\n                    .then((data) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        JSONConnector.defaultOptions = {\n            data: [],\n            enablePolling: false,\n            dataRefreshRate: 0,\n            firstRowAsNames: true,\n            orientation: 'rows'\n        };\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        class InvertModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(InvertModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(`${i2}`, row);\n                    }\n                    else {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            }\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    const columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map((column) => `${column}`), columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    const columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[`${i}`] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the invert modifier.\n         */\n        InvertModifier.defaultOptions = {\n            type: 'Invert'\n        };\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         */\n        class RangeModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(RangeModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                let indexes = [];\n                const { additive, ranges, strict } = modifier.options;\n                if (ranges.length) {\n                    const modified = table.modified;\n                    let columns = table.getColumns(), rows = [];\n                    for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            modified.setOriginalRowIndexes(indexes, true);\n                            columns = modified.getColumns();\n                            rows = [];\n                            indexes = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (let j = 0, jEnd = rangeColumn.length, cell, row, originalRowIndex; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                if (additive) {\n                                    row = table.getRow(j);\n                                    originalRowIndex = table.getOriginalRowIndex(j);\n                                }\n                                else {\n                                    row = modified.getRow(j);\n                                    originalRowIndex = modified.getOriginalRowIndex(j);\n                                }\n                                if (row) {\n                                    rows.push(row);\n                                    indexes.push(originalRowIndex);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                    modified.setOriginalRowIndexes(indexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the range modifier.\n         */\n        RangeModifier.defaultOptions = {\n            type: 'Range',\n            ranges: []\n        };\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'masters/datagrid.src.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataCursor.js'], _modules['DataGrid/DataGrid.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataPool.js'], _modules['Data/DataTable.js'], _modules['DataGrid/Defaults.js'], _modules['DataGrid/Globals.js'], _modules['Accessibility/HighContrastMode.js']], function (AST, DataConnector, DataConverter, DataCursor, _DataGrid, DataModifier, DataPool, DataTable, Defaults, Globals, whcm) {\n\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        // Fill registries\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.AST = AST;\n        G.DataConnector = DataConnector;\n        G.DataCursor = DataCursor;\n        G.DataConverter = DataConverter;\n        G.DataGrid = _DataGrid;\n        G.dataGrid = _DataGrid.dataGrid;\n        G.dataGrids = _DataGrid.dataGrids;\n        G.DataModifier = DataModifier;\n        G.DataPool = DataPool;\n        G.DataTable = DataTable;\n        G.defaultOptions = Defaults.defaultOptions;\n        G.setOptions = Defaults.setOptions;\n        G.isHighContrastModeActive = whcm.isHighContrastModeActive;\n        /* *\n         *\n         *  Classic Export\n         *\n         * */\n        if (!G.win.DataGrid) {\n            G.win.DataGrid = G;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n    _modules['masters/datagrid.src.js']._modules = _modules;\n    return _modules['masters/datagrid.src.js'];\n}));"],"names":["root","factory","module","exports","document","define","amd","DataGrid","error","window","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","dispatchEvent","detail","Globals","SVG_NS","product","version","win","doc","svg","createElementNS","createSVGRect","userAgent","navigator","isChrome","chrome","isFirefox","indexOf","isMS","test","opera","isSafari","isTouchDevice","isWebKit","deg2rad","Math","PI","marginNames","noop","supportsPassiveEvents","supportsPassive","opts","Object","defineProperty","get","addEventListener","removeEventListener","charts","composed","dateFormats","seriesTypes","symbolSizes","chartCount","H","serialMode","code","stop","chart","params","severity","isCode","isNumber","message","toString","additionalMessages","objectEach","value","key","encodeURI","fireEvent","Error","console","messages","warn","push","pInt","s","mag","parseInt","isString","isArray","str","prototype","call","isObject","strict","isDOMElement","nodeType","isClass","c","constructor","name","n","isNaN","Infinity","defined","attr","elem","keyOrAttribs","ret","isGetter","attrSingle","setAttribute","getAttribute","removeAttribute","splat","extend","a","b","pick","arguments","length","i","arg","css","el","styles","style","getMagnitude","num","pow","floor","log","LN10","correctFloat","prec","parseFloat","toPrecision","easeInOutSine","pos","cos","find","Array","arr","callback","ctx","removeEvent","type","removeOneEvent","removeAllEvents","eventCollection","types","len","nodeName","_val","owner","events","hcEvents","typeEvents","filter","eventArguments","defaultFunction","createEvent","e","initEvent","target","preventDefault","defaultPrevented","object","multilevel","unshift","getPrototypeOf","sort","order","forEach","uniqueKey","hash","random","substring","id","jQuery","highcharts","slice","shift","addEvent","options","Point","series","runTrackerClick","passive","capture","eventObject","arrayMax","data","max","arrayMin","min","clamp","clearTimeout","createElement","tag","attribs","parent","nopad","padding","border","margin","appendChild","crisp","lineWidth","inverted","mod","inverter","round","destroyObjectProperties","except","destructablesOnly","val","destroy","diffObjects","newer","older","keepOlder","collectionsWithUpdate","diff","depth","keeper","newerVal","keys","discardElement","element","parentElement","removeChild","erase","item","splice","extendClass","members","getAlignFactor","align","center","right","middle","bottom","getClosestDistance","arrays","onError","closest","loopLength","distance","allowNegative","xData","getNestedProperty","pathElements","split","pathElement","thisProp","child","getStyle","prop","toInt","offsetWidth","scrollWidth","boundingClientRectWidth","getBoundingClientRect","width","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","insertItem","collection","indexOption","index","isInternal","_i","isFunction","merge","extendOrSource","sources","doCopy","copy","original","normalizeTickInterval","interval","multiples","magnitude","allowDecimals","hasTickAmount","retInterval","normalized","offset","docElem","documentElement","box","parentNode","top","left","height","pageYOffset","scrollTop","clientTop","pageXOffset","scrollLeft","clientLeft","pad","number","padder","String","replace","join","pushUnique","array","relativeLength","base","replaceNested","text","replacements","previous","replacement","stableSort","sortFunction","sortValue","safeI","syncTimeout","delay","context","setTimeout","timeUnits","millisecond","second","minute","hour","day","week","month","year","ucfirst","toUpperCase","useSerialIds","mode","wrap","method","func","proceed","outerArgs","scope","concat","U","trustedTypes","trustedTypesPolicy","createPolicy","createHTML","emptyHTML","AST","filterUserAttributes","attributes","valid","allowedAttributes","allowedReferences","some","ref","parseStyle","reduce","line","pair","map","trim","g","setElementHTML","html","innerHTML","ast","addToDOM","source","nodes","parseMarkup","recurse","subtree","subParent","node","tagName","textNode","textContent","createTextNode","bypassHTMLFiltering","allowedTags","NS","namespaceURI","children","markup","DOMParser","parseFromString","body","appendChildNodes","addTo","toLowerCase","astNode","parsedAttributes","attrib","childNodes","childNode","DataModifier","benchmark","dataTable","results","modifier","execute","modifyTable","emit","iterations","on","times","startTime","endTime","performance","now","modify","table","eventDetail","Promise","resolve","reject","modified","clone","modifyCell","columnName","rowIndex","cellValue","modifyColumns","columns","modifyRows","rows","registerType","DataModifierClass","autoId","rowCount","versionTag","column","applyRowCount","getColumn","asReference","getColumns","columnNames","getRow","setColumn","setColumns","silent","setRow","row","insert","indexRowCount","addColumns","DataTableCore","DataTable","isNull","NULL","iEnd","skipColumns","tableOptions","tableClone","originalRowIndexes","localRowIndexes","deleteColumns","deletedColumns","modifiedColumns","deleteRowIndexReferences","deleteRows","deletedRows","modifiedRows","deletedCells","j","jEnd","includes","getCell","getCellAsBoolean","getCellAsNumber","useNaN","getCellAsString","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","tableColumns","getLocalRowIndex","originalRowIndex","getModifier","getOriginalRowIndex","getRows","getRowCount","getRowIndexBy","rowIndexOffset","getRowObject","getRowObjects","i2","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","setCell","tableModifier","tableColumn","setModifier","promise","then","setOriginalRowIndexes","omitLocalRowIndexes","modifiedIndexes","originalIndex","setRows","DataConnector","metadata","polling","describeColumn","columnMeta","connector","describeColumns","pop","getColumnOrder","usePresentationState","names","getSortedColumns","usePresentationOrder","load","save","setColumnOrder","setModifierOptions","modifierOptions","ModifierClass","startPolling","refreshTime","_polling","stopPolling","whatIs","DataConnectorClass","DataConverter","regex","parser","match","Date","UTC","NaN","alternative","d","getFullYear","mergedOptions","defaultOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","typeMap","converter","guessType","decimalRegex","getDate","deduceDateFormat","limit","stable","format","thing","guessedFormat","madeDeduction","dateFormat","export","headers","getTable","result","trimedValue","innerTrimedValue","floatValue","parse","dateFormatProp","getTime","getTimezoneOffset","inside","alternativeFormat","startColumn","endColumn","Number","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","listeners","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","event","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","range","needle","columnNeedle","JSON","stringify","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","classNamePrefix","classNames","container","tableElement","captionElement","theadElement","tbodyElement","rowElement","rowEven","rowOdd","hoveredRow","columnElement","hoveredCell","hoveredColumn","editedCell","rowsContentNowrap","headerCell","headerCellContent","headerRow","noData","columnFirst","columnSortable","columnSortableIcon","columnSortedAsc","columnSortedDesc","resizerHandles","resizedColumn","creditsContainer","creditsText","visuallyHidden","DataGridUtils","makeHTMLElement","paramsKeys","assign","makeDiv","className","getTranslateY","transform","isHTML","sanitizeText","DGUtils","dataGrid","classList","add","prepend","announcerElement","addEditableCellHint","cellElement","editableLang","lang","accessibility","cellEditing","editable","innerText","addHeaderCellDescription","thElement","description","announce","msg","assertive","announcerTimeout","remove","userSortedColumn","announcementsLang","sorting","announcements","ascending","descending","none","userEditedCell","msgType","setColumnSortState","setRowIndex","idx","credits","containerElement","textElement","render","setContent","href","appendToContainer","position","contentWrapper","update","enabled","viewport","reflow","getHeight","Utils","Defaults","started","edited","cancelled","rendering","distribution","bufferSize","strictHeights","header","columnDefaults","sortable","resizing","setOptions","alignThresholds","panning","styledMode","borderRadius","colorCount","allowMutatingData","ignoreHiddenSeries","spacing","resetZoomButton","theme","zooming","singleTouch","resetButton","zIndex","x","y","borderColor","backgroundColor","plotBorderColor","colors","hasOldSafariBug","Intl","DateTimeFormat","formatRange","isDateTimeFormatOptions","main","spanishWeekdayIndex","weekday","variableTimezone","timezone","dTLCache","timezoneOffset","useUTC","isMonth","isShort","timeZone","toParts","dayOfMonth","hours","minutes","seconds","dateTimeFormat","locale","cacheKey","str2dtf","dTL","dtf","mapping","L","fractionalSecondDigits","S","M","k","E","A","B","m","o","Y","makeTime","date","milliseconds","newOffset","hasTimezone","isYYYYMMDD","ts","gmt","colon","timeZoneName","upperCaseFirst","invalidDate","localeAwareRegex","exec","time","fullYear","langWeekdays","weekdays","shortWeekdays","months","shortMonths","substr","w","I","l","p","P","tzHours","prefix","suffix","resolveDTLFormat","f","from","to","getTimeTicks","normalizedInterval","startOfWeek","tickPositions","higherRanks","count","unitRange","variableDayLength","weekdayNo","t","info","totalRange","getDateFormat","dateTimeLabelFormats","dateStr","blank","strpos","lastN","ChartDefaults","Palettes","Time","symbols","loading","numericSymbols","resetZoom","resetZoomTitle","global","buttonTheme","fill","r","stroke","color","fontSize","fontWeight","states","hover","select","disabled","title","minScale","subtitle","caption","verticalAlign","plotOptions","legend","alignColumns","layout","itemMarginBottom","itemMarginTop","labelFormatter","navigation","activeColor","inactiveColor","itemStyle","textDecoration","textOverflow","itemHoverStyle","itemHiddenStyle","shadow","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","opacity","textAlign","tooltip","animation","duration","easing","sqrt","footerFormat","headerShape","hideDelay","shape","shared","snap","headerFormat","pointFormat","borderWidth","stickOnContact","useHTML","defaultTime","getOptions","D","G","helpers","divide","eq","each","ge","gt","condition","le","lt","multiply","ne","subtract","unless","numberFormatCache","subRegex","matches","floatRegex","decRegex","numberFormatter","numberFormat","resolveProperty","currentMatch","hasSub","mainMatch","subMatch","isBlock","expression","charAt","start","startInner","startingElseSection","elseBody","parts","startChar","char","valueAndFormat","segment","decimals","thousandsSep","fractionDigits","mantissa","exp","origDec","firstDecimals","toExponential","toFixed","minimumFractionDigits","maximumFractionDigits","useGrouping","hasSeparators","nf","NumberFormat","Templating","Column","cells","columnOptionsMap","getInitialWidth","loadData","registerCell","cell","htmlElement","hoveredColumnId","unregisterCell","getWidth","vp","columnDistribution","getWidthFromRatio","setHoveredState","hovered","mock","getInitialFullDistWidth","columnsCount","enabledColumns","getRatioFromWidth","allPreviousWidths","template","MIN_COLUMN_WIDTH","createCell","rowsWidth","destroyed","columnId","cellEvents","init","initEvents","onBlur","onFocus","onClick","onKeyDown","focusAnchor","rowsVirtualizer","focusAnchorCell","focusCursor","dir","changeFocusKeys","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","stopPropagation","nextVerticalDir","localRowIndex","focus","nextRow","elementStyle","maxWidth","setCustomClassName","customClassName","newClassName","renderHTMLCellContent","cellContent","formattedNodes","headerCellElement","toggle","sortingController","querying","currentOrder","currentSorting","setOrder","consequents","asc","desc","addHeaderElementAttributes","col","a11y","sortingOptions","setSorting","loadPresentationData","afterSorting","Cell","ColumnSorting","Utilities","isMain","headerCellOptions","formatter","headerContent","columnsResizer","renderColumnDragHandles","initColumnSorting","th","click","Row","HeaderCell","level","setRowAttributes","renderMultipleLevel","columnsOnLevel","getColumnsAtLevel","colSpan","getColumnIds","dataColumn","levels","targetLevel","currentLevel","HeaderRow","getRowLevels","clientWidth","tableEl","theadEL","bordersWidth","cellHtmlElement","maxDepth","scrollHorizontally","setValue","onDblClick","onMouseOut","onMouseOver","onMouseDown","hoverRow","hoverColumn","mouseOver","mouseOut","startEditing","dblClick","updateTable","focusedRowId","formatCell","afterSetValue","originalDataTable","rowTableIndex","willNotModify","newRowIndex","TableCell","hoveredRowIndex","getDefaultTopOffset","defaultRowHeight","TableRow","rowCursor","preventScroll","rowSettings","strictRowHeights","buffer","getDefaultRowHeight","initialRender","renderRows","adjustRowHeights","rerender","oldScrollTop","tbody","scroll","rowHeight","lastScrollTop","adjustBottomRowHeights","rowsLn","rowTop","rowBottom","newHeight","rowsPerPage","ceil","last","alwaysLastRow","newRow","insertBefore","lastChild","columnIndex","firstVisibleRow","defaultH","translateBuffer","cellHeight","preLastRow","reflowRows","mockRow","handles","onDocumentMouseMove","draggedResizeHandle","draggedColumn","pageX","dragStartX","fullDistributionResize","fixedDistributionResize","afterResize","onDocumentMouseUp","columnStartWidth","nextColumnStartWidth","nextColumn","leftColW","rightColW","MIN_WIDTH","newLeftW","newRightW","handle","addHandleListeners","colW","newW","onHandleMouseDown","removeEventListeners","onInputBlur","stopEditing","onInputKeyDown","keyCode","renderInput","submit","input","inputElement","newValue","destroyInput","afterEdit","cellEl","TableHeader","RowsVirtualizer","ColumnsResizer","CellEditing","onTBodyFocus","onResize","onScroll","presentationTable","dgOptions","renderCaption","resizeObserver","ResizeObserver","observe","loadColumns","minHeight","clientHeight","scrollToRow","ratio","captionOptions","disconnect","getStateMeta","columnWidths","applyStateMeta","meta","widths","ChainModifier","chain","optionsChain","clear","modifiers","reverse","SortModifier","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","rowReference","originalIndexes","shouldBeUpdated","createModifier","getSortingOptions","foundColumnId","columnIDs","foundOrder","columnOptions","loadOptions","stateFromOptions","initialSorting","SortingController","force","modifyData","chainModifier","dataTableCopy","Accessibility","Credits","Table","QueryingController","renderTo","async","afterLoadCallback","userOptions","loadUserOptions","initContainers","initAccessibility","loadDataTable","renderViewport","dataGrids","getElementById","newOptions","oneToOne","loadColumnOptionsOneToOne","loadColumnOptions","columnOptionsArray","columnOptionsObj","newColumnOptions","overwrite","indexInPrevOptions","findIndex","prev","prevOptions","prevColumnOptions","resultOptions","newDataTable","updateColumn","firstRowIndex","viewportMeta","getEnabledColumnIDs","renderTable","renderNoData","headerColumns","columnsIncluded","included","onlyEnabledColumns","columnIds","dgIndex","dg","getJSON","json","getOptionsJSON","onlyUserOptions","optionsCopy","connectors","DataPoolDefaults","DataPool","waiting","getConnector","connectorId","waitingList","connectorOptions","getConnectorOptions","loadConnector","getConnectorIds","connectorIds","getConnectorTable","isNewConnector","ConnectorClass","setConnectorOptions","instances","isHighContrastModeActive","isEdge","matchMedia","testDiv","backgroundImage","bi","currentStyle","setHighContrastTheme","highContrastModeActive","highContrastTheme","hasCustomColors","plotOpts","fillColor","colorIndex","seriesOptions","points","redraw","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","csvRows","rowArray","columnDataType","dataType","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","token","actualColumn","read","pushType","isFinite","initialValue","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","GoogleSheetsConverter","parseOptions","values","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","URL","canParse","status","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","pathname","searchParams","set","HTMLTableConverter","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","tableCaption","classes","attrs","topheaders","subheaders","useRowspanHeaders","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","HTMLElement","getElementsByTagName","rowsCount","items","itemsLength","columnsInRow","columnsInRowLength","relativeColumnIndex","HTMLTableConnector","tableID","JSONConverter","orientation","arrayWithPath","acc","JSONConnector","dataUrl","InvertModifier","modifiedRowIndex","modifiedColumnNames","reset","j2","RangeModifier","indexes","additive","ranges","rangeColumn","minValue","maxValue","_DataGrid","whcm"],"mappings":"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f,EAEA,MADA,EAAE,CAAC/N,OAAO,CAACjF,IAAI,CAACjE,EAAI6W,IAAI,CAACO,UAAU,CAAE,AAACC,GAAcP,EAAiBO,EAAW1B,IACzEA,CACX,CACJ,CA2QA,OAtPArB,EAAII,iBAAiB,CAAG,CACpB,MACA,gBACA,mBACA,gBACA,gBACA,cACA,aACA,kBACA,YACA,eACA,gBACA,uBACA,gBACA,QACA,YACA,QACA,UACA,KACA,KACA,IACA,KACA,KACA,WACA,OACA,cACA,cACA,gBACA,SACA,OACA,KACA,KACA,MACA,eACA,cACA,SACA,UACA,WACA,SACA,UACA,cACA,eACA,eACA,IACA,SACA,OACA,OACA,OACA,QACA,QACA,MACA,cACA,eACA,SACA,iBACA,eACA,QACA,cACA,SACA,UACA,UACA,SACA,WACA,aACA,cACA,aACA,aACA,QACA,OACA,SACA,QACA,IACA,KACA,KACA,aACA,IACA,KACA,KACA,SACH,CAgBDJ,EAAIK,iBAAiB,CAAG,CACpB,WACA,UACA,UACA,IACA,MACA,KACA,IACH,CAeDL,EAAIgC,WAAW,CAAG,CACd,IACA,OACA,IACA,KACA,SACA,UACA,SACA,WACA,OACA,KACA,OACA,MACA,KACA,KACA,KACA,sBACA,cACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,eACA,WACA,UACA,cACA,SACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,KACA,iBACA,SACA,KACA,IACA,OACA,UACA,MACA,OACA,QACA,OACA,OACA,SACA,QACA,MACA,MACA,MACA,QACA,OACA,WACA,QACA,QACA,QACA,QACA,KACA,KACA,KACA,IACA,KACA,QACH,CACDhC,EAAID,SAAS,CAAGA,EA4BhBC,EAAI+B,mBAAmB,CAAG,CAAA,EA8BnB/B,CACX,GACArV,EAAgBD,EAAU,iCAAkC,CAACA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUgV,CAAC,MAqOzFsD,EAvNX,GAAM,CAAE1N,SAAAA,CAAQ,CAAEzG,UAAAA,CAAS,CAAEsM,MA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"}