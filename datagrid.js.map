{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards v3.4.0 (2025-06-30)\n *\n * (c) 2009-2025 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = (root && root.document) ?\n            factory(root) :\n            factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('datagrid/datagrid', function () {\n            return factory(root);\n        });\n    } else {\n        if (root.DataGrid) {\n            root.DataGrid.error(16, true);\n        }\n        root.DataGrid = factory(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function (window) {\n    'use strict';\n    var _modules = {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (window && typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DataGridModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Shared Highcharts properties.\n         * @private\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.SVG_NS = 'http://www.w3.org/2000/svg', Globals.product = 'Highcharts', Globals.version = '3.4.0', Globals.win = (typeof window !== 'undefined' ?\n                window :\n                {}), // eslint-disable-line node/no-unsupported-features/es-builtins\n            Globals.doc = Globals.win.document, Globals.svg = !!Globals.doc?.createElementNS?.(Globals.SVG_NS, 'svg')?.createSVGRect, Globals.pageLang = Globals.doc?.documentElement?.closest('[lang]')?.lang, Globals.userAgent = Globals.win.navigator?.userAgent || '', Globals.isChrome = Globals.win.chrome, Globals.isFirefox = Globals.userAgent.indexOf('Firefox') !== -1, Globals.isMS = /(edge|msie|trident)/i.test(Globals.userAgent) && !Globals.win.opera, Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1, Globals.isTouchDevice = /(Mobile|Android|Windows Phone)/.test(Globals.userAgent), Globals.isWebKit = Globals.userAgent.indexOf('AppleWebKit') !== -1, Globals.deg2rad = Math.PI * 2 / 360, Globals.marginNames = [\n                'plotTop',\n                'marginRight',\n                'marginBottom',\n                'plotLeft'\n            ], Globals.noop = function () { }, Globals.supportsPassiveEvents = (function () {\n                // Checks whether the browser supports passive events, (#11353).\n                let supportsPassive = false;\n                // Object.defineProperty doesn't work on IE as well as passive\n                // events - instead of using polyfill, we can exclude IE totally.\n                if (!Globals.isMS) {\n                    const opts = Object.defineProperty({}, 'passive', {\n                        get: function () {\n                            supportsPassive = true;\n                        }\n                    });\n                    if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                        Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                        Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n                    }\n                }\n                return supportsPassive;\n            }());\n            /**\n             * An array containing the current chart objects in the page. A chart's\n             * position in the array is preserved throughout the page's lifetime. When\n             * a chart is destroyed, the array item becomes `undefined`.\n             *\n             * @name Highcharts.charts\n             * @type {Array<Highcharts.Chart|undefined>}\n             */\n            Globals.charts = [];\n            /**\n             * A shared registry between all bundles to keep track of applied\n             * compositions.\n             * @private\n             */\n            Globals.composed = [];\n            /**\n             * A hook for defining additional date format specifiers. New\n             * specifiers are defined as key-value pairs by using the\n             * specifier as key, and a function which takes the timestamp as\n             * value. This function returns the formatted portion of the\n             * date.\n             *\n             * Using `dateFormats` is also a convenient way to define new keys for\n             * complex locale-aware date formats compatible with the\n             * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat)\n             * browser API, whenever the built-in formats are not sufficient.\n             *\n             * @sample highcharts/global/dateformats/\n             *         Adding support for week number\n             * @sample highcharts/global/dateformats-object/\n             *         A locale-aware date format using `Intl.DateTimeFormat`\n             *\n             * @name Highcharts.dateFormats\n             * @type {Record<string, Highcharts.TimeFormatCallbackFunction>}\n             */\n            Globals.dateFormats = {};\n            /**\n             * @private\n             * @deprecated\n             * @todo Use only `Core/Series/SeriesRegistry.seriesTypes`\n             */\n            Globals.seriesTypes = {};\n            /**\n             * @private\n             */\n            Globals.symbolSizes = {};\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            // eslint-disable-next-line prefer-const\n            Globals.chartCount = 0;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Theme options that should get applied to the chart. In module mode it\n         * might not be possible to change this property because of read-only\n         * restrictions, instead use {@link Highcharts.setOptions}.\n         *\n         * @deprecated\n         * @name Highcharts.theme\n         * @type {Highcharts.Options}\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Core/Utilities.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { charts, doc, win } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Highcharts.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        Reference to the chart that causes the error. Used in 'debugger'\n         *        module to display errors directly on the chart.\n         *        Important note: This argument is undefined for errors that lack\n         *        access to the Chart instance. In such case, the error will be\n         *        displayed on the last created chart.\n         *\n         * @param {Highcharts.Dictionary<string>} [params]\n         *        Additional parameters for the generated message.\n         *\n         * @return {void}\n         */\n        function error(code, stop, chart, params) {\n            const severity = stop ? 'Highcharts error' : 'Highcharts warning';\n            if (code === 32) {\n                code = `${severity}: Deprecated member`;\n            }\n            const isCode = isNumber(code);\n            let message = isCode ?\n                `${severity} #${code}: www.highcharts.com/errors/${code}/` :\n                code.toString();\n            const defaultHandler = function () {\n                if (stop) {\n                    throw new Error(message);\n                }\n                // Else ...\n                if (win.console &&\n                    error.messages.indexOf(message) === -1 // Prevent console flooting\n                ) {\n                    console.warn(message); // eslint-disable-line no-console\n                }\n            };\n            if (typeof params !== 'undefined') {\n                let additionalMessages = '';\n                if (isCode) {\n                    message += '?';\n                }\n                objectEach(params, function (value, key) {\n                    additionalMessages += `\\n - ${key}: ${value}`;\n                    if (isCode) {\n                        message += encodeURI(key) + '=' + encodeURI(value);\n                    }\n                });\n                message += additionalMessages;\n            }\n            fireEvent(H, 'displayError', { chart, code, message, params }, defaultHandler);\n            error.messages.push(message);\n        }\n        (function (error) {\n            error.messages = [];\n        })(error || (error = {}));\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {true | T} extendOrSource\n         *        Whether to extend the left-side object,\n         *        or the first object to merge as a deep copy.\n         *\n         * @param {...Array<object|undefined>} [sources]\n         *        Object(s) to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */\n        function merge(extendOrSource, ...sources) {\n            let i, args = [extendOrSource, ...sources], ret = {};\n            const doCopy = function (copy, original) {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                objectEach(original, function (value, key) {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (extendOrSource === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Constrain a value to within a lower and upper threshold.\n         *\n         * @private\n         * @param {number} value The initial value\n         * @param {number} min The lower threshold\n         * @param {number} max The upper threshold\n         * @return {number} Returns a number value within min and max.\n         */\n        function clamp(value, min, max) {\n            return value > min ? value < max ? value : max : min;\n        }\n        /**\n         * Utility for crisping a line position to the nearest full pixel depening on\n         * the line width\n         * @param {number} value       The raw pixel position\n         * @param {number} lineWidth   The line width\n         * @param {boolean} [inverted] Whether the containing group is inverted.\n         *                             Crisping round numbers on the y-scale need to go\n         *                             to the other side because the coordinate system\n         *                             is flipped (scaleY is -1)\n         * @return {number}            The pixel position to use for a crisp display\n         */\n        function crisp(value, lineWidth = 0, inverted) {\n            const mod = lineWidth % 2 / 2, inverter = inverted ? -1 : 1;\n            return (Math.round(value * inverter - mod) + mod) * inverter;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Return the deep difference between two objects. It can either return the new\n         * properties, or optionally return the old values of new properties.\n         * @private\n         */\n        function diffObjects(newer, older, keepOlder, collectionsWithUpdate) {\n            const ret = {};\n            /**\n             * Recurse over a set of options and its current values, and store the\n             * current values in the ret object.\n             */\n            function diff(newer, older, ret, depth) {\n                const keeper = keepOlder ? older : newer;\n                objectEach(newer, function (newerVal, key) {\n                    if (!depth &&\n                        collectionsWithUpdate &&\n                        collectionsWithUpdate.indexOf(key) > -1 &&\n                        older[key]) {\n                        newerVal = splat(newerVal);\n                        ret[key] = [];\n                        // Iterate over collections like series, xAxis or yAxis and map\n                        // the items by index.\n                        for (let i = 0; i < Math.max(newerVal.length, older[key].length); i++) {\n                            // Item exists in current data (#6347)\n                            if (older[key][i]) {\n                                // If the item is missing from the new data, we need to\n                                // save the whole config structure. Like when\n                                // responsively updating from a dual axis layout to a\n                                // single axis and back (#13544).\n                                if (newerVal[i] === void 0) {\n                                    ret[key][i] = older[key][i];\n                                    // Otherwise, proceed\n                                }\n                                else {\n                                    ret[key][i] = {};\n                                    diff(newerVal[i], older[key][i], ret[key][i], depth + 1);\n                                }\n                            }\n                        }\n                    }\n                    else if (isObject(newerVal, true) &&\n                        !newerVal.nodeType // #10044\n                    ) {\n                        ret[key] = isArray(newerVal) ? [] : {};\n                        diff(newerVal, older[key] || {}, ret[key], depth + 1);\n                        // Delete empty nested objects\n                        if (Object.keys(ret[key]).length === 0 &&\n                            // Except colorAxis which is a special case where the empty\n                            // object means it is enabled. Which is unfortunate and we\n                            // should try to find a better way.\n                            !(key === 'colorAxis' && depth === 0)) {\n                            delete ret[key];\n                        }\n                    }\n                    else if (newer[key] !== older[key] ||\n                        // If the newer key is explicitly undefined, keep it (#10525)\n                        (key in newer && !(key in older))) {\n                        if (key !== '__proto__' && key !== 'constructor') {\n                            ret[key] = keeper[key];\n                        }\n                    }\n                });\n            }\n            diff(newer, older, ret, 0);\n            return ret;\n        }\n        /**\n         * Shortcut for parseInt\n         *\n         * @private\n         * @function Highcharts.pInt\n         *\n         * @param {*} s\n         *        any\n         *\n         * @param {number} [mag]\n         *        Magnitude\n         *\n         * @return {number}\n         *         number\n         */\n        function pInt(s, mag) {\n            return parseInt(s, mag || 10);\n        }\n        /**\n         * Utility function to check for string type.\n         *\n         * @function Highcharts.isString\n         *\n         * @param {*} s\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a string.\n         */\n        function isString(s) {\n            return typeof s === 'string';\n        }\n        /**\n         * Utility function to check if an item is an array.\n         *\n         * @function Highcharts.isArray\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is an array.\n         */\n        function isArray(obj) {\n            const str = Object.prototype.toString.call(obj);\n            return str === '[object Array]' || str === '[object Array Iterator]';\n        }\n        /**\n         * Utility function to check if an item is of type object.\n         *\n         * @function Highcharts.isObject\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @param {boolean} [strict=false]\n         *        Also checks that the object is not an array.\n         *\n         * @return {boolean}\n         *         True if the argument is an object.\n         */\n        function isObject(obj, strict) {\n            return (!!obj &&\n                typeof obj === 'object' &&\n                (!strict || !isArray(obj))); // eslint-disable-line @typescript-eslint/no-explicit-any\n        }\n        /**\n         * Utility function to check if an Object is a HTML Element.\n         *\n         * @function Highcharts.isDOMElement\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a HTML Element.\n         */\n        function isDOMElement(obj) {\n            return isObject(obj) && typeof obj.nodeType === 'number';\n        }\n        /**\n         * Utility function to check if an Object is a class.\n         *\n         * @function Highcharts.isClass\n         *\n         * @param {object|undefined} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a class.\n         */\n        function isClass(obj) {\n            const c = obj?.constructor;\n            return !!(isObject(obj, true) &&\n                !isDOMElement(obj) &&\n                (c?.name && c.name !== 'Object'));\n        }\n        /**\n         * Utility function to check if an item is a number and it is finite (not NaN,\n         * Infinity or -Infinity).\n         *\n         * @function Highcharts.isNumber\n         *\n         * @param {*} n\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the item is a finite number\n         */\n        function isNumber(n) {\n            return typeof n === 'number' && !isNaN(n) && n < Infinity && n > -Infinity;\n        }\n        /**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function Highcharts.erase\n         *\n         * @param {Array<*>} arr\n         *        The array.\n         *\n         * @param {*} item\n         *        The item to remove.\n         *\n         * @return {void}\n         */\n        function erase(arr, item) {\n            let i = arr.length;\n            while (i--) {\n                if (arr[i] === item) {\n                    arr.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        /**\n         * Insert a series or an axis in a collection with other items, either the\n         * chart series or yAxis series or axis collections, in the correct order\n         * according to the index option and whether it is internal. Used internally\n         * when adding series and axes.\n         *\n         * @private\n         * @function Highcharts.Chart#insertItem\n         * @param  {Highcharts.Series|Highcharts.Axis} item\n         *         The item to insert\n         * @param  {Array<Highcharts.Series>|Array<Highcharts.Axis>} collection\n         *         A collection of items, like `chart.series` or `xAxis.series`.\n         * @return {number} The index of the series in the collection.\n         */\n        function insertItem(item, collection) {\n            const indexOption = item.options.index, length = collection.length;\n            let i;\n            for (\n            // Internal item (navigator) should always be pushed to the end\n            i = item.options.isInternal ? length : 0; i < length + 1; i++) {\n                if (\n                // No index option, reached the end of the collection,\n                // equivalent to pushing\n                !collection[i] ||\n                    // Handle index option, the element to insert has lower index\n                    (isNumber(indexOption) &&\n                        indexOption < pick(collection[i].options.index, collection[i]._i)) ||\n                    // Insert the new item before other internal items\n                    // (navigator)\n                    collection[i].options.isInternal) {\n                    collection.splice(i, 0, item);\n                    break;\n                }\n            }\n            return i;\n        }\n        /**\n         * Adds an item to an array, if it is not present in the array.\n         *\n         * @function Highcharts.pushUnique\n         *\n         * @param {Array<unknown>} array\n         * The array to add the item to.\n         *\n         * @param {unknown} item\n         * The item to add.\n         *\n         * @return {boolean}\n         * Returns true, if the item was not present and has been added.\n         */\n        function pushUnique(array, item) {\n            return array.indexOf(item) < 0 && !!array.push(item);\n        }\n        /**\n         * Check if an object is null or undefined.\n         *\n         * @function Highcharts.defined\n         *\n         * @param {*} obj\n         *        The object to check.\n         *\n         * @return {boolean}\n         *         False if the object is null or undefined, otherwise true.\n         */\n        function defined(obj) {\n            return typeof obj !== 'undefined' && obj !== null;\n        }\n        /**\n         * Set or get an attribute or an object of attributes.\n         *\n         * To use as a setter, pass a key and a value, or let the second argument be a\n         * collection of keys and values. When using a collection, passing a value of\n         * `null` or `undefined` will remove the attribute.\n         *\n         * To use as a getter, pass only a string as the second argument.\n         *\n         * @function Highcharts.attr\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} elem\n         *        The DOM element to receive the attribute(s).\n         *\n         * @param {string|Highcharts.HTMLAttributes|Highcharts.SVGAttributes} [keyOrAttribs]\n         *        The property or an object of key-value pairs.\n         *\n         * @param {number|string} [value]\n         *        The value if a single property is set.\n         *\n         * @return {string|null|undefined}\n         *         When used as a getter, return the value.\n         */\n        function attr(elem, keyOrAttribs, value) {\n            const isGetter = isString(keyOrAttribs) && !defined(value);\n            let ret;\n            const attrSingle = (value, key) => {\n                // Set the value\n                if (defined(value)) {\n                    elem.setAttribute(key, value);\n                    // Get the value\n                }\n                else if (isGetter) {\n                    ret = elem.getAttribute(key);\n                    // IE7 and below cannot get class through getAttribute (#7850)\n                    if (!ret && key === 'class') {\n                        ret = elem.getAttribute(key + 'Name');\n                    }\n                    // Remove the value\n                }\n                else {\n                    elem.removeAttribute(key);\n                }\n            };\n            // If keyOrAttribs is a string\n            if (isString(keyOrAttribs)) {\n                attrSingle(value, keyOrAttribs);\n                // Else if keyOrAttribs is defined, it is a hash of key/value pairs\n            }\n            else {\n                objectEach(keyOrAttribs, attrSingle);\n            }\n            return ret;\n        }\n        /**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function Highcharts.splat\n         *\n         * @param {*} obj\n         *        The object to splat.\n         *\n         * @return {Array}\n         *         The produced or original array.\n         */\n        function splat(obj) {\n            return isArray(obj) ? obj : [obj];\n        }\n        /**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function Highcharts.syncTimeout\n         *\n         * @param {Function} fn\n         *        The function callback.\n         *\n         * @param {number} delay\n         *        Delay in milliseconds.\n         *\n         * @param {*} [context]\n         *        An optional context to send to the function callback.\n         *\n         * @return {number}\n         *         An identifier for the timeout that can later be cleared with\n         *         Highcharts.clearTimeout. Returns -1 if there is no timeout.\n         */\n        function syncTimeout(fn, delay, context) {\n            if (delay > 0) {\n                return setTimeout(fn, delay, context);\n            }\n            fn.call(0, context);\n            return -1;\n        }\n        /**\n         * Internal clear timeout. The function checks that the `id` was not removed\n         * (e.g. by `chart.destroy()`). For the details see\n         * [issue #7901](https://github.com/highcharts/highcharts/issues/7901).\n         *\n         * @function Highcharts.clearTimeout\n         *\n         * @param {number|undefined} id\n         * Id of a timeout.\n         */\n        function internalClearTimeout(id) {\n            if (defined(id)) {\n                clearTimeout(id);\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function Highcharts.extend<T>\n         *\n         * @param {T|undefined} a\n         *        The object to be extended.\n         *\n         * @param {Partial<T>} b\n         *        The object to add to the first one.\n         *\n         * @return {T}\n         *         Object a, the original object.\n         */\n        function extend(a, b) {\n            /* eslint-enable valid-jsdoc */\n            let n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) { // eslint-disable-line guard-for-in\n                a[n] = b[n];\n            }\n            return a;\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Return the first value that is not null or undefined.\n         *\n         * @function Highcharts.pick<T>\n         *\n         * @param {...Array<T|null|undefined>} items\n         *        Variable number of arguments to inspect.\n         *\n         * @return {T}\n         *         The value of the first argument that is not null or undefined.\n         */\n        function pick() {\n            const args = arguments;\n            const length = args.length;\n            for (let i = 0; i < length; i++) {\n                const arg = args[i];\n                if (typeof arg !== 'undefined' && arg !== null) {\n                    return arg;\n                }\n            }\n        }\n        /**\n         * Set CSS on a given element.\n         *\n         * @function Highcharts.css\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} el\n         *        An HTML DOM element.\n         *\n         * @param {Highcharts.CSSObject} styles\n         *        Style object with camel case property names.\n         *\n         * @return {void}\n         */\n        function css(el, styles) {\n            extend(el.style, styles);\n        }\n        /**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function Highcharts.createElement\n         *\n         * @param {string} tag\n         *        The HTML tag.\n         *\n         * @param {Highcharts.HTMLAttributes} [attribs]\n         *        Attributes as an object of key-value pairs.\n         *\n         * @param {Highcharts.CSSObject} [styles]\n         *        Styles as an object of key-value pairs.\n         *\n         * @param {Highcharts.HTMLDOMElement} [parent]\n         *        The parent HTML object.\n         *\n         * @param {boolean} [nopad=false]\n         *        If true, remove all padding, border and margin.\n         *\n         * @return {Highcharts.HTMLDOMElement}\n         *         The created DOM element.\n         */\n        function createElement(tag, attribs, styles, parent, nopad) {\n            const el = doc.createElement(tag);\n            if (attribs) {\n                extend(el, attribs);\n            }\n            if (nopad) {\n                css(el, { padding: '0', border: 'none', margin: '0' });\n            }\n            if (styles) {\n                css(el, styles);\n            }\n            if (parent) {\n                parent.appendChild(el);\n            }\n            return el;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Extend a prototyped class by new members.\n         *\n         * @deprecated\n         * @function Highcharts.extendClass<T>\n         *\n         * @param {Highcharts.Class<T>} parent\n         *        The parent prototype to inherit.\n         *\n         * @param {Highcharts.Dictionary<*>} members\n         *        A collection of prototype members to add or override compared to the\n         *        parent prototype.\n         *\n         * @return {Highcharts.Class<T>}\n         *         A new prototype.\n         */\n        function extendClass(parent, members) {\n            const obj = (function () { });\n            obj.prototype = new parent(); // eslint-disable-line new-cap\n            extend(obj.prototype, members);\n            return obj;\n        }\n        /**\n         * Left-pad a string to a given length by adding a character repetitively.\n         *\n         * @function Highcharts.pad\n         *\n         * @param {number} number\n         *        The input string or number.\n         *\n         * @param {number} [length]\n         *        The desired string length.\n         *\n         * @param {string} [padder=0]\n         *        The character to pad with.\n         *\n         * @return {string}\n         *         The padded string.\n         */\n        function pad(number, length, padder) {\n            return new Array((length || 2) +\n                1 -\n                String(number)\n                    .replace('-', '')\n                    .length).join(padder || '0') + number;\n        }\n        /**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function Highcharts.relativeLength\n         *\n         * @param {Highcharts.RelativeSize} value\n         *        A percentage string or a number.\n         *\n         * @param {number} base\n         *        The full length that represents 100%.\n         *\n         * @param {number} [offset=0]\n         *        A pixel offset to apply for percentage values. Used internally in\n         *        axis positioning.\n         *\n         * @return {number}\n         *         The computed length.\n         */\n        function relativeLength(value, base, offset) {\n            return (/%$/).test(value) ?\n                (base * parseFloat(value) / 100) + (offset || 0) :\n                parseFloat(value);\n        }\n        /**\n         * Replaces text in a string with a given replacement in a loop to catch nested\n         * matches after previous replacements.\n         *\n         * @function Highcharts.replaceNested\n         *\n         * @param {string} text\n         * Text to search and modify.\n         *\n         * @param {...Array<(RegExp|string)>} replacements\n         * One or multiple tuples with search pattern (`[0]: (string|RegExp)`) and\n         * replacement (`[1]: string`) for matching text.\n         *\n         * @return {string}\n         * Text with replacements.\n         */\n        function replaceNested(text, ...replacements) {\n            let previous, replacement;\n            do {\n                previous = text;\n                for (replacement of replacements) {\n                    text = text.replace(replacement[0], replacement[1]);\n                }\n            } while (text !== previous);\n            return text;\n        }\n        /**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function Highcharts.wrap\n         *\n         * @param {*} obj\n         *        The context object that the method belongs to. In real cases, this is\n         *        often a prototype.\n         *\n         * @param {string} method\n         *        The name of the method to extend.\n         *\n         * @param {Highcharts.WrapProceedFunction} func\n         *        A wrapper function callback. This function is called with the same\n         *        arguments as the original function, except that the original function\n         *        is unshifted and passed as the first argument.\n         */\n        function wrap(obj, method, func) {\n            const proceed = obj[method];\n            obj[method] = function () {\n                const outerArgs = arguments, scope = this;\n                return func.apply(this, [\n                    function () {\n                        return proceed.apply(scope, arguments.length ? arguments : outerArgs);\n                    }\n                ].concat([].slice.call(arguments)));\n            };\n        }\n        /**\n         * Get the magnitude of a number.\n         *\n         * @function Highcharts.getMagnitude\n         *\n         * @param {number} num\n         *        The number.\n         *\n         * @return {number}\n         *         The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc.\n         */\n        function getMagnitude(num) {\n            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n        }\n        /**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @deprecated\n         * @function Highcharts.normalizeTickInterval\n         *\n         * @param {number} interval\n         *        The raw, un-rounded interval.\n         *\n         * @param {Array<*>} [multiples]\n         *        Allowed multiples.\n         *\n         * @param {number} [magnitude]\n         *        The magnitude of the number.\n         *\n         * @param {boolean} [allowDecimals]\n         *        Whether to allow decimals.\n         *\n         * @param {boolean} [hasTickAmount]\n         *        If it has tickAmount, avoid landing on tick intervals lower than\n         *        original.\n         *\n         * @return {number}\n         *         The normalized interval.\n         *\n         * @todo\n         * Move this function to the Axis prototype. It is here only for historical\n         * reasons.\n         */\n        function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, hasTickAmount) {\n            let i, retInterval = interval;\n            // Round to a tenfold of 1, 2, 2.5 or 5\n            magnitude = pick(magnitude, getMagnitude(interval));\n            const normalized = interval / magnitude;\n            // Multiples for a linear scale\n            if (!multiples) {\n                multiples = hasTickAmount ?\n                    // Finer grained ticks when the tick amount is hard set, including\n                    // when alignTicks is true on multiple axes (#4580).\n                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n                    // Else, let ticks fall on rounder numbers\n                    [1, 2, 2.5, 5, 10];\n                // The allowDecimals option\n                if (allowDecimals === false) {\n                    if (magnitude === 1) {\n                        multiples = multiples.filter(function (num) {\n                            return num % 1 === 0;\n                        });\n                    }\n                    else if (magnitude <= 0.1) {\n                        multiples = [1 / magnitude];\n                    }\n                }\n            }\n            // Normalize the interval to the nearest multiple\n            for (i = 0; i < multiples.length; i++) {\n                retInterval = multiples[i];\n                // Only allow tick amounts smaller than natural\n                if ((hasTickAmount &&\n                    retInterval * magnitude >= interval) ||\n                    (!hasTickAmount &&\n                        (normalized <=\n                            (multiples[i] +\n                                (multiples[i + 1] || multiples[i])) / 2))) {\n                    break;\n                }\n            }\n            // Multiply back to the correct magnitude. Correct floats to appropriate\n            // precision (#6085).\n            retInterval = correctFloat(retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10));\n            return retInterval;\n        }\n        /**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function Highcharts.stableSort\n         *\n         * @param {Array<*>} arr\n         *        The array to sort.\n         *\n         * @param {Function} sortFunction\n         *        The function to sort it with, like with regular Array.prototype.sort.\n         */\n        function stableSort(arr, sortFunction) {\n            // @todo It seems like Chrome since v70 sorts in a stable way internally,\n            // plus all other browsers do it, so over time we may be able to remove this\n            // function\n            const length = arr.length;\n            let sortValue, i;\n            // Add index to each item\n            for (i = 0; i < length; i++) {\n                arr[i].safeI = i; // Stable sort index\n            }\n            arr.sort(function (a, b) {\n                sortValue = sortFunction(a, b);\n                return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n            });\n            // Remove index from items\n            for (i = 0; i < length; i++) {\n                delete arr[i].safeI; // Stable sort index\n            }\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMin\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The lowest number.\n         */\n        function arrayMin(data) {\n            let i = data.length, min = data[0];\n            while (i--) {\n                if (data[i] < min) {\n                    min = data[i];\n                }\n            }\n            return min;\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMax\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The highest number.\n         */\n        function arrayMax(data) {\n            let i = data.length, max = data[0];\n            while (i--) {\n                if (data[i] > max) {\n                    max = data[i];\n                }\n            }\n            return max;\n        }\n        /**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function Highcharts.destroyObjectProperties\n         *\n         * @param {*} obj\n         *        The object to destroy properties on.\n         *\n         * @param {*} [except]\n         *        Exception, do not destroy this property, only delete it.\n         */\n        function destroyObjectProperties(obj, except, destructablesOnly) {\n            objectEach(obj, function (val, n) {\n                // If the object is non-null and destroy is defined\n                if (val !== except && val?.destroy) {\n                    // Invoke the destroy\n                    val.destroy();\n                }\n                // Delete the property from the object\n                if (val?.destroy || !destructablesOnly) {\n                    delete obj[n];\n                }\n            });\n        }\n        /**\n         * Discard a HTML element\n         *\n         * @function Highcharts.discardElement\n         *\n         * @param {Highcharts.HTMLDOMElement} element\n         *        The HTML node to discard.\n         */\n        function discardElement(element) {\n            element?.parentElement?.removeChild(element);\n        }\n        /**\n         * Fix JS round off float errors.\n         *\n         * @function Highcharts.correctFloat\n         *\n         * @param {number} num\n         *        A float number to fix.\n         *\n         * @param {number} [prec=14]\n         *        The precision.\n         *\n         * @return {number}\n         *         The corrected float number.\n         */\n        function correctFloat(num, prec) {\n            // When the number is higher than 1e14 use the number (#16275)\n            return num > 1e14 ? num : parseFloat(num.toPrecision(prec || 14));\n        }\n        /**\n         * The time unit lookup\n         *\n         * @ignore\n         */\n        const timeUnits = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 24 * 3600000,\n            week: 7 * 24 * 3600000,\n            month: 28 * 24 * 3600000,\n            year: 364 * 24 * 3600000\n        };\n        /**\n         * Easing definition\n         *\n         * @private\n         * @function Math.easeInOutSine\n         *\n         * @param {number} pos\n         *        Current position, ranging from 0 to 1.\n         *\n         * @return {number}\n         *         Ease result\n         */\n        Math.easeInOutSine = function (pos) {\n            return -0.5 * (Math.cos(Math.PI * pos) - 1);\n        };\n        /**\n         * Convenience function to get the align factor, used several places for\n         * computing positions\n         * @private\n         */\n        const getAlignFactor = (align = '') => ({\n            center: 0.5,\n            right: 1,\n            middle: 0.5,\n            bottom: 1\n        }[align] || 0);\n        /**\n         * Find the closest distance between two values of a two-dimensional array\n         * @private\n         * @function Highcharts.getClosestDistance\n         *\n         * @param {Array<Array<number>>} arrays\n         *          An array of arrays of numbers\n         *\n         * @return {number | undefined}\n         *          The closest distance between values\n         */\n        function getClosestDistance(arrays, onError) {\n            const allowNegative = !onError;\n            let closest, loopLength, distance, i;\n            arrays.forEach((xData) => {\n                if (xData.length > 1) {\n                    loopLength = xData.length - 1;\n                    for (i = loopLength; i > 0; i--) {\n                        distance = xData[i] - xData[i - 1];\n                        if (distance < 0 && !allowNegative) {\n                            onError?.();\n                            // Only one call\n                            onError = void 0;\n                        }\n                        else if (distance && (typeof closest === 'undefined' || distance < closest)) {\n                            closest = distance;\n                        }\n                    }\n                }\n            });\n            return closest;\n        }\n        /**\n         * Returns the value of a property path on a given object.\n         *\n         * @private\n         * @function getNestedProperty\n         *\n         * @param {string} path\n         * Path to the property, for example `custom.myValue`.\n         *\n         * @param {unknown} obj\n         * Instance containing the property on the specific path.\n         *\n         * @return {unknown}\n         * The unknown property value.\n         */\n        function getNestedProperty(path, parent) {\n            const pathElements = path.split('.');\n            while (pathElements.length && defined(parent)) {\n                const pathElement = pathElements.shift();\n                // Filter on the key\n                if (typeof pathElement === 'undefined' ||\n                    pathElement === '__proto__') {\n                    return; // Undefined\n                }\n                if (pathElement === 'this') {\n                    let thisProp;\n                    if (isObject(parent)) {\n                        thisProp = parent['@this'];\n                    }\n                    return thisProp ?? parent;\n                }\n                const child = parent[pathElement.replace(/[\\\\'\"]/g, '')];\n                // Filter on the child\n                if (!defined(child) ||\n                    typeof child === 'function' ||\n                    typeof child.nodeType === 'number' ||\n                    child === win) {\n                    return; // Undefined\n                }\n                // Else, proceed\n                parent = child;\n            }\n            return parent;\n        }\n        /**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function Highcharts.getStyle\n         *\n         * @param {Highcharts.HTMLDOMElement} el\n         * An HTML element.\n         *\n         * @param {string} prop\n         * The property name.\n         *\n         * @param {boolean} [toInt=true]\n         * Parse to integer.\n         *\n         * @return {number|string|undefined}\n         * The style value.\n         */\n        function getStyle(el, prop, toInt) {\n            let style;\n            // For width and height, return the actual inner pixel size (#4913)\n            if (prop === 'width') {\n                let offsetWidth = Math.min(el.offsetWidth, el.scrollWidth);\n                // In flex boxes, we need to use getBoundingClientRect and floor it,\n                // because scrollWidth doesn't support subpixel precision (#6427) ...\n                const boundingClientRectWidth = el.getBoundingClientRect?.().width;\n                // ...unless if the containing div or its parents are transform-scaled\n                // down, in which case the boundingClientRect can't be used as it is\n                // also scaled down (#9871, #10498).\n                if (boundingClientRectWidth < offsetWidth &&\n                    boundingClientRectWidth >= offsetWidth - 1) {\n                    offsetWidth = Math.floor(boundingClientRectWidth);\n                }\n                return Math.max(0, // #8377\n                (offsetWidth -\n                    (getStyle(el, 'padding-left', true) || 0) -\n                    (getStyle(el, 'padding-right', true) || 0)));\n            }\n            if (prop === 'height') {\n                return Math.max(0, // #8377\n                (Math.min(el.offsetHeight, el.scrollHeight) -\n                    (getStyle(el, 'padding-top', true) || 0) -\n                    (getStyle(el, 'padding-bottom', true) || 0)));\n            }\n            // Otherwise, get the computed style\n            const css = win.getComputedStyle(el, void 0); // eslint-disable-line no-undefined\n            if (css) {\n                style = css.getPropertyValue(prop);\n                if (pick(toInt, prop !== 'opacity')) {\n                    style = pInt(style);\n                }\n            }\n            return style;\n        }\n        /**\n         * Return the value of the first element in the array that satisfies the\n         * provided testing function.\n         *\n         * @function Highcharts.find<T>\n         *\n         * @param {Array<T>} arr\n         *        The array to test.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if this item satisfies the condition.\n         *\n         * @return {T|undefined}\n         *         The value of the element.\n         */\n        const find = Array.prototype.find ?\n            function (arr, callback) {\n                return arr.find(callback);\n            } :\n            // Legacy implementation. PhantomJS, IE <= 11 etc. #7223.\n            function (arr, callback) {\n                let i;\n                const length = arr.length;\n                for (i = 0; i < length; i++) {\n                    if (callback(arr[i], i)) { // eslint-disable-line node/callback-return\n                        return arr[i];\n                    }\n                }\n            };\n        /**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function Highcharts.offset\n         *\n         * @param {global.Element} el\n         *        The DOM element.\n         *\n         * @return {Highcharts.OffsetObject}\n         *         An object containing `left` and `top` properties for the position in\n         *         the page.\n         */\n        function offset(el) {\n            const docElem = doc.documentElement, box = (el.parentElement || el.parentNode) ?\n                el.getBoundingClientRect() :\n                { top: 0, left: 0, width: 0, height: 0 };\n            return {\n                top: box.top + (win.pageYOffset || docElem.scrollTop) -\n                    (docElem.clientTop || 0),\n                left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n                    (docElem.clientLeft || 0),\n                width: box.width,\n                height: box.height\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Iterate over object key pairs in an object.\n         *\n         * @function Highcharts.objectEach<T>\n         *\n         * @param {*} obj\n         *        The object to iterate over.\n         *\n         * @param {Highcharts.ObjectEachCallbackFunction<T>} fn\n         *        The iterator callback. It passes three arguments:\n         *        * value - The property value.\n         *        * key - The property key.\n         *        * obj - The object that objectEach is being applied to.\n         *\n         * @param {T} [ctx]\n         *        The context.\n         */\n        function objectEach(obj, fn, ctx) {\n            /* eslint-enable valid-jsdoc */\n            for (const key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    fn.call(ctx || obj[key], obj[key], key, obj);\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Add an event listener.\n         *\n         * @function Highcharts.addEvent<T>\n         *\n         * @param  {Highcharts.Class<T>|T} el\n         *         The element or object to add a listener to. It can be a\n         *         {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         *\n         * @param  {string} type\n         *         The event type.\n         *\n         * @param  {Highcharts.EventCallbackFunction<T>|Function} fn\n         *         The function callback to execute when the event is fired.\n         *\n         * @param  {Highcharts.EventOptionsObject} [options]\n         *         Options for adding the event.\n         *\n         * @sample highcharts/members/addevent\n         *         Use a general `render` event to draw shapes on a chart\n         *\n         * @return {Function}\n         *         A callback function to remove the added event.\n         */\n        function addEvent(el, type, fn, options = {}) {\n            /* eslint-enable valid-jsdoc */\n            // Add hcEvents to either the prototype (in case we're running addEvent on a\n            // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n            // inherited down the prototype chain, in which case we need to set the\n            // property on this instance (which may itself be a prototype).\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                owner.hcEvents = {};\n            }\n            const events = owner.hcEvents;\n            // Allow click events added to points, otherwise they will be prevented by\n            // the TouchPointer.pinch function after a pinch zoom operation (#7091).\n            if (H.Point && // Without H a dependency loop occurs\n                el instanceof H.Point &&\n                el.series &&\n                el.series.chart) {\n                el.series.chart.runTrackerClick = true;\n            }\n            // Handle DOM events\n            // If the browser supports passive events, add it to improve performance\n            // on touch events (#11353).\n            const addEventListener = el.addEventListener;\n            if (addEventListener) {\n                addEventListener.call(el, type, fn, H.supportsPassiveEvents ? {\n                    passive: options.passive === void 0 ?\n                        type.indexOf('touch') !== -1 : options.passive,\n                    capture: false\n                } : false);\n            }\n            if (!events[type]) {\n                events[type] = [];\n            }\n            const eventObject = {\n                fn,\n                order: typeof options.order === 'number' ? options.order : Infinity\n            };\n            events[type].push(eventObject);\n            // Order the calls\n            events[type].sort((a, b) => a.order - b.order);\n            // Return a function that can be called to remove this event.\n            return function () {\n                removeEvent(el, type, fn);\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.removeEvent<T>\n         *\n         * @param {Highcharts.Class<T>|T} el\n         *        The element to remove events on.\n         *\n         * @param {string} [type]\n         *        The type of events to remove. If undefined, all events are removed\n         *        from the element.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>} [fn]\n         *        The specific callback to remove. If undefined, all events that match\n         *        the element and optionally the type are removed.\n         *\n         * @return {void}\n         */\n        function removeEvent(el, type, fn) {\n            /* eslint-enable valid-jsdoc */\n            /**\n             * @private\n             */\n            function removeOneEvent(type, fn) {\n                const removeEventListener = el.removeEventListener;\n                if (removeEventListener) {\n                    removeEventListener.call(el, type, fn, false);\n                }\n            }\n            /**\n             * @private\n             */\n            function removeAllEvents(eventCollection) {\n                let types, len;\n                if (!el.nodeName) {\n                    return; // Break on non-DOM events\n                }\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                }\n                else {\n                    types = eventCollection;\n                }\n                objectEach(types, function (_val, n) {\n                    if (eventCollection[n]) {\n                        len = eventCollection[n].length;\n                        while (len--) {\n                            removeOneEvent(n, eventCollection[n][len].fn);\n                        }\n                    }\n                });\n            }\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                const events = owner.hcEvents;\n                if (type) {\n                    const typeEvents = (events[type] || []);\n                    if (fn) {\n                        events[type] = typeEvents.filter(function (obj) {\n                            return fn !== obj.fn;\n                        });\n                        removeOneEvent(type, fn);\n                    }\n                    else {\n                        removeAllEvents(events);\n                        events[type] = [];\n                    }\n                }\n                else {\n                    removeAllEvents(events);\n                    delete owner.hcEvents;\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.fireEvent<T>\n         *\n         * @param {T} el\n         *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n         *        an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The type of event.\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Custom event arguments that are passed on as an argument to the event\n         *        handler.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>|Function} [defaultFunction]\n         *        The default function to execute if the other listeners haven't\n         *        returned false.\n         *\n         * @return {void}\n         */\n        function fireEvent(el, type, eventArguments, defaultFunction) {\n            /* eslint-enable valid-jsdoc */\n            eventArguments = eventArguments || {};\n            if (doc?.createEvent &&\n                (el.dispatchEvent ||\n                    (el.fireEvent &&\n                        // Enable firing events on Highcharts instance.\n                        el !== H))) {\n                const e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                eventArguments = extend(e, eventArguments);\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(eventArguments);\n                }\n                else {\n                    el.fireEvent(type, eventArguments);\n                }\n            }\n            else if (el.hcEvents) {\n                if (!eventArguments.target) {\n                    // We're running a custom event\n                    extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip\n                        // default handler if called. The built-in\n                        // defaultPrevented property is not overwritable (#5112)\n                        preventDefault: function () {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking\n                        // the zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event\n                        // (#2297). If it is set, we're running a browser event.\n                        type: type\n                    });\n                }\n                const events = [];\n                let object = el;\n                let multilevel = false;\n                // Recurse up the inheritance chain and collect hcEvents set as own\n                // objects on the prototypes.\n                while (object.hcEvents) {\n                    if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                        object.hcEvents[type]) {\n                        if (events.length) {\n                            multilevel = true;\n                        }\n                        events.unshift.apply(events, object.hcEvents[type]);\n                    }\n                    object = Object.getPrototypeOf(object);\n                }\n                // For performance reasons, only sort the event handlers in case we are\n                // dealing with multiple levels in the prototype chain. Otherwise, the\n                // events are already sorted in the addEvent function.\n                if (multilevel) {\n                    // Order the calls\n                    events.sort((a, b) => a.order - b.order);\n                }\n                // Call the collected event handlers\n                events.forEach((obj) => {\n                    // If the event handler returns false, prevent the default handler\n                    // from executing\n                    if (obj.fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                });\n            }\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction.call(el, eventArguments);\n            }\n        }\n        let serialMode;\n        /**\n         * Get a unique key for using in internal element id's and pointers. The key is\n         * composed of a random hash specific to this Highcharts instance, and a\n         * counter.\n         *\n         * @example\n         * let id = uniqueKey(); // => 'highcharts-x45f6hp-0'\n         *\n         * @function Highcharts.uniqueKey\n         *\n         * @return {string}\n         * A unique key.\n         */\n        const uniqueKey = (function () {\n            const hash = Math.random().toString(36).substring(2, 9) + '-';\n            let id = 0;\n            return function () {\n                return 'highcharts-' + (serialMode ? '' : hash) + id++;\n            };\n        }());\n        /**\n         * Activates a serial mode for element IDs provided by\n         * {@link Highcharts.uniqueKey}. This mode can be used in automated tests, where\n         * a simple comparison of two rendered SVG graphics is needed.\n         *\n         * **Note:** This is only for testing purposes and will break functionality in\n         * webpages with multiple charts.\n         *\n         * @example\n         * if (\n         *   process &&\n         *   process.env.NODE_ENV === 'development'\n         * ) {\n         *   Highcharts.useSerialIds(true);\n         * }\n         *\n         * @function Highcharts.useSerialIds\n         *\n         * @param {boolean} [mode]\n         * Changes the state of serial mode.\n         *\n         * @return {boolean|undefined}\n         * State of the serial mode.\n         */\n        function useSerialIds(mode) {\n            return (serialMode = pick(mode, serialMode));\n        }\n        function isFunction(obj) {\n            return typeof obj === 'function';\n        }\n        function ucfirst(s) {\n            return ((isString(s) ?\n                s.substring(0, 1).toUpperCase() + s.substring(1) :\n                String(s)));\n        }\n        /* *\n         *\n         *  External\n         *\n         * */\n        // Register Highcharts as a plugin in jQuery\n        if (win.jQuery) {\n            /**\n             * Highcharts-extended JQuery.\n             *\n             * @external JQuery\n             */\n            /**\n             * Helper function to return the chart of the current JQuery selector\n             * element.\n             *\n             * @function external:JQuery#highcharts\n             *\n             * @return {Highcharts.Chart}\n             *         The chart that is linked to the JQuery selector element.\n             */ /**\n            * Factory function to create a chart in the current JQuery selector\n            * element.\n            *\n            * @function external:JQuery#highcharts\n            *\n            * @param {'Chart'|'Map'|'StockChart'|string} [className]\n            *        Name of the factory class in the Highcharts namespace.\n            *\n            * @param {Highcharts.Options} [options]\n            *        The chart options structure.\n            *\n            * @param {Highcharts.ChartCallbackFunction} [callback]\n            *        Function to run when the chart has loaded and all external\n            *        images are loaded. Defining a\n            *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n            *        handler is equivalent.\n            *\n            * @return {JQuery}\n            *         The current JQuery selector.\n            */\n            win.jQuery.fn.highcharts = function () {\n                const args = [].slice.call(arguments);\n                if (this[0]) { // `this[0]` is the renderTo div\n                    // Create the chart\n                    if (args[0]) {\n                        new H[ // eslint-disable-line computed-property-spacing, no-new\n                        // Constructor defaults to Chart\n                        isString(args[0]) ? args.shift() : 'Chart'](this[0], args[0], args[1]);\n                        return this;\n                    }\n                    // When called without parameters or with the return argument,\n                    // return an existing chart\n                    return charts[attr(this[0], 'data-highcharts-chart')];\n                }\n            };\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // TODO use named exports when supported.\n        const Utilities = {\n            addEvent,\n            arrayMax,\n            arrayMin,\n            attr,\n            clamp,\n            clearTimeout: internalClearTimeout,\n            correctFloat,\n            createElement,\n            crisp,\n            css,\n            defined,\n            destroyObjectProperties,\n            diffObjects,\n            discardElement,\n            erase,\n            error,\n            extend,\n            extendClass,\n            find,\n            fireEvent,\n            getAlignFactor,\n            getClosestDistance,\n            getMagnitude,\n            getNestedProperty,\n            getStyle,\n            insertItem,\n            isArray,\n            isClass,\n            isDOMElement,\n            isFunction,\n            isNumber,\n            isObject,\n            isString,\n            merge,\n            normalizeTickInterval,\n            objectEach,\n            offset,\n            pad,\n            pick,\n            pInt,\n            pushUnique,\n            relativeLength,\n            removeEvent,\n            replaceNested,\n            splat,\n            stableSort,\n            syncTimeout,\n            timeUnits,\n            ucfirst,\n            uniqueKey,\n            useSerialIds,\n            wrap\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms and defer of 0ms.\n         *\n         * @interface Highcharts.AnimationOptionsObject\n         */ /**\n        * A callback function to execute when the animation finishes.\n        * @name Highcharts.AnimationOptionsObject#complete\n        * @type {Function|undefined}\n        */ /**\n        * The animation defer in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#defer\n        * @type {number|undefined}\n        */ /**\n        * The animation duration in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#duration\n        * @type {number|undefined}\n        */ /**\n        * The name of an easing function as defined on the `Math` object.\n        * @name Highcharts.AnimationOptionsObject#easing\n        * @type {string|Function|undefined}\n        */ /**\n        * A callback function to execute on each step of each attribute or CSS property\n        * that's being animated. The first argument contains information about the\n        * animation and progress.\n        * @name Highcharts.AnimationOptionsObject#step\n        * @type {Function|undefined}\n        */\n        /**\n         * Creates a frame for the animated SVG element.\n         *\n         * @callback Highcharts.AnimationStepCallbackFunction\n         *\n         * @param {Highcharts.SVGElement} this\n         *        The SVG element to animate.\n         *\n         * @return {void}\n         */\n        /**\n         * Interface description for a class.\n         *\n         * @interface Highcharts.Class<T>\n         * @extends Function\n         */ /**\n        * Class constructor.\n        * @function Highcharts.Class<T>#new\n        * @param {...Array<*>} args\n        *        Constructor arguments.\n        * @return {T}\n        *         Class instance.\n        */\n        /**\n         * A style object with camel case property names to define visual appearance of\n         * a SVG element or HTML element. The properties can be whatever styles are\n         * supported on the given SVG or HTML element.\n         *\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         *\n         * @interface Highcharts.CSSObject\n         */ /**\n        * @name Highcharts.CSSObject#[key:string]\n        * @type {boolean|number|string|undefined}\n        */ /**\n        * Background style for the element.\n        * @name Highcharts.CSSObject#background\n        * @type {string|undefined}\n        */ /**\n        * Background color of the element.\n        * @name Highcharts.CSSObject#backgroundColor\n        * @type {Highcharts.ColorString|undefined}\n        */ /**\n        * Border style for the element.\n        * @name Highcharts.CSSObject#border\n        * @type {string|undefined}\n        */ /**\n        * Radius of the element border.\n        * @name Highcharts.CSSObject#borderRadius\n        * @type {number|undefined}\n        */ /**\n        * Color used in the element. The 'contrast' option is a Highcharts custom\n        * property that results in black or white, depending on the background of the\n        * element.\n        * @name Highcharts.CSSObject#color\n        * @type {'contrast'|Highcharts.ColorString|undefined}\n        */ /**\n        * Style of the mouse cursor when resting over the element.\n        * @name Highcharts.CSSObject#cursor\n        * @type {Highcharts.CursorValue|undefined}\n        */ /**\n        * Font family of the element text. Multiple values have to be in decreasing\n        * preference order and separated by comma.\n        * @name Highcharts.CSSObject#fontFamily\n        * @type {string|undefined}\n        */ /**\n        * Font size of the element text.\n        * @name Highcharts.CSSObject#fontSize\n        * @type {string|undefined}\n        */ /**\n        * Font weight of the element text.\n        * @name Highcharts.CSSObject#fontWeight\n        * @type {string|undefined}\n        */ /**\n        * Height of the element.\n        * @name Highcharts.CSSObject#height\n        * @type {number|undefined}\n        */ /**\n        * The maximum number of lines. If lines are cropped away, an ellipsis will be\n        * added.\n        * @name Highcharts.CSSObject#lineClamp\n        * @type {number|undefined}\n        */ /**\n        * Width of the element border.\n        * @name Highcharts.CSSObject#lineWidth\n        * @type {number|undefined}\n        */ /**\n        * Opacity of the element.\n        * @name Highcharts.CSSObject#opacity\n        * @type {number|undefined}\n        */ /**\n        * Space around the element content.\n        * @name Highcharts.CSSObject#padding\n        * @type {string|undefined}\n        */ /**\n        * Behaviour of the element when the mouse cursor rests over it.\n        * @name Highcharts.CSSObject#pointerEvents\n        * @type {string|undefined}\n        */ /**\n        * Positioning of the element.\n        * @name Highcharts.CSSObject#position\n        * @type {string|undefined}\n        */ /**\n        * Alignment of the element text.\n        * @name Highcharts.CSSObject#textAlign\n        * @type {string|undefined}\n        */ /**\n        * Additional decoration of the element text.\n        * @name Highcharts.CSSObject#textDecoration\n        * @type {string|undefined}\n        */ /**\n        * Outline style of the element text.\n        * @name Highcharts.CSSObject#textOutline\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text. Highcharts SVG elements support\n        * `ellipsis` when a `width` is set.\n        * @name Highcharts.CSSObject#textOverflow\n        * @type {string|undefined}\n        */ /**\n        * Top spacing of the element relative to the parent element.\n        * @name Highcharts.CSSObject#top\n        * @type {string|undefined}\n        */ /**\n        * Animated transition of selected element properties.\n        * @name Highcharts.CSSObject#transition\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text.\n        * @name Highcharts.CSSObject#whiteSpace\n        * @type {string|undefined}\n        */ /**\n        * Width of the element.\n        * @name Highcharts.CSSObject#width\n        * @type {number|undefined}\n        */\n        /**\n         * All possible cursor styles.\n         *\n         * @typedef {'alias'|'all-scroll'|'auto'|'cell'|'col-resize'|'context-menu'|'copy'|'crosshair'|'default'|'e-resize'|'ew-resize'|'grab'|'grabbing'|'help'|'move'|'n-resize'|'ne-resize'|'nesw-resize'|'no-drop'|'none'|'not-allowed'|'ns-resize'|'nw-resize'|'nwse-resize'|'pointer'|'progress'|'row-resize'|'s-resize'|'se-resize'|'sw-resize'|'text'|'vertical-text'|'w-resize'|'wait'|'zoom-in'|'zoom-out'} Highcharts.CursorValue\n         */\n        /**\n         * All possible dash styles.\n         *\n         * @typedef {'Dash'|'DashDot'|'Dot'|'LongDash'|'LongDashDot'|'LongDashDotDot'|'ShortDash'|'ShortDashDot'|'ShortDashDotDot'|'ShortDot'|'Solid'} Highcharts.DashStyleValue\n         */\n        /**\n         * Generic dictionary in TypeScript notation.\n         * Use the native `AnyRecord` instead.\n         *\n         * @deprecated\n         * @interface Highcharts.Dictionary<T>\n         */ /**\n        * @name Highcharts.Dictionary<T>#[key:string]\n        * @type {T}\n        */\n        /**\n         * The function callback to execute when the event is fired. The `this` context\n         * contains the instance, that fired the event.\n         *\n         * @callback Highcharts.EventCallbackFunction<T>\n         *\n         * @param {T} this\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Event arguments.\n         *\n         * @return {boolean|void}\n         */\n        /**\n         * The event options for adding function callback.\n         *\n         * @interface Highcharts.EventOptionsObject\n         */ /**\n        * The order the event handler should be called. This opens for having one\n        * handler be called before another, independent of in which order they were\n        * added.\n        * @name Highcharts.EventOptionsObject#order\n        * @type {number}\n        */ /**\n        * Whether an event should be passive or not.\n        * When set to `true`, the function specified by listener will never call\n        * `preventDefault()`.\n        * @name Highcharts.EventOptionsObject#passive\n        * @type boolean\n        */\n        /**\n         * Formats data as a string. Usually the data is accessible through the `this`\n         * keyword.\n         *\n         * @callback Highcharts.FormatterCallbackFunction<T>\n         *\n         * @param {T} this\n         *        Context to format\n         *\n         * @return {string}\n         *         Formatted text\n         */\n        /**\n         * An object of key-value pairs for HTML attributes.\n         *\n         * @typedef {Highcharts.Dictionary<boolean|number|string|Function>} Highcharts.HTMLAttributes\n         */\n        /**\n         * An HTML DOM element. The type is a reference to the regular HTMLElement in\n         * the global scope.\n         *\n         * @typedef {global.HTMLElement} Highcharts.HTMLDOMElement\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\n         */\n        /**\n         * The iterator callback.\n         *\n         * @callback Highcharts.ObjectEachCallbackFunction<T>\n         *\n         * @param {T} this\n         *        The context.\n         *\n         * @param {*} value\n         *        The property value.\n         *\n         * @param {string} key\n         *        The property key.\n         *\n         * @param {*} obj\n         *        The object that objectEach is being applied to.\n         */\n        /**\n         * An object containing `left` and `top` properties for the position in the\n         * page.\n         *\n         * @interface Highcharts.OffsetObject\n         */ /**\n        * Left distance to the page border.\n        * @name Highcharts.OffsetObject#left\n        * @type {number}\n        */ /**\n        * Top distance to the page border.\n        * @name Highcharts.OffsetObject#top\n        * @type {number}\n        */\n        /**\n         * Describes a range.\n         *\n         * @interface Highcharts.RangeObject\n         */ /**\n        * Maximum number of the range.\n        * @name Highcharts.RangeObject#max\n        * @type {number}\n        */ /**\n        * Minimum number of the range.\n        * @name Highcharts.RangeObject#min\n        * @type {number}\n        */\n        /**\n         * If a number is given, it defines the pixel length. If a percentage string is\n         * given, like for example `'50%'`, the setting defines a length relative to a\n         * base size, for example the size of a container.\n         *\n         * @typedef {number|string} Highcharts.RelativeSize\n         */\n        /**\n         * Proceed function to call original (wrapped) function.\n         *\n         * @callback Highcharts.WrapProceedFunction\n         *\n         * @param {*} [arg1]\n         *        Optional argument. Without any arguments defaults to first argument of\n         *        the wrapping function.\n         *\n         * @param {*} [arg2]\n         *        Optional argument. Without any arguments defaults to second argument\n         *        of the wrapping function.\n         *\n         * @param {*} [arg3]\n         *        Optional argument. Without any arguments defaults to third argument of\n         *        the wrapping function.\n         *\n         * @return {*}\n         *         Return value of the original function.\n         */\n        /**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions. The most important member of the namespace would be the\n         * chart constructor.\n         *\n         * @example\n         * let chart = Highcharts.chart('container', { ... });\n         *\n         * @namespace Highcharts\n         */\n        ''; // Detach doclets above\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Core/Renderer/HTML/AST.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { SVG_NS, win } = H;\n        const { attr, createElement, css, error, isFunction, isString, objectEach, splat } = U;\n        const { trustedTypes } = win;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // Create the trusted type policy. This should not be exposed.\n        const trustedTypesPolicy = (trustedTypes &&\n            isFunction(trustedTypes.createPolicy) &&\n            trustedTypes.createPolicy('highcharts', {\n                createHTML: (s) => s\n            }));\n        const emptyHTML = trustedTypesPolicy ?\n            trustedTypesPolicy.createHTML('') :\n            '';\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AST class represents an abstract syntax tree of HTML or SVG content. It\n         * can take HTML as an argument, parse it, optionally transform it to SVG, then\n         * perform sanitation before inserting it into the DOM.\n         *\n         * @class\n         * @name Highcharts.AST\n         *\n         * @param {string|Array<Highcharts.ASTNode>} source\n         * Either an HTML string or an ASTNode list to populate the tree.\n         */\n        class AST {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Filter an object of SVG or HTML attributes against the allow list.\n             *\n             * @static\n             *\n             * @function Highcharts.AST#filterUserAttributes\n             *\n             * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The filtered attributes\n             */\n            static filterUserAttributes(attributes) {\n                objectEach(attributes, (val, key) => {\n                    let valid = true;\n                    if (AST.allowedAttributes.indexOf(key) === -1) {\n                        valid = false;\n                    }\n                    if (['background', 'dynsrc', 'href', 'lowsrc', 'src']\n                        .indexOf(key) !== -1) {\n                        valid = isString(val) && AST.allowedReferences.some((ref) => val.indexOf(ref) === 0);\n                    }\n                    if (!valid) {\n                        error(33, false, void 0, {\n                            'Invalid attribute in config': `${key}`\n                        });\n                        delete attributes[key];\n                    }\n                    // #17753, < is not allowed in SVG attributes\n                    if (isString(val) && attributes[key]) {\n                        attributes[key] = val.replace(/</g, '&lt;');\n                    }\n                });\n                return attributes;\n            }\n            static parseStyle(style) {\n                return style\n                    .split(';')\n                    .reduce((styles, line) => {\n                    const pair = line.split(':').map((s) => s.trim()), key = pair.shift();\n                    if (key && pair.length) {\n                        styles[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = pair.join(':'); // #17146\n                    }\n                    return styles;\n                }, {});\n            }\n            /**\n             * Utility function to set html content for an element by passing in a\n             * markup string. The markup is safely parsed by the AST class to avoid\n             * XSS vulnerabilities. This function should be used instead of setting\n             * `innerHTML` in all cases where the content is not fully trusted.\n             *\n             * @static\n             * @function Highcharts.AST#setElementHTML\n             *\n             * @param {SVGDOMElement|HTMLDOMElement} el\n             * Node to set content of.\n             *\n             * @param {string} html\n             * Markup string\n             */\n            static setElementHTML(el, html) {\n                el.innerHTML = AST.emptyHTML; // Clear previous\n                if (html) {\n                    const ast = new AST(html);\n                    ast.addToDOM(el);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n            constructor(source) {\n                this.nodes = typeof source === 'string' ?\n                    this.parseMarkup(source) : source;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add the tree defined as a hierarchical JS structure to the DOM\n             *\n             * @function Highcharts.AST#addToDOM\n             *\n             * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n             * The node where it should be added\n             *\n             * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n             * The inserted node.\n             */\n            addToDOM(parent) {\n                /**\n                 * @private\n                 * @param {Highcharts.ASTNode} subtree\n                 * HTML/SVG definition\n                 * @param {Element} [subParent]\n                 * parent node\n                 * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n                 * The inserted node.\n                 */\n                function recurse(subtree, subParent) {\n                    let ret;\n                    splat(subtree).forEach(function (item) {\n                        const tagName = item.tagName;\n                        const textNode = item.textContent ?\n                            H.doc.createTextNode(item.textContent) :\n                            void 0;\n                        // Whether to ignore the AST filtering totally, #15345\n                        const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n                        let node;\n                        if (tagName) {\n                            if (tagName === '#text') {\n                                node = textNode;\n                            }\n                            else if (AST.allowedTags.indexOf(tagName) !== -1 ||\n                                bypassHTMLFiltering) {\n                                const NS = tagName === 'svg' ?\n                                    SVG_NS :\n                                    (subParent.namespaceURI || SVG_NS);\n                                const element = H.doc.createElementNS(NS, tagName);\n                                const attributes = item.attributes || {};\n                                // Apply attributes from root of AST node, legacy from\n                                // from before TextBuilder\n                                objectEach(item, function (val, key) {\n                                    if (key !== 'tagName' &&\n                                        key !== 'attributes' &&\n                                        key !== 'children' &&\n                                        key !== 'style' &&\n                                        key !== 'textContent') {\n                                        attributes[key] = val;\n                                    }\n                                });\n                                attr(element, bypassHTMLFiltering ?\n                                    attributes :\n                                    AST.filterUserAttributes(attributes));\n                                if (item.style) {\n                                    css(element, item.style);\n                                }\n                                // Add text content\n                                if (textNode) {\n                                    element.appendChild(textNode);\n                                }\n                                // Recurse\n                                recurse(item.children || [], element);\n                                node = element;\n                            }\n                            else {\n                                error(33, false, void 0, {\n                                    'Invalid tagName in config': tagName\n                                });\n                            }\n                        }\n                        // Add to the tree\n                        if (node) {\n                            subParent.appendChild(node);\n                        }\n                        ret = node;\n                    });\n                    // Return last node added (on top level it's the only one)\n                    return ret;\n                }\n                return recurse(this.nodes, parent);\n            }\n            /**\n             * Parse HTML/SVG markup into AST Node objects. Used internally from the\n             * constructor.\n             *\n             * @private\n             *\n             * @function Highcharts.AST#getNodesFromMarkup\n             *\n             * @param {string} markup The markup string.\n             *\n             * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n             */\n            parseMarkup(markup) {\n                const nodes = [];\n                markup = markup\n                    .trim()\n                    // The style attribute throws a warning when parsing when CSP is\n                    // enabled (#6884), so use an alias and pick it up below\n                    // Make all quotation marks parse correctly to DOM (#17627)\n                    .replace(/ style=([\"'])/g, ' data-style=$1');\n                let doc;\n                try {\n                    doc = new DOMParser().parseFromString(trustedTypesPolicy ?\n                        trustedTypesPolicy.createHTML(markup) :\n                        markup, 'text/html');\n                }\n                catch (e) {\n                    // There are two cases where this fails:\n                    // 1. IE9 and PhantomJS, where the DOMParser only supports parsing\n                    //    XML\n                    // 2. Due to a Chromium issue where chart redraws are triggered by\n                    //    a `beforeprint` event (#16931),\n                    //    https://issues.chromium.org/issues/40222135\n                }\n                if (!doc) {\n                    const body = createElement('div');\n                    body.innerHTML = markup;\n                    doc = { body };\n                }\n                const appendChildNodes = (node, addTo) => {\n                    const tagName = node.nodeName.toLowerCase();\n                    // Add allowed tags\n                    const astNode = {\n                        tagName\n                    };\n                    if (tagName === '#text') {\n                        astNode.textContent = node.textContent || '';\n                    }\n                    const parsedAttributes = node.attributes;\n                    // Add attributes\n                    if (parsedAttributes) {\n                        const attributes = {};\n                        [].forEach.call(parsedAttributes, (attrib) => {\n                            if (attrib.name === 'data-style') {\n                                astNode.style = AST.parseStyle(attrib.value);\n                            }\n                            else {\n                                attributes[attrib.name] = attrib.value;\n                            }\n                        });\n                        astNode.attributes = attributes;\n                    }\n                    // Handle children\n                    if (node.childNodes.length) {\n                        const children = [];\n                        [].forEach.call(node.childNodes, (childNode) => {\n                            appendChildNodes(childNode, children);\n                        });\n                        if (children.length) {\n                            astNode.children = children;\n                        }\n                    }\n                    addTo.push(astNode);\n                };\n                [].forEach.call(doc.body.childNodes, (childNode) => appendChildNodes(childNode, nodes));\n                return nodes;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * The list of allowed SVG or HTML attributes, used for sanitizing\n         * potentially harmful content from the chart configuration before adding to\n         * the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n         *\n         * @example\n         * // Allow a custom, trusted attribute\n         * Highcharts.AST.allowedAttributes.push('data-value');\n         *\n         * @name Highcharts.AST.allowedAttributes\n         * @type {Array<string>}\n         */\n        AST.allowedAttributes = [\n            'alt',\n            'aria-controls',\n            'aria-describedby',\n            'aria-expanded',\n            'aria-haspopup',\n            'aria-hidden',\n            'aria-label',\n            'aria-labelledby',\n            'aria-live',\n            'aria-pressed',\n            'aria-readonly',\n            'aria-roledescription',\n            'aria-selected',\n            'class',\n            'clip-path',\n            'color',\n            'colspan',\n            'cx',\n            'cy',\n            'd',\n            'disabled',\n            'dx',\n            'dy',\n            'fill',\n            'filterUnits',\n            'flood-color',\n            'flood-opacity',\n            'height',\n            'href',\n            'id',\n            'in',\n            'in2',\n            'markerHeight',\n            'markerWidth',\n            'offset',\n            'opacity',\n            'operator',\n            'orient',\n            'padding',\n            'paddingLeft',\n            'paddingRight',\n            'patternUnits',\n            'r',\n            'radius',\n            'refX',\n            'refY',\n            'result',\n            'role',\n            'rowspan',\n            'scope',\n            'slope',\n            'src',\n            'startOffset',\n            'stdDeviation',\n            'stroke-linecap',\n            'stroke-width',\n            'stroke',\n            'style',\n            'summary',\n            'tabindex',\n            'tableValues',\n            'target',\n            'text-align',\n            'text-anchor',\n            'textAnchor',\n            'textLength',\n            'title',\n            'type',\n            'valign',\n            'width',\n            'x',\n            'x1',\n            'x2',\n            'xlink:href',\n            'y',\n            'y1',\n            'y2',\n            'zIndex'\n        ];\n        /**\n         * The list of allowed references for referring attributes like `href` and\n         * `src`. Attribute values will only be allowed if they start with one of\n         * these strings.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n         *\n         * @example\n         * // Allow tel:\n         * Highcharts.AST.allowedReferences.push('tel:');\n         *\n         * @name    Highcharts.AST.allowedReferences\n         * @type    {Array<string>}\n         */\n        AST.allowedReferences = [\n            'https://',\n            'http://',\n            'mailto:',\n            '/',\n            '../',\n            './',\n            '#'\n        ];\n        /**\n         * The list of allowed SVG or HTML tags, used for sanitizing potentially\n         * harmful content from the chart configuration before adding to the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n         *\n         * @example\n         * // Allow a custom, trusted tag\n         * Highcharts.AST.allowedTags.push('blink'); // ;)\n         *\n         * @name    Highcharts.AST.allowedTags\n         * @type    {Array<string>}\n         */\n        AST.allowedTags = [\n            '#text',\n            'a',\n            'abbr',\n            'b',\n            'br',\n            'button',\n            'caption',\n            'circle',\n            'clipPath',\n            'code',\n            'dd',\n            'defs',\n            'div',\n            'dl',\n            'dt',\n            'em',\n            'feComponentTransfer',\n            'feComposite',\n            'feDropShadow',\n            'feFlood',\n            'feFuncA',\n            'feFuncB',\n            'feFuncG',\n            'feFuncR',\n            'feGaussianBlur',\n            'feMerge',\n            'feMergeNode',\n            'feMorphology',\n            'feOffset',\n            'filter',\n            'h1',\n            'h2',\n            'h3',\n            'h4',\n            'h5',\n            'h6',\n            'hr',\n            'i',\n            'img',\n            'li',\n            'linearGradient',\n            'marker',\n            'ol',\n            'p',\n            'path',\n            'pattern',\n            'pre',\n            'rect',\n            'small',\n            'span',\n            'stop',\n            'strong',\n            'style',\n            'sub',\n            'sup',\n            'svg',\n            'table',\n            'tbody',\n            'td',\n            'text',\n            'textPath',\n            'th',\n            'thead',\n            'title',\n            'tr',\n            'tspan',\n            'u',\n            'ul'\n        ];\n        AST.emptyHTML = emptyHTML;\n        /**\n         * Allow all custom SVG and HTML attributes, references and tags (together\n         * with potentially harmful ones) to be added to the DOM from the chart\n         * configuration. In other words, disable the allow-listing which is the\n         * primary functionality of the AST.\n         *\n         * WARNING: Setting this property to `true` while allowing untrusted user\n         * data in the chart configuration will expose your application to XSS\n         * security risks!\n         *\n         * Note that in case you want to allow a known set of tags or attributes,\n         * you should allow-list them instead of disabling the filtering totally.\n         * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n         * [allowedReferences](Highcharts.AST#.allowedReferences) and\n         * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n         * setting is intended only for those cases where allow-listing is not\n         * practical, and the chart configuration already comes from a secure\n         * source.\n         *\n         * @example\n         * // Allow all custom attributes, references and tags (disable DOM XSS\n         * // filtering)\n         * Highcharts.AST.bypassHTMLFiltering = true;\n         *\n         * @name Highcharts.AST.bypassHTMLFiltering\n         * @static\n         */\n        AST.bypassHTMLFiltering = false;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Serialized form of an SVG/HTML definition, including children.\n         *\n         * @interface Highcharts.ASTNode\n         */ /**\n        * @name Highcharts.ASTNode#attributes\n        * @type {Highcharts.SVGAttributes|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#children\n        * @type {Array<Highcharts.ASTNode>|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#tagName\n        * @type {string|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#textContent\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in file\n\n        return AST;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * General options for the chart.\n         *\n         * @optionparent chart\n         */\n        const ChartDefaults = {\n            /**\n             * Default `mapData` for all series, in terms of a GeoJSON or TopoJSON\n             * object. If set to a string, it functions as an index into the\n             * `Highcharts.maps` array.\n             *\n             * For picking out individual shapes and geometries to use for each series\n             * of the map, see [series.mapData](#series.map.mapData).\n             *\n             * @sample    maps/demo/geojson\n             *            Loading GeoJSON data\n             * @sample    maps/chart/topojson\n             *            Loading TopoJSON data\n             *\n             * @type      {string|Array<*>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.map\n             */\n            /**\n             * Set lat/lon transformation definitions for the chart. If not defined,\n             * these are extracted from the map data.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.mapTransforms\n             */\n            /**\n             * When using multiple axes, the ticks of two or more opposite axes\n             * will automatically be aligned by adding ticks to the axis or axes\n             * with the least ticks, as if `tickAmount` were specified.\n             *\n             * This can be prevented by setting `alignTicks` to false. If the grid\n             * lines look messy, it's a good idea to hide them for the secondary\n             * axis by setting `gridLineWidth` to 0.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false,\n             * then the `alignTicks ` will be disabled for the axis.\n             *\n             * Disabled for logarithmic axes.\n             *\n             * @sample {highcharts} highcharts/chart/alignticks-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/alignticks-false/\n             *         False\n             * @sample {highstock} stock/chart/alignticks-true/\n             *         True by default\n             * @sample {highstock} stock/chart/alignticks-false/\n             *         False\n             *\n             * @type      {boolean}\n             * @default   true\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignTicks\n             */\n            /**\n             * When using multiple axes, align the thresholds. When this is true, other\n             * ticks will also be aligned.\n             *\n             * Note that for line series and some other series types, the `threshold`\n             * option is set to `null` by default. This will in turn cause their y-axis\n             * to not have a threshold. In order to avoid that, set the series\n             * `threshold` to 0 or another number.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false, or\n             * if the axis is logarithmic, the threshold will not be aligned.\n             *\n             * @sample {highcharts} highcharts/chart/alignthresholds/ Set to true\n             *\n             * @since 10.0.0\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignThresholds\n             */\n            alignThresholds: false,\n            /**\n             * Set the overall animation for all chart updating. Animation can be\n             * disabled throughout the chart by setting it to false here. It can\n             * be overridden for each individual API method as a function parameter.\n             * The only animation not affected by this option is the initial series\n             * animation, see [plotOptions.series.animation](\n             * #plotOptions.series.animation).\n             *\n             * The animation can either be set as a boolean or a configuration\n             * object. If `true`, it will use the 'swing' jQuery easing and a\n             * duration of 500 ms. If used as a configuration object, the following\n             * properties are supported:\n             *\n             * - `defer`: The animation delay time in milliseconds.\n             *\n             * - `duration`: The duration of the animation in milliseconds.\n             *\n             * - `easing`: A string reference to an easing function set on the\n             *   `Math` object. See\n             *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n             *\n             * When zooming on a series with less than 100 points, the chart redraw\n             * will be done with animation, but in case of more data points, it is\n             * necessary to set this option to ensure animation on zoom.\n             *\n             * @sample {highcharts} highcharts/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highcharts} highcharts/chart/animation-duration/\n             *         With a longer duration\n             * @sample {highcharts} highcharts/chart/animation-easing/\n             *         With a jQuery UI easing\n             * @sample {highmaps} maps/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highmaps} maps/chart/animation-duration/\n             *         With a longer duration\n             *\n             * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @default   true\n             * @apioption chart.animation\n             */\n            /**\n             * A CSS class name to apply to the charts container `div`, allowing\n             * unique CSS styling for each chart.\n             *\n             * @type      {string}\n             * @apioption chart.className\n             */\n            /**\n             * Event listeners for the chart.\n             *\n             * @apioption chart.events\n             */\n            /**\n             * Fires when a series is added to the chart after load time, using the\n             * `addSeries` method. One parameter, `event`, is passed to the\n             * function, containing common event information. Through\n             * `event.options` you can access the series options that were passed to\n             * the `addSeries` method. Returning false prevents the series from\n             * being added.\n             *\n             * @sample {highcharts} highcharts/chart/events-addseries/\n             *         Alert on add series\n             * @sample {highstock} stock/chart/events-addseries/\n             *         Alert on add series\n             *\n             * @type      {Highcharts.ChartAddSeriesCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.addSeries\n             */\n            /**\n             * Fires when clicking on the plot background. One parameter, `event`,\n             * is passed to the function, containing common event information.\n             *\n             * Information on the clicked spot can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' value at the clicked spot. The primary axes\n             * are `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * click: function(e) {\n             *     console.log(\n             *         Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n             *         e.yAxis[0].value\n             *     )\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highcharts} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highstock} stock/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highstock} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highmaps} maps/chart/events-click/\n             *         Record coordinates on click\n             * @sample {highmaps} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             *\n             * @type      {Highcharts.ChartClickCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.click\n             */\n            /**\n             * Fires when the chart is finished loading. Since v4.2.2, it also waits\n             * for images to be loaded, for example from point markers. One\n             * parameter, `event`, is passed to the function, containing common\n             * event information.\n             *\n             * There is also a second parameter to the chart constructor where a\n             * callback function can be passed to be executed on chart.load.\n             *\n             * @sample {highcharts} highcharts/chart/events-load/\n             *         Alert on chart load\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-load/\n             *         Alert on chart load\n             * @sample {highmaps} maps/chart/events-load/\n             *         Add series on chart load\n             *\n             * @type      {Highcharts.ChartLoadCallbackFunction}\n             * @context   Highcharts.Chart\n             * @apioption chart.events.load\n             */\n            /**\n             * Fires when the chart is redrawn, either after a call to\n             * `chart.redraw()` or after an axis, series or point is modified with\n             * the `redraw` option set to `true`. One parameter, `event`, is passed\n             * to the function, containing common event information.\n             *\n             * @sample {highcharts} highcharts/chart/events-redraw/\n             *         Alert on chart redraw\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-redraw/\n             *         Alert on chart redraw when adding a series or moving the\n             *         zoomed range\n             * @sample {highmaps} maps/chart/events-redraw/\n             *         Set subtitle on chart redraw\n             *\n             * @type      {Highcharts.ChartRedrawCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.redraw\n             */\n            /**\n             * Fires after initial load of the chart (directly after the `load`\n             * event), and after each redraw (directly after the `redraw` event).\n             *\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             *\n             * @type      {Highcharts.ChartRenderCallbackFunction}\n             * @since     5.0.7\n             * @context   Highcharts.Chart\n             * @apioption chart.events.render\n             */\n            /**\n             * Fires when an area of the chart has been selected. Selection is\n             * enabled by setting the chart's zoomType. One parameter, `event`, is\n             * passed to the function, containing common event information. The\n             * default action for the selection event is to zoom the chart to the\n             * selected area. It can be prevented by calling\n             * `event.preventDefault()` or return false.\n             *\n             * Information on the selected area can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' min and max values. The primary axes are\n             * `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * selection: function(event) {\n             *     // log the min and max of the primary, datetime x-axis\n             *     console.log(\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].min\n             *         ),\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].max\n             *         )\n             *     );\n             *     // log the min and max of the y axis\n             *     console.log(event.yAxis[0].min, event.yAxis[0].max);\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highcharts} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample {highstock} stock/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highstock} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             *         (Highcharts)\n             *\n             * @type      {Highcharts.ChartSelectionCallbackFunction}\n             * @apioption chart.events.selection\n             */\n            /**\n             * The margin between the outer edge of the chart and the plot area.\n             * The numbers in the array designate top, right, bottom and left\n             * respectively. Use the options `marginTop`, `marginRight`,\n             * `marginBottom` and `marginLeft` for shorthand setting of one option.\n             *\n             * By default there is no margin. The actual space is dynamically\n             * calculated from the offset of axis labels, axis title, title,\n             * subtitle and legend in addition to the `spacingTop`, `spacingRight`,\n             * `spacingBottom` and `spacingLeft` options.\n             *\n             * @sample {highcharts} highcharts/chart/margins-zero/\n             *         Zero margins\n             * @sample {highstock} stock/chart/margin-zero/\n             *         Zero margins\n             *\n             * @type      {number|Array<number>}\n             * @apioption chart.margin\n             */\n            /**\n             * The margin between the bottom outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingBottom`.\n             *\n             * @sample {highcharts} highcharts/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highstock} stock/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginBottom\n             */\n            /**\n             * The margin between the left outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingLeft`.\n             *\n             * @sample {highcharts} highcharts/chart/marginleft/\n             *         150px left margin\n             * @sample {highstock} stock/chart/marginleft/\n             *         150px left margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginLeft\n             */\n            /**\n             * The margin between the right outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingRight`.\n             *\n             * @sample {highcharts} highcharts/chart/marginright/\n             *         100px right margin\n             * @sample {highstock} stock/chart/marginright/\n             *         100px right margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginRight\n             */\n            /**\n             * The margin between the top outer edge of the chart and the plot area.\n             * Use this to set a fixed pixel value for the margin as opposed to\n             * the default dynamic margin. See also `spacingTop`.\n             *\n             * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n             * @sample {highstock} stock/chart/margintop/\n             *         100px top margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginTop\n             */\n            /**\n             * Callback function to override the default function that formats all\n             * the numbers in the chart. Returns a string with the formatted number.\n             *\n             * @sample highcharts/members/highcharts-numberformat\n             *      Arabic digits in Highcharts\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             * @since 8.0.0\n             * @apioption chart.numberFormatter\n             */\n            /**\n             * When a chart with an x and a y-axis is rendered, we first pre-render the\n             * labels of both in order to measure them. Then, if either of the axis\n             * labels take up so much space that it significantly affects the length of\n             * the other axis, we repeat the process.\n             *\n             * By default we stop at two axis layout runs, but it may be that the second\n             * run also alter the space required by either axis, for example if it\n             * causes the labels to rotate. In this situation, a subsequent redraw of\n             * the chart may cause the tick and label placement to change for apparently\n             * no reason.\n             *\n             * Use the `axisLayoutRuns` option to set the maximum allowed number of\n             * repetitions. But keep in mind that the default value of 2 is set because\n             * every run costs performance time.\n             *\n             * **Note:** Changing that option to higher than the default might decrease\n             * performance significantly, especially with bigger sets of data.\n             *\n             * @type      {number}\n             * @default   2\n             * @since     11.3.0\n             * @apioption chart.axisLayoutRuns\n             */\n            /**\n             * Allows setting a key to switch between zooming and panning. Can be\n             * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n             * key on Windows) or `shift`. The keys are mapped directly to the key\n             * properties of the click event argument (`event.altKey`,\n             * `event.ctrlKey`, `event.metaKey` and `event.shiftKey`).\n             *\n             * @type       {string}\n             * @since      4.0.3\n             * @product    highcharts gantt\n             * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n             * @apioption  chart.panKey\n             */\n            /**\n             * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n             * to combine zooming and panning.\n             *\n             * On touch devices, when the [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) option is `true` (default), panning\n             * requires two fingers. To allow panning with one finger, set\n             * `followTouchMove` to `false`.\n             *\n             * @sample  {highcharts} highcharts/chart/pankey/ Zooming and panning\n             * @sample  {highstock} stock/chart/panning/ Zooming and xy panning\n             */\n            panning: {\n                /**\n                 * Enable or disable chart panning.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock|highmaps} true\n                 */\n                enabled: false,\n                /**\n                 * Decides in what dimensions the user can pan the chart. Can be\n                 * one of `x`, `y`, or `xy`.\n                 *\n                 * During panning, all axes will behave as if\n                 * [`startOnTick`](#yAxis.startOnTick) and\n                 * [`endOnTick`](#yAxis.endOnTick) were set to `false`. After the\n                 * panning action is finished, the axes will adjust to their actual\n                 * settings.\n                 *\n                 * **Note:** For non-cartesian series, the only supported panning type\n                 * is `xy`, as zooming in a single direction is not applicable due to\n                 * the radial nature of the coordinate system.\n                 *\n                 * @sample {highcharts} highcharts/chart/panning-type\n                 *         Zooming and xy panning\n                 *\n                 * @declare    Highcharts.OptionsChartPanningTypeValue\n                 * @type       {string}\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @product    highcharts highstock gantt\n                 */\n                type: 'x'\n            },\n            /**\n             * Equivalent to [zoomType](#chart.zoomType), but for multitouch\n             * gestures only. By default, the `pinchType` is the same as the\n             * `zoomType` setting. However, pinching can be enabled separately in\n             * some cases, for example in stock charts where a mouse drag pans the\n             * chart, while pinching is enabled. When [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) is true, pinchType only applies to\n             * two-finger touches.\n             *\n             * @type       {string}\n             * @default    {highcharts} undefined\n             * @default    {highstock} undefined\n             * @since      3.0\n             * @product    highcharts highstock gantt\n             * @deprecated\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @apioption  chart.pinchType\n             */\n            /**\n             * Whether to apply styled mode. When in styled mode, no presentational\n             * attributes or CSS are applied to the chart SVG. Instead, CSS rules\n             * are required to style the chart. The default style sheet is\n             * available from `https://code.highcharts.com/css/highcharts.css`.\n             *\n             * [Read more in the docs](https://www.highcharts.com/docs/chart-design-and-style/style-by-css)\n             * on what classes and variables are available.\n             *\n             * @sample highcharts/css/colors\n             *         Color theming with CSS\n             * @sample highcharts/css/prefers-color-scheme\n             *         Dynamic theme based on system settings\n             * @type       {boolean}\n             * @default    false\n             * @since      7.0\n             * @apioption  chart.styledMode\n             */\n            styledMode: false,\n            /**\n             * The corner radius of the outer chart border.\n             *\n             * @sample {highcharts} highcharts/chart/borderradius/\n             *         20px radius\n             * @sample {highstock} stock/chart/border/\n             *         10px radius\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             */\n            borderRadius: 0,\n            /**\n             * In styled mode, this sets how many colors the class names\n             * should rotate between. With ten colors, series (or points) are\n             * given class names like `highcharts-color-0`, `highcharts-color-1`\n             * [...] `highcharts-color-9`. The equivalent in non-styled mode\n             * is to set colors using the [colors](#colors) setting.\n             *\n             * @since      5.0.0\n             */\n            colorCount: 10,\n            /**\n             * By default, (because of memory and performance reasons) the chart does\n             * not copy the data but keeps it as a reference. In some cases, this might\n             * result in mutating the original data source. In order to prevent that,\n             * set that property to false. Please note that changing that might decrease\n             * performance, especially with bigger sets of data.\n             *\n             * @type       {boolean}\n             * @since 10.1.0\n             */\n            allowMutatingData: true,\n            /**\n             * If true, the axes will scale to the remaining visible series once\n             * one series is hidden. If false, hiding and showing a series will\n             * not affect the axes or the other series. For stacks, once one series\n             * within the stack is hidden, the rest of the stack will close in\n             * around it even if the axis is not affected.\n             *\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n             *         False\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n             *         True with stack\n             * @sample {highstock} stock/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highstock} stock/chart/ignorehiddenseries-false/\n             *         False\n             *\n             * @since   1.2.0\n             * @product highcharts highstock gantt\n             */\n            ignoreHiddenSeries: true,\n            /**\n             * Whether to invert the axes so that the x axis is vertical and y axis\n             * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n             * by default.\n             *\n             * @productdesc {highcharts}\n             * If a bar series is present in the chart, it will be inverted\n             * automatically. Inverting the chart doesn't have an effect if there\n             * are no cartesian series in the chart.\n             *\n             * @sample {highcharts} highcharts/chart/inverted/\n             *         Inverted line\n             * @sample {highstock} stock/navigator/inverted/\n             *         Inverted stock chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @product   highcharts highstock gantt\n             * @apioption chart.inverted\n             */\n            /**\n             * The distance between the outer edge of the chart and the content,\n             * like title or legend, or axis title and labels if present. The\n             * numbers in the array designate top, right, bottom and left\n             * respectively. Use the options spacingTop, spacingRight, spacingBottom\n             * and spacingLeft options for shorthand setting of one option.\n             *\n             * @type    {Array<number>}\n             * @see     [chart.margin](#chart.margin)\n             * @default [10, 10, 15, 10]\n             * @since   3.0.6\n             */\n            spacing: [10, 10, 15, 10],\n            /**\n             * The button that appears after a selection zoom, allowing the user\n             * to reset zoom. This option is deprecated in favor of\n             * [zooming](#chart.zooming).\n             *\n             * @since      2.2\n             * @deprecated 10.2.1\n             */\n            resetZoomButton: {\n                /**\n                 * What frame the button placement should be related to. Can be\n                 * either `plotBox` or `spacingBox`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 *\n                 * @type      {Highcharts.ButtonRelativeToValue}\n                 * @apioption chart.resetZoomButton.relativeTo\n                 */\n                /**\n                 * A collection of attributes for the button. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                 * border radius. The theme also supports `style`, a collection of\n                 * CSS properties for the text. Equivalent attributes for the hover\n                 * state are given in `theme.states.hover`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                theme: {\n                /**\n                 * The z-index of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.theme.zIndex\n                 */\n                },\n                /**\n                 * The position of the button.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 *\n                 * @type {Highcharts.AlignObject}\n                 */\n                position: {\n                /**\n                 * The horizontal alignment of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.align\n                 */\n                /**\n                 * The horizontal offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.x\n                 */\n                /**\n                 * The vertical alignment of the button.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @apioption chart.resetZoomButton.position.verticalAlign\n                 */\n                /**\n                 * The vertical offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.y\n                 */\n                }\n            },\n            /**\n             * The pixel width of the plot area border.\n             *\n             * @sample {highcharts} highcharts/chart/plotborderwidth/\n             *         1px border\n             * @sample {highstock} stock/chart/plotborder/\n             *         2px border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.plotBorderWidth\n             */\n            /**\n             * Whether to apply a drop shadow to the plot area. Requires that\n             * plotBackgroundColor be set. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample {highcharts} highcharts/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highstock} stock/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.plotShadow\n             */\n            /**\n             * When true, cartesian charts like line, spline, area and column are\n             * transformed into the polar coordinate system. This produces _polar\n             * charts_, also known as _radar charts_.\n             *\n             * @sample {highcharts} highcharts/demo/polar/\n             *         Polar chart\n             * @sample {highcharts} highcharts/demo/polar-wind-rose/\n             *         Wind rose, stacked polar column chart\n             * @sample {highcharts} highcharts/demo/polar-spider/\n             *         Spider web chart\n             * @sample {highcharts} highcharts/parallel-coordinates/polar/\n             *         Star plot, multivariate data in a polar chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     2.3.0\n             * @product   highcharts\n             * @requires  highcharts-more\n             * @apioption chart.polar\n             */\n            /**\n             * Whether to reflow the chart to fit the width of the container div\n             * on resizing the window.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/reflow-false/\n             *         False\n             * @sample {highstock} stock/chart/reflow-true/\n             *         True by default\n             * @sample {highstock} stock/chart/reflow-false/\n             *         False\n             * @sample {highmaps} maps/chart/reflow-true/\n             *         True by default\n             * @sample {highmaps} maps/chart/reflow-false/\n             *         False\n             *\n             * @since     2.1\n             */\n            reflow: true,\n            /**\n             * The HTML element where the chart will be rendered. If it is a string,\n             * the element by that id is used. The HTML element can also be passed\n             * by direct reference, or as the first argument of the chart\n             * constructor, in which case the option is not needed.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         String\n             * @sample {highcharts} highcharts/chart/renderto-object/\n             *         Object reference\n             * @sample {highstock} stock/chart/renderto-string/\n             *         String\n             * @sample {highstock} stock/chart/renderto-object/\n             *         Object reference\n             *\n             * @type      {string|Highcharts.HTMLDOMElement}\n             * @apioption chart.renderTo\n             */\n            /**\n             * The background color of the marker square when selecting (zooming\n             * in on) an area of the chart.\n             *\n             * @see In styled mode, the selection marker fill is set with the\n             *      `.highcharts-selection-marker` class.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   rgba(51,92,173,0.25)\n             * @since     2.1.7\n             * @apioption chart.selectionMarkerFill\n             */\n            /**\n             * Whether to apply a drop shadow to the global series group. This causes\n             * all the series to have the same shadow. Contrary to the `series.shadow`\n             * option, this prevents items from casting shadows on each other, like for\n             * others series in a stack. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample highcharts/chart/seriesgroupshadow/\n             *         Shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.seriesGroupShadow\n             */\n            /**\n             * Whether to apply a drop shadow to the outer chart area. Requires\n             * that backgroundColor be set. The shadow can be an object\n             * configuration containing `color`, `offsetX`, `offsetY`, `opacity` and\n             * `width`.\n             *\n             * @sample {highcharts} highcharts/chart/shadow/\n             *         Shadow\n             * @sample {highstock} stock/chart/shadow/\n             *         Shadow\n             * @sample {highmaps} maps/chart/border/\n             *         Chart border and shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to show the axes initially. This only applies to empty charts\n             * where series are added dynamically, as axes are automatically added\n             * to cartesian series.\n             *\n             * @sample {highcharts} highcharts/chart/showaxes-false/\n             *         False by default\n             * @sample {highcharts} highcharts/chart/showaxes-true/\n             *         True\n             *\n             * @type      {boolean}\n             * @since     1.2.5\n             * @product   highcharts gantt\n             * @apioption chart.showAxes\n             */\n            /**\n             * The space between the bottom edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highstock} stock/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   15\n             * @since     2.1\n             * @apioption chart.spacingBottom\n             */\n            /**\n             * The space between the left edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highstock} stock/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingLeft\n             */\n            /**\n             * The space between the right edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingright-100/\n             *         Spacing set to 100\n             * @sample {highcharts} highcharts/chart/spacingright-legend/\n             *         Legend in right position with default spacing\n             * @sample {highstock} stock/chart/spacingright/\n             *         Spacing set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingRight\n             */\n            /**\n             * The space between the top edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingtop-100/\n             *         A top spacing of 100\n             * @sample {highcharts} highcharts/chart/spacingtop-10/\n             *         Floating chart title makes the plot area align to the default\n             *         spacingTop of 10.\n             * @sample {highstock} stock/chart/spacingtop/\n             *         A top spacing of 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingTop\n             */\n            /**\n             * Additional CSS styles to apply inline to the container `div` and the root\n             * SVG.\n             *\n             * According to the CSS syntax documentation, it is recommended to quote\n             * font family names that contain white space, digits, or punctuation\n             * characters other than hyphens. In such cases, wrap the fontFamily\n             * name as follows: `fontFamily: '\"Font name\"'`.\n             *\n             * Since v11, the root font size is 1rem by default, and all child element\n             * are given a relative `em` font size by default. This allows implementers\n             * to control all the chart's font sizes by only setting the root level.\n             *\n             * @see    In styled mode, general chart styles can be set with the\n             *         `.highcharts-root` class.\n             * @sample {highcharts} highcharts/chart/style-serif-font/\n             *         Using a serif type font\n             * @sample {highcharts} highcharts/chart/style-special-font/\n             *         Using a font with special character in name\n             * @sample {highcharts} highcharts/members/relative-font-size/\n             *         Relative font sizes\n             * @sample {highcharts} highcharts/css/em/\n             *         Styled mode with relative font sizes\n             * @sample {highstock} stock/chart/style/\n             *         Using a serif type font\n             * @sample {highmaps} maps/chart/style-serif-font/\n             *         Using a serif type font\n             *\n             * @type      {Highcharts.CSSObject}\n             * @default   {\"fontFamily\": \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', sans-serif\", \"fontSize\":\"1rem\"}\n             * @apioption chart.style\n             */\n            /**\n             * The default series type for the chart. Can be any of the chart types\n             * listed under [plotOptions](#plotOptions) and [series](#series) or can\n             * be a series provided by an additional module.\n             *\n             * In TypeScript this option has no effect in sense of typing and\n             * instead the `type` option must always be set in the series.\n             *\n             * @sample {highcharts} highcharts/chart/type-bar/\n             *         Bar\n             * @sample {highstock} stock/chart/type/\n             *         Areaspline\n             * @sample {highmaps} maps/chart/type-mapline/\n             *         Mapline\n             *\n             * @type       {string}\n             * @default    {highcharts} line\n             * @default    {highstock} line\n             * @default    {highmaps} map\n             * @since      2.1.0\n             * @apioption  chart.type\n             */\n            type: 'line',\n            /**\n             * Decides in what dimensions the user can zoom by dragging the mouse.\n             * Can be one of `x`, `y` or `xy`.\n             *\n             * @see [panKey](#chart.panKey)\n             *\n             * @sample {highcharts} highcharts/chart/zoomtype-none/\n             *         None by default\n             * @sample {highcharts} highcharts/chart/zoomtype-x/\n             *         X\n             * @sample {highcharts} highcharts/chart/zoomtype-y/\n             *         Y\n             * @sample {highcharts} highcharts/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highcharts} highcharts/chart/zoomtype-polar/\n             *         Zoom on polar chart\n             * @sample {highstock} stock/demo/basic-line/\n             *         None by default\n             * @sample {highstock} stock/chart/zoomtype-x/\n             *         X\n             * @sample {highstock} stock/chart/zoomtype-y/\n             *         Y\n             * @sample {highstock} stock/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highmaps} maps/chart/zoomtype-xy/\n             *         Map with selection zoom\n             *\n             * @type       {string}\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @deprecated\n             * @apioption  chart.zoomType\n             */\n            /**\n             * Enables zooming by a single touch, in combination with\n             * [chart.zoomType](#chart.zoomType). When enabled, two-finger pinch\n             * will still work as set up by [chart.pinchType](#chart.pinchType).\n             * However, `zoomBySingleTouch` will interfere with touch-dragging the\n             * chart to read the tooltip. And especially when vertical zooming is\n             * enabled, it will make it hard to scroll vertically on the page.\n             * @since      9.0.0\n             * @sample     highcharts/chart/zoombysingletouch\n             *             Zoom by single touch enabled, with buttons to toggle\n             * @product    highcharts highstock gantt\n             * @deprecated\n             */\n            /**\n             * Chart zooming options.\n             * @since 10.2.1\n             *\n             * @sample     highcharts/plotoptions/sankey-node-color\n             *             Zooming in sankey series\n             * @sample     highcharts/series-treegraph/link-types\n             *             Zooming in treegraph series\n             */\n            zooming: {\n                /**\n                 * Equivalent to [type](#chart.zooming.type), but for multitouch\n                 * gestures only. By default, the `pinchType` is the same as the\n                 * `type` setting. However, pinching can be enabled separately in\n                 * some cases, for example in stock charts where a mouse drag pans the\n                 * chart, while pinching is enabled. When [tooltip.followTouchMove](\n                 * #tooltip.followTouchMove) is true, pinchType only applies to\n                 * two-finger touches.\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @default    {highstock} x\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.pinchType\n                 */\n                /**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * **Note:** For non-cartesian series, the only supported zooming type\n                 * is `xy`, as zooming in a single direction is not applicable due to\n                 * the radial nature of the coordinate system.\n                 *\n                 * @declare    Highcharts.OptionsChartZoomingTypeValue\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.type\n                 */\n                /**\n                 * Set a key to hold when dragging to zoom the chart. This is useful to\n                 * avoid zooming while moving points. Should be set different than\n                 * [chart.panKey](#chart.panKey).\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @requires   modules/draggable-points\n                 * @apioption  chart.zooming.key\n                 */\n                /**\n                 * Enables zooming by a single touch, in combination with\n                 * [chart.zooming.type](#chart.zooming.type). When enabled, two-finger\n                 * pinch will still work as set up by [chart.zooming.pinchType]\n                 * (#chart.zooming.pinchType). However, `singleTouch` will interfere\n                 * with touch-dragging the chart to read the tooltip. And especially\n                 * when vertical zooming is enabled, it will make it hard to scroll\n                 * vertically on the page.\n                 *\n                 * @sample  highcharts/chart/zoombysingletouch\n                 *          Zoom by single touch enabled, with buttons to toggle\n                 *\n                 * @product highcharts highstock gantt\n                 */\n                singleTouch: false,\n                /**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 */\n                resetButton: {\n                    /**\n                     * What frame the button placement should be related to. Can be\n                     * either `plotBox` or `spacingBox`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     *\n                     * @type      {Highcharts.ButtonRelativeToValue}\n                     * @default   plot\n                     * @apioption chart.zooming.resetButton.relativeTo\n                     */\n                    /**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                     * border radius. The theme also supports `style`, a collection of\n                     * CSS properties for the text. Equivalent attributes for the hover\n                     * state are given in `theme.states.hover`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     *\n                     * @type  {Highcharts.SVGAttributes}\n                     * @since 10.2.1\n                     */\n                    theme: {\n                        /** @internal */\n                        zIndex: 6\n                    },\n                    /**\n                     * The position of the button.\n                     *\n                     * Note: Adjusting position values might cause overlap with chart\n                     * elements. Ensure coordinates do not obstruct other components or\n                     * data visibility.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     *\n                     * @type  {Highcharts.AlignObject}\n                     * @since 10.2.1\n                     */\n                    position: {\n                        /**\n                         * The horizontal alignment of the button.\n                         */\n                        align: 'right',\n                        /**\n                         * The horizontal offset of the button.\n                         */\n                        x: -10,\n                        /**\n                         * The vertical alignment of the button.\n                         *\n                         * @type       {Highcharts.VerticalAlignValue}\n                         * @default    top\n                         * @apioption  chart.zooming.resetButton.position.verticalAlign\n                         */\n                        /**\n                         * The vertical offset of the button.\n                         */\n                        y: 10\n                    }\n                }\n            },\n            /**\n             * An explicit width for the chart. By default (when `null`) the width\n             * is calculated from the offset width of the containing element.\n             *\n             * @sample {highcharts} highcharts/chart/width/\n             *         800px wide\n             * @sample {highstock} stock/chart/width/\n             *         800px wide\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             *\n             * @type {null|number|string}\n             */\n            width: null,\n            /**\n             * An explicit height for the chart. If a _number_, the height is\n             * given in pixels. If given a _percentage string_ (for example\n             * `'56%'`), the height is given as the percentage of the actual chart\n             * width. This allows for preserving the aspect ratio across responsive\n             * sizes.\n             *\n             * By default (when `null`) the height is calculated from the offset\n             * height of the containing element, or 400 pixels if the containing\n             * element's height is 0.\n             *\n             * @sample {highcharts} highcharts/chart/height/\n             *         Forced 200px height\n             * @sample {highstock} stock/chart/height/\n             *         300px height\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             * @sample highcharts/chart/height-percent/\n             *         Highcharts with percentage height\n             * @sample highcharts/chart/height-inherited/\n             *         Chart with inherited height\n             *\n             * @type {null|number|string}\n             */\n            height: null,\n            /**\n             * The color of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/bordercolor/\n             *         Brown border\n             * @sample {highstock} stock/chart/border/\n             *         Brown border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: \"#334eff\" /* Palette.highlightColor80 */,\n            /**\n             * The pixel width of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/borderwidth/\n             *         5px border\n             * @sample {highstock} stock/chart/border/\n             *         2px border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.borderWidth\n             */\n            /**\n             * The background color or gradient for the outer chart area.\n             *\n             * @see In styled mode, the background is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The background color or gradient for the plot area.\n             *\n             * @see In styled mode, the plot background is set with the\n             *      `.highcharts-plot-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption chart.plotBackgroundColor\n             */\n            /**\n             * The URL for an image to use as the plot background. To set an image\n             * as the background for the entire chart, set a CSS background image\n             * to the container element. Note that for the image to be applied to\n             * exported charts, its URL needs to be accessible by the export server.\n             *\n             * @see In styled mode, a plot background image can be set with the\n             *      `.highcharts-plot-background` class and a [custom pattern](\n             *      https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundimage/\n             *         Skies\n             * @sample {highstock} stock/chart/plotbackgroundimage/\n             *         Skies\n             *\n             * @type      {string}\n             * @apioption chart.plotBackgroundImage\n             */\n            /**\n             * The color of the inner chart or plot area border.\n             *\n             * @see In styled mode, a plot border stroke can be set with the\n             *      `.highcharts-plot-border` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbordercolor/\n             *         Blue border\n             * @sample {highstock} stock/chart/plotborder/\n             *         Blue border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            plotBorderColor: \"#cccccc\" /* Palette.neutralColor20 */\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartDefaults;\n    });\n    _registerModule(_modules, 'Core/Color/Palettes.js', [], function () {\n        /**\n         * Series palettes for Highcharts. Series colors are defined in highcharts.css.\n         * **Do not edit this file!** This file is generated using the 'gulp palette' task.\n         * @private\n         */\n        const SeriesPalettes = {\n            /**\n             * Colors for data series and points\n             */\n            colors: [\n                '#2caffe',\n                '#544fc5',\n                '#00e272',\n                '#fe6a35',\n                '#6b8abc',\n                '#d568fb',\n                '#2ee0ca',\n                '#fa4b42',\n                '#feb56a',\n                '#91e8e1'\n            ]\n        };\n\n        return SeriesPalettes;\n    });\n    _registerModule(_modules, 'Shared/TimeBase.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { pageLang, win } = H;\n        const { defined, error, extend, isNumber, isObject, isString, merge, objectEach, pad, splat, timeUnits, ucfirst } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // To do: Remove this when we no longer need support for Safari < v14.1\n        const hasOldSafariBug = H.isSafari &&\n            win.Intl &&\n            !win.Intl.DateTimeFormat.prototype.formatRange;\n        const isDateTimeFormatOptions = (obj) => obj.main === void 0;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The Time class. Time settings are applied in general for each page using\n         * `Highcharts.setOptions`, or individually for each Chart item through the\n         * [time](https://api.highcharts.com/highcharts/time) options set.\n         *\n         * The Time object is available from {@link Highcharts.Chart#time}, which refers\n         * to  `Highcharts.time` unless individual time settings are applied for each\n         * chart.\n         *\n         * When configuring time settings for individual chart instances, be aware that\n         * using `Highcharts.dateFormat` or `Highcharts.time.dateFormat` within\n         * formatter callbacks relies on the global time object, which applies the\n         * global language and time zone settings. To ensure charts with local time\n         * settings function correctly, use `chart.time.dateFormat? instead. However,\n         * the recommended best practice is to use `setOptions` to define global time\n         * settings unless specific configurations are needed for each chart.\n         *\n         * @example\n         * // Apply time settings globally\n         * Highcharts.setOptions({\n         *     time: {\n         *         timezone: 'Europe/London'\n         *     }\n         * });\n         *\n         * // Apply time settings by instance\n         * const chart = Highcharts.chart('container', {\n         *     time: {\n         *         timezone: 'America/New_York'\n         *     },\n         *     series: [{\n         *         data: [1, 4, 3, 5]\n         *     }]\n         * });\n         *\n         * // Use the Time object of a chart instance\n         * console.log(\n         *        'Current time in New York',\n         *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n         * );\n         *\n         * // Standalone use\n         * const time = new Highcharts.Time({\n         *    timezone: 'America/New_York'\n         * });\n         * const s = time.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2020, 0, 1));\n         * console.log(s); // => 2019-12-31 19:00:00\n         *\n         * @since 6.0.5\n         *\n         * @class\n         * @name Highcharts.Time\n         *\n         * @param {Highcharts.TimeOptions} [options] Time options as defined in\n         * [chart.options.time](/highcharts/time).\n         */\n        class TimeBase {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(options, lang) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = {\n                    timezone: 'UTC'\n                };\n                this.variableTimezone = false;\n                this.Date = win.Date;\n                this.update(options);\n                this.lang = lang;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Update the Time object with current options. It is called internally on\n             * initializing Highcharts, after running `Highcharts.setOptions` and on\n             * `Chart.update`.\n             *\n             * @private\n             * @function Highcharts.Time#update\n             *\n             * @param {Highcharts.TimeOptions} [options]\n             *\n             */\n            update(options = {}) {\n                this.dTLCache = {};\n                this.options = options = merge(true, this.options, options);\n                const { timezoneOffset, useUTC, locale } = options;\n                // Allow using a different Date class\n                this.Date = options.Date || win.Date || Date;\n                // Assign the time zone. Handle the legacy, deprecated `useUTC` option.\n                let timezone = options.timezone;\n                if (defined(useUTC)) {\n                    timezone = useUTC ? 'UTC' : void 0;\n                }\n                // The Etc/GMT time zones do not support offsets with half-hour\n                // resolutions\n                if (timezoneOffset && timezoneOffset % 60 === 0) {\n                    timezone = 'Etc/GMT' + ((timezoneOffset > 0 ? '+' : '')) + timezoneOffset / 60;\n                }\n                /*\n                 * The time object has options allowing for variable time zones, meaning\n                 * the axis ticks or series data needs to consider this.\n                 */\n                this.variableTimezone = timezone !== 'UTC' &&\n                    timezone?.indexOf('Etc/GMT') !== 0;\n                this.timezone = timezone;\n                // Update locale.\n                if (this.lang && locale) {\n                    this.lang.locale = locale;\n                }\n                // Assign default time formats from locale strings\n                ['months', 'shortMonths', 'weekdays', 'shortWeekdays'].forEach((name) => {\n                    const isMonth = /months/i.test(name), isShort = /short/.test(name), options = {\n                        timeZone: 'UTC'\n                    };\n                    options[isMonth ? 'month' : 'weekday'] = isShort ? 'short' : 'long';\n                    this[name] = (isMonth ?\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] :\n                        [3, 4, 5, 6, 7, 8, 9]).map((position) => this.dateFormat(options, (isMonth ? 31 : 1) * 24 * 36e5 * position));\n                });\n            }\n            /**\n             * Get a date in terms of numbers (year, month, day etc) for further\n             * processing. Takes the current `timezone` setting into account. Inverse of\n             * `makeTime` and the native `Date` constructor and `Date.UTC`.\n             *\n             * The date is returned in array format with the following indices:\n             *\n             * 0: year,\n             * 1: month (zero based),\n             * 2: day,\n             * 3: hours,\n             * 4: minutes,\n             * 5: seconds,\n             * 6: milliseconds,\n             * 7: weekday (Sunday as 0)\n             *\n             * @function Highcharts.Time#toParts\n             *\n             * @param {number|Date} [timestamp]\n             *                 The timestamp in milliseconds since January 1st 1970.\n             *                 A Date object is also accepted.\n             *\n             * @return {Array<number>} The date parts in array format.\n             */\n            toParts(timestamp) {\n                const [weekday, dayOfMonth, month, year, hours, minutes, seconds] = this.dateTimeFormat({\n                    weekday: 'narrow',\n                    day: 'numeric',\n                    month: 'numeric',\n                    year: 'numeric',\n                    hour: 'numeric',\n                    minute: 'numeric',\n                    second: 'numeric'\n                }, timestamp, 'es')\n                    // The ', ' splitter is for all modern browsers:\n                    //      L, 6/3/2023, 14:30:00\n                    // The ' ' splitter is for legacy Safari with no comma between date\n                    // and time (#22445):\n                    //      L, 6/3/2023 14:30:00\n                    .split(/(?:, | |\\/|:)/g);\n                return [\n                    year,\n                    +month - 1,\n                    dayOfMonth,\n                    hours,\n                    minutes,\n                    seconds,\n                    // Milliseconds\n                    Math.floor(Number(timestamp) || 0) % 1000,\n                    // Spanish weekday index\n                    'DLMXJVS'.indexOf(weekday)\n                ].map(Number);\n            }\n            /**\n             * Shorthand to get a cached `Intl.DateTimeFormat` instance.\n             */\n            dateTimeFormat(options, timestamp, locale = this.options.locale || pageLang) {\n                const cacheKey = JSON.stringify(options) + locale;\n                if (isString(options)) {\n                    options = this.str2dtf(options);\n                }\n                let dTL = this.dTLCache[cacheKey];\n                if (!dTL) {\n                    options.timeZone ?? (options.timeZone = this.timezone);\n                    try {\n                        dTL = new Intl.DateTimeFormat(locale, options);\n                    }\n                    catch (e) {\n                        if (/Invalid time zone/i.test(e.message)) {\n                            error(34);\n                            options.timeZone = 'UTC';\n                            dTL = new Intl.DateTimeFormat(locale, options);\n                        }\n                        else {\n                            error(e.message, false);\n                        }\n                    }\n                }\n                this.dTLCache[cacheKey] = dTL;\n                return dTL?.format(timestamp) || '';\n            }\n            /**\n             * Take a locale-aware string format and return a full DateTimeFormat in\n             * object form.\n             */\n            str2dtf(s, dtf = {}) {\n                const mapping = {\n                    L: { fractionalSecondDigits: 3 },\n                    S: { second: '2-digit' },\n                    M: { minute: 'numeric' },\n                    H: { hour: '2-digit' },\n                    k: { hour: 'numeric' },\n                    E: { weekday: 'narrow' },\n                    a: { weekday: 'short' },\n                    A: { weekday: 'long' },\n                    d: { day: '2-digit' },\n                    e: { day: 'numeric' },\n                    b: { month: 'short' },\n                    B: { month: 'long' },\n                    m: { month: '2-digit' },\n                    o: { month: 'numeric' },\n                    y: { year: '2-digit' },\n                    Y: { year: 'numeric' }\n                };\n                Object.keys(mapping).forEach((key) => {\n                    if (s.indexOf(key) !== -1) {\n                        extend(dtf, mapping[key]);\n                    }\n                });\n                return dtf;\n            }\n            /**\n             * Make a time and returns milliseconds. Similar to `Date.UTC`, but takes\n             * the current `timezone` setting into account.\n             *\n             * @function Highcharts.Time#makeTime\n             *\n             * @param {number} year\n             *        The year\n             *\n             * @param {number} month\n             *        The month. Zero-based, so January is 0.\n             *\n             * @param {number} [date=1]\n             *        The day of the month\n             *\n             * @param {number} [hours=0]\n             *        The hour of the day, 0-23.\n             *\n             * @param {number} [minutes=0]\n             *        The minutes\n             *\n             * @param {number} [seconds=0]\n             *        The seconds\n             *\n             * @return {number}\n             *         The time in milliseconds since January 1st 1970.\n             */\n            makeTime(year, month, date = 1, hours = 0, minutes, seconds, milliseconds) {\n                // eslint-disable-next-line new-cap\n                let d = this.Date.UTC(year, month, date, hours, minutes || 0, seconds || 0, milliseconds || 0);\n                if (this.timezone !== 'UTC') {\n                    const offset = this.getTimezoneOffset(d);\n                    d += offset;\n                    // Adjustments close to DST transitions\n                    if (\n                    // Optimize for speed by limiting the number of calls to\n                    // `getTimezoneOffset`. According to\n                    // https://en.wikipedia.org/wiki/Daylight_saving_time_by_country,\n                    // DST change may only occur in these months.\n                    [2, 3, 8, 9, 10, 11].indexOf(month) !== -1 &&\n                        // DST transitions occur only in the night-time\n                        (hours < 5 || hours > 20)) {\n                        const newOffset = this.getTimezoneOffset(d);\n                        if (offset !== newOffset) {\n                            d += newOffset - offset;\n                            // A special case for transitioning from summer time to winter\n                            // time. When the clock is set back, the same time is repeated\n                            // twice, i.e. 02:30 am is repeated since the clock is set back\n                            // from 3 am to 2 am. We need to make the same time as local\n                            // Date does.\n                        }\n                        else if (offset - 36e5 === this.getTimezoneOffset(d - 36e5) &&\n                            !hasOldSafariBug) {\n                            d -= 36e5;\n                        }\n                    }\n                }\n                return d;\n            }\n            /**\n             * Parse a datetime string. Unless the string contains time zone\n             * information, apply the current `timezone` from options. If the argument\n             * is a number, return it.\n             *\n             * @function Highcharts.Time#parse\n             * @param    {string|number|undefined} s The datetime string to parse\n             * @return   {number|undefined}          Parsed JavaScript timestamp\n             */\n            parse(s) {\n                if (!isString(s)) {\n                    return s ?? void 0;\n                }\n                s = s\n                    // Firefox fails on YYYY/MM/DD\n                    .replace(/\\//g, '-')\n                    // Replace some non-standard notations\n                    .replace(/(GMT|UTC)/, '');\n                // Extend shorthand hour timezone offset like +02\n                // .replace(/([+-][0-9]{2})$/, '$1:00');\n                // Check if the string has time zone information\n                const hasTimezone = s.indexOf('Z') > -1 ||\n                    /([+-][0-9]{2}):?[0-9]{2}$/.test(s), \n                // YYYY-MM-DD and YYYY-MM are always UTC\n                isYYYYMMDD = /^[0-9]{4}-[0-9]{2}(-[0-9]{2}|)$/.test(s);\n                if (!hasTimezone && !isYYYYMMDD) {\n                    s += 'Z';\n                }\n                const ts = Date.parse(s);\n                if (isNumber(ts)) {\n                    // Unless the string contains time zone information, convert from\n                    // the local time result of `Date.parse` via UTC into the current\n                    // timezone of the time object.\n                    return ts + ((!hasTimezone || isYYYYMMDD) ?\n                        this.getTimezoneOffset(ts) :\n                        0);\n                }\n            }\n            /**\n             * Get the time zone offset based on the current timezone information as\n             * set in the global options.\n             *\n             * @function Highcharts.Time#getTimezoneOffset\n             *\n             * @param {number} timestamp\n             *        The JavaScript timestamp to inspect.\n             *\n             * @return {number}\n             *         The timezone offset in minutes compared to UTC.\n             */\n            getTimezoneOffset(timestamp) {\n                if (this.timezone !== 'UTC') {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const [date, gmt, hours, colon, minutes = 0] = this.dateTimeFormat({ timeZoneName: 'shortOffset' }, timestamp, 'en')\n                        .split(/(GMT|:)/)\n                        .map(Number), offset = -(hours + minutes / 60) * 60 * 60000;\n                    // Possible future NaNs stop here\n                    if (isNumber(offset)) {\n                        return offset;\n                    }\n                }\n                return 0;\n            }\n            /**\n             * Formats a JavaScript date timestamp (milliseconds since January 1 1970)\n             * into a human readable date string.\n             *\n             * The `format` parameter accepts two types of values:\n             * - An object containing settings that are passed directly on to\n             *   [Intl.DateTimeFormat.prototype.format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format).\n             * - A format string containing either individual or locale-aware format\n             *   keys. **Individual keys**, for example `%Y-%m-%d`, are listed below.\n             *   **Locale-aware keys** are grouped by square brackets, for example\n             *   `%[Ymd]`. The order of keys within the square bracket doesn't affect\n             *   the output, which is determined by the locale. See example below.\n             *   Internally, the locale-aware format keys are just a shorthand for the\n             *   full object formats, but are particularly practical in\n             *   [templating](https://www.highcharts.com/docs/chart-concepts/templating)\n             *   where full object definitions are not an option.\n             *\n             * The available string format keys are listed below. Additional formats can\n             * be given in the {@link Highcharts.dateFormats} hook.\n             *\n             * Supported format keys:\n             * | Key  | Description                     | Notes on locale-aware format |\n             * -------|----------------------------------------------|-------|\n             * | `%A` | Long weekday, like 'Monday'                  |       |\n             * | `%a` | Short weekday, like 'Mon'                    |       |\n             * | `%E` | Narrow weekday, single character             |       |\n             * | `%d` | Two digit day of the month, 01 to 31         |       |\n             * | `%e` | Day of the month, 1 through 31               |       |\n             * | `%w` | Day of the week, 0 through 6                 | N/A   |\n             * | `%v` | The prefix \"week from\", read from `lang.weekFrom` | N/A |\n             * | `%b` | Short month, like 'Jan'                      |       |\n             * | `%B` | Long month, like 'January'                   |       |\n             * | `%m` | Two digit month number, 01 through 12        |       |\n             * | `%o` | Month number, 1 through 12                   |       |\n             * | `%y` | Two digits year, like 24 for 2024            |       |\n             * | `%Y` | Four digits year, like 2024                  |       |\n             * | `%H` | Two digits hours in 24h format, 00 through 23 | Depending on the locale, 12h format may be instered. |\n             * | `%k` | Hours in 24h format, 0 through 23            | Depending on the locale, 12h format may be instered. |\n             * | `%I` | Two digits hours in 12h format, 00 through 11 | N/A. The locale determines the hour format. |\n             * | `%l` | Hours in 12h format, 1 through 12            | N/A. The locale determines the hour format. |\n             * | `%M` | Two digits minutes, 00 through 59            |       |\n             * | `%p` | Upper case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n             * | `%P` | Lower case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n             * | `%S` | Two digits seconds, 00 through 59            |       |\n             * | `%L` | Milliseconds (naming from Ruby)              |       |\n             *\n             * @example\n             * // Object format, US English\n             * const time1 = new Highcharts.Time({ locale: 'en-US' });\n             * console.log(\n             *     time1.dateFormat({\n             *         day: 'numeric',\n             *         month: 'short',\n             *         year: 'numeric',\n             *         hour: 'numeric',\n             *         minute: 'numeric'\n             *     }, Date.UTC(2024, 11, 31))\n             * ); // => Dec 31, 2024, 12:00 AM\n             *\n             * // Object format, British English\n             * const time2 = new Highcharts.Time({ locale: 'en-GB' });\n             * console.log(\n             *     time2.dateFormat({\n             *         day: 'numeric',\n             *         month: 'short',\n             *         year: 'numeric',\n             *         hour: 'numeric',\n             *         minute: 'numeric'\n             *     }, Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * // Individual key string replacement\n             * const time3 = new Highcharts.Time();\n             * console.log(\n             *     time3.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2024, 11, 31))\n             * ); // => 2024-12-31 00:00:00\n             *\n             * // Locale-aware keys, US English\n             * const time4 = new Highcharts.Time({ locale: 'en-US' });\n             * console.log(\n             *     time4.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n             * ); // => Dec 31, 2024, 12:00 AM\n             *\n             * // Locale-aware keys, British English\n             * const time5 = new Highcharts.Time({ locale: 'en-GB' });\n             * console.log(\n             *     time5.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * // Mixed locale-aware and individual keys\n             * console.log(\n             *     time5.dateFormat('%[Yeb], %H:%M', Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * @function Highcharts.Time#dateFormat\n             *\n             * @param {string|Highcharts.DateTimeFormatOptions} format\n             *        The desired string format where various time representations are\n             *        prefixed with %, or an object representing the locale-aware format\n             *        options.\n             *\n             * @param {number} [timestamp]\n             *        The JavaScript timestamp.\n             *\n             * @param {boolean} [upperCaseFirst=false]\n             *        Upper case first letter in the return.\n             *\n             * @return {string}\n             *         The formatted date.\n             */\n            dateFormat(format, timestamp, upperCaseFirst) {\n                const lang = this.lang;\n                if (!defined(timestamp) || isNaN(timestamp)) {\n                    return lang?.invalidDate || '';\n                }\n                format = format ?? '%Y-%m-%d %H:%M:%S';\n                // First, identify and replace locale-aware formats like %[Ymd]\n                if (isString(format)) {\n                    const localeAwareRegex = /%\\[([a-zA-Z]+)\\]/g;\n                    let match;\n                    while ((match = localeAwareRegex.exec(format))) {\n                        format = format.replace(match[0], this.dateTimeFormat(match[1], timestamp, lang?.locale));\n                    }\n                }\n                // Then, replace static formats like %Y, %m, %d etc.\n                if (isString(format) && format.indexOf('%') !== -1) {\n                    const time = this, [fullYear, month, dayOfMonth, hours, minutes, seconds, milliseconds, weekday] = this.toParts(timestamp), langWeekdays = lang?.weekdays || this.weekdays, shortWeekdays = lang?.shortWeekdays || this.shortWeekdays, months = lang?.months || this.months, shortMonths = lang?.shortMonths || this.shortMonths, \n                    // List all format keys. Custom formats can be added from the\n                    // outside.\n                    replacements = extend({\n                        // Day\n                        // Short weekday, like 'Mon'\n                        a: shortWeekdays ?\n                            shortWeekdays[weekday] :\n                            langWeekdays[weekday].substr(0, 3),\n                        // Long weekday, like 'Monday'\n                        A: langWeekdays[weekday],\n                        // Two digit day of the month, 01 to 31\n                        d: pad(dayOfMonth),\n                        // Day of the month, 1 through 31\n                        e: pad(dayOfMonth, 2, ' '),\n                        // Day of the week, 0 through 6\n                        w: weekday,\n                        // Week (none implemented)\n                        // 'W': weekNumber(),\n                        v: lang?.weekFrom ?? '',\n                        // Month\n                        // Short month, like 'Jan'\n                        b: shortMonths[month],\n                        // Long month, like 'January'\n                        B: months[month],\n                        // Two digit month number, 01 through 12\n                        m: pad(month + 1),\n                        // Month number, 1 through 12 (#8150)\n                        o: month + 1,\n                        // Year\n                        // Two digits year, like 09 for 2009\n                        y: fullYear.toString().substr(2, 2),\n                        // Four digits year, like 2009\n                        Y: fullYear,\n                        // Time\n                        // Two digits hours in 24h format, 00 through 23\n                        H: pad(hours),\n                        // Hours in 24h format, 0 through 23\n                        k: hours,\n                        // Two digits hours in 12h format, 00 through 11\n                        I: pad((hours % 12) || 12),\n                        // Hours in 12h format, 1 through 12\n                        l: (hours % 12) || 12,\n                        // Two digits minutes, 00 through 59\n                        M: pad(minutes),\n                        // Upper case AM or PM\n                        p: hours < 12 ? 'AM' : 'PM',\n                        // Lower case AM or PM\n                        P: hours < 12 ? 'am' : 'pm',\n                        // Two digits seconds, 00 through 59\n                        S: pad(seconds),\n                        // Milliseconds (naming from Ruby)\n                        L: pad(milliseconds, 3)\n                    }, H.dateFormats);\n                    // Do the replaces\n                    objectEach(replacements, function (val, key) {\n                        if (isString(format)) {\n                            // Regex would do it in one line, but this is faster\n                            while (format.indexOf('%' + key) !== -1) {\n                                format = format.replace('%' + key, typeof val === 'function' ?\n                                    val.call(time, timestamp) :\n                                    val);\n                            }\n                        }\n                    });\n                }\n                else if (isObject(format)) {\n                    const tzHours = (this.getTimezoneOffset(timestamp) || 0) /\n                        (60000 * 60), timeZone = this.timezone || ('Etc/GMT' + (tzHours >= 0 ? '+' : '') + tzHours), { prefix = '', suffix = '' } = format;\n                    format = prefix + this.dateTimeFormat(extend({ timeZone }, format), timestamp) + suffix;\n                }\n                // Optionally sentence-case the string and return\n                return upperCaseFirst ? ucfirst(format) : format;\n            }\n            /**\n             * Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\n             * an object.\n             * @private\n             * @param {string|Array<T>|Highcharts.Dictionary<T>} f\n             * General format description\n             * @return {Highcharts.Dictionary<T>}\n             * The object definition\n             */\n            resolveDTLFormat(f) {\n                if (!isObject(f, true)) { // Check for string or array\n                    f = splat(f);\n                    return {\n                        main: f[0],\n                        from: f[1],\n                        to: f[2]\n                    };\n                }\n                // Type-check DateTimeFormatOptions against DateTimeLabelFormatObject\n                if (isObject(f, true) && isDateTimeFormatOptions(f)) {\n                    return { main: f };\n                }\n                return f;\n            }\n            /**\n             * Get the optimal date format for a point, based on a range.\n             *\n             * @private\n             * @function Highcharts.Time#getDateFormat\n             *\n             * @param {number} range\n             *        The time range\n             *\n             * @param {number} timestamp\n             *        The timestamp of the date\n             *\n             * @param {number} startOfWeek\n             *        An integer representing the first day of the week, where 0 is\n             *        Sunday.\n             *\n             * @param {Highcharts.Dictionary<string>} dateTimeLabelFormats\n             *        A map of time units to formats.\n             *\n             * @return {string}\n             *         The optimal date format for a point.\n             */\n            getDateFormat(range, timestamp, startOfWeek, dateTimeLabelFormats) {\n                const dateStr = this.dateFormat('%m-%d %H:%M:%S.%L', timestamp), blank = '01-01 00:00:00.000', strpos = {\n                    millisecond: 15,\n                    second: 12,\n                    minute: 9,\n                    hour: 6,\n                    day: 3\n                };\n                let n = 'millisecond', \n                // For sub-millisecond data, #4223\n                lastN = n;\n                for (n in timeUnits) { // eslint-disable-line guard-for-in\n                    // If the range is exactly one week and we're looking at a\n                    // Sunday/Monday, go for the week format\n                    if (range &&\n                        range === timeUnits.week &&\n                        +this.dateFormat('%w', timestamp) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n                    // The first format that is too great for the range\n                    if (range && timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] &&\n                        dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n                    // Weeks are outside the hierarchy, only apply them on\n                    // Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n                return this.resolveDTLFormat(dateTimeLabelFormats[n]).main;\n            }\n        }\n        /* *\n         *\n         * Default export\n         *\n         * */\n        /* *\n         *\n         * API Declarations\n         *\n         * */\n        /**\n         * Normalized interval.\n         *\n         * @interface Highcharts.TimeNormalizedObject\n         */ /**\n        * The count.\n        *\n        * @name Highcharts.TimeNormalizedObject#count\n        * @type {number|undefined}\n        */ /**\n        * The interval in axis values (ms).\n        *\n        * @name Highcharts.TimeNormalizedObject#unitRange\n        * @type {number}\n        */\n        /**\n         * Function of an additional date format specifier.\n         *\n         * @callback Highcharts.TimeFormatCallbackFunction\n         *\n         * @param {number} timestamp\n         *        The time to format.\n         *\n         * @return {string}\n         *         The formatted portion of the date.\n         */\n        /**\n         * Time ticks.\n         *\n         * @interface Highcharts.AxisTickPositionsArray\n         * @extends global.Array<number>\n         */ /**\n        * @name Highcharts.AxisTickPositionsArray#info\n        * @type {Highcharts.TimeTicksInfoObject|undefined}\n        */\n        /**\n         * A callback to return the time zone offset for a given datetime. It\n         * takes the timestamp in terms of milliseconds since January 1 1970,\n         * and returns the timezone offset in minutes. This provides a hook\n         * for drawing time based charts in specific time zones using their\n         * local DST crossover dates, with the help of external libraries.\n         *\n         * @callback Highcharts.TimezoneOffsetCallbackFunction\n         *\n         * @param {number} timestamp\n         * Timestamp in terms of milliseconds since January 1 1970.\n         *\n         * @return {number}\n         * Timezone offset in minutes.\n         */\n        /**\n         * Options for formatting dates and times using the [Intl.DateTimeFormat](\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\n         * ) API, and extended with some custom options for Highcharts.\n         *\n         * @interface Highcharts.DateTimeFormatOptions\n         */ /**\n        * The locale matching algorithm to use.\n        *\n        * @name Highcharts.DateTimeFormatOptions#localeMatcher\n        * @type {string|undefined}\n        */ /**\n        * The time zone to use. The default is the browser's default time zone.\n        *\n        * @name Highcharts.DateTimeFormatOptions#timeZone\n        * @type {string|undefined}\n        */ /**\n        * Whether to use 12-hour time (as opposed to 24-hour time).\n        *\n        * @name Highcharts.DateTimeFormatOptions#hour12\n        * @type {'auto'|'always'|'never'|undefined}\n        */ /**\n        * The format matching algorithm to use.\n        *\n        * @name Highcharts.DateTimeFormatOptions#formatMatcher\n        * @type {string|undefined}\n        */ /**\n        * The representation of the weekday.\n        *\n        * @name Highcharts.DateTimeFormatOptions#weekday\n        * @type {'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the era.\n        *\n        * @name Highcharts.DateTimeFormatOptions#era\n        * @type {'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the year.\n        *\n        * @name Highcharts.DateTimeFormatOptions#year\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the month.\n        * \"narrow\", \"short\", \"long\".\n        *\n        * @name Highcharts.DateTimeFormatOptions#month\n        * @type {'numeric'|'2-digit'|'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the day.\n        *\n        * @name Highcharts.DateTimeFormatOptions#day\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the hour.\n        *\n        * @name Highcharts.DateTimeFormatOptions#hour\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the minute.\n        *\n        * @name Highcharts.DateTimeFormatOptions#minute\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the second.\n        *\n        * @name Highcharts.DateTimeFormatOptions#second\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The number of fractional digits to use. 3 means milliseconds.\n        *\n        * @name Highcharts.DateTimeFormatOptions#fractionalSecondDigits\n        * @type {number|undefined}\n        */ /**\n        * The representation of the time zone name.\n        *\n        * @name Highcharts.DateTimeFormatOptions#timeZoneName\n        * @type {'short'|'long'|undefined}\n        */ /**\n        * A prefix for the time string. Custom Highcharts option.\n        *\n        * @name Highcharts.DateTimeFormatOptions#prefix\n        * @type {'string'|undefined}\n        */ /**\n        * A suffix for the time string. Custom Highcharts option.\n        *\n        * @name Highcharts.DateTimeFormatOptions#suffix\n        * @type {'string'|undefined}\n        */\n        ''; // Keeps doclets above in JS file\n\n        return TimeBase;\n    });\n    _registerModule(_modules, 'Core/Time.js', [_modules['Shared/TimeBase.js'], _modules['Core/Utilities.js']], function (TimeBase, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, extend, timeUnits } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        class Time extends TimeBase {\n            /**\n             * Return an array with time positions distributed on round time values\n             * right and right after min and max. Used in datetime axes as well as for\n             * grouping data on a datetime axis.\n             *\n             * @function Highcharts.Time#getTimeTicks\n             *\n             * @param {Highcharts.TimeNormalizedObject} normalizedInterval\n             *        The interval in axis values (ms) and the count\n             *\n             * @param {number} [min]\n             *        The minimum in axis values\n             *\n             * @param {number} [max]\n             *        The maximum in axis values\n             *\n             * @param {number} [startOfWeek=1]\n             *\n             * @return {Highcharts.AxisTickPositionsArray}\n             * Time positions\n             */\n            getTimeTicks(normalizedInterval, min, max, startOfWeek) {\n                const time = this, tickPositions = [], higherRanks = {}, { count = 1, unitRange } = normalizedInterval;\n                let [year, month, dayOfMonth, hours, minutes, seconds] = time.toParts(min), milliseconds = (min || 0) % 1000, variableDayLength;\n                startOfWeek ?? (startOfWeek = 1);\n                if (defined(min)) { // #1300\n                    milliseconds = unitRange >= timeUnits.second ?\n                        0 : // #3935\n                        count * Math.floor(milliseconds / count);\n                    if (unitRange >= timeUnits.second) { // Second\n                        seconds = unitRange >= timeUnits.minute ?\n                            0 : // #3935\n                            count * Math.floor(seconds / count);\n                    }\n                    if (unitRange >= timeUnits.minute) { // Minute\n                        minutes = unitRange >= timeUnits.hour ?\n                            0 :\n                            count * Math.floor(minutes / count);\n                    }\n                    if (unitRange >= timeUnits.hour) { // Hour\n                        hours = unitRange >= timeUnits.day ?\n                            0 :\n                            count * Math.floor(hours / count);\n                    }\n                    if (unitRange >= timeUnits.day) { // Day\n                        dayOfMonth = unitRange >= timeUnits.month ?\n                            1 :\n                            Math.max(1, count * Math.floor(dayOfMonth / count));\n                    }\n                    if (unitRange >= timeUnits.month) { // Month\n                        month = unitRange >= timeUnits.year ? 0 :\n                            count * Math.floor(month / count);\n                    }\n                    if (unitRange >= timeUnits.year) { // Year\n                        year -= year % count;\n                    }\n                    // Week is a special case that runs outside the hierarchy\n                    if (unitRange === timeUnits.week) {\n                        if (count) {\n                            min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n                        }\n                        // Get start of current week, independent of count\n                        const weekday = this.dateTimeFormat({\n                            timeZone: this.timezone,\n                            weekday: 'narrow'\n                        }, min, 'es'), \n                        // Spanish weekday index\n                        weekdayNo = 'DLMXJVS'.indexOf(weekday);\n                        dayOfMonth += -weekdayNo + startOfWeek +\n                            // We don't want to skip days that are before\n                            // startOfWeek (#7051)\n                            (weekdayNo < startOfWeek ? -7 : 0);\n                    }\n                    min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n                    // Handle local timezone offset\n                    if (time.variableTimezone && defined(max)) {\n                        // Detect whether we need to take the DST crossover into\n                        // consideration. If we're crossing over DST, the day length may\n                        // be 23h or 25h and we need to compute the exact clock time for\n                        // each tick instead of just adding hours. This comes at a cost,\n                        // so first we find out if it is needed (#4951).\n                        variableDayLength = (\n                        // Long range, assume we're crossing over.\n                        max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time\n                            // zones.\n                            time.getTimezoneOffset(min) !==\n                                time.getTimezoneOffset(max));\n                    }\n                    // Iterate and add tick positions at appropriate values\n                    let t = min, i = 1;\n                    while (t < max) {\n                        tickPositions.push(t);\n                        // Increase the years\n                        if (unitRange === timeUnits.year) {\n                            t = time.makeTime(year + i * count, 0);\n                            // Increase the months\n                        }\n                        else if (unitRange === timeUnits.month) {\n                            t = time.makeTime(year, month + i * count);\n                            // If we're using local time, the interval is not fixed as it\n                            // jumps one hour at the DST crossover\n                        }\n                        else if (variableDayLength && (unitRange === timeUnits.day ||\n                            unitRange === timeUnits.week)) {\n                            t = time.makeTime(year, month, dayOfMonth +\n                                i * count * (unitRange === timeUnits.day ? 1 : 7));\n                        }\n                        else if (variableDayLength &&\n                            unitRange === timeUnits.hour &&\n                            count > 1) {\n                            // Make sure higher ranks are preserved across DST (#6797,\n                            // #7621)\n                            t = time.makeTime(year, month, dayOfMonth, hours + i * count);\n                            // Else, the interval is fixed and we use simple addition\n                        }\n                        else {\n                            t += unitRange * count;\n                        }\n                        i++;\n                    }\n                    // Push the last time\n                    tickPositions.push(t);\n                    // Handle higher ranks. Mark new days if the time is on midnight\n                    // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold\n                    // to prevent looping over dense data grouping (#6156).\n                    if (unitRange <= timeUnits.hour && tickPositions.length < 10000) {\n                        tickPositions.forEach((t) => {\n                            if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            t % 1800000 === 0 &&\n                                // Check for local or global midnight\n                                time.dateFormat('%H%M%S%L', t) === '000000000') {\n                                higherRanks[t] = 'day';\n                            }\n                        });\n                    }\n                }\n                // Record information on the chosen unit - for dynamic label formatter\n                tickPositions.info = extend(normalizedInterval, {\n                    higherRanks,\n                    totalRange: unitRange * count\n                });\n                return tickPositions;\n            }\n        }\n        /* *\n         *\n         * Default export\n         *\n         * */\n\n        return Time;\n    });\n    _registerModule(_modules, 'Core/Defaults.js', [_modules['Core/Chart/ChartDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Time.js'], _modules['Core/Utilities.js']], function (ChartDefaults, H, Palettes, Time, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { fireEvent, merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Global default settings.\n         *\n         * @name Highcharts.defaultOptions\n         * @type {Highcharts.Options}\n         */ /**\n        * @optionparent\n        * @private\n        */\n        const defaultOptions = {\n            /**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors),\n             * [pie.colors](#plotOptions.pie.colors).\n             *\n             * In styled mode, the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             * @sample {highcharts} highcharts/chart/colors/\n             *         Assign a global color theme\n             * @sample highcharts/members/theme-v10/\n             *         Latest release styled like version 10\n             *\n             * @type    {Array<(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)>}\n             * @default [\n             *     \"#2caffe\",\n             *     \"#544fc5\",\n             *     \"#00e272\",\n             *     \"#fe6a35\",\n             *     \"#6b8abc\",\n             *     \"#d568fb\",\n             *     \"#2ee0ca\",\n             *     \"#fa4b42\",\n             *     \"#feb56a\",\n             *     \"#91e8e1\"\n             * ]\n             */\n            colors: Palettes.colors,\n            /**\n             * Styled mode only. Configuration object for adding SVG definitions for\n             * reusable elements. See [gradients, shadows and\n             * patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\n             * for more information and code examples.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @apioption defs\n             */\n            /**\n             * @ignore-option\n             */\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            /**\n             * An object containing language-related strings and settings. A typical\n             * setup uses `Highcharts.setOptions` to make the options apply to all\n             * charts in the same page.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     lang: {\n             *         locale: 'fr'\n             *     }\n             * });\n             * ```\n             *\n             * @optionparent lang\n             */\n            lang: {\n                weekFrom: 'week from',\n                /**\n                 * The default chart title.\n                 *\n                 * @since 12.2.0\n                 */\n                chartTitle: 'Chart title',\n                /**\n                 * The browser locale to use for date and number formatting. The actual\n                 * locale used for each chart is determined in three steps:\n                 * 1. If this `lang.locale` option is specified, it is used.\n                 * 2. Else, look for the closest ancestor HTML element with a `lang`\n                 *    attribute, typically the `<html>` element.\n                 * 3. If no 'lang' attribute is found, use the default browser locale.\n                 *\n                 * Use `en-GB`, British English, for approximate consistency with\n                 * Highcharts v < 12.\n                 *\n                 * @sample highcharts/lang/locale/\n                 *         Set the locale using the `lang.locale` option\n                 * @sample highcharts/lang/locale-attribute/\n                 *         Pick up the locale from the HTML `lang` attribute\n                 * @sample highcharts/members/highcharts-numberformat\n                 *         Arabic locale with digits and dates         *\n                 *\n                 * @since 12.0.0\n                 * @type {string|Array<string>}\n                 */\n                locale: void 0,\n                /**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 */\n                loading: 'Loading...',\n                /**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`. Defaults to 'undefined',\n                 * meaning the default month names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                months: void 0,\n                /**\n                 * [Format string](https://www.highcharts.com/docs/chart-concepts/templating) for the default series name.\n                 *\n                 * @since 12.2.0\n                 */\n                seriesName: 'Series {add index 1}',\n                /**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`. Defaults to\n                 * 'undefined', meaning the default short month names are used according\n                 * to the `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                shortMonths: void 0,\n                /**\n                 * An array containing the weekday names. Defaults to 'undefined',\n                 * meaning the default weekday names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                weekdays: void 0,\n                /**\n                 * Short week days, starting Sunday. Defaults to 'undefined', meaning\n                 * the default short weekday names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @sample highcharts/lang/shortweekdays/\n                 *         Finnish two-letter abbreviations\n                 *\n                 * @type      {Array<string>}\n                 * @since     4.2.4\n                 * @apioption lang.shortWeekdays\n                 */\n                /**\n                 * What to show in a date field for invalid dates. Defaults to an empty\n                 * string.\n                 *\n                 * @type      {string}\n                 * @since     4.1.8\n                 * @product   highcharts highstock\n                 * @apioption lang.invalidDate\n                 */\n                /**\n                 * The title appearing on hovering the zoom in button. The text itself\n                 * defaults to \"+\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom in\n                 * @product   highmaps\n                 * @apioption lang.zoomIn\n                 */\n                /**\n                 * The title appearing on hovering the zoom out button. The text itself\n                 * defaults to \"-\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom out\n                 * @product   highmaps\n                 * @apioption lang.zoomOut\n                 */\n                /**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to the locale decimal point as determined by `lang.locale`.\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     1.2.2\n                 * @apioption lang.decimalPoint\n                 */\n                /**\n                 * [Metric prefixes](https://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the\n                 * positions with `null` causes the full number to be written. Setting\n                 * `numericSymbols` to `undefined` disables shortening altogether.\n                 *\n                 * @sample {highcharts} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n                 * @since   2.3.0\n                 */\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'],\n                /**\n                 * The default name for a pie slice (point).\n                 * @since 12.2.0\n                 */\n                pieSliceName: 'Slice',\n                /**\n                 * The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\n                 * Use 10000 for Japanese, Korean and various Chinese locales, which\n                 * use symbols for 10^4, 10^8 and 10^12.\n                 *\n                 * @sample highcharts/lang/numericsymbolmagnitude/\n                 *         10000 magnitude for Japanese\n                 *\n                 * @type      {number}\n                 * @default   1000\n                 * @since     5.0.3\n                 * @apioption lang.numericSymbolMagnitude\n                 */\n                /**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to the locale thousands separator as determined by `lang.locale`.\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     1.2.2\n                 * @apioption lang.thousandsSep\n                 */\n                /**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoom: 'Reset zoom',\n                /**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                /**\n                 * The default title of the Y axis\n                 *\n                 * @since 12.2.0\n                 */\n                yAxisTitle: 'Values',\n                resetZoomTitle: 'Reset zoom level 1:1'\n            },\n            /**\n             * Global options that don't apply to each chart. These options must be set\n             * using the `Highcharts.setOptions` method.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     global: {\n             *         buttonTheme: {\n             *             fill: '#d0d0d0'\n             *         }\n             *     }\n             * });\n             * ```\n             */\n            global: {\n                /**\n                 * General theme for buttons. This applies to the zoom button, exporting\n                 * context menu, map navigation, range selector buttons and custom\n                 * buttons generated using the `SVGRenderer.button` function. However,\n                 * each of these may be overridden with more specific options.\n                 *\n                 * @sample highcharts/global/buttontheme\n                 *         General button theme\n                 * @since 11.4.2\n                 */\n                buttonTheme: {\n                    /**\n                     * The fill color for buttons\n                     */\n                    fill: \"#f7f7f7\" /* Palette.neutralColor3 */,\n                    /**\n                     * The padding of buttons\n                     */\n                    padding: 8,\n                    /**\n                     * The border radius for buttons\n                     */\n                    r: 2,\n                    /**\n                     * The stroke color for buttons\n                     */\n                    stroke: \"#cccccc\" /* Palette.neutralColor20 */,\n                    /**\n                     * The stroke width for buttons\n                     */\n                    'stroke-width': 1,\n                    /**\n                     * CSS styling for the buttons' text\n                     */\n                    style: {\n                        color: \"#333333\" /* Palette.neutralColor80 */,\n                        cursor: 'pointer',\n                        fontSize: '0.8em',\n                        fontWeight: 'normal'\n                    },\n                    /**\n                     * State overrides for the buttons\n                     */\n                    states: {\n                        /**\n                         * Hover state overrides for the buttons are applied in addition\n                         * to the normal state options\n                         */\n                        hover: {\n                            fill: \"#e6e6e6\" /* Palette.neutralColor10 */\n                        },\n                        /**\n                         * Select state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        select: {\n                            fill: \"#e6e9ff\" /* Palette.highlightColor10 */,\n                            style: {\n                                color: \"#000000\" /* Palette.neutralColor100 */,\n                                fontWeight: 'bold'\n                            }\n                        },\n                        /**\n                         * Disabled state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        disabled: {\n                            /**\n                             * Disabled state CSS style overrides for the buttons' text\n                             */\n                            style: {\n                                color: \"#cccccc\" /* Palette.neutralColor20 */\n                            }\n                        }\n                    }\n                }\n            },\n            /**\n             * Time options that can apply globally or to individual charts. These\n             * settings affect how `datetime` axes are laid out, how tooltips are\n             * formatted, how series\n             * [pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\n             * the Highcharts Stock range selector handles time.\n             *\n             * The common use case is that all charts in the same Highcharts object\n             * share the same time settings, in which case the global settings are set\n             * using `setOptions`.\n             *\n             * ```js\n             * // Apply time settings globally\n             * Highcharts.setOptions({\n             *     time: {\n             *         timezone: 'Europe/London'\n             *     }\n             * });\n             * // Apply time settings by instance\n             * const chart = Highcharts.chart('container', {\n             *     time: {\n             *         timezone: 'America/New_York'\n             *     },\n             *     series: [{\n             *         data: [1, 4, 3, 5]\n             *     }]\n             * });\n             *\n             * // Use the Time object\n             * console.log(\n             *        'Current time in New York',\n             *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n             * );\n             * ```\n             *\n             * Since v6.0.5, the time options were moved from the `global` object to the\n             * `time` object, and time options can be set on each individual chart.\n             *\n             * @sample {highcharts|highstock}\n             *         highcharts/time/timezone/\n             *         Set the timezone globally\n             * @sample {highcharts}\n             *         highcharts/time/individual/\n             *         Set the timezone per chart instance\n             * @sample {highstock}\n             *         stock/time/individual/\n             *         Set the timezone per chart instance\n             *\n             * @since     6.0.5\n             * @optionparent time\n             */\n            time: {\n                /**\n                 * A custom `Date` class for advanced date handling. For example,\n                 * [JDate](https://github.com/tahajahangir/jdate) can be hooked in to\n                 * handle Jalali dates.\n                 *\n                 * @type      {*}\n                 * @since     4.0.4\n                 * @product   highcharts highstock gantt\n                 */\n                Date: void 0,\n                /**\n                 * A named time zone. Supported time zone names rely on the browser\n                 * implementations, as described in the [mdn\n                 * docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#timezone).\n                 * If the given time zone is not recognized by the browser, Highcharts\n                 * provides a warning and falls back to returning a 0 offset,\n                 * corresponding to the UTC time zone.\n                 *\n                 * The time zone affects axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`.\n                 *\n                 * Setting `timezone` to `undefined` falls back to the default browser\n                 * timezone setting.\n                 *\n                 * Until v11.2.0, this option depended on moment.js.\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezone/ Europe/Oslo\n                 *\n                 * @type      {string}\n                 * @since     5.0.7\n                 * @product   highcharts highstock gantt\n                 */\n                timezone: 'UTC',\n                /**\n                 * The timezone offset in minutes. Positive values are west, negative\n                 * values are east of UTC, as in the ECMAScript\n                 * [getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n                 * method. Use this to display UTC based data in a predefined time zone.\n                 *\n                 * This option is deprecated as of v11.4.1 and will be removed in a\n                 * future release. Use the [time.timezone](#time.timezone) option\n                 * instead.\n                 *\n                 * @see [time.getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezoneoffset/\n                 *         Timezone offset\n                 *\n                 * @since     3.0.8\n                 * @deprecated 11.4.2\n                 * @product   highcharts highstock gantt\n                 */\n                timezoneOffset: 0,\n                /**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * Setting `useUTC` to true is equivalent to setting `time.timezone` to\n                 * `\"UTC\"`. Setting `useUTC` to false is equivalent to setting\n                 * `time.timezone` to `undefined`.\n                 *\n                 * @see [time.timezone](#timezone)\n                 *\n                 * @sample {highcharts} highcharts/time/useutc-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/time/useutc-false/\n                 *         False\n                 *\n                 * @deprecated\n                 */\n                useUTC: void 0\n            },\n            chart: ChartDefaults,\n            /**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/\n             *         Title options demonstrated\n             * @sample {highcharts} highcharts/title/align-auto/\n             *         Default title alignment\n             */\n            title: {\n                /**\n                 * When the title is floating, the plot area will not move to make space\n                 * for it.\n                 *\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/\n                 *         False by default\n                 * @sample {highcharts} highcharts/title/floating/\n                 *         True - title on top of the plot area\n                 * @sample {highstock} stock/chart/title-floating/\n                 *         True - title on top of the plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption title.floating\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption title.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\n                 * as if [floating](#title.floating) were `true`.\n                 *\n                 * @sample {highcharts} highcharts/title/verticalalign/\n                 *         Chart title in bottom right corner\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption title.verticalAlign\n                 */\n                /**\n                 * The x position of the title relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption title.x\n                 */\n                /**\n                 * The y position of the title relative to the alignment within\n                 * [chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](\n                 * #chart.spacingBottom). By default it depends on the font size.\n                 *\n                 * @sample {highcharts} highcharts/title/y/\n                 *         Title inside the plot area\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption title.y\n                 */\n                /**\n                 * CSS styles for the title. Use this for font styling, but use `align`,\n                 * `x` and `y` for text alignment.\n                 *\n                 * Note that the default [title.minScale](#title.minScale) option also\n                 * affects the rendered font size. In order to keep the font size fixed\n                 * regardless of title length, set `minScale` to 1.\n                 *\n                 * In styled mode, the title style is given in the `.highcharts-title`\n                 * class.\n                 *\n                 * @sample {highcharts} highcharts/title/style/\n                 *         Custom color and weight\n                 * @sample {highstock} stock/chart/title-style/\n                 *         Custom color and weight\n                 * @sample highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {highcharts|highmaps} { \"color\": \"#333333\", \"fontSize\": \"18px\" }\n                 * @default   {highstock} { \"color\": \"#333333\", \"fontSize\": \"16px\" }\n                 */\n                style: {\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    fontWeight: 'bold'\n                },\n                /**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `undefined`.\n                 *\n                 * @sample {highcharts} highcharts/title/text/\n                 *         Custom title\n                 * @sample {highstock} stock/chart/title-text/\n                 *         Custom title\n                 *\n                 * @default {highcharts|highmaps} Chart title\n                 * @default {highstock} undefined\n                 */\n                text: 'Chart title',\n                /**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * Since v12 it defaults to `undefined`, meaning the alignment is\n                 * computed for best fit. If the text fits in one line, it aligned to\n                 * the center, but if it is wrapped into multiple lines, it is aligned\n                 * to the left.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Default alignment, dynamic\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {Highcharts.AlignValue}\n                 * @default   undefined\n                 * @since     2.0\n                 * @apioption title.align\n                 */\n                /**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @sample {highcharts} highcharts/title/margin-50/\n                 *         A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/\n                 *         The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/\n                 *         A chart title margin of 50\n                 *\n                 * @since 2.1\n                 */\n                margin: 15,\n                /**\n                 * When the title is too wide to fit in the chart, the default behavior\n                 * is to scale it down to fit, or apply word wrap if it is scaled down\n                 * to `minScale` and still doesn't fit.\n                 *\n                 * The default value reflects the scale, when using default font sizes,\n                 * when the title font size matches that of the subtitle. The title\n                 * still stands out as it is bold by default.\n                 *\n                 * Set `minScale` to 1 to avoid downscaling.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Downscaling demonstrated\n                 *\n                 * @since 12.0.0\n                 */\n                minScale: 0.67\n            },\n            /**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highcharts} highcharts/title/align-auto/\n             *         Default title alignment\n             * @sample {highmaps} maps/title/subtitle/\n             *         Subtitle options demonstrated\n             */\n            subtitle: {\n                /**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 * \"center\" and \"right\". Since v12, it defaults to `undefined`, meaning\n                 * the actual alignment is inherited from the alignment of the main\n                 * title.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Default title and subtitle alignment, dynamic\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at bottom right of plot area\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @default undefined\n                 * @since 2.0\n                 * @apioption subtitle.align\n                 */\n                /**\n                 * When the subtitle is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/floating/\n                 *         Floating title and subtitle\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote floating at bottom right of plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption subtitle.floating\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 * @apioption subtitle.style\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption subtitle.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\n                 * floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption subtitle.verticalAlign\n                 */\n                /**\n                 * The x position of the subtitle relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption subtitle.x\n                 */\n                /**\n                 * The y position of the subtitle relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\n                 * is laid out below the title unless the title is floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption subtitle.y\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The subtitle of the chart.\n                 *\n                 * @sample {highcharts|highstock} highcharts/subtitle/text/\n                 *         Custom subtitle\n                 * @sample {highcharts|highstock} highcharts/subtitle/text-formatted/\n                 *         Formatted and linked text.\n                 */\n                text: ''\n            },\n            /**\n             * The chart's caption, which will render below the chart and will be part\n             * of exported charts. The caption can be updated after chart initialization\n             * through the `Chart.update` or `Chart.caption.update` methods.\n             *\n             * @sample highcharts/caption/text/\n             *         A chart with a caption\n             * @since  7.2.0\n             */\n            caption: {\n                /**\n                 * When the caption is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.floating\n                 */\n                /**\n                 * The margin between the caption and the plot area.\n                 */\n                margin: 15,\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.useHTML\n                 */\n                /**\n                 * The x position of the caption relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption caption.x\n                 */\n                /**\n                 * The y position of the caption relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`.\n                 *\n                 * @type      {number}\n                 * @apioption caption.y\n                 */\n                /**\n                 * CSS styles for the caption.\n                 *\n                 * In styled mode, the caption style is given in the\n                 * `.highcharts-caption` class.\n                 *\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The caption text of the chart.\n                 *\n                 * @sample {highcharts} highcharts/caption/text/\n                 *         Custom caption\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the caption. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * The vertical alignment of the caption. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\n                 * floating.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'bottom'\n            },\n            /**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](\n             * #plotOptions.series) object. Then options for all series of a specific\n             * type are given in the plotOptions of that type, for example\n             * `plotOptions.line`. Next, options for one single series are given in\n             * [the series array](#series).\n             */\n            plotOptions: {},\n            /**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and create\n             * [custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */\n            legend: {\n                /**\n                 * The background color of the legend.\n                 *\n                 * @see In styled mode, the legend background fill can be applied with\n                 *      the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/backgroundcolor/\n                 *         Yellowish background\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption legend.backgroundColor\n                 */\n                /**\n                 * The width of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke width can be applied\n                 *      with the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderwidth/\n                 *         2px border width\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption legend.borderWidth\n                 */\n                /**\n                 * Enable or disable the legend. There is also a series-specific option,\n                 * [showInLegend](#plotOptions.series.showInLegend), that can hide the\n                 * series from the legend. In some series types this is `false` by\n                 * default, so it must set to `true` in order to show the legend for the\n                 * series.\n                 *\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 *\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @default {gantt} false\n                 */\n                enabled: true,\n                /**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/align/\n                 *         Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * If the [layout](legend.layout) is `horizontal` and the legend items\n                 * span over two lines or more, whether to align the items into vertical\n                 * columns. Setting this to `false` makes room for more items, but will\n                 * look more messy.\n                 *\n                 * @since 6.1.0\n                 */\n                alignColumns: true,\n                /**\n                 * A CSS class name to apply to the legend group.\n                 */\n                className: 'highcharts-no-tooltip',\n                /**\n                 * General event handlers for the legend. These event hooks can\n                 * also be attached to the legend at run time using the\n                 * `Highcharts.addEvent` function.\n                 *\n                 * @declare Highcharts.LegendEventsOptionsObject\n                 *\n                 * @private\n                 */\n                events: {},\n                /**\n                 * Fires when the legend item belonging to the series is clicked. One\n                 * parameter, `event`, is passed to the function. The default action\n                 * is to toggle the visibility of the series, point or data class. This\n                 * can be prevented by returning `false` or calling\n                 * `event.preventDefault()`.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemclick/\n                 *         Confirm hiding and showing\n                 * @sample {highcharts} highcharts/legend/pie-legend-itemclick/\n                 *         Confirm toggle visibility of pie slices\n                 *\n                 * @type      {Highcharts.LegendItemClickCallbackFunction}\n                 * @context   Highcharts.Legend\n                 * @apioption legend.events.itemClick\n                 */\n                /**\n                 * When the legend is floating, the plot area ignores it and is allowed\n                 * to be placed below it.\n                 *\n                 * @sample {highcharts} highcharts/legend/floating-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/legend/floating-true/\n                 *         True\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Floating legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption legend.floating\n                 */\n                /**\n                 * The layout of the legend items. Can be one of `horizontal` or\n                 * `vertical` or `proximate`. When `proximate`, the legend items will be\n                 * placed as close as possible to the graphs they're representing,\n                 * except in inverted charts or when the legend position doesn't allow\n                 * it.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/\n                 *         Vertical\n                 * @sample highcharts/legend/layout-proximate\n                 *         Labels proximate to the data\n                 * @sample {highstock} stock/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/\n                 *         Vertical with color axis gradient\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\", \"proximate\"]\n                 */\n                layout: 'horizontal',\n                /**\n                 * In a legend with horizontal layout, the itemDistance defines the\n                 * pixel distance between each item.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 * @sample {highstock} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 *\n                 * @type      {number}\n                 * @default   {highcharts} 20\n                 * @default   {highstock} 20\n                 * @default   {highmaps} 8\n                 * @since     3.0.3\n                 * @apioption legend.itemDistance\n                 */\n                /**\n                 * The pixel bottom margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginBottom: 2,\n                /**\n                 * The pixel top margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginTop: 2,\n                /**\n                 * The width for each legend item. By default the items are laid out\n                 * successively. In a [horizontal layout](legend.layout), if the items\n                 * are laid out across two rows or more, they will be vertically aligned\n                 * depending on the [legend.alignColumns](legend.alignColumns) option.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemwidth-default/\n                 *         Undefined by default\n                 * @sample {highcharts} highcharts/legend/itemwidth-80/\n                 *         80 for aligned legend items\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption legend.itemWidth\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for each legend label. Available variables relates to properties on\n                 * the series, or the point in case of pies.\n                 *\n                 * @type      {string}\n                 * @default   {name}\n                 * @since     1.3\n                 * @apioption legend.labelFormat\n                 */\n                /* eslint-disable valid-jsdoc */\n                /**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case of\n                 * pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps the context can also be a data class in case of a\n                 * `colorAxis`.\n                 *\n                 * @sample {highcharts} highcharts/legend/labelformatter/\n                 *         Add text\n                 * @sample {highmaps} maps/legend/labelformatter/\n                 *         Data classes with label formatter\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Point|Series>}\n                 */\n                labelFormatter: function () {\n                    // eslint-enable valid-jsdoc\n                    return this.name;\n                },\n                /**\n                 * Line height for the legend items. Deprecated as of 2.1\\. Instead,\n                 * the line height for each item can be set using\n                 * `itemStyle.lineHeight`, and the padding between items using\n                 * `itemMarginTop` and `itemMarginBottom`.\n                 *\n                 * @sample {highcharts} highcharts/legend/lineheight/\n                 *         Setting padding\n                 *\n                 * @deprecated\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @since     2.0\n                 * @product   highcharts gantt\n                 * @apioption legend.lineHeight\n                 */\n                /**\n                 * If the plot area sized is calculated automatically and the legend is\n                 * not floating, the legend margin is the space between the legend and\n                 * the axis labels or plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/margin-default/\n                 *         12 pixels by default\n                 * @sample {highcharts} highcharts/legend/margin-30/\n                 *         30 pixels\n                 *\n                 * @type      {number}\n                 * @default   12\n                 * @since     2.1\n                 * @apioption legend.margin\n                 */\n                /**\n                 * Maximum pixel height for the legend. When the maximum height is\n                 * extended, navigation will show.\n                 *\n                 * @type      {number}\n                 * @since     2.3.0\n                 * @apioption legend.maxHeight\n                 */\n                /**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke can be applied with the\n                 *      `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/bordercolor/\n                 *         Brown border\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                /**\n                 * The border corner radius of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderradius-default/\n                 *         Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/\n                 *         5px rounded\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 */\n                borderRadius: 0,\n                /**\n                 * Options for the paging or navigation appearing when the legend is\n                 * overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to\n                 * [increase the chart height in\n                 * export](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/).\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 */\n                navigation: {\n                    /**\n                     * How to animate the pages when navigating up or down. A value of\n                     * `true` applies the default navigation given in the\n                     * `chart.animation` option. Additional options can be given as an\n                     * object containing values for easing and duration.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @default   true\n                     * @since     2.2.4\n                     * @apioption legend.navigation.animation\n                     */\n                    /**\n                     * The pixel size of the up and down arrows in the legend paging\n                     * navigation.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {number}\n                     * @default   12\n                     * @since     2.2.4\n                     * @apioption legend.navigation.arrowSize\n                     */\n                    /**\n                     * Whether to enable the legend navigation. In most cases, disabling\n                     * the navigation results in an unwanted overflow.\n                     *\n                     * See also the\n                     * [adapt chart to legend](https://github.com/highcharts/adapt-chart-to-legend)\n                     * plugin for a solution to extend the chart height to make room for\n                     * the legend, optionally in exported charts only.\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     4.2.4\n                     * @apioption legend.navigation.enabled\n                     */\n                    /**\n                     * Text styles for the legend page navigation.\n                     *\n                     * @see In styled mode, the navigation items are styled with the\n                     *      `.highcharts-legend-navigation` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {Highcharts.CSSObject}\n                     * @since     2.2.4\n                     * @apioption legend.navigation.style\n                     */\n                    style: {\n                        /**\n                         * @type {number|string}\n                         */\n                        fontSize: '0.8em'\n                    },\n                    /**\n                     * The color for the active up or down arrow in the legend page\n                     * navigation.\n                     *\n                     * @see In styled mode, the active arrow be styled with the\n                     *      `.highcharts-legend-nav-active` class.\n                     *\n                     * @sample  {highcharts} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     * @sample  {highstock} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    activeColor: \"#0022ff\" /* Palette.highlightColor100 */,\n                    /**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @see In styled mode, the inactive arrow be styled with the\n                     *      `.highcharts-legend-nav-inactive` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    inactiveColor: \"#cccccc\" /* Palette.neutralColor20 */\n                },\n                /**\n                 * The inner padding of the legend box.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @type      {number}\n                 * @default   8\n                 * @since     2.2.0\n                 * @apioption legend.padding\n                 */\n                /**\n                 * Whether to reverse the order of the legend items compared to the\n                 * order of the series or points as defined in the configuration object.\n                 *\n                 * @see [yAxis.reversedStacks](#yAxis.reversedStacks),\n                 *      [series.legendIndex](#series.legendIndex)\n                 *\n                 * @sample {highcharts} highcharts/legend/reversed/\n                 *         Stacked bar with reversed legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.2.5\n                 * @apioption legend.reversed\n                 */\n                /**\n                 * Whether to show the symbol on the right side of the text rather than\n                 * the left side. This is common in Arabic and Hebrew.\n                 *\n                 * @sample {highcharts} highcharts/legend/rtl/\n                 *         Symbol to the right\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption legend.rtl\n                 */\n                /**\n                 * CSS styles for the legend area. In the 1.x versions the position\n                 * of the legend area was determined by CSS. In 2.x, the position is\n                 * determined by properties like `align`, `verticalAlign`, `x` and `y`,\n                 * but the styles are still parsed for backwards compatibility.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @product   highcharts highstock\n                 * @apioption legend.style\n                 */\n                /**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `undefined` to wrap\n                 * text instead. A `width` property can be added to control the text\n                 * width.\n                 *\n                 * @see In styled mode, the legend items can be styled with the\n                 *      `.highcharts-legend-item` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemstyle/\n                 *         Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"0.8em\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}\n                 */\n                itemStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /**\n                     * @ignore\n                     */\n                    cursor: 'pointer',\n                    /**\n                     * @ignore\n                     */\n                    fontSize: '0.8em',\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'none',\n                    /**\n                     * @ignore\n                     */\n                    textOverflow: 'ellipsis'\n                },\n                /**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @see In styled mode, the hovered legend items can be styled with\n                 *      the `.highcharts-legend-item:hover` pseudo-class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/\n                 *         Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#000000\"}\n                 */\n                itemHoverStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @see In styled mode, the hidden legend items can be styled with\n                 *      the `.highcharts-legend-item-hidden` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/\n                 *         Darker gray color\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#cccccc\"}\n                 */\n                itemHiddenStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'line-through'\n                },\n                /**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {boolean|Highcharts.CSSObject}\n                 */\n                shadow: false,\n                /**\n                 * Default styling for the checkbox next to a legend item when\n                 * `showCheckbox` is true.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 * @default {\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}\n                 */\n                itemCheckboxStyle: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    width: '13px', // For IE precision\n                    /**\n                     * @ignore\n                     */\n                    height: '13px'\n                },\n                /// itemWidth: undefined,\n                /**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @since 5.0.0\n                 */\n                squareSymbol: true,\n                /**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * Note: This option is a default source of color axis height, if the\n                 * [colorAxis.height](https://api.highcharts.com/highcharts/colorAxis.height)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolHeight\n                 */\n                /**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`, effectively\n                 * creating a circle.\n                 *\n                 * For color axis scales, it defaults to 3.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolRadius\n                 */\n                /**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * Note: This option is a default source of color axis width, if the\n                 * [colorAxis.width](https://api.highcharts.com/highcharts/colorAxis.width)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 *\n                 * @type      {number}\n                 * @apioption legend.symbolWidth\n                 */\n                /**\n                 * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the legend item texts.\n                 *\n                 * Prior to 4.1.7, when using HTML, [legend.navigation](\n                 * #legend.navigation) was disabled.\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption legend.useHTML\n                 */\n                /**\n                 * For a color axis with data classes, how many decimals to render in\n                 * the legend. The default preserves the decimals of the range numbers.\n                 *\n                 * @type      {number}\n                 * @default   -1\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueDecimals\n                 */\n                /**\n                 * For a color axis with data classes, a suffix for the range numbers in\n                 * the legend.\n                 *\n                 * @type      {string}\n                 * @default   ''\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueSuffix\n                 */\n                /**\n                 * The width of the legend box. If a number is set, it translates to\n                 * pixels. Since v7.0.2 it allows setting a percent string of the full\n                 * chart width, for example `40%`.\n                 *\n                 * Defaults to the full chart width for legends below or above the\n                 * chart, half the chart width for legends to the left and right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 * @sample {highcharts} highcharts/legend/width-percent/\n                 *         A percent of the chart width\n                 *\n                 * @type      {number|string}\n                 * @since     2.0\n                 * @apioption legend.width\n                 */\n                /**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolpadding/\n                 *         Greater symbol width and padding\n                 */\n                symbolPadding: 5,\n                /**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * When the [layout](#legend.layout) option is `proximate`, the\n                 * `verticalAlign` option doesn't apply.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'bottom',\n                // Width: undefined,\n                /**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 *\n                 * @since 2.0\n                 */\n                x: 0,\n                /**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @since 2.0\n                 */\n                y: 0,\n                /**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/\n                 *         Legend title\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend with title\n                 *\n                 * @since 3.0\n                 */\n                title: {\n                    /**\n                     * A text or HTML string for the title.\n                     *\n                     * @type      {string}\n                     * @since     3.0\n                     * @apioption legend.title.text\n                     */\n                    /**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @see In styled mode, the legend title is styled with the\n                     *      `.highcharts-legend-title` class.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"fontSize\": \"0.8em\", \"fontWeight\": \"bold\"}\n                     * @since   3.0\n                     */\n                    style: {\n                        /**\n                         * @ignore\n                         */\n                        color: \"#333333\" /* Palette.neutralColor80 */,\n                        /**\n                         * @ignore\n                         */\n                        fontSize: '0.8em',\n                        /**\n                         * @ignore\n                         */\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            /**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             */\n            loading: {\n                /**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.hideDuration\n                 */\n                /**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.showDuration\n                 */\n                /**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @see In styled mode, the loading label is styled with the\n                 *      `.highcharts-loading-inner` class.\n                 *\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/\n                 *         Vertically centered\n                 * @sample {highstock} stock/loading/general/\n                 *         Label styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}\n                 * @since   1.2.0\n                 */\n                labelStyle: {\n                    /**\n                     * @ignore\n                     */\n                    fontWeight: 'bold',\n                    /**\n                     * @ignore\n                     */\n                    position: 'relative',\n                    /**\n                     * @ignore\n                     */\n                    top: '45%'\n                },\n                /**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * In styled mode, the loading label is styled with the\n                 * `.highcharts-loading` class.\n                 *\n                 * @sample  {highcharts|highmaps} highcharts/loading/style/\n                 *          Gray plot area, white text\n                 * @sample  {highstock} stock/loading/general/\n                 *          Gray plot area, white text\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}\n                 * @since   1.2.0\n                 */\n                style: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                    /**\n                     * @ignore\n                     */\n                    opacity: 0.5,\n                    /**\n                     * @ignore\n                     */\n                    textAlign: 'center'\n                }\n            },\n            /**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @declare Highcharts.TooltipOptions\n             */\n            tooltip: {\n                /**\n                 * The color of the tooltip border. When `undefined`, the border takes\n                 * the color of the corresponding series or point.\n                 *\n                 * Note that the [borderWidth](#tooltip.borderWidth) is usually 0 by\n                 * default, so the border color may not be visible until a border width\n                 * is set.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ Follow\n                 *         series by default\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-black/ Black\n                 *         border\n                 * @sample {highstock} stock/tooltip/general/ Styled tooltip\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and\n                 *         border demo\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption tooltip.borderColor\n                 */\n                /**\n                 * A CSS class name to apply to the tooltip's container div,\n                 * allowing unique CSS styling for each chart.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.className\n                 */\n                /**\n                 * Since 4.1, the crosshair definitions are moved to the Axis object\n                 * in order for a better separation from the tooltip. See\n                 * [xAxis.crosshair](#xAxis.crosshair).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/crosshairs-x/\n                 *         Enable a crosshair for the x value\n                 *\n                 * @deprecated\n                 *\n                 * @type      {*}\n                 * @default   true\n                 * @apioption tooltip.crosshairs\n                 */\n                /**\n                 * Distance from point to tooltip in pixels.\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @apioption tooltip.distance\n                 */\n                /**\n                 * Whether the tooltip should be fixed to one position in the chart, or\n                 * located next to the point or mouse. When the tooltip is fixed, the\n                 * position can be further specified with the\n                 * [tooltip.position](#tooltip.position) options set.\n                 *\n                 * @sample    highcharts/tooltip/fixed/\n                 *            Fixed tooltip and position options\n                 * @sample    {highstock} stock/tooltip/fixed/\n                 *            Stock chart with fixed tooltip\n                 * @sample    {highmaps} maps/tooltip/fixed/\n                 *            Map with fixed tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since 12.2.0\n                 * @apioption tooltip.fixed\n                 */\n                /**\n                 * Whether the tooltip should follow the mouse as it moves across\n                 * columns, pie slices and other point types with an extent.\n                 * By default it behaves this way for pie, polygon, map, sankey\n                 * and wordcloud series by override in the `plotOptions`\n                 * for those series types.\n                 *\n                 * Does not apply if [split](#tooltip.split) is `true`.\n                 *\n                 * For touch moves to behave the same way, [followTouchMove](\n                 * #tooltip.followTouchMove) must be `true` also.\n                 *\n                 * @sample highcharts/tooltip/followpointer/\n                 *         Tooltip follow pointer comparison\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} false\n                 * @default   {highmaps} true\n                 * @since     3.0\n                 * @apioption tooltip.followPointer\n                 */\n                /**\n                 * Whether the tooltip should update as the finger moves on a touch\n                 * device. If this is `true` and [chart.panning](#chart.panning) is\n                 * set,`followTouchMove` will take over one-finger touches, so the user\n                 * needs to use two fingers for zooming and panning.\n                 *\n                 * Note the difference to [followPointer](#tooltip.followPointer) that\n                 * only defines the _position_ of the tooltip. If `followPointer` is\n                 * false in for example a column series, the tooltip will show above or\n                 * below the column, but as `followTouchMove` is true, the tooltip will\n                 * jump from column to column as the user swipes across the plot area.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} true\n                 * @default   {highstock} true\n                 * @default   {highmaps} false\n                 * @since     3.0.1\n                 * @apioption tooltip.followTouchMove\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for the whole shared tooltip. When format strings are a requirement,\n                 * it is usually more convenient to use `headerFormat`, `pointFormat`\n                 * and `footerFormat`, but the `format` option allows combining them\n                 * into one setting.\n                 *\n                 * The context of the format string is the same as that of the\n                 * `tooltip.formatter` callback.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/format-shared/\n                 *         Format for shared tooltip\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     11.1.0\n                 * @apioption tooltip.format\n                 */\n                /**\n                 * Callback function to format the text of the tooltip from scratch. In\n                 * case of single or [shared](#tooltip.shared) tooltips, a string should\n                 * be returned. In case of [split](#tooltip.split) tooltips, it should\n                 * return an array where the first item is the header, and subsequent\n                 * items are mapped to the points. Return `false` to disable tooltip for\n                 * a specific point on series.\n                 *\n                 * A subset of HTML is supported. Unless `useHTML` is true, the HTML of\n                 * the tooltip is parsed and converted to SVG, therefore this isn't a\n                 * complete HTML renderer. The following HTML tags are supported: `b`,\n                 * `br`, `em`, `i`, `span`, `strong`. Spans can be styled with a `style`\n                 * attribute, but only text-related CSS, that is shared with SVG, is\n                 * handled.\n                 *\n                 * The context of the formatter (since v12) is the\n                 * [Point](https://api.highcharts.com/class-reference/Highcharts.Point)\n                 * instance. If the tooltip is shared or split, an array `this.points`\n                 * contains all points of the hovered x-value.\n                 *\n                 * Common properties from the Point to use in the formatter include:\n                 *\n                 * - **Point.percentage**:\n                 *   Stacked series and pies only. The point's percentage of the total.\n                 *\n                 * - **Point.points**:\n                 *   In a shared or split tooltip, this is an array containing all the\n                 *   hovered points.\n                 *\n                 * - **this.series**:\n                 *   The series object. The series name is available through\n                 *   `this.series.name`.\n                 *\n                 * - **this.total**:\n                 *   The total value at this point's x value in a stacked series, or the\n                 *   sum of all slices in a pie series.\n                 *\n                 * - **this.x**:\n                 *   The x value.\n                 *\n                 * - **this.y**:\n                 *   The y value.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/formatter-simple/\n                 *         Simple string formatting\n                 * @sample {highcharts} highcharts/tooltip/formatter-shared/\n                 *         Formatting with shared tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Formatting with split tooltip\n                 * @sample highcharts/tooltip/formatter-conditional-default/\n                 *         Extending default formatter\n                 * @sample {highstock} stock/tooltip/formatter/\n                 *         Formatting with shared tooltip\n                 * @sample {highmaps} maps/tooltip/formatter/\n                 *         String formatting\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.formatter\n                 */\n                /**\n                 * Callback function to format the text of the tooltip for\n                 * visible null points.\n                 * Works analogously to [formatter](#tooltip.formatter).\n                 *\n                 * @sample highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.nullFormatter\n                 */\n                /**\n                 * Whether to allow the tooltip to render outside the chart's SVG\n                 * element box. By default (`false`), the tooltip is rendered within the\n                 * chart's SVG element, which results in the tooltip being aligned\n                 * inside the chart area. For small charts, this may result in clipping\n                 * or overlapping. When `true`, a separate SVG element is created and\n                 * overlaid on the page, allowing the tooltip to be aligned inside the\n                 * page itself. Beware that with this option active, CSS classes on the\n                 * chart's target container, with classnames matching the pattern\n                 * 'highcharts-*', will be set on the tooltip as well. This is done to\n                 * support theming for tooltips with this option.\n                 *\n                 * Defaults to `true` if `chart.scrollablePlotArea` is activated,\n                 * otherwise `false`.\n                 *\n                 * @sample highcharts/tooltip/outside\n                 *         Small charts with tooltips outside\n                 *\n                 * @type      {boolean|undefined}\n                 * @default   undefined\n                 * @since     6.1.1\n                 * @apioption tooltip.outside\n                 */\n                /**\n                 * A callback function for formatting the HTML output for a single point\n                 * in the tooltip. Like the `pointFormat` string, but with more\n                 * flexibility.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n                 * @since     4.1.0\n                 * @context   Highcharts.Point\n                 * @apioption tooltip.pointFormatter\n                 */\n                /**\n                 * A callback function to place the tooltip in a custom position. The\n                 * callback receives three parameters: `labelWidth`, `labelHeight` and\n                 * `point`, where point contains values for `plotX` and `plotY` telling\n                 * where the reference point is in the plot area. Add `chart.plotLeft`\n                 * and `chart.plotTop` to get the full coordinates.\n                 *\n                 * To find the actual hovered `Point` instance, use\n                 * `this.chart.hoverPoint`. For shared or split tooltips, all the hover\n                 * points are available in `this.chart.hoverPoints`.\n                 *\n                 * Since v7, when [tooltip.split](#tooltip.split) option is enabled,\n                 * positioner is called for each of the boxes separately, including\n                 * xAxis header. xAxis header is not a point, instead `point` argument\n                 * contains info: `{ plotX: Number, plotY: Number, isHeader: Boolean }`\n                 *\n                 * Since v12.2, the [tooltip.fixed](#tooltip.fixed) option combined with\n                 * [tooltip.position](#tooltip.position) covers most of the use cases\n                 * for custom tooltip positioning.\n                 *\n                 * The return should be an object containing x and y values, for example\n                 * `{ x: 100, y: 100 }`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/positioner/\n                 *         A fixed tooltip position on top of the chart\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Split tooltip with fixed positions\n                 * @sample {highstock} stock/tooltip/positioner-scrollable-plotarea/\n                 *         Scrollable plot area combined with tooltip positioner\n                 *\n                 * @see [position](#tooltip.position)\n                 *\n                 * @type      {Highcharts.TooltipPositionerCallbackFunction}\n                 * @since     2.2.4\n                 * @apioption tooltip.positioner\n                 */\n                /**\n                 * Shows tooltip for all points with the same X value. Splits the\n                 * tooltip into one label per series, with the header close to the axis.\n                 * This is recommended over [shared](#tooltip.shared)\n                 * tooltips for charts with multiple line series, generally making them\n                 * easier to read. This option takes precedence over `tooltip.shared`.\n                 *\n                 * Not supported for [polar](#chart.polar) and [inverted](#chart.inverted) charts.\n                 *\n                 * @productdesc {highstock} In Highcharts Stock, tooltips are split\n                 * by default since v6.0.0. Stock charts typically contain\n                 * multi-dimension points and multiple panes, making split tooltips\n                 * the preferred layout over\n                 * the previous `shared` tooltip.\n                 *\n                 * @sample highcharts/tooltip/split/\n                 *         Split tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Split tooltip and custom formatter callback\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} true\n                 * @since     5.0.0\n                 * @product   highcharts highstock\n                 * @apioption tooltip.split\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing, when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @type      {boolean}\n                 * @since     8.0.1\n                 * @apioption tooltip.stickOnContact\n                 */\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption tooltip.useHTML\n                 */\n                /**\n                 * How many decimals to show in each series' y value. This is\n                 * overridable in each series' tooltip options object. The default is to\n                 * preserve all decimals.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {number|undefined}\n                 * @since     2.2\n                 * @apioption tooltip.valueDecimals\n                 */\n                /**\n                 * A string to prepend to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valuePrefix\n                 */\n                /**\n                 * A string to append to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valueSuffix\n                 */\n                /**\n                 * The format for the date in the tooltip header if the X axis is a\n                 * datetime axis. The default is a best guess based on the smallest\n                 * distance between points in the chart.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/xdateformat/\n                 *         A different format\n                 *\n                 * @type      {string|Highcharts.DateTimeFormatOptions}\n                 * @product   highcharts highstock gantt\n                 * @apioption tooltip.xDateFormat\n                 */\n                /**\n                 * How many decimals to show for the `point.change`\n                 * or the `point.cumulativeSum` value when the `series.compare`\n                 * or the `series.cumulative` option is set.\n                 * This is overridable in each series' tooltip options object.\n                 *\n                 * @type      {number}\n                 * @default   2\n                 * @since     1.0.1\n                 * @product   highstock\n                 * @apioption tooltip.changeDecimals\n                 */\n                /**\n                 * Enable or disable the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/enabled/\n                 *         Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n                 *         Disable tooltip and show values on chart instead\n                 */\n                enabled: true,\n                /**\n                 * Enable or disable animation of the tooltip.\n                 *\n                 * @type       {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                 * @since      2.3.0\n                 */\n                animation: {\n                    duration: 300,\n                    // EaseOutCirc\n                    easing: (x) => Math.sqrt(1 - Math.pow(x - 1, 2))\n                },\n                /**\n                 * The radius of the rounded border corners.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         Default border radius\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/\n                 *         Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 */\n                borderRadius: 3,\n                /**\n                 * For series on datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the string or object configuration, see\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat).\n                 *\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 *\n                 * @type    {Highcharts.Dictionary<string|Highcharts.DateTimeFormatOptions>}\n                 * @product highcharts highstock gantt\n                 */\n                dateTimeLabelFormats: {\n                    /** @internal */\n                    millisecond: '%[AebHMSL]',\n                    /** @internal */\n                    second: '%[AebHMS]',\n                    /** @internal */\n                    minute: '%[AebHM]',\n                    /** @internal */\n                    hour: '%[AebHM]',\n                    /** @internal */\n                    day: '%[AebY]',\n                    /** @internal */\n                    week: '%v %[AebY]',\n                    /** @internal */\n                    month: '%[BY]',\n                    /** @internal */\n                    year: '%Y'\n                },\n                /**\n                 * A string to append to the tooltip format.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @since 2.2\n                 */\n                footerFormat: '',\n                /**\n                 * The name of a symbol to use for the border around the tooltip\n                 * header. Applies only when [tooltip.split](#tooltip.split) is\n                 * enabled.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @see [tooltip.shape](#tooltip.shape)\n                 *\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Different shapes for header and split boxes\n                 *\n                 * @type       {Highcharts.TooltipShapeValue}\n                 * @validvalue [\"callout\", \"rect\"]\n                 * @since      7.0\n                 */\n                headerShape: 'callout',\n                /**\n                 * The number of milliseconds to wait until the tooltip is hidden when\n                 * mouse out from a point or chart.\n                 *\n                 * @since 3.0\n                 */\n                hideDelay: 500,\n                /**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @since 5.0.0\n                 */\n                padding: 8,\n                /**\n                 * Positioning options for fixed tooltip, taking effect only when\n                 * [tooltip.fixed](#tooltip.fixed) is `true`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/fixed/\n                 *         Fixed tooltip and position options\n                 * @sample {highstock} stock/tooltip/fixed/\n                 *         Stock chart with fixed tooltip\n                 * @sample {highmaps} maps/tooltip/fixed/\n                 *         Map with fixed tooltip\n                 *\n                 * @since 12.2.0\n                 */\n                position: {\n                    /**\n                     * The horizontal alignment of the fixed tooltip.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     *\n                     * @type {Highcharts.AlignValue}\n                     * @default left\n                     * @apioption tooltip.position.align\n                     */\n                    /**\n                     * The vertical alignment of the fixed tooltip.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     *\n                     * @type {Highcharts.VerticalAlignValue}\n                     * @default top\n                     * @apioption tooltip.position.verticalAlign\n                     */\n                    /**\n                     * What the fixed tooltip alignment should be relative to.\n                     *\n                     * The default, `pane`, means that it is aligned within the plot\n                     * area for that given series. If the tooltip is split (as default\n                     * in Stock charts), each partial tooltip is aligned within the\n                     * series' pane.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     *\n                     * @type {string}\n                     * @default pane\n                     * @validvalue [\"pane\", \"chart\", \"plotBox\", \"spacingBox\"]\n                     * @apioption tooltip.position.relativeTo\n                     */\n                    /**\n                     * X pixel offset from the given position. Can be used to shy away\n                     * from axis lines, grid lines etc to avoid the tooltip overlapping\n                     * other elements.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     */\n                    x: 0,\n                    /**\n                     * Y pixel offset from the given position. Can be used to shy away\n                     * from axis lines, grid lines etc to avoid the tooltip overlapping\n                     * other elements.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     */\n                    y: 3\n                },\n                /**\n                 * The name of a symbol to use for the border around the tooltip. Can\n                 * be one of: `\"callout\"`, `\"circle\"` or `\"rect\"`. When\n                 * [tooltip.split](#tooltip.split)\n                 * option is enabled, shape is applied to all boxes except header, which\n                 * is controlled by\n                 * [tooltip.headerShape](#tooltip.headerShape).\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * Defaults to `callout` for floating tooltip, `rect` for\n                 * [fixed](#tooltip.fixed) tooltip.\n                 *\n                 * @type  {Highcharts.TooltipShapeValue}\n                 * @since 4.0\n                 * @default undefined\n                 * @apioption tooltip.shape\n                 */\n                /**\n                 * Shows information in the tooltip for all points with the same X\n                 * value. When the tooltip is shared, the entire plot area will capture\n                 * mouse movement or touch events. Tooltip texts for series types with\n                 * ordered data (not pie, scatter, flags etc) will be shown in a single\n                 * bubble. This is recommended for single series charts and for\n                 * tablet/mobile optimized charts.\n                 *\n                 * See also [tooltip.split](#tooltip.split), that is better suited for\n                 * charts with many series, especially line-type series. The\n                 * `tooltip.split` option takes precedence over `tooltip.shared`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/shared-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/tooltip/shared-true/\n                 *         True\n                 * @sample {highcharts} highcharts/tooltip/shared-x-crosshair/\n                 *         True with x axis crosshair\n                 * @sample {highcharts} highcharts/tooltip/shared-true-mixed-types/\n                 *         True with mixed series types\n                 *\n                 * @since   2.1\n                 * @product highcharts highstock\n                 */\n                shared: false,\n                /**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense. This\n                 * applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/\n                 *         50 px on graph\n                 *\n                 * @type    {number}\n                 * @default 10/25\n                 * @since   1.2.0\n                 * @product highcharts highstock\n                 */\n                snap: isTouchDevice ? 25 : 10,\n                /**\n                 * The HTML of the tooltip header line. The context is the\n                 * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n                 * Variables are enclosed in curly brackets. Examples of common\n                 * variables to include are `x`, `y`, `series.name` and `series.color`\n                 * and other properties on the same form. The `point.key` variable\n                 * contains the category name, x value or datetime string depending on\n                 * the type of axis. For datetime axes, the `point.key` date format can\n                 * be set using `tooltip.xDateFormat`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.headerFormat\n                 */\n                headerFormat: '<span style=\"font-size: 0.8em\">{ucfirst point.key}</span><br/>',\n                /**\n                 * The HTML of the null point's line in the tooltip. Works analogously\n                 * to [pointFormat](#tooltip.pointFormat).\n                 *\n                 * @sample {highcharts} highcharts/series/null-interaction\n                 *         Line chart with null interaction\n                 * @sample {highcharts} highcharts/plotoptions/series-nullformat\n                 *         Heatmap with null interaction\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.nullFormat\n                 */\n                /**\n                 * The HTML of the point's line in the tooltip. The context is the\n                 * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n                 * Variables are enclosed in curly brackets. Examples of common\n                 * variables to include are `x`, `y`, `series.name` and `series.color`\n                 * and other properties on the same form. Furthermore, `y` can be\n                 * extended by the `tooltip.valuePrefix` and `tooltip.valueSuffix`\n                 * variables. This can also be overridden for each series, which makes\n                 * it a good hook for displaying units.\n                 *\n                 * In styled mode, the dot is colored by a class name rather than the\n                 * point color.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/pointformat/\n                 *         A different point format with value suffix\n                 * @sample {highcharts|highstock} highcharts/tooltip/pointformat-extra-information/\n                 *         Show extra information about points in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type       {string}\n                 * @since      2.2\n                 * @apioption  tooltip.pointFormat\n                 */\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n                /**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/\n                 *         Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                /**\n                 * The pixel width of the tooltip border. Defaults to 0 for single\n                 * tooltips and fixed tooltips, otherwise 1 for split tooltips.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         2 pixels\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/\n                 *         No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {number}\n                 */\n                borderWidth: void 0,\n                /**\n                 * Whether to apply a drop shadow to the tooltip. Defaults to true,\n                 * unless the tooltip is [fixed](#tooltip.fixed).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/\n                 *         False\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         Fixed tooltip position, border and shadow disabled\n                 *\n                 * @type {boolean|Highcharts.ShadowOptionsObject}\n                 * @default undefined\n                 * @apioption tooltip.shadow\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @since 8.0.1\n                 */\n                stickOnContact: false,\n                /**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * Note that the default `pointerEvents` style makes the tooltip ignore\n                 * mouse events, so in order to use clickable tooltips, this value must\n                 * be set to `auto`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/style/\n                 *         Greater padding, bold text\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @internal */\n                    cursor: 'default',\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @since 2.2\n                 */\n                useHTML: false\n            },\n            /**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             */\n            credits: {\n                /**\n                 * Credits for map source to be concatenated with conventional credit\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapTextFull](#credits.mapTextFull)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   \\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapText\n                 */\n                /**\n                 * Detailed credits for map source to be displayed on hover of credits\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapText](#credits.mapText)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   {geojson.copyright}\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapTextFull\n                 */\n                /**\n                 * Whether to show the credits text.\n                 *\n                 * @sample {highcharts} highcharts/credits/enabled-false/\n                 *         Credits disabled\n                 * @sample {highstock} stock/credits/enabled/\n                 *         Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/\n                 *         Credits disabled\n                 */\n                enabled: true,\n                /**\n                 * The URL for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                href: 'https://www.highcharts.com?credits',\n                /**\n                 * Position configuration for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 *\n                 * @type    {Highcharts.AlignObject}\n                 * @since   2.1\n                 */\n                position: {\n                    /** @internal */\n                    align: 'right',\n                    /** @internal */\n                    x: -10,\n                    /** @internal */\n                    verticalAlign: 'bottom',\n                    /** @internal */\n                    y: -5\n                },\n                /**\n                 * CSS styles for the credits label.\n                 *\n                 * @see In styled mode, credits styles can be set with the\n                 *      `.highcharts-credits` class.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    cursor: 'pointer',\n                    /** @internal */\n                    color: \"#999999\" /* Palette.neutralColor40 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.6em'\n                },\n                /**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to\n                 * `Highcharts @ {map-credits}`. Otherwise, it defaults to\n                 * `Highcharts.com`.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                text: 'Highcharts.com'\n            }\n        };\n        const defaultTime = new Time(defaultOptions.time, defaultOptions.lang);\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions\n         * for outside modules wasn't enough because the setOptions method created a new\n         * object.\n         *\n         * @function Highcharts.getOptions\n         *\n         * @return {Highcharts.Options}\n         * Default options.\n         */\n        function getOptions() {\n            return defaultOptions;\n        }\n        /**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @sample highcharts/members/setoptions Applying a global theme\n         *\n         * @function Highcharts.setOptions\n         *\n         * @param {Highcharts.Options} options\n         * The new custom chart options.\n         *\n         * @return {Highcharts.Options}\n         * Updated options.\n         */\n        function setOptions(options) {\n            fireEvent(H, 'setOptions', { options });\n            // Copy in the default options\n            merge(true, defaultOptions, options);\n            // Update the time object\n            if (options.time) {\n                defaultTime.update(defaultOptions.time);\n            }\n            if (options.lang && 'locale' in options.lang) {\n                defaultTime.update({\n                    locale: options.lang.locale\n                });\n            }\n            if (options.lang?.chartTitle) {\n                defaultOptions.title = {\n                    ...defaultOptions.title,\n                    text: options.lang.chartTitle\n                };\n            }\n            return defaultOptions;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DefaultOptions = {\n            defaultOptions,\n            defaultTime,\n            getOptions,\n            setOptions\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"plotBox\"|\"spacingBox\"} Highcharts.ButtonRelativeToValue\n         */\n        /**\n         * Gets fired when a series is added to the chart after load time, using the\n         * `addSeries` method. Returning `false` prevents the series from being added.\n         *\n         * @callback Highcharts.ChartAddSeriesCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.ChartAddSeriesEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains common event information. Through the `options` property you can\n         * access the series options that were passed to the `addSeries` method.\n         *\n         * @interface Highcharts.ChartAddSeriesEventObject\n         */ /**\n        * The series options that were passed to the `addSeries` method.\n        * @name Highcharts.ChartAddSeriesEventObject#options\n        * @type {Highcharts.SeriesOptionsType}\n        */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.ChartAddSeriesEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The event target.\n        * @name Highcharts.ChartAddSeriesEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.ChartAddSeriesEventObject#type\n        * @type {\"addSeries\"}\n        */\n        /**\n         * Gets fired when clicking on the plot background.\n         *\n         * @callback Highcharts.ChartClickCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.PointerEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains an axes of the clicked spot.\n         *\n         * @interface Highcharts.ChartClickEventAxisObject\n         */ /**\n        * Axis at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#axis\n        * @type {Highcharts.Axis}\n        */ /**\n        * Axis value at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#value\n        * @type {number}\n        */\n        /**\n         * Contains information about the clicked spot on the chart. Remember the unit\n         * of a datetime axis is milliseconds since 1970-01-01 00:00:00.\n         *\n         * @interface Highcharts.ChartClickEventObject\n         * @extends Highcharts.PointerEventObject\n         */ /**\n        * Information about the x-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#xAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the y-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#yAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the z-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#zAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>|undefined}\n        */\n        /**\n         * Gets fired when the chart is finished loading.\n         *\n         * @callback Highcharts.ChartLoadCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Fires when the chart is redrawn, either after a call to `chart.redraw()` or\n         * after an axis, series or point is modified with the `redraw` option set to\n         * `true`.\n         *\n         * @callback Highcharts.ChartRedrawCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired after initial load of the chart (directly after the `load` event),\n         * and after each redraw (directly after the `redraw` event).\n         *\n         * @callback Highcharts.ChartRenderCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired when an area of the chart has been selected. The default action\n         * for the selection event is to zoom the chart to the selected area. It can be\n         * prevented by calling `event.preventDefault()` or return false.\n         *\n         * @callback Highcharts.ChartSelectionCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.SelectEventObject} event\n         *        Event informations\n         *\n         * @return {boolean|undefined}\n         *         Return false to prevent the default action, usually zoom.\n         */\n        (''); // Detach doclets above\n\n        return DefaultOptions;\n    });\n    _registerModule(_modules, 'Core/Templating.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (D, G, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, defaultTime } = D;\n        const { pageLang } = G;\n        const { extend, getNestedProperty, isArray, isNumber, isObject, isString, pick, ucfirst } = U;\n        const helpers = {\n            // Built-in helpers\n            add: (a, b) => a + b,\n            divide: (a, b) => (b !== 0 ? a / b : ''),\n            // eslint-disable-next-line eqeqeq\n            eq: (a, b) => a == b,\n            each: function (arr) {\n                const match = arguments[arguments.length - 1];\n                return isArray(arr) ?\n                    arr.map((item, i) => format(match.body, extend(isObject(item) ? item : { '@this': item }, {\n                        '@index': i,\n                        '@first': i === 0,\n                        '@last': i === arr.length - 1\n                    }))).join('') :\n                    false;\n            },\n            ge: (a, b) => a >= b,\n            gt: (a, b) => a > b,\n            'if': (condition) => !!condition,\n            le: (a, b) => a <= b,\n            lt: (a, b) => a < b,\n            multiply: (a, b) => a * b,\n            // eslint-disable-next-line eqeqeq\n            ne: (a, b) => a != b,\n            subtract: (a, b) => a - b,\n            ucfirst,\n            unless: (condition) => !condition\n        };\n        const numberFormatCache = {};\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Internal convenience function\n        const isQuotedString = (str) => /^[\"'].+[\"']$/.test(str);\n        /**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime](https://www.php.net/manual/en/function.strftime.php) function.\n         * Additional formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * Since v6.0.5, all internal dates are formatted through the\n         * {@link Highcharts.Chart#time} instance to respect chart-level time settings.\n         * The `Highcharts.dateFormat` function only reflects global time settings set\n         * with `setOptions`.\n         *\n         * Supported format keys:\n         * - `%a`: Short weekday, like 'Mon'\n         * - `%A`: Long weekday, like 'Monday'\n         * - `%d`: Two digit day of the month, 01 to 31\n         * - `%e`: Day of the month, 1 through 31\n         * - `%w`: Day of the week, 0 through 6\n         * - `%b`: Short month, like 'Jan'\n         * - `%B`: Long month, like 'January'\n         * - `%m`: Two digit month number, 01 through 12\n         * - `%y`: Two digits year, like 09 for 2009\n         * - `%Y`: Four digits year, like 2009\n         * - `%H`: Two digits hours in 24h format, 00 through 23\n         * - `%k`: Hours in 24h format, 0 through 23\n         * - `%I`: Two digits hours in 12h format, 00 through 11\n         * - `%l`: Hours in 12h format, 1 through 12\n         * - `%M`: Two digits minutes, 00 through 59\n         * - `%p`: Upper case AM or PM\n         * - `%P`: Lower case AM or PM\n         * - `%S`: Two digits seconds, 00 through 59\n         * - `%L`: Milliseconds (naming from Ruby)\n         *\n         * @function Highcharts.dateFormat\n         *\n         * @param {string} format\n         *        The desired format where various time representations are prefixed\n         *        with `%`.\n         *\n         * @param {number} timestamp\n         *        The JavaScript timestamp.\n         *\n         * @param {boolean} [upperCaseFirst=false]\n         *        Upper case first letter in the return.\n         *\n         * @return {string}\n         *         The formatted date.\n         */\n        function dateFormat(format, timestamp, upperCaseFirst) {\n            return defaultTime.dateFormat(format, timestamp, upperCaseFirst);\n        }\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @example\n         * let s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         *\n         * @function Highcharts.format\n         *\n         * @param {string} str\n         *        The string to format.\n         *\n         * @param {Record<string, *>} ctx\n         *        The context, a collection of key-value pairs where each key is\n         *        replaced by its value.\n         *\n         * @param {Highcharts.Chart} [owner]\n         *        A `Chart` or `DataGrid` instance used to get numberFormatter and time.\n         *\n         * @return {string}\n         *         The formatted string.\n         */\n        function format(str = '', ctx, owner) {\n            // Notice: using u flag will require a refactor for ES5 (#22450).\n            const regex = /\\{([a-zA-Z\\u00C0-\\u017F\\d:\\.,;\\-\\/<>\\[\\]%_@+\"'’= #\\(\\)]+)\\}/g, // eslint-disable-line max-len\n            // The sub expression regex is the same as the top expression regex,\n            // but except parens and block helpers (#), and surrounded by parens\n            // instead of curly brackets.\n            subRegex = /\\(([a-zA-Z\\u00C0-\\u017F\\d:\\.,;\\-\\/<>\\[\\]%_@+\"'= ]+)\\)/g, matches = [], floatRegex = /f$/, decRegex = /\\.(\\d)/, lang = owner?.options?.lang || defaultOptions.lang, time = owner?.time || defaultTime, numberFormatter = owner?.numberFormatter || numberFormat.bind(owner);\n            /*\n             * Get a literal or variable value inside a template expression. May be\n             * extended with other types like string or null if needed, but keep it\n             * small for now.\n             */\n            const resolveProperty = (key = '') => {\n                let n;\n                // Literals\n                if (key === 'true') {\n                    return true;\n                }\n                if (key === 'false') {\n                    return false;\n                }\n                if ((n = Number(key)).toString() === key) {\n                    return n;\n                }\n                if (isQuotedString(key)) {\n                    return key.slice(1, -1);\n                }\n                // Variables and constants\n                return getNestedProperty(key, ctx);\n            };\n            let match, currentMatch, depth = 0, hasSub;\n            // Parse and create tree\n            while ((match = regex.exec(str)) !== null) {\n                // When a sub expression is found, it is evaluated first, and the\n                // results recursively evaluated until no subexpression exists.\n                const mainMatch = match, subMatch = subRegex.exec(match[1]);\n                if (subMatch) {\n                    match = subMatch;\n                    hasSub = true;\n                }\n                if (!currentMatch?.isBlock) {\n                    currentMatch = {\n                        ctx,\n                        expression: match[1],\n                        find: match[0],\n                        isBlock: match[1].charAt(0) === '#',\n                        start: match.index,\n                        startInner: match.index + match[0].length,\n                        length: match[0].length\n                    };\n                }\n                // Identify helpers\n                const fn = (currentMatch.isBlock ? mainMatch : match)[1].split(' ')[0].replace('#', '');\n                if (helpers[fn]) {\n                    // Block helper, only 0 level is handled\n                    if (currentMatch.isBlock && fn === currentMatch.fn) {\n                        depth++;\n                    }\n                    if (!currentMatch.fn) {\n                        currentMatch.fn = fn;\n                    }\n                }\n                // Closing a block helper\n                const startingElseSection = match[1] === 'else';\n                if (currentMatch.isBlock &&\n                    currentMatch.fn && (match[1] === `/${currentMatch.fn}` ||\n                    startingElseSection)) {\n                    if (!depth) { // === 0\n                        const start = currentMatch.startInner, body = str.substr(start, match.index - start);\n                        // Either closing without an else section, or when encountering\n                        // an else section\n                        if (currentMatch.body === void 0) {\n                            currentMatch.body = body;\n                            currentMatch.startInner = match.index + match[0].length;\n                            // The body exists already, so this is the else section\n                        }\n                        else {\n                            currentMatch.elseBody = body;\n                        }\n                        currentMatch.find += body + match[0];\n                        if (!startingElseSection) {\n                            matches.push(currentMatch);\n                            currentMatch = void 0;\n                        }\n                    }\n                    else if (!startingElseSection) {\n                        depth--;\n                    }\n                    // Common expression\n                }\n                else if (!currentMatch.isBlock) {\n                    matches.push(currentMatch);\n                }\n                // Evaluate sub-matches one by one to prevent orphaned block closers\n                if (subMatch && !currentMatch?.isBlock) {\n                    break;\n                }\n            }\n            // Execute\n            matches.forEach((match) => {\n                const { body, elseBody, expression, fn } = match;\n                let replacement, i;\n                // Helper function\n                if (fn) {\n                    // Pass the helpers the amount of arguments defined by the function,\n                    // then the match as the last argument.\n                    const args = [match], parts = [], len = expression.length;\n                    let start = 0, startChar;\n                    for (i = 0; i <= len; i++) {\n                        const char = expression.charAt(i);\n                        // Start of string\n                        if (!startChar && (char === '\"' || char === '\\'')) {\n                            startChar = char;\n                            // End of string\n                        }\n                        else if (startChar === char) {\n                            startChar = '';\n                        }\n                        if (!startChar &&\n                            (char === ' ' || i === len)) {\n                            parts.push(expression.substr(start, i - start));\n                            start = i + 1;\n                        }\n                    }\n                    i = helpers[fn].length;\n                    while (i--) {\n                        args.unshift(resolveProperty(parts[i + 1]));\n                    }\n                    replacement = helpers[fn].apply(ctx, args);\n                    // Block helpers may return true or false. They may also return a\n                    // string, like the `each` helper.\n                    if (match.isBlock && typeof replacement === 'boolean') {\n                        replacement = format(replacement ? body : elseBody, ctx, owner);\n                    }\n                    // Simple variable replacement\n                }\n                else {\n                    const valueAndFormat = isQuotedString(expression) ?\n                        [expression] : expression.split(':');\n                    replacement = resolveProperty(valueAndFormat.shift() || '');\n                    // Format the replacement\n                    const isFloat = replacement % 1 !== 0;\n                    if (typeof replacement === 'number' &&\n                        (valueAndFormat.length || isFloat)) {\n                        const segment = valueAndFormat.join(':');\n                        if (floatRegex.test(segment) || isFloat) { // Float\n                            const decimals = parseInt((segment.match(decRegex) || ['', '-1'])[1], 10);\n                            if (replacement !== null) {\n                                replacement = numberFormatter(replacement, decimals, lang.decimalPoint, segment.indexOf(',') > -1 ? lang.thousandsSep : '');\n                            }\n                        }\n                        else {\n                            replacement = time.dateFormat(segment, replacement);\n                        }\n                    }\n                    // Use string literal in order to be preserved in the outer\n                    // expression\n                    subRegex.lastIndex = 0;\n                    if (subRegex.test(match.find) && isString(replacement)) {\n                        replacement = `\"${replacement}\"`;\n                    }\n                }\n                str = str.replace(match.find, pick(replacement, ''));\n            });\n            return hasSub ? format(str, ctx, owner) : str;\n        }\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @sample highcharts/members/highcharts-numberformat/\n         *         Custom number format\n         *\n         * @function Highcharts.numberFormat\n         *\n         * @param {number} number\n         *        The input number to format.\n         *\n         * @param {number} decimals\n         *        The amount of decimals. A value of -1 preserves the amount in the\n         *        input number.\n         *\n         * @param {string} [decimalPoint]\n         *        The decimal point, defaults to the one given in the lang options, or\n         *        a dot.\n         *\n         * @param {string} [thousandsSep]\n         *        The thousands separator, defaults to the one given in the lang\n         *        options, or a space character.\n         *\n         * @return {string}\n         *         The formatted number.\n         */\n        function numberFormat(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n            let ret, fractionDigits, [mantissa, exp] = number.toString().split('e').map(Number);\n            const lang = this?.options?.lang || defaultOptions.lang, origDec = (number.toString().split('.')[1] || '').split('e')[0].length, firstDecimals = decimals, options = {};\n            decimalPoint ?? (decimalPoint = lang.decimalPoint);\n            thousandsSep ?? (thousandsSep = lang.thousandsSep);\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            }\n            else if (!isNumber(decimals)) {\n                decimals = 2;\n            }\n            else if (decimals && exp < 0) {\n                // Expose decimals from exponential notation (#7042)\n                fractionDigits = decimals + exp;\n                if (fractionDigits >= 0) {\n                    // Remove too small part of the number while keeping the notation\n                    mantissa = +mantissa.toExponential(fractionDigits).split('e')[0];\n                    decimals = fractionDigits;\n                }\n                else {\n                    // `fractionDigits < 0`\n                    mantissa = Math.floor(mantissa);\n                    if (decimals < 20) {\n                        // Use number instead of exponential notation (#7405)\n                        number = +(mantissa * Math.pow(10, exp)).toFixed(decimals);\n                    }\n                    else {\n                        // Or zero\n                        number = 0;\n                    }\n                    exp = 0;\n                }\n            }\n            if (exp) {\n                decimals ?? (decimals = 2);\n                number = mantissa;\n            }\n            if (isNumber(decimals) && decimals >= 0) {\n                options.minimumFractionDigits = decimals;\n                options.maximumFractionDigits = decimals;\n            }\n            if (thousandsSep === '') {\n                options.useGrouping = false;\n            }\n            const hasSeparators = thousandsSep || decimalPoint, locale = hasSeparators ?\n                'en' : (this?.locale || lang.locale || pageLang), cacheKey = JSON.stringify(options) + locale, nf = numberFormatCache[cacheKey] ?? (numberFormatCache[cacheKey] = new Intl.NumberFormat(locale, options));\n            ret = nf.format(number);\n            // If thousandsSep or decimalPoint are set, fall back to using English\n            // format with string replacement for the separators.\n            if (hasSeparators) {\n                ret = ret\n                    // Preliminary step to avoid re-swapping (#22402)\n                    .replace(/([,\\.])/g, '_$1')\n                    .replace(/_\\,/g, thousandsSep ?? ',')\n                    .replace('_.', decimalPoint ?? '.');\n            }\n            if (\n            // Remove signed zero (#20564)\n            (!decimals && +ret === 0) ||\n                // Small numbers, no decimals (#14023)\n                (exp < 0 && !firstDecimals)) {\n                ret = '0';\n            }\n            if (exp && +ret !== 0) {\n                ret += 'e' + (exp < 0 ? '' : '+') + exp;\n            }\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Templating = {\n            dateFormat,\n            format,\n            helpers,\n            numberFormat\n        };\n        /* *\n         * API Declarations\n         * */\n        /**\n         * @interface Highcharts.Templating\n         *\n         * The Highcharts.Templating interface provides a structure for defining\n         * helpers. Helpers can be used as conditional blocks or functions within\n         * expressions. Highcharts includes several built-in helpers and supports\n         * the addition of custom helpers.\n         *\n         * @see [More information](\n         * https://www.highcharts.com/docs/chart-concepts/templating#helpers)\n         *\n         * @example\n         * // Define a custom helper to return the absolute value of a number\n         * Highcharts.Templating.helpers.abs = value => Math.abs(value);\n         *\n         * // Usage in a format string\n         * format: 'Absolute value: {abs point.y}'\n         *\n         * @name Highcharts.Templating#helpers\n         * @type {Record<string, Function>}\n         */\n        (''); // Keeps doclets above in file\n\n        return Templating;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/ColumnDistribution/ColumnDistributionStrategy.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Column Distribution Strategy abstract class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { getStyle } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a column distribution strategy.\n         */\n        class ColumnDistributionStrategy {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Creates a new column distribution strategy.\n             *\n             * @param viewport\n             * The table that the column distribution strategy is applied to.\n             */\n            constructor(viewport) {\n                /**\n                 * The current widths values of the columns.\n                 */\n                this.columnWidths = {};\n                this.viewport = viewport;\n            }\n            /**\n             * Loads the column to the distribution strategy. Should be called before\n             * the table is rendered.\n             */\n            loadColumns() {\n                const { columns } = this.viewport;\n                for (let i = 0, iEnd = columns.length; i < iEnd; ++i) {\n                    this.loadColumn(columns[i]);\n                }\n            }\n            /**\n             * Recaulculates the changing dimentions of the table.\n             */\n            reflow() {\n                if (this.type === 'full') {\n                    return;\n                }\n                const vp = this.viewport;\n                let rowsWidth = 0;\n                for (let i = 0, iEnd = vp.columns.length; i < iEnd; ++i) {\n                    rowsWidth += this.getColumnWidth(vp.columns[i]);\n                }\n                vp.rowsWidth = rowsWidth;\n            }\n            /**\n             * Returns the current column distribution strategy metadata.\n             * @internal\n             */\n            exportMetadata() {\n                return {\n                    type: this.type,\n                    columnWidths: this.columnWidths\n                };\n            }\n            /**\n             * Imports the column distribution strategy metadata. Used to restore the\n             * column distribution strategy after the table is destroyed and recreated.\n             *\n             * @param metadata\n             * The metadata to import.\n             *\n             * @param columnIterator\n             * A function that is called for each significant column in the table.\n             */\n            importMetadata(metadata, columnIterator) {\n                const { enabledColumns } = this.viewport.grid;\n                const savedColumnIds = Object.keys(metadata.columnWidths);\n                if (this.invalidated ||\n                    this.type !== metadata.type ||\n                    !enabledColumns?.length) {\n                    return;\n                }\n                let columnId;\n                for (let i = 0, iEnd = savedColumnIds.length; i < iEnd; ++i) {\n                    columnId = savedColumnIds[i];\n                    if (enabledColumns.indexOf(columnId) === -1) {\n                        continue;\n                    }\n                    this.columnWidths[columnId] = metadata.columnWidths[columnId];\n                    columnIterator?.(columnId);\n                }\n            }\n            /**\n             * Validates the column distribution strategy on update. This method\n             * is used to determine whether the current distribution strategy metadata\n             * should be invalidated when the table is updated.\n             *\n             * @param newOptions\n             * The new options to validate.\n             */\n            validateOnUpdate(newOptions) {\n                if (Object.hasOwnProperty.call(newOptions.rendering?.columns || {}, 'resizing') &&\n                    newOptions.rendering?.columns?.resizing?.mode !== this.type) {\n                    this.invalidated = true;\n                }\n                else if (Object.hasOwnProperty.call(newOptions.rendering?.columns || {}, 'distribution') &&\n                    newOptions.rendering?.columns?.distribution !== this.type) {\n                    this.invalidated = true;\n                }\n            }\n            /* *\n             *\n             * Static Methods\n             *\n             * */\n            /**\n             * Returns the minimum width of the column.\n             *\n             * @param column\n             * The column to get the minimum width for.\n             *\n             * @returns\n             * The minimum width in pixels.\n             */\n            static getMinWidth(column) {\n                const tableColumnEl = column.cells[0]?.htmlElement;\n                const headerColumnEl = column.header?.htmlElement;\n                const getElPaddings = (el) => ((getStyle(el, 'padding-left', true) || 0) +\n                    (getStyle(el, 'padding-right', true) || 0) +\n                    (getStyle(el, 'border-left', true) || 0) +\n                    (getStyle(el, 'border-right', true) || 0));\n                let result = ColumnDistributionStrategy.MIN_COLUMN_WIDTH;\n                if (tableColumnEl) {\n                    result = Math.max(result, getElPaddings(tableColumnEl));\n                }\n                if (headerColumnEl) {\n                    result = Math.max(result, getElPaddings(headerColumnEl));\n                }\n                return result;\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        /**\n         * The minimum width of a column.\n         * @internal\n         */\n        ColumnDistributionStrategy.MIN_COLUMN_WIDTH = 20;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnDistributionStrategy;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/ColumnDistribution/MixedDistributionStrategy.js', [_modules['Grid/Core/Table/ColumnDistribution/ColumnDistributionStrategy.js'], _modules['Core/Utilities.js']], function (DistributionStrategy, U) {\n        /* *\n         *\n         *  Mixed Distribution Strategy class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class MixedDistributionStrategy extends DistributionStrategy {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.type = 'mixed';\n                /**\n                 * Array of units for each column width value. Codified as:\n                 * - `0` - px\n                 * - `1` - %\n                 */\n                this.columnWidthUnits = {};\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            loadColumn(column) {\n                const rawWidth = column.options.width;\n                if (!rawWidth) {\n                    return;\n                }\n                let value;\n                let unitCode = 0;\n                if (typeof rawWidth === 'number') {\n                    value = rawWidth;\n                    unitCode = 0;\n                }\n                else {\n                    value = parseFloat(rawWidth);\n                    unitCode = rawWidth.charAt(rawWidth.length - 1) === '%' ? 1 : 0;\n                }\n                this.columnWidthUnits[column.id] = unitCode;\n                this.columnWidths[column.id] = value;\n            }\n            getColumnWidth(column) {\n                const vp = this.viewport;\n                const widthValue = this.columnWidths[column.id];\n                const minWidth = DistributionStrategy.getMinWidth(column);\n                if (!defined(widthValue)) {\n                    const freeWidth = vp.tbodyElement.clientWidth - this.calculateOccupiedWidth();\n                    const freeColumns = (vp.grid.enabledColumns?.length || 0) -\n                        Object.keys(this.columnWidths).length;\n                    // If undefined width:\n                    return Math.max(freeWidth / freeColumns, minWidth);\n                }\n                if (this.columnWidthUnits[column.id] === 0) {\n                    // If px:\n                    return widthValue;\n                }\n                // If %:\n                return Math.max(vp.getWidthFromRatio(widthValue / 100), minWidth);\n            }\n            resize(resizer, diff) {\n                const vp = this.viewport;\n                const column = resizer.draggedColumn;\n                if (!column) {\n                    return;\n                }\n                const colW = resizer.columnStartWidth ?? 0;\n                const minWidth = DistributionStrategy.getMinWidth(column);\n                const nextCol = vp.columns[column.index + 1];\n                const newW = Math.max(colW + diff, minWidth);\n                this.columnWidths[column.id] = newW;\n                this.columnWidthUnits[column.id] = 0; // Always save in px\n                if (nextCol) {\n                    this.columnWidths[nextCol.id] = Math.max((resizer.nextColumnStartWidth ?? 0) + colW - newW, minWidth);\n                    this.columnWidthUnits[nextCol.id] = 0; // Always save in px\n                }\n            }\n            /**\n             * Calculates defined (px and %) widths of all defined columns in the grid.\n             * Total in px.\n             */\n            calculateOccupiedWidth() {\n                const vp = this.viewport;\n                let occupiedWidth = 0;\n                let unit, width;\n                const columnIds = Object.keys(this.columnWidths);\n                let columnId;\n                for (let i = 0, iEnd = columnIds.length; i < iEnd; ++i) {\n                    columnId = columnIds[i];\n                    unit = this.columnWidthUnits[columnId];\n                    if (unit === 0) {\n                        occupiedWidth += this.columnWidths[columnId];\n                        continue;\n                    }\n                    width = this.columnWidths[columnId];\n                    occupiedWidth += vp.getWidthFromRatio(width / 100);\n                }\n                return occupiedWidth;\n            }\n            exportMetadata() {\n                return {\n                    ...super.exportMetadata(),\n                    columnWidthUnits: this.columnWidthUnits\n                };\n            }\n            importMetadata(metadata) {\n                super.importMetadata(metadata, (colId) => {\n                    const unit = metadata.columnWidthUnits[colId];\n                    if (defined(unit)) {\n                        this.columnWidthUnits[colId] = unit;\n                    }\n                });\n            }\n            validateOnUpdate(newOptions) {\n                super.validateOnUpdate(newOptions);\n                if (!this.invalidated && (Object.hasOwnProperty.call(newOptions.columnDefaults || {}, 'width') ||\n                    newOptions.columns?.some((col) => Object.hasOwnProperty.call(col || {}, 'width')))) {\n                    this.invalidated = true;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MixedDistributionStrategy;\n    });\n    _registerModule(_modules, 'Grid/Core/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Globals Grid namespace.\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.classNamePrefix = 'hcg-';\n            Globals.rawClassNames = {\n                container: 'container',\n                tableElement: 'table',\n                captionElement: 'caption',\n                descriptionElement: 'description',\n                theadElement: 'thead',\n                tbodyElement: 'tbody',\n                rowElement: 'row',\n                rowEven: 'row-even',\n                rowOdd: 'row-odd',\n                hoveredRow: 'hovered-row',\n                columnElement: 'column',\n                hoveredCell: 'hovered-cell',\n                hoveredColumn: 'hovered-column',\n                syncedRow: 'synced-row',\n                syncedCell: 'synced-cell',\n                syncedColumn: 'synced-column',\n                editedCell: 'edited-cell',\n                mockedRow: 'mocked-row',\n                rowsContentNowrap: 'rows-content-nowrap',\n                virtualization: 'virtualization',\n                scrollableContent: 'scrollable-content',\n                headerCell: 'header-cell',\n                headerCellContent: 'header-cell-content',\n                headerRow: 'head-row-content',\n                noData: 'no-data',\n                noPadding: 'no-padding',\n                columnFirst: 'column-first',\n                columnSortable: 'column-sortable',\n                columnSortableIcon: 'column-sortable-icon',\n                columnSortedAsc: 'column-sorted-asc',\n                columnSortedDesc: 'column-sorted-desc',\n                resizableContent: 'resizable-content',\n                resizerHandles: 'column-resizer',\n                resizedColumn: 'column-resized',\n                creditsContainer: 'credits-container',\n                creditsText: 'credits',\n                creditsPro: 'credits-pro',\n                visuallyHidden: 'visually-hidden',\n                lastHeaderCellInRow: 'last-header-cell-in-row',\n                loadingWrapper: 'loading-wrapper',\n                loadingSpinner: 'spinner',\n                loadingMessage: 'loading-message'\n            };\n            Globals.win = window;\n            Globals.composed = [];\n            Globals.userAgent = (Globals.win.navigator && Globals.win.navigator.userAgent) || '';\n            Globals.isChrome = Globals.userAgent.indexOf('Chrome') !== -1;\n            Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1;\n            Globals.getClassName = (classNameKey) => Globals.classNamePrefix + Globals.rawClassNames[classNameKey];\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Grid/Core/GridUtils.js', [_modules['Core/Renderer/HTML/AST.js']], function (AST) {\n        /* *\n         *\n         *  Grid utilities\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        AST.allowedAttributes.push('srcset', 'media');\n        AST.allowedTags.push('picture', 'source');\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var GridUtils;\n        (function (GridUtils) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a HTML element with the provided options.\n             *\n             * @param tagName\n             * The tag name of the element.\n             *\n             * @param params\n             * The parameters of the element.\n             *\n             * @param parent\n             * The parent element.\n             */\n            function makeHTMLElement(tagName, params, parent) {\n                const element = document.createElement(tagName);\n                if (params) {\n                    const paramsKeys = Object.keys(params);\n                    for (let i = 0; i < paramsKeys.length; i++) {\n                        const key = paramsKeys[i];\n                        const value = params[key];\n                        if (value !== void 0) {\n                            if (key === 'style') {\n                                Object.assign(element.style, value);\n                            }\n                            else {\n                                element[key] = value;\n                            }\n                        }\n                    }\n                }\n                if (parent) {\n                    parent.appendChild(element);\n                }\n                return element;\n            }\n            GridUtils.makeHTMLElement = makeHTMLElement;\n            /**\n             * Creates a div element with the provided class name and id.\n             *\n             * @param className\n             * The class name of the div.\n             *\n             * @param id\n             * The id of the element.\n             */\n            function makeDiv(className, id) {\n                return makeHTMLElement('div', { className, id });\n            }\n            GridUtils.makeDiv = makeDiv;\n            /**\n             * Check if there's a possibility that the given string is an HTML\n             * (contains '<').\n             *\n             * @param str\n             * Text to verify.\n             */\n            function isHTML(str) {\n                return str.indexOf('<') !== -1;\n            }\n            GridUtils.isHTML = isHTML;\n            /**\n             * Returns a string containing plain text format by removing HTML tags\n             *\n             * @param text\n             * String to be sanitized\n             *\n             * @returns\n             * Sanitized plain text string\n             */\n            function sanitizeText(text) {\n                try {\n                    return new DOMParser().parseFromString(text, 'text/html')\n                        .body.textContent || '';\n                }\n                catch (error) {\n                    return '';\n                }\n            }\n            GridUtils.sanitizeText = sanitizeText;\n            /**\n             * Sets an element's content, checking whether it is HTML or plain text.\n             * Should be used instead of element.innerText when the content can be HTML.\n             *\n             * @param element\n             * Parent element where the content should be.\n             *\n             * @param content\n             * Content to render.\n             */\n            function setHTMLContent(element, content) {\n                if (isHTML(content)) {\n                    element.innerHTML = AST.emptyHTML;\n                    const formattedNodes = new AST(content);\n                    formattedNodes.addToDOM(element);\n                }\n                else {\n                    element.innerText = content;\n                }\n            }\n            GridUtils.setHTMLContent = setHTMLContent;\n        })(GridUtils || (GridUtils = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GridUtils;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/ColumnDistribution/FixedDistributionStrategy.js', [_modules['Grid/Core/Table/ColumnDistribution/ColumnDistributionStrategy.js'], _modules['Grid/Core/Globals.js'], _modules['Grid/Core/GridUtils.js'], _modules['Core/Utilities.js']], function (DistributionStrategy, Globals, GridUtils, U) {\n        /* *\n         *\n         *  Fixed Distribution Strategy class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { makeHTMLElement } = GridUtils;\n        const { defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class FixedDistributionStrategy extends DistributionStrategy {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.type = 'fixed';\n                /**\n                 * Array of units for each column width value. Codified as:\n                 * - `0` - px\n                 * - `1` - %\n                 */\n                this.columnWidthUnits = {};\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            loadColumn(column) {\n                const rawWidth = column.options.width;\n                if (!rawWidth) {\n                    this.columnWidths[column.id] = this.getInitialColumnWidth(column);\n                    this.columnWidthUnits[column.id] = 0;\n                    return;\n                }\n                let value;\n                let unitCode = 0;\n                if (typeof rawWidth === 'number') {\n                    value = rawWidth;\n                    unitCode = 0;\n                }\n                else {\n                    value = parseFloat(rawWidth);\n                    unitCode = rawWidth.charAt(rawWidth.length - 1) === '%' ? 1 : 0;\n                }\n                this.columnWidthUnits[column.id] = unitCode;\n                this.columnWidths[column.id] = value;\n            }\n            getColumnWidth(column) {\n                const vp = this.viewport;\n                const widthValue = this.columnWidths[column.id];\n                const minWidth = DistributionStrategy.getMinWidth(column);\n                if (this.columnWidthUnits[column.id] === 1) {\n                    // If %:\n                    return Math.max(vp.getWidthFromRatio(widthValue / 100), minWidth);\n                }\n                // If px:\n                return widthValue || 100; // Default to 100px if not defined\n            }\n            resize(resizer, diff) {\n                const column = resizer.draggedColumn;\n                if (!column) {\n                    return;\n                }\n                this.columnWidths[column.id] = Math.max((resizer.columnStartWidth || 0) + diff, DistributionStrategy.getMinWidth(column));\n                this.columnWidthUnits[column.id] = 0; // Always save in px\n            }\n            /**\n             * Creates a mock element to measure the width of the column from the CSS.\n             * The element is appended to the viewport container and then removed.\n             * It should be called only once for each column.\n             *\n             * @param column\n             * The column for which the initial width is being calculated.\n             *\n             * @returns The initial width of the column.\n             */\n            getInitialColumnWidth(column) {\n                const { viewport } = this;\n                // Set the initial width of the column.\n                const mock = makeHTMLElement('div', {\n                    className: Globals.getClassName('columnElement')\n                }, viewport.grid.container);\n                mock.setAttribute('data-column-id', column.id);\n                if (column.options.className) {\n                    mock.classList.add(...column.options.className.split(/\\s+/g));\n                }\n                const result = mock.offsetWidth || 100;\n                mock.remove();\n                return result;\n            }\n            exportMetadata() {\n                return {\n                    ...super.exportMetadata(),\n                    columnWidthUnits: this.columnWidthUnits\n                };\n            }\n            importMetadata(metadata) {\n                super.importMetadata(metadata, (colId) => {\n                    const unit = metadata.columnWidthUnits[colId];\n                    if (defined(unit)) {\n                        this.columnWidthUnits[colId] = unit;\n                    }\n                });\n            }\n            validateOnUpdate(newOptions) {\n                super.validateOnUpdate(newOptions);\n                if (!this.invalidated && (Object.hasOwnProperty.call(newOptions.columnDefaults || {}, 'width') ||\n                    newOptions.columns?.some((col) => Object.hasOwnProperty.call(col || {}, 'width')))) {\n                    this.invalidated = true;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FixedDistributionStrategy;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/ColumnDistribution/FullDistributionStrategy.js', [_modules['Grid/Core/Table/ColumnDistribution/ColumnDistributionStrategy.js'], _modules['Grid/Core/Globals.js'], _modules['Grid/Core/GridUtils.js']], function (DistributionStrategy, Globals, GridUtils) {\n        /* *\n         *\n         *  Full Distribution Strategy class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { makeHTMLElement } = GridUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class FullDistributionStrategy extends DistributionStrategy {\n            constructor() {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                super(...arguments);\n                this.type = 'full';\n                this.allPreviousWidths = 0;\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            loadColumn(column) {\n                const width = this.getInitialColumnWidth(column);\n                this.allPreviousWidths += width;\n                this.columnWidths[column.id] = width;\n            }\n            getColumnWidth(column) {\n                return this.viewport.getWidthFromRatio(this.columnWidths[column.id] || 0);\n            }\n            resize(resizer, diff) {\n                const vp = this.viewport;\n                const column = resizer.draggedColumn;\n                if (!column) {\n                    return;\n                }\n                const nextColumn = vp.columns[column.index + 1];\n                if (!nextColumn) {\n                    return;\n                }\n                const leftColW = resizer.columnStartWidth ?? 0;\n                const rightColW = resizer.nextColumnStartWidth ?? 0;\n                const minWidth = DistributionStrategy.getMinWidth(column);\n                let newLeftW = leftColW + diff;\n                let newRightW = rightColW - diff;\n                if (newLeftW < minWidth) {\n                    newLeftW = minWidth;\n                    newRightW = leftColW + rightColW - minWidth;\n                }\n                if (newRightW < minWidth) {\n                    newRightW = minWidth;\n                    newLeftW = leftColW + rightColW - minWidth;\n                }\n                this.columnWidths[column.id] = vp.getRatioFromWidth(newLeftW);\n                this.columnWidths[nextColumn.id] = vp.getRatioFromWidth(newRightW);\n            }\n            /**\n             * The initial width of the column in the full distribution mode. The last\n             * column in the viewport will have to fill the remaining space.\n             *\n             * @param column\n             * The column to measure the width.\n             *\n             * @param mock\n             * The mock element to measure the width.\n             */\n            getInitialFullDistWidth(column, mock) {\n                const vp = column.viewport;\n                const columnsCount = vp.grid.enabledColumns?.length ?? 0;\n                if (column.index < columnsCount - 1) {\n                    return vp.getRatioFromWidth(mock.offsetWidth) || 1 / columnsCount;\n                }\n                const result = 1 - this.allPreviousWidths;\n                if (result < 0) {\n                    // eslint-disable-next-line no-console\n                    console.warn('The sum of the columns\\' widths exceeds the ' +\n                        'viewport width. It may cause unexpected behavior in the ' +\n                        'full distribution mode. Check the CSS styles of the ' +\n                        'columns. Corrections may be needed.');\n                }\n                return result;\n            }\n            /**\n             * Creates a mock element to measure the width of the column from the CSS.\n             * The element is appended to the viewport container and then removed.\n             * It should be called only once for each column.\n             *\n             * @param column\n             * The column to measure the width.\n             *\n             * @returns The initial width of the column.\n             */\n            getInitialColumnWidth(column) {\n                const { viewport } = column;\n                // Set the initial width of the column.\n                const mock = makeHTMLElement('div', {\n                    className: Globals.getClassName('columnElement')\n                }, viewport.grid.container);\n                mock.setAttribute('data-column-id', column.id);\n                if (column.options.className) {\n                    mock.classList.add(...column.options.className.split(/\\s+/g));\n                }\n                const result = this.getInitialFullDistWidth(column, mock);\n                mock.remove();\n                return result;\n            }\n            importMetadata(metadata) {\n                if (Object.keys(metadata.columnWidths).length !==\n                    this.viewport.grid.enabledColumns?.length) {\n                    return;\n                }\n                super.importMetadata(metadata);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FullDistributionStrategy;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/ColumnDistribution/ColumnDistribution.js', [_modules['Grid/Core/Table/ColumnDistribution/ColumnDistributionStrategy.js'], _modules['Grid/Core/Table/ColumnDistribution/MixedDistributionStrategy.js'], _modules['Grid/Core/Table/ColumnDistribution/FixedDistributionStrategy.js'], _modules['Grid/Core/Table/ColumnDistribution/FullDistributionStrategy.js'], _modules['Core/Utilities.js']], function (DistributionStrategy, MixedDistributionStrategy, FixedDistributionStrategy, FullDistributionStrategy, U) {\n        /* *\n         *\n         *  Column Distribution namespace\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ColumnDistribution;\n        (function (ColumnDistribution) {\n            /**\n             * Abstract class representing a column distribution strategy.\n             */\n            ColumnDistribution.AbstractStrategy = DistributionStrategy;\n            /**\n             * Registry of column distribution strategies.\n             */\n            ColumnDistribution.types = {\n                mixed: MixedDistributionStrategy,\n                fixed: FixedDistributionStrategy,\n                full: FullDistributionStrategy\n            };\n            /**\n             * Returns the column distribution of the table according to the options:\n             * 1. If `columns.resizing.mode` defined, use it. If not:\n             * 2. If any column has a width defined, use `mixed`. If not:\n             * 3. Use `full`.\n             *\n             * @param viewport\n             * The table that the column distribution strategy is applied to.\n             */\n            function assumeDistributionType(viewport) {\n                const { options } = viewport.grid;\n                const colRendering = options?.rendering?.columns;\n                const result = colRendering?.resizing?.mode ||\n                    colRendering?.distribution;\n                if (result) {\n                    return result;\n                }\n                if (options?.columns?.some((column) => defined(column.width)) || defined(options?.columnDefaults?.width)) {\n                    return 'mixed';\n                }\n                return 'full';\n            }\n            /**\n             * Creates a new column distribution strategy instance based on the\n             * viewport's options.\n             *\n             * @param viewport\n             * The table that the column distribution strategy is applied to.\n             *\n             * @returns\n             * The proper column distribution strategy.\n             */\n            function initStrategy(viewport) {\n                return new ColumnDistribution.types[assumeDistributionType(viewport)](viewport);\n            }\n            ColumnDistribution.initStrategy = initStrategy;\n        })(ColumnDistribution || (ColumnDistribution = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnDistribution;\n    });\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         */\n        class DataModifier {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            benchmark(dataTable, options) {\n                const results = [];\n                const modifier = this;\n                const execute = () => {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                const defaultOptions = {\n                    iterations: 1\n                };\n                const { iterations } = merge(defaultOptions, options);\n                modifier.on('afterBenchmarkIteration', () => {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                const times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', () => {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', () => {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            }\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifier = this;\n                return new Promise((resolve, reject) => {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        reject(e);\n                    }\n                });\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/ColumnUtils.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /**\n         * Utility functions for columns that can be either arrays or typed arrays.\n         * @private\n         */\n        var ColumnUtils;\n        (function (ColumnUtils) {\n            /* *\n            *\n            *  Declarations\n            *\n            * */\n            /* *\n            *\n            * Functions\n            *\n            * */\n            /**\n             * Sets the length of the column array.\n             *\n             * @param {DataTable.Column} column\n             * Column to be modified.\n             *\n             * @param {number} length\n             * New length of the column.\n             *\n             * @param {boolean} asSubarray\n             * If column is a typed array, return a subarray instead of a new array. It\n             * is faster `O(1)`, but the entire buffer will be kept in memory until all\n             * views to it are destroyed. Default is `false`.\n             *\n             * @return {DataTable.Column}\n             * Modified column.\n             *\n             * @private\n             */\n            function setLength(column, length, asSubarray) {\n                if (Array.isArray(column)) {\n                    column.length = length;\n                    return column;\n                }\n                return column[asSubarray ? 'subarray' : 'slice'](0, length);\n            }\n            ColumnUtils.setLength = setLength;\n            /**\n             * Splices a column array.\n             *\n             * @param {DataTable.Column} column\n             * Column to be modified.\n             *\n             * @param {number} start\n             * Index at which to start changing the array.\n             *\n             * @param {number} deleteCount\n             * An integer indicating the number of old array elements to remove.\n             *\n             * @param {boolean} removedAsSubarray\n             * If column is a typed array, return a subarray instead of a new array. It\n             * is faster `O(1)`, but the entire buffer will be kept in memory until all\n             * views to it are destroyed. Default is `true`.\n             *\n             * @param {Array<number>|TypedArray} items\n             * The elements to add to the array, beginning at the start index. If you\n             * don't specify any elements, `splice()` will only remove elements from the\n             * array.\n             *\n             * @return {SpliceResult}\n             * Object containing removed elements and the modified column.\n             *\n             * @private\n             */\n            function splice(column, start, deleteCount, removedAsSubarray, items = []) {\n                if (Array.isArray(column)) {\n                    if (!Array.isArray(items)) {\n                        items = Array.from(items);\n                    }\n                    return {\n                        removed: column.splice(start, deleteCount, ...items),\n                        array: column\n                    };\n                }\n                const Constructor = Object.getPrototypeOf(column)\n                    .constructor;\n                const removed = column[removedAsSubarray ? 'subarray' : 'slice'](start, start + deleteCount);\n                const newLength = column.length - deleteCount + items.length;\n                const result = new Constructor(newLength);\n                result.set(column.subarray(0, start), 0);\n                result.set(items, start);\n                result.set(column.subarray(start + deleteCount), start + items.length);\n                return {\n                    removed: removed,\n                    array: result\n                };\n            }\n            ColumnUtils.splice = splice;\n        })(ColumnUtils || (ColumnUtils = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnUtils;\n    });\n    _registerModule(_modules, 'Data/DataTableCore.js', [_modules['Data/ColumnUtils.js'], _modules['Core/Utilities.js']], function (ColumnUtils, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *\n         * */\n        const { setLength, splice } = ColumnUtils;\n        const { fireEvent, objectEach, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTableCore {\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @example\n             * const dataTable = new Highcharts.DataTableCore({\n             *   columns: {\n             *     year: [2020, 2021, 2022, 2023],\n             *     cost: [11, 13, 12, 14],\n             *     revenue: [12, 15, 14, 18]\n             *   }\n             * });\n\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            constructor(options = {}) {\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for identification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                let rowCount = 0;\n                objectEach(options.columns || {}, (column, columnName) => {\n                    this.columns[columnName] = column.slice();\n                    rowCount = Math.max(rowCount, column.length);\n                });\n                this.applyRowCount(rowCount);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies a row count to the table by setting the `rowCount` property and\n             * adjusting the length of all columns.\n             *\n             * @private\n             * @param {number} rowCount The new row count.\n             */\n            applyRowCount(rowCount) {\n                this.rowCount = rowCount;\n                objectEach(this.columns, (column, columnName) => {\n                    if (column.length !== rowCount) {\n                        this.columns[columnName] = setLength(column, rowCount);\n                    }\n                });\n            }\n            /**\n             * Delete rows. Simplified version of the full\n             * `DataTable.deleteRows` method.\n             *\n             * @param {number} rowIndex\n             * The start row index\n             *\n             * @param {number} [rowCount=1]\n             * The number of rows to delete\n             *\n             * @return {void}\n             *\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1) {\n                if (rowCount > 0 && rowIndex < this.rowCount) {\n                    let length = 0;\n                    objectEach(this.columns, (column, columnName) => {\n                        this.columns[columnName] =\n                            splice(column, rowIndex, rowCount).array;\n                        length = column.length;\n                    });\n                    this.rowCount = length;\n                }\n                fireEvent(this, 'afterDeleteRows', { rowIndex, rowCount });\n                this.versionTag = uniqueKey();\n            }\n            /**\n             * Fetches the given column by the canonical column name. Simplified version\n             * of the full `DataTable.getRow` method, always returning by reference.\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnName, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            asReference) {\n                return this.columns[columnName];\n            }\n            /**\n             * Retrieves all or the given columns. Simplified version of the full\n             * `DataTable.getColumns` method, always returning by reference.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNames, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            asReference) {\n                return (columnNames || Object.keys(this.columns)).reduce((columns, columnName) => {\n                    columns[columnName] = this.columns[columnName];\n                    return columns;\n                }, {});\n            }\n            /**\n             * Retrieves the row at a given index.\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @return {Record<string, number|string|undefined>|undefined}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNames) {\n                return (columnNames || Object.keys(this.columns)).map((key) => this.columns[key]?.[rowIndex]);\n            }\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumn(columnName, column = [], rowIndex = 0, eventDetail) {\n                this.setColumns({ [columnName]: column }, rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found. Simplified version of the full `DataTableCore.setColumns`, limited\n             * to full replacement of the columns (undefined `rowIndex`).\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Ignored in the `DataTableCore`, as it\n             * always replaces the full column.\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                let rowCount = this.rowCount;\n                objectEach(columns, (column, columnName) => {\n                    this.columns[columnName] = column.slice();\n                    rowCount = column.length;\n                });\n                this.applyRowCount(rowCount);\n                if (!eventDetail?.silent) {\n                    fireEvent(this, 'afterSetColumns');\n                    this.versionTag = uniqueKey();\n                }\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             * A simplified version of the full `DateTable.setRow`, limited to objects.\n             *\n             * @param {Record<string, number|string|undefined>} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefined` to add as a new row.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex = this.rowCount, insert, eventDetail) {\n                const { columns } = this, indexRowCount = insert ? this.rowCount + 1 : rowIndex + 1;\n                objectEach(row, (cellValue, columnName) => {\n                    let column = columns[columnName] ||\n                        eventDetail?.addColumns !== false && new Array(indexRowCount);\n                    if (column) {\n                        if (insert) {\n                            column = splice(column, rowIndex, 0, true, [cellValue]).array;\n                        }\n                        else {\n                            column[rowIndex] = cellValue;\n                        }\n                        columns[columnName] = column;\n                    }\n                });\n                if (indexRowCount > this.rowCount) {\n                    this.applyRowCount(indexRowCount);\n                }\n                if (!eventDetail?.silent) {\n                    fireEvent(this, 'afterSetRows');\n                    this.versionTag = uniqueKey();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * A typed array.\n         * @typedef {Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} Highcharts.TypedArray\n         * //**\n         * A column of values in a data table.\n         * @typedef {Array<boolean|null|number|string|undefined>|Highcharts.TypedArray} Highcharts.DataTableColumn\n         */ /**\n        * A collection of data table columns defined by a object where the key is the\n        * column name and the value is an array of the column values.\n        * @typedef {Record<string, Highcharts.DataTableColumn>} Highcharts.DataTableColumnCollection\n        */\n        /**\n         * Options for the `DataTable` or `DataTableCore` classes.\n         * @interface Highcharts.DataTableOptions\n         */ /**\n        * The column options for the data table. The columns are defined by an object\n        * where the key is the column ID and the value is an array of the column\n        * values.\n        *\n        * @name Highcharts.DataTableOptions.columns\n        * @type {Highcharts.DataTableColumnCollection|undefined}\n        */ /**\n        * Custom ID to identify the new DataTable instance.\n        *\n        * @name Highcharts.DataTableOptions.id\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return DataTableCore;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Data/ColumnUtils.js'], _modules['Data/DataTableCore.js'], _modules['Core/Utilities.js']], function (CU, DataTableCore, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *  - Jomar Hønsi\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, defined, extend, fireEvent, isNumber, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTable extends DataTableCore {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            static isNull(row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    const columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = {}) {\n                super(options);\n                this.modified = this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            clone(skipColumns, eventDetail) {\n                const table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                const tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                    tableClone.originalRowIndexes = table.originalRowIndexes;\n                    tableClone.localRowIndexes = table.localRowIndexes;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone\n                });\n                return tableClone;\n            }\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            deleteColumns(columnNames, eventDetail) {\n                const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                        this.deleteRowIndexReferences();\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            }\n            /**\n             * Deletes the row index references. This is useful when the original table\n             * is deleted, and the references are no longer needed. This table is\n             * then considered an original table or a table that has the same row's\n             * order as the original table.\n             */\n            deleteRowIndexReferences() {\n                delete this.originalRowIndexes;\n                delete this.localRowIndexes;\n                // Here, in case of future need, can be implemented updating of the\n                // modified tables' row indexes references.\n            }\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1, eventDetail) {\n                const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    const columns = table.columns, columnNames = Object.keys(columns);\n                    for (let i = 0, iEnd = columnNames.length, column, deletedCells, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        const result = CU.splice(column, rowIndex, rowCount);\n                        deletedCells = result.removed;\n                        columns[columnName] = column = result.array;\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            }\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                if ([\n                    'afterDeleteColumns',\n                    'afterDeleteRows',\n                    'afterSetCell',\n                    'afterSetColumns',\n                    'afterSetRows'\n                ].includes(e.type)) {\n                    this.versionTag = uniqueKey();\n                }\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnName\n             * Column name of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            getCell(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    return column[rowIndex];\n                }\n            }\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            getCellAsBoolean(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                return !!(column && column[rowIndex]);\n            }\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnName\n             * Column name or to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            getCellAsNumber(columnName, rowIndex, useNaN) {\n                const table = this;\n                const column = table.columns[columnName];\n                let cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(`${cellValue ?? ''}`);\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            }\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            getCellAsString(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                return `${(column && column[rowIndex])}`;\n            }\n            /**\n             * Fetches the given column by the canonical column name.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnName, asReference) {\n                return this.getColumns([columnName], asReference)[columnName];\n            }\n            /**\n             * Fetches the given column by the canonical column name, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @deprecated\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            getColumnAsNumbers(columnName, useNaN) {\n                const table = this, columns = table.columns;\n                const column = columns[columnName], columnAsNumber = [];\n                if (column) {\n                    const columnLength = column.length;\n                    if (useNaN) {\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i, true));\n                        }\n                    }\n                    else {\n                        for (let i = 0, cellValue; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            }\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            getColumnNames() {\n                const table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            }\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @param {boolean} [asBasicColumns]\n             * Whether to transform all typed array columns to normal arrays.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNames, asReference, asBasicColumns) {\n                const table = this, tableColumns = table.columns, columns = {};\n                columnNames = (columnNames || Object.keys(tableColumns));\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = tableColumns[columnName];\n                    if (column) {\n                        if (asReference) {\n                            columns[columnName] = column;\n                        }\n                        else if (asBasicColumns && !Array.isArray(column)) {\n                            columns[columnName] = Array.from(column);\n                        }\n                        else {\n                            columns[columnName] = column.slice();\n                        }\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Takes the original row index and returns the local row index in the\n             * modified table for which this function is called.\n             *\n             * @param {number} originalRowIndex\n             * Original row index to get the local row index for.\n             *\n             * @return {number|undefined}\n             * Returns the local row index or `undefined` if not found.\n             */\n            getLocalRowIndex(originalRowIndex) {\n                const { localRowIndexes } = this;\n                if (localRowIndexes) {\n                    return localRowIndexes[originalRowIndex];\n                }\n                return originalRowIndex;\n            }\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            getModifier() {\n                return this.modifier;\n            }\n            /**\n             * Takes the local row index and returns the index of the corresponding row\n             * in the original table.\n             *\n             * @param {number} rowIndex\n             * Local row index to get the original row index for.\n             *\n             * @return {number|undefined}\n             * Returns the original row index or `undefined` if not found.\n             */\n            getOriginalRowIndex(rowIndex) {\n                const { originalRowIndexes } = this;\n                if (originalRowIndexes) {\n                    return originalRowIndexes[rowIndex];\n                }\n                return rowIndex;\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNames) {\n                return this.getRows(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            getRowCount() {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            }\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            getRowIndexBy(columnName, cellValue, rowIndexOffset) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    let rowIndex = -1;\n                    if (Array.isArray(column)) {\n                        // Normal array\n                        rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    }\n                    else if (isNumber(cellValue)) {\n                        // Typed array\n                        rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    }\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRowObject(rowIndex, columnNames) {\n                return this.getRowObjects(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            getVersionTag() {\n                return this.versionTag;\n            }\n            /**\n             * Checks for given column names.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNames\n             * Column names to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            hasColumns(columnNames) {\n                const table = this, columns = table.columns;\n                for (let i = 0, iEnd = columnNames.length, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    if (!columns[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            hasRowWith(columnName, cellValue) {\n                const table = this;\n                const column = table.columns[columnName];\n                // Normal array\n                if (Array.isArray(column)) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                // Typed array\n                if (defined(cellValue) && Number.isFinite(cellValue)) {\n                    return (column.indexOf(+cellValue) !== -1);\n                }\n                return false;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            renameColumn(columnName, newColumnName) {\n                const table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Sets a cell value based on the row index and column.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            setCell(columnName, rowIndex, cellValue, eventDetail) {\n                const table = this, columns = table.columns, modifier = table.modifier;\n                let column = columns[columnName];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!column) {\n                    column = columns[columnName] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnName, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @param {boolean} [typeAsOriginal=false]\n             * Determines whether the original column retains its type when data\n             * replaced. If `true`, the original column keeps its type. If not\n             * (default), the original column will adopt the type of the replacement\n             * column.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail, typeAsOriginal) {\n                const table = this, tableColumns = table.columns, tableModifier = table.modifier, columnNames = Object.keys(columns);\n                let rowCount = table.rowCount;\n                table.emit({\n                    type: 'setColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!defined(rowIndex) && !typeAsOriginal) {\n                    super.setColumns(columns, rowIndex, extend(eventDetail, { silent: true }));\n                }\n                else {\n                    for (let i = 0, iEnd = columnNames.length, column, tableColumn, columnName, ArrayConstructor; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        tableColumn = tableColumns[columnName];\n                        ArrayConstructor = Object.getPrototypeOf((tableColumn && typeAsOriginal) ? tableColumn : column).constructor;\n                        if (!tableColumn) {\n                            tableColumn = new ArrayConstructor(rowCount);\n                        }\n                        else if (ArrayConstructor === Array) {\n                            if (!Array.isArray(tableColumn)) {\n                                tableColumn = Array.from(tableColumn);\n                            }\n                        }\n                        else if (tableColumn.length < rowCount) {\n                            tableColumn =\n                                new ArrayConstructor(rowCount);\n                            tableColumn.set(tableColumns[columnName]);\n                        }\n                        tableColumns[columnName] = tableColumn;\n                        for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                            tableColumn[i] = column[i];\n                        }\n                        rowCount = Math.max(rowCount, column.length);\n                    }\n                    this.applyRowCount(rowCount);\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, rowIndex || 0);\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets or unsets the modifier for the table.\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successful, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            setModifier(modifier, eventDetail) {\n                const table = this;\n                let promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then((table) => {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch']((error) => {\n                    table.emit({\n                        type: 'setModifierError',\n                        error,\n                        modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            }\n            /**\n             * Sets the original row indexes for the table. It is used to keep the\n             * reference to the original rows when modifying the table.\n             *\n             * @param {Array<number|undefined>} originalRowIndexes\n             * Original row indexes array.\n             *\n             * @param {boolean} omitLocalRowIndexes\n             * Whether to omit the local row indexes calculation. Defaults to `false`.\n             */\n            setOriginalRowIndexes(originalRowIndexes, omitLocalRowIndexes = false) {\n                this.originalRowIndexes = originalRowIndexes;\n                if (omitLocalRowIndexes) {\n                    return;\n                }\n                const modifiedIndexes = this.localRowIndexes = [];\n                for (let i = 0, iEnd = originalRowIndexes.length, originalIndex; i < iEnd; ++i) {\n                    originalIndex = originalRowIndexes[i];\n                    if (defined(originalIndex)) {\n                        modifiedIndexes[originalIndex] = i;\n                    }\n                }\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex, insert, eventDetail) {\n                this.setRows([row], rowIndex, insert, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefined` to add as new rows.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRows(rows, rowIndex = this.rowCount, insert, eventDetail) {\n                const table = this, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n                for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            const column = columns[columnNames[j]];\n                            if (insert) {\n                                columns[columnNames[j]] = CU.splice(column, i2, 0, true, [null]).array;\n                            }\n                            else {\n                                column[i2] = null;\n                            }\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        super.setRow(row, i2, void 0, { silent: true });\n                    }\n                }\n                const indexRowCount = insert ?\n                    rowCount + rows.length :\n                    rowIndex + rowCount;\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        const columnName = columnNames[i];\n                        columns[columnName] = CU.setLength(columns[columnName], indexRowCount);\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Null state for a row record. In some cases, a row in a table may not\n         * contain any data or may be invalid. In these cases, a null state can be\n         * used to indicate that the row record is empty or invalid.\n         *\n         * @name Highcharts.DataTable.NULL\n         * @type {Highcharts.DataTableRowObject}\n         *\n         * @see {@link Highcharts.DataTable.isNull} for a null test.\n         *\n         * @example\n         * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n         */\n        DataTable.NULL = {};\n        /**\n         * Semantic version string of the DataTable class.\n         * @internal\n         */\n        DataTable.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        class DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             *\n             * @param {Array<DataTableOptions>} [dataTables]\n             * Multiple connector data tables options.\n             */\n            constructor(options = {}, dataTables = []) {\n                /**\n                 * Tables managed by this DataConnector instance.\n                 */\n                this.dataTables = {};\n                /**\n                 * Helper flag for detecting whether the data connector is loaded.\n                 * @internal\n                 */\n                this.loaded = false;\n                this.metadata = options.metadata || { columns: {} };\n                // Create a data table for each defined in the dataTables user options.\n                let dataTableIndex = 0;\n                if (dataTables?.length > 0) {\n                    for (let i = 0, iEnd = dataTables.length; i < iEnd; ++i) {\n                        const dataTable = dataTables[i];\n                        const key = dataTable?.key;\n                        this.dataTables[key ?? dataTableIndex] =\n                            new DataTable(dataTable);\n                        if (!key) {\n                            dataTableIndex++;\n                        }\n                    }\n                    // If user options dataTables is not defined, generate a default table.\n                }\n                else {\n                    this.dataTables[0] = new DataTable(options.dataTable);\n                }\n            }\n            /**\n             * Poll timer ID, if active.\n             */\n            get polling() {\n                return !!this._polling;\n            }\n            /**\n             * Gets the first data table.\n             *\n             * @return {DataTable}\n             * The data table instance.\n             */\n            get table() {\n                return this.getTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            describeColumn(name, columnMeta) {\n                const connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            }\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            describeColumns(columns) {\n                const connector = this, columnNames = Object.keys(columns);\n                let columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            }\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            getColumnOrder(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort((a, b) => (pick(columns[a].index, 0) - pick(columns[b].index, 0)));\n                }\n            }\n            /**\n             * Returns a single data table instance based on the provided key.\n             * Otherwise, returns the first data table.\n             *\n             * @param {string} [key]\n             * The data table key.\n             *\n             * @return {DataTable}\n             * The data table instance.\n             */\n            getTable(key) {\n                if (key) {\n                    return this.dataTables[key];\n                }\n                return Object.values(this.dataTables)[0];\n            }\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            getSortedColumns(usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            }\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            load() {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            }\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            save() {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            }\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            setColumnOrder(columnNames) {\n                const connector = this;\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            }\n            async setModifierOptions(modifierOptions, tablesOptions) {\n                for (const [key, table] of Object.entries(this.dataTables)) {\n                    const tableOptions = tablesOptions?.find((dataTable) => dataTable.key === key);\n                    const mergedModifierOptions = merge(tableOptions?.dataModifier, modifierOptions);\n                    const ModifierClass = (mergedModifierOptions &&\n                        DataModifier.types[mergedModifierOptions.type]);\n                    await table.setModifier(ModifierClass ?\n                        new ModifierClass(mergedModifierOptions) :\n                        void 0);\n                }\n                return this;\n            }\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            startPolling(refreshTime = 1000) {\n                const connector = this;\n                const tables = connector.dataTables;\n                // Assign a new abort controller.\n                this.pollingController = new AbortController();\n                // Clear the polling timeout.\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(() => connector\n                    .load()['catch']((error) => connector.emit({\n                    type: 'loadError',\n                    error,\n                    tables\n                }))\n                    .then(() => {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }), refreshTime);\n            }\n            /**\n             * Stops polling data. Shouldn't be performed if polling is already stopped.\n             */\n            stopPolling() {\n                const connector = this;\n                if (!connector.polling) {\n                    return;\n                }\n                // Abort the existing request.\n                connector?.pollingController?.abort();\n                // Clear the polling timeout.\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            }\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            whatIs(name) {\n                return this.metadata.columns[name];\n            }\n            /**\n             * Iterates over the dataTables and initiates the corresponding converters.\n             * Updates the dataTables and assigns the first converter.\n             *\n             * @param {T}[data]\n             * Data specific to the corresponding converter.\n             *\n             * @param {DataConnector.CreateConverterFunction}[createConverter]\n             * Creates a specific converter combining the dataTable options.\n             *\n             * @param {DataConnector.ParseDataFunction<T>}[parseData]\n             * Runs the converter parse method with the specific data type.\n             */\n            initConverters(data, createConverter, parseData) {\n                let index = 0;\n                for (const [key, table] of Object.entries(this.dataTables)) {\n                    // Create a proper converter and parse its data.\n                    const converter = createConverter(key, table);\n                    parseData(converter, data);\n                    // Update the dataTable.\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    // Assign the first converter.\n                    if (index === 0) {\n                        this.converter = converter;\n                    }\n                    index++;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *  - Wojciech Chmiel\n         *  - Jomar Hønsi\n         *\n         * */\n        const { addEvent, fireEvent, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        class DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^(\\d{4})([\\-\\.\\/])(\\d{1,2})\\2(\\d{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            const d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            let year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                const mergedOptions = merge(DataConverter.defaultOptions, options);\n                let regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            asBoolean(value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            }\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            asDate(value) {\n                let timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            }\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            asGuessedType(value) {\n                const converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            }\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            asNumber(value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    const decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            }\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            asString(value) {\n                return '' + value;\n            }\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            deduceDateFormat(data, limit, save) {\n                const parser = this, stable = [], max = [];\n                let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[\\-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            }\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            export(\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            getTable() {\n                throw new Error('Not implemented');\n            }\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            guessType(value) {\n                const converter = this;\n                let result = 'string';\n                if (typeof value === 'string') {\n                    const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n                    let innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    const floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        const dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            parse(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            parseDate(value, dateFormatProp) {\n                const converter = this, options = converter.options;\n                let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            trim(str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[\\d\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        DataConverter.defaultOptions = {\n            dateFormat: '',\n            alternativeFormat: '',\n            startColumn: 0,\n            endColumn: Number.MAX_VALUE,\n            startRow: 0,\n            endRow: Number.MAX_VALUE,\n            firstRowAsNames: true,\n            switchRowsAndColumns: false\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConverter.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a converter class to the registry.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the converter class.\n             *\n             * @param {DataConverterTypes} DataConverterClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a converter registered with this key.\n             */\n            function registerType(key, DataConverterClass) {\n                return (!!key &&\n                    !DataConverter.types[key] &&\n                    !!(DataConverter.types[key] = DataConverterClass));\n            }\n            DataConverter.registerType = registerType;\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns = [], headers = []) {\n                const table = new DataTable();\n                for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || `${i}`, columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        class DataCursor {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(stateMap = {}) {\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            addListener(tableId, state, listener) {\n                const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                const listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            }\n            /**\n             * @private\n             */\n            buildEmittingTag(e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            }\n            /**\n             * This function emits a state cursor related to a table. It will provide\n             * lasting state cursors of the table to listeners.\n             *\n             * @example\n             * ```ts\n             * dataCursor.emit(myTable, {\n             *     type: 'position',\n             *     column: 'city',\n             *     row: 4,\n             *     state: 'hover',\n             * });\n             * ```\n             *\n             * @param {Data.DataTable} table\n             * The related table of the cursor.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * The state cursor to emit.\n             *\n             * @param {Event} [event]\n             * Optional event information from a related source.\n             *\n             * @param {boolean} [lasting]\n             * Whether this state cursor should be kept until it is cleared with\n             * {@link DataCursor#remitCursor}.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            emitCursor(table, cursor, event, lasting) {\n                const tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ?? {});\n                    const cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    const e = {\n                        cursor,\n                        cursors,\n                        table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        const index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            }\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            remitCursor(tableId, cursor) {\n                const cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    const index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            removeListener(tableId, state, listener) {\n                const listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataCursor class.\n         * @internal\n         */\n        DataCursor.version = '1.0.0';\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    const columnNeedle = JSON.stringify(needle.columns);\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                const needleColumns = needle.columns;\n                const rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                const columns = (cursor.columns || []);\n                const positions = [];\n                const state = cursor.state;\n                for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row,\n                            state\n                        });\n                        continue;\n                    }\n                    for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row,\n                            state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                const range = {\n                    type: 'range',\n                    firstRow: (cursor.row ??\n                        (defaultRange && defaultRange.firstRow) ??\n                        0),\n                    lastRow: (cursor.row ??\n                        (defaultRange && defaultRange.lastRow) ??\n                        Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Accessibility/HighContrastMode.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2009-2025 Øystein Moseng\n         *\n         *  Handling for Windows High Contrast Mode.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { doc, isMS, win } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Detect WHCM in the browser.\n         *\n         * @function Highcharts#isHighContrastModeActive\n         * @private\n         * @return {boolean} Returns true if the browser is in High Contrast mode.\n         */\n        function isHighContrastModeActive() {\n            // Test BG image for IE\n            if (isMS && win.getComputedStyle) {\n                const testDiv = doc.createElement('div');\n                const imageSrc = 'data:image/gif;base64,' +\n                    'R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==';\n                testDiv.style.backgroundImage = `url(${imageSrc})`; // #13071\n                doc.body.appendChild(testDiv);\n                const bi = (testDiv.currentStyle ||\n                    win.getComputedStyle(testDiv)).backgroundImage;\n                doc.body.removeChild(testDiv);\n                return bi === 'none';\n            }\n            // Other browsers use the forced-colors standard\n            return win.matchMedia && win.matchMedia('(forced-colors: active)').matches;\n        }\n        /**\n         * Force high contrast theme for the chart. The default theme is defined in\n         * a separate file.\n         *\n         * @function Highcharts#setHighContrastTheme\n         * @private\n         * @param {Highcharts.AccessibilityChart} chart The chart to set the theme of.\n         * @return {void}\n         */\n        function setHighContrastTheme(chart) {\n            // We might want to add additional functionality here in the future for\n            // storing the old state so that we can reset the theme if HC mode is\n            // disabled. For now, the user will have to reload the page.\n            chart.highContrastModeActive = true;\n            // Apply theme to chart\n            const theme = (chart.options.accessibility.highContrastTheme);\n            chart.update(theme, false);\n            const hasCustomColors = theme.colors?.length > 1;\n            // Force series colors (plotOptions is not enough)\n            chart.series.forEach(function (s) {\n                const plotOpts = theme.plotOptions[s.type] || {};\n                const fillColor = hasCustomColors && s.colorIndex !== void 0 ?\n                    theme.colors[s.colorIndex] :\n                    plotOpts.color || 'window';\n                const seriesOptions = {\n                    color: plotOpts.color || 'windowText',\n                    colors: hasCustomColors ?\n                        theme.colors : [plotOpts.color || 'windowText'],\n                    borderColor: plotOpts.borderColor || 'window',\n                    fillColor\n                };\n                s.update(seriesOptions, false);\n                if (s.points) {\n                    // Force point colors if existing\n                    s.points.forEach(function (p) {\n                        if (p.options && p.options.color) {\n                            p.update({\n                                color: plotOpts.color || 'windowText',\n                                borderColor: plotOpts.borderColor || 'window'\n                            }, false);\n                        }\n                    });\n                }\n            });\n            // The redraw for each series and after is required for 3D pie\n            // (workaround)\n            chart.redraw();\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const whcm = {\n            isHighContrastModeActive,\n            setHighContrastTheme\n        };\n\n        return whcm;\n    });\n    _registerModule(_modules, 'Grid/Core/Accessibility/Accessibility.js', [_modules['Accessibility/HighContrastMode.js'], _modules['Grid/Core/Globals.js'], _modules['Grid/Core/GridUtils.js']], function (whcm, Globals, GridUtils) {\n        /* *\n         *\n         *  Grid Accessibility class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = GridUtils;\n        /**\n         *  Representing the accessibility functionalities for the Data Grid.\n         */\n        class Accessibility {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Construct the accessibility object.\n             *\n             * @param grid\n             * The Grid Table instance which the accessibility controller belong to.\n             */\n            constructor(grid) {\n                this.grid = grid;\n                this.element = document.createElement('div');\n                this.element.classList.add(Globals.getClassName('visuallyHidden'));\n                this.grid.container?.prepend(this.element);\n                this.announcerElement = document.createElement('p');\n                this.announcerElement.setAttribute('aria-atomic', 'true');\n                this.announcerElement.setAttribute('aria-hidden', 'false');\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Add the 'sortable' hint span element for the sortable column.\n             *\n             * @param element\n             * The element to add the description to.\n             */\n            addSortableColumnHint(element) {\n                const sortableLang = this.grid.options?.lang?.accessibility?.sorting?.sortable;\n                if (!sortableLang) {\n                    return;\n                }\n                makeHTMLElement('span', {\n                    className: Globals.getClassName('visuallyHidden'),\n                    innerText: ', ' + sortableLang\n                }, element);\n            }\n            /**\n             * Add the description to the header cell.\n             *\n             * @param thElement\n             * The header cell element to add the description to.\n             *\n             * @param description\n             * The description to be added.\n             */\n            addHeaderCellDescription(thElement, description) {\n                if (description) {\n                    thElement.setAttribute('aria-description', description);\n                }\n            }\n            /**\n             * Announce the message to the screen reader.\n             *\n             * @param msg\n             * The message to be announced.\n             *\n             * @param assertive\n             * Whether the message should be assertive. Default is false.\n             */\n            announce(msg, assertive = false) {\n                if (this.announcerTimeout) {\n                    clearTimeout(this.announcerTimeout);\n                }\n                this.announcerElement.remove();\n                this.announcerElement.setAttribute('aria-live', assertive ? 'assertive' : 'polite');\n                this.element.appendChild(this.announcerElement);\n                this.announcerElement.textContent = msg;\n                this.announcerTimeout = setTimeout(() => {\n                    this.announcerElement.remove();\n                }, 3000);\n            }\n            /**\n             * Announce the message to the screen reader that the user sorted the\n             * column.\n             *\n             * @param order\n             * The order of the sorting.\n             */\n            userSortedColumn(order) {\n                const { options } = this.grid;\n                const announcementsLang = options?.lang\n                    ?.accessibility?.sorting?.announcements;\n                if (!options?.accessibility?.announcements?.sorting) {\n                    return;\n                }\n                let msg;\n                switch (order) {\n                    case 'asc':\n                        msg = announcementsLang?.ascending;\n                        break;\n                    case 'desc':\n                        msg = announcementsLang?.descending;\n                        break;\n                    default:\n                        msg = announcementsLang?.none;\n                }\n                if (!msg) {\n                    return;\n                }\n                this.announce(msg, true);\n            }\n            /**\n             * Set the aria sort state of the column header cell element.\n             *\n             * @param thElement\n             * The header cell element to set the `aria-sort` state to.\n             *\n             * @param state\n             * The sort state to be set for the column header cell.\n             */\n            setColumnSortState(thElement, state) {\n                thElement?.setAttribute('aria-sort', state);\n            }\n            /**\n             * Adds high contrast CSS class, if the browser is in High Contrast mode.\n             */\n            addHighContrast() {\n                const highContrastMode = this.grid.options?.accessibility?.highContrastMode;\n                if (highContrastMode !== false && (whcm.isHighContrastModeActive() ||\n                    highContrastMode === true)) {\n                    this.grid.contentWrapper?.classList.add('hcg-theme-highcontrast');\n                }\n            }\n            /**\n             * Set the row index attribute for the row element.\n             *\n             * @param el\n             * The row element to set the index to.\n             *\n             * @param idx\n             * The index of the row in the data table.\n             */\n            setRowIndex(el, idx) {\n                el.setAttribute('aria-rowindex', idx);\n            }\n            /**\n             * Set a11y options for the Grid.\n             */\n            setA11yOptions() {\n                const grid = this.grid;\n                const tableEl = grid.tableElement;\n                if (!tableEl) {\n                    return;\n                }\n                tableEl.setAttribute('aria-rowcount', grid.dataTable?.getRowCount() || 0);\n                if (grid.captionElement) {\n                    tableEl.setAttribute('aria-labelledby', grid.captionElement.id);\n                }\n                if (grid.descriptionElement) {\n                    tableEl.setAttribute('aria-describedby', grid.descriptionElement.id);\n                }\n                this.addHighContrast();\n            }\n            /**\n             * Destroy the accessibility controller.\n             */\n            destroy() {\n                this.element.remove();\n                this.announcerElement.remove();\n                clearTimeout(this.announcerTimeout);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Accessibility;\n    });\n    _registerModule(_modules, 'Grid/Core/Defaults.js', [_modules['Core/Utilities.js']], function (Utils) {\n        /* *\n         *\n         *  Grid default options\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { merge } = Utils;\n        /**\n         * Namespace for default options.\n         */\n        var Defaults;\n        (function (Defaults) {\n            /**\n             * Default options for the Grid.\n             * @internal\n             */\n            Defaults.defaultOptions = {\n                accessibility: {\n                    enabled: true,\n                    highContrastMode: 'auto',\n                    announcements: {\n                        sorting: true\n                    }\n                },\n                lang: {\n                    accessibility: {\n                        sorting: {\n                            sortable: 'Sortable.',\n                            announcements: {\n                                ascending: 'Sorted ascending.',\n                                descending: 'Sorted descending.',\n                                none: 'Not sorted.'\n                            }\n                        }\n                    },\n                    loading: 'Loading...',\n                    noData: 'No data to display'\n                },\n                time: {\n                    timezone: 'UTC'\n                },\n                rendering: {\n                    rows: {\n                        bufferSize: 10,\n                        minVisibleRows: 2,\n                        strictHeights: false,\n                        virtualizationThreshold: 50\n                    },\n                    header: {\n                        enabled: true\n                    },\n                    columns: {\n                        resizing: {\n                            enabled: true\n                        }\n                    },\n                    theme: 'hcg-theme-default'\n                },\n                columnDefaults: {\n                    sorting: {\n                        sortable: true\n                    }\n                }\n            };\n            /**\n             * Merge the default options with custom options. Commonly used for defining\n             * reusable templates.\n             *\n             * @param options\n             * The new custom chart options.\n             */\n            function setOptions(options) {\n                merge(true, Defaults.defaultOptions, options);\n            }\n            Defaults.setOptions = setOptions;\n        })(Defaults || (Defaults = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Defaults;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/CellContent/CellContent.js', [], function () {\n        /* *\n         *\n         *  Cell Content abstract class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a cell content in the grid.\n         */\n        class CellContent {\n            /**\n             * Creates and renders the cell content.\n             *\n             * @param cell\n             * The cell to which the content belongs.\n             */\n            constructor(cell) {\n                this.cell = cell;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellContent;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/CellContent/TextContent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Grid/Core/Table/CellContent/CellContent.js'], _modules['Grid/Core/GridUtils.js'], _modules['Core/Utilities.js']], function (AST, CellContent, GridUtils, Utils) {\n        /* *\n         *\n         *  Text Cell Content class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { setHTMLContent } = GridUtils;\n        const { defined } = Utils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a text type of content.\n         */\n        class TextContent extends CellContent {\n            constructor(cell) {\n                super(cell);\n                this.add();\n            }\n            add() {\n                this.update();\n            }\n            destroy() {\n                this.cell.htmlElement.innerHTML = AST.emptyHTML;\n            }\n            update() {\n                setHTMLContent(this.cell.htmlElement, this.format());\n            }\n            /**\n             * Returns the formatted value of the cell.\n             *\n             * @internal\n             */\n            format() {\n                const { cell } = this;\n                const cellsDefaults = cell.row.viewport.grid.options?.columnDefaults?.cells || {};\n                const { format, formatter } = cell.column.options.cells || {};\n                let value = cell.value;\n                if (!defined(value)) {\n                    value = '';\n                }\n                let cellContent = '';\n                if (!format && !formatter) {\n                    return cell.format(TextContent.defaultFormatsForDataTypes[cell.column.dataType]);\n                }\n                const isDefaultFormat = cellsDefaults.format === format;\n                const isDefaultFormatter = cellsDefaults.formatter === formatter;\n                if (isDefaultFormat && isDefaultFormatter) {\n                    cellContent = formatter ?\n                        formatter.call(cell).toString() :\n                        (format ? cell.format(format) : value + '');\n                }\n                else if (isDefaultFormat) {\n                    cellContent = formatter?.call(cell).toString() || value + '';\n                }\n                else if (isDefaultFormatter) {\n                    cellContent = format ? cell.format(format) : value + '';\n                }\n                return cellContent;\n            }\n        }\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        (function (TextContent) {\n            /**\n             * Default formats for data types.\n             */\n            TextContent.defaultFormatsForDataTypes = {\n                string: '{value}',\n                number: '{value}',\n                'boolean': '{value}',\n                datetime: '{value:%Y-%m-%d %H:%M:%S}'\n            };\n        })(TextContent || (TextContent = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TextContent;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Column.js', [_modules['Core/Utilities.js'], _modules['Core/Templating.js'], _modules['Grid/Core/Table/CellContent/TextContent.js'], _modules['Grid/Core/Globals.js']], function (Utils, Templating, TextContent, Globals) {\n        /* *\n         *\n         *  Grid Column class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { defined, merge, fireEvent } = Utils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a column in the data grid.\n         */\n        class Column {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a column in the data grid.\n             *\n             * @param viewport\n             * The viewport (table) the column belongs to.\n             *\n             * @param id\n             * The id of the column (`name` in the Data Table).\n             *\n             * @param index\n             * The index of the column.\n             */\n            constructor(viewport, id, index) {\n                /**\n                 * The cells of the column.\n                 */\n                this.cells = [];\n                const { grid } = viewport;\n                this.id = id;\n                this.index = index;\n                this.viewport = viewport;\n                this.loadData();\n                this.dataType = this.assumeDataType();\n                this.options = merge(grid.options?.columnDefaults ?? {}, grid.columnOptionsMap?.[id] ?? {});\n                fireEvent(this, 'afterInit');\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Loads the data of the column from the viewport's data table.\n             */\n            loadData() {\n                this.data = this.viewport.dataTable.getColumn(this.id, true);\n            }\n            /**\n             * Creates a cell content instance.\n             *\n             * @param cell\n             * The cell that is to be edited.\n             *\n             */\n            createCellContent(cell) {\n                return new TextContent(cell);\n            }\n            /**\n             * Assumes the data type of the column based on the options or data in the\n             * column if not specified.\n             */\n            assumeDataType() {\n                const { grid } = this.viewport;\n                const type = grid.columnOptionsMap?.[this.id]?.dataType ??\n                    grid.options?.columnDefaults?.dataType;\n                if (type) {\n                    return type;\n                }\n                if (!this.data) {\n                    return 'string';\n                }\n                if (!Array.isArray(this.data)) {\n                    // Typed array\n                    return 'number';\n                }\n                for (let i = 0, iEnd = Math.min(this.data.length, 30); i < iEnd; ++i) {\n                    if (!defined(this.data[i])) {\n                        // If the data is null or undefined, we should look\n                        // at the next value to determine the type.\n                        continue;\n                    }\n                    switch (typeof this.data[i]) {\n                        case 'number':\n                            return 'number';\n                        case 'boolean':\n                            return 'boolean';\n                        default:\n                            return 'string';\n                    }\n                }\n                // eslint-disable-next-line no-console\n                console.warn(`Column \"${this.id}\" contains too few data points with ` +\n                    'unambiguous types to correctly determine its dataType. It\\'s ' +\n                    'recommended to set the `dataType` option for it.');\n                return 'string';\n            }\n            /**\n             * Registers a cell in the column.\n             *\n             * @param cell\n             * The cell to register.\n             */\n            registerCell(cell) {\n                cell.htmlElement.setAttribute('data-column-id', this.id);\n                if (this.options.className) {\n                    cell.htmlElement.classList.add(...this.options.className.split(/\\s+/g));\n                }\n                if (this.viewport.grid.hoveredColumnId === this.id) {\n                    cell.htmlElement.classList.add(Globals.getClassName('hoveredColumn'));\n                }\n                this.cells.push(cell);\n            }\n            /**\n             * Unregister a cell from the column.\n             *\n             * @param cell\n             * The cell to unregister.\n             */\n            unregisterCell(cell) {\n                const index = this.cells.indexOf(cell);\n                if (index > -1) {\n                    this.cells.splice(index, 1);\n                }\n            }\n            /**\n             * Returns the width of the column in pixels.\n             */\n            getWidth() {\n                return this.viewport.columnDistribution.getColumnWidth(this);\n            }\n            /**\n             * Adds or removes the hovered CSS class to the column element\n             * and its cells.\n             *\n             * @param hovered\n             * Whether the column should be hovered.\n             */\n            setHoveredState(hovered) {\n                this.header?.htmlElement?.classList[hovered ? 'add' : 'remove'](Globals.getClassName('hoveredColumn'));\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    this.cells[i].htmlElement.classList[hovered ? 'add' : 'remove'](Globals.getClassName('hoveredColumn'));\n                }\n            }\n            /**\n             * Adds or removes the synced CSS class to the column element\n             * and its cells.\n             *\n             * @param synced\n             * Whether the column should have synced state.\n             */\n            setSyncedState(synced) {\n                this.header?.htmlElement?.classList[synced ? 'add' : 'remove'](Globals.getClassName('syncedColumn'));\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    this.cells[i].htmlElement.classList[synced ? 'add' : 'remove'](Globals.getClassName('syncedColumn'));\n                }\n            }\n            /**\n             * Returns the formatted string where the templating context is the column.\n             *\n             * @param template\n             * The template string.\n             *\n             * @return\n             * The formatted string.\n             */\n            format(template) {\n                return Templating.format(template, this, this.viewport.grid);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Column;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Row.js', [_modules['Grid/Core/GridUtils.js']], function (GridUtils) {\n        /* *\n         *\n         *  Grid Row abstract class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = GridUtils;\n        /* *\n         *\n         *  Abstract Class of Row\n         *\n         * */\n        /**\n         * Represents a row in the data grid.\n         */\n        class Row {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a row in the data grid.\n             *\n             * @param viewport\n             * The Grid Table instance which the row belongs to.\n             */\n            constructor(viewport) {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * The cells of the row.\n                 */\n                this.cells = [];\n                this.viewport = viewport;\n                this.htmlElement = makeHTMLElement('tr', {});\n            }\n            /**\n             * Renders the row's content. It does not attach the row element to the\n             * viewport nor pushes the rows to the viewport.rows array.\n             */\n            render() {\n                const columns = this.viewport.columns;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    const cell = this.createCell(columns[i]);\n                    cell.render();\n                }\n                this.rendered = true;\n                if (this.viewport.grid.options?.rendering?.rows?.virtualization) {\n                    this.reflow();\n                }\n            }\n            /**\n             * Reflows the row's content dimensions.\n             */\n            reflow() {\n                for (let j = 0, jEnd = this.cells.length; j < jEnd; ++j) {\n                    this.cells[j].reflow();\n                }\n                const vp = this.viewport;\n                if (vp.rowsWidth) {\n                    this.htmlElement.style.width = vp.rowsWidth + 'px';\n                }\n            }\n            /**\n             * Destroys the row.\n             */\n            destroy() {\n                if (!this.htmlElement) {\n                    return;\n                }\n                for (let i = this.cells.length - 1; i >= 0; --i) {\n                    this.cells[i].destroy();\n                }\n                this.htmlElement.remove();\n            }\n            /**\n             * Returns the cell with the given column ID.\n             *\n             * @param columnId\n             * The column ID that the cell belongs to.\n             *\n             * @returns\n             * The cell with the given column ID or undefined if not found.\n             */\n            getCell(columnId) {\n                return this.cells.find((cell) => cell.column?.id === columnId);\n            }\n            /**\n             * Registers a cell in the row.\n             *\n             * @param cell\n             * The cell to register.\n             */\n            registerCell(cell) {\n                this.cells.push(cell);\n            }\n            /**\n             * Unregister a cell from the row.\n             *\n             * @param cell\n             * The cell to unregister.\n             */\n            unregisterCell(cell) {\n                const index = this.cells.indexOf(cell);\n                if (index > -1) {\n                    this.cells.splice(index, 1);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Row;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Cell.js', [_modules['Core/Templating.js']], function (Templating) {\n        /* *\n         *\n         *  Grid Cell abstract class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Abstract Class of Cell\n         *\n         * */\n        class Cell {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a cell in the data grid.\n             *\n             * @param row\n             * The row of the cell.\n             *\n             * @param column\n             * The column of the cell.\n             */\n            constructor(row, column) {\n                /**\n                 * Array of cell events to be removed when the cell is destroyed.\n                 */\n                this.cellEvents = [];\n                this.column = column;\n                this.row = row;\n                this.row.registerCell(this);\n                this.htmlElement = this.init();\n                this.htmlElement.setAttribute('tabindex', '-1');\n                this.initEvents();\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Init element.\n             * @internal\n             */\n            init() {\n                return document.createElement('td', {});\n            }\n            /**\n             * Initialize event listeners. Events added to the `cellEvents` array will\n             * be registered now and unregistered when the cell is destroyed.\n             */\n            initEvents() {\n                this.cellEvents.push(['blur', () => this.onBlur()]);\n                this.cellEvents.push(['focus', () => this.onFocus()]);\n                this.cellEvents.push(['click', (e) => {\n                        this.onClick(e);\n                    }]);\n                this.cellEvents.push(['keydown', (e) => {\n                        this.onKeyDown(e);\n                    }]);\n                this.cellEvents.forEach((pair) => {\n                    this.htmlElement.addEventListener(pair[0], pair[1]);\n                });\n            }\n            /**\n             * Handles the focus event on the cell.\n             */\n            onFocus() {\n                const vp = this.row.viewport;\n                const focusAnchor = vp.rowsVirtualizer.focusAnchorCell?.htmlElement;\n                focusAnchor?.setAttribute('tabindex', '-1');\n            }\n            /**\n             * Handles the blur event on the cell.\n             */\n            onBlur() {\n                const vp = this.row.viewport;\n                const focusAnchor = vp.rowsVirtualizer.focusAnchorCell?.htmlElement;\n                focusAnchor?.setAttribute('tabindex', '0');\n                delete vp.focusCursor;\n            }\n            /**\n             * Handles user keydown on the cell.\n             *\n             * @param e\n             * Keyboard event object.\n             */\n            onKeyDown(e) {\n                const { row, column } = this;\n                if (!column) {\n                    return;\n                }\n                const vp = row.viewport;\n                const changeFocusKeys = {\n                    ArrowDown: [1, 0],\n                    ArrowUp: [-1, 0],\n                    ArrowLeft: [0, -1],\n                    ArrowRight: [0, 1]\n                };\n                const dir = changeFocusKeys[e.key];\n                if (dir) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    const localRowIndex = row.index === void 0 ? -1 : (row.index - vp.rows[0].index);\n                    const nextVerticalDir = localRowIndex + dir[0];\n                    if (nextVerticalDir < 0 && vp.header) {\n                        vp.columns[column.index + dir[1]]?.header?.htmlElement.focus();\n                        return;\n                    }\n                    const nextRow = vp.rows[nextVerticalDir];\n                    if (nextRow) {\n                        nextRow.cells[column.index + dir[1]]?.htmlElement.focus();\n                    }\n                }\n            }\n            /**\n             * Renders the cell by appending the HTML element to the row.\n             */\n            render() {\n                this.row.htmlElement.appendChild(this.htmlElement);\n                this.reflow();\n            }\n            /**\n             * Reflows the cell dimensions.\n             */\n            reflow() {\n                const column = this.column;\n                if (!column) {\n                    return;\n                }\n                const elementStyle = this.htmlElement.style;\n                elementStyle.width = elementStyle.maxWidth = column.getWidth() + 'px';\n            }\n            /**\n             * Returns the formatted string where the templating context is the cell.\n             *\n             * @param template\n             * The template string.\n             *\n             * @return\n             * The formatted string.\n             */\n            format(template) {\n                return Templating.format(template, this, this.row.viewport.grid);\n            }\n            /**\n             * Sets the custom class name of the cell based on the template.\n             *\n             * @param template\n             * The template string.\n             */\n            setCustomClassName(template) {\n                const element = this.htmlElement;\n                if (this.customClassName) {\n                    element.classList.remove(...this.customClassName.split(/\\s+/g));\n                }\n                if (!template) {\n                    delete this.customClassName;\n                    return;\n                }\n                const newClassName = this.format(template);\n                if (!newClassName) {\n                    delete this.customClassName;\n                    return;\n                }\n                element.classList.add(...newClassName.split(/\\s+/g));\n                this.customClassName = newClassName;\n            }\n            /**\n             * Destroys the cell.\n             */\n            destroy() {\n                this.cellEvents.forEach((pair) => {\n                    this.htmlElement.removeEventListener(pair[0], pair[1]);\n                });\n                this.column?.unregisterCell(this);\n                this.row.unregisterCell(this);\n                this.htmlElement.remove();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Cell;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Actions/ColumnSorting.js', [_modules['Grid/Core/GridUtils.js'], _modules['Grid/Core/Globals.js'], _modules['Core/Utilities.js']], function (GridUtils, Globals, U) {\n        /* *\n         *\n         *  Grid ColumnSorting class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = GridUtils;\n        const { fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that manages sorting for a dedicated column.\n         */\n        class ColumnSorting {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs sorting for a dedicated column.\n             *\n             * @param column\n             * The column that be sorted.\n             *\n             * @param headerCellElement\n             * The head element of the column.\n             */\n            constructor(column, headerCellElement) {\n                /**\n                 * Toggle sorting order for the column in the order: asc -> desc -> none\n                 */\n                this.toggle = () => {\n                    const viewport = this.column.viewport;\n                    const querying = viewport.grid.querying;\n                    const sortingController = querying.sorting;\n                    // Do not call sorting when cell is currently edited and validated.\n                    if (viewport.validator?.errorCell) {\n                        return;\n                    }\n                    const currentOrder = (sortingController.currentSorting?.columnId === this.column.id ?\n                        sortingController.currentSorting.order : null) || 'none';\n                    const consequents = {\n                        none: 'asc',\n                        asc: 'desc',\n                        desc: null\n                    };\n                    void this.setOrder(consequents[currentOrder]);\n                };\n                this.column = column;\n                this.headerCellElement = headerCellElement;\n                this.addHeaderElementAttributes();\n                if (column.options.sorting?.sortable) {\n                    makeHTMLElement('span', {\n                        className: Globals.getClassName('columnSortableIcon'),\n                        innerText: '▲'\n                    }, headerCellElement).setAttribute('aria-hidden', true);\n                    headerCellElement.classList.add(Globals.getClassName('columnSortable'));\n                }\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Adds attributes to the column header.\n             */\n            addHeaderElementAttributes() {\n                const col = this.column;\n                const a11y = col.viewport.grid.accessibility;\n                const sortingOptions = col.options.sorting;\n                const { currentSorting } = col.viewport.grid.querying.sorting;\n                const sortedAscClassName = Globals.getClassName('columnSortedAsc');\n                const sortedDescClassName = Globals.getClassName('columnSortedDesc');\n                const el = this.headerCellElement;\n                if (currentSorting?.columnId !== col.id || !currentSorting?.order) {\n                    el.classList.remove(sortedAscClassName);\n                    el.classList.remove(sortedDescClassName);\n                    if (sortingOptions?.sortable) {\n                        a11y?.setColumnSortState(el, 'none');\n                    }\n                    return;\n                }\n                switch (currentSorting?.order) {\n                    case 'asc':\n                        el.classList.add(sortedAscClassName);\n                        el.classList.remove(sortedDescClassName);\n                        a11y?.setColumnSortState(el, 'ascending');\n                        break;\n                    case 'desc':\n                        el.classList.remove(sortedAscClassName);\n                        el.classList.add(sortedDescClassName);\n                        a11y?.setColumnSortState(el, 'descending');\n                        break;\n                }\n            }\n            /**\n             * Set sorting order for the column. It will modify the presentation data\n             * and rerender the rows.\n             *\n             * @param order\n             * The order of sorting. It can be `'asc'`, `'desc'` or `null` if the\n             * sorting should be disabled.\n             */\n            async setOrder(order) {\n                const viewport = this.column.viewport;\n                const querying = viewport.grid.querying;\n                const sortingController = querying.sorting;\n                const a11y = viewport.grid.accessibility;\n                sortingController.setSorting(order, this.column.id);\n                await querying.proceed();\n                viewport.loadPresentationData();\n                for (const col of viewport.columns) {\n                    col.sorting?.addHeaderElementAttributes();\n                }\n                a11y?.userSortedColumn(order);\n                fireEvent(this.column, 'afterSorting', {\n                    target: this.column\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnSorting;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Header/HeaderCell.js', [_modules['Grid/Core/Table/Cell.js'], _modules['Grid/Core/GridUtils.js'], _modules['Grid/Core/Table/Actions/ColumnSorting.js'], _modules['Grid/Core/Globals.js'], _modules['Core/Utilities.js']], function (Cell, GridUtils, ColumnSorting, Globals, Utilities) {\n        /* *\n         *\n         *  Grid HeaderCell class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement, setHTMLContent } = GridUtils;\n        const { fireEvent, merge, isString } = Utilities;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a cell in the data grid header.\n         */\n        class HeaderCell extends Cell {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a cell in the data grid header.\n             *\n             * @param row\n             * The row of the cell.\n             *\n             * @param column\n             * The column of the cell.\n             *\n             * @param columnsTree\n             * If the cell is a wider than one column, this property contains the\n             * structure of the columns that are subordinated to the header cell.\n             */\n            constructor(row, column, columnsTree) {\n                super(row, column);\n                /**\n                 * Reference to options in settings header.\n                 */\n                this.options = {};\n                /**\n                 * List of columns that are subordinated to the header cell.\n                 */\n                this.columns = [];\n                /**\n                 * Content value of the header cell.\n                 */\n                this.value = '';\n                if (column) {\n                    column.header = this;\n                    this.columns.push(column);\n                }\n                else if (columnsTree) {\n                    const vp = this.row.viewport;\n                    const columnIds = vp.grid.getColumnIds(columnsTree, true);\n                    for (const columnId of columnIds) {\n                        const column = vp.getColumn(columnId);\n                        if (column) {\n                            this.columns.push(column);\n                        }\n                    }\n                }\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Init element.\n             */\n            init() {\n                const elem = document.createElement('th', {});\n                elem.classList.add(Globals.getClassName('headerCell'));\n                return elem;\n            }\n            /**\n             * Render the cell container.\n             */\n            render() {\n                const { column } = this;\n                const options = merge(column?.options || {}, this.options);\n                const headerCellOptions = options.header || {};\n                const isSortableData = options.sorting?.sortable && column?.data;\n                if (headerCellOptions.formatter) {\n                    this.value = headerCellOptions.formatter.call(this).toString();\n                }\n                else if (isString(headerCellOptions.format)) {\n                    this.value = column ?\n                        column.format(headerCellOptions.format) :\n                        headerCellOptions.format;\n                }\n                else {\n                    this.value = column?.id || '';\n                }\n                // Render content of th element\n                this.row.htmlElement.appendChild(this.htmlElement);\n                this.headerContent = makeHTMLElement('span', {\n                    className: Globals.getClassName('headerCellContent')\n                }, this.htmlElement);\n                // Render the header cell element content.\n                setHTMLContent(this.headerContent, this.value);\n                this.htmlElement.setAttribute('scope', 'col');\n                if (this.options.className) {\n                    this.htmlElement.classList.add(...this.options.className.split(/\\s+/g));\n                }\n                if (column) {\n                    this.htmlElement.setAttribute('data-column-id', column.id);\n                    if (isSortableData) {\n                        column.viewport.grid.accessibility?.addSortableColumnHint(this.headerContent);\n                    }\n                    // Add user column classname\n                    if (column.options.className) {\n                        this.htmlElement.classList.add(...column.options.className.split(/\\s+/g));\n                    }\n                    // Add resizing\n                    column.viewport.columnsResizer?.renderColumnDragHandles(column, this);\n                    // Add sorting\n                    this.initColumnSorting();\n                }\n                this.setCustomClassName(options.header?.className);\n                fireEvent(this, 'afterRender', {\n                    target: column\n                });\n            }\n            reflow() {\n                const th = this.htmlElement;\n                if (!th) {\n                    return;\n                }\n                let width = 0;\n                for (const column of this.columns) {\n                    width += column.getWidth() || 0;\n                }\n                // Set the width of the column. Max width is needed for the\n                // overflow: hidden to work.\n                th.style.width = th.style.maxWidth = width + 'px';\n            }\n            onKeyDown(e) {\n                if (!this.column || e.target !== this.htmlElement) {\n                    return;\n                }\n                if (e.key === 'Enter') {\n                    if (this.column.options.sorting?.sortable) {\n                        this.column.sorting?.toggle();\n                    }\n                    return;\n                }\n                super.onKeyDown(e);\n            }\n            onClick(e) {\n                const column = this.column;\n                if (!column || (e.target !== this.htmlElement &&\n                    e.target !== column.header?.headerContent) || column.viewport.columnsResizer?.isResizing) {\n                    return;\n                }\n                if (column.options.sorting?.sortable) {\n                    column.sorting?.toggle();\n                }\n                fireEvent(this, 'click', {\n                    originalEvent: e,\n                    target: this.column\n                });\n            }\n            /**\n             * Add sorting option to the column.\n             */\n            initColumnSorting() {\n                const { column } = this;\n                if (!column) {\n                    return;\n                }\n                column.sorting = new ColumnSorting(column, this.htmlElement);\n            }\n            /**\n             * Check if the cell is part of the last cell in the header.\n             */\n            isLastColumn() {\n                const vp = this.row.viewport;\n                const lastViewportColumn = vp.columns[vp.columns.length - 1];\n                const lastCellColumn = this.columns?.[this.columns.length - 1];\n                return lastViewportColumn === lastCellColumn;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HeaderCell;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Header/HeaderRow.js', [_modules['Grid/Core/Table/Row.js'], _modules['Grid/Core/Table/Header/HeaderCell.js'], _modules['Grid/Core/Globals.js'], _modules['Core/Utilities.js']], function (Row, HeaderCell, Globals, Utils) {\n        /* *\n         *\n         *  Grid HeaderRow class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { isString } = Utils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a row in the data grid header.\n         */\n        class HeaderRow extends Row {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a row in the data grid.\n             *\n             * @param viewport\n             * The Grid Table instance which the row belongs to.\n             *\n             * @param level\n             * The current level of header that is rendered.\n             */\n            constructor(viewport, level) {\n                super(viewport);\n                this.level = level;\n                this.setRowAttributes();\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            createCell(column, columnsTree) {\n                return new HeaderCell(this, column, columnsTree);\n            }\n            /**\n             * Renders the row's content in the header.\n             *\n             * @param level\n             * The current level in the header tree\n             */\n            renderMultipleLevel(level) {\n                const header = this.viewport.grid.options?.header;\n                const vp = this.viewport;\n                const enabledColumns = vp.grid.enabledColumns;\n                // Render element\n                vp.theadElement?.appendChild(this.htmlElement);\n                this.htmlElement.classList.add(Globals.getClassName('headerRow'));\n                if (!header) {\n                    super.render();\n                }\n                else {\n                    const columnsOnLevel = this.getColumnsAtLevel(header, level);\n                    for (let i = 0, iEnd = columnsOnLevel.length; i < iEnd; i++) {\n                        const columnOnLevel = columnsOnLevel[i];\n                        const colIsString = typeof columnOnLevel === 'string';\n                        const colSpan = (!colIsString && columnOnLevel.columns) ?\n                            vp.grid.getColumnIds(columnOnLevel.columns).length : 0;\n                        const columnId = colIsString ?\n                            columnOnLevel : columnOnLevel.columnId;\n                        const dataColumn = columnId ?\n                            vp.getColumn(columnId || '') : void 0;\n                        const headerFormat = !colIsString ?\n                            columnOnLevel.format : void 0;\n                        const className = !colIsString ?\n                            columnOnLevel.className : void 0;\n                        // Skip hidden column or header when all columns are hidden.\n                        if ((columnId && enabledColumns &&\n                            enabledColumns.indexOf(columnId) < 0) || (!dataColumn && colSpan === 0)) {\n                            continue;\n                        }\n                        const headerCell = this.createCell(dataColumn, !colIsString ? columnOnLevel.columns : void 0);\n                        if (!colIsString) {\n                            vp.grid.accessibility?.addHeaderCellDescription(headerCell.htmlElement, columnOnLevel.accessibility?.description);\n                        }\n                        if (isString(headerFormat)) {\n                            if (!headerCell.options.header) {\n                                headerCell.options.header = {};\n                            }\n                            headerCell.options.header.format = headerFormat;\n                        }\n                        if (className) {\n                            headerCell.options.className = className;\n                        }\n                        // Add class to disable left border on first column\n                        if (dataColumn?.index === 0 && i === 0) {\n                            headerCell.htmlElement.classList.add(Globals.getClassName('columnFirst'));\n                        }\n                        headerCell.render();\n                        if (columnId) {\n                            headerCell.htmlElement.setAttribute('rowSpan', (this.viewport.header?.levels || 1) - level);\n                        }\n                        else {\n                            if (colSpan > 1) {\n                                headerCell.htmlElement.setAttribute('colSpan', colSpan);\n                            }\n                        }\n                    }\n                }\n                const lastCell = this.cells[this.cells.length - 1];\n                if (lastCell.isLastColumn()) {\n                    lastCell.htmlElement.classList.add(Globals.getClassName('lastHeaderCellInRow'));\n                }\n            }\n            reflow() {\n                const row = this;\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; i++) {\n                    const cell = row.cells[i];\n                    cell.reflow();\n                }\n            }\n            /**\n             * Get all headers that should be rendered in a level.\n             *\n             * @param scope\n             * Level that we start from\n             *\n             * @param targetLevel\n             * Max level\n             *\n             * @param currentLevel\n             * Current level\n             *\n             * @return\n             * Array of headers that should be rendered in a level\n             */\n            getColumnsAtLevel(scope, targetLevel, currentLevel = 0) {\n                let result = [];\n                for (const column of scope) {\n                    if (currentLevel === targetLevel) {\n                        result.push(column);\n                    }\n                    if (typeof column !== 'string' && column.columns) {\n                        result = result.concat(this.getColumnsAtLevel(column.columns, targetLevel, currentLevel + 1));\n                    }\n                }\n                return result;\n            }\n            /**\n             * Sets the row HTML element attributes and additional classes.\n             */\n            setRowAttributes() {\n                const a11y = this.viewport.grid.accessibility;\n                a11y?.setRowIndex(this.htmlElement, this.level);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HeaderRow;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Header/TableHeader.js', [_modules['Grid/Core/Table/Header/HeaderRow.js']], function (HeaderRow) {\n        /* *\n         *\n         *  Grid TableHeader class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a table header row containing the cells (headers) with\n         * column names.\n         */\n        class TableHeader {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a new table head.\n             *\n             * @param viewport\n             * The viewport (table) the table head belongs to.\n             */\n            constructor(viewport) {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * The visible columns of the table.\n                 */\n                this.columns = [];\n                /**\n                 * The container of the table head.\n                 */\n                this.rows = [];\n                /**\n                 * Amount of levels in the header, that is used in creating correct rows.\n                 */\n                this.levels = 1;\n                this.viewport = viewport;\n                this.columns = viewport.columns;\n                if (viewport.grid.options?.header) {\n                    this.levels = this.getRowLevels(viewport.grid.options?.header);\n                }\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Renders the table head content.\n             */\n            render() {\n                const vp = this.viewport;\n                if (!vp.grid.enabledColumns) {\n                    return;\n                }\n                for (let i = 0, iEnd = this.levels; i < iEnd; i++) {\n                    const row = new HeaderRow(vp, i + 1); // Avoid indexing from 0\n                    row.renderMultipleLevel(i);\n                    this.rows.push(row);\n                }\n            }\n            /**\n             * Reflows the table head's content dimensions.\n             */\n            reflow() {\n                const vp = this.viewport;\n                if (!vp.theadElement) {\n                    return;\n                }\n                const { clientWidth, offsetWidth } = vp.tbodyElement;\n                const header = vp.header;\n                const rows = this.rows;\n                const bordersWidth = offsetWidth - clientWidth;\n                for (const row of rows) {\n                    row.reflow();\n                }\n                if (vp.rowsWidth) {\n                    vp.theadElement.style.width =\n                        Math.max(vp.rowsWidth, clientWidth) + bordersWidth + 'px';\n                }\n                if (header &&\n                    bordersWidth > 0 &&\n                    this.viewport.columnDistribution.type === 'full') {\n                    const row = this.columns[this.columns.length - 1].header?.row;\n                    const lastCellEl = row?.cells[row.cells.length - 1]?.htmlElement;\n                    if (lastCellEl) {\n                        lastCellEl.style.width = lastCellEl.style.maxWidth =\n                            lastCellEl.offsetWidth + bordersWidth + 'px';\n                    }\n                }\n            }\n            /**\n             * Returns amount of rows for the current cell in header tree.\n             *\n             * @param scope\n             * Structure of header\n             *\n             * @returns\n             */\n            getRowLevels(scope) {\n                let maxDepth = 0;\n                for (const item of scope) {\n                    if (typeof item !== 'string' && item.columns) {\n                        const depth = this.getRowLevels(item.columns);\n                        if (depth > maxDepth) {\n                            maxDepth = depth;\n                        }\n                    }\n                }\n                return maxDepth + 1;\n            }\n            /**\n             * Scrolls the table head horizontally, only when the virtualization\n             * is enabled.\n             *\n             * @param scrollLeft\n             * The left scroll position.\n             */\n            scrollHorizontally(scrollLeft) {\n                const el = this.viewport.theadElement;\n                if (!el) {\n                    return;\n                }\n                el.style.transform = `translateX(${-scrollLeft}px)`;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TableHeader;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Body/TableCell.js', [_modules['Grid/Core/Table/Cell.js'], _modules['Core/Utilities.js']], function (Cell, Utils) {\n        /* *\n         *\n         *  Grid class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { fireEvent } = Utils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a cell in the data grid.\n         */\n        class TableCell extends Cell {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a cell in the data grid.\n             *\n             * @param row\n             * The row of the cell.\n             *\n             * @param column\n             * The column of the cell.\n             */\n            constructor(row, column) {\n                super(row, column);\n                this.column = column;\n                this.row = row;\n                this.column.registerCell(this);\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Renders the cell by appending it to the row and setting its value.\n             */\n            render() {\n                super.render();\n                // It may happen that `await` will be needed here in the future.\n                void this.setValue();\n            }\n            initEvents() {\n                this.cellEvents.push(['dblclick', (e) => (this.onDblClick(e))]);\n                this.cellEvents.push(['mouseout', () => this.onMouseOut()]);\n                this.cellEvents.push(['mouseover', () => this.onMouseOver()]);\n                this.cellEvents.push(['mousedown', (e) => {\n                        this.onMouseDown(e);\n                    }]);\n                super.initEvents();\n            }\n            /**\n             * Handles the focus event on the cell.\n             */\n            onFocus() {\n                super.onFocus();\n                const vp = this.row.viewport;\n                vp.focusCursor = [\n                    this.row.index,\n                    this.column.index\n                ];\n            }\n            /**\n             * Handles the mouse down event on the cell.\n             *\n             * @param e\n             * The mouse event object.\n             *\n             * @internal\n             */\n            onMouseDown(e) {\n                if (e.target === this.htmlElement) {\n                    this.htmlElement.focus();\n                }\n                fireEvent(this, 'mouseDown', {\n                    target: this,\n                    originalEvent: e\n                });\n            }\n            /**\n             * Handles the mouse over event on the cell.\n             * @internal\n             */\n            onMouseOver() {\n                const { grid } = this.row.viewport;\n                grid.hoverRow(this.row.index);\n                grid.hoverColumn(this.column.id);\n                fireEvent(this, 'mouseOver', {\n                    target: this\n                });\n            }\n            /**\n             * Handles the mouse out event on the cell.\n             */\n            onMouseOut() {\n                const { grid } = this.row.viewport;\n                grid.hoverRow();\n                grid.hoverColumn();\n                fireEvent(this, 'mouseOut', {\n                    target: this\n                });\n            }\n            /**\n             * Handles the double click event on the cell.\n             *\n             * @param e\n             * The mouse event object.\n             */\n            onDblClick(e) {\n                fireEvent(this, 'dblClick', {\n                    target: this,\n                    originalEvent: e\n                });\n            }\n            onClick() {\n                fireEvent(this, 'click', {\n                    target: this\n                });\n            }\n            /**\n             * Handles the key down event on the cell.\n             *\n             * @param e\n             * Keyboard event object.\n             *\n             * @internal\n             */\n            onKeyDown(e) {\n                if (e.target !== this.htmlElement) {\n                    return;\n                }\n                fireEvent(this, 'keyDown', {\n                    target: this,\n                    originalEvent: e\n                });\n                super.onKeyDown(e);\n            }\n            /**\n             * Sets the value & updating content of the cell.\n             *\n             * @param value\n             * The raw value to set. If not provided, it will use the value from the\n             * data table for the current row and column.\n             *\n             * @param updateTable\n             * Whether to update the table after setting the content. Defaults to\n             * `false`, meaning the table will not be updated.\n             */\n            async setValue(value = this.column.data?.[this.row.index], updateTable = false) {\n                this.value = value;\n                const vp = this.column.viewport;\n                if (this.content) {\n                    this.content.update();\n                }\n                else {\n                    this.content = this.column.createCellContent(this);\n                }\n                this.htmlElement.setAttribute('data-value', this.value + '');\n                this.setCustomClassName(this.column.options.cells?.className);\n                fireEvent(this, 'afterRender', { target: this });\n                if (!updateTable) {\n                    return;\n                }\n                const { dataTable: originalDataTable } = vp.grid;\n                // Taken the local row index of the original grid data table, but\n                // in the future it should affect the globally original data table.\n                // (To be done after the DataLayer refinement)\n                const rowTableIndex = this.row.id && originalDataTable?.getLocalRowIndex(this.row.id);\n                if (!originalDataTable || rowTableIndex === void 0) {\n                    return;\n                }\n                this.row.data[this.column.id] = this.value;\n                originalDataTable.setCell(this.column.id, rowTableIndex, this.value);\n                if (vp.grid.querying.willNotModify()) {\n                    // If the data table does not need to be modified, skip the\n                    // data modification and don't update the whole table. It checks\n                    // if the modifiers are globally set. Can be changed in the future\n                    // to check if the modifiers are set for the specific columns.\n                    return;\n                }\n                let focusedRowId;\n                if (vp.focusCursor) {\n                    focusedRowId = vp.dataTable.getOriginalRowIndex(vp.focusCursor[0]);\n                }\n                await vp.grid.querying.proceed(true);\n                vp.loadPresentationData();\n                if (focusedRowId !== void 0 && vp.focusCursor) {\n                    const newRowIndex = vp.dataTable.getLocalRowIndex(focusedRowId);\n                    if (newRowIndex !== void 0) {\n                        vp.rows[newRowIndex - vp.rows[0].index]\n                            ?.cells[vp.focusCursor[1]].htmlElement.focus();\n                    }\n                }\n            }\n            /**\n             * Destroys the cell.\n             */\n            destroy() {\n                this.content?.destroy();\n                delete this.content;\n                super.destroy();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TableCell;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Body/TableRow.js', [_modules['Grid/Core/Table/Row.js'], _modules['Grid/Core/Table/Body/TableCell.js'], _modules['Grid/Core/Globals.js']], function (Row, TableCell, Globals) {\n        /* *\n         *\n         *  Grid TableRow class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a row in the data grid.\n         */\n        class TableRow extends Row {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a row in the data grid.\n             *\n             * @param viewport\n             * The Grid Table instance which the row belongs to.\n             *\n             * @param index\n             * The index of the row in the data table.\n             */\n            constructor(viewport, index) {\n                super(viewport);\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * The row values from the data table in the original column order.\n                 */\n                this.data = {};\n                /**\n                 * The vertical translation of the row.\n                 */\n                this.translateY = 0;\n                this.index = index;\n                this.id = viewport.dataTable.getOriginalRowIndex(index);\n                this.loadData();\n                this.setRowAttributes();\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            createCell(column) {\n                return new TableCell(this, column);\n            }\n            /**\n             * Loads the row data from the data table.\n             */\n            loadData() {\n                const data = this.viewport.dataTable.getRowObject(this.index);\n                if (!data) {\n                    return;\n                }\n                this.data = data;\n            }\n            /**\n             * Adds or removes the hovered CSS class to the row element.\n             *\n             * @param hovered\n             * Whether the row should be hovered.\n             */\n            setHoveredState(hovered) {\n                this.htmlElement.classList[hovered ? 'add' : 'remove'](Globals.getClassName('hoveredRow'));\n                if (hovered) {\n                    this.viewport.grid.hoveredRowIndex = this.index;\n                }\n            }\n            /**\n             * Adds or removes the synced CSS class to the row element.\n             *\n             * @param synced\n             * Whether the row should be synced.\n             */\n            setSyncedState(synced) {\n                this.htmlElement.classList[synced ? 'add' : 'remove'](Globals.getClassName('syncedRow'));\n                if (synced) {\n                    this.viewport.grid.syncedRowIndex = this.index;\n                }\n            }\n            /**\n             * Sets the row HTML element attributes and additional classes.\n             */\n            setRowAttributes() {\n                const idx = this.index;\n                const el = this.htmlElement;\n                const a11y = this.viewport.grid.accessibility;\n                el.classList.add(Globals.getClassName('rowElement'));\n                // Index of the row in the presentation data table\n                el.setAttribute('data-row-index', idx);\n                // Index of the row in the original data table (ID)\n                if (this.id !== void 0) {\n                    el.setAttribute('data-row-id', this.id);\n                }\n                // Calculate levels of header, 1 to avoid indexing from 0\n                a11y?.setRowIndex(el, idx + (this.viewport.header?.levels ?? 1) + 1);\n                // Indexing from 0, so rows with even index are odd.\n                el.classList.add(Globals.getClassName(idx % 2 ? 'rowEven' : 'rowOdd'));\n                if (this.viewport.grid.hoveredRowIndex === idx) {\n                    el.classList.add(Globals.getClassName('hoveredRow'));\n                }\n                if (this.viewport.grid.syncedRowIndex === idx) {\n                    el.classList.add(Globals.getClassName('syncedRow'));\n                }\n            }\n            /**\n             * Sets the vertical translation of the row. Used for virtual scrolling.\n             *\n             * @param value\n             * The vertical translation of the row.\n             */\n            setTranslateY(value) {\n                this.translateY = value;\n                this.htmlElement.style.transform = `translateY(${value}px)`;\n            }\n            /**\n             * Returns the default top offset of the row (before adjusting row heights).\n             * @internal\n             */\n            getDefaultTopOffset() {\n                return this.index * this.viewport.rowsVirtualizer.defaultRowHeight;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TableRow;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Actions/RowsVirtualizer.js', [_modules['Grid/Core/Table/Body/TableRow.js'], _modules['Grid/Core/Globals.js']], function (TableRow, Globals) {\n        /* *\n         *\n         *  Grid Rows Renderer class.\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a virtualized rows renderer for the data grid.\n         */\n        class RowsVirtualizer {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the rows virtualizer.\n             *\n             * @param viewport\n             * The viewport of the data grid to render rows in.\n             */\n            constructor(viewport) {\n                /**\n                 * The index of the first visible row.\n                 */\n                this.rowCursor = 0;\n                /**\n                 * Flag indicating if the scrolling handler should be prevented to avoid\n                 * flickering loops when scrolling to the last row.\n                 */\n                this.preventScroll = false;\n                this.rowSettings =\n                    viewport.grid.options?.rendering?.rows;\n                this.viewport = viewport;\n                this.strictRowHeights = this.rowSettings.strictHeights;\n                this.buffer = Math.max(this.rowSettings.bufferSize, 0);\n                this.defaultRowHeight = this.getDefaultRowHeight();\n                if (this.strictRowHeights) {\n                    viewport.tbodyElement.classList.add(Globals.getClassName('rowsContentNowrap'));\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Renders the rows in the viewport for the first time.\n             */\n            initialRender() {\n                // Initial reflow to set the viewport height\n                if (this.rowSettings?.virtualization) {\n                    this.viewport.reflow();\n                }\n                // Load & render rows\n                this.renderRows(this.rowCursor);\n                if (this.rowSettings?.virtualization) {\n                    this.adjustRowHeights();\n                }\n            }\n            /**\n             * Renders the rows in the viewport. It is called when the rows need to be\n             * re-rendered, e.g., after a sort or filter operation.\n             */\n            rerender() {\n                const tbody = this.viewport.tbodyElement;\n                let rows = this.viewport.rows;\n                const oldScrollLeft = tbody.scrollLeft;\n                let oldScrollTop;\n                if (rows.length) {\n                    oldScrollTop = tbody.scrollTop;\n                    for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                        rows[i].destroy();\n                    }\n                    rows.length = 0;\n                }\n                this.renderRows(this.rowCursor);\n                if (this.rowSettings?.virtualization) {\n                    if (oldScrollTop !== void 0) {\n                        tbody.scrollTop = oldScrollTop;\n                    }\n                    this.scroll();\n                }\n                rows = this.viewport.rows;\n                // Reflow the rendered row cells widths (check redundancy)\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rows[i].reflow();\n                }\n                tbody.scrollLeft = oldScrollLeft;\n            }\n            /**\n             * Method called on the viewport scroll event, only when the virtualization\n             * is enabled.\n             */\n            scroll() {\n                const target = this.viewport.tbodyElement;\n                const { defaultRowHeight: rowHeight } = this;\n                const lastScrollTop = target.scrollTop;\n                if (this.preventScroll) {\n                    if (lastScrollTop <= target.scrollTop) {\n                        this.preventScroll = false;\n                    }\n                    this.adjustBottomRowHeights();\n                    return;\n                }\n                // Do vertical virtual scrolling\n                const rowCursor = Math.floor(target.scrollTop / rowHeight);\n                if (this.rowCursor !== rowCursor) {\n                    this.renderRows(rowCursor);\n                }\n                this.rowCursor = rowCursor;\n                this.adjustRowHeights();\n                if (!this.strictRowHeights &&\n                    lastScrollTop > target.scrollTop &&\n                    !this.preventScroll) {\n                    target.scrollTop = lastScrollTop;\n                    this.preventScroll = true;\n                }\n            }\n            /**\n             * Adjusts the visible row heights from the bottom of the viewport.\n             */\n            adjustBottomRowHeights() {\n                const rows = this.viewport.rows;\n                const rowsLn = rows.length;\n                const lastRow = rows[rowsLn - 1];\n                let rowTop = lastRow.translateY;\n                const rowBottom = rowTop + lastRow.htmlElement.offsetHeight;\n                let newHeight = lastRow.cells[0].htmlElement.offsetHeight;\n                rowTop = rowBottom - newHeight;\n                lastRow.htmlElement.style.height = newHeight + 'px';\n                lastRow.setTranslateY(rowTop);\n                for (let j = 0, jEnd = lastRow.cells.length; j < jEnd; ++j) {\n                    lastRow.cells[j].htmlElement.style.transform = '';\n                }\n                for (let i = rowsLn - 2; i >= 0; i--) {\n                    const row = rows[i];\n                    newHeight = row.cells[0].htmlElement.offsetHeight;\n                    rowTop -= newHeight;\n                    row.htmlElement.style.height = newHeight + 'px';\n                    row.setTranslateY(rowTop);\n                    for (let j = 0, jEnd = row.cells.length; j < jEnd; ++j) {\n                        row.cells[j].htmlElement.style.transform = '';\n                    }\n                }\n            }\n            /**\n             * Renders rows in the specified range. Removes rows that are out of the\n             * range except the last row.\n             *\n             * @param rowCursor\n             * The index of the first visible row.\n             */\n            renderRows(rowCursor) {\n                const { viewport: vp, buffer } = this;\n                const rowCount = vp.dataTable.getRowCount();\n                // Stop rendering if there are no rows to render.\n                if (rowCount < 1) {\n                    return;\n                }\n                const isVirtualization = this.rowSettings?.virtualization;\n                const rowsPerPage = isVirtualization ? Math.ceil((vp.grid.tableElement?.clientHeight || 0) /\n                    this.defaultRowHeight) : Infinity; // Need to be refactored when add pagination\n                let rows = vp.rows;\n                if (!isVirtualization && rows.length > 50) {\n                    // eslint-disable-next-line no-console\n                    console.warn('Grid: a large dataset can cause performance issues when ' +\n                        'virtualization is disabled. Consider enabling ' +\n                        'virtualization in the rows settings.');\n                }\n                if (!rows.length) {\n                    const last = new TableRow(vp, rowCount - 1);\n                    vp.tbodyElement.appendChild(last.htmlElement);\n                    last.render();\n                    rows.push(last);\n                    if (isVirtualization) {\n                        last.setTranslateY(last.getDefaultTopOffset());\n                    }\n                }\n                const from = Math.max(0, Math.min(rowCursor - buffer, rowCount - rowsPerPage));\n                const to = Math.min(rowCursor + rowsPerPage + buffer, rows[rows.length - 1].index - 1);\n                const alwaysLastRow = rows.pop();\n                const tempRows = [];\n                // Remove rows that are out of the range except the last row.\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    const row = rows[i];\n                    const rowIndex = row.index;\n                    if (rowIndex < from || rowIndex > to) {\n                        row.destroy();\n                    }\n                    else {\n                        tempRows.push(row);\n                    }\n                }\n                rows = tempRows;\n                vp.rows = rows;\n                for (let i = from; i <= to; ++i) {\n                    const row = rows[i - (rows[0]?.index || 0)];\n                    // Recreate row when it is destroyed and it is in the range.\n                    if (!row) {\n                        const newRow = new TableRow(vp, i);\n                        rows.push(newRow);\n                        newRow.rendered = false;\n                        if (isVirtualization) {\n                            newRow.setTranslateY(newRow.getDefaultTopOffset());\n                        }\n                    }\n                }\n                rows.sort((a, b) => a.index - b.index);\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    if (!rows[i].rendered) {\n                        vp.tbodyElement.insertBefore(rows[i].htmlElement, vp.tbodyElement.lastChild);\n                        rows[i].render();\n                    }\n                }\n                if (alwaysLastRow) {\n                    rows.push(alwaysLastRow);\n                }\n                // Focus the cell if the focus cursor is set\n                if (vp.focusCursor) {\n                    const [rowIndex, columnIndex] = vp.focusCursor;\n                    const row = rows.find((row) => row.index === rowIndex);\n                    if (row) {\n                        row.cells[columnIndex]?.htmlElement.focus({\n                            preventScroll: true\n                        });\n                    }\n                }\n                // Reset the focus anchor cell\n                this.focusAnchorCell?.htmlElement.setAttribute('tabindex', '-1');\n                const firstVisibleRow = rows[rowCursor - rows[0].index];\n                this.focusAnchorCell = firstVisibleRow?.cells[0];\n                this.focusAnchorCell?.htmlElement.setAttribute('tabindex', '0');\n            }\n            /**\n             * Adjusts the heights of the rows based on the current scroll position.\n             * It handles the possibility of the rows having different heights than\n             * the default height.\n             */\n            adjustRowHeights() {\n                if (this.strictRowHeights) {\n                    return;\n                }\n                const { rowCursor: cursor, defaultRowHeight: defaultH } = this;\n                const { rows, tbodyElement } = this.viewport;\n                const rowsLn = rows.length;\n                let translateBuffer = rows[0].getDefaultTopOffset();\n                for (let i = 0; i < rowsLn; ++i) {\n                    const row = rows[i];\n                    // Reset row height and cell transforms\n                    row.htmlElement.style.height = '';\n                    if (row.cells[0].htmlElement.style.transform) {\n                        for (let j = 0, jEnd = row.cells.length; j < jEnd; ++j) {\n                            const cell = row.cells[j];\n                            cell.htmlElement.style.transform = '';\n                        }\n                    }\n                    // Rows above the first visible row\n                    if (row.index < cursor) {\n                        row.htmlElement.style.height = defaultH + 'px';\n                        continue;\n                    }\n                    const cellHeight = row.cells[0].htmlElement.offsetHeight;\n                    row.htmlElement.style.height = cellHeight + 'px';\n                    // Rows below the first visible row\n                    if (row.index > cursor) {\n                        continue;\n                    }\n                    // First visible row\n                    if (row.htmlElement.offsetHeight > defaultH) {\n                        const newHeight = Math.floor(cellHeight - (cellHeight - defaultH) * (tbodyElement.scrollTop / defaultH - cursor));\n                        row.htmlElement.style.height = newHeight + 'px';\n                        for (let j = 0, jEnd = row.cells.length; j < jEnd; ++j) {\n                            const cell = row.cells[j];\n                            cell.htmlElement.style.transform = `translateY(${newHeight - cellHeight}px)`;\n                        }\n                    }\n                }\n                rows[0].setTranslateY(translateBuffer);\n                for (let i = 1, iEnd = rowsLn - 1; i < iEnd; ++i) {\n                    translateBuffer += rows[i - 1].htmlElement.offsetHeight;\n                    rows[i].setTranslateY(translateBuffer);\n                }\n                // Set the proper offset for the last row\n                const lastRow = rows[rowsLn - 1];\n                const preLastRow = rows[rowsLn - 2];\n                if (preLastRow && preLastRow.index === lastRow.index - 1) {\n                    lastRow.setTranslateY(preLastRow.htmlElement.offsetHeight + translateBuffer);\n                }\n            }\n            /**\n             * Reflow the rendered rows content dimensions.\n             */\n            reflowRows() {\n                const rows = this.viewport.rows;\n                if (rows.length < 1) {\n                    return;\n                }\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rows[i].reflow();\n                }\n                if (this.rowSettings?.virtualization) {\n                    this.adjustRowHeights();\n                }\n            }\n            /**\n             * Returns the default height of a row. This method should be called only\n             * once on initialization.\n             */\n            getDefaultRowHeight() {\n                const vp = this.viewport;\n                const mockRow = new TableRow(vp, 0);\n                mockRow.htmlElement.style.position = 'absolute';\n                mockRow.htmlElement.classList.add(Globals.getClassName('mockedRow'));\n                this.viewport.tbodyElement.appendChild(mockRow.htmlElement);\n                mockRow.render();\n                const defaultRowHeight = mockRow.htmlElement.offsetHeight;\n                mockRow.destroy();\n                return defaultRowHeight;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RowsVirtualizer;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Actions/ColumnsResizer.js', [_modules['Grid/Core/GridUtils.js'], _modules['Grid/Core/Globals.js'], _modules['Core/Utilities.js']], function (GridUtils, Globals, Utils) {\n        /* *\n         *\n         *  Grid Columns Resizer class.\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = GridUtils;\n        const { fireEvent } = Utils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The class that handles the resizing of columns in the data grid.\n         */\n        class ColumnsResizer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(viewport) {\n                /**\n                 * Any column is being resized. Turned off after slight delay.\n                 */\n                this.isResizing = false;\n                /**\n                 * The handles and their mouse down event listeners.\n                 */\n                this.handles = [];\n                /**\n                 * Handles the mouse move event on the document.\n                 *\n                 * @param e\n                 * The mouse event.\n                 *\n                 * @internal\n                 */\n                this.onDocumentMouseMove = (e) => {\n                    if (!this.draggedResizeHandle || !this.draggedColumn) {\n                        return;\n                    }\n                    const diff = e.pageX - (this.dragStartX || 0);\n                    const vp = this.viewport;\n                    vp.columnDistribution.resize(this, diff);\n                    vp.reflow();\n                    if (vp.grid.options?.rendering?.rows?.virtualization) {\n                        vp.rowsVirtualizer.adjustRowHeights();\n                    }\n                    fireEvent(this.draggedColumn, 'afterResize', {\n                        target: this.draggedColumn,\n                        originalEvent: e\n                    });\n                };\n                /**\n                 * Handles the mouse up event on the document.\n                 */\n                this.onDocumentMouseUp = () => {\n                    this.draggedColumn?.header?.htmlElement?.classList.remove(Globals.getClassName('resizedColumn'));\n                    this.dragStartX = void 0;\n                    this.draggedColumn = void 0;\n                    this.draggedResizeHandle = void 0;\n                    this.columnStartWidth = void 0;\n                    this.nextColumnStartWidth = void 0;\n                    requestAnimationFrame(() => {\n                        this.isResizing = false;\n                    });\n                };\n                this.viewport = viewport;\n                document.addEventListener('mousemove', this.onDocumentMouseMove);\n                document.addEventListener('mouseup', this.onDocumentMouseUp);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Render the drag handle for resizing columns.\n             *\n             * @param column\n             * The reference to rendered column\n             *\n             * @param cell\n             * The reference to rendered cell, where hadles should be added\n             */\n            renderColumnDragHandles(column, cell) {\n                const vp = column.viewport;\n                if (vp.columnsResizer && (vp.columnDistribution.type !== 'full' ||\n                    (vp.grid.enabledColumns &&\n                        column.index < vp.grid.enabledColumns.length - 1))) {\n                    const handle = makeHTMLElement('div', {\n                        className: Globals.getClassName('resizerHandles')\n                    }, cell.htmlElement);\n                    handle.setAttribute('aria-hidden', true);\n                    vp.columnsResizer?.addHandleListeners(handle, column);\n                }\n            }\n            /**\n             * Adds event listeners to the handle.\n             *\n             * @param handle\n             * The handle element.\n             *\n             * @param column\n             * The column the handle belongs to.\n             */\n            addHandleListeners(handle, column) {\n                const onHandleMouseDown = (e) => {\n                    const vp = column.viewport;\n                    this.isResizing = true;\n                    vp.reflow();\n                    this.dragStartX = e.pageX;\n                    this.draggedColumn = column;\n                    this.draggedResizeHandle = handle;\n                    this.columnStartWidth = column.getWidth();\n                    this.nextColumnStartWidth =\n                        vp.columns[column.index + 1]?.getWidth();\n                    column.header?.htmlElement.classList.add(Globals.getClassName('resizedColumn'));\n                };\n                this.handles.push([handle, onHandleMouseDown]);\n                handle.addEventListener('mousedown', onHandleMouseDown);\n            }\n            /**\n             * Removes all added event listeners from the document and handles. This\n             * should be called on the destroy of the data grid.\n             */\n            removeEventListeners() {\n                document.removeEventListener('mousemove', this.onDocumentMouseMove);\n                document.removeEventListener('mouseup', this.onDocumentMouseUp);\n                for (let i = 0, iEnd = this.handles.length; i < iEnd; i++) {\n                    const [handle, listener] = this.handles[i];\n                    handle.removeEventListener('mousedown', listener);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnsResizer;\n    });\n    _registerModule(_modules, 'Grid/Core/Table/Table.js', [_modules['Grid/Core/GridUtils.js'], _modules['Core/Utilities.js'], _modules['Grid/Core/Table/ColumnDistribution/ColumnDistribution.js'], _modules['Grid/Core/Table/Column.js'], _modules['Grid/Core/Table/Header/TableHeader.js'], _modules['Grid/Core/Table/Actions/RowsVirtualizer.js'], _modules['Grid/Core/Table/Actions/ColumnsResizer.js'], _modules['Grid/Core/Globals.js'], _modules['Grid/Core/Defaults.js']], function (GridUtils, Utils, ColumnDistribution, Column, TableHeader, RowsVirtualizer, ColumnsResizer, Globals, Defaults) {\n        /* *\n         *\n         *  Grid Table Viewport class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = GridUtils;\n        const { fireEvent, getStyle, defined } = Utils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a table viewport of the data grid.\n         */\n        class Table {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a new data grid table.\n             *\n             * @param grid\n             * The data grid instance which the table (viewport) belongs to.\n             *\n             * @param tableElement\n             * The HTML table element of the data grid.\n             */\n            constructor(grid, tableElement) {\n                /**\n                 * The visible columns of the table.\n                 */\n                this.columns = [];\n                /**\n                 * The visible rows of the table.\n                 */\n                this.rows = [];\n                /**\n                 * Handles the focus event on the table body.\n                 *\n                 * @param e\n                 * The focus event.\n                 */\n                this.onTBodyFocus = (e) => {\n                    e.preventDefault();\n                    this.rows[this.rowsVirtualizer.rowCursor - this.rows[0].index]\n                        ?.cells[0]?.htmlElement.focus();\n                };\n                /**\n                 * Handles the resize event.\n                 */\n                this.onResize = () => {\n                    this.reflow();\n                };\n                /**\n                 * Handles the scroll event.\n                 */\n                this.onScroll = () => {\n                    if (this.virtualRows) {\n                        this.rowsVirtualizer.scroll();\n                    }\n                    this.header?.scrollHorizontally(this.tbodyElement.scrollLeft);\n                };\n                this.grid = grid;\n                this.dataTable = this.grid.presentationTable;\n                const dgOptions = grid.options;\n                const customClassName = dgOptions?.rendering?.table?.className;\n                this.columnDistribution = ColumnDistribution.initStrategy(this);\n                this.virtualRows = !!dgOptions?.rendering?.rows?.virtualization;\n                if (dgOptions?.rendering?.header?.enabled) {\n                    this.theadElement = makeHTMLElement('thead', {}, tableElement);\n                }\n                this.tbodyElement = makeHTMLElement('tbody', {}, tableElement);\n                if (this.virtualRows) {\n                    tableElement.classList.add(Globals.getClassName('virtualization'));\n                }\n                if (!(dgOptions?.rendering?.columns?.resizing?.enabled === false ||\n                    dgOptions?.columnDefaults?.resizing === false)) {\n                    this.columnsResizer = new ColumnsResizer(this);\n                }\n                if (customClassName) {\n                    tableElement.classList.add(...customClassName.split(/\\s+/g));\n                }\n                tableElement.classList.add(Globals.getClassName('scrollableContent'));\n                // Load columns\n                this.loadColumns();\n                // Virtualization\n                this.rowsVirtualizer = new RowsVirtualizer(this);\n                // Init Table\n                this.init();\n                // Add event listeners\n                this.resizeObserver = new ResizeObserver(this.onResize);\n                this.resizeObserver.observe(tableElement);\n                this.tbodyElement.addEventListener('scroll', this.onScroll);\n                this.tbodyElement.addEventListener('focus', this.onTBodyFocus);\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Initializes the data grid table.\n             */\n            init() {\n                fireEvent(this, 'beforeInit');\n                this.setTbodyMinHeight();\n                // Load & render head\n                if (this.grid.options?.rendering?.header?.enabled) {\n                    this.header = new TableHeader(this);\n                    this.header.render();\n                }\n                // TODO: Load & render footer\n                // this.footer = new TableFooter(this);\n                // this.footer.render();\n                this.rowsVirtualizer.initialRender();\n                fireEvent(this, 'afterInit');\n            }\n            /**\n             * Sets the minimum height of the table body.\n             */\n            setTbodyMinHeight() {\n                const { options } = this.grid;\n                const minVisibleRows = options?.rendering?.rows?.minVisibleRows;\n                const tbody = this.tbodyElement;\n                if (defined(minVisibleRows) &&\n                    !getStyle(tbody, 'min-height', true)) {\n                    tbody.style.minHeight = (minVisibleRows * this.rowsVirtualizer.defaultRowHeight) + 'px';\n                }\n            }\n            /**\n             * Loads the columns of the table.\n             */\n            loadColumns() {\n                const { enabledColumns } = this.grid;\n                if (!enabledColumns) {\n                    return;\n                }\n                let columnId;\n                for (let i = 0, iEnd = enabledColumns.length; i < iEnd; ++i) {\n                    columnId = enabledColumns[i];\n                    this.columns.push(new Column(this, columnId, i));\n                }\n                this.columnDistribution.loadColumns();\n            }\n            /**\n             * Fires an empty update to properly load the virtualization, only if\n             * there's a row count compared to the threshold change detected (due to\n             * performance reasons).\n             */\n            updateVirtualization() {\n                const rows = this.grid.options?.rendering?.rows;\n                const threshold = Number(rows?.virtualizationThreshold ||\n                    Defaults.defaultOptions.rendering?.rows?.virtualizationThreshold);\n                const rowCount = Number(this.dataTable?.rowCount);\n                if (rows?.virtualization !== (rowCount >= threshold)) {\n                    void this.grid.update();\n                }\n            }\n            /**\n             * Loads the modified data from the data table and renders the rows.\n             */\n            loadPresentationData() {\n                this.dataTable = this.grid.presentationTable;\n                for (const column of this.columns) {\n                    column.loadData();\n                }\n                this.updateVirtualization();\n                this.rowsVirtualizer.rerender();\n            }\n            /**\n             * Reflows the table's content dimensions.\n             */\n            reflow() {\n                this.columnDistribution.reflow();\n                // Reflow the head\n                this.header?.reflow();\n                // Reflow rows content dimensions\n                this.rowsVirtualizer.reflowRows();\n            }\n            /**\n             * Scrolls the table to the specified row.\n             *\n             * @param index\n             * The index of the row to scroll to.\n             *\n             * Try it: {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/grid-lite/basic/scroll-to-row | Scroll to row}\n             */\n            scrollToRow(index) {\n                if (this.grid.options?.rendering?.rows?.virtualization) {\n                    this.tbodyElement.scrollTop =\n                        index * this.rowsVirtualizer.defaultRowHeight;\n                    return;\n                }\n                const rowClass = '.' + Globals.getClassName('rowElement');\n                const firstRowTop = this.tbodyElement\n                    .querySelectorAll(rowClass)[0]\n                    .getBoundingClientRect().top;\n                this.tbodyElement.scrollTop = (this.tbodyElement\n                    .querySelectorAll(rowClass)[index]\n                    .getBoundingClientRect().top) - firstRowTop;\n            }\n            /**\n             * Get the widthRatio value from the width in pixels. The widthRatio is\n             * calculated based on the width of the viewport.\n             *\n             * @param width\n             * The width in pixels.\n             *\n             * @return The width ratio.\n             *\n             * @internal\n             */\n            getRatioFromWidth(width) {\n                return width / this.tbodyElement.clientWidth;\n            }\n            /**\n             * Get the width in pixels from the widthRatio value. The width is\n             * calculated based on the width of the viewport.\n             *\n             * @param ratio\n             * The width ratio.\n             *\n             * @returns The width in pixels.\n             *\n             * @internal\n             */\n            getWidthFromRatio(ratio) {\n                return this.tbodyElement.clientWidth * ratio;\n            }\n            /**\n             * Destroys the grid table.\n             */\n            destroy() {\n                this.tbodyElement.removeEventListener('focus', this.onTBodyFocus);\n                this.tbodyElement.removeEventListener('scroll', this.onScroll);\n                this.resizeObserver.disconnect();\n                this.columnsResizer?.removeEventListeners();\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    this.rows[i].destroy();\n                }\n                fireEvent(this, 'afterDestroy');\n            }\n            /**\n             * Get the viewport state metadata. It is used to save the state of the\n             * viewport and restore it when the data grid is re-rendered.\n             *\n             * @returns\n             * The viewport state metadata.\n             */\n            getStateMeta() {\n                return {\n                    scrollTop: this.tbodyElement.scrollTop,\n                    scrollLeft: this.tbodyElement.scrollLeft,\n                    columnDistribution: this.columnDistribution,\n                    focusCursor: this.focusCursor\n                };\n            }\n            /**\n             * Apply the metadata to the viewport state. It is used to restore the state\n             * of the viewport when the data grid is re-rendered.\n             *\n             * @param meta\n             * The viewport state metadata.\n             */\n            applyStateMeta(meta) {\n                this.tbodyElement.scrollTop = meta.scrollTop;\n                this.tbodyElement.scrollLeft = meta.scrollLeft;\n                if (!meta.columnDistribution.invalidated) {\n                    const colDistMeta = meta.columnDistribution.exportMetadata();\n                    this.columnDistribution.importMetadata(colDistMeta);\n                }\n                if (meta.focusCursor) {\n                    const [rowIndex, columnIndex] = meta.focusCursor;\n                    const row = this.rows[rowIndex - this.rows[0].index];\n                    row?.cells[columnIndex]?.htmlElement.focus();\n                }\n            }\n            /**\n             * Returns the column with the provided ID.\n             *\n             * @param id\n             * The ID of the column.\n             */\n            getColumn(id) {\n                const columns = this.grid.enabledColumns;\n                if (!columns) {\n                    return;\n                }\n                const columnIndex = columns.indexOf(id);\n                if (columnIndex < 0) {\n                    return;\n                }\n                return this.columns[columnIndex];\n            }\n            /**\n             * Returns the row with the provided ID.\n             *\n             * @param id\n             * The ID of the row.\n             */\n            getRow(id) {\n                // TODO: Change `find` to a method using `vp.dataTable.getLocalRowIndex`\n                // and rows[presentationRowIndex - firstRowIndex]. Needs more testing,\n                // but it should be faster.\n                return this.rows.find((row) => row.id === id);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Table;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         */\n        class ChainModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            constructor(options, ...chain) {\n                super();\n                this.chain = chain;\n                this.options = merge(ChainModifier.defaultOptions, options);\n                const optionsChain = this.options.chain || [];\n                for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            add(modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            clear(eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            async modify(table, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                let modified = table;\n                for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    try {\n                        await modifiers[i].modify(modified, eventDetail);\n                    }\n                    catch (error) {\n                        this.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        throw error;\n                    }\n                    modified = modified.modified;\n                }\n                table.modified = modified;\n                return table;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            modifyTable(table, eventDetail) {\n                const chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table\n                });\n                const modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                let modified = table.modified;\n                for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table\n                });\n                return table;\n            }\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            remove(modifier, eventDetail) {\n                const modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default option for the ordered modifier chain.\n         */\n        ChainModifier.defaultOptions = {\n            type: 'Chain'\n        };\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         */\n        class SortModifier extends DataModifier {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static ascending(a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            }\n            static descending(a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(SortModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            getRowReferences(table) {\n                const rows = table.getRows(), rowReferences = [];\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n                }\n                if (orderInColumn) {\n                    const column = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns({ [orderInColumn]: column });\n                }\n                else {\n                    const originalIndexes = [];\n                    const rows = [];\n                    let rowReference;\n                    for (let i = 0; i < rowCount; ++i) {\n                        rowReference = rowReferences[i];\n                        originalIndexes.push(modified.getOriginalRowIndex(rowReference.index));\n                        rows.push(rowReference.row);\n                    }\n                    modified.setRows(rows, 0);\n                    modified.setOriginalRowIndexes(originalIndexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options to group table rows.\n         */\n        SortModifier.defaultOptions = {\n            type: 'Sort',\n            direction: 'desc',\n            orderByColumn: 'y'\n        };\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'Grid/Core/Querying/SortingController.js', [_modules['Data/Modifiers/SortModifier.js']], function (SortModifier) {\n        /* *\n         *\n         *  Grid Sorting Controller class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that manages one of the data grid querying types - sorting.\n         */\n        class SortingController {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs the SortingController instance.\n             *\n             * @param grid\n             * The data grid instance.\n             */\n            constructor(grid) {\n                /**\n                 * The flag that indicates if the data should be updated because of the\n                 * change in the sorting options.\n                 */\n                this.shouldBeUpdated = false;\n                this.grid = grid;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Sets the sorting state. If the new sorting state is different than the\n             * current one, the `shouldBeUpdated` flag is set to `true`. If the\n             * same, the flag is set to `false`.\n             *\n             * @param order\n             * The sorting order.\n             *\n             * @param columnId\n             * The column ID to sort by.\n             */\n            setSorting(order, columnId) {\n                if (this.currentSorting?.columnId !== columnId ||\n                    this.currentSorting?.order !== order) {\n                    this.shouldBeUpdated = true;\n                    this.currentSorting = {\n                        columnId,\n                        order\n                    };\n                }\n                this.modifier = this.createModifier();\n            }\n            /**\n             * Returns the sorting options from the data grid options.\n             */\n            getSortingOptions() {\n                const grid = this.grid, { columnOptionsMap } = grid;\n                if (!columnOptionsMap) {\n                    return { order: null };\n                }\n                const columnIDs = Object.keys(columnOptionsMap);\n                let foundOrder = null;\n                let foundColumnId;\n                for (let i = columnIDs.length - 1; i > -1; --i) {\n                    const columnId = columnIDs[i];\n                    const columnOptions = columnOptionsMap[columnId];\n                    const order = columnOptions.sorting?.order;\n                    if (order) {\n                        if (foundColumnId) {\n                            // eslint-disable-next-line no-console\n                            console.warn('Grid: Only one column can be sorted at a time. ' +\n                                'Data will be sorted only by the last found column ' +\n                                `with the sorting order defined in the options: \"${foundColumnId}\".`);\n                            break;\n                        }\n                        foundOrder = order;\n                        foundColumnId = columnId;\n                    }\n                }\n                return {\n                    columnId: foundColumnId,\n                    order: foundOrder\n                };\n            }\n            /**\n             * Loads sorting options from the data grid options.\n             */\n            loadOptions() {\n                const stateFromOptions = this.getSortingOptions();\n                if (stateFromOptions.columnId !== this.initialSorting?.columnId ||\n                    stateFromOptions.order !== this.initialSorting?.order) {\n                    this.initialSorting = stateFromOptions;\n                    this.setSorting(stateFromOptions.order, stateFromOptions.columnId);\n                }\n            }\n            /**\n             * Returns the sorting modifier based on the loaded sorting options.\n             */\n            createModifier() {\n                if (!this.currentSorting) {\n                    return;\n                }\n                const { columnId, order } = this.currentSorting;\n                if (!order) {\n                    return;\n                }\n                return new SortModifier({\n                    orderByColumn: columnId,\n                    direction: order\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortingController;\n    });\n    _registerModule(_modules, 'Grid/Core/Querying/QueryingController.js', [_modules['Data/Modifiers/ChainModifier.js'], _modules['Grid/Core/Querying/SortingController.js']], function (ChainModifier, SortingController) {\n        /* *\n         *\n         *  Grid Querying Controller class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that manage data modification of the visible data in the data grid.\n         * It manages the modifiers that are applied to the data table.\n         */\n        class QueryingController {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(grid) {\n                this.grid = grid;\n                this.sorting = new SortingController(grid);\n                /// this.filtering = new FilteringController(grid);\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Proceeds with the data modification if needed.\n             *\n             * @param force\n             * If the data should be modified even if the significant options are not\n             * changed.\n             */\n            async proceed(force = false) {\n                if (force ||\n                    this.sorting.shouldBeUpdated // ||\n                // this.filtering.shouldBeUpdated\n                ) {\n                    await this.modifyData();\n                }\n            }\n            /**\n             * Load all options needed to generate the modifiers.\n             */\n            loadOptions() {\n                this.sorting.loadOptions();\n            }\n            /**\n             * Check if the data table does not need to be modified.\n             */\n            willNotModify() {\n                return (!this.sorting.modifier\n                // && !this.filtering.modifier\n                );\n            }\n            /**\n             * Apply all modifiers to the data table.\n             */\n            async modifyData() {\n                const originalDataTable = this.grid.dataTable;\n                if (!originalDataTable) {\n                    return;\n                }\n                const modifiers = [];\n                // TODO: Implement filtering\n                // if (this.filtering.modifier) {\n                //     modifiers.push(this.filtering.modifier);\n                // }\n                if (this.sorting.modifier) {\n                    modifiers.push(this.sorting.modifier);\n                }\n                if (modifiers.length > 0) {\n                    const chainModifier = new ChainModifier({}, ...modifiers);\n                    const dataTableCopy = originalDataTable.clone();\n                    await chainModifier.modify(dataTableCopy.modified);\n                    this.grid.presentationTable = dataTableCopy.modified;\n                }\n                else {\n                    this.grid.presentationTable = originalDataTable.modified;\n                }\n                this.sorting.shouldBeUpdated = false;\n                /// this.filtering.shouldBeUpdated = false;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QueryingController;\n    });\n    _registerModule(_modules, 'Grid/Core/Grid.js', [_modules['Grid/Core/Accessibility/Accessibility.js'], _modules['Core/Renderer/HTML/AST.js'], _modules['Grid/Core/Defaults.js'], _modules['Grid/Core/GridUtils.js'], _modules['Data/DataTable.js'], _modules['Grid/Core/Table/Table.js'], _modules['Core/Utilities.js'], _modules['Grid/Core/Querying/QueryingController.js'], _modules['Grid/Core/Globals.js'], _modules['Shared/TimeBase.js']], function (Accessibility, AST, Defaults, GridUtils, DataTable, Table, U, QueryingController, Globals, TimeBase) {\n        /* *\n         *\n         *  Highcharts Grid class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement, setHTMLContent } = GridUtils;\n        const { fireEvent, extend, getStyle, merge, pick, defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A base class for the Grid.\n         */\n        class Grid {\n            // Implementation\n            static grid(renderTo, options, async) {\n                if (async) {\n                    return new Promise((resolve) => {\n                        void new Grid(renderTo, options, (grid) => {\n                            resolve(grid);\n                        });\n                    });\n                }\n                return new Grid(renderTo, options);\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs a new Grid.\n             *\n             * @param renderTo\n             * The render target (container) of the Grid.\n             *\n             * @param options\n             * The options of the Grid.\n             *\n             * @param afterLoadCallback\n             * The callback that is called after the Grid is loaded.\n             */\n            constructor(renderTo, options, afterLoadCallback) {\n                /**\n                 * The user options declared for the columns as an object of column ID to\n                 * column options.\n                 * @internal\n                 */\n                this.columnOptionsMap = {};\n                /**\n                 * The options that were declared by the user when creating the Grid\n                 * or when updating it.\n                 */\n                this.userOptions = {};\n                /**\n                 * The initial height of the container. Can be 0 also if not set.\n                 * @internal\n                 */\n                this.initialContainerHeight = 0;\n                this.loadUserOptions(options);\n                this.querying = new QueryingController(this);\n                this.id = this.options?.id || U.uniqueKey();\n                this.initContainers(renderTo);\n                this.initAccessibility();\n                this.loadDataTable(this.options?.dataTable);\n                this.initVirtualization();\n                this.locale = this.options?.lang?.locale || (this.container?.closest('[lang]')?.lang);\n                this.time = new TimeBase(extend(this.options?.time, { locale: this.locale }), this.options?.lang);\n                this.querying.loadOptions();\n                void this.querying.proceed().then(() => {\n                    this.renderViewport();\n                    afterLoadCallback?.(this);\n                });\n                Grid.grids.push(this);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            /*\n             * Initializes the accessibility controller.\n             */\n            initAccessibility() {\n                this.accessibility?.destroy();\n                delete this.accessibility;\n                if (this.options?.accessibility?.enabled) {\n                    this.accessibility = new Accessibility(this);\n                }\n            }\n            /**\n             * Initializes the container of the Grid.\n             *\n             * @param renderTo\n             * The render target (html element or id) of the Grid.\n             *\n             */\n            initContainers(renderTo) {\n                const container = (typeof renderTo === 'string') ?\n                    Globals.win.document.getElementById(renderTo) : renderTo;\n                // Display an error if the renderTo is wrong\n                if (!container) {\n                    // eslint-disable-next-line no-console\n                    console.error(`\n                        Rendering div not found. It is unable to find the HTML element\n                        to render the Grid in.\n                    `);\n                    return;\n                }\n                this.initialContainerHeight = getStyle(container, 'height', true) || 0;\n                this.container = container;\n                this.container.innerHTML = AST.emptyHTML;\n                this.contentWrapper = makeHTMLElement('div', {\n                    className: Globals.getClassName('container')\n                }, this.container);\n            }\n            /**\n             * Loads the new user options to all the important fields (`userOptions`,\n             * `options` and `columnOptionsMap`).\n             *\n             * @param newOptions\n             * The options that were declared by the user.\n             *\n             * @param oneToOne\n             * When `false` (default), the existing column options will be merged with\n             * the ones that are currently defined in the user options. When `true`,\n             * the columns not defined in the new options will be removed.\n             */\n            loadUserOptions(newOptions, oneToOne = false) {\n                // Operate on a copy of the options argument\n                newOptions = merge(newOptions);\n                if (newOptions.columns) {\n                    if (oneToOne) {\n                        this.loadColumnOptionsOneToOne(newOptions.columns);\n                    }\n                    else {\n                        this.loadColumnOptions(newOptions.columns);\n                    }\n                    delete newOptions.columns;\n                }\n                this.userOptions = merge(this.userOptions, newOptions);\n                this.options = merge(this.options ?? Defaults.defaultOptions, this.userOptions);\n                // Generate column options map\n                const columnOptionsArray = this.options?.columns;\n                if (!columnOptionsArray) {\n                    return;\n                }\n                const columnOptionsObj = {};\n                for (let i = 0, iEnd = columnOptionsArray?.length ?? 0; i < iEnd; ++i) {\n                    columnOptionsObj[columnOptionsArray[i].id] = columnOptionsArray[i];\n                }\n                this.columnOptionsMap = columnOptionsObj;\n            }\n            /**\n             * Loads the new column options to the userOptions field.\n             *\n             * @param newColumnOptions\n             * The new column options that should be loaded.\n             *\n             * @param overwrite\n             * Whether to overwrite the existing column options with the new ones.\n             * Default is `false`.\n             */\n            loadColumnOptions(newColumnOptions, overwrite = false) {\n                if (!this.userOptions.columns) {\n                    this.userOptions.columns = [];\n                }\n                const columnOptions = this.userOptions.columns;\n                for (let i = 0, iEnd = newColumnOptions.length; i < iEnd; ++i) {\n                    const newOptions = newColumnOptions[i];\n                    const indexInPrevOptions = columnOptions.findIndex((prev) => prev.id === newOptions.id);\n                    // If the new column options contain only the id.\n                    if (Object.keys(newOptions).length < 2) {\n                        if (overwrite && indexInPrevOptions !== -1) {\n                            columnOptions.splice(indexInPrevOptions, 1);\n                        }\n                        continue;\n                    }\n                    if (indexInPrevOptions === -1) {\n                        columnOptions.push(newOptions);\n                    }\n                    else if (overwrite) {\n                        columnOptions[indexInPrevOptions] = newOptions;\n                    }\n                    else {\n                        columnOptions[indexInPrevOptions] = merge(columnOptions[indexInPrevOptions], newOptions);\n                    }\n                }\n                if (columnOptions.length < 1) {\n                    delete this.userOptions.columns;\n                }\n            }\n            /**\n             * Loads the new column options to the userOptions field in a one-to-one\n             * manner. It means that all the columns that are not defined in the new\n             * options will be removed.\n             *\n             * @param newColumnOptions\n             * The new column options that should be loaded.\n             */\n            loadColumnOptionsOneToOne(newColumnOptions) {\n                const prevColumnOptions = this.userOptions.columns;\n                const columnOptions = [];\n                let prevOptions;\n                for (let i = 0, iEnd = newColumnOptions.length; i < iEnd; ++i) {\n                    const newOptions = newColumnOptions[i];\n                    const indexInPrevOptions = prevColumnOptions?.findIndex((prev) => prev.id === newOptions.id);\n                    if (indexInPrevOptions !== void 0 && indexInPrevOptions !== -1) {\n                        prevOptions = prevColumnOptions?.[indexInPrevOptions];\n                    }\n                    const resultOptions = merge(prevOptions ?? {}, newOptions);\n                    if (Object.keys(resultOptions).length > 1) {\n                        columnOptions.push(resultOptions);\n                    }\n                }\n                this.userOptions.columns = columnOptions;\n            }\n            /**\n             * Updates the Grid with new options.\n             *\n             * @param options\n             * The options of the Grid that should be updated. If not provided,\n             * the update will be proceeded based on the `this.userOptions` property.\n             * The `column` options are merged using the `id` property as a key.\n             *\n             * @param render\n             * Whether to re-render the Grid after updating the options.\n             *\n             * @param oneToOne\n             * When `false` (default), the existing column options will be merged with\n             * the ones that are currently defined in the user options. When `true`,\n             * the columns not defined in the new options will be removed.\n             */\n            async update(options = {}, render = true, oneToOne = false) {\n                this.loadUserOptions(options, oneToOne);\n                this.initAccessibility();\n                let newDataTable = false;\n                if (!this.dataTable || options.dataTable) {\n                    this.userOptions.dataTable = options.dataTable;\n                    (this.options ?? {}).dataTable = options.dataTable;\n                    this.loadDataTable(this.options?.dataTable);\n                    newDataTable = true;\n                    this.initVirtualization();\n                }\n                this.viewport?.columnDistribution.validateOnUpdate(options);\n                this.querying.loadOptions();\n                // Update locale.\n                const locale = options.lang?.locale;\n                if (locale) {\n                    this.locale = locale;\n                    this.time.update(extend(options.time || {}, { locale: this.locale }));\n                }\n                if (render) {\n                    await this.querying.proceed(newDataTable);\n                    this.renderViewport();\n                }\n            }\n            /**\n             * Updates the column of the Grid with new options.\n             *\n             * @param columnId\n             * The ID of the column that should be updated.\n             *\n             * @param options\n             * The options of the columns that should be updated. If null,\n             * column options for this column ID will be removed.\n             *\n             * @param render\n             * Whether to re-render the Grid after updating the columns.\n             *\n             * @param overwrite\n             * If true, the column options will be updated by replacing the existing\n             * options with the new ones instead of merging them.\n             */\n            async updateColumn(columnId, options, render = true, overwrite = false) {\n                this.loadColumnOptions([{\n                        id: columnId,\n                        ...options\n                    }], overwrite);\n                await this.update(void 0, render);\n            }\n            /**\n             * Hovers the row with the provided index. It removes the hover effect from\n             * the previously hovered row.\n             *\n             * @param rowIndex\n             * The index of the row.\n             */\n            hoverRow(rowIndex) {\n                const rows = this.viewport?.rows;\n                if (!rows) {\n                    return;\n                }\n                const firstRowIndex = this.viewport?.rows[0]?.index ?? 0;\n                if (this.hoveredRowIndex !== void 0) {\n                    rows[this.hoveredRowIndex - firstRowIndex]?.setHoveredState(false);\n                }\n                if (rowIndex !== void 0) {\n                    rows[rowIndex - firstRowIndex]?.setHoveredState(true);\n                }\n                this.hoveredRowIndex = rowIndex;\n            }\n            /**\n             * Hovers the column with the provided ID. It removes the hover effect from\n             * the previously hovered column.\n             *\n             * @param columnId\n             * The ID of the column.\n             */\n            hoverColumn(columnId) {\n                const vp = this.viewport;\n                if (!vp) {\n                    return;\n                }\n                if (this.hoveredColumnId) {\n                    vp.getColumn(this.hoveredColumnId)?.setHoveredState(false);\n                }\n                if (columnId) {\n                    vp.getColumn(columnId)?.setHoveredState(true);\n                }\n                this.hoveredColumnId = columnId;\n            }\n            /**\n             * Sets the sync state to the row with the provided index. It removes the\n             * synced effect from the previously synced row.\n             *\n             * @param rowIndex\n             * The index of the row.\n             */\n            syncRow(rowIndex) {\n                const rows = this.viewport?.rows;\n                if (!rows) {\n                    return;\n                }\n                const firstRowIndex = this.viewport?.rows[0]?.index ?? 0;\n                if (this.syncedRowIndex !== void 0) {\n                    rows[this.syncedRowIndex - firstRowIndex]?.setSyncedState(false);\n                }\n                if (rowIndex !== void 0) {\n                    rows[rowIndex - firstRowIndex]?.setSyncedState(true);\n                }\n                this.syncedRowIndex = rowIndex;\n            }\n            /**\n             * Sets the sync state to the column with the provided ID. It removes the\n             * synced effect from the previously synced column.\n             *\n             * @param columnId\n             * The ID of the column.\n             */\n            syncColumn(columnId) {\n                const vp = this.viewport;\n                if (!vp) {\n                    return;\n                }\n                if (this.syncedColumnId) {\n                    vp.getColumn(this.syncedColumnId)?.setSyncedState(false);\n                }\n                if (columnId) {\n                    vp.getColumn(columnId)?.setSyncedState(true);\n                }\n                this.syncedColumnId = columnId;\n            }\n            /**\n             * Render caption above the grid.\n             * @internal\n             */\n            renderCaption() {\n                const captionOptions = this.options?.caption;\n                const captionText = captionOptions?.text;\n                if (!captionText) {\n                    return;\n                }\n                // Create a caption element.\n                this.captionElement = makeHTMLElement('div', {\n                    className: Globals.getClassName('captionElement'),\n                    id: this.id + '-caption'\n                }, this.contentWrapper);\n                // Render the caption element content.\n                setHTMLContent(this.captionElement, captionText);\n                if (captionOptions.className) {\n                    this.captionElement.classList.add(...captionOptions.className.split(/\\s+/g));\n                }\n            }\n            /**\n             * Render description under the grid.\n             *\n             * @internal\n             */\n            renderDescription() {\n                const descriptionOptions = this.options?.description;\n                const descriptionText = descriptionOptions?.text;\n                if (!descriptionText) {\n                    return;\n                }\n                // Create a description element.\n                this.descriptionElement = makeHTMLElement('div', {\n                    className: Globals.getClassName('descriptionElement'),\n                    id: this.id + '-description'\n                }, this.contentWrapper);\n                // Render the description element content.\n                setHTMLContent(this.descriptionElement, descriptionText);\n                if (descriptionOptions.className) {\n                    this.descriptionElement.classList.add(...descriptionOptions.className.split(/\\s+/g));\n                }\n            }\n            /**\n             * Resets the content wrapper of the Grid. It clears the content and\n             * resets the class names.\n             * @internal\n             */\n            resetContentWrapper() {\n                if (!this.contentWrapper) {\n                    return;\n                }\n                this.contentWrapper.innerHTML = AST.emptyHTML;\n                this.contentWrapper.className =\n                    Globals.getClassName('container') + ' ' +\n                        this.options?.rendering?.theme || '';\n            }\n            /**\n             * Renders the viewport of the Grid. If the Grid is already\n             * rendered, it will be destroyed and re-rendered with the new data.\n             * @internal\n             */\n            renderViewport() {\n                const viewportMeta = this.viewport?.getStateMeta();\n                this.enabledColumns = this.getEnabledColumnIDs();\n                this.credits?.destroy();\n                this.viewport?.destroy();\n                delete this.viewport;\n                this.resetContentWrapper();\n                this.renderCaption();\n                if (this.enabledColumns.length > 0) {\n                    this.viewport = this.renderTable();\n                    if (viewportMeta && this.viewport) {\n                        this.viewport.applyStateMeta(viewportMeta);\n                    }\n                }\n                else {\n                    this.renderNoData();\n                }\n                this.renderDescription();\n                this.accessibility?.setA11yOptions();\n                fireEvent(this, 'afterRenderViewport');\n                this.viewport?.reflow();\n            }\n            /**\n             * Renders the table (viewport) of the Grid.\n             *\n             * @returns\n             * The newly rendered table (viewport) of the Grid.\n             */\n            renderTable() {\n                this.tableElement = makeHTMLElement('table', {\n                    className: Globals.getClassName('tableElement')\n                }, this.contentWrapper);\n                return new Table(this, this.tableElement);\n            }\n            /**\n             * Renders a message that there is no data to display.\n             */\n            renderNoData() {\n                makeHTMLElement('div', {\n                    className: Globals.getClassName('noData'),\n                    innerText: this.options?.lang?.noData\n                }, this.contentWrapper);\n            }\n            /**\n             * Returns the array of IDs of columns that should be displayed in the data\n             * grid, in the correct order.\n             */\n            getEnabledColumnIDs() {\n                const { columnOptionsMap } = this;\n                const header = this.options?.header;\n                const headerColumns = this.getColumnIds(header || [], false);\n                const columnsIncluded = this.options?.rendering?.columns?.included || (headerColumns && headerColumns.length > 0 ?\n                    headerColumns : this.dataTable?.getColumnNames());\n                if (!columnsIncluded?.length) {\n                    return [];\n                }\n                if (!columnOptionsMap) {\n                    return columnsIncluded;\n                }\n                let columnName;\n                const result = [];\n                for (let i = 0, iEnd = columnsIncluded.length; i < iEnd; ++i) {\n                    columnName = columnsIncluded[i];\n                    if (columnOptionsMap?.[columnName]?.enabled !== false) {\n                        result.push(columnName);\n                    }\n                }\n                return result;\n            }\n            loadDataTable(tableOptions) {\n                // If the table is passed as a reference, it should be used instead of\n                // creating a new one.\n                if (tableOptions?.id) {\n                    this.dataTable = tableOptions;\n                    this.presentationTable = this.dataTable.modified;\n                    return;\n                }\n                this.dataTable = this.presentationTable =\n                    new DataTable(tableOptions);\n            }\n            /**\n             * Extracts all references to columnIds on all levels below defined level\n             * in the settings.header structure.\n             *\n             * @param columnsTree\n             * Structure that we start calculation\n             *\n             * @param [onlyEnabledColumns=true]\n             * Extract all columns from header or columns filtered by enabled param\n             * @returns\n             */\n            getColumnIds(columnsTree, onlyEnabledColumns = true) {\n                let columnIds = [];\n                const { enabledColumns } = this;\n                for (const column of columnsTree) {\n                    const columnId = typeof column === 'string' ? column : column.columnId;\n                    if (columnId &&\n                        (!onlyEnabledColumns || (enabledColumns?.includes(columnId)))) {\n                        columnIds.push(columnId);\n                    }\n                    if (typeof column !== 'string' && column.columns) {\n                        columnIds = columnIds.concat(this.getColumnIds(column.columns, onlyEnabledColumns));\n                    }\n                }\n                return columnIds;\n            }\n            /**\n             * Destroys the Grid.\n             */\n            destroy() {\n                const dgIndex = Grid.grids.findIndex((dg) => dg === this);\n                this.viewport?.destroy();\n                if (this.container) {\n                    this.container.innerHTML = AST.emptyHTML;\n                    this.container.classList.remove(Globals.getClassName('container'));\n                }\n                // Clear all properties\n                Object.keys(this).forEach((key) => {\n                    delete this[key];\n                });\n                Grid.grids.splice(dgIndex, 1);\n            }\n            /**\n             * Grey out the Grid and show a loading indicator.\n             *\n             * @param message\n             * The message to display in the loading indicator.\n             */\n            showLoading(message) {\n                if (this.loadingWrapper) {\n                    return;\n                }\n                // Create loading wrapper.\n                this.loadingWrapper = makeHTMLElement('div', {\n                    className: Globals.getClassName('loadingWrapper')\n                }, this.contentWrapper);\n                // Create spinner element.\n                makeHTMLElement('div', {\n                    className: Globals.getClassName('loadingSpinner')\n                }, this.loadingWrapper);\n                // Create loading message span element.\n                const loadingSpan = makeHTMLElement('span', {\n                    className: Globals.getClassName('loadingMessage')\n                }, this.loadingWrapper);\n                setHTMLContent(loadingSpan, pick(message, this.options?.lang?.loading, ''));\n            }\n            /**\n             * Removes the loading indicator.\n             */\n            hideLoading() {\n                this.loadingWrapper?.remove();\n                delete this.loadingWrapper;\n            }\n            /**\n             * Returns the current grid data as a JSON string.\n             *\n             * @return\n             * JSON representation of the data\n             */\n            getData() {\n                const json = this.viewport?.dataTable.modified.columns;\n                if (!this.enabledColumns || !json) {\n                    return '{}';\n                }\n                for (const key of Object.keys(json)) {\n                    if (this.enabledColumns.indexOf(key) === -1) {\n                        delete json[key];\n                    }\n                }\n                return JSON.stringify(json);\n            }\n            /**\n             * Returns the current grid data as a JSON string.\n             *\n             * @return\n             * JSON representation of the data\n             *\n             * @deprecated\n             */\n            getJSON() {\n                return this.getData();\n            }\n            /**\n             * Returns the current Grid options.\n             *\n             * @param onlyUserOptions\n             * Whether to return only the user options or all options (user options\n             * merged with the default ones). Default is `true`.\n             *\n             * @returns\n             * Grid options.\n             */\n            getOptions(onlyUserOptions = true) {\n                const options = onlyUserOptions ? merge(this.userOptions) : merge(this.options);\n                if (options.dataTable?.id) {\n                    options.dataTable = {\n                        columns: options.dataTable.columns\n                    };\n                }\n                return options;\n            }\n            /**\n             * Returns the current Grid options.\n             *\n             * @param onlyUserOptions\n             * Whether to return only the user options or all options (user options\n             * merged with the default ones). Default is `true`.\n             *\n             * @returns\n             * Options as a JSON string\n             *\n             * @deprecated\n             */\n            getOptionsJSON(onlyUserOptions = true) {\n                return JSON.stringify(this.getOptions(onlyUserOptions));\n            }\n            /**\n             * Enables virtualization if the row count is greater than or equal to the\n             * threshold or virtualization is enabled externally. Should be fired after\n             * the data table is loaded.\n             */\n            initVirtualization() {\n                var _a, _b;\n                const rows = this.userOptions.rendering?.rows;\n                const virtualization = rows?.virtualization;\n                const threshold = Number(rows?.virtualizationThreshold ||\n                    Defaults.defaultOptions.rendering?.rows?.virtualizationThreshold);\n                const rowCount = Number(this.dataTable?.rowCount);\n                // Makes sure all nested options are defined.\n                (_b = ((_a = (this.options ?? (this.options = {}))).rendering ?? (_a.rendering = {}))).rows ?? (_b.rows = {});\n                this.options.rendering.rows.virtualization =\n                    defined(virtualization) ? virtualization : rowCount >= threshold;\n            }\n        }\n        /* *\n        *\n        *  Properties\n        *\n        * */\n        /**\n         * An array containing the current Grid objects in the page.\n         * @internal\n         */\n        Grid.grids = [];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Grid;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        class DataPool {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = DataPoolDefaults) {\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                U.fireEvent(this, e.type, e);\n            }\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnectorType>}\n             * Returns the connector.\n             */\n            getConnector(connectorId) {\n                const connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector?.loaded) {\n                    return Promise.resolve(connector);\n                }\n                let waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    const connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(`Connector '${connectorId}' not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then((connector) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch']((error) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise((resolve, reject) => {\n                    waitingList.push([resolve, reject]);\n                });\n            }\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            getConnectorIds() {\n                const connectors = this.options.connectors, connectorIds = [];\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            }\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            getConnectorOptions(connectorId) {\n                const connectors = this.options.connectors;\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            }\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            getConnectorTable(connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then((connector) => connector.table);\n            }\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            isNewConnector(connectorId) {\n                return !this.connectors[connectorId];\n            }\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnectorType>}\n             * Returns the connector.\n             */\n            loadConnector(options) {\n                return new Promise((resolve, reject) => {\n                    this.emit({\n                        type: 'load',\n                        options\n                    });\n                    const ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(`Connector type not found. (${options.type})`);\n                    }\n                    const connector = this.connectors[options.id] = new ConnectorClass(options.options, options.dataTables);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then(({ converter, dataTables }) => {\n                        connector.dataTables = dataTables;\n                        connector.converter = converter;\n                        connector.loaded = true;\n                        this.emit({\n                            type: 'afterLoad',\n                            options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            }\n            /**\n             * Cancels all data connectors pending requests.\n             */\n            cancelPendingRequests() {\n                const { connectors } = this;\n                for (const connectorKey of Object.keys(connectors)) {\n                    connectors[connectorKey].stopPolling();\n                }\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return U.addEvent(this, type, callback);\n            }\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            setConnectorOptions(options) {\n                const connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options\n                });\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataPool class.\n         * @internal\n         */\n        DataPool.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Grid/Pro/GridEvents.js', [_modules['Core/Utilities.js'], _modules['Core/Globals.js']], function (U, Globals) {\n        /* *\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, fireEvent, pushUnique } = U;\n        const propagate = {\n            'cell_mouseOver': function () {\n                fireEvent(this.row.viewport.grid, 'cellMouseOver', {\n                    target: this\n                });\n            },\n            'cell_mouseOut': function () {\n                fireEvent(this.row.viewport.grid, 'cellMouseOut', {\n                    target: this\n                });\n            }\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Composition to add events to the TableCellClass methods.\n         *\n         * @param ColumnClass\n         * The class to extend.\n         *\n         * @param HeaderCellClass\n         * The class to extend.\n         *\n         * @param TableCellClass\n         * The class to extend.\n         *\n         * @internal\n         */\n        function compose(ColumnClass, HeaderCellClass, TableCellClass) {\n            if (!pushUnique(Globals.composed, 'GridEvents')) {\n                return;\n            }\n            [\n                'mouseOver',\n                'mouseOut',\n                'dblClick',\n                'click',\n                'afterRender'\n            ].forEach((name) => {\n                addEvent(TableCellClass, name, (e) => {\n                    const cell = e.target;\n                    const cellEvent = cell.column.options.cells?.events?.[name] ||\n                        // Backward compatibility\n                        cell.row.viewport.grid.options?.events?.cell?.[name];\n                    cellEvent?.call(cell);\n                    propagate['cell_' + name]?.call(cell);\n                });\n            });\n            [\n                'afterResize',\n                'afterSorting'\n            ].forEach((name) => {\n                addEvent(ColumnClass, name, (e) => {\n                    const column = e.target;\n                    const columnEvent = column.options?.events?.[name] ||\n                        // Backward compatibility\n                        column.viewport.grid.options?.events?.column?.[name];\n                    columnEvent?.call(column);\n                });\n            });\n            // HeaderCell Events\n            [\n                'click',\n                'afterRender'\n            ].forEach((name) => {\n                addEvent(HeaderCellClass, name, (e) => {\n                    const column = e.target;\n                    const headerEvent = column.options?.header?.events?.[name] ||\n                        // Backward compatibility\n                        column.viewport?.grid?.options?.events?.header?.[name];\n                    headerEvent?.call(column);\n                });\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * @internal\n         */\n\n        return { compose };\n    });\n    _registerModule(_modules, 'Grid/Pro/CellEditing/CellEditing.js', [_modules['Grid/Core/Globals.js'], _modules['Core/Utilities.js']], function (Globals, U) {\n        /* *\n         *\n         *  Grid Cell Editing class.\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The class that handles the manual editing of cells in the data grid.\n         */\n        class CellEditing {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(viewport) {\n                /**\n                 * Handles the blur event on the input field.\n                 */\n                this.onInputBlur = () => {\n                    if (!this.stopEditing()) {\n                        this.editModeContent?.getMainElement().focus();\n                    }\n                };\n                /**\n                 * Handles the change event on the input field.\n                 */\n                this.onInputChange = () => {\n                    if (this.editModeContent?.finishAfterChange &&\n                        !this.stopEditing()) {\n                        this.editModeContent?.getMainElement().focus();\n                    }\n                };\n                /**\n                 * Handles the keydown event on the input field. Cancels editing on escape\n                 * and saves the value on enter.\n                 *\n                 * @param e\n                 * The keyboard event.\n                 */\n                this.onInputKeyDown = (e) => {\n                    const { key } = e;\n                    e.stopPropagation();\n                    if (key === 'Escape') {\n                        this.stopEditing(false);\n                        return;\n                    }\n                    if (key === 'Enter') {\n                        if (this.editModeContent?.finishAfterChange) {\n                            this.onInputChange();\n                            return;\n                        }\n                        this.stopEditing();\n                    }\n                };\n                this.viewport = viewport;\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            /**\n             * Turns the cell into an editable input field.\n             *\n             * @param cell\n             * The cell that is to be edited.\n             */\n            startEditing(cell) {\n                if (this.editedCell === cell || (\n                // If value is invalid, do not start new editing\n                this.editedCell && !this.stopEditing())) {\n                    return;\n                }\n                this.editedCell = cell;\n                cell.htmlElement.classList.add(Globals.getClassName('editedCell'));\n                this.render();\n                fireEvent(cell, 'startedEditing');\n            }\n            /**\n             * Stops the editing of the cell.\n             *\n             * @param submit\n             * Whether to save the value of the input to the cell. Defaults to true.\n             *\n             * @return\n             * Returns `true` if the cell was successfully stopped editing.\n             */\n            stopEditing(submit = true) {\n                const cell = this.editedCell;\n                const emContent = this.editModeContent;\n                if (!cell || !emContent) {\n                    return false;\n                }\n                const { column } = cell;\n                const vp = column.viewport;\n                const newValue = emContent.value;\n                if (submit) {\n                    const validationErrors = [];\n                    if (!vp.validator.validate(cell, validationErrors)) {\n                        vp.validator.initErrorBox(cell, validationErrors);\n                        return false;\n                    }\n                    vp.validator.hide();\n                    vp.validator.errorCell = void 0;\n                }\n                // Hide notification\n                this.viewport.validator.hide();\n                // Hide input\n                this.destroy();\n                cell.htmlElement.classList.remove(Globals.getClassName('editedCell'));\n                cell.htmlElement.focus();\n                const isValueChanged = cell.value !== newValue;\n                void cell.setValue(submit ? newValue : cell.value, submit && isValueChanged);\n                if (isValueChanged) {\n                    fireEvent(cell, 'stoppedEditing', { submit });\n                }\n                delete this.editedCell;\n                return true;\n            }\n            /**\n             * Renders the input field for the cell, focuses it and sets up event\n             * listeners.\n             */\n            render() {\n                const cell = this.editedCell;\n                if (!cell || !cell.column.editModeRenderer) {\n                    return;\n                }\n                this.containerElement = this.containerElement ||\n                    document.createElement('div');\n                this.containerElement.className =\n                    CellEditing.classNames.cellEditingContainer;\n                this.editedCell?.htmlElement.appendChild(this.containerElement);\n                this.editModeContent = cell.column.editModeRenderer?.render(cell, this.containerElement);\n                this.editModeContent.getMainElement().focus();\n                this.editModeContent.blurHandler = this.onInputBlur;\n                this.editModeContent.changeHandler = this.onInputChange;\n                this.editModeContent.keyDownHandler = this.onInputKeyDown;\n            }\n            /**\n             * Removes event listeners and the input element.\n             */\n            destroy() {\n                if (!this.editModeContent) {\n                    return;\n                }\n                this.editModeContent.destroy();\n                this.containerElement?.remove();\n                delete this.editModeContent;\n                delete this.containerElement;\n            }\n        }\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        (function (CellEditing) {\n            /**\n             * The class names used by the CellEditing functionality.\n             */\n            CellEditing.classNames = {\n                cellEditingContainer: Globals.classNamePrefix + 'cell-editing-container'\n            };\n        })(CellEditing || (CellEditing = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellEditing;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/CellRendererRegistry.js', [], function () {\n        /* *\n         *\n         *  Cell Renderer Registry\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var CellRendererRegistry;\n        (function (CellRendererRegistry) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Record of cell renderer classes\n             */\n            CellRendererRegistry.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method used to register new cell renderer classes.\n             *\n             * @param key\n             * Registry key of the cell renderer class.\n             *\n             * @param CellRendererClass\n             * Cell renderer class (aka class constructor) to register.\n             */\n            function registerRenderer(key, CellRendererClass) {\n                return (!!key &&\n                    !CellRendererRegistry.types[key] &&\n                    !!(CellRendererRegistry.types[key] = CellRendererClass));\n            }\n            CellRendererRegistry.registerRenderer = registerRenderer;\n        })(CellRendererRegistry || (CellRendererRegistry = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellRendererRegistry;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellEditing/CellEditingComposition.js', [_modules['Grid/Core/Defaults.js'], _modules['Grid/Core/Globals.js'], _modules['Grid/Pro/CellEditing/CellEditing.js'], _modules['Grid/Pro/CellRendering/CellRendererRegistry.js'], _modules['Grid/Core/GridUtils.js'], _modules['Core/Utilities.js']], function (Defaults, Globals, CellEditing, CellRendererRegistry, GU, U) {\n        /* *\n         *\n         *  Grid Cell Editing class.\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement } = GU;\n        const { addEvent, merge, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * @internal\n         */\n        var CellEditingComposition;\n        (function (CellEditingComposition) {\n            /**\n             * Default options for the cell editing.\n             */\n            const defaultOptions = {\n                accessibility: {\n                    announcements: {\n                        cellEditing: true\n                    }\n                },\n                lang: {\n                    accessibility: {\n                        cellEditing: {\n                            editable: 'Editable.',\n                            announcements: {\n                                started: 'Entered cell editing mode.',\n                                edited: 'Edited cell value.',\n                                cancelled: 'Editing canceled.',\n                                notValid: 'Provided value is not valid.'\n                            }\n                        }\n                    }\n                }\n            };\n            /**\n             * Extends the grid classes with cell editing functionality.\n             *\n             * @param TableClass\n             * The class to extend.\n             *\n             * @param TableCellClass\n             * The class to extend.\n             *\n             * @param ColumnClass\n             * The class to extend.\n             */\n            function compose(TableClass, TableCellClass, ColumnClass) {\n                if (!pushUnique(Globals.composed, 'CellEditing')) {\n                    return;\n                }\n                merge(true, Defaults.defaultOptions, defaultOptions);\n                addEvent(ColumnClass, 'afterInit', afterColumnInit);\n                addEvent(TableClass, 'beforeInit', initTable);\n                addEvent(TableCellClass, 'keyDown', onCellKeyDown);\n                addEvent(TableCellClass, 'dblClick', onCellDblClick);\n                addEvent(TableCellClass, 'afterRender', addEditableCellA11yHint);\n                addEvent(TableCellClass, 'startedEditing', function () {\n                    announceA11yUserEditedCell(this, 'started');\n                });\n                addEvent(TableCellClass, 'stoppedEditing', function (e) {\n                    const cellEvents = merge(\n                    // Backward compatibility\n                    this.column.viewport.grid.options?.events?.cell, this.column.options.cells?.events);\n                    if (e.submit) {\n                        cellEvents?.afterEdit?.call(this);\n                    }\n                    announceA11yUserEditedCell(this, e.submit ? 'edited' : 'cancelled');\n                });\n            }\n            CellEditingComposition.compose = compose;\n            /**\n             * Callback function called before table initialization.\n             */\n            function initTable() {\n                this.cellEditing = new CellEditing(this);\n            }\n            /**\n             * Creates the edit mode renderer for the column.\n             *\n             * @param column\n             * The column to create the edit mode renderer for.\n             */\n            function createEditModeRenderer(column) {\n                const editModeOptions = column.options.cells?.editMode;\n                const editModeRendererTypeName = editModeOptions?.renderer?.type;\n                const staticRendererTypeName = column.options?.cells?.renderer?.type || 'text';\n                if (editModeRendererTypeName) {\n                    return new CellRendererRegistry.types[editModeRendererTypeName](column, editModeOptions?.renderer || {});\n                }\n                const staticRendererType = CellRendererRegistry.types[staticRendererTypeName];\n                let defRenderer = staticRendererType.defaultEditingRenderer;\n                if (typeof defRenderer !== 'string') {\n                    defRenderer = defRenderer[column.dataType];\n                }\n                return new CellRendererRegistry.types[defRenderer](column, defRenderer === staticRendererTypeName ? merge(column.options.cells?.renderer, { disabled: false }) || {} : {});\n            }\n            /**\n             * Callback function called after column initialization.\n             */\n            function afterColumnInit() {\n                const { options } = this;\n                if (options?.cells?.editMode?.enabled ||\n                    options?.cells?.editable) {\n                    this.editModeRenderer = createEditModeRenderer(this);\n                }\n            }\n            /**\n             * Callback function called when a key is pressed on a cell.\n             *\n             * @param e\n             * The event object.\n             */\n            function onCellKeyDown(e) {\n                if (e.originalEvent?.key !== 'Enter' ||\n                    !this.column.editModeRenderer) {\n                    return;\n                }\n                this.row.viewport.cellEditing?.startEditing(this);\n            }\n            /**\n             * Callback function called when a cell is double clicked.\n             */\n            function onCellDblClick() {\n                if (this.column.editModeRenderer) {\n                    this.row.viewport.cellEditing?.startEditing(this);\n                }\n            }\n            /**\n             * Add the 'editable' hint span element for the editable cell.\n             */\n            function addEditableCellA11yHint() {\n                const a11y = this.row.viewport.grid.accessibility;\n                if (!a11y || this.a11yEditableHint?.isConnected) {\n                    return;\n                }\n                const editableLang = this.row.viewport.grid.options\n                    ?.lang?.accessibility?.cellEditing?.editable;\n                if ((!this.column.options.cells?.editable &&\n                    !this.column.options.cells?.editMode?.enabled) ||\n                    !editableLang) {\n                    return;\n                }\n                this.a11yEditableHint = makeHTMLElement('span', {\n                    className: Globals.getClassName('visuallyHidden'),\n                    innerText: ', ' + editableLang\n                }, this.htmlElement);\n            }\n            /**\n             * Announce that the cell editing started.\n             *\n             * @param cell\n             * The cell that is being edited.\n             *\n             * @param msgType\n             * The type of the message.\n             */\n            function announceA11yUserEditedCell(cell, msgType) {\n                const a11y = cell.row.viewport.grid.accessibility;\n                if (!a11y) {\n                    return;\n                }\n                const { options } = a11y.grid;\n                if (!options?.accessibility?.announcements?.cellEditing) {\n                    return;\n                }\n                const lang = options?.lang?.accessibility?.cellEditing?.announcements;\n                const msg = lang?.[msgType];\n                if (!msg) {\n                    return;\n                }\n                a11y.announce(msg);\n            }\n        })(CellEditingComposition || (CellEditingComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellEditingComposition;\n    });\n    _registerModule(_modules, 'Grid/Pro/Dash3Compatibility.js', [_modules['Core/Utilities.js'], _modules['Core/Globals.js']], function (U, Globals) {\n        /* *\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Composition to add compatibility with the old `dataGrid` property.\n         *\n         * @param TableClass\n         * The class to extend.\n         */\n        function compose(TableClass) {\n            if (!pushUnique(Globals.composed, 'Dash3Compatibility')) {\n                return;\n            }\n            Object.defineProperty(TableClass.prototype, 'dataGrid', {\n                get: function () {\n                    return this.grid;\n                },\n                configurable: true,\n                enumerable: false\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return { compose };\n    });\n    _registerModule(_modules, 'Grid/Core/Credits.js', [_modules['Grid/Core/Globals.js'], _modules['Grid/Core/GridUtils.js']], function (Globals, GridUtils) {\n        /* *\n         *\n         *  Grid Credits class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { makeHTMLElement, setHTMLContent } = GridUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a credits in the grid.\n         */\n        class Credits {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Construct the credits.\n             *\n             * @param grid\n             * The Grid instance which the credits belong to.\n             *\n             * @param options\n             * Options for the credits label. Predefined if not provided.\n             *\n             */\n            constructor(grid, options) {\n                this.grid = grid;\n                this.containerElement = makeHTMLElement('div', {\n                    className: Globals.getClassName('creditsContainer')\n                });\n                this.textElement = this.renderAnchor();\n                this.options = options ?? Credits.defaultOptions;\n                this.render();\n            }\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Render the credits. If the credits are disabled, they will be removed\n             * from the container.\n             */\n            render() {\n                const grid = this.grid;\n                const contentWrapper = grid.contentWrapper;\n                const { text, href } = this.options;\n                this.containerElement.remove();\n                if (!this.textElement) {\n                    this.textElement = this.renderAnchor();\n                }\n                if (text && href) {\n                    setHTMLContent(this.textElement, text);\n                    this.textElement.setAttribute('href', href || '');\n                }\n                if (grid.descriptionElement) {\n                    contentWrapper?.insertBefore(this.containerElement, grid.descriptionElement);\n                }\n                else {\n                    contentWrapper?.appendChild(this.containerElement);\n                }\n            }\n            renderAnchor() {\n                const anchorElement = makeHTMLElement('a', {\n                    className: Globals.getClassName('creditsText')\n                }, this.containerElement);\n                anchorElement.setAttribute('target', '_blank');\n                return anchorElement;\n            }\n            /**\n             * Get the height of the credits container.\n             */\n            getHeight() {\n                return this.containerElement.offsetHeight;\n            }\n            /**\n             * Destroy the credits. The credits will be removed from the container and\n             * the reference to the credits will be deleted from the Grid instance\n             * it belongs to.\n             */\n            destroy() {\n                this.containerElement.remove();\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        /**\n         * Default options of the credits.\n         */\n        Credits.defaultOptions = {\n            enabled: true,\n            // eslint-disable-next-line no-console\n            text: `<picture class=\"hcg-logo-wrapper\">\n                    <source srcset=\"https://assets.highcharts.com/grid/logo_darkx2.png 2x, https://assets.highcharts.com/grid/logo_dark.png 1x\" media=\"(prefers-color-scheme: dark)\">\n                    <img src=\"https://assets.highcharts.com/grid/logo_light.png\" srcset=\"https://assets.highcharts.com/grid/logo_lightx2.png 2x, https://assets.highcharts.com/grid/logo_light.png 1x\" alt=\"Highcharts logo\" style=\"height: 20px !important; width: auto !important; display: inline-block !important;\">\n                </picture>`,\n            href: 'https://www.highcharts.com',\n            position: 'bottom'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Credits;\n    });\n    _registerModule(_modules, 'Grid/Pro/Credits/CreditsPro.js', [_modules['Grid/Core/Globals.js'], _modules['Grid/Core/Credits.js'], _modules['Grid/Core/GridUtils.js']], function (Globals, Credits, GridUtils) {\n        /* *\n         *\n         *  Grid Credits class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { setHTMLContent } = GridUtils;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a credits in the data grid.\n         */\n        class CreditsPro extends Credits {\n            /* *\n            *\n            *  Methods\n            *\n            * */\n            /**\n             * Set the content of the credits.\n             */\n            setContent() {\n                const { text, href } = this.options;\n                setHTMLContent(this.textElement, text || '');\n                this.textElement.setAttribute('href', href || '');\n            }\n            /**\n             * Append the credits to the container. The position of the credits is\n             * determined by the `position` option.\n             */\n            appendToContainer() {\n                const grid = this.grid;\n                const contentWrapper = grid.contentWrapper;\n                const { position } = this.options;\n                // Apply grid-pro class\n                this.containerElement.classList.add(Globals.getClassName('creditsPro'));\n                if (position === 'top') {\n                    // Append the credits to the top of the table.\n                    contentWrapper?.prepend(this.containerElement);\n                    return;\n                }\n                // Append the credits to the bottom of the table.\n                if (grid.descriptionElement) {\n                    contentWrapper?.insertBefore(this.containerElement, grid.descriptionElement);\n                }\n                else {\n                    contentWrapper?.appendChild(this.containerElement);\n                }\n            }\n            /**\n             * Update the credits with new options.\n             *\n             * @param options\n             * The new options for the credits.\n             *\n             * @param render\n             * Whether to render the credits after the update.\n             */\n            update(options, render = true) {\n                if (options) {\n                    this.grid.update({\n                        credits: options\n                    }, false);\n                    this.options = this.grid.options?.credits ?? {};\n                }\n                if (render) {\n                    this.render();\n                }\n            }\n            /**\n             * Render the credits. If the credits are disabled, they will be removed\n             * from the container. If also reflows the viewport dimensions.\n             */\n            render() {\n                const enabled = this.options.enabled ?? false;\n                this.containerElement.remove();\n                if (enabled) {\n                    this.setContent();\n                    this.appendToContainer();\n                }\n                else {\n                    this.destroy();\n                }\n                this.grid.viewport?.reflow();\n            }\n            destroy() {\n                super.destroy();\n                delete this.grid.credits;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CreditsPro;\n    });\n    _registerModule(_modules, 'Grid/Pro/Credits/CreditsProComposition.js', [_modules['Grid/Pro/Credits/CreditsPro.js'], _modules['Grid/Core/Globals.js'], _modules['Core/Utilities.js'], _modules['Grid/Core/Defaults.js']], function (CreditsPro, Globals, U, Defaults) {\n        /* *\n         *\n         *  Grid Credits class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *  - Sebastian Bochan\n         *\n         * */\n        const { addEvent, merge, pushUnique } = U;\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        var CreditsProComposition;\n        (function (CreditsProComposition) {\n            /**\n             * Extends the grid classes with customizable credits.\n             *\n             * @param GridClass\n             * The class to extend.\n             *\n             */\n            function compose(GridClass) {\n                if (!pushUnique(Globals.composed, 'CreditsPro')) {\n                    return;\n                }\n                merge(true, Defaults.defaultOptions, {\n                    credits: CreditsPro.defaultOptions\n                });\n                addEvent(GridClass, 'afterRenderViewport', initCredits);\n            }\n            CreditsProComposition.compose = compose;\n            /**\n             * Init configurable credits.\n             * @param this\n             * Reference to Grid.\n             */\n            function initCredits() {\n                this.credits = new CreditsPro(this, this.options?.credits);\n            }\n        })(CreditsProComposition || (CreditsProComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CreditsProComposition;\n    });\n    _registerModule(_modules, 'Grid/Pro/ColumnTypes/Validator.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Grid/Core/Globals.js'], _modules['Grid/Core/GridUtils.js'], _modules['Core/Utilities.js']], function (AST, Globals, GridUtils, U) {\n        /* *\n         *\n         *  Grid cell content validator\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { makeDiv, setHTMLContent } = GridUtils;\n        const { defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class for validating cell content.\n         */\n        class Validator {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(viewport) {\n                this.viewport = viewport;\n                this.notifContainer = makeDiv(Validator.classNames.notifContainer);\n                this.viewport.grid.contentWrapper?.appendChild(this.notifContainer);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            /**\n             * Validates the cell content.\n             *\n             * @param cell\n             * Edited cell.\n             *\n             * @param errors\n             * An output array for error messages.\n             *\n             * @returns\n             * Returns true if the value is valid, false otherwise.\n             */\n            validate(cell, errors = []) {\n                const { options, dataType } = cell.column;\n                const validationErrors = cell.row.viewport.grid.options?.lang?.validationErrors;\n                let rules = Array.from(options?.cells?.editMode?.validationRules || []);\n                // Remove duplicates in validationRules\n                const isArrayString = rules.every((rule) => typeof rule === 'string');\n                if (rules.length > 0 && isArrayString) {\n                    rules = [...new Set(rules)];\n                }\n                else {\n                    const predefined = Validator.predefinedRules[dataType] || [];\n                    const hasPredefined = rules.some((rule) => typeof rule !== 'string' &&\n                        typeof rule.validate === 'string' &&\n                        predefined.includes(rule.validate));\n                    if (!hasPredefined) {\n                        rules.push(...predefined);\n                    }\n                }\n                for (const rule of rules) {\n                    let ruleDef;\n                    let err;\n                    if (typeof rule === 'string') {\n                        ruleDef = Validator.rulesRegistry[rule];\n                        err = validationErrors?.[rule]?.notification;\n                    }\n                    else {\n                        ruleDef = rule;\n                    }\n                    let validateFn;\n                    if (typeof ruleDef.validate === 'string') {\n                        const predefinedRules = (Validator.rulesRegistry[ruleDef.validate]);\n                        validateFn =\n                            predefinedRules?.validate;\n                    }\n                    else {\n                        validateFn = ruleDef.validate;\n                    }\n                    const { editModeContent } = cell.column.viewport.cellEditing || {};\n                    if (typeof validateFn === 'function' &&\n                        editModeContent &&\n                        !validateFn.call(cell, editModeContent)) {\n                        if (typeof ruleDef.notification === 'function') {\n                            err = ruleDef.notification.call(cell, editModeContent);\n                        }\n                        errors.push((err || ruleDef.notification));\n                    }\n                }\n                return !errors.length;\n            }\n            /**\n             * Set content of notification and adjust the position.\n             *\n             * @param cell\n             * Cell that is currently edited and is not valid.\n             *\n             * @param errors\n             * An array of error messages.\n             *\n             */\n            initErrorBox(cell, errors) {\n                const { grid } = this.viewport;\n                this.errorCell = cell;\n                // Set error container position\n                this.reflow();\n                // Set width and content\n                setHTMLContent(this.notifContainer, errors.join('<br />'));\n                // A11y announcement\n                if (grid.options?.accessibility?.announcements?.cellEditing) {\n                    this.viewport.grid.accessibility?.announce((grid.options?.lang?.accessibility?.cellEditing\n                        ?.announcements?.notValid || '') + ' ' + errors.join('. '), true);\n                }\n                this.show();\n            }\n            /**\n             * Highlight the non-valid cell and display error in the notification box.\n             */\n            show() {\n                this.errorCell?.htmlElement.classList.add(Validator.classNames.editedCellError);\n                this.notifContainer.classList.add(Validator.classNames.notifError, Validator.classNames.notifAnimation);\n            }\n            /**\n             * Hide the notification, error and unset highlight on cell.\n             *\n             * @param hideErrorBox\n             * The flag that hides the error on edited cell.\n             *\n             */\n            hide(hideErrorBox = true) {\n                this.errorCell?.htmlElement.classList.remove(Validator.classNames.editedCellError);\n                this.notifContainer.classList.remove(Validator.classNames.notifError, Validator.classNames.notifAnimation);\n                if (hideErrorBox) {\n                    this.errorCell = void 0;\n                }\n                this.notifContainer.innerHTML = AST.emptyHTML;\n            }\n            /**\n             * Set the position of the error box.\n             */\n            reflow() {\n                const vp = this.viewport, errorCell = this.errorCell?.htmlElement, tableElement = vp.grid.tableElement, contentWrapper = vp.grid.contentWrapper;\n                if (!errorCell || !tableElement || !contentWrapper) {\n                    return;\n                }\n                const tableTop = tableElement.offsetTop, tableHeight = tableElement.offsetHeight, middlePoint = tableTop + (tableHeight / 2), errorCellTop = errorCell.offsetTop - tableTop;\n                if (errorCellTop > middlePoint) {\n                    this.notifContainer.style.top = // Avoid header overlap\n                        tableTop + (vp.theadElement?.offsetHeight || 0) + 'px';\n                    this.notifContainer.style.bottom = 'auto';\n                }\n                else {\n                    this.notifContainer.style.top = 'auto';\n                    this.notifContainer.style.bottom =\n                        contentWrapper.offsetHeight - tableTop - tableHeight + 'px';\n                }\n            }\n            /**\n             * Destroy validator.\n             */\n            destroy() {\n                this.errorCell = void 0;\n                this.notifContainer.remove();\n            }\n        }\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Namespace for Validation functionality.\n         */\n        (function (Validator) {\n            /**\n             * The class names used by the validator functionality.\n             */\n            Validator.classNames = {\n                notifContainer: Globals.classNamePrefix + 'notification',\n                notifError: Globals.classNamePrefix + 'notification-error',\n                notifAnimation: Globals.classNamePrefix + 'notification-animation',\n                editedCellError: Globals.classNamePrefix + 'edited-cell-error'\n            };\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            /**\n             * Definition of default validation rules.\n             */\n            Validator.rulesRegistry = {\n                notEmpty: {\n                    validate: ({ value, rawValue }) => (defined(value) && rawValue.length > 0),\n                    notification: 'Value cannot be empty.'\n                },\n                number: {\n                    validate: ({ rawValue }) => !isNaN(+rawValue),\n                    notification: 'Value has to be a number.'\n                },\n                datetime: {\n                    validate: ({ value }) => !defined(value) || !isNaN(+value),\n                    notification: 'Value has to be parsed to a valid timestamp.'\n                },\n                'boolean': {\n                    validate: ({ rawValue }) => (rawValue === 'true' || rawValue === 'false' ||\n                        Number(rawValue) === 1 || Number(rawValue) === 0),\n                    notification: 'Value has to be a boolean.'\n                }\n            };\n            /**\n             * Default validation rules for each dataType.\n             */\n            Validator.predefinedRules = {\n                'boolean': ['boolean'],\n                datetime: ['datetime'],\n                number: ['number'],\n                string: []\n            };\n        })(Validator || (Validator = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Validator;\n    });\n    _registerModule(_modules, 'Grid/Pro/ColumnTypes/ValidatorComposition.js', [_modules['Grid/Pro/ColumnTypes/Validator.js'], _modules['Grid/Core/Globals.js'], _modules['Core/Utilities.js']], function (Validator, Globals, U) {\n        /* *\n         *\n         *  Validator Composition.\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *\n         * */\n        const { addEvent, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * @internal\n         */\n        var ValidatorComposition;\n        (function (ValidatorComposition) {\n            /**\n             * Extends the grid classes with cell editing functionality.\n             *\n             * @param TableClass\n             * The class to extend.\n             *\n             */\n            function compose(TableClass) {\n                if (!pushUnique(Globals.composed, 'Validator')) {\n                    return;\n                }\n                addEvent(TableClass, 'afterInit', initValidatorComposition);\n                addEvent(TableClass, 'afterDestroy', destroy);\n            }\n            ValidatorComposition.compose = compose;\n            /**\n             * Callback function called after table initialization.\n             */\n            function initValidatorComposition() {\n                this.validator = new Validator(this);\n            }\n            /**\n             * Callback function called after table destroy.\n             */\n            function destroy() {\n                this.validator.destroy();\n            }\n        })(ValidatorComposition || (ValidatorComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ValidatorComposition;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/CellRenderersComposition.js', [_modules['Grid/Pro/CellRendering/CellRendererRegistry.js'], _modules['Grid/Core/Globals.js'], _modules['Core/Utilities.js']], function (CellRendererRegistry, Globals, U) {\n        /* *\n         *\n         *  Cell Content Pro composition\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * @internal\n         */\n        var CellRenderersComposition;\n        (function (CellRenderersComposition) {\n            /**\n             * Extends the grid classes with cell editing functionality.\n             *\n             * @param ColumnClass\n             * The class to extend.\n             */\n            function compose(ColumnClass) {\n                if (!pushUnique(Globals.composed, 'CellRenderers')) {\n                    return;\n                }\n                addEvent(ColumnClass, 'afterInit', afterColumnInit);\n                ColumnClass.prototype.createCellContent = createCellContent;\n            }\n            CellRenderersComposition.compose = compose;\n            /**\n             * Init a type of content for a column.\n             * @param this\n             * Current column.\n             */\n            function afterColumnInit() {\n                const rendererType = this.options.cells?.renderer?.type || 'text';\n                let Renderer = CellRendererRegistry.types[rendererType];\n                if (!Renderer) {\n                    // eslint-disable-next-line no-console\n                    console.warn(`The cell renderer of type \"${rendererType}\" is not registered. Using default text renderer instead.`);\n                    Renderer = CellRendererRegistry.types.text;\n                }\n                this.cellRenderer = new Renderer(this, this.options.cells?.renderer || {});\n            }\n            /**\n             * Render content of cell.\n             * @param this\n             * Current column.\n             *\n             * @param cell\n             * Current cell.\n             *\n             * @returns\n             * Formatted cell content.\n             */\n            function createCellContent(cell) {\n                return this.cellRenderer.render(cell);\n            }\n        })(CellRenderersComposition || (CellRenderersComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellRenderersComposition;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        class CSVConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            export(connector, options = this.options) {\n                const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n                let { decimalPoint, itemDelimiter } = options;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    const columnMeta = connector.whatIs(columnName);\n                    let columnDataType;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = `\"${cellValue}\"`;\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            let i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                const cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            }\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n                let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (let i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    let offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                let cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Internal method that parses a single CSV row\n             */\n            parseCSVRow(columnStr, rowNumber) {\n                const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                let { decimalPoint } = converter.options;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                let i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                const read = (j) => {\n                    c = columnStr[j];\n                };\n                const pushType = (type) => {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                const push = () => {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        const initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[A-F\\d]{3,3}|[A-F\\d]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            }\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            guessDelimiter(lines) {\n                let points = 0, commas = 0, guessed;\n                const potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (let i = 0; i < linesCount; i++) {\n                    let inStr = false, c, cn, cl, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    const columnStr = lines[i];\n                    for (let j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        CSVConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            lineDelimiter: '\\n'\n        };\n        DataConverter.registerType('CSV', CSVConverter);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        class CSVConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             *\n             * @param {Array<DataTableOptions>} [dataTables]\n             * Multiple connector data tables options.\n             *\n             */\n            constructor(options, dataTables) {\n                const mergedOptions = merge(CSVConnector.defaultOptions, options);\n                super(mergedOptions, dataTables);\n                this.options = defined(dataTables) ?\n                    merge(mergedOptions, { dataTables }) : mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, tables = connector.dataTables, { csv, csvURL, dataModifier, dataTables } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    csv,\n                    detail: eventDetail,\n                    tables\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL, {\n                        signal: connector?.pollingController?.signal\n                    }).then((response) => response.text()) :\n                    csv || '')\n                    .then((csv) => {\n                    if (csv) {\n                        this.initConverters(csv, (key) => {\n                            const options = this.options;\n                            const tableOptions = dataTables?.find((dataTable) => dataTable.key === key);\n                            // Takes over the connector default options.\n                            const mergedTableOptions = {\n                                dataTableKey: key,\n                                firstRowAsNames: tableOptions?.firstRowAsNames ??\n                                    options.firstRowAsNames,\n                                beforeParse: tableOptions?.beforeParse ??\n                                    options.beforeParse\n                            };\n                            return new CSVConverter(merge(this.options, mergedTableOptions));\n                        }, (converter, data) => {\n                            converter.parse({ csv: data });\n                        });\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier, dataTables)\n                        .then(() => csv);\n                })\n                    .then((csv) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv,\n                        detail: eventDetail,\n                        tables\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        tables\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CSVConnector.defaultOptions = {\n            csv: '',\n            csvURL: '',\n            enablePolling: false,\n            dataRefreshRate: 1,\n            firstRowAsNames: true\n        };\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        class GoogleSheetsConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.header = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, parseOptions = merge(converter.options, options);\n                let columns = ((parseOptions.json?.values) || []).map((column) => column.slice());\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                // If beforeParse is defined, use it to modify the data\n                const { beforeParse, json } = parseOptions;\n                if (beforeParse && json) {\n                    columns = beforeParse(json.values);\n                }\n                let column;\n                converter.columns = columns;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        `${column.shift()}` :\n                        uniqueKey());\n                    for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            let cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        GoogleSheetsConverter.defaultOptions = {\n            ...DataConverter.defaultOptions\n        };\n        DataConverter.registerType('GoogleSheets', GoogleSheetsConverter);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *  - Jomar Hønsi\n         *\n         * */\n        const { merge, pick, defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        class GoogleSheetsConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             *\n             * @param {Array<DataTableOptions>} [dataTables]\n             * Multiple connector data tables options.\n             *\n             */\n            constructor(options, dataTables) {\n                const mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                super(mergedOptions, dataTables);\n                this.options = defined(dataTables) ?\n                    merge(mergedOptions, { dataTables }) : mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            load(eventDetail) {\n                const connector = this, tables = connector.dataTables, { dataModifier, dataRefreshRate, enablePolling, googleAPIKey, googleSpreadsheetKey, dataTables } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    tables,\n                    url\n                });\n                if (!URL.canParse(url)) {\n                    throw new Error('Invalid URL: ' + url);\n                }\n                return fetch(url, { signal: connector?.pollingController?.signal })\n                    .then((response) => (response.json()))\n                    .then((json) => {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    this.initConverters(json, (key) => {\n                        const options = this.options;\n                        const tableOptions = dataTables?.find((dataTable) => dataTable.key === key);\n                        // Takes over the connector default options.\n                        const mergedTableOptions = {\n                            dataTableKey: key,\n                            firstRowAsNames: tableOptions?.firstRowAsNames ??\n                                options.firstRowAsNames,\n                            beforeParse: tableOptions?.beforeParse ??\n                                options.beforeParse\n                        };\n                        return new GoogleSheetsConverter(merge(this.options, mergedTableOptions));\n                    }, (converter, data) => {\n                        converter.parse({ json: data });\n                    });\n                    return connector.setModifierOptions(dataModifier, dataTables);\n                })\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        tables,\n                        url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        tables\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GoogleSheetsConnector.defaultOptions = {\n            googleAPIKey: '',\n            googleSpreadsheetKey: '',\n            enablePolling: false,\n            dataRefreshRate: 2,\n            firstRowAsNames: true\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options = {}) {\n                const url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/`);\n                const range = options.onlyColumnNames ?\n                    'A1:Z1' : buildQueryRange(options);\n                url.pathname += range;\n                const searchParams = url.searchParams;\n                searchParams.set('alt', 'json');\n                if (!options.onlyColumnNames) {\n                    searchParams.set('dateTimeRenderOption', 'FORMATTED_STRING');\n                    searchParams.set('majorDimension', 'COLUMNS');\n                    searchParams.set('valueRenderOption', 'UNFORMATTED_VALUE');\n                }\n                searchParams.set('prettyPrint', 'false');\n                searchParams.set('key', apiKey);\n                return url.href;\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options = {}) {\n                const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            let i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        class HTMLTableConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    this.tableElement = mergedOptions.tableElement;\n                    this.tableElementID = mergedOptions.tableElement.id;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            export(connector, options = this.options) {\n                const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                let tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    const subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (const name of columnNames) {\n                            let column = columns[name];\n                            if (!Array.isArray(column)) {\n                                // Convert to conventional array from typed array\n                                // if needed\n                                column = Array.from(column);\n                            }\n                            const subhead = (column.shift() || '').toString();\n                            columns[name] = column;\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                let caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            }\n            /**\n             * Get table cell markup from row data.\n             */\n            getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n                let val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            }\n            /**\n             * Get table header markup from row data.\n             */\n            getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n                const { useMultiLevelHeaders, useRowspanHeaders } = options;\n                let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Exporting.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            }\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            parse(options, eventDetail) {\n                const converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns,\n                        detail: eventDetail,\n                        headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                let rowIndex = 0, item, { startRow } = parseOptions;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    const items = rows[0].children, itemsLength = items.length;\n                    for (let i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        let columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                let cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                let i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns,\n                    detail: eventDetail,\n                    headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        HTMLTableConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            useRowspanHeaders: true,\n            useMultiLevelHeaders: true\n        };\n        DataConverter.registerType('HTMLTable', HTMLTableConverter);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { win } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        class HTMLTableConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new HTMLTableConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    tables: { table },\n                    tableElement: connector.tableElement\n                });\n                let tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    const error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        tables: { table }\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        tables: { table },\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HTMLTableConnector.defaultOptions = {\n            table: ''\n        };\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { error, isArray, merge, objectEach } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        class JSONConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                this.table = new DataTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this;\n                options = merge(converter.options, options);\n                const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n                let data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                        const item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(`${item.shift()}`);\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        let row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            const columnNames = converter.headers;\n                            if (columnNames && !(columnNames instanceof Array)) {\n                                const newRow = {};\n                                objectEach(columnNames, (arrayWithPath, name) => {\n                                    newRow[name] = arrayWithPath.reduce((acc, key) => acc[key], row);\n                                });\n                                row = newRow;\n                            }\n                            this.table.setRows([row], rowIndex);\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return this.table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        JSONConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            data: [],\n            orientation: 'rows'\n        };\n        DataConverter.registerType('JSON', JSONConverter);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge, defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        class JSONConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             *\n             * @param {Array<DataTableOptions>} [dataTables]\n             * Multiple connector data tables options.\n             */\n            constructor(options, dataTables) {\n                const mergedOptions = merge(JSONConnector.defaultOptions, options);\n                super(mergedOptions, dataTables);\n                this.options = defined(dataTables) ?\n                    merge(mergedOptions, { dataTables }) : mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, tables = connector.dataTables, { data, dataUrl, dataModifier, dataTables } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    data,\n                    detail: eventDetail,\n                    tables\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl, {\n                        signal: connector?.pollingController?.signal\n                    }).then((response) => response.json())['catch']((error) => {\n                        connector.emit({\n                            type: 'loadError',\n                            detail: eventDetail,\n                            error,\n                            tables\n                        });\n                        console.warn(`Unable to fetch data from ${dataUrl}.`); // eslint-disable-line no-console\n                    }) :\n                    data || [])\n                    .then((data) => {\n                    if (data) {\n                        this.initConverters(data, (key) => {\n                            const options = this.options;\n                            const tableOptions = dataTables?.find((dataTable) => dataTable.key === key);\n                            // Takes over the connector default options.\n                            const mergedTableOptions = {\n                                dataTableKey: key,\n                                columnNames: tableOptions?.columnNames ??\n                                    options.columnNames,\n                                firstRowAsNames: tableOptions?.firstRowAsNames ??\n                                    options.firstRowAsNames,\n                                orientation: tableOptions?.orientation ??\n                                    options.orientation,\n                                beforeParse: tableOptions?.beforeParse ??\n                                    options.beforeParse\n                            };\n                            return new JSONConverter(merge(this.options, mergedTableOptions));\n                        }, (converter, data) => {\n                            converter.parse({ data });\n                        });\n                    }\n                    return connector.setModifierOptions(dataModifier, dataTables)\n                        .then(() => data);\n                })\n                    .then((data) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data,\n                        detail: eventDetail,\n                        tables\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        tables\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        JSONConnector.defaultOptions = {\n            data: [],\n            enablePolling: false,\n            dataRefreshRate: 0,\n            firstRowAsNames: true,\n            orientation: 'rows'\n        };\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        class InvertModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(InvertModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(`${i2}`, row);\n                    }\n                    else {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            }\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    const columnNamesColumn = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []), columns = {}, columnNames = [];\n                    for (let i = 0, iEnd = columnNamesColumn.length; i < iEnd; ++i) {\n                        columnNames.push('' + columnNamesColumn[i]);\n                    }\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    const columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[`${i}`] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the invert modifier.\n         */\n        InvertModifier.defaultOptions = {\n            type: 'Invert'\n        };\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         */\n        class RangeModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(RangeModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                let indexes = [];\n                const { additive, ranges, strict } = modifier.options;\n                if (ranges.length) {\n                    const modified = table.modified;\n                    let columns = table.getColumns(), rows = [];\n                    for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            modified.setOriginalRowIndexes(indexes, true);\n                            columns = modified.getColumns();\n                            rows = [];\n                            indexes = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (let j = 0, jEnd = rangeColumn.length, cell, row, originalRowIndex; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                if (additive) {\n                                    row = table.getRow(j);\n                                    originalRowIndex = table.getOriginalRowIndex(j);\n                                }\n                                else {\n                                    row = modified.getRow(j);\n                                    originalRowIndex = modified.getOriginalRowIndex(j);\n                                }\n                                if (row) {\n                                    rows.push(row);\n                                    indexes.push(originalRowIndex);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                    modified.setOriginalRowIndexes(indexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the range modifier.\n         */\n        RangeModifier.defaultOptions = {\n            type: 'Range',\n            ranges: []\n        };\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/CellRenderer.js', [], function () {\n        /* *\n         *\n         *  Cell Renderer abstract class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Renderer class that initialize all options per column.\n         */\n        class CellRenderer {\n            /**\n             * Constructs the CellRenderer instance.\n             *\n             * @param column\n             * The column of the cell.\n             *\n             */\n            constructor(column) {\n                this.column = column;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellRenderer;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/Renderers/TextRenderer.js', [_modules['Grid/Pro/CellRendering/CellRenderer.js'], _modules['Grid/Pro/CellRendering/CellRendererRegistry.js'], _modules['Grid/Core/Table/CellContent/TextContent.js'], _modules['Core/Utilities.js']], function (CellRenderer, CellRendererRegistry, TextContent, U) {\n        /* *\n         *\n         *  Text Cell Renderer class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Renderer for the Text in a column..\n         */\n        class TextRenderer extends CellRenderer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(column) {\n                super(column);\n                this.options = merge(TextRenderer.defaultOptions, this.column.options.cells?.renderer || {});\n                const cellOptions = column.options.cells;\n                this.format =\n                    cellOptions?.format ??\n                        TextContent.defaultFormatsForDataTypes[column.dataType];\n                this.formatter = cellOptions?.formatter;\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            render(cell) {\n                return new TextContent(cell);\n            }\n        }\n        /**\n         * The default edit mode renderer type names for this view renderer.\n         */\n        TextRenderer.defaultEditingRenderer = {\n            string: 'textInput',\n            number: 'textInput',\n            'boolean': 'checkbox',\n            datetime: 'dateInput'\n        };\n        /**\n         * Default options for the text renderer.\n         */\n        TextRenderer.defaultOptions = {\n            type: 'text'\n        };\n        CellRendererRegistry.registerRenderer('text', TextRenderer);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TextRenderer;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/CellContentPro.js', [_modules['Grid/Core/Table/CellContent/CellContent.js']], function (CellContent) {\n        /* *\n         *\n         *  Cell Content Pro abstract class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a cell content in the grid.\n         */\n        class CellContentPro extends CellContent {\n            /**\n             * Creates and renders the cell content.\n             *\n             * @param cell\n             * The cell to which the content belongs.\n             *\n             * @param renderer\n             * Renderer that allows print content (inputs, selects, etc.)\n             */\n            constructor(cell, renderer) {\n                super(cell);\n                this.renderer = renderer;\n            }\n        }\n        /* *\n         *\n         * Default Export\n         *\n         * */\n\n        return CellContentPro;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/ContentTypes/CheckboxContent.js', [_modules['Grid/Pro/CellRendering/CellContentPro.js'], _modules['Grid/Core/Globals.js']], function (CellContentPro, Globals) {\n        /* *\n         *\n         *  Checkbox Cell Content class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a checkbox type of cell content.\n         */\n        class CheckboxContent extends CellContentPro {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, renderer, parentElement) {\n                super(cell, renderer);\n                this.finishAfterChange = false;\n                this.onChange = (e) => {\n                    if (this.changeHandler) {\n                        this.changeHandler(e);\n                    }\n                    else {\n                        void this.cell.setValue(this.value, true);\n                    }\n                };\n                this.onKeyDown = (e) => {\n                    this.keyDownHandler?.(e);\n                };\n                this.onBlur = (e) => {\n                    this.blurHandler?.(e);\n                };\n                this.onCellKeyDown = (e) => {\n                    if (e.key === ' ') {\n                        this.input.click();\n                    }\n                };\n                this.input = this.add(parentElement);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            add(parentElement = this.cell.htmlElement) {\n                const cell = this.cell;\n                this.input = document.createElement('input');\n                this.input.tabIndex = -1;\n                this.input.type = 'checkbox';\n                this.input.name = cell.column.id + '-' + cell.row.id;\n                this.update();\n                parentElement.appendChild(this.input);\n                this.input.classList.add(Globals.classNamePrefix + 'field-auto-width');\n                this.input.addEventListener('change', this.onChange);\n                this.input.addEventListener('keydown', this.onKeyDown);\n                this.input.addEventListener('blur', this.onBlur);\n                this.cell.htmlElement.addEventListener('keydown', this.onCellKeyDown);\n                return this.input;\n            }\n            update() {\n                const cell = this.cell;\n                const input = this.input;\n                const { options } = this.renderer;\n                input.checked = !!cell.value;\n                input.disabled = !!options.disabled;\n            }\n            get rawValue() {\n                return this.input.checked ? 'true' : 'false';\n            }\n            get value() {\n                const val = this.input.checked;\n                switch (this.cell.column.dataType) {\n                    case 'datetime':\n                    case 'number':\n                        return +val;\n                    case 'boolean':\n                        return val;\n                    case 'string':\n                        return '' + val;\n                }\n            }\n            getMainElement() {\n                return this.input;\n            }\n            destroy() {\n                const input = this.input;\n                this.cell.htmlElement.removeEventListener('keydown', this.onCellKeyDown);\n                input.removeEventListener('blur', this.onBlur);\n                input.removeEventListener('keydown', this.onKeyDown);\n                input.removeEventListener('change', this.onChange);\n                input.remove();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CheckboxContent;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/Renderers/CheckboxRenderer.js', [_modules['Grid/Pro/CellRendering/CellRenderer.js'], _modules['Grid/Pro/CellRendering/CellRendererRegistry.js'], _modules['Grid/Pro/CellRendering/ContentTypes/CheckboxContent.js'], _modules['Core/Utilities.js']], function (CellRenderer, CellRendererRegistry, CheckboxContent, U) {\n        /* *\n         *\n         *  Checkbox Cell Renderer class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Renderer for the Checkbox in a column.\n         */\n        class CheckboxRenderer extends CellRenderer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(column, options) {\n                super(column);\n                this.options = merge(CheckboxRenderer.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            render(cell, parentElement) {\n                return new CheckboxContent(cell, this, parentElement);\n            }\n        }\n        /**\n         * The default edit mode renderer type name for this view renderer.\n         */\n        CheckboxRenderer.defaultEditingRenderer = 'checkbox';\n        /**\n         * Default options for the checkbox renderer.\n         */\n        CheckboxRenderer.defaultOptions = {\n            type: 'checkbox'\n        };\n        CellRendererRegistry.registerRenderer('checkbox', CheckboxRenderer);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CheckboxRenderer;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/ContentTypes/SelectContent.js', [_modules['Grid/Pro/CellRendering/CellContentPro.js'], _modules['Core/Renderer/HTML/AST.js']], function (CellContentPro, AST) {\n        /* *\n         *\n         *  Select Cell Content class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a select type of cell content.\n         */\n        class SelectContent extends CellContentPro {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, renderer, parentElement) {\n                super(cell, renderer);\n                this.finishAfterChange = true;\n                /**\n                 * The HTML option elements representing the options in the select input.\n                 */\n                this.optionElements = [];\n                this.onChange = (e) => {\n                    if (this.changeHandler) {\n                        this.changeHandler(e);\n                    }\n                    else {\n                        this.cell.htmlElement.focus();\n                        void this.cell.setValue(this.value, true);\n                    }\n                };\n                this.onKeyDown = (e) => {\n                    e.stopPropagation();\n                    if (this.keyDownHandler) {\n                        this.keyDownHandler?.(e);\n                        return;\n                    }\n                    if (e.key === 'Escape' || e.key === 'Enter') {\n                        this.cell.htmlElement.focus();\n                    }\n                };\n                this.onBlur = (e) => {\n                    this.blurHandler?.(e);\n                };\n                this.onCellKeyDown = (e) => {\n                    if (e.key === ' ') {\n                        this.select.focus();\n                        e.preventDefault();\n                    }\n                };\n                this.select = this.add(parentElement);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            add(parentElement = this.cell.htmlElement) {\n                const cell = this.cell;\n                const select = this.select = document.createElement('select');\n                select.tabIndex = -1;\n                select.name = cell.column.id + '-' + cell.row.id;\n                this.update();\n                parentElement.appendChild(this.select);\n                select.addEventListener('change', this.onChange);\n                select.addEventListener('keydown', this.onKeyDown);\n                select.addEventListener('blur', this.onBlur);\n                this.cell.htmlElement.addEventListener('keydown', this.onCellKeyDown);\n                return select;\n            }\n            update() {\n                const cell = this.cell;\n                const { options } = this.renderer;\n                this.select.disabled = !!options.disabled;\n                // If there will be a need, we can optimize this by not removing all\n                // old options and only updating the ones that need to be updated.\n                this.select.innerHTML = AST.emptyHTML;\n                for (const option of options.options) {\n                    const optionElement = document.createElement('option');\n                    optionElement.value = option.value;\n                    optionElement.textContent = option.label || option.value;\n                    optionElement.disabled = !!option.disabled;\n                    if (cell.value === option.value) {\n                        optionElement.selected = true;\n                    }\n                    this.select.appendChild(optionElement);\n                    this.optionElements.push(optionElement);\n                }\n            }\n            destroy() {\n                const select = this.select;\n                this.cell.htmlElement.removeEventListener('keydown', this.onCellKeyDown);\n                select.removeEventListener('blur', this.onBlur);\n                select.removeEventListener('keydown', this.onKeyDown);\n                select.removeEventListener('change', this.onChange);\n                for (const optionElement of this.optionElements) {\n                    optionElement.remove();\n                }\n                this.optionElements.length = 0;\n                select.remove();\n            }\n            get rawValue() {\n                return this.select.value;\n            }\n            get value() {\n                const val = this.select.value;\n                switch (this.cell.column.dataType) {\n                    case 'datetime':\n                    case 'number':\n                        return +val;\n                    case 'boolean':\n                        return val;\n                    case 'string':\n                        return '' + val;\n                }\n            }\n            getMainElement() {\n                return this.select;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SelectContent;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/Renderers/SelectRenderer.js', [_modules['Grid/Pro/CellRendering/CellRenderer.js'], _modules['Grid/Pro/CellRendering/CellRendererRegistry.js'], _modules['Grid/Pro/CellRendering/ContentTypes/SelectContent.js'], _modules['Core/Utilities.js']], function (CellRenderer, CellRendererRegistry, SelectContent, U) {\n        /* *\n         *\n         *  Select Cell Renderer class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Renderer for the Select in a column..\n         */\n        class SelectRenderer extends CellRenderer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(column, options) {\n                super(column);\n                this.options = merge(SelectRenderer.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            render(cell, parentElement) {\n                return new SelectContent(cell, this, parentElement);\n            }\n        }\n        /**\n         * The default edit mode renderer type name for this view renderer.\n         */\n        SelectRenderer.defaultEditingRenderer = 'select';\n        /**\n         * Default options for the select renderer.\n         */\n        SelectRenderer.defaultOptions = {\n            type: 'select',\n            options: []\n        };\n        CellRendererRegistry.registerRenderer('select', SelectRenderer);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SelectRenderer;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/ContentTypes/TextInputContent.js', [_modules['Grid/Pro/CellRendering/CellContentPro.js'], _modules['Core/Utilities.js']], function (CellContentPro, U) {\n        /* *\n         *\n         *  Text Input Cell Content class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a text input type of cell content.\n         */\n        class TextInputContent extends CellContentPro {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, renderer, parentElement) {\n                super(cell, renderer);\n                this.finishAfterChange = true;\n                this.onChange = (e) => {\n                    if (this.changeHandler) {\n                        this.changeHandler(e);\n                        return;\n                    }\n                    void this.cell.setValue(e.target.value, true);\n                };\n                this.onKeyDown = (e) => {\n                    e.stopPropagation();\n                    if (this.keyDownHandler) {\n                        this.keyDownHandler(e);\n                        return;\n                    }\n                    if (e.key === 'Escape') {\n                        this.input.value = this.convertToInputValue();\n                        this.cell.htmlElement.focus();\n                        return;\n                    }\n                    if (e.key === 'Enter') {\n                        this.cell.htmlElement.focus();\n                    }\n                };\n                this.onBlur = (e) => {\n                    this.blurHandler?.(e);\n                };\n                this.onCellKeyDown = (e) => {\n                    if (e.key === ' ') {\n                        this.input.focus();\n                        e.preventDefault();\n                    }\n                };\n                this.input = this.add(parentElement);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            add(parentElement = this.cell.htmlElement) {\n                const cell = this.cell;\n                const input = this.input = document.createElement('input');\n                input.tabIndex = -1;\n                input.name = cell.column.id + '-' + cell.row.id;\n                this.update();\n                parentElement.appendChild(this.input);\n                input.addEventListener('change', this.onChange);\n                input.addEventListener('keydown', this.onKeyDown);\n                input.addEventListener('blur', this.onBlur);\n                this.cell.htmlElement.addEventListener('keydown', this.onCellKeyDown);\n                return input;\n            }\n            update() {\n                const { options } = this.renderer;\n                this.input.value = this.convertToInputValue();\n                this.input.disabled = !!options.disabled;\n            }\n            get rawValue() {\n                return this.input.value;\n            }\n            get value() {\n                const val = this.input.value;\n                switch (this.cell.column.dataType) {\n                    case 'datetime':\n                    case 'number':\n                        return val === '' ? null : +val;\n                    case 'boolean':\n                        if (val === '') {\n                            return null;\n                        }\n                        if (val === 'false' || +val === 0) {\n                            return false;\n                        }\n                        return true;\n                    case 'string':\n                        return val;\n                }\n            }\n            /**\n             * Converts the cell value to a string for the input.\n             */\n            convertToInputValue() {\n                const val = this.cell.value;\n                return defined(val) ? '' + val : '';\n            }\n            getMainElement() {\n                return this.input;\n            }\n            destroy() {\n                const input = this.input;\n                this.cell.htmlElement.removeEventListener('keydown', this.onCellKeyDown);\n                input.removeEventListener('blur', this.onBlur);\n                input.removeEventListener('keydown', this.onKeyDown);\n                input.removeEventListener('change', this.onChange);\n                input.remove();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TextInputContent;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/Renderers/TextInputRenderer.js', [_modules['Grid/Pro/CellRendering/CellRenderer.js'], _modules['Grid/Pro/CellRendering/CellRendererRegistry.js'], _modules['Grid/Pro/CellRendering/ContentTypes/TextInputContent.js'], _modules['Core/Utilities.js']], function (CellRenderer, CellRendererRegistry, TextInputContent, U) {\n        /* *\n         *\n         *  Text Input Cell Renderer class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Renderer for the Select in a column..\n         */\n        class TextInputRenderer extends CellRenderer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(column, options) {\n                super(column);\n                this.options = merge(TextInputRenderer.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            render(cell, parentElement) {\n                return new TextInputContent(cell, this, parentElement);\n            }\n        }\n        /**\n         * The default edit mode renderer type names for this view renderer.\n         */\n        TextInputRenderer.defaultEditingRenderer = 'textInput';\n        /**\n         * Default options for the text input renderer.\n         */\n        TextInputRenderer.defaultOptions = {\n            type: 'textInput'\n        };\n        CellRendererRegistry.registerRenderer('textInput', TextInputRenderer);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TextInputRenderer;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/ContentTypes/DateInputContent.js', [_modules['Grid/Pro/CellRendering/CellContentPro.js']], function (CellContentPro) {\n        /* *\n         *\n         *  Date Input Cell Content class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a date input type of cell content.\n         */\n        class DateInputContent extends CellContentPro {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, renderer, parentElement) {\n                super(cell, renderer);\n                this.finishAfterChange = false;\n                this.onChange = (e) => {\n                    this.changeHandler?.(e);\n                };\n                this.onKeyDown = (e) => {\n                    e.stopPropagation();\n                    if (this.keyDownHandler) {\n                        this.keyDownHandler(e);\n                        return;\n                    }\n                    if (e.key === 'Escape') {\n                        this.cell.htmlElement.focus();\n                        this.input.value = this.convertToInputValue();\n                        return;\n                    }\n                    if (e.key === 'Enter') {\n                        this.cell.htmlElement.focus();\n                        void this.cell.setValue(this.value, true);\n                    }\n                };\n                this.onBlur = (e) => {\n                    if (this.blurHandler) {\n                        this.blurHandler(e);\n                        return;\n                    }\n                    void this.cell.setValue(this.value, true);\n                };\n                this.onCellKeyDown = (e) => {\n                    if (e.key === ' ') {\n                        this.input.focus();\n                        e.preventDefault();\n                    }\n                };\n                this.input = this.add(parentElement);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            add(parentElement = this.cell.htmlElement) {\n                const cell = this.cell;\n                const input = this.input = document.createElement('input');\n                input.tabIndex = -1;\n                input.type = 'date';\n                input.name = cell.column.id + '-' + cell.row.id;\n                this.update();\n                parentElement.appendChild(input);\n                input.addEventListener('change', this.onChange);\n                input.addEventListener('keydown', this.onKeyDown);\n                input.addEventListener('blur', this.onBlur);\n                this.cell.htmlElement.addEventListener('keydown', this.onCellKeyDown);\n                return this.input;\n            }\n            update() {\n                const input = this.input;\n                const { options } = this.renderer;\n                input.value = this.convertToInputValue();\n                input.disabled = !!options.disabled;\n            }\n            get rawValue() {\n                return this.input.value;\n            }\n            get value() {\n                return new Date(this.input.value).getTime();\n            }\n            getMainElement() {\n                return this.input;\n            }\n            destroy() {\n                const input = this.input;\n                this.cell.htmlElement.removeEventListener('keydown', this.onCellKeyDown);\n                input.removeEventListener('blur', this.onBlur);\n                input.removeEventListener('keydown', this.onKeyDown);\n                input.removeEventListener('change', this.onChange);\n                input.remove();\n            }\n            /**\n             * Converts the cell value to a string for the input.\n             */\n            convertToInputValue() {\n                const time = this.cell.column.viewport.grid.time;\n                return time.dateFormat('%Y-%m-%d', Number(this.cell.value || 0));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DateInputContent;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/Renderers/DateInputRenderer.js', [_modules['Grid/Pro/CellRendering/CellRenderer.js'], _modules['Grid/Pro/CellRendering/CellRendererRegistry.js'], _modules['Grid/Pro/CellRendering/ContentTypes/DateInputContent.js'], _modules['Core/Utilities.js']], function (CellRenderer, CellRendererRegistry, DateInputContent, U) {\n        /* *\n         *\n         *  Date Input Cell Renderer class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Renderer for the Select in a column..\n         */\n        class DateInputRenderer extends CellRenderer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(column, options) {\n                super(column);\n                this.options = merge(DateInputRenderer.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            render(cell, parentElement) {\n                return new DateInputContent(cell, this, parentElement);\n            }\n        }\n        /**\n         * The default edit mode renderer type name for this view renderer.\n         */\n        DateInputRenderer.defaultEditingRenderer = 'dateInput';\n        /**\n         * Default options for the date input renderer.\n         */\n        DateInputRenderer.defaultOptions = {\n            type: 'dateInput'\n        };\n        CellRendererRegistry.registerRenderer('dateInput', DateInputRenderer);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DateInputRenderer;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/ContentTypes/SparklineContent.js', [_modules['Grid/Pro/CellRendering/CellContentPro.js'], _modules['Grid/Core/Globals.js'], _modules['Core/Utilities.js']], function (CellContentPro, Globals, U) {\n        /* *\n         *\n         *  Sparkline Cell Content class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { defined, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Represents a sparkline type of cell content.\n         */\n        class SparklineContent extends CellContentPro {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, renderer, parentElement) {\n                super(cell, renderer);\n                this.onKeyDown = () => {\n                    this.cell.htmlElement.focus();\n                };\n                this.add(parentElement);\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            add(parentElement = this.cell.htmlElement) {\n                const H = SparklineContent.H;\n                if (!H || !defined(this.cell.value)) {\n                    return;\n                }\n                this.chartContainer = document.createElement('div');\n                parentElement.classList.add(Globals.getClassName('noPadding'));\n                parentElement.appendChild(this.chartContainer);\n                this.chart = H.Chart.chart(this.chartContainer, merge(SparklineContent.defaultChartOptions, this.getProcessedOptions()));\n                this.chartContainer.addEventListener('click', this.onKeyDown);\n            }\n            update() {\n                const chartOptions = this.getProcessedOptions();\n                this.chart?.update(chartOptions, true, false, chartOptions.chart?.animation);\n            }\n            destroy() {\n                this.chartContainer?.removeEventListener('keydown', this.onKeyDown);\n                this.chart?.destroy();\n                this.chartContainer?.remove();\n                delete this.chart;\n                delete this.chartContainer;\n                this.cell.htmlElement.classList.remove(Globals.getClassName('noPadding'));\n            }\n            getProcessedOptions() {\n                const renderer = this.renderer;\n                const { chartOptions } = renderer.options;\n                let options;\n                if (typeof chartOptions === 'function') {\n                    options = chartOptions.call(this.cell, this.cell.value);\n                }\n                else {\n                    options = merge(chartOptions) || {};\n                }\n                let trimmedValue = ('' + this.cell.value).trim();\n                if (!trimmedValue.startsWith('[') && !trimmedValue.startsWith('{')) {\n                    trimmedValue = `[${trimmedValue}]`;\n                }\n                if (!options.series) {\n                    options.series = [{\n                            data: JSON.parse(trimmedValue)\n                        }];\n                }\n                return options;\n            }\n        }\n        SparklineContent.defaultChartOptions = {\n            chart: {\n                height: 40,\n                margin: [5, 8, 5, 8],\n                backgroundColor: 'transparent',\n                skipClone: true\n            },\n            accessibility: {\n                enabled: false\n            },\n            tooltip: {\n                enabled: false\n            },\n            title: {\n                text: ''\n            },\n            credits: {\n                enabled: false\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false\n            },\n            legend: {\n                enabled: false\n            },\n            plotOptions: {\n                series: {\n                    borderWidth: 0,\n                    marker: {\n                        enabled: false\n                    },\n                    states: {\n                        hover: {\n                            enabled: false\n                        },\n                        inactive: {\n                            enabled: false\n                        }\n                    },\n                    animation: false,\n                    dataLabels: {\n                        enabled: false\n                    }\n                },\n                pie: {\n                    slicedOffset: 0,\n                    borderRadius: 0\n                }\n            }\n        };\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        (function (SparklineContent) {\n        })(SparklineContent || (SparklineContent = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SparklineContent;\n    });\n    _registerModule(_modules, 'Grid/Pro/CellRendering/Renderers/SparklineRenderer.js', [_modules['Grid/Pro/CellRendering/CellRenderer.js'], _modules['Grid/Pro/CellRendering/CellRendererRegistry.js'], _modules['Grid/Pro/CellRendering/ContentTypes/SparklineContent.js'], _modules['Core/Utilities.js']], function (CellRenderer, CellRendererRegistry, SparklineContent, U) {\n        /* *\n         *\n         *  Sparkline Cell Renderer class\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Renderer for the Text in a column..\n         */\n        class SparklineRenderer extends CellRenderer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(column) {\n                super(column);\n                if (!SparklineContent.H) {\n                    throw new Error('Sparkline Renderer: Highcharts is not loaded. Please ensure ' +\n                        'that Highcharts namespace is registered before the Sparkline' +\n                        ' Renderer is used.');\n                }\n                this.options = merge(SparklineRenderer.defaultOptions, this.column.options.cells?.renderer || {});\n            }\n            /* *\n             *\n             *  Methods\n             *\n             * */\n            render(cell) {\n                return new SparklineContent(cell, this);\n            }\n        }\n        /**\n         * The default edit mode renderer type names for this view renderer.\n         */\n        SparklineRenderer.defaultEditingRenderer = 'textInput';\n        /**\n         * Default options for the sparkline renderer.\n         */\n        SparklineRenderer.defaultOptions = {\n            type: 'sparkline'\n        };\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        (function (SparklineRenderer) {\n            /**\n             * Imports the Highcharts namespace to be used by the Sparkline Renderer.\n             *\n             * @param H\n             * Highcharts namespace.\n             */\n            function useHighcharts(H) {\n                if (H && !SparklineContent.H) {\n                    SparklineContent.H = H;\n                }\n            }\n            SparklineRenderer.useHighcharts = useHighcharts;\n        })(SparklineRenderer || (SparklineRenderer = {}));\n        CellRendererRegistry.registerRenderer('sparkline', SparklineRenderer);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SparklineRenderer;\n    });\n    _registerModule(_modules, 'masters/datagrid.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Templating.js'], _modules['Grid/Core/Table/ColumnDistribution/ColumnDistribution.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataCursor.js'], _modules['Grid/Core/Grid.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataPool.js'], _modules['Data/DataTable.js'], _modules['Grid/Core/Defaults.js'], _modules['Grid/Core/Globals.js'], _modules['Accessibility/HighContrastMode.js'], _modules['Core/Utilities.js'], _modules['Grid/Core/Table/Table.js'], _modules['Grid/Core/Table/Column.js'], _modules['Grid/Core/Table/Header/HeaderCell.js'], _modules['Grid/Core/Table/Body/TableCell.js'], _modules['Grid/Pro/GridEvents.js'], _modules['Grid/Pro/CellEditing/CellEditingComposition.js'], _modules['Grid/Pro/Dash3Compatibility.js'], _modules['Grid/Pro/Credits/CreditsProComposition.js'], _modules['Grid/Pro/ColumnTypes/ValidatorComposition.js'], _modules['Grid/Pro/CellRendering/CellRenderersComposition.js'], _modules['Grid/Pro/CellRendering/CellRendererRegistry.js']], function (AST, Templating, ColumnDistribution, DataConnector, DataConverter, DataCursor, _Grid, DataModifier, DataPool, DataTable, Defaults, Globals, whcm, Utilities, Table, Column, HeaderCell, TableCell, GridEvents, CellEditingComposition, Dash3Compatibility, CreditsProComposition, ValidatorComposition, CellRenderersComposition, CellRendererRegistry) {\n\n        /* *\n         *\n         *  Registers Imports\n         *\n         * */\n        // Connectors\n        // Compositions\n        // Cell Renderers\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.AST = AST;\n        G.classNamePrefix = 'highcharts-datagrid-';\n        G.DataConnector = DataConnector;\n        G.DataCursor = DataCursor;\n        G.DataConverter = DataConverter;\n        G.DataGrid = _Grid;\n        G.dataGrid = _Grid.grid;\n        G.dataGrids = _Grid.grids;\n        G.Grid = _Grid;\n        G.grid = _Grid.grid;\n        G.grids = _Grid.grids;\n        G.DataModifier = DataModifier;\n        G.DataPool = DataPool;\n        G.DataTable = DataTable;\n        G.ColumnDistribution = ColumnDistribution;\n        G.defaultOptions = Defaults.defaultOptions;\n        G.isHighContrastModeActive = whcm.isHighContrastModeActive;\n        G.setOptions = Defaults.setOptions;\n        G.Templating = Templating;\n        G.product = 'Grid Pro';\n        G.merge = Utilities.merge;\n        G.Table = G.Table || Table;\n        G.Column = G.Column || Column;\n        G.HeaderCell = G.HeaderCell || HeaderCell;\n        G.TableCell = G.TableCell || TableCell;\n        GridEvents.compose(G.Column, G.HeaderCell, G.TableCell);\n        CellEditingComposition.compose(G.Table, G.TableCell, G.Column);\n        CreditsProComposition.compose(G.Grid);\n        Dash3Compatibility.compose(G.Table);\n        ValidatorComposition.compose(G.Table);\n        CellRenderersComposition.compose(G.Column);\n        G.CellRendererRegistry = G.CellRendererRegistry || CellRendererRegistry;\n        /* *\n         *\n         *  Classic Export\n         *\n         * */\n        if (!G.win.DataGrid) {\n            G.win.DataGrid = G;\n        }\n        if (!G.win.Grid) {\n            G.win.Grid = G;\n        }\n        if (G.win.Highcharts) {\n            G.CellRendererRegistry.types.sparkline.useHighcharts(G.win.Highcharts);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n    _modules['masters/datagrid.js']._modules = _modules;\n    return _modules['masters/datagrid.js'];\n}));"],"names":["root","factory","module","exports","document","define","amd","DataGrid","error","window","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","dispatchEvent","detail","Globals","SVG_NS","product","version","win","doc","svg","createElementNS","createSVGRect","pageLang","documentElement","closest","lang","userAgent","navigator","isChrome","chrome","isFirefox","indexOf","isMS","test","opera","isSafari","isTouchDevice","isWebKit","deg2rad","Math","PI","marginNames","noop","supportsPassiveEvents","supportsPassive","opts","Object","defineProperty","get","addEventListener","removeEventListener","charts","composed","dateFormats","seriesTypes","symbolSizes","chartCount","H","serialMode","code","stop","chart","params","severity","isCode","isNumber","message","toString","additionalMessages","objectEach","value","key","encodeURI","fireEvent","Error","console","messages","warn","push","pInt","s","mag","parseInt","isString","isArray","str","prototype","call","isObject","strict","isDOMElement","nodeType","isClass","c","constructor","name","n","isNaN","Infinity","defined","attr","elem","keyOrAttribs","ret","isGetter","attrSingle","setAttribute","getAttribute","removeAttribute","splat","extend","a","b","pick","arguments","length","i","arg","css","el","styles","style","getMagnitude","num","pow","floor","log","LN10","correctFloat","prec","parseFloat","toPrecision","easeInOutSine","pos","cos","find","Array","arr","callback","ctx","removeEvent","type","removeOneEvent","removeAllEvents","eventCollection","types","len","nodeName","_val","owner","events","hcEvents","typeEvents","filter","eventArguments","defaultFunction","createEvent","e","initEvent","target","preventDefault","defaultPrevented","object","multilevel","unshift","getPrototypeOf","sort","order","forEach","uniqueKey","hash","random","substring","id","jQuery","highcharts","slice","shift","addEvent","options","Point","series","runTrackerClick","passive","capture","eventObject","arrayMax","data","max","arrayMin","min","clamp","clearTimeout","createElement","tag","attribs","parent","nopad","padding","border","margin","appendChild","crisp","lineWidth","inverted","mod","inverter","round","destroyObjectProperties","except","destructablesOnly","val","destroy","diffObjects","newer","older","keepOlder","collectionsWithUpdate","diff","depth","keeper","newerVal","keys","discardElement","element","parentElement","removeChild","erase","item","splice","extendClass","members","getAlignFactor","align","center","right","middle","bottom","getClosestDistance","arrays","onError","loopLength","distance","allowNegative","xData","getNestedProperty","pathElements","split","pathElement","thisProp","child","replace","getStyle","prop","toInt","offsetWidth","scrollWidth","boundingClientRectWidth","getBoundingClientRect","width","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","insertItem","collection","indexOption","index","isInternal","_i","isFunction","merge","extendOrSource","sources","doCopy","copy","original","normalizeTickInterval","interval","multiples","magnitude","allowDecimals","hasTickAmount","retInterval","normalized","offset","docElem","box","parentNode","top","left","height","pageYOffset","scrollTop","clientTop","pageXOffset","scrollLeft","clientLeft","pad","number","padder","String","join","pushUnique","array","relativeLength","base","replaceNested","text","replacements","previous","replacement","stableSort","sortFunction","sortValue","safeI","syncTimeout","delay","context","setTimeout","timeUnits","millisecond","second","minute","hour","day","week","month","year","ucfirst","toUpperCase","useSerialIds","mode","wrap","method","func","proceed","outerArgs","scope","concat","U","trustedTypes","trustedTypesPolicy","createPolicy","createHTML","emptyHTML","AST","filterUserAttributes","attributes","valid","allowedAttributes","allowedReferences","some","ref","parseStyle","reduce","line","pair","map","trim","g","setElementHTML","html","innerHTML","ast","addToDOM","source","nodes","parseMarkup","recurse","subtree","subParent","node","tagName","textNode","textContent","createTextNode","bypassHTMLFiltering","allowedTags","NS","namespaceURI","children","markup","DOMParser","parseFromString","body","appendChildNodes","addTo","toLowerCase","astNode","parsedAttributes","attrib","childNodes","childNode","alignThresholds","panning","enabled","styledMode","borderRadius","colorCount","allowMutatingData","ignoreHiddenSeries","spacing","resetZoomButton","theme","position","reflow","zooming","singleTouch","resetButton","zIndex","x","y","borderColor","backgroundColor","plotBorderColor","colors","hasOldSafariBug","Intl","DateTimeFormat","formatRange","isDateTimeFormatOptions","main","timezone","variableTimezone","Date","update","dTLCache","timezoneOffset","useUTC","locale","isMonth","isShort","timeZone","dateFormat","toParts","timestamp","weekday","dayOfMonth","hours","minutes","seconds","dateTimeFormat","Number","cacheKey","JSON","stringify","str2dtf","dTL","format","dtf","mapping","L","fractionalSecondDigits","S","M","k","E","A","d","B","m","o","Y","makeTime","date","milliseconds","UTC","getTimezoneOffset","newOffset","parse","hasTimezone","isYYYYMMDD","ts","gmt","colon","timeZoneName","upperCaseFirst","invalidDate","match","localeAwareRegex","exec","time","fullYear","langWeekdays","weekdays","shortWeekdays","months","shortMonths","substr","w","v","weekFrom","I","l","p","P","tzHours","prefix","suffix","resolveDTLFormat","f","from","to","getDateFormat","range","startOfWeek","dateTimeLabelFormats","dateStr","blank","strpos","lastN","TimeBase","getTimeTicks","normalizedInterval","tickPositions","higherRanks","count","unitRange","variableDayLength","weekdayNo","t","info","totalRange","ChartDefaults","Palettes","Time","defaultOptions","symbols","chartTitle","loading","seriesName","numericSymbols","pieSliceName","resetZoom","yAxisTitle","resetZoomTitle","global","buttonTheme","fill","r","stroke","color","cursor","fontSize","fontWeight","states","hover","select","disabled","title","minScale","subtitle","caption","verticalAlign","plotOptions","legend","alignColumns","className","layout","itemMarginBottom","itemMarginTop","labelFormatter","navigation","activeColor","inactiveColor","itemStyle","textDecoration","textOverflow","itemHoverStyle","itemHiddenStyle","shadow","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","opacity","textAlign","tooltip","animation","duration","easing","sqrt","footerFormat","headerShape","hideDelay","shared","snap","headerFormat","pointFormat","borderWidth","stickOnContact","useHTML","credits","href","defaultTime","getOptions","setOptions","D","G","helpers","add","divide","eq","each","ge","gt","condition","le","lt","multiply","ne","subtract","unless","numberFormatCache","isQuotedString","regex","subRegex","matches","floatRegex","decRegex","numberFormatter","numberFormat","bind","resolveProperty","currentMatch","hasSub","mainMatch","subMatch","isBlock","expression","charAt","start","startInner","startingElseSection","elseBody","parts","startChar","char","valueAndFormat","isFloat","segment","decimals","decimalPoint","thousandsSep","lastIndex","fractionDigits","mantissa","exp","origDec","firstDecimals","toExponential","toFixed","minimumFractionDigits","maximumFractionDigits","useGrouping","hasSeparators","nf","NumberFormat","ColumnDistributionStrategy","viewport","columnWidths","loadColumns","columns","iEnd","loadColumn","vp","rowsWidth","getColumnWidth","exportMetadata","importMetadata","metadata","columnIterator","columnId","enabledColumns","grid","savedColumnIds","invalidated","validateOnUpdate","newOptions","rendering","resizing","distribution","getMinWidth","column","tableColumnEl","cells","htmlElement","headerColumnEl","header","getElPaddings","result","MIN_COLUMN_WIDTH","DistributionStrategy","columnWidthUnits","rawWidth","unitCode","widthValue","minWidth","getWidthFromRatio","freeWidth","tbodyElement","clientWidth","calculateOccupiedWidth","resize","resizer","draggedColumn","colW","columnStartWidth","nextCol","newW","nextColumnStartWidth","occupiedWidth","columnIds","unit","colId","columnDefaults","col","classNamePrefix","rawClassNames","container","tableElement","captionElement","descriptionElement","theadElement","rowElement","rowEven","rowOdd","hoveredRow","columnElement","hoveredCell","hoveredColumn","syncedRow","syncedCell","syncedColumn","editedCell","mockedRow","rowsContentNowrap","virtualization","scrollableContent","headerCell","headerCellContent","headerRow","noData","noPadding","columnFirst","columnSortable","columnSortableIcon","columnSortedAsc","columnSortedDesc","resizableContent","resizerHandles","resizedColumn","creditsContainer","creditsText","creditsPro","visuallyHidden","lastHeaderCellInRow","loadingWrapper","loadingSpinner","loadingMessage","getClassName","classNameKey","GridUtils","makeHTMLElement","paramsKeys","assign","isHTML","makeDiv","sanitizeText","setHTMLContent","content","formattedNodes","innerText","getInitialColumnWidth","mock","classList","remove","allPreviousWidths","nextColumn","leftColW","rightColW","newLeftW","newRightW","getRatioFromWidth","getInitialFullDistWidth","columnsCount","MixedDistributionStrategy","FixedDistributionStrategy","FullDistributionStrategy","ColumnDistribution","AbstractStrategy","mixed","fixed","full","initStrategy","assumeDistributionType","colRendering","DataModifier","benchmark","dataTable","results","modifier","execute","modifyTable","emit","iterations","on","times","startTime","endTime","performance","now","modify","table","eventDetail","Promise","resolve","reject","modified","clone","modifyCell","columnName","rowIndex","cellValue","modifyColumns","modifyRows","rows","registerType","DataModifierClass","ColumnUtils","setLength","asSubarray","deleteCount","removedAsSubarray","items","removed","Constructor","set","subarray","autoId","rowCount","versionTag","applyRowCount","deleteRows","getColumn","asReference","getColumns","columnNames","getRow","setColumn","setColumns","silent","setRow","row","insert","indexRowCount","addColumns","CU","DataTableCore","DataTable","isNull","NULL","skipColumns","tableOptions","tableClone","originalRowIndexes","localRowIndexes","deleteColumns","deletedColumns","modifiedColumns","deleteRowIndexReferences","deletedRows","modifiedRows","deletedCells","j","jEnd","includes","getCell","getCellAsBoolean","getCellAsNumber","useNaN","getCellAsString","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","asBasicColumns","tableColumns","getLocalRowIndex","originalRowIndex","getModifier","getOriginalRowIndex","getRows","getRowCount","getRowIndexBy","rowIndexOffset","getRowObject","getRowObjects","i2","getVersionTag","hasColumns","hasRowWith","isFinite","renameColumn","newColumnName","setCell","typeAsOriginal","tableModifier","tableColumn","ArrayConstructor","setModifier","promise","then","setOriginalRowIndexes","omitLocalRowIndexes","modifiedIndexes","originalIndex","setRows","DataConnector","dataTables","loaded","dataTableIndex","polling","_polling","getTable","describeColumn","columnMeta","connector","describeColumns","pop","getColumnOrder","usePresentationState","names","values","getSortedColumns","usePresentationOrder","load","save","setColumnOrder","setModifierOptions","modifierOptions","tablesOptions","entries","mergedModifierOptions","dataModifier","ModifierClass","startPolling","refreshTime","tables","pollingController","AbortController","stopPolling","abort","whatIs","initConverters","createConverter","parseData","converter","DataConnectorClass","DataConverter","parser","NaN","alternative","getFullYear","mergedOptions","regExpPoint","decimalRegExp","RegExp","asBoolean","asNumber","asDate","parseDate","asString","asGuessedType","typeMap","guessType","decimalRegex","getDate","deduceDateFormat","limit","stable","thing","guessedFormat","madeDeduction","export","headers","trimedValue","innerTrimedValue","floatValue","dateFormatProp","getTime","inside","alternativeFormat","startColumn","endColumn","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","DataConverterClass","getTableFromColumns","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","listeners","buildEmittingTag","firstRow","lastRow","emitCursor","event","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","needle","columnNeedle","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","isHighContrastModeActive","testDiv","backgroundImage","bi","currentStyle","matchMedia","setHighContrastTheme","highContrastModeActive","accessibility","highContrastTheme","hasCustomColors","plotOpts","fillColor","colorIndex","seriesOptions","points","redraw","whcm","prepend","announcerElement","addSortableColumnHint","sortableLang","sorting","sortable","addHeaderCellDescription","thElement","description","announce","msg","assertive","announcerTimeout","userSortedColumn","announcementsLang","announcements","ascending","descending","none","setColumnSortState","addHighContrast","highContrastMode","contentWrapper","setRowIndex","idx","setA11yOptions","tableEl","Utils","Defaults","bufferSize","minVisibleRows","strictHeights","virtualizationThreshold","cell","CellContent","TextContent","cellsDefaults","formatter","cellContent","defaultFormatsForDataTypes","dataType","isDefaultFormat","isDefaultFormatter","string","datetime","Templating","loadData","assumeDataType","columnOptionsMap","createCellContent","registerCell","hoveredColumnId","unregisterCell","getWidth","columnDistribution","setHoveredState","hovered","setSyncedState","synced","template","render","createCell","rendered","cellEvents","init","initEvents","onBlur","onFocus","onClick","onKeyDown","focusAnchor","rowsVirtualizer","focusAnchorCell","focusCursor","dir","changeFocusKeys","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","stopPropagation","nextVerticalDir","localRowIndex","focus","nextRow","elementStyle","maxWidth","setCustomClassName","customClassName","newClassName","headerCellElement","toggle","sortingController","querying","validator","errorCell","currentOrder","currentSorting","setOrder","consequents","asc","desc","addHeaderElementAttributes","a11y","sortingOptions","sortedAscClassName","sortedDescClassName","setSorting","loadPresentationData","Cell","ColumnSorting","Utilities","columnsTree","getColumnIds","headerCellOptions","isSortableData","headerContent","columnsResizer","renderColumnDragHandles","initColumnSorting","th","isResizing","originalEvent","isLastColumn","lastViewportColumn","Row","HeaderCell","level","setRowAttributes","renderMultipleLevel","columnsOnLevel","getColumnsAtLevel","columnOnLevel","colIsString","colSpan","dataColumn","levels","lastCell","targetLevel","currentLevel","HeaderRow","getRowLevels","bordersWidth","lastCellEl","maxDepth","scrollHorizontally","transform","setValue","onDblClick","onMouseOut","onMouseOver","onMouseDown","hoverRow","hoverColumn","updateTable","focusedRowId","originalDataTable","rowTableIndex","willNotModify","newRowIndex","TableCell","translateY","hoveredRowIndex","syncedRowIndex","setTranslateY","getDefaultTopOffset","defaultRowHeight","TableRow","rowCursor","preventScroll","rowSettings","strictRowHeights","buffer","getDefaultRowHeight","initialRender","renderRows","adjustRowHeights","rerender","oldScrollTop","tbody","oldScrollLeft","scroll","rowHeight","lastScrollTop","adjustBottomRowHeights","rowsLn","rowTop","rowBottom","newHeight","isVirtualization","rowsPerPage","ceil","clientHeight","last","alwaysLastRow","tempRows","newRow","insertBefore","lastChild","columnIndex","firstVisibleRow","defaultH","translateBuffer","cellHeight","preLastRow","reflowRows","mockRow","handles","onDocumentMouseMove","draggedResizeHandle","pageX","dragStartX","onDocumentMouseUp","requestAnimationFrame","handle","addHandleListeners","onHandleMouseDown","removeEventListeners","Column","TableHeader","RowsVirtualizer","ColumnsResizer","onTBodyFocus","onResize","onScroll","virtualRows","presentationTable","dgOptions","resizeObserver","ResizeObserver","observe","setTbodyMinHeight","minHeight","updateVirtualization","threshold","scrollToRow","rowClass","firstRowTop","querySelectorAll","ratio","disconnect","getStateMeta","applyStateMeta","meta","colDistMeta","ChainModifier","chain","optionsChain","clear","modifiers","reverse","SortModifier","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","rowReference","originalIndexes","shouldBeUpdated","createModifier","getSortingOptions","foundColumnId","columnIDs","foundOrder","columnOptions","loadOptions","stateFromOptions","initialSorting","SortingController","force","modifyData","chainModifier","dataTableCopy","Accessibility","Table","QueryingController","Grid","renderTo","async","afterLoadCallback","userOptions","initialContainerHeight","loadUserOptions","initContainers","initAccessibility","loadDataTable","initVirtualization","renderViewport","grids","getElementById","oneToOne","loadColumnOptionsOneToOne","loadColumnOptions","columnOptionsArray","columnOptionsObj","newColumnOptions","overwrite","indexInPrevOptions","findIndex","prev","prevOptions","prevColumnOptions","resultOptions","newDataTable","updateColumn","firstRowIndex","syncRow","syncColumn","syncedColumnId","renderCaption","captionOptions","captionText","renderDescription","descriptionOptions","descriptionText","resetContentWrapper","viewportMeta","getEnabledColumnIDs","renderTable","renderNoData","headerColumns","columnsIncluded","included","onlyEnabledColumns","dgIndex","dg","showLoading","hideLoading","getData","json","getJSON","onlyUserOptions","getOptionsJSON","_a","_b","connectors","DataPoolDefaults","DataPool","waiting","getConnector","connectorId","waitingList","connectorOptions","getConnectorOptions","loadConnector","getConnectorIds","connectorIds","getConnectorTable","isNewConnector","ConnectorClass","cancelPendingRequests","connectorKey","setConnectorOptions","instances","propagate","compose","ColumnClass","HeaderCellClass","TableCellClass","cellEvent","columnEvent","headerEvent","CellEditing","onInputBlur","stopEditing","editModeContent","getMainElement","onInputChange","finishAfterChange","onInputKeyDown","startEditing","submit","emContent","newValue","validationErrors","validate","initErrorBox","hide","isValueChanged","editModeRenderer","containerElement","classNames","cellEditingContainer","blurHandler","changeHandler","keyDownHandler","CellRendererRegistry","registerRenderer","CellRendererClass","GU","CellEditingComposition","cellEditing","editable","started","edited","cancelled","notValid","initTable","afterColumnInit","editMode","createEditModeRenderer","editModeOptions","editModeRendererTypeName","renderer","staticRendererTypeName","defRenderer","staticRendererType","defaultEditingRenderer","onCellKeyDown","onCellDblClick","addEditableCellA11yHint","a11yEditableHint","isConnected","editableLang","announceA11yUserEditedCell","msgType","TableClass","afterEdit","configurable","enumerable","Credits","textElement","renderAnchor","anchorElement","getHeight","setContent","appendToContainer","CreditsPro","CreditsProComposition","initCredits","GridClass","Validator","notifContainer","errors","rules","validationRules","isArrayString","rule","Set","predefined","predefinedRules","ruleDef","err","validateFn","rulesRegistry","notification","show","editedCellError","notifError","notifAnimation","hideErrorBox","tableTop","offsetTop","tableHeight","errorCellTop","notEmpty","rawValue","ValidatorComposition","initValidatorComposition","CellRenderersComposition","rendererType","Renderer","cellRenderer","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","csvRows","rowArray","columnDataType","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","token","actualColumn","read","pushType","initialValue","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","CSVConnector","enablePolling","dataRefreshRate","csvURL","fetch","signal","response","mergedTableOptions","dataTableKey","GoogleSheetsConverter","parseOptions","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","URL","canParse","status","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","pathname","searchParams","HTMLTableConverter","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","tableCaption","classes","attrs","topheaders","subheaders","useRowspanHeaders","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","HTMLElement","getElementsByTagName","rowsCount","itemsLength","columnsInRow","columnsInRowLength","relativeColumnIndex","HTMLTableConnector","tableID","JSONConverter","orientation","arrayWithPath","acc","JSONConnector","dataUrl","InvertModifier","modifiedRowIndex","modifiedColumnNames","reset","j2","columnNamesColumn","RangeModifier","indexes","additive","ranges","rangeColumn","minValue","maxValue","CellRenderer","TextRenderer","cellOptions","CellContentPro","onChange","input","click","tabIndex","checked","CheckboxContent","CheckboxRenderer","optionElements","option","optionElement","label","selected","SelectContent","SelectRenderer","convertToInputValue","TextInputContent","TextInputRenderer","DateInputContent","DateInputRenderer","SparklineContent","chartContainer","Chart","defaultChartOptions","getProcessedOptions","chartOptions","trimmedValue","startsWith","skipClone","xAxis","visible","yAxis","marker","inactive","dataLabels","pie","slicedOffset","SparklineRenderer","useHighcharts","_Grid","GridEvents","Dash3Compatibility","dataGrid","dataGrids","Highcharts","sparkline"],"mappings":"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AElC,CACAM,EAAMrT,IAAI,CAACuT,EACf,EAEA,MADA,EAAE,CAAC7N,OAAO,CAACjF,IAAI,CAACrE,EAAI+W,IAAI,CAACO,UAAU,CAAE,AAACC,GAAcP,EAAiBO,EAAW1B,IACzEA,CACX,CACJ,CA2QA,OAtPArB,EAAII,iBAAiB,CAAG,CACpB,MACA,gBACA,mBACA,gBACA,gBACA,cACA,aACA,kBACA,YACA,eACA,gBACA,uBACA,gBACA,QACA,YACA,QACA,UACA,KACA,KACA,IACA,WACA,KACA,KACA,OACA,cACA,cACA,gBACA,SACA,OACA,KACA,KACA,MACA,eACA,cACA,SACA,UACA,WACA,SACA,UACA,cACA,eACA,eACA,IACA,SACA,OACA,OACA,SACA,OACA,UACA,QACA,QACA,MACA,cACA,eACA,iBACA,eACA,SACA,QACA,UACA,WACA,cACA,SACA,aACA,cACA,aACA,aACA,QACA,OACA,SACA,QACA,IACA,KACA,KACA,aACA,IACA,KACA,KACA,SACH,CAgBDJ,EAAIK,iBAAiB,CAAG,CACpB,WACA,UACA,UACA,IACA,MACA,KACA,IACH,CAeDL,EAAIgC,WAAW,CAAG,CACd,QACA,IACA,OACA,IACA,KACA,SACA,UACA,SACA,WACA,OACA,KACA,OACA,MACA,KACA,KACA,KACA,sBACA,cACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,cACA,eACA,WACA,SACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,KACA,iBACA,SACA,KACA,IACA,OACA,UACA,MACA,OACA,QACA,OACA,OACA,SACA,QACA,MACA,MACA,MACA,QACA,QACA,KACA,OACA,WACA,KACA,QACA,QACA,KACA,QACA,IACA,KACH,CACDhC,EAAID,SAAS,CAAGA,EA4BhBC,EAAI+B,mBAAmB,CAAG,CAAA,EA8BnB/B,CACX,GACAvV,EAAgBD,EAAU,8BAA+B,EAAE,CAAE,WAwxCzD,MApwCsB,CA0ElBwY,gBAAiB,CAAA,EA6VjBC,QAAS,CAQLC,QAAS,CAAA,E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"}