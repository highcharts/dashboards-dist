{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards v1.3.1 (2024-02-14)\n *\n * (c) 2009-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/datagrid', ['dashboards'], function (Dashboards) {\n            factory(Dashboards);\n            factory.Dashboards = Dashboards;\n            return factory;\n        });\n    } else {\n        factory(typeof Dashboards !== 'undefined' ? Dashboards : undefined);\n    }\n}(function (Dashboards) {\n    'use strict';\n    var _modules = Dashboards ? Dashboards._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'DataGrid/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Global DataGrid namespace.\n         *\n         * @namespace DataGrid\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.classNamePrefix = 'highcharts-datagrid-';\n            Globals.classNames = {\n                gridContainer: Globals.classNamePrefix + 'container',\n                outerContainer: Globals.classNamePrefix + 'outer-container',\n                scrollContainer: Globals.classNamePrefix + 'scroll-container',\n                innerContainer: Globals.classNamePrefix + 'inner-container',\n                cell: Globals.classNamePrefix + 'cell',\n                cellInput: Globals.classNamePrefix + 'cell-input',\n                row: Globals.classNamePrefix + 'row',\n                columnHeader: Globals.classNamePrefix + 'column-header'\n            };\n            Globals.win = window;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Globals;\n    });\n    _registerModule(_modules, 'DataGrid/DataGridUtils.js', [], function () {\n        /* *\n         *\n         *  Data Grid utilities\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Øystein Moseng\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        const DataGridUtils = {\n            dataTableCellToString(cell) {\n                return typeof cell === 'string' ||\n                    typeof cell === 'number' ||\n                    typeof cell === 'boolean' ?\n                    '' + cell :\n                    '';\n            },\n            emptyHTMLElement(element) {\n                while (element.firstChild) {\n                    element.removeChild(element.firstChild);\n                }\n            },\n            makeDiv: (className, id) => {\n                const div = document.createElement('div');\n                div.className = className;\n                if (id) {\n                    div.id = id;\n                }\n                return div;\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridUtils;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * General options for the chart.\n         *\n         * @optionparent chart\n         */\n        const ChartDefaults = {\n            /**\n             * Default `mapData` for all series, in terms of a GeoJSON or TopoJSON\n             * object. If set to a string, it functions as an index into the\n             * `Highcharts.maps` array.\n             *\n             * For picking out individual shapes and geometries to use for each series\n             * of the map, see [series.mapData](#series.map.mapData).\n             *\n             * @sample    maps/demo/geojson\n             *            Loading GeoJSON data\n             * @sample    maps/chart/topojson\n             *            Loading TopoJSON data\n             *\n             * @type      {string|Array<*>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.map\n             */\n            /**\n             * Set lat/lon transformation definitions for the chart. If not defined,\n             * these are extracted from the map data.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.mapTransforms\n             */\n            /**\n             * When using multiple axes, the ticks of two or more opposite axes\n             * will automatically be aligned by adding ticks to the axis or axes\n             * with the least ticks, as if `tickAmount` were specified.\n             *\n             * This can be prevented by setting `alignTicks` to false. If the grid\n             * lines look messy, it's a good idea to hide them for the secondary\n             * axis by setting `gridLineWidth` to 0.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false,\n             * then the `alignTicks ` will be disabled for the axis.\n             *\n             * Disabled for logarithmic axes.\n             *\n             * @sample {highcharts} highcharts/chart/alignticks-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/alignticks-false/\n             *         False\n             * @sample {highstock} stock/chart/alignticks-true/\n             *         True by default\n             * @sample {highstock} stock/chart/alignticks-false/\n             *         False\n             *\n             * @type      {boolean}\n             * @default   true\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignTicks\n             */\n            /**\n             * When using multiple axes, align the thresholds. When this is true, other\n             * ticks will also be aligned.\n             *\n             * Note that for line series and some other series types, the `threshold`\n             * option is set to `null` by default. This will in turn cause their y-axis\n             * to not have a threshold. In order to avoid that, set the series\n             * `threshold` to 0 or another number.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false, or\n             * if the axis is logarithmic, the threshold will not be aligned.\n             *\n             * @sample {highcharts} highcharts/chart/alignthresholds/ Set to true\n             *\n             * @since 10.0.0\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignThresholds\n             */\n            alignThresholds: false,\n            /**\n             * Set the overall animation for all chart updating. Animation can be\n             * disabled throughout the chart by setting it to false here. It can\n             * be overridden for each individual API method as a function parameter.\n             * The only animation not affected by this option is the initial series\n             * animation, see [plotOptions.series.animation](\n             * #plotOptions.series.animation).\n             *\n             * The animation can either be set as a boolean or a configuration\n             * object. If `true`, it will use the 'swing' jQuery easing and a\n             * duration of 500 ms. If used as a configuration object, the following\n             * properties are supported:\n             *\n             * - `defer`: The animation delay time in milliseconds.\n             *\n             * - `duration`: The duration of the animation in milliseconds.\n             *\n             * - `easing`: A string reference to an easing function set on the\n             *   `Math` object. See\n             *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n             *\n             * When zooming on a series with less than 100 points, the chart redraw\n             * will be done with animation, but in case of more data points, it is\n             * necessary to set this option to ensure animation on zoom.\n             *\n             * @sample {highcharts} highcharts/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highcharts} highcharts/chart/animation-duration/\n             *         With a longer duration\n             * @sample {highcharts} highcharts/chart/animation-easing/\n             *         With a jQuery UI easing\n             * @sample {highmaps} maps/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highmaps} maps/chart/animation-duration/\n             *         With a longer duration\n             *\n             * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @default   true\n             * @apioption chart.animation\n             */\n            /**\n             * A CSS class name to apply to the charts container `div`, allowing\n             * unique CSS styling for each chart.\n             *\n             * @type      {string}\n             * @apioption chart.className\n             */\n            /**\n             * Event listeners for the chart.\n             *\n             * @apioption chart.events\n             */\n            /**\n             * Fires when a series is added to the chart after load time, using the\n             * `addSeries` method. One parameter, `event`, is passed to the\n             * function, containing common event information. Through\n             * `event.options` you can access the series options that were passed to\n             * the `addSeries` method. Returning false prevents the series from\n             * being added.\n             *\n             * @sample {highcharts} highcharts/chart/events-addseries/\n             *         Alert on add series\n             * @sample {highstock} stock/chart/events-addseries/\n             *         Alert on add series\n             *\n             * @type      {Highcharts.ChartAddSeriesCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.addSeries\n             */\n            /**\n             * Fires when clicking on the plot background. One parameter, `event`,\n             * is passed to the function, containing common event information.\n             *\n             * Information on the clicked spot can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' value at the clicked spot. The primary axes\n             * are `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * click: function(e) {\n             *     console.log(\n             *         Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n             *         e.yAxis[0].value\n             *     )\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highcharts} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highstock} stock/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highstock} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highmaps} maps/chart/events-click/\n             *         Record coordinates on click\n             * @sample {highmaps} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             *\n             * @type      {Highcharts.ChartClickCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.click\n             */\n            /**\n             * Fires when the chart is finished loading. Since v4.2.2, it also waits\n             * for images to be loaded, for example from point markers. One\n             * parameter, `event`, is passed to the function, containing common\n             * event information.\n             *\n             * There is also a second parameter to the chart constructor where a\n             * callback function can be passed to be executed on chart.load.\n             *\n             * @sample {highcharts} highcharts/chart/events-load/\n             *         Alert on chart load\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-load/\n             *         Alert on chart load\n             * @sample {highmaps} maps/chart/events-load/\n             *         Add series on chart load\n             *\n             * @type      {Highcharts.ChartLoadCallbackFunction}\n             * @context   Highcharts.Chart\n             * @apioption chart.events.load\n             */\n            /**\n             * Fires when the chart is redrawn, either after a call to\n             * `chart.redraw()` or after an axis, series or point is modified with\n             * the `redraw` option set to `true`. One parameter, `event`, is passed\n             * to the function, containing common event information.\n             *\n             * @sample {highcharts} highcharts/chart/events-redraw/\n             *         Alert on chart redraw\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-redraw/\n             *         Alert on chart redraw when adding a series or moving the\n             *         zoomed range\n             * @sample {highmaps} maps/chart/events-redraw/\n             *         Set subtitle on chart redraw\n             *\n             * @type      {Highcharts.ChartRedrawCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.redraw\n             */\n            /**\n             * Fires after initial load of the chart (directly after the `load`\n             * event), and after each redraw (directly after the `redraw` event).\n             *\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             *\n             * @type      {Highcharts.ChartRenderCallbackFunction}\n             * @since     5.0.7\n             * @context   Highcharts.Chart\n             * @apioption chart.events.render\n             */\n            /**\n             * Fires when an area of the chart has been selected. Selection is\n             * enabled by setting the chart's zoomType. One parameter, `event`, is\n             * passed to the function, containing common event information. The\n             * default action for the selection event is to zoom the chart to the\n             * selected area. It can be prevented by calling\n             * `event.preventDefault()` or return false.\n             *\n             * Information on the selected area can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' min and max values. The primary axes are\n             * `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * selection: function(event) {\n             *     // log the min and max of the primary, datetime x-axis\n             *     console.log(\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].min\n             *         ),\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].max\n             *         )\n             *     );\n             *     // log the min and max of the y axis\n             *     console.log(event.yAxis[0].min, event.yAxis[0].max);\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highcharts} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample {highstock} stock/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highstock} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             *         (Highcharts)\n             *\n             * @type      {Highcharts.ChartSelectionCallbackFunction}\n             * @apioption chart.events.selection\n             */\n            /**\n             * The margin between the outer edge of the chart and the plot area.\n             * The numbers in the array designate top, right, bottom and left\n             * respectively. Use the options `marginTop`, `marginRight`,\n             * `marginBottom` and `marginLeft` for shorthand setting of one option.\n             *\n             * By default there is no margin. The actual space is dynamically\n             * calculated from the offset of axis labels, axis title, title,\n             * subtitle and legend in addition to the `spacingTop`, `spacingRight`,\n             * `spacingBottom` and `spacingLeft` options.\n             *\n             * @sample {highcharts} highcharts/chart/margins-zero/\n             *         Zero margins\n             * @sample {highstock} stock/chart/margin-zero/\n             *         Zero margins\n             *\n             * @type      {number|Array<number>}\n             * @apioption chart.margin\n             */\n            /**\n             * The margin between the bottom outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingBottom`.\n             *\n             * @sample {highcharts} highcharts/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highstock} stock/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginBottom\n             */\n            /**\n             * The margin between the left outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingLeft`.\n             *\n             * @sample {highcharts} highcharts/chart/marginleft/\n             *         150px left margin\n             * @sample {highstock} stock/chart/marginleft/\n             *         150px left margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginLeft\n             */\n            /**\n             * The margin between the right outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingRight`.\n             *\n             * @sample {highcharts} highcharts/chart/marginright/\n             *         100px right margin\n             * @sample {highstock} stock/chart/marginright/\n             *         100px right margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginRight\n             */\n            /**\n             * The margin between the top outer edge of the chart and the plot area.\n             * Use this to set a fixed pixel value for the margin as opposed to\n             * the default dynamic margin. See also `spacingTop`.\n             *\n             * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n             * @sample {highstock} stock/chart/margintop/\n             *         100px top margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginTop\n             */\n            /**\n             * Callback function to override the default function that formats all\n             * the numbers in the chart. Returns a string with the formatted number.\n             *\n             * @sample highcharts/members/highcharts-numberformat\n             *      Arabic digits in Highcharts\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             * @since 8.0.0\n             * @apioption chart.numberFormatter\n             */\n            /**\n             * When a chart with an x and a y-axis is rendered, we first pre-render the\n             * labels of both in order to measure them. Then, if either of the axis\n             * labels take up so much space that it significantly affects the length of\n             * the other axis, we repeat the process.\n             *\n             * By default we stop at two axis layout runs, but it may be that the second\n             * run also alter the space required by either axis, for example if it\n             * causes the labels to rotate. In this situation, a subsequent redraw of\n             * the chart may cause the tick and label placement to change for apparently\n             * no reason.\n             *\n             * Use the `axisLayoutRuns` option to set the maximum allowed number of\n             * repetitions. But keep in mind that the default value of 2 is set because\n             * every run costs performance time.\n             *\n             * **Note:** Changing that option to higher than the default might decrease\n             * performance significantly, especially with bigger sets of data.\n             *\n             * @type      {number}\n             * @default   2\n             * @since     @next\n             * @apioption chart.axisLayoutRuns\n             */\n            /**\n             * Allows setting a key to switch between zooming and panning. Can be\n             * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n             * key on Windows) or `shift`. The keys are mapped directly to the key\n             * properties of the click event argument (`event.altKey`,\n             * `event.ctrlKey`, `event.metaKey` and `event.shiftKey`).\n             *\n             * @type       {string}\n             * @since      4.0.3\n             * @product    highcharts gantt\n             * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n             * @apioption  chart.panKey\n             */\n            /**\n             * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n             * to combine zooming and panning.\n             *\n             * On touch devices, when the [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) option is `true` (default), panning\n             * requires two fingers. To allow panning with one finger, set\n             * `followTouchMove` to `false`.\n             *\n             * @sample  {highcharts} highcharts/chart/pankey/ Zooming and panning\n             * @sample  {highstock} stock/chart/panning/ Zooming and xy panning\n             */\n            panning: {\n                /**\n                 * Enable or disable chart panning.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock|highmaps} true\n                 */\n                enabled: false,\n                /**\n                 * Decides in what dimensions the user can pan the chart. Can be\n                 * one of `x`, `y`, or `xy`.\n                 *\n                 * When this option is set to `y` or `xy`, [yAxis.startOnTick](#yAxis.startOnTick)\n                 * and [yAxis.endOnTick](#yAxis.endOnTick) are overwritten to `false`.\n                 *\n                 * @sample {highcharts} highcharts/chart/panning-type\n                 *         Zooming and xy panning\n                 *\n                 * @declare    Highcharts.OptionsChartPanningTypeValue\n                 * @type       {string}\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @default    {highcharts|highstock} x\n                 * @product    highcharts highstock gantt\n                 */\n                type: 'x'\n            },\n            /**\n             * Equivalent to [zoomType](#chart.zoomType), but for multitouch\n             * gestures only. By default, the `pinchType` is the same as the\n             * `zoomType` setting. However, pinching can be enabled separately in\n             * some cases, for example in stock charts where a mouse drag pans the\n             * chart, while pinching is enabled. When [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) is true, pinchType only applies to\n             * two-finger touches.\n             *\n             * @type       {string}\n             * @default    {highcharts} undefined\n             * @default    {highstock} undefined\n             * @since      3.0\n             * @product    highcharts highstock gantt\n             * @deprecated\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @apioption  chart.pinchType\n             */\n            /**\n             * Whether to apply styled mode. When in styled mode, no presentational\n             * attributes or CSS are applied to the chart SVG. Instead, CSS rules\n             * are required to style the chart. The default style sheet is\n             * available from `https://code.highcharts.com/css/highcharts.css`.\n             *\n             * [Read more in the docs](https://www.highcharts.com/docs/chart-design-and-style/style-by-css)\n             * on what classes and variables are available.\n             *\n             * @sample highcharts/css/colors\n             *         Color theming with CSS\n             * @sample highcharts/css/prefers-color-scheme\n             *         Dynamic theme based on system settings\n             * @type       {boolean}\n             * @default    false\n             * @since      7.0\n             * @apioption  chart.styledMode\n             */\n            styledMode: false,\n            /**\n             * The corner radius of the outer chart border.\n             *\n             * @sample {highcharts} highcharts/chart/borderradius/\n             *         20px radius\n             * @sample {highstock} stock/chart/border/\n             *         10px radius\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             */\n            borderRadius: 0,\n            /**\n             * In styled mode, this sets how many colors the class names\n             * should rotate between. With ten colors, series (or points) are\n             * given class names like `highcharts-color-0`, `highcharts-color-1`\n             * [...] `highcharts-color-9`. The equivalent in non-styled mode\n             * is to set colors using the [colors](#colors) setting.\n             *\n             * @since      5.0.0\n             */\n            colorCount: 10,\n            /**\n             * By default, (because of memory and performance reasons) the chart does\n             * not copy the data but keeps it as a reference. In some cases, this might\n             * result in mutating the original data source. In order to prevent that,\n             * set that property to false. Please note that changing that might decrease\n             * performance, especially with bigger sets of data.\n             *\n             * @type       {boolean}\n             * @since 10.1.0\n             */\n            allowMutatingData: true,\n            /**\n             * If true, the axes will scale to the remaining visible series once\n             * one series is hidden. If false, hiding and showing a series will\n             * not affect the axes or the other series. For stacks, once one series\n             * within the stack is hidden, the rest of the stack will close in\n             * around it even if the axis is not affected.\n             *\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n             *         False\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n             *         True with stack\n             * @sample {highstock} stock/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highstock} stock/chart/ignorehiddenseries-false/\n             *         False\n             *\n             * @since   1.2.0\n             * @product highcharts highstock gantt\n             */\n            ignoreHiddenSeries: true,\n            /**\n             * Whether to invert the axes so that the x axis is vertical and y axis\n             * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n             * by default.\n             *\n             * @productdesc {highcharts}\n             * If a bar series is present in the chart, it will be inverted\n             * automatically. Inverting the chart doesn't have an effect if there\n             * are no cartesian series in the chart.\n             *\n             * @sample {highcharts} highcharts/chart/inverted/\n             *         Inverted line\n             * @sample {highstock} stock/navigator/inverted/\n             *         Inverted stock chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @product   highcharts highstock gantt\n             * @apioption chart.inverted\n             */\n            /**\n             * The distance between the outer edge of the chart and the content,\n             * like title or legend, or axis title and labels if present. The\n             * numbers in the array designate top, right, bottom and left\n             * respectively. Use the options spacingTop, spacingRight, spacingBottom\n             * and spacingLeft options for shorthand setting of one option.\n             *\n             * @type    {Array<number>}\n             * @see     [chart.margin](#chart.margin)\n             * @default [10, 10, 15, 10]\n             * @since   3.0.6\n             */\n            spacing: [10, 10, 15, 10],\n            /**\n             * The button that appears after a selection zoom, allowing the user\n             * to reset zoom. This option is deprecated in favor of\n             * [zooming](#chart.zooming).\n             *\n             * @since      2.2\n             * @deprecated 10.2.1\n             */\n            resetZoomButton: {\n                /**\n                 * What frame the button placement should be related to. Can be\n                 * either `plotBox` or `spacingBox`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 *\n                 * @type      {Highcharts.ButtonRelativeToValue}\n                 * @apioption chart.resetZoomButton.relativeTo\n                 */\n                /**\n                 * A collection of attributes for the button. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                 * border radius. The theme also supports `style`, a collection of\n                 * CSS properties for the text. Equivalent attributes for the hover\n                 * state are given in `theme.states.hover`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                theme: {\n                /**\n                 * zIndex of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.theme.zIndex\n                 */\n                },\n                /**\n                 * The position of the button.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 *\n                 * @type {Highcharts.AlignObject}\n                 */\n                position: {\n                /**\n                 * The horizontal alignment of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.align\n                 */\n                /**\n                 * The horizontal offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.x\n                 */\n                /**\n                 * The vertical alignment of the button.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @apioption chart.resetZoomButton.position.verticalAlign\n                 */\n                /**\n                 * The vertical offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.y\n                 */\n                }\n            },\n            /**\n             * The pixel width of the plot area border.\n             *\n             * @sample {highcharts} highcharts/chart/plotborderwidth/\n             *         1px border\n             * @sample {highstock} stock/chart/plotborder/\n             *         2px border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.plotBorderWidth\n             */\n            /**\n             * Whether to apply a drop shadow to the plot area. Requires that\n             * plotBackgroundColor be set. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample {highcharts} highcharts/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highstock} stock/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.plotShadow\n             */\n            /**\n             * When true, cartesian charts like line, spline, area and column are\n             * transformed into the polar coordinate system. This produces _polar\n             * charts_, also known as _radar charts_.\n             *\n             * @sample {highcharts} highcharts/demo/polar/\n             *         Polar chart\n             * @sample {highcharts} highcharts/demo/polar-wind-rose/\n             *         Wind rose, stacked polar column chart\n             * @sample {highcharts} highcharts/demo/polar-spider/\n             *         Spider web chart\n             * @sample {highcharts} highcharts/parallel-coordinates/polar/\n             *         Star plot, multivariate data in a polar chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     2.3.0\n             * @product   highcharts\n             * @requires  highcharts-more\n             * @apioption chart.polar\n             */\n            /**\n             * Whether to reflow the chart to fit the width of the container div\n             * on resizing the window.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/reflow-false/\n             *         False\n             * @sample {highstock} stock/chart/reflow-true/\n             *         True by default\n             * @sample {highstock} stock/chart/reflow-false/\n             *         False\n             * @sample {highmaps} maps/chart/reflow-true/\n             *         True by default\n             * @sample {highmaps} maps/chart/reflow-false/\n             *         False\n             *\n             * @since     2.1\n             */\n            reflow: true,\n            /**\n             * The HTML element where the chart will be rendered. If it is a string,\n             * the element by that id is used. The HTML element can also be passed\n             * by direct reference, or as the first argument of the chart\n             * constructor, in which case the option is not needed.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         String\n             * @sample {highcharts} highcharts/chart/renderto-object/\n             *         Object reference\n             * @sample {highstock} stock/chart/renderto-string/\n             *         String\n             * @sample {highstock} stock/chart/renderto-object/\n             *         Object reference\n             *\n             * @type      {string|Highcharts.HTMLDOMElement}\n             * @apioption chart.renderTo\n             */\n            /**\n             * The background color of the marker square when selecting (zooming\n             * in on) an area of the chart.\n             *\n             * @see In styled mode, the selection marker fill is set with the\n             *      `.highcharts-selection-marker` class.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   rgba(51,92,173,0.25)\n             * @since     2.1.7\n             * @apioption chart.selectionMarkerFill\n             */\n            /**\n             * Whether to apply a drop shadow to the global series group. This causes\n             * all the series to have the same shadow. Contrary to the `series.shadow`\n             * option, this prevents items from casting shadows on each other, like for\n             * others series in a stack. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample highcharts/chart/seriesgroupshadow/ Shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to apply a drop shadow to the outer chart area. Requires\n             * that backgroundColor be set. The shadow can be an object\n             * configuration containing `color`, `offsetX`, `offsetY`, `opacity` and\n             * `width`.\n             *\n             * @sample {highcharts} highcharts/chart/shadow/\n             *         Shadow\n             * @sample {highstock} stock/chart/shadow/\n             *         Shadow\n             * @sample {highmaps} maps/chart/border/\n             *         Chart border and shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to show the axes initially. This only applies to empty charts\n             * where series are added dynamically, as axes are automatically added\n             * to cartesian series.\n             *\n             * @sample {highcharts} highcharts/chart/showaxes-false/\n             *         False by default\n             * @sample {highcharts} highcharts/chart/showaxes-true/\n             *         True\n             *\n             * @type      {boolean}\n             * @since     1.2.5\n             * @product   highcharts gantt\n             * @apioption chart.showAxes\n             */\n            /**\n             * The space between the bottom edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highstock} stock/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   15\n             * @since     2.1\n             * @apioption chart.spacingBottom\n             */\n            /**\n             * The space between the left edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highstock} stock/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingLeft\n             */\n            /**\n             * The space between the right edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingright-100/\n             *         Spacing set to 100\n             * @sample {highcharts} highcharts/chart/spacingright-legend/\n             *         Legend in right position with default spacing\n             * @sample {highstock} stock/chart/spacingright/\n             *         Spacing set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingRight\n             */\n            /**\n             * The space between the top edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingtop-100/\n             *         A top spacing of 100\n             * @sample {highcharts} highcharts/chart/spacingtop-10/\n             *         Floating chart title makes the plot area align to the default\n             *         spacingTop of 10.\n             * @sample {highstock} stock/chart/spacingtop/\n             *         A top spacing of 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingTop\n             */\n            /**\n             * Additional CSS styles to apply inline to the container `div` and the root\n             * SVG.\n             *\n             * According to the CSS syntax documentation, it is recommended to quote\n             * font family names that contain white space, digits, or punctuation\n             * characters other than hyphens. In such cases, wrap the fontFamily\n             * name as follows: `fontFamily: '\"Font name\"'`.\n             *\n             * Since v11, the root font size is 1rem by default, and all child element\n             * are given a relative `em` font size by default. This allows implementers\n             * to control all the chart's font sizes by only setting the root level.\n             *\n             * @see    In styled mode, general chart styles can be set with the\n             *         `.highcharts-root` class.\n             * @sample {highcharts} highcharts/chart/style-serif-font/\n             *         Using a serif type font\n             * @sample {highcharts} highcharts/chart/style-special-font/\n             *         Using a font with special character in name\n             * @sample {highcharts} highcharts/members/relative-font-size/\n             *         Relative font sizes\n             * @sample {highcharts} highcharts/css/em/\n             *         Styled mode with relative font sizes\n             * @sample {highstock} stock/chart/style/\n             *         Using a serif type font\n             * @sample {highmaps} maps/chart/style-serif-font/\n             *         Using a serif type font\n             *\n             * @type      {Highcharts.CSSObject}\n             * @default   {\"fontFamily\": Helvetica, Arial, sans-serif\",\"fontSize\":\"1rem\"}\n             * @apioption chart.style\n             */\n            /**\n             * The default series type for the chart. Can be any of the chart types\n             * listed under [plotOptions](#plotOptions) and [series](#series) or can\n             * be a series provided by an additional module.\n             *\n             * In TypeScript this option has no effect in sense of typing and\n             * instead the `type` option must always be set in the series.\n             *\n             * @sample {highcharts} highcharts/chart/type-bar/\n             *         Bar\n             * @sample {highstock} stock/chart/type/\n             *         Areaspline\n             * @sample {highmaps} maps/chart/type-mapline/\n             *         Mapline\n             *\n             * @type       {string}\n             * @default    {highcharts} line\n             * @default    {highstock} line\n             * @default    {highmaps} map\n             * @since      2.1.0\n             * @apioption  chart.type\n             */\n            type: 'line',\n            /**\n             * Decides in what dimensions the user can zoom by dragging the mouse.\n             * Can be one of `x`, `y` or `xy`.\n             *\n             * @see [panKey](#chart.panKey)\n             *\n             * @sample {highcharts} highcharts/chart/zoomtype-none/\n             *         None by default\n             * @sample {highcharts} highcharts/chart/zoomtype-x/\n             *         X\n             * @sample {highcharts} highcharts/chart/zoomtype-y/\n             *         Y\n             * @sample {highcharts} highcharts/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highcharts} highcharts/chart/zoomtype-polar/\n             *         Zoom on polar chart\n             * @sample {highstock} stock/demo/basic-line/\n             *         None by default\n             * @sample {highstock} stock/chart/zoomtype-x/\n             *         X\n             * @sample {highstock} stock/chart/zoomtype-y/\n             *         Y\n             * @sample {highstock} stock/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highmaps} maps/chart/zoomtype-xy/\n             *         Map with selection zoom\n             *\n             * @type       {string}\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @deprecated\n             * @apioption  chart.zoomType\n             */\n            /**\n             * Enables zooming by a single touch, in combination with\n             * [chart.zoomType](#chart.zoomType). When enabled, two-finger pinch\n             * will still work as set up by [chart.pinchType](#chart.pinchType).\n             * However, `zoomBySingleTouch` will interfere with touch-dragging the\n             * chart to read the tooltip. And especially when vertical zooming is\n             * enabled, it will make it hard to scroll vertically on the page.\n             * @since      9.0.0\n             * @sample     highcharts/chart/zoombysingletouch\n             *             Zoom by single touch enabled, with buttons to toggle\n             * @product    highcharts highstock gantt\n             * @deprecated\n             */\n            /**\n             * Chart zooming options.\n             * @since 10.2.1\n             */\n            zooming: {\n                /**\n                 * Equivalent to [type](#chart.zooming.type), but for multitouch\n                 * gestures only. By default, the `pinchType` is the same as the\n                 * `type` setting. However, pinching can be enabled separately in\n                 * some cases, for example in stock charts where a mouse drag pans the\n                 * chart, while pinching is enabled. When [tooltip.followTouchMove](\n                 * #tooltip.followTouchMove) is true, pinchType only applies to\n                 * two-finger touches.\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @default    {highstock} x\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.pinchType\n                 */\n                /**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * @declare    Highcharts.OptionsChartZoomingTypeValue\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.type\n                 */\n                /**\n                 * Set a key to hold when dragging to zoom the chart. This is useful to\n                 * avoid zooming while moving points. Should be set different than\n                 * [chart.panKey](#chart.panKey).\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @requires   modules/draggable-points\n                 * @apioption  chart.zooming.key\n                 */\n                /**\n                 * Enables zooming by a single touch, in combination with\n                 * [chart.zooming.type](#chart.zooming.type). When enabled, two-finger\n                 * pinch will still work as set up by [chart.zooming.pinchType]\n                 * (#chart.zooming.pinchType). However, `singleTouch` will interfere\n                 * with touch-dragging the chart to read the tooltip. And especially\n                 * when vertical zooming is enabled, it will make it hard to scroll\n                 * vertically on the page.\n                 *\n                 * @sample  highcharts/chart/zoombysingletouch\n                 *          Zoom by single touch enabled, with buttons to toggle\n                 *\n                 * @product highcharts highstock gantt\n                 */\n                singleTouch: false,\n                /**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 */\n                resetButton: {\n                    /**\n                     * What frame the button placement should be related to. Can be\n                     * either `plotBox` or `spacingBox`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     *\n                     * @type      {Highcharts.ButtonRelativeToValue}\n                     * @default   plot\n                     * @apioption chart.zooming.resetButton.relativeTo\n                     */\n                    /**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                     * border radius. The theme also supports `style`, a collection of\n                     * CSS properties for the text. Equivalent attributes for the hover\n                     * state are given in `theme.states.hover`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     *\n                     * @type  {Highcharts.SVGAttributes}\n                     * @since 10.2.1\n                     */\n                    theme: {\n                        /** @internal */\n                        zIndex: 6\n                    },\n                    /**\n                     * The position of the button.\n                     *\n                     * Note: Adjusting position values might cause overlap with chart\n                     * elements. Ensure coordinates do not obstruct other components or\n                     * data visibility.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     *\n                     * @type  {Highcharts.AlignObject}\n                     * @since 10.2.1\n                     */\n                    position: {\n                        /**\n                         * The horizontal alignment of the button.\n                         */\n                        align: 'right',\n                        /**\n                         * The horizontal offset of the button.\n                         */\n                        x: -10,\n                        /**\n                         * The vertical alignment of the button.\n                         *\n                         * @type       {Highcharts.VerticalAlignValue}\n                         * @default    top\n                         * @apioption  chart.zooming.resetButton.position.verticalAlign\n                         */\n                        /**\n                         * The vertical offset of the button.\n                         */\n                        y: 10\n                    }\n                }\n            },\n            /**\n             * An explicit width for the chart. By default (when `null`) the width\n             * is calculated from the offset width of the containing element.\n             *\n             * @sample {highcharts} highcharts/chart/width/\n             *         800px wide\n             * @sample {highstock} stock/chart/width/\n             *         800px wide\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             *\n             * @type {null|number|string}\n             */\n            width: null,\n            /**\n             * An explicit height for the chart. If a _number_, the height is\n             * given in pixels. If given a _percentage string_ (for example\n             * `'56%'`), the height is given as the percentage of the actual chart\n             * width. This allows for preserving the aspect ratio across responsive\n             * sizes.\n             *\n             * By default (when `null`) the height is calculated from the offset\n             * height of the containing element, or 400 pixels if the containing\n             * element's height is 0.\n             *\n             * @sample {highcharts} highcharts/chart/height/\n             *         500px height\n             * @sample {highstock} stock/chart/height/\n             *         300px height\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             * @sample highcharts/chart/height-percent/\n             *         Highcharts with percentage height\n             *\n             * @type {null|number|string}\n             */\n            height: null,\n            /**\n             * The color of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/bordercolor/\n             *         Brown border\n             * @sample {highstock} stock/chart/border/\n             *         Brown border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: \"#334eff\" /* Palette.highlightColor80 */,\n            /**\n             * The pixel width of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/borderwidth/\n             *         5px border\n             * @sample {highstock} stock/chart/border/\n             *         2px border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.borderWidth\n             */\n            /**\n             * The background color or gradient for the outer chart area.\n             *\n             * @see In styled mode, the background is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The background color or gradient for the plot area.\n             *\n             * @see In styled mode, the plot background is set with the\n             *      `.highcharts-plot-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption chart.plotBackgroundColor\n             */\n            /**\n             * The URL for an image to use as the plot background. To set an image\n             * as the background for the entire chart, set a CSS background image\n             * to the container element. Note that for the image to be applied to\n             * exported charts, its URL needs to be accessible by the export server.\n             *\n             * @see In styled mode, a plot background image can be set with the\n             *      `.highcharts-plot-background` class and a [custom pattern](\n             *      https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundimage/\n             *         Skies\n             * @sample {highstock} stock/chart/plotbackgroundimage/\n             *         Skies\n             *\n             * @type      {string}\n             * @apioption chart.plotBackgroundImage\n             */\n            /**\n             * The color of the inner chart or plot area border.\n             *\n             * @see In styled mode, a plot border stroke can be set with the\n             *      `.highcharts-plot-border` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbordercolor/\n             *         Blue border\n             * @sample {highstock} stock/chart/plotborder/\n             *         Blue border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            plotBorderColor: \"#cccccc\" /* Palette.neutralColor20 */\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartDefaults;\n    });\n    _registerModule(_modules, 'Core/Color/Palettes.js', [], function () {\n        /**\n         * Series palettes for Highcharts. Series colors are defined in highcharts.css.\n         * **Do not edit this file!** This file is generated using the 'gulp palette' task.\n         */\n        const SeriesPalettes = {\n            /**\n             * Colors for data series and points\n             */\n            colors: [\n                '#2caffe',\n                '#544fc5',\n                '#00e272',\n                '#fe6a35',\n                '#6b8abc',\n                '#d568fb',\n                '#2ee0ca',\n                '#fa4b42',\n                '#feb56a',\n                '#91e8e1'\n            ]\n        };\n\n        return SeriesPalettes;\n    });\n    _registerModule(_modules, 'Core/Time.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { defined, error, extend, isNumber, isObject, merge, objectEach, pad, pick, splat, timeUnits } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const hasNewSafariBug = H.isSafari &&\n            win.Intl &&\n            win.Intl.DateTimeFormat.prototype.formatRange;\n        // To do: Remove this when we no longer need support for Safari < v14.1\n        const hasOldSafariBug = H.isSafari &&\n            win.Intl &&\n            !win.Intl.DateTimeFormat.prototype.formatRange;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The Time class. Time settings are applied in general for each page using\n         * `Highcharts.setOptions`, or individually for each Chart item through the\n         * [time](https://api.highcharts.com/highcharts/time) options set.\n         *\n         * The Time object is available from {@link Highcharts.Chart#time},\n         * which refers to  `Highcharts.time` if no individual time settings are\n         * applied.\n         *\n         * @example\n         * // Apply time settings globally\n         * Highcharts.setOptions({\n         *     time: {\n         *         timezone: 'Europe/London'\n         *     }\n         * });\n         *\n         * // Apply time settings by instance\n         * let chart = Highcharts.chart('container', {\n         *     time: {\n         *         timezone: 'America/New_York'\n         *     },\n         *     series: [{\n         *         data: [1, 4, 3, 5]\n         *     }]\n         * });\n         *\n         * // Use the Time object\n         * console.log(\n         *        'Current time in New York',\n         *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n         * );\n         *\n         * @since 6.0.5\n         *\n         * @class\n         * @name Highcharts.Time\n         *\n         * @param {Highcharts.TimeOptions} [options]\n         * Time options as defined in [chart.options.time](/highcharts/time).\n         */\n        class Time {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = {};\n                this.useUTC = false;\n                this.variableTimezone = false;\n                this.Date = win.Date;\n                /**\n                 * Get the time zone offset based on the current timezone information as\n                 * set in the global options.\n                 *\n                 * @function Highcharts.Time#getTimezoneOffset\n                 *\n                 * @param {number} timestamp\n                 *        The JavaScript timestamp to inspect.\n                 *\n                 * @return {number}\n                 *         The timezone offset in minutes compared to UTC.\n                 */\n                this.getTimezoneOffset = this.timezoneOffsetFunction();\n                this.update(options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Time units used in `Time.get` and `Time.set`\n             *\n             * @typedef {\"Date\"|\"Day\"|\"FullYear\"|\"Hours\"|\"Milliseconds\"|\"Minutes\"|\"Month\"|\"Seconds\"} Highcharts.TimeUnitValue\n             */\n            /**\n             * Get the value of a date object in given units, and subject to the Time\n             * object's current timezone settings. This function corresponds directly to\n             * JavaScripts `Date.getXXX / Date.getUTCXXX`, so instead of calling\n             * `date.getHours()` or `date.getUTCHours()` we will call\n             * `time.get('Hours')`.\n             *\n             * @function Highcharts.Time#get\n             *\n             * @param {Highcharts.TimeUnitValue} unit\n             * @param {Date} date\n             *\n             * @return {number}\n             *        The given time unit\n             */\n            get(unit, date) {\n                if (this.variableTimezone || this.timezoneOffset) {\n                    const realMs = date.getTime();\n                    const ms = realMs - this.getTimezoneOffset(date);\n                    date.setTime(ms); // Temporary adjust to timezone\n                    const ret = date['getUTC' + unit]();\n                    date.setTime(realMs); // Reset\n                    return ret;\n                }\n                // UTC time with no timezone handling\n                if (this.useUTC) {\n                    return date['getUTC' + unit]();\n                }\n                // Else, local time\n                return date['get' + unit]();\n            }\n            /**\n             * Set the value of a date object in given units, and subject to the Time\n             * object's current timezone settings. This function corresponds directly to\n             * JavaScripts `Date.setXXX / Date.setUTCXXX`, so instead of calling\n             * `date.setHours(0)` or `date.setUTCHours(0)` we will call\n             * `time.set('Hours', 0)`.\n             *\n             * @function Highcharts.Time#set\n             *\n             * @param {Highcharts.TimeUnitValue} unit\n             * @param {Date} date\n             * @param {number} value\n             *\n             * @return {number}\n             *        The epoch milliseconds of the updated date\n             */\n            set(unit, date, value) {\n                // UTC time with timezone handling\n                if (this.variableTimezone || this.timezoneOffset) {\n                    // For lower order time units, just set it directly using UTC\n                    // time\n                    if (unit === 'Milliseconds' ||\n                        unit === 'Seconds' ||\n                        (unit === 'Minutes' &&\n                            this.getTimezoneOffset(date) % 3600000 === 0) // #13961\n                    ) {\n                        return date['setUTC' + unit](value);\n                    }\n                    // Higher order time units need to take the time zone into\n                    // account\n                    // Adjust by timezone\n                    const offset = this.getTimezoneOffset(date);\n                    let ms = date.getTime() - offset;\n                    date.setTime(ms);\n                    date['setUTC' + unit](value);\n                    const newOffset = this.getTimezoneOffset(date);\n                    ms = date.getTime() + newOffset;\n                    return date.setTime(ms);\n                }\n                // UTC time with no timezone handling\n                if (this.useUTC ||\n                    // leap calculation in UTC only\n                    (hasNewSafariBug && unit === 'FullYear')) {\n                    return date['setUTC' + unit](value);\n                }\n                // Else, local time\n                return date['set' + unit](value);\n            }\n            /**\n             * Update the Time object with current options. It is called internally on\n             * initializing Highcharts, after running `Highcharts.setOptions` and on\n             * `Chart.update`.\n             *\n             * @private\n             * @function Highcharts.Time#update\n             *\n             * @param {Highcharts.TimeOptions} [options]\n             *\n             */\n            update(options = {}) {\n                const useUTC = pick(options.useUTC, true);\n                this.options = options = merge(true, this.options, options);\n                // Allow using a different Date class\n                this.Date = options.Date || win.Date || Date;\n                this.useUTC = useUTC;\n                this.timezoneOffset = (useUTC && options.timezoneOffset) || void 0;\n                this.getTimezoneOffset = this.timezoneOffsetFunction();\n                /*\n                 * The time object has options allowing for variable time zones, meaning\n                 * the axis ticks or series data needs to consider this.\n                 */\n                this.variableTimezone = useUTC && !!(options.getTimezoneOffset ||\n                    options.timezone);\n            }\n            /**\n             * Make a time and returns milliseconds. Interprets the inputs as UTC time,\n             * local time or a specific timezone time depending on the current time\n             * settings.\n             *\n             * @function Highcharts.Time#makeTime\n             *\n             * @param {number} year\n             *        The year\n             *\n             * @param {number} month\n             *        The month. Zero-based, so January is 0.\n             *\n             * @param {number} [date=1]\n             *        The day of the month\n             *\n             * @param {number} [hours=0]\n             *        The hour of the day, 0-23.\n             *\n             * @param {number} [minutes=0]\n             *        The minutes\n             *\n             * @param {number} [seconds=0]\n             *        The seconds\n             *\n             * @return {number}\n             *         The time in milliseconds since January 1st 1970.\n             */\n            makeTime(year, month, date, hours, minutes, seconds) {\n                let d, offset, newOffset;\n                if (this.useUTC) {\n                    d = this.Date.UTC.apply(0, arguments);\n                    offset = this.getTimezoneOffset(d);\n                    d += offset;\n                    newOffset = this.getTimezoneOffset(d);\n                    if (offset !== newOffset) {\n                        d += newOffset - offset;\n                        // A special case for transitioning from summer time to winter time.\n                        // When the clock is set back, the same time is repeated twice, i.e.\n                        // 02:30 am is repeated since the clock is set back from 3 am to\n                        // 2 am. We need to make the same time as local Date does.\n                    }\n                    else if (offset - 36e5 === this.getTimezoneOffset(d - 36e5) &&\n                        !hasOldSafariBug) {\n                        d -= 36e5;\n                    }\n                }\n                else {\n                    d = new this.Date(year, month, pick(date, 1), pick(hours, 0), pick(minutes, 0), pick(seconds, 0)).getTime();\n                }\n                return d;\n            }\n            /**\n             * Sets the getTimezoneOffset function. If the `timezone` option is set, a\n             * default getTimezoneOffset function with that timezone is returned. If\n             * a `getTimezoneOffset` option is defined, it is returned. If neither are\n             * specified, the function using the `timezoneOffset` option or 0 offset is\n             * returned.\n             *\n             * @private\n             * @function Highcharts.Time#timezoneOffsetFunction\n             *\n             * @return {Function}\n             *         A getTimezoneOffset function\n             */\n            timezoneOffsetFunction() {\n                const time = this, options = this.options, getTimezoneOffset = options.getTimezoneOffset;\n                if (!this.useUTC) {\n                    return (timestamp) => new Date(timestamp.toString()).getTimezoneOffset() * 60000;\n                }\n                if (options.timezone) {\n                    return (timestamp) => {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                            const [date, gmt, hours, colon, minutes = 0] = \n                            // eslint-disable-next-line new-cap\n                            Intl.DateTimeFormat('en', {\n                                timeZone: options.timezone,\n                                timeZoneName: 'shortOffset'\n                            })\n                                .format(timestamp)\n                                .split(/(GMT|:)/)\n                                .map(Number), offset = -(hours + minutes / 60) * 60 * 60000;\n                            // Possible future NaNs stop here\n                            if (isNumber(offset)) {\n                                return offset;\n                            }\n                        }\n                        catch (e) {\n                            error(34);\n                        }\n                        return 0;\n                    };\n                }\n                // If not timezone is set, look for the getTimezoneOffset callback\n                if (this.useUTC && getTimezoneOffset) {\n                    return (timestamp) => getTimezoneOffset(timestamp.valueOf()) * 60000;\n                }\n                // Last, use the `timezoneOffset` option if set\n                return () => (time.timezoneOffset || 0) * 60000;\n            }\n            /**\n             * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970)\n             * into a human readable date string. The available format keys are listed\n             * below. Additional formats can be given in the\n             * {@link Highcharts.dateFormats} hook.\n             *\n             * Supported format keys:\n             * - `%a`: Short weekday, like 'Mon'\n             * - `%A`: Long weekday, like 'Monday'\n             * - `%d`: Two digit day of the month, 01 to 31\n             * - `%e`: Day of the month, 1 through 31\n             * - `%w`: Day of the week, 0 through 6\n             * - `%b`: Short month, like 'Jan'\n             * - `%B`: Long month, like 'January'\n             * - `%m`: Two digit month number, 01 through 12\n             * - `%y`: Two digits year, like 09 for 2009\n             * - `%Y`: Four digits year, like 2009\n             * - `%H`: Two digits hours in 24h format, 00 through 23\n             * - `%k`: Hours in 24h format, 0 through 23\n             * - `%I`: Two digits hours in 12h format, 00 through 11\n             * - `%l`: Hours in 12h format, 1 through 12\n             * - `%M`: Two digits minutes, 00 through 59\n             * - `%p`: Upper case AM or PM\n             * - `%P`: Lower case AM or PM\n             * - `%S`: Two digits seconds, 00 through 59\n             * - `%L`: Milliseconds (naming from Ruby)\n             *\n             * @example\n             * const time = new Highcharts.Time();\n             * const s = time.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2020, 0, 1));\n             * console.log(s); // => 2020-01-01 00:00:00\n             *\n             * @function Highcharts.Time#dateFormat\n             *\n             * @param {string} format\n             *        The desired format where various time representations are\n             *        prefixed with %.\n             *\n             * @param {number} [timestamp]\n             *        The JavaScript timestamp.\n             *\n             * @param {boolean} [capitalize=false]\n             *        Upper case first letter in the return.\n             *\n             * @return {string}\n             *         The formatted date.\n             */\n            dateFormat(format, timestamp, capitalize) {\n                if (!defined(timestamp) || isNaN(timestamp)) {\n                    return (H.defaultOptions.lang &&\n                        H.defaultOptions.lang.invalidDate ||\n                        '');\n                }\n                format = pick(format, '%Y-%m-%d %H:%M:%S');\n                const time = this, date = new this.Date(timestamp), \n                // get the basic time values\n                hours = this.get('Hours', date), day = this.get('Day', date), dayOfMonth = this.get('Date', date), month = this.get('Month', date), fullYear = this.get('FullYear', date), lang = H.defaultOptions.lang, langWeekdays = (lang && lang.weekdays), shortWeekdays = (lang && lang.shortWeekdays), \n                // List all format keys. Custom formats can be added from the\n                // outside.\n                replacements = extend({\n                    // Day\n                    // Short weekday, like 'Mon'\n                    a: shortWeekdays ?\n                        shortWeekdays[day] :\n                        langWeekdays[day].substr(0, 3),\n                    // Long weekday, like 'Monday'\n                    A: langWeekdays[day],\n                    // Two digit day of the month, 01 to 31\n                    d: pad(dayOfMonth),\n                    // Day of the month, 1 through 31\n                    e: pad(dayOfMonth, 2, ' '),\n                    // Day of the week, 0 through 6\n                    w: day,\n                    // Week (none implemented)\n                    // 'W': weekNumber(),\n                    // Month\n                    // Short month, like 'Jan'\n                    b: lang.shortMonths[month],\n                    // Long month, like 'January'\n                    B: lang.months[month],\n                    // Two digit month number, 01 through 12\n                    m: pad(month + 1),\n                    // Month number, 1 through 12 (#8150)\n                    o: month + 1,\n                    // Year\n                    // Two digits year, like 09 for 2009\n                    y: fullYear.toString().substr(2, 2),\n                    // Four digits year, like 2009\n                    Y: fullYear,\n                    // Time\n                    // Two digits hours in 24h format, 00 through 23\n                    H: pad(hours),\n                    // Hours in 24h format, 0 through 23\n                    k: hours,\n                    // Two digits hours in 12h format, 00 through 11\n                    I: pad((hours % 12) || 12),\n                    // Hours in 12h format, 1 through 12\n                    l: (hours % 12) || 12,\n                    // Two digits minutes, 00 through 59\n                    M: pad(this.get('Minutes', date)),\n                    // Upper case AM or PM\n                    p: hours < 12 ? 'AM' : 'PM',\n                    // Lower case AM or PM\n                    P: hours < 12 ? 'am' : 'pm',\n                    // Two digits seconds, 00 through  59\n                    S: pad(this.get('Seconds', date)),\n                    // Milliseconds (naming from Ruby)\n                    L: pad(Math.floor(timestamp % 1000), 3)\n                }, H.dateFormats);\n                // Do the replaces\n                objectEach(replacements, function (val, key) {\n                    // Regex would do it in one line, but this is faster\n                    while (format.indexOf('%' + key) !== -1) {\n                        format = format.replace('%' + key, typeof val === 'function' ? val.call(time, timestamp) : val);\n                    }\n                });\n                // Optionally capitalize the string and return\n                return capitalize ?\n                    (format.substr(0, 1).toUpperCase() +\n                        format.substr(1)) :\n                    format;\n            }\n            /**\n             * Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\n             * an object.\n             * @private\n             * @param {string|Array<T>|Highcharts.Dictionary<T>} f\n             * General format description\n             * @return {Highcharts.Dictionary<T>}\n             * The object definition\n             */\n            resolveDTLFormat(f) {\n                if (!isObject(f, true)) { // check for string or array\n                    f = splat(f);\n                    return {\n                        main: f[0],\n                        from: f[1],\n                        to: f[2]\n                    };\n                }\n                return f;\n            }\n            /**\n             * Return an array with time positions distributed on round time values\n             * right and right after min and max. Used in datetime axes as well as for\n             * grouping data on a datetime axis.\n             *\n             * @function Highcharts.Time#getTimeTicks\n             *\n             * @param {Highcharts.TimeNormalizedObject} normalizedInterval\n             *        The interval in axis values (ms) and the count\n             *\n             * @param {number} [min]\n             *        The minimum in axis values\n             *\n             * @param {number} [max]\n             *        The maximum in axis values\n             *\n             * @param {number} [startOfWeek=1]\n             *\n             * @return {Highcharts.AxisTickPositionsArray}\n             * Time positions\n             */\n            getTimeTicks(normalizedInterval, min, max, startOfWeek) {\n                const time = this, Date = time.Date, tickPositions = [], higherRanks = {}, \n                // When crossing DST, use the max. Resolves #6278.\n                minDate = new Date(min), interval = normalizedInterval.unitRange, count = normalizedInterval.count || 1;\n                let i, minYear, // used in months and years as a basis for Date.UTC()\n                variableDayLength, minDay;\n                startOfWeek = pick(startOfWeek, 1);\n                if (defined(min)) { // #1300\n                    time.set('Milliseconds', minDate, interval >= timeUnits.second ?\n                        0 : // #3935\n                        count * Math.floor(time.get('Milliseconds', minDate) / count)); // #3652, #3654\n                    if (interval >= timeUnits.second) { // second\n                        time.set('Seconds', minDate, interval >= timeUnits.minute ?\n                            0 : // #3935\n                            count * Math.floor(time.get('Seconds', minDate) / count));\n                    }\n                    if (interval >= timeUnits.minute) { // minute\n                        time.set('Minutes', minDate, interval >= timeUnits.hour ?\n                            0 :\n                            count * Math.floor(time.get('Minutes', minDate) / count));\n                    }\n                    if (interval >= timeUnits.hour) { // hour\n                        time.set('Hours', minDate, interval >= timeUnits.day ?\n                            0 :\n                            count * Math.floor(time.get('Hours', minDate) / count));\n                    }\n                    if (interval >= timeUnits.day) { // day\n                        time.set('Date', minDate, interval >= timeUnits.month ?\n                            1 :\n                            Math.max(1, count * Math.floor(time.get('Date', minDate) / count)));\n                    }\n                    if (interval >= timeUnits.month) { // month\n                        time.set('Month', minDate, interval >= timeUnits.year ? 0 :\n                            count * Math.floor(time.get('Month', minDate) / count));\n                        minYear = time.get('FullYear', minDate);\n                    }\n                    if (interval >= timeUnits.year) { // year\n                        minYear -= minYear % count;\n                        time.set('FullYear', minDate, minYear);\n                    }\n                    // week is a special case that runs outside the hierarchy\n                    if (interval === timeUnits.week) {\n                        // get start of current week, independent of count\n                        minDay = time.get('Day', minDate);\n                        time.set('Date', minDate, (time.get('Date', minDate) -\n                            minDay + startOfWeek +\n                            // We don't want to skip days that are before\n                            // startOfWeek (#7051)\n                            (minDay < startOfWeek ? -7 : 0)));\n                    }\n                    // Get basics for variable time spans\n                    minYear = time.get('FullYear', minDate);\n                    const minMonth = time.get('Month', minDate), minDateDate = time.get('Date', minDate), minHours = time.get('Hours', minDate);\n                    // Redefine min to the floored/rounded minimum time (#7432)\n                    min = minDate.getTime();\n                    // Handle local timezone offset\n                    if ((time.variableTimezone || !time.useUTC) && defined(max)) {\n                        // Detect whether we need to take the DST crossover into\n                        // consideration. If we're crossing over DST, the day length may\n                        // be 23h or 25h and we need to compute the exact clock time for\n                        // each tick instead of just adding hours. This comes at a cost,\n                        // so first we find out if it is needed (#4951).\n                        variableDayLength = (\n                        // Long range, assume we're crossing over.\n                        max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time\n                            // zones.\n                            time.getTimezoneOffset(min) !==\n                                time.getTimezoneOffset(max));\n                    }\n                    // Iterate and add tick positions at appropriate values\n                    let t = minDate.getTime();\n                    i = 1;\n                    while (t < max) {\n                        tickPositions.push(t);\n                        // if the interval is years, use Date.UTC to increase years\n                        if (interval === timeUnits.year) {\n                            t = time.makeTime(minYear + i * count, 0);\n                            // if the interval is months, use Date.UTC to increase months\n                        }\n                        else if (interval === timeUnits.month) {\n                            t = time.makeTime(minYear, minMonth + i * count);\n                            // if we're using global time, the interval is not fixed as it\n                            // jumps one hour at the DST crossover\n                        }\n                        else if (variableDayLength &&\n                            (interval === timeUnits.day || interval === timeUnits.week)) {\n                            t = time.makeTime(minYear, minMonth, minDateDate +\n                                i * count * (interval === timeUnits.day ? 1 : 7));\n                        }\n                        else if (variableDayLength &&\n                            interval === timeUnits.hour &&\n                            count > 1) {\n                            // make sure higher ranks are preserved across DST (#6797,\n                            // #7621)\n                            t = time.makeTime(minYear, minMonth, minDateDate, minHours + i * count);\n                            // else, the interval is fixed and we use simple addition\n                        }\n                        else {\n                            t += interval * count;\n                        }\n                        i++;\n                    }\n                    // push the last time\n                    tickPositions.push(t);\n                    // Handle higher ranks. Mark new days if the time is on midnight\n                    // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold\n                    // to prevent looping over dense data grouping (#6156).\n                    if (interval <= timeUnits.hour && tickPositions.length < 10000) {\n                        tickPositions.forEach(function (t) {\n                            if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            t % 1800000 === 0 &&\n                                // Check for local or global midnight\n                                time.dateFormat('%H%M%S%L', t) === '000000000') {\n                                higherRanks[t] = 'day';\n                            }\n                        });\n                    }\n                }\n                // record information on the chosen unit - for dynamic label formatter\n                tickPositions.info = extend(normalizedInterval, {\n                    higherRanks,\n                    totalRange: interval * count\n                });\n                return tickPositions;\n            }\n            /**\n             * Get the optimal date format for a point, based on a range.\n             *\n             * @private\n             * @function Highcharts.Time#getDateFormat\n             *\n             * @param {number} range\n             *        The time range\n             *\n             * @param {number} timestamp\n             *        The timestamp of the date\n             *\n             * @param {number} startOfWeek\n             *        An integer representing the first day of the week, where 0 is\n             *        Sunday.\n             *\n             * @param {Highcharts.Dictionary<string>} dateTimeLabelFormats\n             *        A map of time units to formats.\n             *\n             * @return {string}\n             *         The optimal date format for a point.\n             */\n            getDateFormat(range, timestamp, startOfWeek, dateTimeLabelFormats) {\n                const dateStr = this.dateFormat('%m-%d %H:%M:%S.%L', timestamp), blank = '01-01 00:00:00.000', strpos = {\n                    millisecond: 15,\n                    second: 12,\n                    minute: 9,\n                    hour: 6,\n                    day: 3\n                };\n                let n = 'millisecond', \n                // for sub-millisecond data, #4223\n                lastN = n;\n                for (n in timeUnits) { // eslint-disable-line guard-for-in\n                    // If the range is exactly one week and we're looking at a\n                    // Sunday/Monday, go for the week format\n                    if (range === timeUnits.week &&\n                        +this.dateFormat('%w', timestamp) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n                    // The first format that is too great for the range\n                    if (timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] &&\n                        dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n                    // Weeks are outside the hierarchy, only apply them on\n                    // Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n                return this.resolveDTLFormat(dateTimeLabelFormats[n]).main;\n            }\n        }\n        /* *\n         *\n         * Default export\n         *\n         * */\n        /* *\n         *\n         * API Declarations\n         *\n         * */\n        /**\n         * Normalized interval.\n         *\n         * @interface Highcharts.TimeNormalizedObject\n         */ /**\n        * The count.\n        *\n        * @name Highcharts.TimeNormalizedObject#count\n        * @type {number|undefined}\n        */ /**\n        * The interval in axis values (ms).\n        *\n        * @name Highcharts.TimeNormalizedObject#unitRange\n        * @type {number}\n        */\n        /**\n         * Function of an additional date format specifier.\n         *\n         * @callback Highcharts.TimeFormatCallbackFunction\n         *\n         * @param {number} timestamp\n         *        The time to format.\n         *\n         * @return {string}\n         *         The formatted portion of the date.\n         */\n        /**\n         * Time ticks.\n         *\n         * @interface Highcharts.AxisTickPositionsArray\n         * @extends global.Array<number>\n         */ /**\n        * @name Highcharts.AxisTickPositionsArray#info\n        * @type {Highcharts.TimeTicksInfoObject|undefined}\n        */\n        /**\n         * A callback to return the time zone offset for a given datetime. It\n         * takes the timestamp in terms of milliseconds since January 1 1970,\n         * and returns the timezone offset in minutes. This provides a hook\n         * for drawing time based charts in specific time zones using their\n         * local DST crossover dates, with the help of external libraries.\n         *\n         * @callback Highcharts.TimezoneOffsetCallbackFunction\n         *\n         * @param {number} timestamp\n         * Timestamp in terms of milliseconds since January 1 1970.\n         *\n         * @return {number}\n         * Timezone offset in minutes.\n         */\n        ''; // keeps doclets above in JS file\n\n        return Time;\n    });\n    _registerModule(_modules, 'Core/Defaults.js', [_modules['Core/Chart/ChartDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Time.js'], _modules['Core/Utilities.js']], function (ChartDefaults, H, Palettes, Time, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice, svg } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Global default settings.\n         *\n         * @name Highcharts.defaultOptions\n         * @type {Highcharts.Options}\n         */ /**\n        * @optionparent\n        * @private\n        */\n        const defaultOptions = {\n            /**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors),\n             * [pie.colors](#plotOptions.pie.colors).\n             *\n             * In styled mode, the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             * @sample {highcharts} highcharts/chart/colors/\n             *         Assign a global color theme\n             * @sample highcharts/members/theme-v10/\n             *         Latest release styled like version 10\n             *\n             * @type    {Array<(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)>}\n             * @default [\n             *     \"#2caffe\",\n             *     \"#544fc5\",\n             *     \"#00e272\",\n             *     \"#fe6a35\",\n             *     \"#6b8abc\",\n             *     \"#d568fb\",\n             *     \"#2ee0ca\",\n             *     \"#fa4b42\",\n             *     \"#feb56a\",\n             *     \"#91e8e1\"\n             * ]\n             */\n            colors: Palettes.colors,\n            /**\n             * Styled mode only. Configuration object for adding SVG definitions for\n             * reusable elements. See [gradients, shadows and\n             * patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\n             * for more information and code examples.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @apioption defs\n             */\n            /**\n             * @ignore-option\n             */\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            /**\n             * The language object is global and it can't be set on each chart\n             * initialization. Instead, use `Highcharts.setOptions` to set it before any\n             * chart is initialized.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     lang: {\n             *         months: [\n             *             'Janvier', 'Février', 'Mars', 'Avril',\n             *             'Mai', 'Juin', 'Juillet', 'Août',\n             *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n             *         ],\n             *         weekdays: [\n             *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n             *             'Jeudi', 'Vendredi', 'Samedi'\n             *         ]\n             *     }\n             * });\n             * ```\n             */\n            lang: {\n                /**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 */\n                loading: 'Loading...',\n                /**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                 *          \"July\", \"August\", \"September\", \"October\", \"November\",\n                 *          \"December\"]\n                 */\n                months: [\n                    'January', 'February', 'March', 'April', 'May', 'June', 'July',\n                    'August', 'September', 'October', 'November', 'December'\n                ],\n                /**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 *          \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n                 */\n                shortMonths: [\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n                    'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n                ],\n                /**\n                 * An array containing the weekday names.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n                 *          \"Friday\", \"Saturday\"]\n                 */\n                weekdays: [\n                    'Sunday', 'Monday', 'Tuesday', 'Wednesday',\n                    'Thursday', 'Friday', 'Saturday'\n                ],\n                /**\n                 * Short week days, starting Sunday. If not specified, Highcharts uses\n                 * the first three letters of the `lang.weekdays` option.\n                 *\n                 * @sample highcharts/lang/shortweekdays/\n                 *         Finnish two-letter abbreviations\n                 *\n                 * @type      {Array<string>}\n                 * @since     4.2.4\n                 * @apioption lang.shortWeekdays\n                 */\n                /**\n                 * What to show in a date field for invalid dates. Defaults to an empty\n                 * string.\n                 *\n                 * @type      {string}\n                 * @since     4.1.8\n                 * @product   highcharts highstock\n                 * @apioption lang.invalidDate\n                 */\n                /**\n                 * The title appearing on hovering the zoom in button. The text itself\n                 * defaults to \"+\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom in\n                 * @product   highmaps\n                 * @apioption lang.zoomIn\n                 */\n                /**\n                 * The title appearing on hovering the zoom out button. The text itself\n                 * defaults to \"-\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom out\n                 * @product   highmaps\n                 * @apioption lang.zoomOut\n                 */\n                /**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments.\n                 *\n                 * @since 1.2.2\n                 */\n                decimalPoint: '.',\n                /**\n                 * [Metric prefixes](https://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the\n                 * positions with `null` causes the full number to be written. Setting\n                 * `numericSymbols` to `undefined` disables shortening altogether.\n                 *\n                 * @sample {highcharts} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n                 * @since   2.3.0\n                 */\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'],\n                /**\n                 * The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\n                 * Use 10000 for Japanese, Korean and various Chinese locales, which\n                 * use symbols for 10^4, 10^8 and 10^12.\n                 *\n                 * @sample highcharts/lang/numericsymbolmagnitude/\n                 *         10000 magnitude for Japanese\n                 *\n                 * @type      {number}\n                 * @default   1000\n                 * @since     5.0.3\n                 * @apioption lang.numericSymbolMagnitude\n                 */\n                /**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoom: 'Reset zoom',\n                /**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoomTitle: 'Reset zoom level 1:1',\n                /**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to a single space character, which is recommended in\n                 * [ISO 31-0](https://en.wikipedia.org/wiki/ISO_31-0#Numbers) and works\n                 * across Anglo-American and continental European languages.\n                 *\n                 * @default \\u0020\n                 * @since   1.2.2\n                 */\n                thousandsSep: ' '\n            },\n            /**\n             * Global options that don't apply to each chart. These options, like\n             * the `lang` options, must be set using the `Highcharts.setOptions`\n             * method.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     global: {\n             *         useUTC: false\n             *     }\n             * });\n             * ```\n             */\n            /**\n             * _Canvg rendering for Android 2.x is removed as of Highcharts 5.0\\.\n             * Use the [libURL](#exporting.libURL) option to configure exporting._\n             *\n             * The URL to the additional file to lazy load for Android 2.x devices.\n             * These devices don't support SVG, so we download a helper file that\n             * contains [canvg](https://github.com/canvg/canvg), its dependency\n             * rbcolor, and our own CanVG Renderer class. To avoid hotlinking to\n             * our site, you can install canvas-tools.js on your own server and\n             * change this option accordingly.\n             *\n             * @deprecated\n             *\n             * @type      {string}\n             * @default   https://code.highcharts.com/{version}/modules/canvas-tools.js\n             * @product   highcharts highmaps\n             * @apioption global.canvasToolsURL\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.useUTC](#time.useUTC) that supports individual time settings\n             * per chart.\n             *\n             * @deprecated\n             *\n             * @type      {boolean}\n             * @apioption global.useUTC\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.Date](#time.Date) that supports individual time settings\n             * per chart.\n             *\n             * @deprecated\n             *\n             * @type      {Function}\n             * @product   highcharts highstock\n             * @apioption global.Date\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.getTimezoneOffset](#time.getTimezoneOffset) that supports\n             * individual time settings per chart.\n             *\n             * @deprecated\n             *\n             * @type      {Function}\n             * @product   highcharts highstock\n             * @apioption global.getTimezoneOffset\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.timezone](#time.timezone) that supports individual time\n             * settings per chart.\n             *\n             * @deprecated\n             *\n             * @type      {string}\n             * @product   highcharts highstock\n             * @apioption global.timezone\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.timezoneOffset](#time.timezoneOffset) that supports individual\n             * time settings per chart.\n             *\n             * @deprecated\n             *\n             * @type      {number}\n             * @product   highcharts highstock\n             * @apioption global.timezoneOffset\n             */\n            global: {},\n            /**\n             * Time options that can apply globally or to individual charts. These\n             * settings affect how `datetime` axes are laid out, how tooltips are\n             * formatted, how series\n             * [pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\n             * the Highcharts Stock range selector handles time.\n             *\n             * The common use case is that all charts in the same Highcharts object\n             * share the same time settings, in which case the global settings are set\n             * using `setOptions`.\n             *\n             * ```js\n             * // Apply time settings globally\n             * Highcharts.setOptions({\n             *     time: {\n             *         timezone: 'Europe/London'\n             *     }\n             * });\n             * // Apply time settings by instance\n             * let chart = Highcharts.chart('container', {\n             *     time: {\n             *         timezone: 'America/New_York'\n             *     },\n             *     series: [{\n             *         data: [1, 4, 3, 5]\n             *     }]\n             * });\n             *\n             * // Use the Time object\n             * console.log(\n             *        'Current time in New York',\n             *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n             * );\n             * ```\n             *\n             * Since v6.0.5, the time options were moved from the `global` obect to the\n             * `time` object, and time options can be set on each individual chart.\n             *\n             * @sample {highcharts|highstock}\n             *         highcharts/time/timezone/\n             *         Set the timezone globally\n             * @sample {highcharts}\n             *         highcharts/time/individual/\n             *         Set the timezone per chart instance\n             * @sample {highstock}\n             *         stock/time/individual/\n             *         Set the timezone per chart instance\n             *\n             * @since     6.0.5\n             * @optionparent time\n             */\n            time: {\n                /**\n                 * A custom `Date` class for advanced date handling. For example,\n                 * [JDate](https://github.com/tahajahangir/jdate) can be hooked in to\n                 * handle Jalali dates.\n                 *\n                 * @type      {*}\n                 * @since     4.0.4\n                 * @product   highcharts highstock gantt\n                 */\n                Date: void 0,\n                /**\n                 * A callback to return the time zone offset for a given datetime. It\n                 * takes the timestamp in terms of milliseconds since January 1 1970,\n                 * and returns the timezone offset in minutes. This provides a hook\n                 * for drawing time based charts in specific time zones using their\n                 * local DST crossover dates, with the help of external libraries.\n                 *\n                 * @see [global.timezoneOffset](#global.timezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/gettimezoneoffset/\n                 *         Use moment.js to draw Oslo time regardless of browser locale\n                 *\n                 * @type      {Highcharts.TimezoneOffsetCallbackFunction}\n                 * @since     4.1.0\n                 * @product   highcharts highstock gantt\n                 */\n                getTimezoneOffset: void 0,\n                /**\n                 * A named time zone. Supported time zone names rely on the browser\n                 * implementations, as described in the [mdn\n                 * docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#timezone).\n                 * If the given time zone is not recognized by the browser, Highcharts\n                 * provides a warning and falls back to returning a 0 offset,\n                 * corresponding to the UCT time zone.\n                 *\n                 * Until v11.2.0, this option depended on moment.js.\n                 *\n                 * @see [getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezone/ Europe/Oslo\n                 *\n                 * @type      {string}\n                 * @since     5.0.7\n                 * @product   highcharts highstock gantt\n                 */\n                timezone: void 0,\n                /**\n                 * The timezone offset in minutes. Positive values are west, negative\n                 * values are east of UTC, as in the ECMAScript\n                 * [getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n                 * method. Use this to display UTC based data in a predefined time zone.\n                 *\n                 * @see [time.getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezoneoffset/\n                 *         Timezone offset\n                 *\n                 * @since     3.0.8\n                 * @product   highcharts highstock gantt\n                 */\n                timezoneOffset: 0,\n                /**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * @sample {highcharts} highcharts/time/useutc-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/time/useutc-false/\n                 *         False\n                 */\n                useUTC: true\n            },\n            chart: ChartDefaults,\n            /**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/\n             *         Title options demonstrated\n             */\n            title: {\n                /**\n                 * When the title is floating, the plot area will not move to make space\n                 * for it.\n                 *\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/\n                 *         False by default\n                 * @sample {highcharts} highcharts/title/floating/\n                 *         True - title on top of the plot area\n                 * @sample {highstock} stock/chart/title-floating/\n                 *         True - title on top of the plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption title.floating\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption title.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\n                 * as if [floating](#title.floating) were `true`.\n                 *\n                 * @sample {highcharts} highcharts/title/verticalalign/\n                 *         Chart title in bottom right corner\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption title.verticalAlign\n                 */\n                /**\n                 * The x position of the title relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption title.x\n                 */\n                /**\n                 * The y position of the title relative to the alignment within\n                 * [chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](\n                 * #chart.spacingBottom). By default it depends on the font size.\n                 *\n                 * @sample {highcharts} highcharts/title/y/\n                 *         Title inside the plot area\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption title.y\n                 */\n                /**\n                 * CSS styles for the title. Use this for font styling, but use `align`,\n                 * `x` and `y` for text alignment.\n                 *\n                 * In styled mode, the title style is given in the `.highcharts-title`\n                 * class.\n                 *\n                 * @sample {highcharts} highcharts/title/style/\n                 *         Custom color and weight\n                 * @sample {highstock} stock/chart/title-style/\n                 *         Custom color and weight\n                 * @sample highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {highcharts|highmaps} { \"color\": \"#333333\", \"fontSize\": \"18px\" }\n                 * @default   {highstock} { \"color\": \"#333333\", \"fontSize\": \"16px\" }\n                 */\n                style: {\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    fontWeight: 'bold'\n                },\n                /**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `undefined`.\n                 *\n                 * @sample {highcharts} highcharts/title/text/\n                 *         Custom title\n                 * @sample {highstock} stock/chart/title-text/\n                 *         Custom title\n                 *\n                 * @default {highcharts|highmaps} Chart title\n                 * @default {highstock} undefined\n                 */\n                text: 'Chart title',\n                /**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @sample {highcharts} highcharts/title/margin-50/\n                 *         A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/\n                 *         The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/\n                 *         A chart title margin of 50\n                 *\n                 * @since 2.1\n                 */\n                margin: 15,\n                /**\n                 * Adjustment made to the title width, normally to reserve space for\n                 * the exporting burger menu.\n                 *\n                 * @sample highcharts/title/widthadjust/\n                 *         Wider menu, greater padding\n                 *\n                 * @since 4.2.5\n                 */\n                widthAdjust: -44\n            },\n            /**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highmaps} maps/title/subtitle/\n             *         Subtitle options demonstrated\n             */\n            subtitle: {\n                /**\n                 * When the subtitle is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/floating/\n                 *         Floating title and subtitle\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote floating at bottom right of plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption subtitle.floating\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 * @apioption subtitle.style\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption subtitle.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\n                 * floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption subtitle.verticalAlign\n                 */\n                /**\n                 * The x position of the subtitle relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption subtitle.x\n                 */\n                /**\n                 * The y position of the subtitle relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\n                 * is laid out below the title unless the title is floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption subtitle.y\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The subtitle of the chart.\n                 *\n                 * @sample {highcharts|highstock} highcharts/subtitle/text/\n                 *         Custom subtitle\n                 * @sample {highcharts|highstock} highcharts/subtitle/text-formatted/\n                 *         Formatted and linked text.\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at bottom right of plot area\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * Adjustment made to the subtitle width, normally to reserve space\n                 * for the exporting burger menu.\n                 *\n                 * @see [title.widthAdjust](#title.widthAdjust)\n                 *\n                 * @sample highcharts/title/widthadjust/\n                 *         Wider menu, greater padding\n                 *\n                 * @since 4.2.5\n                 */\n                widthAdjust: -44\n            },\n            /**\n             * The chart's caption, which will render below the chart and will be part\n             * of exported charts. The caption can be updated after chart initialization\n             * through the `Chart.update` or `Chart.caption.update` methods.\n             *\n             * @sample highcharts/caption/text/\n             *         A chart with a caption\n             * @since  7.2.0\n             */\n            caption: {\n                /**\n                 * When the caption is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.floating\n                 */\n                /**\n                 * The margin between the caption and the plot area.\n                 */\n                margin: 15,\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.useHTML\n                 */\n                /**\n                 * The x position of the caption relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption caption.x\n                 */\n                /**\n                 * The y position of the caption relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`.\n                 *\n                 * @type      {number}\n                 * @apioption caption.y\n                 */\n                /**\n                 * CSS styles for the caption.\n                 *\n                 * In styled mode, the caption style is given in the\n                 * `.highcharts-caption` class.\n                 *\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The caption text of the chart.\n                 *\n                 * @sample {highcharts} highcharts/caption/text/\n                 *         Custom caption\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the caption. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * The vertical alignment of the caption. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\n                 * floating.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'bottom'\n            },\n            /**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](\n             * #plotOptions.series) object. Then options for all series of a specific\n             * type are given in the plotOptions of that type, for example\n             * `plotOptions.line`. Next, options for one single series are given in\n             * [the series array](#series).\n             */\n            plotOptions: {},\n            /**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and create\n             * [custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */\n            legend: {\n                /**\n                 * The background color of the legend.\n                 *\n                 * @see In styled mode, the legend background fill can be applied with\n                 *      the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/backgroundcolor/\n                 *         Yellowish background\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption legend.backgroundColor\n                 */\n                /**\n                 * The width of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke width can be applied\n                 *      with the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderwidth/\n                 *         2px border width\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption legend.borderWidth\n                 */\n                /**\n                 * Enable or disable the legend. There is also a series-specific option,\n                 * [showInLegend](#plotOptions.series.showInLegend), that can hide the\n                 * series from the legend. In some series types this is `false` by\n                 * default, so it must set to `true` in order to show the legend for the\n                 * series.\n                 *\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 *\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @default {gantt} false\n                 */\n                enabled: true,\n                /**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/align/\n                 *         Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * If the [layout](legend.layout) is `horizontal` and the legend items\n                 * span over two lines or more, whether to align the items into vertical\n                 * columns. Setting this to `false` makes room for more items, but will\n                 * look more messy.\n                 *\n                 * @since 6.1.0\n                 */\n                alignColumns: true,\n                /**\n                 * A CSS class name to apply to the legend group.\n                 */\n                className: 'highcharts-no-tooltip',\n                /**\n                 * When the legend is floating, the plot area ignores it and is allowed\n                 * to be placed below it.\n                 *\n                 * @sample {highcharts} highcharts/legend/floating-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/legend/floating-true/\n                 *         True\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Floating legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption legend.floating\n                 */\n                /**\n                 * The layout of the legend items. Can be one of `horizontal` or\n                 * `vertical` or `proximate`. When `proximate`, the legend items will be\n                 * placed as close as possible to the graphs they're representing,\n                 * except in inverted charts or when the legend position doesn't allow\n                 * it.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/\n                 *         Vertical\n                 * @sample highcharts/legend/layout-proximate\n                 *         Labels proximate to the data\n                 * @sample {highstock} stock/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/\n                 *         Vertical with color axis gradient\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\", \"proximate\"]\n                 */\n                layout: 'horizontal',\n                /**\n                 * In a legend with horizontal layout, the itemDistance defines the\n                 * pixel distance between each item.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 * @sample {highstock} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 *\n                 * @type      {number}\n                 * @default   {highcharts} 20\n                 * @default   {highstock} 20\n                 * @default   {highmaps} 8\n                 * @since     3.0.3\n                 * @apioption legend.itemDistance\n                 */\n                /**\n                 * The pixel bottom margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginBottom: 2,\n                /**\n                 * The pixel top margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginTop: 2,\n                /**\n                 * The width for each legend item. By default the items are laid out\n                 * successively. In a [horizontal layout](legend.layout), if the items\n                 * are laid out across two rows or more, they will be vertically aligned\n                 * depending on the [legend.alignColumns](legend.alignColumns) option.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemwidth-default/\n                 *         Undefined by default\n                 * @sample {highcharts} highcharts/legend/itemwidth-80/\n                 *         80 for aligned legend items\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption legend.itemWidth\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for each legend label. Available variables relates to properties on\n                 * the series, or the point in case of pies.\n                 *\n                 * @type      {string}\n                 * @default   {name}\n                 * @since     1.3\n                 * @apioption legend.labelFormat\n                 */\n                /* eslint-disable valid-jsdoc */\n                /**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case of\n                 * pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps the context can also be a data class in case of a\n                 * `colorAxis`.\n                 *\n                 * @sample {highcharts} highcharts/legend/labelformatter/\n                 *         Add text\n                 * @sample {highmaps} maps/legend/labelformatter/\n                 *         Data classes with label formatter\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Point|Series>}\n                 */\n                labelFormatter: function () {\n                    /** eslint-enable valid-jsdoc */\n                    return this.name;\n                },\n                /**\n                 * Line height for the legend items. Deprecated as of 2.1\\. Instead,\n                 * the line height for each item can be set using\n                 * `itemStyle.lineHeight`, and the padding between items using\n                 * `itemMarginTop` and `itemMarginBottom`.\n                 *\n                 * @sample {highcharts} highcharts/legend/lineheight/\n                 *         Setting padding\n                 *\n                 * @deprecated\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @since     2.0\n                 * @product   highcharts gantt\n                 * @apioption legend.lineHeight\n                 */\n                /**\n                 * If the plot area sized is calculated automatically and the legend is\n                 * not floating, the legend margin is the space between the legend and\n                 * the axis labels or plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/margin-default/\n                 *         12 pixels by default\n                 * @sample {highcharts} highcharts/legend/margin-30/\n                 *         30 pixels\n                 *\n                 * @type      {number}\n                 * @default   12\n                 * @since     2.1\n                 * @apioption legend.margin\n                 */\n                /**\n                 * Maximum pixel height for the legend. When the maximum height is\n                 * extended, navigation will show.\n                 *\n                 * @type      {number}\n                 * @since     2.3.0\n                 * @apioption legend.maxHeight\n                 */\n                /**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke can be applied with the\n                 *      `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/bordercolor/\n                 *         Brown border\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                /**\n                 * The border corner radius of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderradius-default/\n                 *         Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/\n                 *         5px rounded\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 */\n                borderRadius: 0,\n                /**\n                 * Options for the paging or navigation appearing when the legend is\n                 * overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to\n                 * [increase the chart height in\n                 * export](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/).\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 */\n                navigation: {\n                    /**\n                     * How to animate the pages when navigating up or down. A value of\n                     * `true` applies the default navigation given in the\n                     * `chart.animation` option. Additional options can be given as an\n                     * object containing values for easing and duration.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @default   true\n                     * @since     2.2.4\n                     * @apioption legend.navigation.animation\n                     */\n                    /**\n                     * The pixel size of the up and down arrows in the legend paging\n                     * navigation.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {number}\n                     * @default   12\n                     * @since     2.2.4\n                     * @apioption legend.navigation.arrowSize\n                     */\n                    /**\n                     * Whether to enable the legend navigation. In most cases, disabling\n                     * the navigation results in an unwanted overflow.\n                     *\n                     * See also the\n                     * [adapt chart to legend](https://github.com/highcharts/adapt-chart-to-legend)\n                     * plugin for a solution to extend the chart height to make room for\n                     * the legend, optionally in exported charts only.\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     4.2.4\n                     * @apioption legend.navigation.enabled\n                     */\n                    /**\n                     * Text styles for the legend page navigation.\n                     *\n                     * @see In styled mode, the navigation items are styled with the\n                     *      `.highcharts-legend-navigation` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {Highcharts.CSSObject}\n                     * @since     2.2.4\n                     * @apioption legend.navigation.style\n                     */\n                    style: {\n                        fontSize: '0.8em'\n                    },\n                    /**\n                     * The color for the active up or down arrow in the legend page\n                     * navigation.\n                     *\n                     * @see In styled mode, the active arrow be styled with the\n                     *      `.highcharts-legend-nav-active` class.\n                     *\n                     * @sample  {highcharts} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     * @sample  {highstock} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    activeColor: \"#0022ff\" /* Palette.highlightColor100 */,\n                    /**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @see In styled mode, the inactive arrow be styled with the\n                     *      `.highcharts-legend-nav-inactive` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    inactiveColor: \"#cccccc\" /* Palette.neutralColor20 */\n                },\n                /**\n                 * The inner padding of the legend box.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @type      {number}\n                 * @default   8\n                 * @since     2.2.0\n                 * @apioption legend.padding\n                 */\n                /**\n                 * Whether to reverse the order of the legend items compared to the\n                 * order of the series or points as defined in the configuration object.\n                 *\n                 * @see [yAxis.reversedStacks](#yAxis.reversedStacks),\n                 *      [series.legendIndex](#series.legendIndex)\n                 *\n                 * @sample {highcharts} highcharts/legend/reversed/\n                 *         Stacked bar with reversed legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.2.5\n                 * @apioption legend.reversed\n                 */\n                /**\n                 * Whether to show the symbol on the right side of the text rather than\n                 * the left side. This is common in Arabic and Hebrew.\n                 *\n                 * @sample {highcharts} highcharts/legend/rtl/\n                 *         Symbol to the right\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption legend.rtl\n                 */\n                /**\n                 * CSS styles for the legend area. In the 1.x versions the position\n                 * of the legend area was determined by CSS. In 2.x, the position is\n                 * determined by properties like `align`, `verticalAlign`, `x` and `y`,\n                 * but the styles are still parsed for backwards compatibility.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @product   highcharts highstock\n                 * @apioption legend.style\n                 */\n                /**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `undefined` to wrap\n                 * text instead. A `width` property can be added to control the text\n                 * width.\n                 *\n                 * @see In styled mode, the legend items can be styled with the\n                 *      `.highcharts-legend-item` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemstyle/\n                 *         Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"0.75em\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}\n                 */\n                itemStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /**\n                     * @ignore\n                     */\n                    cursor: 'pointer',\n                    /**\n                     * @ignore\n                     */\n                    fontSize: '0.8em',\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'none',\n                    /**\n                     * @ignore\n                     */\n                    textOverflow: 'ellipsis'\n                },\n                /**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @see In styled mode, the hovered legend items can be styled with\n                 *      the `.highcharts-legend-item:hover` pesudo-class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/\n                 *         Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#000000\"}\n                 */\n                itemHoverStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @see In styled mode, the hidden legend items can be styled with\n                 *      the `.highcharts-legend-item-hidden` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/\n                 *         Darker gray color\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#cccccc\"}\n                 */\n                itemHiddenStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'line-through'\n                },\n                /**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {boolean|Highcharts.CSSObject}\n                 */\n                shadow: false,\n                /**\n                 * Default styling for the checkbox next to a legend item when\n                 * `showCheckbox` is true.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 * @default {\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}\n                 */\n                itemCheckboxStyle: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    width: '13px',\n                    /**\n                     * @ignore\n                     */\n                    height: '13px'\n                },\n                // itemWidth: undefined,\n                /**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @since 5.0.0\n                 */\n                squareSymbol: true,\n                /**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * Note: This option is a default source of color axis height, if the\n                 * [colorAxis.height](https://api.highcharts.com/highcharts/colorAxis.height)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolHeight\n                 */\n                /**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`, effectively\n                 * creating a circle.\n                 *\n                 * For color axis scales, it defaults to 3.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolRadius\n                 */\n                /**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * Note: This option is a default source of color axis width, if the\n                 * [colorAxis.width](https://api.highcharts.com/highcharts/colorAxis.width)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 *\n                 * @type      {number}\n                 * @apioption legend.symbolWidth\n                 */\n                /**\n                 * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the legend item texts.\n                 *\n                 * Prior to 4.1.7, when using HTML, [legend.navigation](\n                 * #legend.navigation) was disabled.\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption legend.useHTML\n                 */\n                /**\n                 * For a color axis with data classes, how many decimals to render in\n                 * the legend. The default preserves the decimals of the range numbers.\n                 *\n                 * @type      {number}\n                 * @default   -1\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueDecimals\n                 */\n                /**\n                 * For a color axis with data classes, a suffix for the range numbers in\n                 * the legend.\n                 *\n                 * @type      {string}\n                 * @default   ''\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueSuffix\n                 */\n                /**\n                 * The width of the legend box. If a number is set, it translates to\n                 * pixels. Since v7.0.2 it allows setting a percent string of the full\n                 * chart width, for example `40%`.\n                 *\n                 * Defaults to the full chart width for legends below or above the\n                 * chart, half the chart width for legends to the left and right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 * @sample {highcharts} highcharts/legend/width-percent/\n                 *         A percent of the chart width\n                 *\n                 * @type      {number|string}\n                 * @since     2.0\n                 * @apioption legend.width\n                 */\n                /**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolpadding/\n                 *         Greater symbol width and padding\n                 */\n                symbolPadding: 5,\n                /**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * When the [layout](#legend.layout) option is `proximate`, the\n                 * `verticalAlign` option doesn't apply.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'bottom',\n                // width: undefined,\n                /**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 *\n                 * @since 2.0\n                 */\n                x: 0,\n                /**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @since 2.0\n                 */\n                y: 0,\n                /**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/\n                 *         Legend title\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend with title\n                 *\n                 * @since 3.0\n                 */\n                title: {\n                    /**\n                     * A text or HTML string for the title.\n                     *\n                     * @type      {string}\n                     * @since     3.0\n                     * @apioption legend.title.text\n                     */\n                    /**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @see In styled mode, the legend title is styled with the\n                     *      `.highcharts-legend-title` class.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"fontSize\": \"0.75em\", \"fontWeight\": \"bold\"}\n                     * @since   3.0\n                     */\n                    style: {\n                        /**\n                         * @ignore\n                         */\n                        fontSize: '0.8em',\n                        /**\n                         * @ignore\n                         */\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            /**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             */\n            loading: {\n                /**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.hideDuration\n                 */\n                /**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.showDuration\n                 */\n                /**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @see In styled mode, the loading label is styled with the\n                 *      `.highcharts-loading-inner` class.\n                 *\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/\n                 *         Vertically centered\n                 * @sample {highstock} stock/loading/general/\n                 *         Label styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}\n                 * @since   1.2.0\n                 */\n                labelStyle: {\n                    /**\n                     * @ignore\n                     */\n                    fontWeight: 'bold',\n                    /**\n                     * @ignore\n                     */\n                    position: 'relative',\n                    /**\n                     * @ignore\n                     */\n                    top: '45%'\n                },\n                /**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * In styled mode, the loading label is styled with the\n                 * `.highcharts-loading` class.\n                 *\n                 * @sample  {highcharts|highmaps} highcharts/loading/style/\n                 *          Gray plot area, white text\n                 * @sample  {highstock} stock/loading/general/\n                 *          Gray plot area, white text\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}\n                 * @since   1.2.0\n                 */\n                style: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                    /**\n                     * @ignore\n                     */\n                    opacity: 0.5,\n                    /**\n                     * @ignore\n                     */\n                    textAlign: 'center'\n                }\n            },\n            /**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @declare Highcharts.TooltipOptions\n             */\n            tooltip: {\n                /**\n                 * The color of the tooltip border. When `undefined`, the border takes\n                 * the color of the corresponding series or point.\n                 *\n                 * Note that the [borderWidth](#tooltip.borderWidth) is usually 0 by\n                 * default, so the border color may not be visible until a border width\n                 * is set.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ Follow\n                 *         series by default\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-black/ Black\n                 *         border\n                 * @sample {highstock} stock/tooltip/general/ Styled tooltip\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and\n                 *         border demo\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption tooltip.borderColor\n                 */\n                /**\n                 * A CSS class name to apply to the tooltip's container div,\n                 * allowing unique CSS styling for each chart.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.className\n                 */\n                /**\n                 * Since 4.1, the crosshair definitions are moved to the Axis object\n                 * in order for a better separation from the tooltip. See\n                 * [xAxis.crosshair](#xAxis.crosshair).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/crosshairs-x/\n                 *         Enable a crosshair for the x value\n                 *\n                 * @deprecated\n                 *\n                 * @type      {*}\n                 * @default   true\n                 * @apioption tooltip.crosshairs\n                 */\n                /**\n                 * Distance from point to tooltip in pixels.\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @apioption tooltip.distance\n                 */\n                /**\n                 * Whether the tooltip should follow the mouse as it moves across\n                 * columns, pie slices and other point types with an extent.\n                 * By default it behaves this way for pie, polygon, map, sankey\n                 * and wordcloud series by override in the `plotOptions`\n                 * for those series types.\n                 *\n                 * Does not apply if [split](#tooltip.split) is `true`.\n                 *\n                 * For touch moves to behave the same way, [followTouchMove](\n                 * #tooltip.followTouchMove) must be `true` also.\n                 *\n                 * @sample highcharts/tooltip/followpointer/\n                 *         Tooltip follow pointer comparison\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} false\n                 * @default   {highmaps} true\n                 * @since     3.0\n                 * @apioption tooltip.followPointer\n                 */\n                /**\n                 * Whether the tooltip should update as the finger moves on a touch\n                 * device. If this is `true` and [chart.panning](#chart.panning) is\n                 * set,`followTouchMove` will take over one-finger touches, so the user\n                 * needs to use two fingers for zooming and panning.\n                 *\n                 * Note the difference to [followPointer](#tooltip.followPointer) that\n                 * only defines the _position_ of the tooltip. If `followPointer` is\n                 * false in for example a column series, the tooltip will show above or\n                 * below the column, but as `followTouchMove` is true, the tooltip will\n                 * jump from column to column as the user swipes across the plot area.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} true\n                 * @default   {highstock} true\n                 * @default   {highmaps} false\n                 * @since     3.0.1\n                 * @apioption tooltip.followTouchMove\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for the whole tooltip. When format strings are a requirement, it is\n                 * usually more convenient to use `headerFormat`, `pointFormat` and\n                 * `footerFormat`, but the `format` option allows combining them into\n                 * one setting.\n                 *\n                 * The context of the format string is the same as that of the\n                 * `formatter` callback.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/format-shared/\n                 *         Format for shared tooltip\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since 11.1.0\n                 * @apioption tooltip.format\n                 */\n                /**\n                 * Callback function to format the text of the tooltip from scratch. In\n                 * case of single or [shared](#tooltip.shared) tooltips, a string should\n                 * be returned. In case of [split](#tooltip.split) tooltips, it should\n                 * return an array where the first item is the header, and subsequent\n                 * items are mapped to the points. Return `false` to disable tooltip for\n                 * a specific point on series.\n                 *\n                 * A subset of HTML is supported. Unless `useHTML` is true, the HTML of\n                 * the tooltip is parsed and converted to SVG, therefore this isn't a\n                 * complete HTML renderer. The following HTML tags are supported: `b`,\n                 * `br`, `em`, `i`, `span`, `strong`. Spans can be styled with a `style`\n                 * attribute, but only text-related CSS, that is shared with SVG, is\n                 * handled.\n                 *\n                 * The available data in the formatter differ a bit depending on whether\n                 * the tooltip is shared or split, or belongs to a single point. In a\n                 * shared/split tooltip, all properties except `x`, which is common for\n                 * all points, are kept in an array, `this.points`.\n                 *\n                 * Available data are:\n                 *\n                 * - **this.percentage (not shared) /**\n                 *   **this.points[i].percentage (shared)**:\n                 *   Stacked series and pies only. The point's percentage of the total.\n                 *\n                 * - **this.point (not shared) / this.points[i].point (shared)**:\n                 *   The point object. The point name, if defined, is available through\n                 *   `this.point.name`.\n                 *\n                 * - **this.points**:\n                 *   In a shared tooltip, this is an array containing all other\n                 *   properties for each point.\n                 *\n                 * - **this.series (not shared) / this.points[i].series (shared)**:\n                 *   The series object. The series name is available through\n                 *   `this.series.name`.\n                 *\n                 * - **this.total (not shared) / this.points[i].total (shared)**:\n                 *   Stacked series only. The total value at this point's x value.\n                 *\n                 * - **this.x**:\n                 *   The x value. This property is the same regardless of the tooltip\n                 *   being shared or not.\n                 *\n                 * - **this.y (not shared) / this.points[i].y (shared)**:\n                 *   The y value.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/formatter-simple/\n                 *         Simple string formatting\n                 * @sample {highcharts} highcharts/tooltip/formatter-shared/\n                 *         Formatting with shared tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Formatting with split tooltip\n                 * @sample highcharts/tooltip/formatter-conditional-default/\n                 *         Extending default formatter\n                 * @sample {highstock} stock/tooltip/formatter/\n                 *         Formatting with shared tooltip\n                 * @sample {highmaps} maps/tooltip/formatter/\n                 *         String formatting\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.formatter\n                 */\n                /**\n                 * Callback function to format the text of the tooltip for\n                 * visible null points.\n                 * Works analogously to [formatter](#tooltip.formatter).\n                 *\n                 * @sample highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.nullFormatter\n                 */\n                /**\n                 * Whether to allow the tooltip to render outside the chart's SVG\n                 * element box. By default (`false`), the tooltip is rendered within the\n                 * chart's SVG element, which results in the tooltip being aligned\n                 * inside the chart area. For small charts, this may result in clipping\n                 * or overlapping. When `true`, a separate SVG element is created and\n                 * overlaid on the page, allowing the tooltip to be aligned inside the\n                 * page itself.\n                 *\n                 * Defaults to `true` if `chart.scrollablePlotArea` is activated,\n                 * otherwise `false`.\n                 *\n                 * @sample highcharts/tooltip/outside\n                 *         Small charts with tooltips outside\n                 *\n                 * @type      {boolean|undefined}\n                 * @default   undefined\n                 * @since     6.1.1\n                 * @apioption tooltip.outside\n                 */\n                /**\n                 * A callback function for formatting the HTML output for a single point\n                 * in the tooltip. Like the `pointFormat` string, but with more\n                 * flexibility.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n                 * @since     4.1.0\n                 * @context   Highcharts.Point\n                 * @apioption tooltip.pointFormatter\n                 */\n                /**\n                 * A callback function to place the tooltip in a custom position. The\n                 * callback receives three parameters: `labelWidth`, `labelHeight` and\n                 * `point`, where point contains values for `plotX` and `plotY` telling\n                 * where the reference point is in the plot area. Add `chart.plotLeft`\n                 * and `chart.plotTop` to get the full coordinates.\n                 *\n                 * To find the actual hovered `Point` instance, use\n                 * `this.chart.hoverPoint`. For shared or split tooltips, all the hover\n                 * points are available in `this.chart.hoverPoints`.\n                 *\n                 * Since v7, when [tooltip.split](#tooltip.split) option is enabled,\n                 * positioner is called for each of the boxes separately, including\n                 * xAxis header. xAxis header is not a point, instead `point` argument\n                 * contains info: `{ plotX: Number, plotY: Number, isHeader: Boolean }`\n                 *\n                 * The return should be an object containing x and y values, for example\n                 * `{ x: 100, y: 100 }`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/positioner/\n                 *         A fixed tooltip position on top of the chart\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Split tooltip with fixed positions\n                 * @sample {highstock} stock/tooltip/positioner-scrollable-plotarea/\n                 *         Scrollable plot area combined with tooltip positioner\n                 *\n                 * @type      {Highcharts.TooltipPositionerCallbackFunction}\n                 * @since     2.2.4\n                 * @apioption tooltip.positioner\n                 */\n                /**\n                 * Split the tooltip into one label per series, with the header close\n                 * to the axis. This is recommended over [shared](#tooltip.shared)\n                 * tooltips for charts with multiple line series, generally making them\n                 * easier to read. This option takes precedence over `tooltip.shared`.\n                 *\n                 * Not supported for [polar](#chart.polar) and [inverted](#chart.inverted) charts.\n                 *\n                 * @productdesc {highstock} In Highcharts Stock, tooltips are split\n                 * by default since v6.0.0. Stock charts typically contain\n                 * multi-dimension points and multiple panes, making split tooltips\n                 * the preferred layout over\n                 * the previous `shared` tooltip.\n                 *\n                 * @sample highcharts/tooltip/split/\n                 *         Split tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Split tooltip and custom formatter callback\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} true\n                 * @since     5.0.0\n                 * @product   highcharts highstock\n                 * @apioption tooltip.split\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing, when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @type      {boolean}\n                 * @since     8.0.1\n                 * @apioption tooltip.stickOnContact\n                 */\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption tooltip.useHTML\n                 */\n                /**\n                 * How many decimals to show in each series' y value. This is\n                 * overridable in each series' tooltip options object. The default is to\n                 * preserve all decimals.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {number|undefined}\n                 * @since     2.2\n                 * @apioption tooltip.valueDecimals\n                 */\n                /**\n                 * A string to prepend to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valuePrefix\n                 */\n                /**\n                 * A string to append to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valueSuffix\n                 */\n                /**\n                 * The format for the date in the tooltip header if the X axis is a\n                 * datetime axis. The default is a best guess based on the smallest\n                 * distance between points in the chart.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/xdateformat/\n                 *         A different format\n                 *\n                 * @type      {string}\n                 * @product   highcharts highstock gantt\n                 * @apioption tooltip.xDateFormat\n                 */\n                /**\n                 * How many decimals to show for the `point.change`\n                 * or the `point.cumulativeSum` value when the `series.compare`\n                 * or the `series.cumulative` option is set.\n                 * This is overridable in each series' tooltip options object.\n                 *\n                 * @type      {number}\n                 * @default   2\n                 * @since     1.0.1\n                 * @product   highstock\n                 * @apioption tooltip.changeDecimals\n                 */\n                /**\n                 * Enable or disable the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/enabled/\n                 *         Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n                 *         Disable tooltip and show values on chart instead\n                 */\n                enabled: true,\n                /**\n                 * Enable or disable animation of the tooltip.\n                 *\n                 * @type       {boolean}\n                 * @default    true\n                 * @since      2.3.0\n                 */\n                animation: svg,\n                /**\n                 * The radius of the rounded border corners.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         Default border radius\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/\n                 *         Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 */\n                borderRadius: 3,\n                /**\n                 * For series on datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the replacement codes, see\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat).\n                 *\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 *\n                 * @type    {Highcharts.Dictionary<string>}\n                 * @product highcharts highstock gantt\n                 */\n                dateTimeLabelFormats: {\n                    /** @internal */\n                    millisecond: '%A, %e %b, %H:%M:%S.%L',\n                    /** @internal */\n                    second: '%A, %e %b, %H:%M:%S',\n                    /** @internal */\n                    minute: '%A, %e %b, %H:%M',\n                    /** @internal */\n                    hour: '%A, %e %b, %H:%M',\n                    /** @internal */\n                    day: '%A, %e %b %Y',\n                    /** @internal */\n                    week: 'Week from %A, %e %b %Y',\n                    /** @internal */\n                    month: '%B %Y',\n                    /** @internal */\n                    year: '%Y'\n                },\n                /**\n                 * A string to append to the tooltip format.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @since 2.2\n                 */\n                footerFormat: '',\n                /**\n                 * The name of a symbol to use for the border around the tooltip\n                 * header. Applies only when [tooltip.split](#tooltip.split) is\n                 * enabled.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @see [tooltip.shape](#tooltip.shape)\n                 *\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Different shapes for header and split boxes\n                 *\n                 * @type       {Highcharts.TooltipShapeValue}\n                 * @validvalue [\"callout\", \"rect\"]\n                 * @since      7.0\n                 */\n                headerShape: 'callout',\n                /**\n                 * The number of milliseconds to wait until the tooltip is hidden when\n                 * mouse out from a point or chart.\n                 *\n                 * @since 3.0\n                 */\n                hideDelay: 500,\n                /**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @since 5.0.0\n                 */\n                padding: 8,\n                /**\n                 * The name of a symbol to use for the border around the tooltip. Can\n                 * be one of: `\"callout\"`, `\"circle\"` or `\"rect\"`. When\n                 * [tooltip.split](#tooltip.split)\n                 * option is enabled, shape is applied to all boxes except header, which\n                 * is controlled by\n                 * [tooltip.headerShape](#tooltip.headerShape).\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @type  {Highcharts.TooltipShapeValue}\n                 * @since 4.0\n                 */\n                shape: 'callout',\n                /**\n                 * When the tooltip is shared, the entire plot area will capture mouse\n                 * movement or touch events. Tooltip texts for series types with ordered\n                 * data (not pie, scatter, flags etc) will be shown in a single bubble.\n                 * This is recommended for single series charts and for tablet/mobile\n                 * optimized charts.\n                 *\n                 * See also [tooltip.split](#tooltip.split), that is better suited for\n                 * charts with many series, especially line-type series. The\n                 * `tooltip.split` option takes precedence over `tooltip.shared`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/shared-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/tooltip/shared-true/\n                 *         True\n                 * @sample {highcharts} highcharts/tooltip/shared-x-crosshair/\n                 *         True with x axis crosshair\n                 * @sample {highcharts} highcharts/tooltip/shared-true-mixed-types/\n                 *         True with mixed series types\n                 *\n                 * @since   2.1\n                 * @product highcharts highstock\n                 */\n                shared: false,\n                /**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense. This\n                 * applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/\n                 *         50 px on graph\n                 *\n                 * @type    {number}\n                 * @default 10/25\n                 * @since   1.2.0\n                 * @product highcharts highstock\n                 */\n                snap: isTouchDevice ? 25 : 10,\n                /**\n                 * The HTML of the tooltip header line. Variables are enclosed by\n                 * curly brackets. Available variables are `point.key`, `series.name`,\n                 * `series.color` and other members from the `point` and `series`\n                 * objects. The `point.key` variable contains the category name, x\n                 * value or datetime string depending on the type of axis. For datetime\n                 * axes, the `point.key` date format can be set using\n                 * `tooltip.xDateFormat`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.headerFormat\n                 */\n                headerFormat: '<span style=\"font-size: 0.8em\">{point.key}</span><br/>',\n                /**\n                 * The HTML of the null point's line in the tooltip. Works analogously\n                 * to [pointFormat](#tooltip.pointFormat).\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.nullFormat\n                 */\n                /**\n                 * The HTML of the point's line in the tooltip. Variables are enclosed\n                 * by curly brackets. Available variables are `point.x`, `point.y`,\n                 * `series.name` and `series.color` and other properties on the same\n                 * form. Furthermore, `point.y` can be extended by the\n                 * `tooltip.valuePrefix` and `tooltip.valueSuffix` variables. This can\n                 * also be overridden for each series, which makes it a good hook for\n                 * displaying units.\n                 *\n                 * In styled mode, the dot is colored by a class name rather\n                 * than the point color.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/pointformat/\n                 *         A different point format with value suffix\n                 * @sample {highcharts|highstock} highcharts/tooltip/pointformat-extra-information/\n                 *         Show extra information about points in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type       {string}\n                 * @since      2.2\n                 * @apioption  tooltip.pointFormat\n                 */\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n                /**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/\n                 *         Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                /**\n                 * The pixel width of the tooltip border. Defaults to 0 for single\n                 * tooltips and 1 for split tooltips.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         2 pixels\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/\n                 *         No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {number}\n                 */\n                borderWidth: void 0,\n                /**\n                 * Whether to apply a drop shadow to the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/\n                 *         False\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         Fixed tooltip position, border and shadow disabled\n                 *\n                 * @type {boolean|Highcharts.ShadowOptionsObject}\n                 */\n                shadow: true,\n                /**\n                 * Prevents the tooltip from switching or closing when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @since 8.0.1\n                 */\n                stickOnContact: false,\n                /**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * Note that the default `pointerEvents` style makes the tooltip ignore\n                 * mouse events, so in order to use clickable tooltips, this value must\n                 * be set to `auto`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/style/\n                 *         Greater padding, bold text\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @internal */\n                    cursor: 'default',\n                    /** @internal */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @since 2.2\n                 */\n                useHTML: false\n            },\n            /**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             */\n            credits: {\n                /**\n                 * Credits for map source to be concatenated with conventional credit\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapTextFull](#credits.mapTextFull)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   \\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapText\n                 */\n                /**\n                 * Detailed credits for map source to be displayed on hover of credits\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapText](#credits.mapText)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   {geojson.copyright}\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapTextFull\n                 */\n                /**\n                 * Whether to show the credits text.\n                 *\n                 * @sample {highcharts} highcharts/credits/enabled-false/\n                 *         Credits disabled\n                 * @sample {highstock} stock/credits/enabled/\n                 *         Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/\n                 *         Credits disabled\n                 */\n                enabled: true,\n                /**\n                 * The URL for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                href: 'https://www.highcharts.com?credits',\n                /**\n                 * Position configuration for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 *\n                 * @type    {Highcharts.AlignObject}\n                 * @since   2.1\n                 */\n                position: {\n                    /** @internal */\n                    align: 'right',\n                    /** @internal */\n                    x: -10,\n                    /** @internal */\n                    verticalAlign: 'bottom',\n                    /** @internal */\n                    y: -5\n                },\n                /**\n                 * CSS styles for the credits label.\n                 *\n                 * @see In styled mode, credits styles can be set with the\n                 *      `.highcharts-credits` class.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    cursor: 'pointer',\n                    /** @internal */\n                    color: \"#999999\" /* Palette.neutralColor40 */,\n                    /** @internal */\n                    fontSize: '0.6em'\n                },\n                /**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to\n                 * `Highcharts @ {map-credits}`. Otherwise, it defaults to\n                 * `Highcharts.com`.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                text: 'Highcharts.com'\n            }\n        };\n        /* eslint-disable spaced-comment */\n\n        defaultOptions.chart.styledMode = false;\n\n        '';\n        const defaultTime = new Time(defaultOptions.time);\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions\n         * for outside modules wasn't enough because the setOptions method created a new\n         * object.\n         *\n         * @function Highcharts.getOptions\n         *\n         * @return {Highcharts.Options}\n         * Default options.\n         */\n        function getOptions() {\n            return defaultOptions;\n        }\n        /**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @sample highcharts/global/useutc-false Setting a global option\n         * @sample highcharts/members/setoptions Applying a global theme\n         *\n         * @function Highcharts.setOptions\n         *\n         * @param {Highcharts.Options} options\n         * The new custom chart options.\n         *\n         * @return {Highcharts.Options}\n         * Updated options.\n         */\n        function setOptions(options) {\n            // Copy in the default options\n            merge(true, defaultOptions, options);\n            // Update the time object\n            if (options.time || options.global) {\n                if (H.time) {\n                    H.time.update(merge(defaultOptions.global, defaultOptions.time, options.global, options.time));\n                }\n                else {\n                    /**\n                     * Global `Time` object with default options. Since v6.0.5, time\n                     * settings can be applied individually for each chart. If no\n                     * individual settings apply, this `Time` object is shared by all\n                     * instances.\n                     *\n                     * @name Highcharts.time\n                     * @type {Highcharts.Time}\n                     */\n                    H.time = defaultTime;\n                }\n            }\n            return defaultOptions;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DefaultOptions = {\n            defaultOptions,\n            defaultTime,\n            getOptions,\n            setOptions\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"plotBox\"|\"spacingBox\"} Highcharts.ButtonRelativeToValue\n         */\n        /**\n         * Gets fired when a series is added to the chart after load time, using the\n         * `addSeries` method. Returning `false` prevents the series from being added.\n         *\n         * @callback Highcharts.ChartAddSeriesCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {Highcharts.ChartAddSeriesEventObject} event\n         *        The event that occured.\n         */\n        /**\n         * Contains common event information. Through the `options` property you can\n         * access the series options that were passed to the `addSeries` method.\n         *\n         * @interface Highcharts.ChartAddSeriesEventObject\n         */ /**\n        * The series options that were passed to the `addSeries` method.\n        * @name Highcharts.ChartAddSeriesEventObject#options\n        * @type {Highcharts.SeriesOptionsType}\n        */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.ChartAddSeriesEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The event target.\n        * @name Highcharts.ChartAddSeriesEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.ChartAddSeriesEventObject#type\n        * @type {\"addSeries\"}\n        */\n        /**\n         * Gets fired when clicking on the plot background.\n         *\n         * @callback Highcharts.ChartClickCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {Highcharts.PointerEventObject} event\n         *        The event that occured.\n         */\n        /**\n         * Contains an axes of the clicked spot.\n         *\n         * @interface Highcharts.ChartClickEventAxisObject\n         */ /**\n        * Axis at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#axis\n        * @type {Highcharts.Axis}\n        */ /**\n        * Axis value at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#value\n        * @type {number}\n        */\n        /**\n         * Contains information about the clicked spot on the chart. Remember the unit\n         * of a datetime axis is milliseconds since 1970-01-01 00:00:00.\n         *\n         * @interface Highcharts.ChartClickEventObject\n         * @extends Highcharts.PointerEventObject\n         */ /**\n        * Information about the x-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#xAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the y-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#yAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the z-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#zAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>|undefined}\n        */\n        /**\n         * Gets fired when the chart is finished loading.\n         *\n         * @callback Highcharts.ChartLoadCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Fires when the chart is redrawn, either after a call to `chart.redraw()` or\n         * after an axis, series or point is modified with the `redraw` option set to\n         * `true`.\n         *\n         * @callback Highcharts.ChartRedrawCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired after initial load of the chart (directly after the `load` event),\n         * and after each redraw (directly after the `redraw` event).\n         *\n         * @callback Highcharts.ChartRenderCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired when an area of the chart has been selected. The default action\n         * for the selection event is to zoom the chart to the selected area. It can be\n         * prevented by calling `event.preventDefault()` or return false.\n         *\n         * @callback Highcharts.ChartSelectionCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {Highcharts.SelectEventObject} event\n         *        Event informations\n         *\n         * @return {boolean|undefined}\n         *         Return false to prevent the default action, usually zoom.\n         */\n        (''); // detach doclets above\n\n        return DefaultOptions;\n    });\n    _registerModule(_modules, 'Core/Templating.js', [_modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (D, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, defaultTime } = D;\n        const { extend, getNestedProperty, isArray, isNumber, isObject, pick, pInt } = U;\n        const helpers = {\n            // Built-in helpers\n            add: (a, b) => a + b,\n            divide: (a, b) => (b !== 0 ? a / b : ''),\n            // eslint-disable-next-line eqeqeq\n            eq: (a, b) => a == b,\n            each: function (arr) {\n                const match = arguments[arguments.length - 1];\n                return isArray(arr) ?\n                    arr.map((item, i) => format(match.body, extend(isObject(item) ? item : { '@this': item }, {\n                        '@index': i,\n                        '@first': i === 0,\n                        '@last': i === arr.length - 1\n                    }))).join('') :\n                    false;\n            },\n            ge: (a, b) => a >= b,\n            gt: (a, b) => a > b,\n            'if': (condition) => !!condition,\n            le: (a, b) => a <= b,\n            lt: (a, b) => a < b,\n            multiply: (a, b) => a * b,\n            // eslint-disable-next-line eqeqeq\n            ne: (a, b) => a != b,\n            subtract: (a, b) => a - b,\n            unless: (condition) => !condition\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime](https://www.php.net/manual/en/function.strftime.php) function.\n         * Additional formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * Since v6.0.5, all internal dates are formatted through the\n         * {@link Highcharts.Chart#time} instance to respect chart-level time settings.\n         * The `Highcharts.dateFormat` function only reflects global time settings set\n         * with `setOptions`.\n         *\n         * Supported format keys:\n         * - `%a`: Short weekday, like 'Mon'\n         * - `%A`: Long weekday, like 'Monday'\n         * - `%d`: Two digit day of the month, 01 to 31\n         * - `%e`: Day of the month, 1 through 31\n         * - `%w`: Day of the week, 0 through 6\n         * - `%b`: Short month, like 'Jan'\n         * - `%B`: Long month, like 'January'\n         * - `%m`: Two digit month number, 01 through 12\n         * - `%y`: Two digits year, like 09 for 2009\n         * - `%Y`: Four digits year, like 2009\n         * - `%H`: Two digits hours in 24h format, 00 through 23\n         * - `%k`: Hours in 24h format, 0 through 23\n         * - `%I`: Two digits hours in 12h format, 00 through 11\n         * - `%l`: Hours in 12h format, 1 through 12\n         * - `%M`: Two digits minutes, 00 through 59\n         * - `%p`: Upper case AM or PM\n         * - `%P`: Lower case AM or PM\n         * - `%S`: Two digits seconds, 00 through 59\n         * - `%L`: Milliseconds (naming from Ruby)\n         *\n         * @function Highcharts.dateFormat\n         *\n         * @param {string} format\n         *        The desired format where various time representations are prefixed\n         *        with `%`.\n         *\n         * @param {number} timestamp\n         *        The JavaScript timestamp.\n         *\n         * @param {boolean} [capitalize=false]\n         *        Upper case first letter in the return.\n         *\n         * @return {string}\n         *         The formatted date.\n         */\n        function dateFormat(format, timestamp, capitalize) {\n            return defaultTime.dateFormat(format, timestamp, capitalize);\n        }\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @example\n         * let s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         *\n         * @function Highcharts.format\n         *\n         * @param {string} str\n         *        The string to format.\n         *\n         * @param {Record<string, *>} ctx\n         *        The context, a collection of key-value pairs where each key is\n         *        replaced by its value.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        A `Chart` instance used to get numberFormatter and time.\n         *\n         * @return {string}\n         *         The formatted string.\n         */\n        function format(str = '', ctx, chart) {\n            const regex = /\\{([a-zA-Z0-9\\:\\.\\,;\\-\\/<>%_@\"'= #\\(\\)]+)\\}/g, \n            // The sub expression regex is the same as the top expression regex,\n            // but except parens and block helpers (#), and surrounded by parens\n            // instead of curly brackets.\n            subRegex = /\\(([a-zA-Z0-9\\:\\.\\,;\\-\\/<>%_@\"'= ]+)\\)/g, matches = [], floatRegex = /f$/, decRegex = /\\.([0-9])/, lang = defaultOptions.lang, time = chart && chart.time || defaultTime, numberFormatter = chart && chart.numberFormatter || numberFormat;\n            /*\n             * Get a literal or variable value inside a template expression. May be\n             * extended with other types like string or null if needed, but keep it\n             * small for now.\n             */\n            const resolveProperty = (key = '') => {\n                let n;\n                // Literals\n                if (key === 'true') {\n                    return true;\n                }\n                if (key === 'false') {\n                    return false;\n                }\n                if ((n = Number(key)).toString() === key) {\n                    return n;\n                }\n                // Variables and constants\n                return getNestedProperty(key, ctx);\n            };\n            let match, currentMatch, depth = 0, hasSub;\n            // Parse and create tree\n            while ((match = regex.exec(str)) !== null) {\n                // When a sub expression is found, it is evaluated first, and the\n                // results recursively evaluated until no subexpression exists.\n                const subMatch = subRegex.exec(match[1]);\n                if (subMatch) {\n                    match = subMatch;\n                    hasSub = true;\n                }\n                if (!currentMatch || !currentMatch.isBlock) {\n                    currentMatch = {\n                        ctx,\n                        expression: match[1],\n                        find: match[0],\n                        isBlock: match[1].charAt(0) === '#',\n                        start: match.index,\n                        startInner: match.index + match[0].length,\n                        length: match[0].length\n                    };\n                }\n                // Identify helpers\n                const fn = match[1].split(' ')[0].replace('#', '');\n                if (helpers[fn]) {\n                    // Block helper, only 0 level is handled\n                    if (currentMatch.isBlock && fn === currentMatch.fn) {\n                        depth++;\n                    }\n                    if (!currentMatch.fn) {\n                        currentMatch.fn = fn;\n                    }\n                }\n                // Closing a block helper\n                const startingElseSection = match[1] === 'else';\n                if (currentMatch.isBlock &&\n                    currentMatch.fn && (match[1] === `/${currentMatch.fn}` ||\n                    startingElseSection)) {\n                    if (!depth) { // === 0\n                        const start = currentMatch.startInner, body = str.substr(start, match.index - start);\n                        // Either closing without an else section, or when encountering\n                        // an else section\n                        if (currentMatch.body === void 0) {\n                            currentMatch.body = body;\n                            currentMatch.startInner = match.index + match[0].length;\n                            // The body exists already, so this is the else section\n                        }\n                        else {\n                            currentMatch.elseBody = body;\n                        }\n                        currentMatch.find += body + match[0];\n                        if (!startingElseSection) {\n                            matches.push(currentMatch);\n                            currentMatch = void 0;\n                        }\n                    }\n                    else if (!startingElseSection) {\n                        depth--;\n                    }\n                    // Common expression\n                }\n                else if (!currentMatch.isBlock) {\n                    matches.push(currentMatch);\n                }\n                // Evaluate sub-matches one by one to prevent orphaned block closers\n                if (subMatch && !currentMatch?.isBlock) {\n                    break;\n                }\n            }\n            // Execute\n            matches.forEach((match) => {\n                const { body, elseBody, expression, fn } = match;\n                let replacement, i;\n                // Helper function\n                if (fn) {\n                    // Pass the helpers the amount of arguments defined by the function,\n                    // then the match as the last argument.\n                    const args = [match], parts = expression.split(' ');\n                    i = helpers[fn].length;\n                    while (i--) {\n                        args.unshift(resolveProperty(parts[i + 1]));\n                    }\n                    replacement = helpers[fn].apply(ctx, args);\n                    // Block helpers may return true or false. They may also return a\n                    // string, like the `each` helper.\n                    if (match.isBlock && typeof replacement === 'boolean') {\n                        replacement = format(replacement ? body : elseBody, ctx);\n                    }\n                    // Simple variable replacement\n                }\n                else {\n                    const valueAndFormat = expression.split(':');\n                    replacement = resolveProperty(valueAndFormat.shift() || '');\n                    // Format the replacement\n                    if (valueAndFormat.length && typeof replacement === 'number') {\n                        const segment = valueAndFormat.join(':');\n                        if (floatRegex.test(segment)) { // float\n                            const decimals = parseInt((segment.match(decRegex) || ['', '-1'])[1], 10);\n                            if (replacement !== null) {\n                                replacement = numberFormatter(replacement, decimals, lang.decimalPoint, segment.indexOf(',') > -1 ? lang.thousandsSep : '');\n                            }\n                        }\n                        else {\n                            replacement = time.dateFormat(segment, replacement);\n                        }\n                    }\n                }\n                str = str.replace(match.find, pick(replacement, ''));\n            });\n            return hasSub ? format(str, ctx, chart) : str;\n        }\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @sample highcharts/members/highcharts-numberformat/\n         *         Custom number format\n         *\n         * @function Highcharts.numberFormat\n         *\n         * @param {number} number\n         *        The input number to format.\n         *\n         * @param {number} decimals\n         *        The amount of decimals. A value of -1 preserves the amount in the\n         *        input number.\n         *\n         * @param {string} [decimalPoint]\n         *        The decimal point, defaults to the one given in the lang options, or\n         *        a dot.\n         *\n         * @param {string} [thousandsSep]\n         *        The thousands separator, defaults to the one given in the lang\n         *        options, or a space character.\n         *\n         * @return {string}\n         *         The formatted number.\n         */\n        function numberFormat(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n            let ret, fractionDigits;\n            const lang = defaultOptions.lang, origDec = (number.toString().split('.')[1] || '').split('e')[0].length, exponent = number.toString().split('e'), firstDecimals = decimals;\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            }\n            else if (!isNumber(decimals)) {\n                decimals = 2;\n            }\n            else if (decimals && exponent[1] && exponent[1] < 0) {\n                // Expose decimals from exponential notation (#7042)\n                fractionDigits = decimals + +exponent[1];\n                if (fractionDigits >= 0) {\n                    // remove too small part of the number while keeping the notation\n                    exponent[0] = (+exponent[0]).toExponential(fractionDigits)\n                        .split('e')[0];\n                    decimals = fractionDigits;\n                }\n                else {\n                    // fractionDigits < 0\n                    exponent[0] = exponent[0].split('.')[0] || 0;\n                    if (decimals < 20) {\n                        // use number instead of exponential notation (#7405)\n                        number = (exponent[0] * Math.pow(10, exponent[1]))\n                            .toFixed(decimals);\n                    }\n                    else {\n                        // or zero\n                        number = 0;\n                    }\n                    exponent[1] = 0;\n                }\n            }\n            // Add another decimal to avoid rounding errors of float numbers. (#4573)\n            // Then use toFixed to handle rounding.\n            const roundedNumber = (Math.abs(exponent[1] ? exponent[0] : number) +\n                Math.pow(10, -Math.max(decimals, origDec) - 1)).toFixed(decimals);\n            // A string containing the positive integer component of the number\n            const strinteger = String(pInt(roundedNumber));\n            // Leftover after grouping into thousands. Can be 0, 1 or 2.\n            const thousands = strinteger.length > 3 ? strinteger.length % 3 : 0;\n            // Language\n            decimalPoint = pick(decimalPoint, lang.decimalPoint);\n            thousandsSep = pick(thousandsSep, lang.thousandsSep);\n            // Start building the return\n            ret = number < 0 ? '-' : '';\n            // Add the leftover after grouping into thousands. For example, in the\n            // number 42 000 000, this line adds 42.\n            ret += thousands ? strinteger.substr(0, thousands) + thousandsSep : '';\n            if (+exponent[1] < 0 && !firstDecimals) {\n                ret = '0';\n            }\n            else {\n                // Add the remaining thousands groups, joined by the thousands separator\n                ret += strinteger\n                    .substr(thousands)\n                    .replace(/(\\d{3})(?=\\d)/g, '$1' + thousandsSep);\n            }\n            // Add the decimal point and the decimal component\n            if (decimals) {\n                // Get the decimal component\n                ret += decimalPoint + roundedNumber.slice(-decimals);\n            }\n            if (exponent[1] && +ret !== 0) {\n                ret += 'e' + exponent[1];\n            }\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Templating = {\n            dateFormat,\n            format,\n            helpers,\n            numberFormat\n        };\n\n        return Templating;\n    });\n    _registerModule(_modules, 'DataGrid/DataGridDefaults.js', [], function () {\n        /* *\n         *\n         *  Data Grid class\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Øystein Moseng\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /** @internal */\n        const DataGridDefaults = {\n            /** @internal */\n            cellHeight: 49,\n            /** @internal */\n            columnHeaders: {\n                /** @internal */\n                enabled: true\n            },\n            /** @internal */\n            columns: {},\n            /** @internal */\n            defaultHeight: 400,\n            /** @internal */\n            editable: true,\n            /** @internal */\n            resizableColumns: true\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridDefaults;\n    });\n    _registerModule(_modules, 'DataGrid/DataGrid.js', [_modules['Data/DataTable.js'], _modules['DataGrid/DataGridUtils.js'], _modules['DataGrid/Globals.js'], _modules['Core/Templating.js'], _modules['DataGrid/DataGridDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (DataTable, DataGridUtils, Globals, Templating, DataGridDefaults, H, U) {\n        /* *\n         *\n         *  Data Grid class\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Øystein Moseng\n         *  - Ken-Håvard Lieng\n         *  - Sebastian Bochan\n         *\n         * */\n        const { dataTableCellToString, emptyHTMLElement, makeDiv } = DataGridUtils;\n        const { doc } = H;\n        const { addEvent, clamp, defined, fireEvent, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Creates a scrollable grid structure with editable data cells.\n         */\n        class DataGrid {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates an instance of DataGrid.\n             *\n             * @param container\n             * Element or element ID to create the grid structure into.\n             *\n             * @param options\n             * Options to create the grid structure.\n             */\n            constructor(container, options) {\n                /**\n                 * The column names in a sorted array as rendered (or changed).\n                 * @internal\n                 */\n                this.columnNames = [];\n                /**\n                 * The amount of rows before align end of scrolling.\n                 * @internal\n                 */\n                this.prevTop = -1;\n                /**\n                 * The amount of rows to align for end of scrolling.\n                 * @internal\n                 */\n                this.scrollEndRowCount = 0;\n                /**\n                 * Contains the top align offset, when reaching the end of scrolling.\n                 * @internal\n                 */\n                this.scrollEndTop = 0;\n                /**\n                 * Flag to indicate the end of scrolling. Used to align the last cell with\n                 * the container bottom.\n                 * @internal\n                 */\n                this.bottom = false;\n                /**\n                 * An array of the min column widths for which the text in headers is not\n                 * overflown.\n                 * @internal\n                 */\n                this.overflowHeaderWidths = [];\n                // Initialize containers\n                if (typeof container === 'string') {\n                    const existingContainer = doc.getElementById(container);\n                    if (existingContainer) {\n                        this.container = existingContainer;\n                    }\n                    else {\n                        this.container =\n                            makeDiv(Globals.classNames.gridContainer, container);\n                    }\n                }\n                else {\n                    this.container = container;\n                }\n                this.gridContainer = makeDiv(Globals.classNames.gridContainer);\n                this.outerContainer = makeDiv(Globals.classNames.outerContainer);\n                this.scrollContainer = makeDiv(Globals.classNames.scrollContainer);\n                this.innerContainer = makeDiv(Globals.classNames.innerContainer);\n                this.outerContainer.appendChild(this.scrollContainer);\n                this.gridContainer.appendChild(this.outerContainer);\n                this.container.appendChild(this.gridContainer);\n                // Init options\n                this.options = merge(DataGrid.defaultOptions, options);\n                this.gridContainer.style.height = this.getDataGridSize() + 'px';\n                this.gridContainer.role = 'figure';\n                // Init data table\n                this.dataTable = this.initDataTable();\n                this.rowElements = [];\n                this.draggedResizeHandle = null;\n                this.draggedColumnRightIx = null;\n                this.columnNames = this.getColumnsToDisplay();\n                this.render();\n                (this.containerResizeObserver = new ResizeObserver(() => {\n                    this.updateGridElements();\n                })).observe(this.container);\n            }\n            /**\n             * Update the data grid with new options.\n             *\n             * @param options\n             * An object with new options.\n             */\n            update(options) {\n                this.options = merge(this.options, options);\n                if (this.options.dataTable !== this.dataTable) {\n                    this.dataTable = this.initDataTable();\n                }\n                this.columnNames = this.getColumnsToDisplay();\n                this.scrollContainer.removeChild(this.innerContainer);\n                this.render();\n            }\n            /**\n             * Resize a column.\n             *\n             * @internal\n             *\n             * @param width\n             *        New column width.\n             *\n             * @param columnNameOrIndex\n             *        Name or index of the column to resize, omit to resize all\n             *        columns.\n             *\n             * @emits #afterResizeColumn\n             */\n            resizeColumn(width, columnNameOrIndex) {\n                const headers = this.columnHeadersContainer;\n                const index = typeof columnNameOrIndex === 'string' ?\n                    this.columnNames.indexOf(columnNameOrIndex) :\n                    columnNameOrIndex;\n                const flex = `${width}`;\n                if (isNumber(index)) {\n                    if (index !== -1) {\n                        if (headers) {\n                            const header = headers.children[index];\n                            if (header) {\n                                header.style.flex = flex;\n                            }\n                        }\n                        for (let i = 0; i < this.rowElements.length; i++) {\n                            const cellElement = this.rowElements[i].children[index];\n                            if (cellElement) {\n                                cellElement.style.flex = flex;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (headers) {\n                        for (let i = 0; i < headers.children.length; i++) {\n                            headers.children[i].style.flex = flex;\n                        }\n                    }\n                    for (let i = 0; i < this.rowElements.length; i++) {\n                        const row = this.rowElements[i];\n                        for (let i = 0; i < row.children.length; i++) {\n                            row.children[i].style.flex = flex;\n                        }\n                    }\n                }\n                this.renderColumnDragHandles();\n                this.emit({\n                    type: 'afterResizeColumn',\n                    width,\n                    index,\n                    name: isNumber(index) ? this.columnNames[index] : void 0\n                });\n            }\n            /**\n             * Emits an event on this data grid to all registered callbacks of the\n             * given event.\n             *\n             * @internal\n             *\n             * @param e\n             * Event object with event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Add class to given element to toggle highlight.\n             *\n             * @internal\n             *\n             * @param row\n             * Row to highlight.\n             */\n            toggleRowHighlight(row) {\n                if (this.hoveredRow && this.hoveredRow.classList.contains('hovered')) {\n                    this.hoveredRow.classList.remove('hovered');\n                }\n                row && (row.classList.contains('hovered') ?\n                    row.classList.remove('hovered') : row.classList.add('hovered'));\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @internal\n             *\n             * @param type\n             * Event type as a string.\n             *\n             * @param callback\n             * Function to register for an event callback.\n             *\n             * @return\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Scroll to a given row.\n             *\n             * @internal\n             *\n             * @param row\n             * Row number\n             */\n            scrollToRow(row) {\n                this.outerContainer.scrollTop = row * this.options.cellHeight;\n            }\n            // ---------------- Private methods\n            /**\n             * Check which columns should be displayed based on the individual\n             * column `show` option.\n             * @internal\n             */\n            getColumnsToDisplay() {\n                const columnsOptions = this.options.columns, tableColumns = this.dataTable.modified.getColumnNames(), filteredColumns = [];\n                for (let i = 0; i < tableColumns.length; i++) {\n                    const columnName = tableColumns[i];\n                    const column = columnsOptions[columnName];\n                    if (column && defined(column.show)) {\n                        if (columnsOptions[columnName].show) {\n                            filteredColumns.push(columnName);\n                        }\n                    }\n                    else {\n                        filteredColumns.push(columnName);\n                    }\n                }\n                return filteredColumns;\n            }\n            /**\n             * Determine whether a column is editable or not.\n             *\n             * @internal\n             *\n             * @param columnName\n             * Name of the column to test.\n             *\n             * @return\n             * Returns true when the column is editable, or false.\n             */\n            isColumnEditable(columnName) {\n                const columnOptions = this.options.columns[columnName] || {};\n                return pick(columnOptions.editable, this.options.editable);\n            }\n            /**\n             * Get a reference to the underlying DataTable from options, or create one\n             * if needed.\n             *\n             * @internal\n             *\n             * @return\n             * DataTable for the DataGrid instance.\n             */\n            initDataTable() {\n                if (this.options.dataTable) {\n                    return this.options.dataTable;\n                }\n                return new DataTable();\n            }\n            /**\n             * Render the data grid. To be called on first render, as well as when\n             * options change, or the underlying data changes.\n             * @internal\n             */\n            render() {\n                const { options } = this;\n                this.prevTop = -1;\n                this.bottom = false;\n                emptyHTMLElement(this.innerContainer);\n                if (options.columnHeaders.enabled) {\n                    this.renderColumnHeaders();\n                }\n                else {\n                    this.outerContainer.style.top = '0';\n                }\n                this.renderInitialRows();\n                this.addEvents();\n                this.updateScrollingLength();\n                this.updateVisibleCells();\n                if (options.columnHeaders.enabled && options.resizableColumns) {\n                    this.renderColumnDragHandles();\n                }\n                this.updateGridElements();\n                this.gridContainer.ariaLabel = `Grid with ${this.dataTable.getColumnNames().length} columns and ${this.dataTable.getRowCount()} rows.`;\n            }\n            /**\n             * Add internal event listeners to the grid.\n             * @internal\n             */\n            addEvents() {\n                this.outerContainer.addEventListener('scroll', (e) => {\n                    this.onScroll(e);\n                });\n                document.addEventListener('click', (e) => {\n                    this.onDocumentClick(e);\n                });\n                this.container.addEventListener('mouseover', (e) => {\n                    this.handleMouseOver(e);\n                });\n            }\n            /**\n             * Changes the content of the rendered cells. This is used to simulate\n             * scrolling.\n             *\n             * @internal\n             *\n             * @param force\n             * Whether to force the update regardless of whether the position of the\n             * first row has not been changed.\n             */\n            updateVisibleCells(force = false) {\n                let scrollTop = this.outerContainer.scrollTop;\n                if (H.isSafari) {\n                    scrollTop = clamp(scrollTop, 0, (this.outerContainer.scrollHeight -\n                        this.outerContainer.clientHeight));\n                }\n                let i = Math.floor(scrollTop / this.options.cellHeight);\n                if (i === this.prevTop && !force) {\n                    return;\n                }\n                this.prevTop = i;\n                const columnsInPresentationOrder = this.columnNames;\n                const rowCount = this.dataTable.modified.getRowCount();\n                for (let j = 0; j < this.rowElements.length && i < rowCount; j++, i++) {\n                    const rowElement = this.rowElements[j];\n                    rowElement.dataset.rowIndex = String(i);\n                    const cellElements = rowElement.childNodes;\n                    for (let k = 0, kEnd = columnsInPresentationOrder.length; k < kEnd; k++) {\n                        const cell = cellElements[k], column = columnsInPresentationOrder[k], value = this.dataTable.modified\n                            .getCell(columnsInPresentationOrder[k], i);\n                        cell.textContent = this.formatCell(value, column);\n                        // TODO: consider adding these dynamically to the input element\n                        cell.dataset.originalData = '' + value;\n                        cell.dataset.columnName = columnsInPresentationOrder[k];\n                        // TODO: get this from the store if set?\n                        cell.dataset.dataType = typeof value;\n                        if (k === 0) { // First column, that is x\n                            rowElement.dataset.rowXIndex =\n                                String(isNumber(value) ? value : i);\n                        }\n                    }\n                }\n                // Scroll innerContainer to align the bottom of the last row with the\n                // bottom of the grid when scrolled to the end\n                if (this.prevTop + this.scrollEndRowCount === rowCount) {\n                    if (!this.bottom && this.scrollEndTop) {\n                        this.bottom = true;\n                        this.innerContainer.scrollTop = this.scrollEndTop;\n                    }\n                }\n                else if (this.bottom) {\n                    this.bottom = false;\n                    this.innerContainer.scrollTop = 0;\n                }\n            }\n            /**\n             * Handle user scrolling the grid\n             *\n             * @internal\n             *\n             * @param e\n             * Related scroll event.\n             */\n            onScroll(e) {\n                e.preventDefault();\n                window.requestAnimationFrame(this.updateVisibleCells.bind(this, false));\n            }\n            /**\n             * Handle the user starting interaction with a cell.\n             *\n             * @internal\n             *\n             * @param cellEl\n             * The clicked cell.\n             *\n             * @param columnName\n             * The column the clicked cell belongs to.\n             */\n            onCellClick(cellEl, columnName) {\n                if (this.isColumnEditable(columnName)) {\n                    let input = cellEl.querySelector('input');\n                    const cellValue = cellEl.getAttribute('data-original-data');\n                    if (!input) {\n                        this.removeCellInputElement();\n                        // Replace cell contents with an input element\n                        const inputHeight = cellEl.clientHeight;\n                        cellEl.textContent = '';\n                        input = this.cellInputEl = document.createElement('input');\n                        input.style.height = inputHeight + 'px';\n                        input.className = Globals.classNames.cellInput;\n                        cellEl.appendChild(input);\n                        input.focus();\n                        input.value = cellValue || '';\n                    }\n                    // Emit for use in extensions\n                    this.emit({ type: 'cellClick', input });\n                }\n            }\n            /**\n             * Handle the user clicking somewhere outside the grid.\n             *\n             * @internal\n             *\n             * @param e\n             * Related mouse event.\n             */\n            onDocumentClick(e) {\n                if (this.cellInputEl && e.target) {\n                    const cellEl = this.cellInputEl.parentNode;\n                    const isClickInInput = cellEl && cellEl.contains(e.target);\n                    if (!isClickInInput) {\n                        this.removeCellInputElement();\n                    }\n                }\n            }\n            /**\n             * Handle hovering over rows- highlight proper row if needed.\n             *\n             * @internal\n             *\n             * @param e\n             * Related mouse event.\n             */\n            handleMouseOver(e) {\n                const target = e.target;\n                if (target && target.classList.contains(Globals.classNames.cell)) {\n                    const row = target.parentElement;\n                    this.toggleRowHighlight(row);\n                    this.hoveredRow = row;\n                    fireEvent(this.container, 'dataGridHover', { row });\n                }\n                else if (this.hoveredRow) {\n                    this.toggleRowHighlight();\n                    this.hoveredRow = void 0;\n                }\n            }\n            /**\n             * Remove the <input> overlay and update the cell value\n             * @internal\n             */\n            removeCellInputElement() {\n                const cellInputEl = this.cellInputEl;\n                if (cellInputEl) {\n                    const parentNode = cellInputEl.parentNode;\n                    // TODO: This needs to modify DataTable. The change in DataTable\n                    // should cause a re-render?\n                    if (parentNode) {\n                        const cellValueType = parentNode.getAttribute('data-data-type'), columnName = parentNode.getAttribute('data-column-name');\n                        let cellValue = cellInputEl.value;\n                        if (cellValueType === 'number') {\n                            cellValue = parseFloat(cellValue);\n                        }\n                        parentNode.textContent =\n                            this.formatCell(cellValue, columnName || '');\n                    }\n                    cellInputEl.remove();\n                    delete this.cellInputEl;\n                }\n            }\n            /**\n             * Updates the scroll container to reflect the data size.\n             * @internal\n             */\n            updateScrollingLength() {\n                const columnsInPresentationOrder = this.columnNames;\n                let i = this.dataTable.modified.getRowCount() - 1;\n                let height = 0;\n                const top = i - this.getNumRowsToDraw();\n                const outerHeight = this.outerContainer.clientHeight;\n                // Explicit height is needed for overflow: hidden to work, to make sure\n                // innerContainer is not scrollable by user input\n                this.innerContainer.style.height = outerHeight + 'px';\n                // Calculate how many of the bottom rows is needed to potentially\n                // overflow innerContainer and use it to add extra rows to scrollHeight\n                // to ensure it is possible to scroll to the last row when rows have\n                // variable heights\n                for (let j = 0; j < this.rowElements.length; j++) {\n                    const cellElements = this.rowElements[j].childNodes;\n                    for (let k = 0; k < columnsInPresentationOrder.length; k++) {\n                        cellElements[k].textContent = dataTableCellToString(this.dataTable.modified\n                            .getCell(columnsInPresentationOrder[k], i - j));\n                    }\n                }\n                this.scrollContainer.appendChild(this.innerContainer);\n                for (let j = 0; i > top; i--, j++) {\n                    height += this.rowElements[j].offsetHeight;\n                    if (height > outerHeight) {\n                        i--;\n                        break;\n                    }\n                }\n                const extraRows = i - top;\n                this.scrollEndRowCount = this.rowElements.length - extraRows;\n                // How much innerContainer needs to be scrolled to fully show the last\n                // row when scrolled to the end\n                this.scrollEndTop = height - outerHeight;\n                const scrollHeight = (this.dataTable.modified.getRowCount() + extraRows) *\n                    this.options.cellHeight;\n                this.scrollContainer.style.height = scrollHeight + 'px';\n            }\n            /**\n             * Calculates the number of rows to render pending of cell sizes.\n             *\n             * @internal\n             *\n             * @return\n             * The number rows to render.\n             */\n            getNumRowsToDraw() {\n                return Math.min(this.dataTable.modified.getRowCount(), Math.ceil((this.outerContainer.offsetHeight ||\n                    this.options.defaultHeight // when datagrid is hidden,\n                // offsetHeight is 0, so we need to get defaultValue to\n                // avoid empty rows\n                ) / this.options.cellHeight));\n            }\n            /**\n             * Internal method that calculates the data grid height. If the container\n             * has a height declared in CSS it uses that, otherwise it uses a default.\n             * @internal\n             */\n            getDataGridSize() {\n                const grid = this, options = grid.options, { height } = grid.container.getBoundingClientRect();\n                // If the container has a height declared in CSS, use that.\n                if (height > 2) {\n                    return height;\n                }\n                // Use the default height if the container has no height declared in CSS\n                return options.defaultHeight;\n            }\n            /**\n             * Renders a data cell.\n             *\n             * @internal\n             *\n             * @param parentRow\n             * The parent row to add the cell to.\n             *\n             * @param columnName\n             * The column the cell belongs to.\n             */\n            renderCell(parentRow, columnName) {\n                let className = Globals.classNames.cell;\n                if (!this.isColumnEditable(columnName)) {\n                    className += ` ${className}-readonly`;\n                }\n                const cellEl = makeDiv(className);\n                cellEl.style.minHeight = this.options.cellHeight + 'px';\n                cellEl.addEventListener('click', () => this.onCellClick(cellEl, columnName));\n                parentRow.appendChild(cellEl);\n            }\n            /**\n             * Renders a row of data.\n             * @internal\n             */\n            renderRow() {\n                const rowEl = makeDiv(Globals.classNames.row);\n                for (let i = 0; i < this.columnNames.length; i++) {\n                    this.renderCell(rowEl, this.columnNames[i]);\n                }\n                this.innerContainer.appendChild(rowEl);\n                this.rowElements.push(rowEl);\n            }\n            /**\n             * Allows formatting of the header cell text based on provided format\n             * option. If that is not provided, the column name is returned.\n             * @internal\n             *\n             * @param columnName\n             * Column name to format.\n             */\n            formatHeaderCell(columnName) {\n                const options = this.options, columnOptions = options.columns[columnName], headerFormat = columnOptions && columnOptions.headerFormat;\n                if (headerFormat) {\n                    return Templating.format(headerFormat, { text: columnName });\n                }\n                return columnName;\n            }\n            /**\n             * Allows formatting of the cell text based on provided format option.\n             * If that is not provided, the cell value is returned.\n             * @internal\n             *\n             * @param  cellValue\n             * The value of the cell to format.\n             *\n             * @param  column\n             * The column name the cell belongs to.\n             */\n            formatCell(cellValue, column) {\n                const options = this.options, columnOptions = options.columns[column], cellFormat = columnOptions && columnOptions.cellFormat, cellFormatter = columnOptions && columnOptions.cellFormatter;\n                let formattedCell = defined(cellValue) ? cellValue : '';\n                if (cellFormat) {\n                    if (typeof cellValue === 'number' &&\n                        cellFormat.indexOf('value') > -1) {\n                        formattedCell =\n                            Templating.format(cellFormat, { value: cellValue });\n                    }\n                    else if (typeof cellValue === 'string' &&\n                        cellFormat.indexOf('text') > -1) {\n                        formattedCell =\n                            Templating.format(cellFormat, { text: cellValue });\n                    }\n                }\n                if (cellFormatter) {\n                    return cellFormatter.call({ value: cellValue });\n                }\n                return formattedCell.toString();\n            }\n            /**\n             * Render a column header for a column.\n             *\n             * @internal\n             *\n             * @param parentEl\n             * The parent element of the column header.\n             *\n             * @param columnName\n             * The name of the column.\n             */\n            renderColumnHeader(parentEl, columnName) {\n                let className = Globals.classNames.columnHeader;\n                if (!this.isColumnEditable(columnName)) {\n                    className += ` ${className}-readonly`;\n                }\n                const headerEl = makeDiv(className);\n                headerEl.style.minHeight = this.options.cellHeight + 'px';\n                headerEl.style.maxHeight = this.options.cellHeight * 2 + 'px';\n                headerEl.textContent = this.formatHeaderCell(columnName);\n                parentEl.appendChild(headerEl);\n            }\n            /**\n             * Render the column headers of the table.\n             * @internal\n             */\n            renderColumnHeaders() {\n                const columnNames = this.columnNames, columnHeadersContainer = this.columnHeadersContainer =\n                    this.columnHeadersContainer ||\n                        makeDiv(`${Globals.classNamePrefix}column-headers`);\n                emptyHTMLElement(columnHeadersContainer);\n                columnNames.forEach(this.renderColumnHeader.bind(this, columnHeadersContainer));\n                if (!this.headerContainer) {\n                    this.headerContainer =\n                        makeDiv(`${Globals.classNamePrefix}header-container`);\n                    this.headerContainer.appendChild(columnHeadersContainer);\n                }\n                this.gridContainer.insertBefore(this.headerContainer, this.outerContainer);\n                this.updateColumnHeaders();\n            }\n            /**\n             * Refresh container elements to adapt them to new container dimensions.\n             * @internal\n             */\n            updateGridElements() {\n                this.updateColumnHeaders();\n                this.redrawRowElements();\n                this.updateDragHandlesPosition();\n            }\n            /**\n             * Update the column headers of the table.\n             * @internal\n             */\n            updateColumnHeaders() {\n                const headersContainer = this.columnHeadersContainer;\n                if (!headersContainer) {\n                    return;\n                }\n                // Handle overflowing text in headers.\n                for (let i = 0; i < this.columnNames.length; i++) {\n                    const columnName = this.columnNames[i], header = headersContainer.children[i], overflowWidth = this.overflowHeaderWidths[i];\n                    if (header.scrollWidth > header.clientWidth) {\n                        // Headers overlap\n                        this.overflowHeaderWidths[i] = header.scrollWidth;\n                        header.textContent = this.formatHeaderCell(columnName)\n                            .split(' ').map((word) => (word.length < 4 ? word : word.slice(0, 2) + '...')).join(' ');\n                    }\n                    else if (isNumber(overflowWidth) &&\n                        overflowWidth <= header.clientWidth) {\n                        // Headers not overlap\n                        this.overflowHeaderWidths[i] = null;\n                        header.textContent = this.formatHeaderCell(columnName);\n                    }\n                }\n                // Offset the outer container by the header row height.\n                this.outerContainer.style.top = headersContainer.clientHeight + 'px';\n                // Header columns alignment when scrollbar is shown.\n                if (headersContainer.lastChild) {\n                    headersContainer.lastChild\n                        .style.marginRight = (this.outerContainer.offsetWidth -\n                        this.outerContainer.clientWidth) + 'px';\n                }\n            }\n            /**\n             * Redraw existing row elements.\n             * @internal\n             */\n            redrawRowElements() {\n                if (!this.rowElements.length) {\n                    return;\n                }\n                const prevColumnFlexes = [], firstRowChildren = this.rowElements[0].children;\n                for (let i = 0; i < firstRowChildren.length; i++) {\n                    prevColumnFlexes.push(firstRowChildren[i].style.flex);\n                }\n                emptyHTMLElement(this.innerContainer);\n                this.renderInitialRows();\n                this.updateScrollingLength();\n                this.updateVisibleCells(true);\n                for (let i = 0; i < this.rowElements.length; i++) {\n                    const row = this.rowElements[i];\n                    for (let j = 0; j < row.childElementCount; j++) {\n                        row.children[j].style.flex =\n                            prevColumnFlexes[j];\n                    }\n                }\n            }\n            /**\n             * Update the column drag handles position.\n             * @internal\n             */\n            updateDragHandlesPosition() {\n                const headersContainer = this.columnHeadersContainer, handlesContainer = this.columnDragHandlesContainer;\n                if (!handlesContainer || !headersContainer) {\n                    return;\n                }\n                for (let i = 0; i < handlesContainer.childElementCount - 1; i++) {\n                    const handle = handlesContainer.children[i], header = headersContainer.children[i + 1];\n                    handle.style.height = headersContainer.clientHeight + 'px';\n                    handle.style.left = header.offsetLeft - 2 + 'px';\n                }\n            }\n            /**\n             * Render initial rows before the user starts scrolling.\n             * @internal\n             */\n            renderInitialRows() {\n                this.rowElements = [];\n                const rowsToDraw = this.getNumRowsToDraw();\n                for (let i = 0; i < rowsToDraw; i++) {\n                    this.renderRow();\n                }\n            }\n            /**\n             * Render the drag handles for resizing columns.\n             * @internal\n             */\n            renderColumnDragHandles() {\n                if (!this.columnHeadersContainer) {\n                    return;\n                }\n                const container = this.columnDragHandlesContainer = (this.columnDragHandlesContainer ||\n                    makeDiv(`${Globals.classNamePrefix}col-resize-container`));\n                const columnEls = this.columnHeadersContainer.children;\n                const handleHeight = this.options.cellHeight;\n                emptyHTMLElement(container);\n                for (let i = 1; i < columnEls.length; ++i) {\n                    const col = columnEls[i];\n                    const handle = makeDiv(`${Globals.classNamePrefix}col-resize-handle`);\n                    handle.style.height = handleHeight + 'px';\n                    handle.style.left = col.offsetLeft - 2 + 'px';\n                    handle.addEventListener('mouseover', () => {\n                        if (!this.draggedResizeHandle) {\n                            handle.style.opacity = '1';\n                        }\n                    });\n                    handle.addEventListener('mouseleave', () => {\n                        if (!this.draggedResizeHandle) {\n                            handle.style.opacity = '0';\n                        }\n                    });\n                    handle.addEventListener('mousedown', this.onHandleMouseDown.bind(this, handle, i));\n                    container.appendChild(handle);\n                }\n                this.renderColumnResizeCrosshair(container);\n                document.addEventListener('mouseup', (e) => {\n                    if (this.draggedResizeHandle) {\n                        this.stopColumnResize(this.draggedResizeHandle, e);\n                    }\n                });\n                document.addEventListener('mousemove', (e) => {\n                    if (this.draggedResizeHandle) {\n                        this.updateColumnResizeDrag(e);\n                    }\n                });\n                if (this.headerContainer) {\n                    this.headerContainer.appendChild(container);\n                }\n            }\n            /**\n             * Renders the crosshair shown when resizing columns.\n             *\n             * @internal\n             *\n             * @param container\n             * The container to place the crosshair in.\n             */\n            renderColumnResizeCrosshair(container) {\n                const el = this.columnResizeCrosshair = (this.columnResizeCrosshair ||\n                    makeDiv(`${Globals.classNamePrefix}col-resize-crosshair`));\n                const handleHeight = this.options.cellHeight;\n                el.style.top = handleHeight + 'px';\n                el.style.height = this.innerContainer.offsetHeight + 'px';\n                container.appendChild(el);\n            }\n            /**\n             * On column resize handle click.\n             *\n             * @internal\n             *\n             * @param handle\n             * The drag handle being clicked.\n             *\n             * @param colRightIx\n             * The column ix to the right of the resize handle.\n             *\n             * @param e\n             * The mousedown event.\n             */\n            onHandleMouseDown(handle, colRightIx, e) {\n                if (this.draggedResizeHandle) {\n                    return;\n                }\n                e.preventDefault();\n                this.draggedResizeHandle = handle;\n                this.draggedColumnRightIx = colRightIx;\n                this.dragResizeStart = e.pageX;\n                const crosshair = this.columnResizeCrosshair;\n                if (crosshair) {\n                    crosshair.style.left = (handle.offsetLeft + handle.offsetWidth / 2 -\n                        crosshair.offsetWidth / 2 + 'px');\n                    crosshair.style.opacity = '1';\n                }\n            }\n            /**\n             * Update as we drag column resizer\n             * @internal\n             */\n            updateColumnResizeDrag(e) {\n                const handle = this.draggedResizeHandle;\n                const crosshair = this.columnResizeCrosshair;\n                const colRightIx = this.draggedColumnRightIx;\n                const colHeaders = this.columnHeadersContainer;\n                if (!handle ||\n                    !crosshair ||\n                    colRightIx === null ||\n                    !colHeaders ||\n                    !this.dragResizeStart) {\n                    return;\n                }\n                const col = colHeaders.children[colRightIx];\n                const diff = e.pageX - this.dragResizeStart;\n                const newPos = col.offsetLeft + diff;\n                handle.style.left = newPos - handle.offsetWidth / 2 + 'px';\n                crosshair.style.left = newPos - crosshair.offsetWidth / 2 + 'px';\n            }\n            /**\n             * Stop resizing a column.\n             *\n             * @internal\n             *\n             * @param handle\n             * The related resize handle.\n             *\n             * @param e\n             * The related mouse event.\n             */\n            stopColumnResize(handle, e) {\n                const crosshair = this.columnResizeCrosshair;\n                const colRightIx = this.draggedColumnRightIx;\n                const colContainer = this.columnHeadersContainer;\n                if (!crosshair ||\n                    !colContainer ||\n                    !this.dragResizeStart ||\n                    colRightIx === null) {\n                    return;\n                }\n                handle.style.opacity = '0';\n                crosshair.style.opacity = '0';\n                const colLeft = colContainer.children[colRightIx - 1];\n                const colRight = colContainer.children[colRightIx];\n                const diff = e.pageX - this.dragResizeStart;\n                const newWidthLeft = colLeft.offsetWidth + diff;\n                const newWidthRight = colRight.offsetWidth - diff;\n                const diffRatioLeft = newWidthLeft / colLeft.offsetWidth;\n                const diffRatioRight = newWidthRight / colRight.offsetWidth;\n                const leftFlexRatio = ((colLeft.style.flex ? parseFloat(colLeft.style.flex) : 1) *\n                    diffRatioLeft);\n                const rightFlexRatio = ((colRight.style.flex ? parseFloat(colRight.style.flex) : 1) *\n                    diffRatioRight);\n                this.resizeColumn(leftFlexRatio, colRightIx - 1);\n                this.resizeColumn(rightFlexRatio, colRightIx);\n                this.draggedResizeHandle = null;\n                this.draggedColumnRightIx = null;\n                this.updateGridElements();\n            }\n            /**\n             * Update the size of grid container.\n             *\n             * @internal\n             *\n             * @param width\n             * The new width in pixel, or `null` for no change.\n             *\n             * @param height\n             * The new height in pixel, or `null` for no change.\n             */\n            setSize(width, height) {\n                if (width) {\n                    this.innerContainer.style.width = width + 'px';\n                }\n                if (height) {\n                    this.gridContainer.style.height = this.getDataGridSize() + 'px';\n                    this.outerContainer.style.height =\n                        height -\n                            (this.options.cellHeight + // Header height\n                                this.getMarginHeight(height)) + 'px';\n                }\n                this.render();\n            }\n            /**\n             * If the grid is in the parent container that has margins, calculate the\n             * height of the margins.\n             * @internal\n             *\n             * @param  height\n             * The height of the parent container.\n             */\n            getMarginHeight(height) {\n                return height - this.gridContainer.getBoundingClientRect().height;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for all DataGrid instances.\n         */\n        DataGrid.defaultOptions = DataGridDefaults;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGrid;\n    });\n    _registerModule(_modules, 'masters/datagrid.src.js', [_modules['DataGrid/Globals.js'], _modules['DataGrid/DataGrid.js']], function (Globals, _DataGrid) {\n\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.DataGrid = _DataGrid;\n        /* *\n         *\n         *  Classic Export\n         *\n         * */\n        if (!G.win.DataGrid) {\n            G.win.DataGrid = G;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n}));"],"names":["factory","module","exports","define","amd","Dashboards","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","Globals","classNamePrefix","classNames","gridContainer","outerContainer","scrollContainer","innerContainer","cell","cellInput","row","columnHeader","win","dataTableCellToString","emptyHTMLElement","element","firstChild","removeChild","makeDiv","className","id","div","document","createElement","alignThresholds","panning","enabled","type","styledMode","borderRadius","colorCount","allowMutatingData","ignoreHiddenSeries","spacing","resetZoomButton","theme","position","reflow","zooming","singleTouch","resetButton","zIndex","align","x","y","width","height","borderColor","backgroundColor","plotBorderColor","colors","H","U","defined","error","extend","isNumber","isObject","merge","objectEach","pad","pick","splat","timeUnits","hasNewSafariBug","isSafari","Intl","DateTimeFormat","prototype","formatRange","hasOldSafariBug","constructor","options","useUTC","variableTimezone","Date","getTimezoneOffset","timezoneOffsetFunction","update","get","unit","date","timezoneOffset","realMs","getTime","ms","setTime","ret","set","value","offset","newOffset","timezone","makeTime","year","month","hours","minutes","seconds","d","UTC","arguments","time","timestamp","gmt","colon","timeZone","timeZoneName","format","split","map","Number","e","valueOf","toString","dateFormat","capitalize","isNaN","defaultOptions","lang","invalidDate","day","dayOfMonth","fullYear","langWeekdays","weekdays","shortWeekdays","a","substr","A","w","b","shortMonths","B","months","m","o","Y","k","I","l","M","p","P","S","L","Math","floor","dateFormats","val","key","indexOf","replace","call","toUpperCase","resolveDTLFormat","f","main","from","to","getTimeTicks","normalizedInterval","min","max","startOfWeek","i","minYear","variableDayLength","minDay","tickPositions","higherRanks","minDate","interval","unitRange","count","second","minute","hour","week","minMonth","minDateDate","minHours","t","push","length","forEach","info","totalRange","getDateFormat","range","dateTimeLabelFormats","dateStr","blank","strpos","millisecond","n","lastN","ChartDefaults","Palettes","Time","isTouchDevice","svg","symbols","loading","decimalPoint","numericSymbols","resetZoom","resetZoomTitle","thousandsSep","global","chart","title","style","color","fontWeight","text","margin","widthAdjust","subtitle","fontSize","caption","verticalAlign","plotOptions","legend","alignColumns","layout","itemMarginBottom","itemMarginTop","labelFormatter","name","navigation","activeColor","inactiveColor","itemStyle","cursor","textDecoration","textOverflow","itemHoverStyle","itemHiddenStyle","shadow","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","top","opacity","textAlign","tooltip","animation","footerFormat","headerShape","hideDelay","padding","shape","shared","snap","headerFormat","pointFormat","borderWidth","stickOnContact","useHTML","credits","href","defaultTime","getOptions","setOptions","D","getNestedProperty","isArray","pInt","helpers","add","divide","eq","each","arr","match","item","body","join","ge","gt","condition","le","lt","multiply","ne","subtract","unless","str","ctx","regex","subRegex","matches","floatRegex","decRegex","numberFormatter","numberFormat","resolveProperty","currentMatch","depth","hasSub","exec","subMatch","isBlock","expression","find","charAt","start","index","startInner","startingElseSection","elseBody","replacement","parts","unshift","valueAndFormat","shift","segment","test","decimals","parseInt","number","fractionDigits","origDec","exponent","firstDecimals","toExponential","pow","toFixed","roundedNumber","abs","strinteger","String","thousands","slice","cellHeight","columnHeaders","columns","defaultHeight","editable","resizableColumns","DataTable","DataGridUtils","Templating","DataGridDefaults","doc","addEvent","clamp","fireEvent","DataGrid","container","columnNames","prevTop","scrollEndRowCount","scrollEndTop","bottom","overflowHeaderWidths","existingContainer","getElementById","appendChild","getDataGridSize","role","dataTable","initDataTable","rowElements","draggedResizeHandle","draggedColumnRightIx","getColumnsToDisplay","render","containerResizeObserver","ResizeObserver","updateGridElements","observe","resizeColumn","columnNameOrIndex","headers","columnHeadersContainer","flex","header","children","cellElement","renderColumnDragHandles","emit","toggleRowHighlight","hoveredRow","classList","contains","remove","on","callback","scrollToRow","scrollTop","columnsOptions","tableColumns","modified","getColumnNames","filteredColumns","columnName","column","show","isColumnEditable","columnOptions","renderColumnHeaders","renderInitialRows","addEvents","updateScrollingLength","updateVisibleCells","ariaLabel","getRowCount","addEventListener","onScroll","onDocumentClick","handleMouseOver","force","scrollHeight","clientHeight","columnsInPresentationOrder","rowCount","j","rowElement","dataset","rowIndex","cellElements","childNodes","kEnd","getCell","textContent","formatCell","originalData","dataType","rowXIndex","preventDefault","requestAnimationFrame","bind","onCellClick","cellEl","input","querySelector","cellValue","getAttribute","removeCellInputElement","inputHeight","cellInputEl","focus","target","parentNode","parentElement","cellValueType","parseFloat","getNumRowsToDraw","outerHeight","offsetHeight","extraRows","ceil","grid","getBoundingClientRect","renderCell","parentRow","minHeight","renderRow","rowEl","formatHeaderCell","cellFormat","cellFormatter","formattedCell","renderColumnHeader","parentEl","headerEl","maxHeight","headerContainer","insertBefore","updateColumnHeaders","redrawRowElements","updateDragHandlesPosition","headersContainer","overflowWidth","scrollWidth","clientWidth","word","lastChild","marginRight","offsetWidth","prevColumnFlexes","firstRowChildren","childElementCount","handlesContainer","columnDragHandlesContainer","handle","left","offsetLeft","rowsToDraw","columnEls","handleHeight","col","onHandleMouseDown","renderColumnResizeCrosshair","stopColumnResize","updateColumnResizeDrag","el","columnResizeCrosshair","colRightIx","dragResizeStart","pageX","crosshair","colHeaders","diff","newPos","colContainer","colLeft","colRight","newWidthLeft","newWidthRight","diffRatioLeft","diffRatioRight","leftFlexRatio","rightFlexRatio","setSize","getMarginHeight","_DataGrid","G"],"mappings":"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"}