{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards v3.1.0 (2024-12-04)\n *\n * (c) 2009-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = (root && root.document) ?\n            factory(root) :\n            factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/dashboards', function () {\n            return factory(root);\n        });\n    } else {\n        if (root.Dashboards) {\n            root.Dashboards.error(16, true);\n        }\n        root.Dashboards = factory(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function (window) {\n    'use strict';\n    var _modules = {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (window && typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Shared Highcharts properties.\n         * @private\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.SVG_NS = 'http://www.w3.org/2000/svg', Globals.product = 'Highcharts', Globals.version = '3.1.0', Globals.win = (typeof window !== 'undefined' ?\n                window :\n                {}), // eslint-disable-line node/no-unsupported-features/es-builtins\n            Globals.doc = Globals.win.document, Globals.svg = (Globals.doc &&\n                Globals.doc.createElementNS &&\n                !!Globals.doc.createElementNS(Globals.SVG_NS, 'svg').createSVGRect), Globals.userAgent = (Globals.win.navigator && Globals.win.navigator.userAgent) || '', Globals.isChrome = Globals.win.chrome, Globals.isFirefox = Globals.userAgent.indexOf('Firefox') !== -1, Globals.isMS = /(edge|msie|trident)/i.test(Globals.userAgent) && !Globals.win.opera, Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1, Globals.isTouchDevice = /(Mobile|Android|Windows Phone)/.test(Globals.userAgent), Globals.isWebKit = Globals.userAgent.indexOf('AppleWebKit') !== -1, Globals.deg2rad = Math.PI * 2 / 360, Globals.marginNames = [\n                'plotTop',\n                'marginRight',\n                'marginBottom',\n                'plotLeft'\n            ], Globals.noop = function () { }, Globals.supportsPassiveEvents = (function () {\n                // Checks whether the browser supports passive events, (#11353).\n                let supportsPassive = false;\n                // Object.defineProperty doesn't work on IE as well as passive\n                // events - instead of using polyfill, we can exclude IE totally.\n                if (!Globals.isMS) {\n                    const opts = Object.defineProperty({}, 'passive', {\n                        get: function () {\n                            supportsPassive = true;\n                        }\n                    });\n                    if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                        Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                        Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n                    }\n                }\n                return supportsPassive;\n            }());\n            /**\n             * An array containing the current chart objects in the page. A chart's\n             * position in the array is preserved throughout the page's lifetime. When\n             * a chart is destroyed, the array item becomes `undefined`.\n             *\n             * @name Highcharts.charts\n             * @type {Array<Highcharts.Chart|undefined>}\n             */\n            Globals.charts = [];\n            /**\n             * A shared registry between all bundles to keep track of applied\n             * compositions.\n             * @private\n             */\n            Globals.composed = [];\n            /**\n             * A hook for defining additional date format specifiers. New\n             * specifiers are defined as key-value pairs by using the\n             * specifier as key, and a function which takes the timestamp as\n             * value. This function returns the formatted portion of the\n             * date.\n             *\n             * Using `dateFormats` is also a convenient way to define new keys for\n             * complex locale-aware date formats compatible with the\n             * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat)\n             * browser API, whenever the built-in formats are not sufficient.\n             *\n             * @sample highcharts/global/dateformats/\n             *         Adding support for week number\n             * @sample highcharts/global/dateformats-object/\n             *         A locale-aware date format using `Intl.DateTimeFormat`\n             *\n             * @name Highcharts.dateFormats\n             * @type {Record<string, Highcharts.TimeFormatCallbackFunction>}\n             */\n            Globals.dateFormats = {};\n            /**\n             * @private\n             * @deprecated\n             * @todo Use only `Core/Series/SeriesRegistry.seriesTypes`\n             */\n            Globals.seriesTypes = {};\n            /**\n             * @private\n             */\n            Globals.symbolSizes = {};\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            // eslint-disable-next-line prefer-const\n            Globals.chartCount = 0;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Theme options that should get applied to the chart. In module mode it\n         * might not be possible to change this property because of read-only\n         * restrictions, instead use {@link Highcharts.setOptions}.\n         *\n         * @deprecated\n         * @name Highcharts.theme\n         * @type {Highcharts.Options}\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Core/Utilities.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { charts, doc, win } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Highcharts.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        Reference to the chart that causes the error. Used in 'debugger'\n         *        module to display errors directly on the chart.\n         *        Important note: This argument is undefined for errors that lack\n         *        access to the Chart instance. In such case, the error will be\n         *        displayed on the last created chart.\n         *\n         * @param {Highcharts.Dictionary<string>} [params]\n         *        Additional parameters for the generated message.\n         *\n         * @return {void}\n         */\n        function error(code, stop, chart, params) {\n            const severity = stop ? 'Highcharts error' : 'Highcharts warning';\n            if (code === 32) {\n                code = `${severity}: Deprecated member`;\n            }\n            const isCode = isNumber(code);\n            let message = isCode ?\n                `${severity} #${code}: www.highcharts.com/errors/${code}/` :\n                code.toString();\n            const defaultHandler = function () {\n                if (stop) {\n                    throw new Error(message);\n                }\n                // Else ...\n                if (win.console &&\n                    error.messages.indexOf(message) === -1 // Prevent console flooting\n                ) {\n                    console.warn(message); // eslint-disable-line no-console\n                }\n            };\n            if (typeof params !== 'undefined') {\n                let additionalMessages = '';\n                if (isCode) {\n                    message += '?';\n                }\n                objectEach(params, function (value, key) {\n                    additionalMessages += `\\n - ${key}: ${value}`;\n                    if (isCode) {\n                        message += encodeURI(key) + '=' + encodeURI(value);\n                    }\n                });\n                message += additionalMessages;\n            }\n            fireEvent(H, 'displayError', { chart, code, message, params }, defaultHandler);\n            error.messages.push(message);\n        }\n        (function (error) {\n            error.messages = [];\n        })(error || (error = {}));\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {true | T} extendOrSource\n         *        Whether to extend the left-side object,\n         *        or the first object to merge as a deep copy.\n         *\n         * @param {...Array<object|undefined>} [sources]\n         *        Object(s) to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */\n        function merge(extendOrSource, ...sources) {\n            let i, args = [extendOrSource, ...sources], ret = {};\n            const doCopy = function (copy, original) {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                objectEach(original, function (value, key) {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (extendOrSource === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Constrain a value to within a lower and upper threshold.\n         *\n         * @private\n         * @param {number} value The initial value\n         * @param {number} min The lower threshold\n         * @param {number} max The upper threshold\n         * @return {number} Returns a number value within min and max.\n         */\n        function clamp(value, min, max) {\n            return value > min ? value < max ? value : max : min;\n        }\n        /**\n         * Utility for crisping a line position to the nearest full pixel depening on\n         * the line width\n         * @param {number} value       The raw pixel position\n         * @param {number} lineWidth   The line width\n         * @param {boolean} [inverted] Whether the containing group is inverted.\n         *                             Crisping round numbers on the y-scale need to go\n         *                             to the other side because the coordinate system\n         *                             is flipped (scaleY is -1)\n         * @return {number}            The pixel position to use for a crisp display\n         */\n        function crisp(value, lineWidth = 0, inverted) {\n            const mod = lineWidth % 2 / 2, inverter = inverted ? -1 : 1;\n            return (Math.round(value * inverter - mod) + mod) * inverter;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Return the deep difference between two objects. It can either return the new\n         * properties, or optionally return the old values of new properties.\n         * @private\n         */\n        function diffObjects(newer, older, keepOlder, collectionsWithUpdate) {\n            const ret = {};\n            /**\n             * Recurse over a set of options and its current values, and store the\n             * current values in the ret object.\n             */\n            function diff(newer, older, ret, depth) {\n                const keeper = keepOlder ? older : newer;\n                objectEach(newer, function (newerVal, key) {\n                    if (!depth &&\n                        collectionsWithUpdate &&\n                        collectionsWithUpdate.indexOf(key) > -1 &&\n                        older[key]) {\n                        newerVal = splat(newerVal);\n                        ret[key] = [];\n                        // Iterate over collections like series, xAxis or yAxis and map\n                        // the items by index.\n                        for (let i = 0; i < Math.max(newerVal.length, older[key].length); i++) {\n                            // Item exists in current data (#6347)\n                            if (older[key][i]) {\n                                // If the item is missing from the new data, we need to\n                                // save the whole config structure. Like when\n                                // responsively updating from a dual axis layout to a\n                                // single axis and back (#13544).\n                                if (newerVal[i] === void 0) {\n                                    ret[key][i] = older[key][i];\n                                    // Otherwise, proceed\n                                }\n                                else {\n                                    ret[key][i] = {};\n                                    diff(newerVal[i], older[key][i], ret[key][i], depth + 1);\n                                }\n                            }\n                        }\n                    }\n                    else if (isObject(newerVal, true) &&\n                        !newerVal.nodeType // #10044\n                    ) {\n                        ret[key] = isArray(newerVal) ? [] : {};\n                        diff(newerVal, older[key] || {}, ret[key], depth + 1);\n                        // Delete empty nested objects\n                        if (Object.keys(ret[key]).length === 0 &&\n                            // Except colorAxis which is a special case where the empty\n                            // object means it is enabled. Which is unfortunate and we\n                            // should try to find a better way.\n                            !(key === 'colorAxis' && depth === 0)) {\n                            delete ret[key];\n                        }\n                    }\n                    else if (newer[key] !== older[key] ||\n                        // If the newer key is explicitly undefined, keep it (#10525)\n                        (key in newer && !(key in older))) {\n                        if (key !== '__proto__' && key !== 'constructor') {\n                            ret[key] = keeper[key];\n                        }\n                    }\n                });\n            }\n            diff(newer, older, ret, 0);\n            return ret;\n        }\n        /**\n         * Shortcut for parseInt\n         *\n         * @private\n         * @function Highcharts.pInt\n         *\n         * @param {*} s\n         *        any\n         *\n         * @param {number} [mag]\n         *        Magnitude\n         *\n         * @return {number}\n         *         number\n         */\n        function pInt(s, mag) {\n            return parseInt(s, mag || 10);\n        }\n        /**\n         * Utility function to check for string type.\n         *\n         * @function Highcharts.isString\n         *\n         * @param {*} s\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a string.\n         */\n        function isString(s) {\n            return typeof s === 'string';\n        }\n        /**\n         * Utility function to check if an item is an array.\n         *\n         * @function Highcharts.isArray\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is an array.\n         */\n        function isArray(obj) {\n            const str = Object.prototype.toString.call(obj);\n            return str === '[object Array]' || str === '[object Array Iterator]';\n        }\n        /**\n         * Utility function to check if an item is of type object.\n         *\n         * @function Highcharts.isObject\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @param {boolean} [strict=false]\n         *        Also checks that the object is not an array.\n         *\n         * @return {boolean}\n         *         True if the argument is an object.\n         */\n        function isObject(obj, strict) {\n            return (!!obj &&\n                typeof obj === 'object' &&\n                (!strict || !isArray(obj))); // eslint-disable-line @typescript-eslint/no-explicit-any\n        }\n        /**\n         * Utility function to check if an Object is a HTML Element.\n         *\n         * @function Highcharts.isDOMElement\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a HTML Element.\n         */\n        function isDOMElement(obj) {\n            return isObject(obj) && typeof obj.nodeType === 'number';\n        }\n        /**\n         * Utility function to check if an Object is a class.\n         *\n         * @function Highcharts.isClass\n         *\n         * @param {object|undefined} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a class.\n         */\n        function isClass(obj) {\n            const c = obj && obj.constructor;\n            return !!(isObject(obj, true) &&\n                !isDOMElement(obj) &&\n                (c && c.name && c.name !== 'Object'));\n        }\n        /**\n         * Utility function to check if an item is a number and it is finite (not NaN,\n         * Infinity or -Infinity).\n         *\n         * @function Highcharts.isNumber\n         *\n         * @param {*} n\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the item is a finite number\n         */\n        function isNumber(n) {\n            return typeof n === 'number' && !isNaN(n) && n < Infinity && n > -Infinity;\n        }\n        /**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function Highcharts.erase\n         *\n         * @param {Array<*>} arr\n         *        The array.\n         *\n         * @param {*} item\n         *        The item to remove.\n         *\n         * @return {void}\n         */\n        function erase(arr, item) {\n            let i = arr.length;\n            while (i--) {\n                if (arr[i] === item) {\n                    arr.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        /**\n         * Insert a series or an axis in a collection with other items, either the\n         * chart series or yAxis series or axis collections, in the correct order\n         * according to the index option and whether it is internal. Used internally\n         * when adding series and axes.\n         *\n         * @private\n         * @function Highcharts.Chart#insertItem\n         * @param  {Highcharts.Series|Highcharts.Axis} item\n         *         The item to insert\n         * @param  {Array<Highcharts.Series>|Array<Highcharts.Axis>} collection\n         *         A collection of items, like `chart.series` or `xAxis.series`.\n         * @return {number} The index of the series in the collection.\n         */\n        function insertItem(item, collection) {\n            const indexOption = item.options.index, length = collection.length;\n            let i;\n            for (\n            // Internal item (navigator) should always be pushed to the end\n            i = item.options.isInternal ? length : 0; i < length + 1; i++) {\n                if (\n                // No index option, reached the end of the collection,\n                // equivalent to pushing\n                !collection[i] ||\n                    // Handle index option, the element to insert has lower index\n                    (isNumber(indexOption) &&\n                        indexOption < pick(collection[i].options.index, collection[i]._i)) ||\n                    // Insert the new item before other internal items\n                    // (navigator)\n                    collection[i].options.isInternal) {\n                    collection.splice(i, 0, item);\n                    break;\n                }\n            }\n            return i;\n        }\n        /**\n         * Adds an item to an array, if it is not present in the array.\n         *\n         * @function Highcharts.pushUnique\n         *\n         * @param {Array<unknown>} array\n         * The array to add the item to.\n         *\n         * @param {unknown} item\n         * The item to add.\n         *\n         * @return {boolean}\n         * Returns true, if the item was not present and has been added.\n         */\n        function pushUnique(array, item) {\n            return array.indexOf(item) < 0 && !!array.push(item);\n        }\n        /**\n         * Check if an object is null or undefined.\n         *\n         * @function Highcharts.defined\n         *\n         * @param {*} obj\n         *        The object to check.\n         *\n         * @return {boolean}\n         *         False if the object is null or undefined, otherwise true.\n         */\n        function defined(obj) {\n            return typeof obj !== 'undefined' && obj !== null;\n        }\n        /**\n         * Set or get an attribute or an object of attributes.\n         *\n         * To use as a setter, pass a key and a value, or let the second argument be a\n         * collection of keys and values. When using a collection, passing a value of\n         * `null` or `undefined` will remove the attribute.\n         *\n         * To use as a getter, pass only a string as the second argument.\n         *\n         * @function Highcharts.attr\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} elem\n         *        The DOM element to receive the attribute(s).\n         *\n         * @param {string|Highcharts.HTMLAttributes|Highcharts.SVGAttributes} [keyOrAttribs]\n         *        The property or an object of key-value pairs.\n         *\n         * @param {number|string} [value]\n         *        The value if a single property is set.\n         *\n         * @return {string|null|undefined}\n         *         When used as a getter, return the value.\n         */\n        function attr(elem, keyOrAttribs, value) {\n            const isGetter = isString(keyOrAttribs) && !defined(value);\n            let ret;\n            const attrSingle = (value, key) => {\n                // Set the value\n                if (defined(value)) {\n                    elem.setAttribute(key, value);\n                    // Get the value\n                }\n                else if (isGetter) {\n                    ret = elem.getAttribute(key);\n                    // IE7 and below cannot get class through getAttribute (#7850)\n                    if (!ret && key === 'class') {\n                        ret = elem.getAttribute(key + 'Name');\n                    }\n                    // Remove the value\n                }\n                else {\n                    elem.removeAttribute(key);\n                }\n            };\n            // If keyOrAttribs is a string\n            if (isString(keyOrAttribs)) {\n                attrSingle(value, keyOrAttribs);\n                // Else if keyOrAttribs is defined, it is a hash of key/value pairs\n            }\n            else {\n                objectEach(keyOrAttribs, attrSingle);\n            }\n            return ret;\n        }\n        /**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function Highcharts.splat\n         *\n         * @param {*} obj\n         *        The object to splat.\n         *\n         * @return {Array}\n         *         The produced or original array.\n         */\n        function splat(obj) {\n            return isArray(obj) ? obj : [obj];\n        }\n        /**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function Highcharts.syncTimeout\n         *\n         * @param {Function} fn\n         *        The function callback.\n         *\n         * @param {number} delay\n         *        Delay in milliseconds.\n         *\n         * @param {*} [context]\n         *        An optional context to send to the function callback.\n         *\n         * @return {number}\n         *         An identifier for the timeout that can later be cleared with\n         *         Highcharts.clearTimeout. Returns -1 if there is no timeout.\n         */\n        function syncTimeout(fn, delay, context) {\n            if (delay > 0) {\n                return setTimeout(fn, delay, context);\n            }\n            fn.call(0, context);\n            return -1;\n        }\n        /**\n         * Internal clear timeout. The function checks that the `id` was not removed\n         * (e.g. by `chart.destroy()`). For the details see\n         * [issue #7901](https://github.com/highcharts/highcharts/issues/7901).\n         *\n         * @function Highcharts.clearTimeout\n         *\n         * @param {number|undefined} id\n         * Id of a timeout.\n         */\n        function internalClearTimeout(id) {\n            if (defined(id)) {\n                clearTimeout(id);\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function Highcharts.extend<T>\n         *\n         * @param {T|undefined} a\n         *        The object to be extended.\n         *\n         * @param {Partial<T>} b\n         *        The object to add to the first one.\n         *\n         * @return {T}\n         *         Object a, the original object.\n         */\n        function extend(a, b) {\n            /* eslint-enable valid-jsdoc */\n            let n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) { // eslint-disable-line guard-for-in\n                a[n] = b[n];\n            }\n            return a;\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Return the first value that is not null or undefined.\n         *\n         * @function Highcharts.pick<T>\n         *\n         * @param {...Array<T|null|undefined>} items\n         *        Variable number of arguments to inspect.\n         *\n         * @return {T}\n         *         The value of the first argument that is not null or undefined.\n         */\n        function pick() {\n            const args = arguments;\n            const length = args.length;\n            for (let i = 0; i < length; i++) {\n                const arg = args[i];\n                if (typeof arg !== 'undefined' && arg !== null) {\n                    return arg;\n                }\n            }\n        }\n        /**\n         * Set CSS on a given element.\n         *\n         * @function Highcharts.css\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} el\n         *        An HTML DOM element.\n         *\n         * @param {Highcharts.CSSObject} styles\n         *        Style object with camel case property names.\n         *\n         * @return {void}\n         */\n        function css(el, styles) {\n            extend(el.style, styles);\n        }\n        /**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function Highcharts.createElement\n         *\n         * @param {string} tag\n         *        The HTML tag.\n         *\n         * @param {Highcharts.HTMLAttributes} [attribs]\n         *        Attributes as an object of key-value pairs.\n         *\n         * @param {Highcharts.CSSObject} [styles]\n         *        Styles as an object of key-value pairs.\n         *\n         * @param {Highcharts.HTMLDOMElement} [parent]\n         *        The parent HTML object.\n         *\n         * @param {boolean} [nopad=false]\n         *        If true, remove all padding, border and margin.\n         *\n         * @return {Highcharts.HTMLDOMElement}\n         *         The created DOM element.\n         */\n        function createElement(tag, attribs, styles, parent, nopad) {\n            const el = doc.createElement(tag);\n            if (attribs) {\n                extend(el, attribs);\n            }\n            if (nopad) {\n                css(el, { padding: '0', border: 'none', margin: '0' });\n            }\n            if (styles) {\n                css(el, styles);\n            }\n            if (parent) {\n                parent.appendChild(el);\n            }\n            return el;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Extend a prototyped class by new members.\n         *\n         * @deprecated\n         * @function Highcharts.extendClass<T>\n         *\n         * @param {Highcharts.Class<T>} parent\n         *        The parent prototype to inherit.\n         *\n         * @param {Highcharts.Dictionary<*>} members\n         *        A collection of prototype members to add or override compared to the\n         *        parent prototype.\n         *\n         * @return {Highcharts.Class<T>}\n         *         A new prototype.\n         */\n        function extendClass(parent, members) {\n            const obj = (function () { });\n            obj.prototype = new parent(); // eslint-disable-line new-cap\n            extend(obj.prototype, members);\n            return obj;\n        }\n        /**\n         * Left-pad a string to a given length by adding a character repetitively.\n         *\n         * @function Highcharts.pad\n         *\n         * @param {number} number\n         *        The input string or number.\n         *\n         * @param {number} [length]\n         *        The desired string length.\n         *\n         * @param {string} [padder=0]\n         *        The character to pad with.\n         *\n         * @return {string}\n         *         The padded string.\n         */\n        function pad(number, length, padder) {\n            return new Array((length || 2) +\n                1 -\n                String(number)\n                    .replace('-', '')\n                    .length).join(padder || '0') + number;\n        }\n        /**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function Highcharts.relativeLength\n         *\n         * @param {Highcharts.RelativeSize} value\n         *        A percentage string or a number.\n         *\n         * @param {number} base\n         *        The full length that represents 100%.\n         *\n         * @param {number} [offset=0]\n         *        A pixel offset to apply for percentage values. Used internally in\n         *        axis positioning.\n         *\n         * @return {number}\n         *         The computed length.\n         */\n        function relativeLength(value, base, offset) {\n            return (/%$/).test(value) ?\n                (base * parseFloat(value) / 100) + (offset || 0) :\n                parseFloat(value);\n        }\n        /**\n         * Replaces text in a string with a given replacement in a loop to catch nested\n         * matches after previous replacements.\n         *\n         * @function Highcharts.replaceNested\n         *\n         * @param {string} text\n         * Text to search and modify.\n         *\n         * @param {...Array<(RegExp|string)>} replacements\n         * One or multiple tuples with search pattern (`[0]: (string|RegExp)`) and\n         * replacement (`[1]: string`) for matching text.\n         *\n         * @return {string}\n         * Text with replacements.\n         */\n        function replaceNested(text, ...replacements) {\n            let previous, replacement;\n            do {\n                previous = text;\n                for (replacement of replacements) {\n                    text = text.replace(replacement[0], replacement[1]);\n                }\n            } while (text !== previous);\n            return text;\n        }\n        /**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function Highcharts.wrap\n         *\n         * @param {*} obj\n         *        The context object that the method belongs to. In real cases, this is\n         *        often a prototype.\n         *\n         * @param {string} method\n         *        The name of the method to extend.\n         *\n         * @param {Highcharts.WrapProceedFunction} func\n         *        A wrapper function callback. This function is called with the same\n         *        arguments as the original function, except that the original function\n         *        is unshifted and passed as the first argument.\n         */\n        function wrap(obj, method, func) {\n            const proceed = obj[method];\n            obj[method] = function () {\n                const outerArgs = arguments, scope = this;\n                return func.apply(this, [\n                    function () {\n                        return proceed.apply(scope, arguments.length ? arguments : outerArgs);\n                    }\n                ].concat([].slice.call(arguments)));\n            };\n        }\n        /**\n         * Get the magnitude of a number.\n         *\n         * @function Highcharts.getMagnitude\n         *\n         * @param {number} num\n         *        The number.\n         *\n         * @return {number}\n         *         The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc.\n         */\n        function getMagnitude(num) {\n            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n        }\n        /**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @deprecated\n         * @function Highcharts.normalizeTickInterval\n         *\n         * @param {number} interval\n         *        The raw, un-rounded interval.\n         *\n         * @param {Array<*>} [multiples]\n         *        Allowed multiples.\n         *\n         * @param {number} [magnitude]\n         *        The magnitude of the number.\n         *\n         * @param {boolean} [allowDecimals]\n         *        Whether to allow decimals.\n         *\n         * @param {boolean} [hasTickAmount]\n         *        If it has tickAmount, avoid landing on tick intervals lower than\n         *        original.\n         *\n         * @return {number}\n         *         The normalized interval.\n         *\n         * @todo\n         * Move this function to the Axis prototype. It is here only for historical\n         * reasons.\n         */\n        function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, hasTickAmount) {\n            let i, retInterval = interval;\n            // Round to a tenfold of 1, 2, 2.5 or 5\n            magnitude = pick(magnitude, getMagnitude(interval));\n            const normalized = interval / magnitude;\n            // Multiples for a linear scale\n            if (!multiples) {\n                multiples = hasTickAmount ?\n                    // Finer grained ticks when the tick amount is hard set, including\n                    // when alignTicks is true on multiple axes (#4580).\n                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n                    // Else, let ticks fall on rounder numbers\n                    [1, 2, 2.5, 5, 10];\n                // The allowDecimals option\n                if (allowDecimals === false) {\n                    if (magnitude === 1) {\n                        multiples = multiples.filter(function (num) {\n                            return num % 1 === 0;\n                        });\n                    }\n                    else if (magnitude <= 0.1) {\n                        multiples = [1 / magnitude];\n                    }\n                }\n            }\n            // Normalize the interval to the nearest multiple\n            for (i = 0; i < multiples.length; i++) {\n                retInterval = multiples[i];\n                // Only allow tick amounts smaller than natural\n                if ((hasTickAmount &&\n                    retInterval * magnitude >= interval) ||\n                    (!hasTickAmount &&\n                        (normalized <=\n                            (multiples[i] +\n                                (multiples[i + 1] || multiples[i])) / 2))) {\n                    break;\n                }\n            }\n            // Multiply back to the correct magnitude. Correct floats to appropriate\n            // precision (#6085).\n            retInterval = correctFloat(retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10));\n            return retInterval;\n        }\n        /**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function Highcharts.stableSort\n         *\n         * @param {Array<*>} arr\n         *        The array to sort.\n         *\n         * @param {Function} sortFunction\n         *        The function to sort it with, like with regular Array.prototype.sort.\n         */\n        function stableSort(arr, sortFunction) {\n            // @todo It seems like Chrome since v70 sorts in a stable way internally,\n            // plus all other browsers do it, so over time we may be able to remove this\n            // function\n            const length = arr.length;\n            let sortValue, i;\n            // Add index to each item\n            for (i = 0; i < length; i++) {\n                arr[i].safeI = i; // Stable sort index\n            }\n            arr.sort(function (a, b) {\n                sortValue = sortFunction(a, b);\n                return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n            });\n            // Remove index from items\n            for (i = 0; i < length; i++) {\n                delete arr[i].safeI; // Stable sort index\n            }\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMin\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The lowest number.\n         */\n        function arrayMin(data) {\n            let i = data.length, min = data[0];\n            while (i--) {\n                if (data[i] < min) {\n                    min = data[i];\n                }\n            }\n            return min;\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMax\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The highest number.\n         */\n        function arrayMax(data) {\n            let i = data.length, max = data[0];\n            while (i--) {\n                if (data[i] > max) {\n                    max = data[i];\n                }\n            }\n            return max;\n        }\n        /**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function Highcharts.destroyObjectProperties\n         *\n         * @param {*} obj\n         *        The object to destroy properties on.\n         *\n         * @param {*} [except]\n         *        Exception, do not destroy this property, only delete it.\n         */\n        function destroyObjectProperties(obj, except, destructablesOnly) {\n            objectEach(obj, function (val, n) {\n                // If the object is non-null and destroy is defined\n                if (val !== except && val?.destroy) {\n                    // Invoke the destroy\n                    val.destroy();\n                }\n                // Delete the property from the object\n                if (val?.destroy || !destructablesOnly) {\n                    delete obj[n];\n                }\n            });\n        }\n        /**\n         * Discard a HTML element\n         *\n         * @function Highcharts.discardElement\n         *\n         * @param {Highcharts.HTMLDOMElement} element\n         *        The HTML node to discard.\n         */\n        function discardElement(element) {\n            if (element && element.parentElement) {\n                element.parentElement.removeChild(element);\n            }\n        }\n        /**\n         * Fix JS round off float errors.\n         *\n         * @function Highcharts.correctFloat\n         *\n         * @param {number} num\n         *        A float number to fix.\n         *\n         * @param {number} [prec=14]\n         *        The precision.\n         *\n         * @return {number}\n         *         The corrected float number.\n         */\n        function correctFloat(num, prec) {\n            // When the number is higher than 1e14 use the number (#16275)\n            return num > 1e14 ? num : parseFloat(num.toPrecision(prec || 14));\n        }\n        /**\n         * The time unit lookup\n         *\n         * @ignore\n         */\n        const timeUnits = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 24 * 3600000,\n            week: 7 * 24 * 3600000,\n            month: 28 * 24 * 3600000,\n            year: 364 * 24 * 3600000\n        };\n        /**\n         * Easing definition\n         *\n         * @private\n         * @function Math.easeInOutSine\n         *\n         * @param {number} pos\n         *        Current position, ranging from 0 to 1.\n         *\n         * @return {number}\n         *         Ease result\n         */\n        Math.easeInOutSine = function (pos) {\n            return -0.5 * (Math.cos(Math.PI * pos) - 1);\n        };\n        /**\n         * Convenience function to get the align factor, used several places for\n         * computing positions\n         * @private\n         */\n        const getAlignFactor = (align = '') => ({\n            center: 0.5,\n            right: 1,\n            middle: 0.5,\n            bottom: 1\n        }[align] || 0);\n        /**\n         * Find the closest distance between two values of a two-dimensional array\n         * @private\n         * @function Highcharts.getClosestDistance\n         *\n         * @param {Array<Array<number>>} arrays\n         *          An array of arrays of numbers\n         *\n         * @return {number | undefined}\n         *          The closest distance between values\n         */\n        function getClosestDistance(arrays, onError) {\n            const allowNegative = !onError;\n            let closest, loopLength, distance, i;\n            arrays.forEach((xData) => {\n                if (xData.length > 1) {\n                    loopLength = xData.length - 1;\n                    for (i = loopLength; i > 0; i--) {\n                        distance = xData[i] - xData[i - 1];\n                        if (distance < 0 && !allowNegative) {\n                            onError?.();\n                            // Only one call\n                            onError = void 0;\n                        }\n                        else if (distance && (typeof closest === 'undefined' || distance < closest)) {\n                            closest = distance;\n                        }\n                    }\n                }\n            });\n            return closest;\n        }\n        /**\n         * Returns the value of a property path on a given object.\n         *\n         * @private\n         * @function getNestedProperty\n         *\n         * @param {string} path\n         * Path to the property, for example `custom.myValue`.\n         *\n         * @param {unknown} obj\n         * Instance containing the property on the specific path.\n         *\n         * @return {unknown}\n         * The unknown property value.\n         */\n        function getNestedProperty(path, parent) {\n            const pathElements = path.split('.');\n            while (pathElements.length && defined(parent)) {\n                const pathElement = pathElements.shift();\n                // Filter on the key\n                if (typeof pathElement === 'undefined' ||\n                    pathElement === '__proto__') {\n                    return; // Undefined\n                }\n                if (pathElement === 'this') {\n                    let thisProp;\n                    if (isObject(parent)) {\n                        thisProp = parent['@this'];\n                    }\n                    return thisProp ?? parent;\n                }\n                const child = parent[pathElement];\n                // Filter on the child\n                if (!defined(child) ||\n                    typeof child === 'function' ||\n                    typeof child.nodeType === 'number' ||\n                    child === win) {\n                    return; // Undefined\n                }\n                // Else, proceed\n                parent = child;\n            }\n            return parent;\n        }\n        /**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function Highcharts.getStyle\n         *\n         * @param {Highcharts.HTMLDOMElement} el\n         * An HTML element.\n         *\n         * @param {string} prop\n         * The property name.\n         *\n         * @param {boolean} [toInt=true]\n         * Parse to integer.\n         *\n         * @return {number|string|undefined}\n         * The style value.\n         */\n        function getStyle(el, prop, toInt) {\n            let style;\n            // For width and height, return the actual inner pixel size (#4913)\n            if (prop === 'width') {\n                let offsetWidth = Math.min(el.offsetWidth, el.scrollWidth);\n                // In flex boxes, we need to use getBoundingClientRect and floor it,\n                // because scrollWidth doesn't support subpixel precision (#6427) ...\n                const boundingClientRectWidth = el.getBoundingClientRect &&\n                    el.getBoundingClientRect().width;\n                // ...unless if the containing div or its parents are transform-scaled\n                // down, in which case the boundingClientRect can't be used as it is\n                // also scaled down (#9871, #10498).\n                if (boundingClientRectWidth < offsetWidth &&\n                    boundingClientRectWidth >= offsetWidth - 1) {\n                    offsetWidth = Math.floor(boundingClientRectWidth);\n                }\n                return Math.max(0, // #8377\n                (offsetWidth -\n                    (getStyle(el, 'padding-left', true) || 0) -\n                    (getStyle(el, 'padding-right', true) || 0)));\n            }\n            if (prop === 'height') {\n                return Math.max(0, // #8377\n                (Math.min(el.offsetHeight, el.scrollHeight) -\n                    (getStyle(el, 'padding-top', true) || 0) -\n                    (getStyle(el, 'padding-bottom', true) || 0)));\n            }\n            // Otherwise, get the computed style\n            const css = win.getComputedStyle(el, void 0); // eslint-disable-line no-undefined\n            if (css) {\n                style = css.getPropertyValue(prop);\n                if (pick(toInt, prop !== 'opacity')) {\n                    style = pInt(style);\n                }\n            }\n            return style;\n        }\n        /**\n         * Return the value of the first element in the array that satisfies the\n         * provided testing function.\n         *\n         * @function Highcharts.find<T>\n         *\n         * @param {Array<T>} arr\n         *        The array to test.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if this item satisfies the condition.\n         *\n         * @return {T|undefined}\n         *         The value of the element.\n         */\n        const find = Array.prototype.find ?\n            function (arr, callback) {\n                return arr.find(callback);\n            } :\n            // Legacy implementation. PhantomJS, IE <= 11 etc. #7223.\n            function (arr, callback) {\n                let i;\n                const length = arr.length;\n                for (i = 0; i < length; i++) {\n                    if (callback(arr[i], i)) { // eslint-disable-line node/callback-return\n                        return arr[i];\n                    }\n                }\n            };\n        /**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function Highcharts.offset\n         *\n         * @param {global.Element} el\n         *        The DOM element.\n         *\n         * @return {Highcharts.OffsetObject}\n         *         An object containing `left` and `top` properties for the position in\n         *         the page.\n         */\n        function offset(el) {\n            const docElem = doc.documentElement, box = (el.parentElement || el.parentNode) ?\n                el.getBoundingClientRect() :\n                { top: 0, left: 0, width: 0, height: 0 };\n            return {\n                top: box.top + (win.pageYOffset || docElem.scrollTop) -\n                    (docElem.clientTop || 0),\n                left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n                    (docElem.clientLeft || 0),\n                width: box.width,\n                height: box.height\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Iterate over object key pairs in an object.\n         *\n         * @function Highcharts.objectEach<T>\n         *\n         * @param {*} obj\n         *        The object to iterate over.\n         *\n         * @param {Highcharts.ObjectEachCallbackFunction<T>} fn\n         *        The iterator callback. It passes three arguments:\n         *        * value - The property value.\n         *        * key - The property key.\n         *        * obj - The object that objectEach is being applied to.\n         *\n         * @param {T} [ctx]\n         *        The context.\n         */\n        function objectEach(obj, fn, ctx) {\n            /* eslint-enable valid-jsdoc */\n            for (const key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    fn.call(ctx || obj[key], obj[key], key, obj);\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Add an event listener.\n         *\n         * @function Highcharts.addEvent<T>\n         *\n         * @param  {Highcharts.Class<T>|T} el\n         *         The element or object to add a listener to. It can be a\n         *         {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         *\n         * @param  {string} type\n         *         The event type.\n         *\n         * @param  {Highcharts.EventCallbackFunction<T>|Function} fn\n         *         The function callback to execute when the event is fired.\n         *\n         * @param  {Highcharts.EventOptionsObject} [options]\n         *         Options for adding the event.\n         *\n         * @sample highcharts/members/addevent\n         *         Use a general `render` event to draw shapes on a chart\n         *\n         * @return {Function}\n         *         A callback function to remove the added event.\n         */\n        function addEvent(el, type, fn, options = {}) {\n            /* eslint-enable valid-jsdoc */\n            // Add hcEvents to either the prototype (in case we're running addEvent on a\n            // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n            // inherited down the prototype chain, in which case we need to set the\n            // property on this instance (which may itself be a prototype).\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                owner.hcEvents = {};\n            }\n            const events = owner.hcEvents;\n            // Allow click events added to points, otherwise they will be prevented by\n            // the TouchPointer.pinch function after a pinch zoom operation (#7091).\n            if (H.Point && // Without H a dependency loop occurs\n                el instanceof H.Point &&\n                el.series &&\n                el.series.chart) {\n                el.series.chart.runTrackerClick = true;\n            }\n            // Handle DOM events\n            // If the browser supports passive events, add it to improve performance\n            // on touch events (#11353).\n            const addEventListener = el.addEventListener;\n            if (addEventListener) {\n                addEventListener.call(el, type, fn, H.supportsPassiveEvents ? {\n                    passive: options.passive === void 0 ?\n                        type.indexOf('touch') !== -1 : options.passive,\n                    capture: false\n                } : false);\n            }\n            if (!events[type]) {\n                events[type] = [];\n            }\n            const eventObject = {\n                fn,\n                order: typeof options.order === 'number' ? options.order : Infinity\n            };\n            events[type].push(eventObject);\n            // Order the calls\n            events[type].sort((a, b) => a.order - b.order);\n            // Return a function that can be called to remove this event.\n            return function () {\n                removeEvent(el, type, fn);\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.removeEvent<T>\n         *\n         * @param {Highcharts.Class<T>|T} el\n         *        The element to remove events on.\n         *\n         * @param {string} [type]\n         *        The type of events to remove. If undefined, all events are removed\n         *        from the element.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>} [fn]\n         *        The specific callback to remove. If undefined, all events that match\n         *        the element and optionally the type are removed.\n         *\n         * @return {void}\n         */\n        function removeEvent(el, type, fn) {\n            /* eslint-enable valid-jsdoc */\n            /**\n             * @private\n             */\n            function removeOneEvent(type, fn) {\n                const removeEventListener = el.removeEventListener;\n                if (removeEventListener) {\n                    removeEventListener.call(el, type, fn, false);\n                }\n            }\n            /**\n             * @private\n             */\n            function removeAllEvents(eventCollection) {\n                let types, len;\n                if (!el.nodeName) {\n                    return; // Break on non-DOM events\n                }\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                }\n                else {\n                    types = eventCollection;\n                }\n                objectEach(types, function (_val, n) {\n                    if (eventCollection[n]) {\n                        len = eventCollection[n].length;\n                        while (len--) {\n                            removeOneEvent(n, eventCollection[n][len].fn);\n                        }\n                    }\n                });\n            }\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                const events = owner.hcEvents;\n                if (type) {\n                    const typeEvents = (events[type] || []);\n                    if (fn) {\n                        events[type] = typeEvents.filter(function (obj) {\n                            return fn !== obj.fn;\n                        });\n                        removeOneEvent(type, fn);\n                    }\n                    else {\n                        removeAllEvents(events);\n                        events[type] = [];\n                    }\n                }\n                else {\n                    removeAllEvents(events);\n                    delete owner.hcEvents;\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.fireEvent<T>\n         *\n         * @param {T} el\n         *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n         *        an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The type of event.\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Custom event arguments that are passed on as an argument to the event\n         *        handler.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>|Function} [defaultFunction]\n         *        The default function to execute if the other listeners haven't\n         *        returned false.\n         *\n         * @return {void}\n         */\n        function fireEvent(el, type, eventArguments, defaultFunction) {\n            /* eslint-enable valid-jsdoc */\n            eventArguments = eventArguments || {};\n            if (doc.createEvent &&\n                (el.dispatchEvent ||\n                    (el.fireEvent &&\n                        // Enable firing events on Highcharts instance.\n                        el !== H))) {\n                const e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                eventArguments = extend(e, eventArguments);\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(eventArguments);\n                }\n                else {\n                    el.fireEvent(type, eventArguments);\n                }\n            }\n            else if (el.hcEvents) {\n                if (!eventArguments.target) {\n                    // We're running a custom event\n                    extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip\n                        // default handler if called. The built-in\n                        // defaultPrevented property is not overwritable (#5112)\n                        preventDefault: function () {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking\n                        // the zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event\n                        // (#2297). If it is set, we're running a browser event.\n                        type: type\n                    });\n                }\n                const events = [];\n                let object = el;\n                let multilevel = false;\n                // Recurse up the inheritance chain and collect hcEvents set as own\n                // objects on the prototypes.\n                while (object.hcEvents) {\n                    if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                        object.hcEvents[type]) {\n                        if (events.length) {\n                            multilevel = true;\n                        }\n                        events.unshift.apply(events, object.hcEvents[type]);\n                    }\n                    object = Object.getPrototypeOf(object);\n                }\n                // For performance reasons, only sort the event handlers in case we are\n                // dealing with multiple levels in the prototype chain. Otherwise, the\n                // events are already sorted in the addEvent function.\n                if (multilevel) {\n                    // Order the calls\n                    events.sort((a, b) => a.order - b.order);\n                }\n                // Call the collected event handlers\n                events.forEach((obj) => {\n                    // If the event handler returns false, prevent the default handler\n                    // from executing\n                    if (obj.fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                });\n            }\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction.call(el, eventArguments);\n            }\n        }\n        let serialMode;\n        /**\n         * Get a unique key for using in internal element id's and pointers. The key is\n         * composed of a random hash specific to this Highcharts instance, and a\n         * counter.\n         *\n         * @example\n         * let id = uniqueKey(); // => 'highcharts-x45f6hp-0'\n         *\n         * @function Highcharts.uniqueKey\n         *\n         * @return {string}\n         * A unique key.\n         */\n        const uniqueKey = (function () {\n            const hash = Math.random().toString(36).substring(2, 9) + '-';\n            let id = 0;\n            return function () {\n                return 'highcharts-' + (serialMode ? '' : hash) + id++;\n            };\n        }());\n        /**\n         * Activates a serial mode for element IDs provided by\n         * {@link Highcharts.uniqueKey}. This mode can be used in automated tests, where\n         * a simple comparison of two rendered SVG graphics is needed.\n         *\n         * **Note:** This is only for testing purposes and will break functionality in\n         * webpages with multiple charts.\n         *\n         * @example\n         * if (\n         *   process &&\n         *   process.env.NODE_ENV === 'development'\n         * ) {\n         *   Highcharts.useSerialIds(true);\n         * }\n         *\n         * @function Highcharts.useSerialIds\n         *\n         * @param {boolean} [mode]\n         * Changes the state of serial mode.\n         *\n         * @return {boolean|undefined}\n         * State of the serial mode.\n         */\n        function useSerialIds(mode) {\n            return (serialMode = pick(mode, serialMode));\n        }\n        function isFunction(obj) {\n            return typeof obj === 'function';\n        }\n        function ucfirst(s) {\n            return ((isString(s) ?\n                s.substring(0, 1).toUpperCase() + s.substring(1) :\n                String(s)));\n        }\n        /* *\n         *\n         *  External\n         *\n         * */\n        // Register Highcharts as a plugin in jQuery\n        if (win.jQuery) {\n            /**\n             * Highcharts-extended JQuery.\n             *\n             * @external JQuery\n             */\n            /**\n             * Helper function to return the chart of the current JQuery selector\n             * element.\n             *\n             * @function external:JQuery#highcharts\n             *\n             * @return {Highcharts.Chart}\n             *         The chart that is linked to the JQuery selector element.\n             */ /**\n            * Factory function to create a chart in the current JQuery selector\n            * element.\n            *\n            * @function external:JQuery#highcharts\n            *\n            * @param {'Chart'|'Map'|'StockChart'|string} [className]\n            *        Name of the factory class in the Highcharts namespace.\n            *\n            * @param {Highcharts.Options} [options]\n            *        The chart options structure.\n            *\n            * @param {Highcharts.ChartCallbackFunction} [callback]\n            *        Function to run when the chart has loaded and all external\n            *        images are loaded. Defining a\n            *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n            *        handler is equivalent.\n            *\n            * @return {JQuery}\n            *         The current JQuery selector.\n            */\n            win.jQuery.fn.highcharts = function () {\n                const args = [].slice.call(arguments);\n                if (this[0]) { // `this[0]` is the renderTo div\n                    // Create the chart\n                    if (args[0]) {\n                        new H[ // eslint-disable-line computed-property-spacing, no-new\n                        // Constructor defaults to Chart\n                        isString(args[0]) ? args.shift() : 'Chart'](this[0], args[0], args[1]);\n                        return this;\n                    }\n                    // When called without parameters or with the return argument,\n                    // return an existing chart\n                    return charts[attr(this[0], 'data-highcharts-chart')];\n                }\n            };\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // TODO use named exports when supported.\n        const Utilities = {\n            addEvent,\n            arrayMax,\n            arrayMin,\n            attr,\n            clamp,\n            clearTimeout: internalClearTimeout,\n            correctFloat,\n            createElement,\n            crisp,\n            css,\n            defined,\n            destroyObjectProperties,\n            diffObjects,\n            discardElement,\n            erase,\n            error,\n            extend,\n            extendClass,\n            find,\n            fireEvent,\n            getAlignFactor,\n            getClosestDistance,\n            getMagnitude,\n            getNestedProperty,\n            getStyle,\n            insertItem,\n            isArray,\n            isClass,\n            isDOMElement,\n            isFunction,\n            isNumber,\n            isObject,\n            isString,\n            merge,\n            normalizeTickInterval,\n            objectEach,\n            offset,\n            pad,\n            pick,\n            pInt,\n            pushUnique,\n            relativeLength,\n            removeEvent,\n            replaceNested,\n            splat,\n            stableSort,\n            syncTimeout,\n            timeUnits,\n            ucfirst,\n            uniqueKey,\n            useSerialIds,\n            wrap\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms and defer of 0ms.\n         *\n         * @interface Highcharts.AnimationOptionsObject\n         */ /**\n        * A callback function to execute when the animation finishes.\n        * @name Highcharts.AnimationOptionsObject#complete\n        * @type {Function|undefined}\n        */ /**\n        * The animation defer in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#defer\n        * @type {number|undefined}\n        */ /**\n        * The animation duration in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#duration\n        * @type {number|undefined}\n        */ /**\n        * The name of an easing function as defined on the `Math` object.\n        * @name Highcharts.AnimationOptionsObject#easing\n        * @type {string|Function|undefined}\n        */ /**\n        * A callback function to execute on each step of each attribute or CSS property\n        * that's being animated. The first argument contains information about the\n        * animation and progress.\n        * @name Highcharts.AnimationOptionsObject#step\n        * @type {Function|undefined}\n        */\n        /**\n         * Creates a frame for the animated SVG element.\n         *\n         * @callback Highcharts.AnimationStepCallbackFunction\n         *\n         * @param {Highcharts.SVGElement} this\n         *        The SVG element to animate.\n         *\n         * @return {void}\n         */\n        /**\n         * Interface description for a class.\n         *\n         * @interface Highcharts.Class<T>\n         * @extends Function\n         */ /**\n        * Class constructor.\n        * @function Highcharts.Class<T>#new\n        * @param {...Array<*>} args\n        *        Constructor arguments.\n        * @return {T}\n        *         Class instance.\n        */\n        /**\n         * A style object with camel case property names to define visual appearance of\n         * a SVG element or HTML element. The properties can be whatever styles are\n         * supported on the given SVG or HTML element.\n         *\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         *\n         * @interface Highcharts.CSSObject\n         */ /**\n        * @name Highcharts.CSSObject#[key:string]\n        * @type {boolean|number|string|undefined}\n        */ /**\n        * Background style for the element.\n        * @name Highcharts.CSSObject#background\n        * @type {string|undefined}\n        */ /**\n        * Background color of the element.\n        * @name Highcharts.CSSObject#backgroundColor\n        * @type {Highcharts.ColorString|undefined}\n        */ /**\n        * Border style for the element.\n        * @name Highcharts.CSSObject#border\n        * @type {string|undefined}\n        */ /**\n        * Radius of the element border.\n        * @name Highcharts.CSSObject#borderRadius\n        * @type {number|undefined}\n        */ /**\n        * Color used in the element. The 'contrast' option is a Highcharts custom\n        * property that results in black or white, depending on the background of the\n        * element.\n        * @name Highcharts.CSSObject#color\n        * @type {'contrast'|Highcharts.ColorString|undefined}\n        */ /**\n        * Style of the mouse cursor when resting over the element.\n        * @name Highcharts.CSSObject#cursor\n        * @type {Highcharts.CursorValue|undefined}\n        */ /**\n        * Font family of the element text. Multiple values have to be in decreasing\n        * preference order and separated by comma.\n        * @name Highcharts.CSSObject#fontFamily\n        * @type {string|undefined}\n        */ /**\n        * Font size of the element text.\n        * @name Highcharts.CSSObject#fontSize\n        * @type {string|undefined}\n        */ /**\n        * Font weight of the element text.\n        * @name Highcharts.CSSObject#fontWeight\n        * @type {string|undefined}\n        */ /**\n        * Height of the element.\n        * @name Highcharts.CSSObject#height\n        * @type {number|undefined}\n        */ /**\n        * The maximum number of lines. If lines are cropped away, an ellipsis will be\n        * added.\n        * @name Highcharts.CSSObject#lineClamp\n        * @type {number|undefined}\n        */ /**\n        * Width of the element border.\n        * @name Highcharts.CSSObject#lineWidth\n        * @type {number|undefined}\n        */ /**\n        * Opacity of the element.\n        * @name Highcharts.CSSObject#opacity\n        * @type {number|undefined}\n        */ /**\n        * Space around the element content.\n        * @name Highcharts.CSSObject#padding\n        * @type {string|undefined}\n        */ /**\n        * Behaviour of the element when the mouse cursor rests over it.\n        * @name Highcharts.CSSObject#pointerEvents\n        * @type {string|undefined}\n        */ /**\n        * Positioning of the element.\n        * @name Highcharts.CSSObject#position\n        * @type {string|undefined}\n        */ /**\n        * Alignment of the element text.\n        * @name Highcharts.CSSObject#textAlign\n        * @type {string|undefined}\n        */ /**\n        * Additional decoration of the element text.\n        * @name Highcharts.CSSObject#textDecoration\n        * @type {string|undefined}\n        */ /**\n        * Outline style of the element text.\n        * @name Highcharts.CSSObject#textOutline\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text. Highcharts SVG elements support\n        * `ellipsis` when a `width` is set.\n        * @name Highcharts.CSSObject#textOverflow\n        * @type {string|undefined}\n        */ /**\n        * Top spacing of the element relative to the parent element.\n        * @name Highcharts.CSSObject#top\n        * @type {string|undefined}\n        */ /**\n        * Animated transition of selected element properties.\n        * @name Highcharts.CSSObject#transition\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text.\n        * @name Highcharts.CSSObject#whiteSpace\n        * @type {string|undefined}\n        */ /**\n        * Width of the element.\n        * @name Highcharts.CSSObject#width\n        * @type {number|undefined}\n        */\n        /**\n         * All possible cursor styles.\n         *\n         * @typedef {'alias'|'all-scroll'|'auto'|'cell'|'col-resize'|'context-menu'|'copy'|'crosshair'|'default'|'e-resize'|'ew-resize'|'grab'|'grabbing'|'help'|'move'|'n-resize'|'ne-resize'|'nesw-resize'|'no-drop'|'none'|'not-allowed'|'ns-resize'|'nw-resize'|'nwse-resize'|'pointer'|'progress'|'row-resize'|'s-resize'|'se-resize'|'sw-resize'|'text'|'vertical-text'|'w-resize'|'wait'|'zoom-in'|'zoom-out'} Highcharts.CursorValue\n         */\n        /**\n         * All possible dash styles.\n         *\n         * @typedef {'Dash'|'DashDot'|'Dot'|'LongDash'|'LongDashDot'|'LongDashDotDot'|'ShortDash'|'ShortDashDot'|'ShortDashDotDot'|'ShortDot'|'Solid'} Highcharts.DashStyleValue\n         */\n        /**\n         * Generic dictionary in TypeScript notation.\n         * Use the native `AnyRecord` instead.\n         *\n         * @deprecated\n         * @interface Highcharts.Dictionary<T>\n         */ /**\n        * @name Highcharts.Dictionary<T>#[key:string]\n        * @type {T}\n        */\n        /**\n         * The function callback to execute when the event is fired. The `this` context\n         * contains the instance, that fired the event.\n         *\n         * @callback Highcharts.EventCallbackFunction<T>\n         *\n         * @param {T} this\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Event arguments.\n         *\n         * @return {boolean|void}\n         */\n        /**\n         * The event options for adding function callback.\n         *\n         * @interface Highcharts.EventOptionsObject\n         */ /**\n        * The order the event handler should be called. This opens for having one\n        * handler be called before another, independent of in which order they were\n        * added.\n        * @name Highcharts.EventOptionsObject#order\n        * @type {number}\n        */ /**\n        * Whether an event should be passive or not.\n        * When set to `true`, the function specified by listener will never call\n        * `preventDefault()`.\n        * @name Highcharts.EventOptionsObject#passive\n        * @type boolean\n        */\n        /**\n         * Formats data as a string. Usually the data is accessible through the `this`\n         * keyword.\n         *\n         * @callback Highcharts.FormatterCallbackFunction<T>\n         *\n         * @param {T} this\n         *        Context to format\n         *\n         * @return {string}\n         *         Formatted text\n         */\n        /**\n         * An object of key-value pairs for HTML attributes.\n         *\n         * @typedef {Highcharts.Dictionary<boolean|number|string|Function>} Highcharts.HTMLAttributes\n         */\n        /**\n         * An HTML DOM element. The type is a reference to the regular HTMLElement in\n         * the global scope.\n         *\n         * @typedef {global.HTMLElement} Highcharts.HTMLDOMElement\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\n         */\n        /**\n         * The iterator callback.\n         *\n         * @callback Highcharts.ObjectEachCallbackFunction<T>\n         *\n         * @param {T} this\n         *        The context.\n         *\n         * @param {*} value\n         *        The property value.\n         *\n         * @param {string} key\n         *        The property key.\n         *\n         * @param {*} obj\n         *        The object that objectEach is being applied to.\n         */\n        /**\n         * An object containing `left` and `top` properties for the position in the\n         * page.\n         *\n         * @interface Highcharts.OffsetObject\n         */ /**\n        * Left distance to the page border.\n        * @name Highcharts.OffsetObject#left\n        * @type {number}\n        */ /**\n        * Top distance to the page border.\n        * @name Highcharts.OffsetObject#top\n        * @type {number}\n        */\n        /**\n         * Describes a range.\n         *\n         * @interface Highcharts.RangeObject\n         */ /**\n        * Maximum number of the range.\n        * @name Highcharts.RangeObject#max\n        * @type {number}\n        */ /**\n        * Minimum number of the range.\n        * @name Highcharts.RangeObject#min\n        * @type {number}\n        */\n        /**\n         * If a number is given, it defines the pixel length. If a percentage string is\n         * given, like for example `'50%'`, the setting defines a length relative to a\n         * base size, for example the size of a container.\n         *\n         * @typedef {number|string} Highcharts.RelativeSize\n         */\n        /**\n         * Proceed function to call original (wrapped) function.\n         *\n         * @callback Highcharts.WrapProceedFunction\n         *\n         * @param {*} [arg1]\n         *        Optional argument. Without any arguments defaults to first argument of\n         *        the wrapping function.\n         *\n         * @param {*} [arg2]\n         *        Optional argument. Without any arguments defaults to second argument\n         *        of the wrapping function.\n         *\n         * @param {*} [arg3]\n         *        Optional argument. Without any arguments defaults to third argument of\n         *        the wrapping function.\n         *\n         * @return {*}\n         *         Return value of the original function.\n         */\n        /**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions. The most important member of the namespace would be the\n         * chart constructor.\n         *\n         * @example\n         * let chart = Highcharts.chart('container', { ... });\n         *\n         * @namespace Highcharts\n         */\n        ''; // Detach doclets above\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Core/Renderer/HTML/AST.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { SVG_NS, win } = H;\n        const { attr, createElement, css, error, isFunction, isString, objectEach, splat } = U;\n        const { trustedTypes } = win;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // Create the trusted type policy. This should not be exposed.\n        const trustedTypesPolicy = (trustedTypes &&\n            isFunction(trustedTypes.createPolicy) &&\n            trustedTypes.createPolicy('highcharts', {\n                createHTML: (s) => s\n            }));\n        const emptyHTML = trustedTypesPolicy ?\n            trustedTypesPolicy.createHTML('') :\n            '';\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AST class represents an abstract syntax tree of HTML or SVG content. It\n         * can take HTML as an argument, parse it, optionally transform it to SVG, then\n         * perform sanitation before inserting it into the DOM.\n         *\n         * @class\n         * @name Highcharts.AST\n         *\n         * @param {string|Array<Highcharts.ASTNode>} source\n         * Either an HTML string or an ASTNode list to populate the tree.\n         */\n        class AST {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Filter an object of SVG or HTML attributes against the allow list.\n             *\n             * @static\n             *\n             * @function Highcharts.AST#filterUserAttributes\n             *\n             * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The filtered attributes\n             */\n            static filterUserAttributes(attributes) {\n                objectEach(attributes, (val, key) => {\n                    let valid = true;\n                    if (AST.allowedAttributes.indexOf(key) === -1) {\n                        valid = false;\n                    }\n                    if (['background', 'dynsrc', 'href', 'lowsrc', 'src']\n                        .indexOf(key) !== -1) {\n                        valid = isString(val) && AST.allowedReferences.some((ref) => val.indexOf(ref) === 0);\n                    }\n                    if (!valid) {\n                        error(33, false, void 0, {\n                            'Invalid attribute in config': `${key}`\n                        });\n                        delete attributes[key];\n                    }\n                    // #17753, < is not allowed in SVG attributes\n                    if (isString(val) && attributes[key]) {\n                        attributes[key] = val.replace(/</g, '&lt;');\n                    }\n                });\n                return attributes;\n            }\n            static parseStyle(style) {\n                return style\n                    .split(';')\n                    .reduce((styles, line) => {\n                    const pair = line.split(':').map((s) => s.trim()), key = pair.shift();\n                    if (key && pair.length) {\n                        styles[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = pair.join(':'); // #17146\n                    }\n                    return styles;\n                }, {});\n            }\n            /**\n             * Utility function to set html content for an element by passing in a\n             * markup string. The markup is safely parsed by the AST class to avoid\n             * XSS vulnerabilities. This function should be used instead of setting\n             * `innerHTML` in all cases where the content is not fully trusted.\n             *\n             * @static\n             * @function Highcharts.AST#setElementHTML\n             *\n             * @param {SVGDOMElement|HTMLDOMElement} el\n             * Node to set content of.\n             *\n             * @param {string} html\n             * Markup string\n             */\n            static setElementHTML(el, html) {\n                el.innerHTML = AST.emptyHTML; // Clear previous\n                if (html) {\n                    const ast = new AST(html);\n                    ast.addToDOM(el);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n            constructor(source) {\n                this.nodes = typeof source === 'string' ?\n                    this.parseMarkup(source) : source;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add the tree defined as a hierarchical JS structure to the DOM\n             *\n             * @function Highcharts.AST#addToDOM\n             *\n             * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n             * The node where it should be added\n             *\n             * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n             * The inserted node.\n             */\n            addToDOM(parent) {\n                /**\n                 * @private\n                 * @param {Highcharts.ASTNode} subtree\n                 * HTML/SVG definition\n                 * @param {Element} [subParent]\n                 * parent node\n                 * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n                 * The inserted node.\n                 */\n                function recurse(subtree, subParent) {\n                    let ret;\n                    splat(subtree).forEach(function (item) {\n                        const tagName = item.tagName;\n                        const textNode = item.textContent ?\n                            H.doc.createTextNode(item.textContent) :\n                            void 0;\n                        // Whether to ignore the AST filtering totally, #15345\n                        const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n                        let node;\n                        if (tagName) {\n                            if (tagName === '#text') {\n                                node = textNode;\n                            }\n                            else if (AST.allowedTags.indexOf(tagName) !== -1 ||\n                                bypassHTMLFiltering) {\n                                const NS = tagName === 'svg' ?\n                                    SVG_NS :\n                                    (subParent.namespaceURI || SVG_NS);\n                                const element = H.doc.createElementNS(NS, tagName);\n                                const attributes = item.attributes || {};\n                                // Apply attributes from root of AST node, legacy from\n                                // from before TextBuilder\n                                objectEach(item, function (val, key) {\n                                    if (key !== 'tagName' &&\n                                        key !== 'attributes' &&\n                                        key !== 'children' &&\n                                        key !== 'style' &&\n                                        key !== 'textContent') {\n                                        attributes[key] = val;\n                                    }\n                                });\n                                attr(element, bypassHTMLFiltering ?\n                                    attributes :\n                                    AST.filterUserAttributes(attributes));\n                                if (item.style) {\n                                    css(element, item.style);\n                                }\n                                // Add text content\n                                if (textNode) {\n                                    element.appendChild(textNode);\n                                }\n                                // Recurse\n                                recurse(item.children || [], element);\n                                node = element;\n                            }\n                            else {\n                                error(33, false, void 0, {\n                                    'Invalid tagName in config': tagName\n                                });\n                            }\n                        }\n                        // Add to the tree\n                        if (node) {\n                            subParent.appendChild(node);\n                        }\n                        ret = node;\n                    });\n                    // Return last node added (on top level it's the only one)\n                    return ret;\n                }\n                return recurse(this.nodes, parent);\n            }\n            /**\n             * Parse HTML/SVG markup into AST Node objects. Used internally from the\n             * constructor.\n             *\n             * @private\n             *\n             * @function Highcharts.AST#getNodesFromMarkup\n             *\n             * @param {string} markup The markup string.\n             *\n             * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n             */\n            parseMarkup(markup) {\n                const nodes = [];\n                markup = markup\n                    .trim()\n                    // The style attribute throws a warning when parsing when CSP is\n                    // enabled (#6884), so use an alias and pick it up below\n                    // Make all quotation marks parse correctly to DOM (#17627)\n                    .replace(/ style=([\"'])/g, ' data-style=$1');\n                let doc;\n                try {\n                    doc = new DOMParser().parseFromString(trustedTypesPolicy ?\n                        trustedTypesPolicy.createHTML(markup) :\n                        markup, 'text/html');\n                }\n                catch (e) {\n                    // There are two cases where this fails:\n                    // 1. IE9 and PhantomJS, where the DOMParser only supports parsing\n                    //    XML\n                    // 2. Due to a Chromium issue where chart redraws are triggered by\n                    //    a `beforeprint` event (#16931),\n                    //    https://issues.chromium.org/issues/40222135\n                }\n                if (!doc) {\n                    const body = createElement('div');\n                    body.innerHTML = markup;\n                    doc = { body };\n                }\n                const appendChildNodes = (node, addTo) => {\n                    const tagName = node.nodeName.toLowerCase();\n                    // Add allowed tags\n                    const astNode = {\n                        tagName\n                    };\n                    if (tagName === '#text') {\n                        astNode.textContent = node.textContent || '';\n                    }\n                    const parsedAttributes = node.attributes;\n                    // Add attributes\n                    if (parsedAttributes) {\n                        const attributes = {};\n                        [].forEach.call(parsedAttributes, (attrib) => {\n                            if (attrib.name === 'data-style') {\n                                astNode.style = AST.parseStyle(attrib.value);\n                            }\n                            else {\n                                attributes[attrib.name] = attrib.value;\n                            }\n                        });\n                        astNode.attributes = attributes;\n                    }\n                    // Handle children\n                    if (node.childNodes.length) {\n                        const children = [];\n                        [].forEach.call(node.childNodes, (childNode) => {\n                            appendChildNodes(childNode, children);\n                        });\n                        if (children.length) {\n                            astNode.children = children;\n                        }\n                    }\n                    addTo.push(astNode);\n                };\n                [].forEach.call(doc.body.childNodes, (childNode) => appendChildNodes(childNode, nodes));\n                return nodes;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * The list of allowed SVG or HTML attributes, used for sanitizing\n         * potentially harmful content from the chart configuration before adding to\n         * the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n         *\n         * @example\n         * // Allow a custom, trusted attribute\n         * Highcharts.AST.allowedAttributes.push('data-value');\n         *\n         * @name Highcharts.AST.allowedAttributes\n         * @type {Array<string>}\n         */\n        AST.allowedAttributes = [\n            'alt',\n            'aria-controls',\n            'aria-describedby',\n            'aria-expanded',\n            'aria-haspopup',\n            'aria-hidden',\n            'aria-label',\n            'aria-labelledby',\n            'aria-live',\n            'aria-pressed',\n            'aria-readonly',\n            'aria-roledescription',\n            'aria-selected',\n            'class',\n            'clip-path',\n            'color',\n            'colspan',\n            'cx',\n            'cy',\n            'd',\n            'dx',\n            'dy',\n            'disabled',\n            'fill',\n            'filterUnits',\n            'flood-color',\n            'flood-opacity',\n            'height',\n            'href',\n            'id',\n            'in',\n            'in2',\n            'markerHeight',\n            'markerWidth',\n            'offset',\n            'opacity',\n            'operator',\n            'orient',\n            'padding',\n            'paddingLeft',\n            'paddingRight',\n            'patternUnits',\n            'r',\n            'radius',\n            'refX',\n            'refY',\n            'role',\n            'scope',\n            'slope',\n            'src',\n            'startOffset',\n            'stdDeviation',\n            'stroke',\n            'stroke-linecap',\n            'stroke-width',\n            'style',\n            'tableValues',\n            'result',\n            'rowspan',\n            'summary',\n            'target',\n            'tabindex',\n            'text-align',\n            'text-anchor',\n            'textAnchor',\n            'textLength',\n            'title',\n            'type',\n            'valign',\n            'width',\n            'x',\n            'x1',\n            'x2',\n            'xlink:href',\n            'y',\n            'y1',\n            'y2',\n            'zIndex'\n        ];\n        /**\n         * The list of allowed references for referring attributes like `href` and\n         * `src`. Attribute values will only be allowed if they start with one of\n         * these strings.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n         *\n         * @example\n         * // Allow tel:\n         * Highcharts.AST.allowedReferences.push('tel:');\n         *\n         * @name    Highcharts.AST.allowedReferences\n         * @type    {Array<string>}\n         */\n        AST.allowedReferences = [\n            'https://',\n            'http://',\n            'mailto:',\n            '/',\n            '../',\n            './',\n            '#'\n        ];\n        /**\n         * The list of allowed SVG or HTML tags, used for sanitizing potentially\n         * harmful content from the chart configuration before adding to the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n         *\n         * @example\n         * // Allow a custom, trusted tag\n         * Highcharts.AST.allowedTags.push('blink'); // ;)\n         *\n         * @name    Highcharts.AST.allowedTags\n         * @type    {Array<string>}\n         */\n        AST.allowedTags = [\n            'a',\n            'abbr',\n            'b',\n            'br',\n            'button',\n            'caption',\n            'circle',\n            'clipPath',\n            'code',\n            'dd',\n            'defs',\n            'div',\n            'dl',\n            'dt',\n            'em',\n            'feComponentTransfer',\n            'feComposite',\n            'feDropShadow',\n            'feFlood',\n            'feFuncA',\n            'feFuncB',\n            'feFuncG',\n            'feFuncR',\n            'feGaussianBlur',\n            'feMorphology',\n            'feOffset',\n            'feMerge',\n            'feMergeNode',\n            'filter',\n            'h1',\n            'h2',\n            'h3',\n            'h4',\n            'h5',\n            'h6',\n            'hr',\n            'i',\n            'img',\n            'li',\n            'linearGradient',\n            'marker',\n            'ol',\n            'p',\n            'path',\n            'pattern',\n            'pre',\n            'rect',\n            'small',\n            'span',\n            'stop',\n            'strong',\n            'style',\n            'sub',\n            'sup',\n            'svg',\n            'table',\n            'text',\n            'textPath',\n            'thead',\n            'title',\n            'tbody',\n            'tspan',\n            'td',\n            'th',\n            'tr',\n            'u',\n            'ul',\n            '#text'\n        ];\n        AST.emptyHTML = emptyHTML;\n        /**\n         * Allow all custom SVG and HTML attributes, references and tags (together\n         * with potentially harmful ones) to be added to the DOM from the chart\n         * configuration. In other words, disable the allow-listing which is the\n         * primary functionality of the AST.\n         *\n         * WARNING: Setting this property to `true` while allowing untrusted user\n         * data in the chart configuration will expose your application to XSS\n         * security risks!\n         *\n         * Note that in case you want to allow a known set of tags or attributes,\n         * you should allow-list them instead of disabling the filtering totally.\n         * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n         * [allowedReferences](Highcharts.AST#.allowedReferences) and\n         * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n         * setting is intended only for those cases where allow-listing is not\n         * practical, and the chart configuration already comes from a secure\n         * source.\n         *\n         * @example\n         * // Allow all custom attributes, references and tags (disable DOM XSS\n         * // filtering)\n         * Highcharts.AST.bypassHTMLFiltering = true;\n         *\n         * @name Highcharts.AST.bypassHTMLFiltering\n         * @static\n         */\n        AST.bypassHTMLFiltering = false;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Serialized form of an SVG/HTML definition, including children.\n         *\n         * @interface Highcharts.ASTNode\n         */ /**\n        * @name Highcharts.ASTNode#attributes\n        * @type {Highcharts.SVGAttributes|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#children\n        * @type {Array<Highcharts.ASTNode>|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#tagName\n        * @type {string|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#textContent\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in file\n\n        return AST;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentRegistry;\n        (function (ComponentRegistry) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             *\n             * Record of component classes\n             * @todo\n             *\n             */\n            ComponentRegistry.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method used to register new component classes.\n             *\n             * @param {string} key\n             * Registry key of the component class.\n             *\n             * @param {ComponentType} DataConnectorClass\n             * Component class (aka class constructor) to register.\n             */\n            function registerComponent(key, ComponentClass) {\n                return (!!key &&\n                    !ComponentRegistry.types[key] &&\n                    !!(ComponentRegistry.types[key] = ComponentClass));\n            }\n            ComponentRegistry.registerComponent = registerComponent;\n        })(ComponentRegistry || (ComponentRegistry = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Global Dashboards namespace in classic `<scripts>`-based implementations.\n         *\n         * @namespace Dashboards\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Prefix of a GUIElement HTML class name.\n             */\n            Globals.classNamePrefix = 'highcharts-dashboards-';\n            /** @internal */\n            Globals.classNames = {\n                layout: Globals.classNamePrefix + 'layout',\n                cell: Globals.classNamePrefix + 'cell',\n                cellHover: Globals.classNamePrefix + 'cell-state-hover',\n                cellActive: Globals.classNamePrefix + 'cell-state-active',\n                cellLoading: Globals.classNamePrefix + 'cell-state-loading',\n                row: Globals.classNamePrefix + 'row',\n                layoutsWrapper: Globals.classNamePrefix + 'layouts-wrapper',\n                boardContainer: Globals.classNamePrefix + 'wrapper'\n            };\n            /** @internal */\n            Globals.guiElementType = {\n                row: 'row',\n                cell: 'cell',\n                layout: 'layout'\n            };\n            /**\n             * Contains all Board instances of this window.\n             */\n            Globals.boards = [];\n            /**\n             * Reference to the window used by Dashboards.\n             */\n            Globals.win = window;\n            Globals.doc = document;\n            Globals.noop = function () { };\n            Globals.isMS = /(edge|msie|trident)/i\n                .test((Globals.win.navigator && Globals.win.navigator.userAgent) || '') && !Globals.win.opera;\n            Globals.supportsPassiveEvents = (function () {\n                // Checks whether the browser supports passive events, (#11353).\n                let supportsPassive = false;\n                // Object.defineProperty doesn't work on IE as well as passive\n                // events - instead of using polyfill, we can exclude IE totally.\n                if (!Globals.isMS) {\n                    const opts = Object.defineProperty({}, 'passive', {\n                        get: function () {\n                            supportsPassive = true;\n                        }\n                    });\n                    if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                        Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                        Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n                    }\n                }\n                return supportsPassive;\n            }());\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditGlobals.js', [_modules['Dashboards/Globals.js']], function (DG) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const PREFIX = DG.classNamePrefix + 'edit-';\n        /**\n         * @internal\n         */\n        const EditGlobals = {\n            classNames: {\n                resizeSnap: PREFIX + 'resize-snap',\n                resizeSnapX: PREFIX + 'resize-snap-x',\n                resizeSnapY: PREFIX + 'resize-snap-y',\n                separator: PREFIX + 'separator',\n                contextMenuBtn: PREFIX + 'context-menu-btn',\n                contextMenuBtnText: PREFIX + 'context-menu-btn-text',\n                contextMenu: PREFIX + 'context-menu',\n                contextMenuItem: PREFIX + 'context-menu-item',\n                editModeEnabled: PREFIX + 'enabled',\n                editToolbar: PREFIX + 'toolbar',\n                editToolbarCellOutline: PREFIX + 'toolbar-cell-outline',\n                editToolbarRowOutline: PREFIX + 'toolbar-row-outline',\n                editToolbarItem: PREFIX + 'toolbar-item',\n                editToolbarRow: PREFIX + 'toolbar-row',\n                editToolbarCell: PREFIX + 'toolbar-cell',\n                editSidebar: PREFIX + 'sidebar',\n                editSidebarShow: PREFIX + 'sidebar-show',\n                editSidebarHide: PREFIX + 'sidebar-hide',\n                editSidebarHeader: PREFIX + 'sidebar-header',\n                editSidebarTitle: PREFIX + 'sidebar-title',\n                editSidebarMenuItem: PREFIX + 'sidebar-item',\n                rowContextHighlight: PREFIX + 'row-context-highlight',\n                cellEditHighlight: PREFIX + 'cell-highlight',\n                dashboardCellEditHighlightActive: PREFIX + 'cell-highlight-active',\n                dragMock: PREFIX + 'drag-mock',\n                dropPointer: PREFIX + 'drop-pointer',\n                contextDetectionPointer: PREFIX + 'ctx-detection-pointer',\n                resizePointer: PREFIX + 'resize-pointer',\n                currentEditedElement: PREFIX + 'unmask',\n                maskElement: PREFIX + 'mask',\n                menuItem: PREFIX + 'menu-item',\n                menu: PREFIX + 'menu',\n                menuVerticalSeparator: PREFIX + 'menu-vertical-separator',\n                menuHorizontalSeparator: PREFIX + 'menu-horizontal-separator',\n                menuDestroy: PREFIX + 'menu-destroy',\n                editSidebarWrapper: PREFIX + 'sidebar-wrapper',\n                customSelect: PREFIX + 'custom-select',\n                customSelectButton: PREFIX + 'custom-option-button',\n                toggleContainer: PREFIX + 'toggle-container',\n                toggleWrapper: PREFIX + 'toggle-wrapper',\n                toggleSlider: PREFIX + 'toggle-slider',\n                toggleWrapperColored: PREFIX + 'toggle-wrapper-colored',\n                toggleLabels: PREFIX + 'toggle-labels',\n                button: PREFIX + 'button',\n                sidebarNavButton: PREFIX + 'sidebar-button-nav',\n                labelText: PREFIX + 'label-text',\n                editSidebarTabBtn: PREFIX + 'sidebar-tab-btn',\n                editToolsBtn: PREFIX + 'tools-btn',\n                editTools: PREFIX + 'tools',\n                editGridItems: PREFIX + 'grid-items',\n                // Confirmation popup\n                confirmationPopup: PREFIX + 'confirmation-popup',\n                popupButtonContainer: PREFIX + 'confirmation-popup-button-container',\n                popupContentContainer: PREFIX + 'confirmation-popup-content',\n                popupCancelBtn: PREFIX + 'confirmation-popup-cancel-btn',\n                popupConfirmBtn: PREFIX + 'confirmation-popup-confirm-btn',\n                popupCloseButton: PREFIX + 'popup-close',\n                editOverlay: PREFIX + 'overlay',\n                editOverlayActive: PREFIX + 'overlay-active',\n                resizerMenuBtnActive: PREFIX + 'resizer-menu-btn-active',\n                sidebarCloseButton: PREFIX + 'close-btn',\n                editSidebarTabBtnWrapper: PREFIX + 'tabs-buttons-wrapper',\n                editSidebarRight: PREFIX + 'sidebar-right',\n                editSidebarRightShow: PREFIX + 'sidebar-right-show',\n                viewFullscreen: PREFIX + 'view-fullscreen',\n                // Accordion\n                accordionMenu: PREFIX + 'accordion-menu',\n                accordionContainer: PREFIX + 'accordion',\n                accordionHeader: PREFIX + 'accordion-header',\n                accordionHeaderBtn: PREFIX + 'accordion-header-btn',\n                accordionHeaderWrapper: PREFIX + 'accordion-header-wrapper',\n                accordionHeaderIcon: PREFIX + 'accordion-header-icon',\n                accordionContent: PREFIX + 'accordion-content',\n                accordionNestedWrapper: PREFIX + 'accordion-nested',\n                accordionMenuButtonsContainer: PREFIX + 'accordion-menu-buttons-container',\n                accordionMenuButton: PREFIX + 'accordion-menu-button',\n                accordionStandaloneWrapper: PREFIX + 'accordion-standalone-wrapper',\n                hiddenElement: PREFIX + 'hidden-element',\n                collapsableContentHeader: PREFIX + 'collapsable-content-header',\n                standaloneElement: PREFIX + 'standalone-element',\n                // Custom dropdown with icons\n                collapsedElement: PREFIX + 'collapsed-element',\n                dropdown: PREFIX + 'dropdown',\n                dropdownContent: PREFIX + 'dropdown-content',\n                dropdownButton: PREFIX + 'dropdown-button',\n                dropdownButtonContent: PREFIX + 'dropdown-button-content',\n                dropdownIcon: PREFIX + 'pointer',\n                icon: PREFIX + 'icon'\n            },\n            lang: {\n                accessibility: {\n                    contextMenu: {\n                        button: 'Context menu'\n                    },\n                    editMode: {\n                        editMode: 'Edit mode toggle button'\n                    }\n                },\n                addComponent: 'Add component',\n                cancelButton: 'Cancel',\n                caption: 'Caption',\n                chartClassName: 'Chart class name',\n                chartConfig: 'Chart configuration',\n                chartID: 'Chart ID',\n                chartOptions: 'Chart options',\n                chartType: 'Chart type',\n                connectorName: 'Connector name',\n                confirmButton: 'Confirm',\n                confirmDestroyCell: 'Do you really want to destroy the cell?',\n                confirmDestroyRow: 'Do you really want to destroy the row?',\n                confirmDiscardChanges: 'Do you really want to discard the changes?',\n                dataLabels: 'Data labels',\n                editMode: 'Edit mode',\n                errorMessage: 'Something went wrong',\n                exitFullscreen: 'Exit full screen',\n                htmlInput: 'HTML',\n                id: 'Id',\n                off: 'off',\n                on: 'on',\n                pointFormat: 'Point format',\n                settings: 'Settings',\n                style: 'Styles',\n                title: 'Title',\n                viewFullscreen: 'View in full screen',\n                sidebar: {\n                    HTML: 'HTML',\n                    row: 'Row',\n                    Highcharts: 'Highcharts',\n                    DataGrid: 'DataGrid',\n                    KPI: 'KPI'\n                }\n            }\n        };\n\n        return EditGlobals;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/GUIElement.js', [_modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (Globals, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, uniqueKey, objectEach, error } = U;\n        class GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /**\n             * Get offsets of the guiElement relative to the referenceElement or the\n             * Viewport.\n             *\n             * @param guiElement\n             * The element to get the offsets from.\n             *\n             * @param referenceElement\n             * The element to get the offsets relative to.\n             *\n             * @returns\n             * The offsets of the guiElement.\n             */\n            static getOffsets(guiElement, referenceElement) {\n                const offset = { left: 0, top: 0, right: 0, bottom: 0 };\n                if (!guiElement.container) {\n                    return offset;\n                }\n                const guiElementClientRect = guiElement.container.getBoundingClientRect();\n                const referenceClientRect = referenceElement ?\n                    referenceElement.getBoundingClientRect() : { left: 0, top: 0 };\n                offset.left = guiElementClientRect.left - referenceClientRect.left;\n                offset.top = guiElementClientRect.top - referenceClientRect.top;\n                offset.right =\n                    guiElementClientRect.right - referenceClientRect.left;\n                offset.bottom =\n                    guiElementClientRect.bottom - referenceClientRect.top;\n                return offset;\n            }\n            /**\n             * Get dimensions of the guiElement container from offsets.\n             *\n             * @param offsets\n             * The offsets of the guiElement container.\n             *\n             * @returns\n             * The dimensions of the guiElement container.\n             */\n            static getDimFromOffsets(offsets) {\n                return {\n                    width: offsets.right - offsets.left,\n                    height: offsets.bottom - offsets.top\n                };\n            }\n            /**\n             * Based on the element provided, generate an unique id.\n             *\n             * @param elementType\n             * Type of the element.\n             *\n             * @returns\n             * The unique id.\n             */\n            static getElementId(elementType) {\n                return (Globals.classNamePrefix + elementType + '-' +\n                    uniqueKey().slice(11));\n            }\n            /**\n             * Get width in percentages (0% - 100%).\n             *\n             * @param width\n             * The width of the element. Supported formats '50%' or '1/2'.\n             *\n             * @returns\n             * The width in percentages.\n             */\n            static getPercentageWidth(width) {\n                const fractionRegEx = /^(\\d{1})[\\-\\/\\.](\\d{1,2})$/;\n                let result;\n                if (fractionRegEx.test(width)) {\n                    const match = width.match(fractionRegEx) || [], multiplier = +match[1], divider = +match[2];\n                    result = 100 * multiplier / divider;\n                    result = (result <= 100 ? result : 100) + '%';\n                }\n                else if (width.indexOf('%') !== -1) {\n                    const value = parseFloat(width);\n                    result = (value <= 100 ?\n                        (value >= 0 ? value : 0) : 100) + '%';\n                }\n                return result;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Create or get existing HTML element as a GUIElement container.\n             *\n             * @param {GUIElement.ContainerOptions} options\n             * Options.\n             *\n             * @returns\n             * The HTML element for the element container.\n             */\n            getElementContainer(options) {\n                const guiElement = this;\n                let elem;\n                if (options.render) {\n                    if (options.attribs && !options.attribs.id) {\n                        delete options.attribs.id;\n                    }\n                }\n                else if (typeof options.elementId === 'string') {\n                    const div = document.getElementById(options.elementId);\n                    if (div) {\n                        guiElement.container = div;\n                    }\n                    else {\n                        error('Element ' + options.elementId + ' does not exist');\n                    }\n                }\n                if (options.element instanceof HTMLElement) {\n                    elem = options.element;\n                }\n                else {\n                    elem = createElement('div', options.attribs || {}, options.style || {}, options.parentContainer);\n                }\n                // Set bindedGUIElement event on GUIElement container.\n                guiElement.removeBindedEventFn = addEvent(elem, 'bindedGUIElement', function (e) {\n                    e.guiElement = guiElement;\n                    e.stopImmediatePropagation();\n                });\n                return elem;\n            }\n            /**\n             * Destroy the element, its container, event hooks and all properties.\n             */\n            destroy() {\n                const guiElement = this;\n                // Remove bindedGUIElement event.\n                if (guiElement.removeBindedEventFn) {\n                    guiElement.removeBindedEventFn();\n                }\n                // Remove HTML container.\n                if (guiElement.container && guiElement.container.parentNode) {\n                    guiElement.container.parentNode.removeChild(guiElement.container);\n                }\n                // Delete all properties.\n                objectEach(guiElement, function (val, key) {\n                    delete guiElement[key];\n                });\n            }\n            /**\n             * Return the GUIElement instance type.\n             *\n             * @returns\n             * The GUIElement instance type\n             */\n            getType() {\n                return this.type;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const visibilityChanged = (this.isVisible && !setVisible ||\n                    !this.isVisible && setVisible);\n                if (this.container && visibilityChanged) {\n                    this.container.style.display = (setVisible ?\n                        (displayStyle || 'block') :\n                        'none');\n                    this.isVisible = setVisible;\n                }\n            }\n            hide() {\n                this.changeVisibility(false);\n            }\n            show() {\n                this.changeVisibility();\n            }\n        }\n\n        return GUIElement;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/CellHTML.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/GUIElement.js']], function (EditGlobals, Globals, GUIElement) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @internal\n         **/\n        class CellHTML extends GUIElement {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CellHTML class.\n             *\n             * @param {Cell.Options} options\n             * Options for the cell.\n             */\n            constructor(options) {\n                super();\n                /**\n                 * The type of a GUIElement instance.\n                 */\n                this.type = 'cell-html';\n                this.options = options;\n                this.id = options.id;\n                this.container = options.container;\n                this.mountedComponent = options.mountedComponent;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and mounted component.\n             */\n            destroy() {\n                const cell = this;\n                // Destroy mounted component.\n                cell.mountedComponent?.destroy();\n                super.destroy();\n            }\n            /**\n             * Highlight the cell.\n             */\n            setHighlight() {\n                const cell = this;\n                cell.container.classList.toggle(EditGlobals.classNames.cellEditHighlight);\n                cell.mountedComponent?.board.container.classList.toggle(EditGlobals.classNames.dashboardCellEditHighlightActive);\n            }\n            setActiveState() {\n                const cell = this;\n                // Apply class\n                if (cell.container) {\n                    cell.container.classList.add(Globals.classNames.cellActive);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellHTML;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/Bindings.js', [_modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Layout/CellHTML.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (ComponentRegistry, CellHTML, Globals, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, fireEvent } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var Bindings;\n        (function (Bindings) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getGUIElement(idOrElement, parentElement) {\n                let guiElement;\n                if (typeof idOrElement === 'string' &&\n                    document.querySelectorAll('#' + idOrElement).length > 1) {\n                    // eslint-disable-next-line no-console\n                    console.warn(`Multiple cells have identical ID %c${idOrElement}%c, potentially leading to unexpected behavior. \\nEnsure that each cell has a unique ID on the page.`, 'font-weight: bold', '');\n                }\n                const container = parentElement ?\n                    parentElement.querySelector('#' + idOrElement) :\n                    document.getElementById(idOrElement);\n                if (container !== null) {\n                    fireEvent(container, 'bindedGUIElement', {}, function (e) {\n                        guiElement = e.guiElement;\n                    });\n                }\n                return guiElement;\n            }\n            async function addComponent(options, board, cell) {\n                const optionsStates = options.states;\n                const optionsEvents = options.events;\n                const renderTo = options.renderTo || options.cell;\n                if (!renderTo) {\n                    // eslint-disable-next-line no-console\n                    console.error('The%c renderTo%c option is required to render the component.', 'font-weight: bold', '');\n                    return;\n                }\n                if (board.mountedComponents.filter((el) => ((el.options.renderTo || el.options.cell) === renderTo)).length > 0) {\n                    // eslint-disable-next-line no-console\n                    console.error(`A component has already been declared in the cell %c${renderTo}%c use a different cell.`, 'font-weight: bold', '');\n                    return;\n                }\n                cell = cell || Bindings.getCell(renderTo, board.container);\n                const componentContainer = cell?.container || document.querySelector('#' + renderTo);\n                if (!componentContainer || !options.type) {\n                    // eslint-disable-next-line no-console\n                    console.error(`The component is unable to find the HTML cell element %c${renderTo}%c to render the content.`, 'font-weight: bold', '');\n                    return;\n                }\n                let ComponentClass = ComponentRegistry.types[options.type];\n                if (!ComponentClass) {\n                    // eslint-disable-next-line no-console\n                    console.error(`The component's type %c${options.type}%c does not exist.`, 'font-weight: bold', '');\n                    if (cell) {\n                        ComponentClass =\n                            ComponentRegistry.types['HTML'];\n                        options.title = {\n                            text: board.editMode?.lang.errorMessage ||\n                                'Something went wrong',\n                            className: Globals.classNamePrefix + 'component-title-error ' +\n                                Globals.classNamePrefix + 'component-title'\n                        };\n                    }\n                }\n                const component = new ComponentClass(cell, options, board);\n                const promise = component.load()['catch']((e) => {\n                    // eslint-disable-next-line no-console\n                    console.error(e);\n                    component.update({\n                        connector: {\n                            id: ''\n                        },\n                        title: {\n                            text: board.editMode?.lang.errorMessage ||\n                                'Something went wrong',\n                            className: Globals.classNamePrefix + 'component-title-error ' +\n                                Globals.classNamePrefix + 'component-title'\n                        }\n                    });\n                });\n                if (cell) {\n                    component.setCell(cell);\n                    cell.mountedComponent = component;\n                }\n                board.mountedComponents.push({\n                    options: options,\n                    component: component,\n                    cell: cell || new CellHTML({\n                        id: renderTo,\n                        container: componentContainer,\n                        mountedComponent: component\n                    })\n                });\n                if (cell &&\n                    optionsStates?.active?.enabled &&\n                    optionsStates?.active?.isActive) {\n                    cell.setActiveState();\n                    component.isActive = true;\n                }\n                fireEvent(component, 'mount');\n                // Events\n                addEvent(componentContainer, 'click', () => {\n                    // Call the component's click callback\n                    if (optionsEvents && optionsEvents.click) {\n                        optionsEvents.click.call(component);\n                    }\n                    // Default behavior\n                    if (cell &&\n                        component &&\n                        componentContainer &&\n                        optionsStates?.active?.enabled) {\n                        cell.setActiveState();\n                        component.isActive = true;\n                    }\n                });\n                // States\n                if (optionsStates?.hover?.enabled) {\n                    componentContainer.classList.add(Globals.classNames.cellHover);\n                }\n                fireEvent(component, 'afterLoad');\n                return promise;\n            }\n            Bindings.addComponent = addComponent;\n            /** @internal */\n            function componentFromJSON(json) {\n                const componentClass = ComponentRegistry.types[json.$class];\n                if (!componentClass) {\n                    return;\n                }\n                const cell = Bindings.getCell(json.options.renderTo || '');\n                if (!cell) {\n                    return;\n                }\n                const component = componentClass.fromJSON(json, cell);\n                if (component) {\n                    component.render();\n                }\n                return component;\n            }\n            Bindings.componentFromJSON = componentFromJSON;\n            function getCell(idOrElement, parentElement) {\n                const cell = getGUIElement(idOrElement, parentElement);\n                if (!(cell && cell.getType() === 'cell')) {\n                    return;\n                }\n                return cell;\n            }\n            Bindings.getCell = getCell;\n            function getRow(idOrElement, parentElement) {\n                const row = getGUIElement(idOrElement, parentElement);\n                if (!(row && row.getType() === 'row')) {\n                    return;\n                }\n                return row;\n            }\n            Bindings.getRow = getRow;\n            function getLayout(idOrElement, parentElement) {\n                const layout = getGUIElement(idOrElement, parentElement);\n                if (!(layout && layout.getType() === 'layout')) {\n                    return;\n                }\n                return layout;\n            }\n            Bindings.getLayout = getLayout;\n        })(Bindings || (Bindings = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Bindings;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Cell.js', [_modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (Bindings, EditGlobals, Globals, GUIElement, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { componentFromJSON } = Bindings;\n        const { merge, fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @internal\n         **/\n        class Cell extends GUIElement {\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /** @internal */\n            static fromJSON(json, row) {\n                if (row) {\n                    const options = json.options;\n                    let id = options.containerId;\n                    if (row.layout.copyId) {\n                        id = id + '_' + row.layout.copyId;\n                    }\n                    return new Cell(row, {\n                        id: id,\n                        parentContainerId: (row.container && row.container.id) ||\n                            options.parentContainerId,\n                        mountedComponentJSON: options.mountedComponentJSON,\n                        style: options.style,\n                        layoutJSON: options.layoutJSON,\n                        width: options.width,\n                        height: options.height\n                    });\n                }\n                return void 0;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the Cell class.\n             *\n             * @param {Row} row\n             * Reference to the row instance.\n             *\n             * @param {Cell.Options} options\n             * Options for the cell.\n             *\n             * @param {HTMLElement} cellElement\n             * The container of the cell HTML element.\n             */\n            constructor(row, options, cellElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.cell;\n                this.id = options.id;\n                this.options = options;\n                this.row = row;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    row.container;\n                const layoutOptions = row.layout.options || {}, rowOptions = row.options || {}, cellClassName = layoutOptions.cellClassName || '';\n                let cellHeight;\n                if (options.height) {\n                    if (typeof options.height === 'number') {\n                        cellHeight = options.height + 'px';\n                    }\n                    else {\n                        cellHeight = options.height;\n                    }\n                }\n                this.container = this.getElementContainer({\n                    render: row.layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.cell + ' ' +\n                            cellClassName\n                    },\n                    element: cellElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, rowOptions.style, options.style, {\n                        height: cellHeight\n                    })\n                });\n                // Mount component from JSON.\n                if (this.options.mountedComponentJSON) {\n                    this.mountComponentFromJSON(this.options.mountedComponentJSON);\n                }\n                // Nested layout\n                if (this.options.layout) {\n                    this.setNestedLayout();\n                }\n                if (this.options.layoutJSON) {\n                    const layout = this.row.layout, board = layout.board, layoutFromJSON = layout.constructor.fromJSON;\n                    this.nestedLayout = layoutFromJSON(merge(this.options.layoutJSON, {\n                        parentContainerId: this.options.id\n                    }), board, this);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create a nested layout in the cell and assign it to the nestedCell\n             * property.\n             * @internal\n             */\n            setNestedLayout() {\n                const board = this.row.layout.board, Layout = this.row.layout.constructor;\n                const optionsGui = board.options.gui;\n                this.nestedLayout = new Layout(board, merge({}, optionsGui && optionsGui.layoutOptions, this.options.layout, {\n                    parentContainerId: this.options.id\n                }), this);\n            }\n            /**\n             * Mount component from JSON.\n             * @internal\n             *\n             * @param {Component.JSON} [json]\n             * Component JSON.\n             *\n             * @return {boolean}\n             * Returns true, if the component created from JSON is mounted,\n             * otherwise false.\n             */\n            mountComponentFromJSON(json) {\n                const cell = this;\n                if (cell.id !== json.options.parentElement) {\n                    json.options.parentElement = cell.id;\n                }\n                const component = componentFromJSON(json);\n                if (component) {\n                    cell.mountedComponent = component;\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and mounted component.\n             */\n            destroy() {\n                const cell = this;\n                const { row } = cell;\n                // Destroy mounted component.\n                cell.mountedComponent?.destroy();\n                // If layout exists in the cell - destroy it\n                cell.nestedLayout?.destroy();\n                row.unmountCell(cell);\n                const destroyRow = row.cells?.length === 0;\n                super.destroy();\n                if (destroyRow) {\n                    row.destroy();\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Cell.JSON}\n             * Class JSON of this Cell instance.\n             */\n            toJSON() {\n                const cell = this, rowContainerId = (cell.row.container || {}).id || '';\n                return {\n                    $class: 'Dashboards.Layout.Cell',\n                    options: {\n                        containerId: cell.container.id,\n                        parentContainerId: rowContainerId,\n                        width: cell.options.width,\n                        height: cell.options.height,\n                        mountedComponentJSON: cell.mountedComponent && cell.mountedComponent.toJSON(),\n                        style: cell.options.style,\n                        layoutJSON: cell.nestedLayout && cell.nestedLayout.toJSON()\n                    }\n                };\n            }\n            /**\n             * Get the cell's options.\n             * @returns\n             * The JSON of cell's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return this.options;\n            }\n            changeVisibility(setVisible = true) {\n                super.changeVisibility(setVisible);\n                const cell = this, row = cell.row;\n                // Change row visibility if needed.\n                if (!cell.row.getVisibleCells().length) {\n                    cell.row.hide();\n                }\n                else if (cell.isVisible && !row.isVisible) {\n                    cell.row.show();\n                }\n                setTimeout(() => {\n                    fireEvent(row, 'cellChange', { row, cell });\n                }, 0);\n            }\n            getParentCell(level) {\n                const cell = this;\n                let parentCell;\n                if (level <= cell.row.layout.level) {\n                    if (cell.row.layout.level === level) {\n                        return cell;\n                    }\n                    if (cell.row.layout.level - 1 >= 0) {\n                        parentCell = cell.row.layout.parentCell;\n                        if (parentCell) {\n                            return parentCell.getParentCell(level);\n                        }\n                    }\n                }\n            }\n            // Method to get array of overlapping levels.\n            getOverlappingLevels(align, levelMaxGap, // Max distance between levels\n            offset // Analyzed cell offset\n            ) {\n                const cell = this, parentCell = cell.row.layout.parentCell;\n                let levels = [cell.row.layout.level];\n                if (parentCell) {\n                    const cellOffset = offset || GUIElement.getOffsets(cell)[align];\n                    const parentCellOffset = GUIElement.getOffsets(parentCell)[align];\n                    if (Math.abs(cellOffset - parentCellOffset) < levelMaxGap) {\n                        levels = [\n                            ...levels,\n                            ...parentCell.getOverlappingLevels(align, levelMaxGap, parentCellOffset)\n                        ];\n                    }\n                }\n                return levels;\n            }\n            /**\n             * Set cell size.\n             *\n             * @param width\n             * % value or 'auto' or px\n             *\n             * @param height\n             * value in px\n             */\n            setSize(width, height) {\n                const cell = this, editMode = cell.row.layout.board.editMode;\n                if (cell.container) {\n                    if (width) {\n                        if (width === 'auto' &&\n                            cell.container.style.flex !== '1 1 0%') {\n                            cell.container.style.flex = '1 1 0%';\n                        }\n                        else {\n                            const cellWidth = cell.convertWidthToValue(width);\n                            if (cellWidth &&\n                                cell.container.style.flex !== '0 0 ' + cellWidth) {\n                                cell.container.style.flex = '0 0 ' + cellWidth;\n                            }\n                            cell.options.width = cellWidth;\n                        }\n                    }\n                    if (height) {\n                        cell.options.height = cell.container.style.height =\n                            height + 'px';\n                    }\n                    if (editMode) {\n                        editMode.hideContextPointer();\n                        if (editMode.cellToolbar &&\n                            editMode.cellToolbar.isVisible) {\n                            if (editMode.cellToolbar.cell === cell) {\n                                editMode.cellToolbar.showToolbar(cell);\n                            }\n                            else {\n                                editMode.cellToolbar.hide();\n                            }\n                        }\n                    }\n                    // Call cellResize board event.\n                    fireEvent(cell.row.layout.board, 'cellResize', { cell: cell });\n                    fireEvent(cell.row, 'cellChange', { cell: cell, row: cell.row });\n                }\n            }\n            setHighlight(remove) {\n                const cell = this, editMode = cell.row.layout.board.editMode;\n                if (cell.container && editMode) {\n                    const cnt = cell.container, isSet = cnt.classList.contains(EditGlobals.classNames.cellEditHighlight);\n                    if (!remove && !isSet) {\n                        cnt.classList.add(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.add(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = true;\n                    }\n                    else if (remove && isSet) {\n                        cnt.classList.remove(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.remove(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = false;\n                    }\n                }\n            }\n            /**\n             * Sets the active state of the cell and resets the state of other cells.\n             */\n            setActiveState() {\n                const cell = this;\n                // Reset other boxes\n                cell.row.layout.board.mountedComponents.forEach((mountedComponent) => {\n                    if (mountedComponent.cell.container) {\n                        mountedComponent.cell.container.classList.remove(Globals.classNames.cellActive);\n                    }\n                    mountedComponent.component.isActive = false;\n                });\n                // Apply class\n                if (cell.container) {\n                    cell.container.classList.add(Globals.classNames.cellActive);\n                }\n            }\n            /**\n             * Enables or disables the loading indicator in the cell.\n             *\n             * @internal\n             */\n            setLoadingState(enabled = true) {\n                this.container?.classList?.toggle(Globals.classNames.cellLoading, enabled);\n            }\n            convertWidthToValue(width) {\n                if (typeof width === 'number') {\n                    return width + 'px';\n                }\n                if (/px/.test(width)) {\n                    return width;\n                }\n                return GUIElement.getPercentageWidth(width) || '';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Cell;\n    });\n    _registerModule(_modules, 'Dashboards/CallbackRegistry.js', [], function () {\n        class CallbackRegistry {\n            constructor() {\n                this.registry = {};\n            }\n            addCallback(id, callback) {\n                this.registry[id] = callback;\n            }\n            getCallback(id) {\n                return this.registry[id];\n            }\n            /** @internal */\n            toJSON() {\n                const json = {};\n                Object.keys(this.registry).forEach((key) => {\n                    const entry = this.getCallback(key);\n                    const { func, type } = entry;\n                    json[key] = {\n                        func: func.toString(),\n                        type\n                    };\n                });\n                return json;\n            }\n        }\n\n        return CallbackRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ConnectorHandler.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Globals.js']], function (Cell, Globals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A class that handles the connection between the component and the data\n         * connector.\n         */\n        class ConnectorHandler {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates an object that manages the data layer for the component.\n             *\n             * @param component\n             * The component that the connector is tied to.\n             *\n             * @param options\n             * The options for the connector.\n             *\n             */\n            constructor(component, options) {\n                /**\n                 * Event listeners tied to the current DataTable. Used for rerendering the\n                 * component on data changes.\n                 *\n                 * @internal\n                 */\n                this.tableEvents = [];\n                this.component = component;\n                this.options = options;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Inits connectors for the component and rerenders it.\n             *\n             * @returns\n             * Promise resolving to the component.\n             */\n            async initConnector() {\n                const component = this.component;\n                const connectorId = this.options.id;\n                const dataPool = this.component.board.dataPool;\n                if (connectorId &&\n                    (this.connectorId !== connectorId ||\n                        dataPool.isNewConnector(connectorId))) {\n                    if (component.cell instanceof Cell) {\n                        component.cell.setLoadingState();\n                    }\n                    const connector = await dataPool.getConnector(connectorId);\n                    this.setConnector(connector);\n                }\n                return component;\n            }\n            /**\n             * Sets the connector for the component connector handler.\n             *\n             * @param connector\n             * The connector to set.\n             */\n            setConnector(connector) {\n                // Clean up old event listeners\n                while (this.tableEvents.length) {\n                    const eventCallback = this.tableEvents.pop();\n                    if (typeof eventCallback === 'function') {\n                        eventCallback();\n                    }\n                }\n                this.connector = connector;\n                if (connector) {\n                    // Set up event listeners\n                    this.clearTableListeners();\n                    this.setupTableListeners(connector.table);\n                    // Re-setup if modifier changes\n                    connector.table.on('setModifier', () => this.clearTableListeners());\n                    connector.table.on('afterSetModifier', (e) => {\n                        if (e.type === 'afterSetModifier' && e.modified) {\n                            this.setupTableListeners(e.modified);\n                            this.component.emit({\n                                type: 'tableChanged',\n                                connector: connector\n                            });\n                        }\n                    });\n                    if (connector.table) {\n                        if (this.presentationModifier) {\n                            this.presentationTable =\n                                this.presentationModifier.modifyTable(connector.table.modified.clone()).modified;\n                        }\n                        else {\n                            this.presentationTable = connector.table;\n                        }\n                    }\n                }\n                return this.component;\n            }\n            /**\n             * Adds event listeners to data table.\n             * @param table\n             * Data table that is source of data.\n             * @internal\n             */\n            setupTableListeners(table) {\n                const connector = this.connector;\n                if (connector) {\n                    if (table) {\n                        [\n                            'afterDeleteRows',\n                            'afterSetCell',\n                            'afterSetColumns',\n                            'afterSetRows'\n                        ].forEach((event) => {\n                            this.tableEvents.push(table.on(event, (e) => {\n                                clearTimeout(this.tableEventTimeout);\n                                this.tableEventTimeout = Globals.win.setTimeout(() => {\n                                    this.component.emit({\n                                        ...e,\n                                        type: 'tableChanged',\n                                        targetConnector: connector\n                                    });\n                                    this.tableEventTimeout = void 0;\n                                });\n                            }));\n                        });\n                    }\n                }\n            }\n            /**\n             * Remove event listeners in data table.\n             * @internal\n             */\n            clearTableListeners() {\n                const connector = this.connector;\n                const tableEvents = this.tableEvents;\n                this.destroy();\n                if (connector) {\n                    tableEvents.push(connector.table.on('afterSetModifier', (e) => {\n                        if (e.type === 'afterSetModifier') {\n                            clearTimeout(this.tableEventTimeout);\n                            this.tableEventTimeout = Globals.win.setTimeout(() => {\n                                connector.emit({\n                                    ...e,\n                                    type: 'tableChanged',\n                                    targetConnector: connector\n                                });\n                                this.tableEventTimeout = void 0;\n                            });\n                        }\n                    }));\n                }\n            }\n            updateOptions(newOptions) {\n                this.options = newOptions;\n            }\n            destroy() {\n                this.tableEvents.forEach((clearEvent) => clearEvent());\n                this.tableEvents.length = 0;\n            }\n        }\n\n        return ConnectorHandler;\n    });\n    _registerModule(_modules, 'Dashboards/Components/EditableOptions.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        class EditableOptions {\n            constructor(component, bindings = EditableOptions.defaultBindings) {\n                this.component = component;\n                this.bindings = bindings;\n            }\n            getOptions() {\n                const options = this.component.options.editableOptions;\n                if (!options) {\n                    return [];\n                }\n                for (let i = 0, iEnd = options.length; i < iEnd; i++) {\n                    const option = options[i];\n                    if (option.name === 'connectorName') {\n                        const board = this.component.board;\n                        const selectOptions = !board ?\n                            [] :\n                            board.dataPool\n                                .getConnectorIds()\n                                .map((name) => ({ name }));\n                        option.selectOptions = selectOptions;\n                    }\n                }\n                return options;\n            }\n        }\n        EditableOptions.defaultBindings = {\n            keyMap: {\n                color: 'colorPicker',\n                title: 'text',\n                caption: 'text',\n                style: 'textarea'\n            },\n            typeMap: {\n                'string': 'text',\n                'number': 'input',\n                'boolean': 'toggle'\n            },\n            skipRedraw: []\n        };\n        // Bindings of basic types to \"editor components\"\n        EditableOptions.defaultTypeMap = {\n            'string': 'text',\n            'number': 'input',\n            'boolean': 'toggle'\n        };\n\n        return EditableOptions;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Emitter.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /**\n         *  Class responsible for adding event listeners on a component\n         *  @internal\n         */\n        class SyncEmitter {\n            /**\n             * Adds an emitter to the emitter registry.\n             *\n             * @param emitter the emitter to add to the registry.\n             */\n            static register(emitter) {\n                const { id } = emitter;\n                this.registry[id] = emitter;\n            }\n            /**\n             * Gets an emitter from emitter registry.\n             *\n             * @param emitterID The ID of the emitter to get.\n             */\n            static get(emitterID) {\n                return this.registry[emitterID];\n            }\n            /**\n             * Creates a new emitter instance.\n             *\n             * @param id An unique ID for the emitter.\n             *\n             * @param func\n             * The function to be called when the emitter is activated.\n             */\n            constructor(id, func) {\n                this.id = id;\n                this.func = func;\n                SyncEmitter.register(this);\n            }\n            /**\n             * Attaches the emitter to a component.\n             *\n             * @param component The component to attach to.\n             */\n            create(component) {\n                this.callback = this.func.call(component);\n            }\n            /**\n             * To be used when removing the emitter from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable emitter.\n         * The emitter is stored by ID.\n         */\n        SyncEmitter.registry = {};\n\n        return SyncEmitter;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Handler.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class responsible for storing handler callbacks used in component sync.\n         * @internal\n         */\n        class SyncHandler {\n            /**\n             * Adds a handler to the handler registry.\n             *\n             * @param handler\n             * The handler to add to the registry.\n             */\n            static register(handler) {\n                const { id } = handler;\n                this.registry[id] = handler;\n            }\n            /**\n             * Gets a handler from handler registry.\n             *\n             * @param handlerID\n             * The ID of the handler to get.\n             */\n            static get(handlerID) {\n                return this.registry[handlerID];\n            }\n            /**\n             * Creates a new handler instance.\n             *\n             * @param id\n             * An unique ID for the handler.\n             *\n             * @param func\n             * The function to be called when the handler is activated.\n             */\n            constructor(id, func) {\n                this.id = id;\n                this.func = func;\n                SyncHandler.register(this);\n            }\n            /**\n             * Calls the activation function on the component and sets the callback to\n             * the return function.\n             *\n             * @param component\n             * The component to register on.\n             */\n            register(component) {\n                const { func } = this;\n                this.callback = func.call(component);\n            }\n            /**\n             * To be used when removing the handler from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable handlers.\n         * The handler is stored by ID.\n         */\n        SyncHandler.registry = {};\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SyncHandler;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Sync.js', [_modules['Dashboards/Components/Sync/Emitter.js'], _modules['Dashboards/Components/Sync/Handler.js'], _modules['Core/Utilities.js']], function (SyncEmitter, SyncHandler, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, isObject } = U;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /** @internal */\n        class Sync {\n            /* *\n             *\n             * Constructor\n             *\n             * */\n            /**\n             * Creates an instance of the sync class.\n             *\n             * @param component\n             * The component to which the emitters and handlers are attached.\n             *\n             * @param predefinedSyncConfig\n             * The predefined sync configuration.\n             */\n            constructor(component, predefinedSyncConfig) {\n                this.component = component;\n                this.predefinedSyncConfig = predefinedSyncConfig;\n                this.syncConfig = Sync.prepareSyncConfig(predefinedSyncConfig, component.options.sync);\n                this.registeredSyncHandlers = {};\n                this.registeredSyncEmitters = {};\n                this.isSyncing = false;\n                this.listeners = [];\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method that prepares the sync configuration from the predefined config\n             * and current component options.\n             *\n             * @param predefinedConfig The predefined sync configuration.\n             * @param componentSyncOptions The current component sync options.\n             * @returns The sync configuration.\n             */\n            static prepareSyncConfig(predefinedConfig, componentSyncOptions = {}) {\n                const { defaultSyncPairs: defaultPairs, defaultSyncOptions: defaultOptionsList } = predefinedConfig;\n                return Object.keys(componentSyncOptions).reduce((acc, syncName) => {\n                    if (syncName) {\n                        const defaultPair = defaultPairs[syncName];\n                        const defaultOptions = defaultOptionsList[syncName];\n                        const entry = componentSyncOptions[syncName];\n                        const preparedOptions = merge(defaultOptions || {}, { enabled: isObject(entry) ? entry.enabled : entry }, isObject(entry) ? entry : {});\n                        if (defaultPair && preparedOptions.enabled) {\n                            const keys = [\n                                'emitter',\n                                'handler'\n                            ];\n                            for (const key of keys) {\n                                if (preparedOptions[key] === true ||\n                                    preparedOptions[key] === void 0) {\n                                    preparedOptions[key] =\n                                        defaultPair[key];\n                                }\n                            }\n                        }\n                        acc[syncName] = preparedOptions;\n                    }\n                    return acc;\n                }, {});\n            }\n            /**\n             * Add new emitter to the registered emitters.\n             *\n             * @param emitter\n             * The emitter to register.\n             */\n            registerSyncEmitter(emitter) {\n                const { id } = emitter;\n                this.registeredSyncEmitters[id] = emitter;\n            }\n            /**\n             * Method that checks if the emitter is registered.\n             *\n             * @param id\n             * The id of the emitter to check.\n             *\n             * @returns\n             * Whether the emitter is registered.\n             */\n            isRegisteredEmitter(id) {\n                return Boolean(this.registeredSyncEmitters[id]);\n            }\n            /**\n             * Register new handler to the registered handlers.\n             *\n             * @param handler\n             * The handler to register.\n             */\n            registerSyncHandler(handler) {\n                const { id } = handler;\n                this.registeredSyncHandlers[id] = handler;\n            }\n            /**\n             * Method that checks if the handler is registered.\n             *\n             * @param handlerID\n             * The id of the handler to check.\n             *\n             * @returns\n             * Whether the handler is registered.\n             */\n            isRegisteredHandler(handlerID) {\n                return Boolean(this.registeredSyncHandlers[handlerID]);\n            }\n            /**\n             * Registers the handlers and emitters on the component\n             */\n            start() {\n                const { component } = this;\n                this.syncConfig = Sync.prepareSyncConfig(this.predefinedSyncConfig, component.options.sync);\n                for (const id of Object.keys(this.syncConfig)) {\n                    const syncOptions = this.syncConfig[id];\n                    if (!syncOptions) {\n                        continue;\n                    }\n                    let { emitter: emitterConfig, handler: handlerConfig } = syncOptions;\n                    if (handlerConfig) {\n                        if (handlerConfig === true) {\n                            handlerConfig =\n                                Sync.defaultHandlers[id]\n                                    .handler;\n                        }\n                        const handler = new SyncHandler(id, handlerConfig);\n                        if (!this.isRegisteredHandler(handler.id)) {\n                            this.registerSyncHandler(handler);\n                            handler.register(component);\n                        }\n                    }\n                    if (emitterConfig) {\n                        if (emitterConfig === true) {\n                            emitterConfig =\n                                Sync.defaultHandlers[id]\n                                    .emitter;\n                        }\n                        const emitter = new SyncEmitter(id, emitterConfig);\n                        if (!this.isRegisteredEmitter(emitter.id)) {\n                            this.registerSyncEmitter(emitter);\n                            emitter.create(component);\n                        }\n                    }\n                }\n                this.isSyncing = true;\n                this.listeners.push(component.on('update', () => this.stop()));\n            }\n            /**\n             * Removes the handlers and emitters from the component.\n             */\n            stop() {\n                const { component, listeners, registeredSyncHandlers, registeredSyncEmitters } = this;\n                Object.keys(registeredSyncHandlers).forEach((id) => {\n                    registeredSyncHandlers[id].remove();\n                    delete registeredSyncHandlers[id];\n                });\n                Object.keys(registeredSyncEmitters).forEach((id) => {\n                    registeredSyncEmitters[id].remove();\n                    delete registeredSyncEmitters[id];\n                });\n                this.isSyncing = false;\n                for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                    listeners[i]();\n                }\n                this.listeners.length = 0;\n                this.listeners.push(component.on('afterUpdate', () => {\n                    this.start();\n                }));\n            }\n        }\n        /**\n         * Default handlers for the sync class. This property is extended by\n         * different Components, where default syncs are added. Allows overwriting\n         * the configuration before creating the dashboard.\n         */\n        Sync.defaultHandlers = {};\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Sync;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentUtilities;\n        (function (ComponentUtilities) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getMargins(element, includeBorders = true) {\n                const borders = {\n                    x: ['borderLeft', 'borderRight'],\n                    y: ['borderTop', 'borderBottom']\n                };\n                return {\n                    y: getStyles(element, [\n                        'marginTop',\n                        'marginBottom',\n                        ...(includeBorders ? borders.y : [])\n                    ]).reduce(sumPixels, 0),\n                    x: getStyles(element, [\n                        'marginLeft',\n                        'marginTop',\n                        ...(includeBorders ? borders.x : [])\n                    ]).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getMargins = getMargins;\n            function getPaddings(element) {\n                return {\n                    x: getStyles(element, ['paddingLeft', 'paddingRight']).reduce(sumPixels, 0),\n                    y: getStyles(element, ['paddingTop', 'paddingBottom']).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getPaddings = getPaddings;\n            function getStyles(element, styles) {\n                const elementStyles = window.getComputedStyle(element);\n                return styles.map((style) => elementStyles[style]); // Cannot use getPropertyValue?\n            }\n            ComponentUtilities.getStyles = getStyles;\n            function sumPixels(accumulator, value) {\n                if (value) {\n                    accumulator += (typeof value === 'number' ? value : parseFloat(value));\n                }\n                return accumulator;\n            }\n            ComponentUtilities.sumPixels = sumPixels;\n        })(ComponentUtilities || (ComponentUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentUtilities;\n    });\n    _registerModule(_modules, 'Dashboards/Utilities.js', [_modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (D, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { doc, supportsPassiveEvents } = D;\n        const { error: coreError, isClass, isDOMElement, isObject, objectEach, uniqueKey: coreUniqueKey } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Add an event listener.\n         *\n         * @function Highcharts.addEvent<T>\n         *\n         * @param  {D.Class<T>|T} el\n         *         The element or object to add a listener to. It can be a\n         *         {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         *\n         * @param  {string} type\n         *         The event type.\n         *\n         * @param  {Dashboards.EventCallbackFunction<T>|Function} fn\n         *         The function callback to execute when the event is fired.\n         *\n         * @param  {Dashboards.EventOptionsObject} [options]\n         *         Options for adding the event.\n         *\n         * @return {Function}\n         *         A callback function to remove the added event.\n         */\n        function addEvent(el, type, fn, options = {}) {\n            /* eslint-enable valid-jsdoc */\n            // Add hcEvents to either the prototype (in case we're running addEvent on a\n            // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n            // inherited down the prototype chain, in which case we need to set the\n            // property on this instance (which may itself be a prototype).\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                owner.hcEvents = {};\n            }\n            const events = owner.hcEvents;\n            // Handle DOM events\n            // If the browser supports passive events, add it to improve performance\n            // on touch events (#11353).\n            const addEventListener = el.addEventListener;\n            if (addEventListener) {\n                addEventListener.call(el, type, fn, supportsPassiveEvents ? {\n                    passive: options.passive === void 0 ?\n                        type.indexOf('touch') !== -1 : options.passive,\n                    capture: false\n                } : false);\n            }\n            if (!events[type]) {\n                events[type] = [];\n            }\n            const eventObject = {\n                fn,\n                order: typeof options.order === 'number' ? options.order : Infinity\n            };\n            events[type].push(eventObject);\n            // Order the calls\n            events[type].sort((a, b) => a.order - b.order);\n            // Return a function that can be called to remove this event.\n            return function () {\n                removeEvent(el, type, fn);\n            };\n        }\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {boolean} extend\n         *        Whether to extend the left-side object (a) or return a whole new\n         *        object.\n         *\n         * @param {T|undefined} a\n         *        The first object to extend. When only this is given, the function\n         *        returns a deep copy.\n         *\n         * @param {...Array<object|undefined>} [n]\n         *        An object to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */ /**\n        * Utility function to deep merge two or more objects and return a third object.\n        * The merge function can also be used with a single object argument to create a\n        * deep copy of an object.\n        *\n        * @function Highcharts.merge<T>\n        *\n        * @param {T|undefined} a\n        *        The first object to extend. When only this is given, the function\n        *        returns a deep copy.\n        *\n        * @param {...Array<object|undefined>} [n]\n        *        An object to merge into the previous one.\n        *\n        * @return {T}\n        *         The merged object. If the first argument is true, the return is the\n        *         same as the second argument.\n        */\n        function merge(a, ...n) {\n            let copyDepth = 0, obj = {};\n            // Descriptive error stack:\n            const copyDepthError = new Error('Recursive copy depth > 100'), doCopy = (copy, original) => {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                if (++copyDepth > 100) {\n                    throw copyDepthError;\n                }\n                objectEach(original, (value, key) => {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                --copyDepth;\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (a === true) {\n                obj = n.shift();\n            }\n            else {\n                n.unshift(a);\n            }\n            // For each argument, extend the return\n            for (let i = 0, iEnd = n.length; i < iEnd; ++i) {\n                obj = doCopy(obj, n[i]);\n            }\n            return obj;\n        }\n        /**\n         * Returns a deep copy of an argument. It differs from `merge` in that it copies\n         * also arrays.\n         *\n         * @param value\n         * The value to clone.\n         *\n         * @param excludedKeys\n         * An array of keys to exclude from the clone.\n         */\n        function deepClone(value, excludedKeys) {\n            if (Array.isArray(value)) {\n                return value.map((v) => deepClone(v, excludedKeys));\n            }\n            if (value && typeof value === 'object') {\n                const clone = {};\n                const keys = Object.keys(value);\n                for (const key of keys) {\n                    if (excludedKeys && excludedKeys.includes(key)) {\n                        clone[key] = value[key];\n                    }\n                    else {\n                        clone[key] = deepClone(value[key], excludedKeys);\n                    }\n                }\n                return clone;\n            }\n            return value;\n        }\n        /**\n         * Creates a session-dependent unique key string for reference purposes.\n         *\n         * @function Dashboards.uniqueKey\n         *\n         * @return {string}\n         * Unique key string\n         */\n        function uniqueKey() {\n            return `dashboard-${coreUniqueKey().replace('highcharts-', '')}`;\n        }\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Dashboards.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @return {void}\n         */\n        function error(code, stop) {\n            // TODO- replace with proper error handling\n            if (code === 16) {\n                console.warn(// eslint-disable-line no-console\n                'Dashboard error: Dashboards library loaded more than once.' +\n                    'This may cause undefined behavior.');\n                return;\n            }\n            coreError(code, stop);\n        }\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function Dashboards.extend<T>\n         *\n         * @param {T|undefined} a\n         *        The object to be extended.\n         *\n         * @param {Partial<T>} b\n         *        The object to add to the first one.\n         *\n         * @return {T}\n         *         Object a, the original object.\n         */\n        function extend(a, b) {\n            /* eslint-enable valid-jsdoc */\n            let n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) { // eslint-disable-line guard-for-in\n                a[n] = b[n];\n            }\n            return a;\n        }\n        /**\n         * Fire an event that was registered with addEvent.\n         *\n         * @function Highcharts.fireEvent<T>\n         *\n         * @param {T} el\n         *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n         *        an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The type of event.\n         *\n         * @param {Dashboards.Dictionary<*>|Event} [eventArguments]\n         *        Custom event arguments that are passed on as an argument to the event\n         *        handler.\n         *\n         * @param {Dashboards.EventCallbackFunction<T>|Function} [defaultFunction]\n         *        The default function to execute if the other listeners haven't\n         *        returned false.\n         *\n         * @return {void}\n         */\n        function fireEvent(el, type, eventArguments, defaultFunction) {\n            /* eslint-enable valid-jsdoc */\n            eventArguments = eventArguments || {};\n            if (doc.createEvent &&\n                (el.dispatchEvent ||\n                    (el.fireEvent &&\n                        // Enable firing events on Highcharts instance.\n                        el !== D))) {\n                const e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                eventArguments = extend(e, eventArguments);\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(eventArguments);\n                }\n                else {\n                    el.fireEvent(type, eventArguments);\n                }\n            }\n            else if (el.hcEvents) {\n                if (!eventArguments.target) {\n                    // We're running a custom event\n                    extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip\n                        // default handler if called. The built-in\n                        // defaultPrevented property is not overwritable (#5112)\n                        preventDefault: function () {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking\n                        // the zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event\n                        // (#2297). If it is set, we're running a browser event.\n                        type: type\n                    });\n                }\n                const events = [];\n                let object = el;\n                let multilevel = false;\n                // Recurse up the inheritance chain and collect hcEvents set as own\n                // objects on the prototypes.\n                while (object.hcEvents) {\n                    if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                        object.hcEvents[type]) {\n                        if (events.length) {\n                            multilevel = true;\n                        }\n                        events.unshift.apply(events, object.hcEvents[type]);\n                    }\n                    object = Object.getPrototypeOf(object);\n                }\n                // For performance reasons, only sort the event handlers in case we are\n                // dealing with multiple levels in the prototype chain. Otherwise, the\n                // events are already sorted in the addEvent function.\n                if (multilevel) {\n                    // Order the calls\n                    events.sort((a, b) => a.order - b.order);\n                }\n                // Call the collected event handlers\n                events.forEach((obj) => {\n                    // If the event handler returns false, prevent the default handler\n                    // from executing\n                    if (obj.fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                });\n            }\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction.call(el, eventArguments);\n            }\n        }\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function Dashboards.removeEvent<T>\n         *\n         * @param {Dashboards.Class<T>|T} el\n         *        The element to remove events on.\n         *\n         * @param {string} [type]\n         *        The type of events to remove. If undefined, all events are removed\n         *        from the element.\n         *\n         * @param {Dashboards.EventCallbackFunction<T>} [fn]\n         *        The specific callback to remove. If undefined, all events that match\n         *        the element and optionally the type are removed.\n         *\n         * @return {void}\n         */\n        function removeEvent(el, type, fn) {\n            /* eslint-enable valid-jsdoc */\n            /**\n             * @private\n             */\n            function removeOneEvent(type, fn) {\n                const removeEventListener = el.removeEventListener;\n                if (removeEventListener) {\n                    removeEventListener.call(el, type, fn, false);\n                }\n            }\n            /**\n             * @private\n             */\n            function removeAllEvents(eventCollection) {\n                let types, len;\n                if (!el.nodeName) {\n                    return; // Break on non-DOM events\n                }\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                }\n                else {\n                    types = eventCollection;\n                }\n                objectEach(types, function (_val, n) {\n                    if (eventCollection[n]) {\n                        len = eventCollection[n].length;\n                        while (len--) {\n                            removeOneEvent(n, eventCollection[n][len].fn);\n                        }\n                    }\n                });\n            }\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                const events = owner.hcEvents;\n                if (type) {\n                    const typeEvents = (events[type] || []);\n                    if (fn) {\n                        events[type] = typeEvents.filter(function (obj) {\n                            return fn !== obj.fn;\n                        });\n                        removeOneEvent(type, fn);\n                    }\n                    else {\n                        removeAllEvents(events);\n                        events[type] = [];\n                    }\n                }\n                else {\n                    removeAllEvents(events);\n                    delete owner.hcEvents;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Utilities = {\n            addEvent,\n            deepClone,\n            error,\n            fireEvent,\n            merge,\n            removeEvent,\n            uniqueKey\n        };\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Component.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/CallbackRegistry.js'], _modules['Dashboards/Components/ConnectorHandler.js'], _modules['Dashboards/Components/EditableOptions.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Components/ComponentUtilities.js'], _modules['Dashboards/Utilities.js']], function (Cell, CallbackRegistry, ConnectorHandler, EditableOptions, Sync, Globals, U, CU, DU) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { classNamePrefix } = Globals;\n        const { createElement, isArray, merge, fireEvent, addEvent, objectEach, isFunction, getStyle, diffObjects } = U;\n        const { getMargins, getPaddings } = CU;\n        const { deepClone, uniqueKey } = DU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Abstract Class of component.\n         *\n         * @internal\n         *\n         */\n        /**\n         * Abstract Class of component.\n         * @internal\n         */\n        class Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             *\n             * Creates HTML text element like header or title\n             *\n             * @param tagName\n             * HTML tag name used as wrapper of text like `h2` or `p`.\n             * @param elementName\n             * Name of element\n             * @param textOptions\n             * The options for the component\n             * @returns\n             * HTML object when title is created, otherwise undefined\n             *\n             * @internal\n             */\n            static createTextElement(tagName, elementName, textOptions) {\n                if (typeof textOptions === 'object') {\n                    const { className, text, style } = textOptions;\n                    return createElement(tagName, {\n                        className: className || `${classNamePrefix}component-${elementName}`,\n                        textContent: text\n                    }, style);\n                }\n                if (typeof textOptions === 'string') {\n                    return createElement(tagName, {\n                        className: `${classNamePrefix}component-${elementName}`,\n                        textContent: textOptions\n                    }, {});\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                /**\n                 * The connector handlers for the component.\n                 */\n                this.connectorHandlers = [];\n                /**\n                 * Registry of callbacks registered on the component. Used in the Highcharts\n                 * component to keep track of chart events.\n                 *\n                 * @internal\n                 */\n                this.callbackRegistry = new CallbackRegistry();\n                /**\n                 * Event listeners tied to the parent cell. Used for rendering/resizing the\n                 * component on interactions.\n                 *\n                 * @internal\n                 */\n                this.cellListeners = [];\n                /**\n                 * Timeouts for calls to `Component.resizeTo()`.\n                 *\n                 * @internal\n                /* *\n                 */\n                this.resizeTimeouts = [];\n                /**\n                 * Timeouts for resizing the content. I.e. `chart.setSize()`.\n                 *\n                 * @internal\n                 * */\n                this.innerResizeTimeouts = [];\n                const renderTo = options.renderTo || options.cell;\n                this.board = board || cell?.row?.layout?.board || {};\n                this.parentElement =\n                    cell?.container || document.querySelector('#' + renderTo);\n                this.cell = cell;\n                this.options = merge(Component.defaultOptions, options);\n                this.id = this.options.id && this.options.id.length ?\n                    this.options.id :\n                    uniqueKey();\n                if (this.options.connector) {\n                    const connectorOptionsArray = isArray(this.options.connector) ?\n                        this.options.connector :\n                        [this.options.connector];\n                    for (const connectorOptions of connectorOptionsArray) {\n                        this.connectorHandlers.push(new ConnectorHandler(this, connectorOptions));\n                    }\n                }\n                this.editableOptions =\n                    new EditableOptions(this, options.editableOptionsBindings);\n                this.dimensions = {\n                    width: null,\n                    height: null\n                };\n                this.element = createElement('div', {\n                    className: this.options.className\n                }, {}, this.parentElement);\n                if (!Number(getStyle(this.element, 'padding'))) {\n                    // Fix flex problem, because of wrong height in internal elements\n                    this.element.style.padding = '0.1px';\n                }\n                this.contentElement = createElement('div', {\n                    className: `${this.options.className}-content`\n                }, {}, this.element, true);\n                this.sync = new Sync(this, this.constructor.predefinedSyncConfig);\n                this.setupEventListeners();\n                if (cell) {\n                    this.attachCellListeners();\n                    this.on('update', () => {\n                        if (this.cell instanceof Cell) {\n                            this.cell.setLoadingState();\n                        }\n                    });\n                    this.on('afterRender', () => {\n                        if (this.cell instanceof Cell) {\n                            this.cell.setLoadingState(false);\n                        }\n                    });\n                }\n                this.on('tableChanged', () => {\n                    this.onTableChanged();\n                });\n            }\n            /**\n             * Returns the component's options when it is dropped from the sidebar.\n             *\n             * @param sidebar\n             * The sidebar popup.\n             */\n            getOptionsOnDrop(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            sidebar) {\n                return {};\n            }\n            /**\n             * Returns the first connector of the component if it exists.\n             *\n             * @internal\n             */\n            getFirstConnector() {\n                return this.connectorHandlers[0]?.connector;\n            }\n            /**\n             * Setup listeners on cell/other things up the chain\n             *\n             * @internal\n             */\n            attachCellListeners() {\n                // Remove old listeners\n                while (this.cellListeners.length) {\n                    const destroy = this.cellListeners.pop();\n                    if (destroy) {\n                        destroy();\n                    }\n                }\n                if (this.cell &&\n                    this.cell instanceof Cell &&\n                    Object.keys(this.cell).length) {\n                    const board = this.cell.row.layout.board;\n                    this.cellListeners.push(\n                    // Listen for resize on dashboard\n                    addEvent(board, 'cellResize', () => {\n                        this.resizeTo(this.parentElement);\n                    }), \n                    // Listen for changed parent\n                    addEvent(this.cell.row, 'cellChange', (e) => {\n                        const { row } = e;\n                        if (row && this.cell) {\n                            const hasLeftTheRow = row.getCellIndex(this.cell) === void 0;\n                            if (hasLeftTheRow) {\n                                if (this.cell) {\n                                    this.setCell(this.cell);\n                                }\n                            }\n                        }\n                    }));\n                }\n            }\n            /**\n             * Set a parent cell.\n             * @param cell\n             * Instance of a cell.\n             * @param resize\n             * Flag that allow to resize the component.\n             *\n             * @internal\n             */\n            setCell(cell, resize = false) {\n                this.cell = cell;\n                if (cell.container) {\n                    this.parentElement = cell.container;\n                }\n                this.attachCellListeners();\n                if (resize) {\n                    this.resizeTo(this.parentElement);\n                }\n            }\n            /**\n             * Initializes connector handlers for the component.\n             */\n            async initConnectors() {\n                fireEvent(this, 'setConnectors', {\n                    connectorHandlers: this.connectorHandlers\n                });\n                for (const connectorHandler of this.connectorHandlers) {\n                    await connectorHandler.initConnector();\n                }\n                fireEvent(this, 'afterSetConnectors', {\n                    connectorHandlers: this.connectorHandlers\n                });\n                return this;\n            }\n            /**\n             * Gets height of the component's content.\n             *\n             * @returns\n             * Current height as number.\n             * @internal\n             */\n            getContentHeight() {\n                const titleHeight = this.titleElement ?\n                    this.titleElement.clientHeight + getMargins(this.titleElement).y :\n                    0;\n                const captionHeight = this.captionElement ?\n                    this.captionElement.clientHeight +\n                        getMargins(this.captionElement).y :\n                    0;\n                return titleHeight + captionHeight;\n            }\n            /**\n             * Resize the component\n             * @param width\n             * The width to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style\n             * @param height\n             * The height to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style.\n             */\n            resize(width, height) {\n                if (height) {\n                    // Get offset for border, padding\n                    const pad = getPaddings(this.element).y + getMargins(this.element).y;\n                    this.element.style.height = 'calc(100% - ' + pad + 'px)';\n                    this.contentElement.style.height =\n                        'calc(100% - ' + this.getContentHeight() + 'px)';\n                }\n                else if (height === null) {\n                    this.dimensions.height = null;\n                    this.element.style.removeProperty('height');\n                }\n                fireEvent(this, 'resize', {\n                    width,\n                    height\n                });\n            }\n            /**\n             * It's a temporary alternative for the `resize` method. It sets the strict\n             * pixel height for the component so that the content can be distributed in\n             * the right way, without looping the resizers in the content and container.\n             * @param width\n             * The width to set the component to.\n             * @param height\n             * The height to set the component to.\n             */\n            resizeDynamicContent(width, height) {\n                const { element } = this;\n                if (height) {\n                    const margins = getMargins(element).y;\n                    const paddings = getPaddings(element).y;\n                    if (typeof height === 'string') {\n                        height = parseFloat(height);\n                    }\n                    height = Math.round(height);\n                    element.style.height = `${height - margins - paddings}px`;\n                    this.contentElement.style.height = `${element.clientHeight - this.getContentHeight() - paddings}px`;\n                }\n                else if (height === null) {\n                    this.dimensions.height = null;\n                    element.style.removeProperty('height');\n                }\n                fireEvent(this, 'resize', {\n                    width,\n                    height\n                });\n            }\n            /**\n             * Adjusts size of component to parent's cell size when animation is done.\n             * @param element\n             * HTML element that is resized.\n             */\n            resizeTo(element) {\n                while (this.resizeTimeouts.length) {\n                    const timeout = this.resizeTimeouts.pop();\n                    if (timeout) {\n                        cancelAnimationFrame(timeout);\n                    }\n                }\n                const timeoutID = requestAnimationFrame(() => {\n                    const { width, height } = element.getBoundingClientRect();\n                    const padding = getPaddings(element);\n                    const margins = getMargins(element);\n                    this.resize(width - padding.x - margins.x, height - padding.y - margins.y);\n                });\n                this.resizeTimeouts.push(timeoutID);\n            }\n            /**\n             * Handles updating via options.\n             * @param newOptions\n             * The options to apply.\n             *\n             * @param shouldRerender\n             * Set to true if the update should rerender the component.\n             */\n            async update(newOptions, shouldRerender = true) {\n                const eventObject = {\n                    options: newOptions,\n                    shouldForceRerender: false\n                };\n                // Update options\n                fireEvent(this, 'update', eventObject);\n                if (newOptions.connector && Array.isArray(this.options.connector)) {\n                    this.options.connector = void 0;\n                }\n                this.options = merge(this.options, newOptions);\n                const connectorOptions = (this.options.connector ? (isArray(this.options.connector) ? this.options.connector :\n                    [this.options.connector]) : []);\n                let connectorsHaveChanged = connectorOptions.length !== this.connectorHandlers.length;\n                if (!connectorsHaveChanged) {\n                    for (let i = 0, iEnd = connectorOptions.length; i < iEnd; i++) {\n                        const oldConnectorId = this.connectorHandlers[i]?.options.id;\n                        const newConnectorId = connectorOptions[i]?.id;\n                        if (oldConnectorId !== newConnectorId) {\n                            connectorsHaveChanged = true;\n                            break;\n                        }\n                        this.connectorHandlers[i].updateOptions(connectorOptions[i]);\n                    }\n                }\n                if (connectorsHaveChanged) {\n                    for (const connectorHandler of this.connectorHandlers) {\n                        connectorHandler.destroy();\n                    }\n                    this.connectorHandlers.length = 0;\n                    for (const options of connectorOptions) {\n                        this.connectorHandlers.push(new ConnectorHandler(this, options));\n                    }\n                    await this.initConnectors();\n                }\n                if (shouldRerender || eventObject.shouldForceRerender) {\n                    this.render();\n                }\n            }\n            /**\n             * Private method which sets up event listeners for the component.\n             *\n             * @internal\n             */\n            setupEventListeners() {\n                const events = this.options.events;\n                if (events) {\n                    Object.keys(events).forEach((key) => {\n                        const eventCallback = events[key];\n                        if (eventCallback) {\n                            this.callbackRegistry.addCallback(key, {\n                                type: 'component',\n                                func: eventCallback\n                            });\n                        }\n                    });\n                    objectEach(events, (eventCallback, eventType) => {\n                        if (isFunction(eventCallback)) {\n                            this.on(eventType, eventCallback);\n                        }\n                    });\n                }\n                const resizeObserverCallback = () => {\n                    this.resizeTo(this.parentElement);\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(resizeObserverCallback);\n                    this.resizeObserver.observe(this.element);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', resizeObserverCallback);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * Adds title at the top of component's container.\n             *\n             * @param titleOptions\n             * The options for the title.\n             */\n            setTitle(titleOptions) {\n                const titleElement = this.titleElement, shouldExist = titleOptions &&\n                    (typeof titleOptions === 'string' || titleOptions.text);\n                if (shouldExist) {\n                    const newTitle = Component.createTextElement('h2', 'title', titleOptions);\n                    if (newTitle) {\n                        if (!titleElement) {\n                            this.element.insertBefore(newTitle, this.element.firstChild);\n                        }\n                        else {\n                            titleElement.replaceWith(newTitle);\n                        }\n                        this.titleElement = newTitle;\n                    }\n                }\n                else {\n                    if (titleElement) {\n                        titleElement.remove();\n                        delete this.titleElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Adds caption at the bottom of component's container.\n             *\n             * @param captionOptions\n             * The options for the caption.\n             */\n            setCaption(captionOptions) {\n                const captionElement = this.captionElement, shouldExist = captionOptions &&\n                    (typeof captionOptions === 'string' || captionOptions.text);\n                if (shouldExist) {\n                    const newCaption = Component.createTextElement('div', 'caption', captionOptions);\n                    if (newCaption) {\n                        if (!captionElement) {\n                            this.element.appendChild(newCaption);\n                        }\n                        else {\n                            captionElement.replaceWith(newCaption);\n                        }\n                        this.captionElement = newCaption;\n                    }\n                }\n                else {\n                    if (captionElement) {\n                        captionElement.remove();\n                        delete this.captionElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Handles setting things up on initial render.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            async load() {\n                await this.initConnectors();\n                this.render();\n                return this;\n            }\n            /**\n             * Renders the component.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            render() {\n                this.emit({ type: 'render' });\n                this.setTitle(this.options.title);\n                this.setCaption(this.options.caption);\n                this.resizeTo(this.parentElement);\n                return this;\n            }\n            /**\n             * Destroys the component.\n             */\n            destroy() {\n                /**\n                 * TODO: Should perhaps set an `isActive` flag to false.\n                 */\n                if (this.sync.isSyncing) {\n                    this.sync.stop();\n                }\n                while (this.element.firstChild) {\n                    this.element.firstChild.remove();\n                }\n                // Call unmount\n                fireEvent(this, 'unmount');\n                for (const connectorHandler of this.connectorHandlers) {\n                    connectorHandler.destroy();\n                }\n                this.element.remove();\n            }\n            /** @internal */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /** @internal */\n            emit(e) {\n                if (!e.target) {\n                    e.target = this;\n                }\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const dimensions = {\n                    width: 0,\n                    height: 0\n                };\n                objectEach(this.dimensions, function (value, key) {\n                    if (value === null) {\n                        return;\n                    }\n                    dimensions[key] = value;\n                });\n                const json = {\n                    $class: this.options.type,\n                    options: {\n                        renderTo: this.options.renderTo,\n                        parentElement: this.parentElement.id,\n                        dimensions,\n                        id: this.id,\n                        type: this.type\n                    }\n                };\n                return json;\n            }\n            /**\n             * Get the component's options.\n             * @returns\n             * The JSON of component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return diffObjects(this.options, Component.defaultOptions);\n            }\n            getEditableOptions() {\n                const component = this;\n                // When refactoring, limit the copied options to the ones that are\n                // actually editable to avoid unnecessary memory usage.\n                return deepClone(component.options, [\n                    'dataTable', 'points', 'series', 'data', 'editableOptions'\n                ]);\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                let result = component.getEditableOptions();\n                for (let i = 0, end = propertyPath.length; i < end; i++) {\n                    if (isArray(result) &&\n                        propertyPath[0] === 'connector' &&\n                        result.length > 1) {\n                        return 'multiple connectors';\n                    }\n                    if (!result) {\n                        return;\n                    }\n                    result = result[propertyPath[i]];\n                    if (result === false &&\n                        (propertyPath.indexOf('title') >= 0 ||\n                            propertyPath.indexOf('subtitle') >= 0 ||\n                            propertyPath.indexOf('caption') >= 0)) {\n                        result = '';\n                    }\n                }\n                return result;\n            }\n        }\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        /** @internal */\n        Component.Sync = Sync;\n        /**\n         * Predefined sync config for component.\n         */\n        Component.predefinedSyncConfig = {\n            defaultSyncOptions: {},\n            defaultSyncPairs: {}\n        };\n        /**\n         * Default options of the component.\n         */\n        Component.defaultOptions = {\n            className: `${classNamePrefix}component`,\n            id: '',\n            title: false,\n            caption: false,\n            sync: Sync.defaultHandlers,\n            editableOptions: [{\n                    name: 'title',\n                    propertyPath: ['title'],\n                    type: 'input'\n                }, {\n                    name: 'caption',\n                    propertyPath: ['caption'],\n                    type: 'input'\n                }]\n        };\n\n        return Component;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const HTMLComponentDefaults = {\n            type: 'HTML',\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-html`\n            ].join(' '),\n            elements: [],\n            editableOptions: [\n                ...Component.defaultOptions.editableOptions || [],\n                {\n                    name: 'htmlInput',\n                    propertyPath: ['html'],\n                    type: 'textarea'\n                }\n            ]\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLSyncs/HTMLSyncs.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {},\n            defaultSyncOptions: {}\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/HTMLComponent/HTMLComponentDefaults.js'], _modules['Dashboards/Components/HTMLComponent/HTMLSyncs/HTMLSyncs.js'], _modules['Dashboards/Utilities.js'], _modules['Core/Utilities.js']], function (AST, Component, HTMLComponentDefaults, HTMLSyncs, DU, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, diffObjects } = U;\n        const { deepClone } = DU;\n        // TODO: This may affect the AST parsing in Highcharts\n        // should look into adding these as options if possible\n        // Needs to go in a composition in the Highcharts plugin\n        AST.allowedTags = [\n            ...AST.allowedTags,\n            'option',\n            'select',\n            'label',\n            'input',\n            'textarea'\n        ];\n        AST.allowedAttributes = [\n            ...AST.allowedAttributes,\n            'for',\n            'value',\n            'checked',\n            'src',\n            'name',\n            'selected'\n        ];\n        AST.allowedReferences = [\n            ...AST.allowedReferences,\n            'data:image/'\n        ];\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a HTML component.\n         *\n         */\n        class HTMLComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the HTML component.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @returns\n             * HTML component based on config from JSON.\n             *\n             * @internal\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const elements = (json.elements ?\n                    json.elements.map((el) => JSON.parse(el)) :\n                    []);\n                /// const connector = (\n                //     json.connector ? DataJSON.fromJSON(json.connector) : void 0\n                // );\n                const component = new HTMLComponent(cell, merge(options, {\n                    elements\n                    /// connector: (\n                    //   connector instanceof DataConnector ? connector : void 0\n                    // )\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a HTML component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options) {\n                if (options.className) {\n                    options.className = `${HTMLComponent.defaultOptions.className} ${options.className}`;\n                }\n                options = merge(HTMLComponent.defaultOptions, options);\n                super(cell, options);\n                this.options = options;\n                this.type = 'HTML';\n                this.elements = [];\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                this.emit({\n                    type: 'load'\n                });\n                await super.load();\n                const options = this.options;\n                let isError = false;\n                if (options.elements?.length) {\n                    this.elements = options.elements.map(function (element) {\n                        if (typeof element === 'string') {\n                            return new AST(element).nodes[0];\n                        }\n                        if (!element.textContent &&\n                            !element.tagName &&\n                            element.attributes) {\n                            isError = true;\n                        }\n                        return element;\n                    });\n                }\n                else if (options.html) {\n                    this.elements = this.getElementsFromString(options.html);\n                    this.options.elements = this.elements;\n                }\n                this.constructTree();\n                this.emit({ type: 'afterLoad' });\n                if (isError) {\n                    throw new Error(`Missing tagName param in component: ${options.renderTo}`);\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.constructTree();\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                if (options.html) {\n                    this.elements = this.getElementsFromString(options.html);\n                    this.options.elements = this.elements;\n                    this.constructTree();\n                }\n                else if (options.elements) {\n                    this.elements = options.elements;\n                }\n                await super.update(options, shouldRerender);\n                this.emit({ type: 'afterUpdate' });\n            }\n            getOptionsOnDrop() {\n                return {\n                    cell: '',\n                    type: 'HTML',\n                    elements: [{\n                            tagName: 'span',\n                            textContent: '[Your custom HTML here- edit the component]'\n                        }]\n                };\n            }\n            /**\n             * @internal\n             */\n            constructTree() {\n                // Remove old tree if rerendering.\n                while (this.contentElement.firstChild) {\n                    this.contentElement.firstChild.remove();\n                }\n                const parser = new AST(this.options.elements || []);\n                parser.addToDOM(this.contentElement);\n            }\n            /**\n             * When HTML definition is a string, it needs to be parsed to AST.\n             *\n             * @internal\n             */\n            getElementsFromString(htmlString) {\n                return new AST(htmlString).nodes;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const elements = (this.options.elements || [])\n                    .map((el) => JSON.stringify(el));\n                const json = merge(super.toJSON(), {\n                    elements,\n                    options: this.options\n                });\n                this.emit({\n                    type: 'toJSON',\n                    json\n                });\n                return json;\n            }\n            /**\n             * Get the HTML component's options.\n             * @returns\n             * The JSON of HTML component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HTMLComponent.defaultOptions),\n                    type: 'HTML'\n                };\n            }\n            /**\n             * Retrieves editable options for the HTML component.\n             */\n            getEditableOptions() {\n                return deepClone(this.options, ['editableOptions']);\n            }\n            /**\n             * Get the value of the editable option by property path. Parse the elements\n             * if the HTML options is not set.\n             *\n             * @param propertyPath\n             * The property path of the option.\n             */\n            getEditableOptionValue(propertyPath) {\n                if (!propertyPath) {\n                    return;\n                }\n                if (propertyPath[0] === 'html') {\n                    const result = this.getEditableOptions();\n                    if (!result.html && result.elements) {\n                        return this.getStringFromElements(result.elements);\n                    }\n                    return result[propertyPath[0]];\n                }\n                return super.getEditableOptionValue(propertyPath);\n            }\n            /**\n             * Returns the HTML string from the given elements.\n             *\n             * @param elements\n             * The array of elements to serialize.\n             */\n            getStringFromElements(elements) {\n                let html = '';\n                for (const element of elements) {\n                    html += this.serializeNode(element);\n                }\n                return html;\n            }\n            /**\n             * Serializes the HTML node to string.\n             *\n             * @param node\n             * The HTML node to serialize.\n             */\n            serializeNode(node) {\n                if (!node.tagName || node.tagName === '#text') {\n                    // Text node\n                    return node.textContent || '';\n                }\n                const attributes = node.attributes;\n                let html = `<${node.tagName}`;\n                if (attributes) {\n                    for (const key in attributes) {\n                        if (Object.prototype.hasOwnProperty.call(attributes, key)) {\n                            const value = attributes[key];\n                            if (value !== void 0) {\n                                html += ` ${key}=\"${value}\"`;\n                            }\n                        }\n                    }\n                }\n                html += '>';\n                html += node.textContent || '';\n                (node.children || []).forEach((child) => {\n                    html += this.serializeNode(child);\n                });\n                html += `</${node.tagName}>`;\n                return html;\n            }\n            /**\n             * @internal\n             */\n            onTableChanged(e) {\n                if (e.detail?.sender !== this.id) {\n                    this.render();\n                }\n            }\n        }\n        /* *\n         *\n         *  Static properties\n         *\n         * */\n        /**\n         * Default options of the HTML component.\n         */\n        HTMLComponent.defaultOptions = merge(Component.defaultOptions, HTMLComponentDefaults);\n        /**\n         * Predefined sync config for HTML component.\n         */\n        HTMLComponent.predefinedSyncConfig = HTMLSyncs;\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return HTMLComponent;\n    });\n    _registerModule(_modules, 'Data/DataTableCore.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *\n         * */\n        const { fireEvent, isArray, objectEach, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTableCore {\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @example\n             * const dataTable = new Highcharts.DataTableCore({\n             *   columns: {\n             *     year: [2020, 2021, 2022, 2023],\n             *     cost: [11, 13, 12, 14],\n             *     revenue: [12, 15, 14, 18]\n             *   }\n             * });\n\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            constructor(options = {}) {\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for indentification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                let rowCount = 0;\n                objectEach(options.columns || {}, (column, columnName) => {\n                    this.columns[columnName] = column.slice();\n                    rowCount = Math.max(rowCount, column.length);\n                });\n                this.applyRowCount(rowCount);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies a row count to the table by setting the `rowCount` property and\n             * adjusting the length of all columns.\n             *\n             * @private\n             * @param {number} rowCount The new row count.\n             */\n            applyRowCount(rowCount) {\n                this.rowCount = rowCount;\n                objectEach(this.columns, (column) => {\n                    if (isArray(column)) { // Not on typed array\n                        column.length = rowCount;\n                    }\n                });\n            }\n            /**\n             * Fetches the given column by the canonical column name. Simplified version\n             * of the full `DataTable.getRow` method, always returning by reference.\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnName, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            asReference) {\n                return this.columns[columnName];\n            }\n            /**\n             * Retrieves all or the given columns. Simplified version of the full\n             * `DataTable.getColumns` method, always returning by reference.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNames, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            asReference) {\n                return (columnNames || Object.keys(this.columns)).reduce((columns, columnName) => {\n                    columns[columnName] = this.columns[columnName];\n                    return columns;\n                }, {});\n            }\n            /**\n             * Retrieves the row at a given index.\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @return {Record<string, number|string|undefined>|undefined}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNames) {\n                return (columnNames || Object.keys(this.columns)).map((key) => this.columns[key]?.[rowIndex]);\n            }\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumn(columnName, column = [], rowIndex = 0, eventDetail) {\n                this.setColumns({ [columnName]: column }, rowIndex, eventDetail);\n            }\n            /**\n             * * Sets cell values for multiple columns. Will insert new columns, if not\n             * found. Simplified version of the full `DataTable.setColumns`, limited to\n             * full replacement of the columns (undefined `rowIndex`).\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                let rowCount = this.rowCount;\n                objectEach(columns, (column, columnName) => {\n                    this.columns[columnName] = column.slice();\n                    rowCount = column.length;\n                });\n                this.applyRowCount(rowCount);\n                if (!eventDetail?.silent) {\n                    fireEvent(this, 'afterSetColumns');\n                    this.versionTag = uniqueKey();\n                }\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             * A simplified version of the full `DateTable.setRow`, limited to objects.\n             *\n             * @param {Record<string, number|string|undefined>} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex = this.rowCount, insert, eventDetail) {\n                const { columns } = this, indexRowCount = insert ? this.rowCount + 1 : rowIndex + 1;\n                objectEach(row, (cellValue, columnName) => {\n                    const column = columns[columnName] ||\n                        eventDetail?.addColumns !== false && new Array(indexRowCount);\n                    if (column) {\n                        if (insert) {\n                            column.splice(rowIndex, 0, cellValue);\n                        }\n                        else {\n                            column[rowIndex] = cellValue;\n                        }\n                        columns[columnName] = column;\n                    }\n                });\n                if (indexRowCount > this.rowCount) {\n                    this.applyRowCount(indexRowCount);\n                }\n                if (!eventDetail?.silent) {\n                    fireEvent(this, 'afterSetRows');\n                    this.versionTag = uniqueKey();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * A column of values in a data table.\n         * @typedef {Array<boolean|null|number|string|undefined>} Highcharts.DataTableColumn\n         */ /**\n        * A collection of data table columns defined by a object where the key is the\n        * column name and the value is an array of the column values.\n        * @typedef {Record<string, Highcharts.DataTableColumn>} Highcharts.DataTableColumnCollection\n        */\n        /**\n         * Options for the `DataTable` or `DataTableCore` classes.\n         * @interface Highcharts.DataTableOptions\n         */ /**\n        * The column options for the data table. The columns are defined by an object\n        * where the key is the column ID and the value is an array of the column\n        * values.\n        *\n        * @name Highcharts.DataTableOptions.columns\n        * @type {Highcharts.DataTableColumnCollection|undefined}\n        */ /**\n        * Custom ID to identify the new DataTable instance.\n        *\n        * @name Highcharts.DataTableOptions.id\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return DataTableCore;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Data/DataTableCore.js'], _modules['Core/Utilities.js']], function (DataTableCore, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *  - Jomar Hønsi\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, defined, fireEvent, extend, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTable extends DataTableCore {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            static isNull(row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    const columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = {}) {\n                super(options);\n                this.modified = this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            clone(skipColumns, eventDetail) {\n                const table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                const tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                    tableClone.originalRowIndexes = table.originalRowIndexes;\n                    tableClone.localRowIndexes = table.localRowIndexes;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone\n                });\n                return tableClone;\n            }\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            deleteColumns(columnNames, eventDetail) {\n                const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                        this.deleteRowIndexReferences();\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            }\n            /**\n             * Deletes the row index references. This is useful when the original table\n             * is deleted, and the references are no longer needed. This table is\n             * then considered an original table or a table that has the same row's\n             * order as the original table.\n             */\n            deleteRowIndexReferences() {\n                delete this.originalRowIndexes;\n                delete this.localRowIndexes;\n                // Here, in case of future need, can be implemented updating of the\n                // modified tables' row indexes references.\n            }\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1, eventDetail) {\n                const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    const columns = table.columns, columnNames = Object.keys(columns);\n                    for (let i = 0, iEnd = columnNames.length, column, deletedCells; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            }\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                if ([\n                    'afterDeleteColumns',\n                    'afterDeleteRows',\n                    'afterSetCell',\n                    'afterSetColumns',\n                    'afterSetRows'\n                ].includes(e.type)) {\n                    this.versionTag = uniqueKey();\n                }\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnName\n             * Column name of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            getCell(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    return column[rowIndex];\n                }\n            }\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            getCellAsBoolean(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                return !!(column && column[rowIndex]);\n            }\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnName\n             * Column name or to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            getCellAsNumber(columnName, rowIndex, useNaN) {\n                const table = this;\n                const column = table.columns[columnName];\n                let cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(`${cellValue ?? ''}`);\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            }\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            getCellAsString(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                return `${(column && column[rowIndex])}`;\n            }\n            /**\n             * Fetches the given column by the canonical column name.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnName, asReference) {\n                return this.getColumns([columnName], asReference)[columnName];\n            }\n            /**\n             * Fetches the given column by the canonical column name, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            getColumnAsNumbers(columnName, useNaN) {\n                const table = this, columns = table.columns;\n                const column = columns[columnName], columnAsNumber = [];\n                if (column) {\n                    const columnLength = column.length;\n                    if (useNaN) {\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i, true));\n                        }\n                    }\n                    else {\n                        for (let i = 0, cellValue; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            }\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            getColumnNames() {\n                const table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            }\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNames, asReference) {\n                const table = this, tableColumns = table.columns, columns = {};\n                columnNames = (columnNames || Object.keys(tableColumns));\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = tableColumns[columnName];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Takes the original row index and returns the local row index in the\n             * modified table for which this function is called.\n             *\n             * @param {number} originalRowIndex\n             * Original row index to get the local row index for.\n             *\n             * @return {number|undefined}\n             * Returns the local row index or `undefined` if not found.\n             */\n            getLocalRowIndex(originalRowIndex) {\n                const { localRowIndexes } = this;\n                if (localRowIndexes) {\n                    return localRowIndexes[originalRowIndex];\n                }\n                return originalRowIndex;\n            }\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            getModifier() {\n                return this.modifier;\n            }\n            /**\n             * Takes the local row index and returns the index of the corresponding row\n             * in the original table.\n             *\n             * @param {number} rowIndex\n             * Local row index to get the original row index for.\n             *\n             * @return {number|undefined}\n             * Returns the original row index or `undefined` if not found.\n             */\n            getOriginalRowIndex(rowIndex) {\n                const { originalRowIndexes } = this;\n                if (originalRowIndexes) {\n                    return originalRowIndexes[rowIndex];\n                }\n                return rowIndex;\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNames) {\n                return this.getRows(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            getRowCount() {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            }\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            getRowIndexBy(columnName, cellValue, rowIndexOffset) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    const rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRowObject(rowIndex, columnNames) {\n                return this.getRowObjects(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            getVersionTag() {\n                return this.versionTag;\n            }\n            /**\n             * Checks for given column names.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNames\n             * Column names to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            hasColumns(columnNames) {\n                const table = this, columns = table.columns;\n                for (let i = 0, iEnd = columnNames.length, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    if (!columns[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            hasRowWith(columnName, cellValue) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            renameColumn(columnName, newColumnName) {\n                const table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Sets a cell value based on the row index and column.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            setCell(columnName, rowIndex, cellValue, eventDetail) {\n                const table = this, columns = table.columns, modifier = table.modifier;\n                let column = columns[columnName];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!column) {\n                    column = columns[columnName] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnName, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                const table = this, tableColumns = table.columns, tableModifier = table.modifier, columnNames = Object.keys(columns);\n                let rowCount = table.rowCount;\n                table.emit({\n                    type: 'setColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (typeof rowIndex === 'undefined') {\n                    super.setColumns(columns, rowIndex, extend(eventDetail, { silent: true }));\n                }\n                else {\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        const tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                            tableColumn[i] = column[i];\n                        }\n                        rowCount = Math.max(rowCount, tableColumn.length);\n                    }\n                    this.applyRowCount(rowCount);\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, rowIndex || 0);\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets or unsets the modifier for the table.\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successful, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            setModifier(modifier, eventDetail) {\n                const table = this;\n                let promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then((table) => {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch']((error) => {\n                    table.emit({\n                        type: 'setModifierError',\n                        error,\n                        modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            }\n            /**\n             * Sets the original row indexes for the table. It is used to keep the\n             * reference to the original rows when modifying the table.\n             *\n             * @param {Array<number|undefined>} originalRowIndexes\n             * Original row indexes array.\n             *\n             * @param {boolean} omitLocalRowIndexes\n             * Whether to omit the local row indexes calculation. Defaults to `false`.\n             */\n            setOriginalRowIndexes(originalRowIndexes, omitLocalRowIndexes = false) {\n                this.originalRowIndexes = originalRowIndexes;\n                if (omitLocalRowIndexes) {\n                    return;\n                }\n                const modifiedIndexes = this.localRowIndexes = [];\n                for (let i = 0, iEnd = originalRowIndexes.length, originalIndex; i < iEnd; ++i) {\n                    originalIndex = originalRowIndexes[i];\n                    if (defined(originalIndex)) {\n                        modifiedIndexes[originalIndex] = i;\n                    }\n                }\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex, insert, eventDetail) {\n                this.setRows([row], rowIndex, insert, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefined` to add as new rows.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRows(rows, rowIndex = this.rowCount, insert, eventDetail) {\n                const table = this, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n                for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            if (insert) {\n                                columns[columnNames[j]].splice(i2, 0, null);\n                            }\n                            else {\n                                columns[columnNames[j]][i2] = null;\n                            }\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        super.setRow(row, i2, void 0, { silent: true });\n                    }\n                }\n                const indexRowCount = insert ?\n                    rowCount + rows.length :\n                    rowIndex + rowCount;\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Null state for a row record. In some cases, a row in a table may not\n         * contain any data or may be invalid. In these cases, a null state can be\n         * used to indicate that the row record is empty or invalid.\n         *\n         * @name Highcharts.DataTable.NULL\n         * @type {Highcharts.DataTableRowObject}\n         *\n         * @see {@link Highcharts.DataTable.isNull} for a null test.\n         *\n         * @example\n         * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n         */\n        DataTable.NULL = {};\n        /**\n         * Semantic version string of the DataTable class.\n         * @internal\n         */\n        DataTable.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        const { addEvent, fireEvent, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        class DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^(\\d{4})([\\-\\.\\/])(\\d{1,2})\\2(\\d{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            const d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            let year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                const mergedOptions = merge(DataConverter.defaultOptions, options);\n                let regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            asBoolean(value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            }\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            asDate(value) {\n                let timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            }\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            asGuessedType(value) {\n                const converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            }\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            asNumber(value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    const decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            }\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            asString(value) {\n                return '' + value;\n            }\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            deduceDateFormat(data, limit, save) {\n                const parser = this, stable = [], max = [];\n                let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[\\-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            }\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            export(\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            getTable() {\n                throw new Error('Not implemented');\n            }\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            guessType(value) {\n                const converter = this;\n                let result = 'string';\n                if (typeof value === 'string') {\n                    const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n                    let innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    const floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        const dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            parse(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            parseDate(value, dateFormatProp) {\n                const converter = this, options = converter.options;\n                let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            trim(str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[\\d\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        DataConverter.defaultOptions = {\n            dateFormat: '',\n            alternativeFormat: '',\n            startColumn: 0,\n            endColumn: Number.MAX_VALUE,\n            startRow: 0,\n            endRow: Number.MAX_VALUE,\n            firstRowAsNames: true,\n            switchRowsAndColumns: false\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns = [], headers = []) {\n                const table = new DataTable();\n                for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || `${i}`, columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        class CSVConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            export(connector, options = this.options) {\n                const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n                let { decimalPoint, itemDelimiter } = options;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    const columnMeta = connector.whatIs(columnName);\n                    let columnDataType;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = `\"${cellValue}\"`;\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            let i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                const cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            }\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n                let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (let i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    let offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                let cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Internal method that parses a single CSV row\n             */\n            parseCSVRow(columnStr, rowNumber) {\n                const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                let { decimalPoint } = converter.options;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                let i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                const read = (j) => {\n                    c = columnStr[j];\n                };\n                const pushType = (type) => {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                const push = () => {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        const initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[A-F\\d]{3,3}|[A-F\\d]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            }\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            guessDelimiter(lines) {\n                let points = 0, commas = 0, guessed;\n                const potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (let i = 0; i < linesCount; i++) {\n                    let inStr = false, c, cn, cl, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    const columnStr = lines[i];\n                    for (let j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        CSVConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            lineDelimiter: '\\n'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         */\n        class DataModifier {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            benchmark(dataTable, options) {\n                const results = [];\n                const modifier = this;\n                const execute = () => {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                const defaultOptions = {\n                    iterations: 1\n                };\n                const { iterations } = merge(defaultOptions, options);\n                modifier.on('afterBenchmarkIteration', () => {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                const times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', () => {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', () => {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            }\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifier = this;\n                return new Promise((resolve, reject) => {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        reject(e);\n                    }\n                });\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        class DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            constructor(options = {}) {\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            /**\n             * Poll timer ID, if active.\n             */\n            get polling() {\n                return !!this.polling;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            describeColumn(name, columnMeta) {\n                const connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            }\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            describeColumns(columns) {\n                const connector = this, columnNames = Object.keys(columns);\n                let columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            }\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            getColumnOrder(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort((a, b) => (pick(columns[a].index, 0) - pick(columns[b].index, 0)));\n                }\n            }\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            getSortedColumns(usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            }\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            load() {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            }\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            save() {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            }\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            setColumnOrder(columnNames) {\n                const connector = this;\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            }\n            setModifierOptions(modifierOptions) {\n                const ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(() => this);\n            }\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            startPolling(refreshTime = 1000) {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(() => connector\n                    .load()['catch']((error) => connector.emit({\n                    type: 'loadError',\n                    error,\n                    table: connector.table\n                }))\n                    .then(() => {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }), refreshTime);\n            }\n            /**\n             * Stops polling data.\n             */\n            stopPolling() {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            }\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            whatIs(name) {\n                return this.metadata.columns[name];\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        class CSVConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new CSVConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { csv, csvURL, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    csv,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then((response) => response.text()) :\n                    csv || '')\n                    .then((csv) => {\n                    if (csv) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(() => csv);\n                })\n                    .then((csv) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CSVConnector.defaultOptions = {\n            csv: '',\n            csvURL: '',\n            enablePolling: false,\n            dataRefreshRate: 1,\n            firstRowAsNames: true\n        };\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        class GoogleSheetsConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.header = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, parseOptions = merge(converter.options, options);\n                let columns = ((parseOptions.json?.values) || []).map((column) => column.slice());\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                // If beforeParse is defined, use it to modify the data\n                const { beforeParse, json } = parseOptions;\n                if (beforeParse && json) {\n                    columns = beforeParse(json.values);\n                }\n                let column;\n                converter.columns = columns;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        `${column.shift()}` :\n                        uniqueKey());\n                    for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            let cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        GoogleSheetsConverter.defaultOptions = {\n            ...DataConverter.defaultOptions\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *  - Jomar Hønsi\n         *\n         * */\n        const { merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        class GoogleSheetsConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new GoogleSheetsConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, dataRefreshRate, enablePolling, firstRowAsNames, googleAPIKey, googleSpreadsheetKey } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    url\n                });\n                if (!URL.canParse(url)) {\n                    throw new Error('Invalid URL: ' + url);\n                }\n                return fetch(url)\n                    .then((response) => (response.json()))\n                    .then((json) => {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames,\n                        json\n                    });\n                    // If already loaded, clear the current table\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GoogleSheetsConnector.defaultOptions = {\n            googleAPIKey: '',\n            googleSpreadsheetKey: '',\n            enablePolling: false,\n            dataRefreshRate: 2,\n            firstRowAsNames: true\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options = {}) {\n                const url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/`);\n                const range = options.onlyColumnNames ?\n                    'A1:Z1' : buildQueryRange(options);\n                url.pathname += range;\n                const searchParams = url.searchParams;\n                searchParams.set('alt', 'json');\n                if (!options.onlyColumnNames) {\n                    searchParams.set('dateTimeRenderOption', 'FORMATTED_STRING');\n                    searchParams.set('majorDimension', 'COLUMNS');\n                    searchParams.set('valueRenderOption', 'UNFORMATTED_VALUE');\n                }\n                searchParams.set('prettyPrint', 'false');\n                searchParams.set('key', apiKey);\n                return url.href;\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options = {}) {\n                const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            let i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        class HTMLTableConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    this.tableElement = mergedOptions.tableElement;\n                    this.tableElementID = mergedOptions.tableElement.id;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            export(connector, options = this.options) {\n                const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                let tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    const subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (const name of columnNames) {\n                            const subhead = (columns[name].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                let caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            }\n            /**\n             * Get table cell markup from row data.\n             */\n            getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n                let val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            }\n            /**\n             * Get table header markup from row data.\n             */\n            getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n                const { useMultiLevelHeaders, useRowspanHeaders } = options;\n                let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            }\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            parse(options, eventDetail) {\n                const converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns,\n                        detail: eventDetail,\n                        headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                let rowIndex = 0, item, { startRow } = parseOptions;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    const items = rows[0].children, itemsLength = items.length;\n                    for (let i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        let columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                let cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                let i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns,\n                    detail: eventDetail,\n                    headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        HTMLTableConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            useRowspanHeaders: true,\n            useMultiLevelHeaders: true\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { win } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        class HTMLTableConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new HTMLTableConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    tableElement: connector.tableElement\n                });\n                let tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    const error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HTMLTableConnector.defaultOptions = {\n            table: ''\n        };\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { error, isArray, merge, objectEach } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        class JSONConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                this.table = new DataTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this;\n                options = merge(converter.options, options);\n                const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n                let data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                        const item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(`${item.shift()}`);\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        let row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            const columnNames = converter.headers;\n                            if (columnNames && !(columnNames instanceof Array)) {\n                                const newRow = {};\n                                objectEach(columnNames, (arrayWithPath, name) => {\n                                    newRow[name] = arrayWithPath.reduce((acc, key) => acc[key], row);\n                                });\n                                row = newRow;\n                            }\n                            this.table.setRows([row], rowIndex);\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return this.table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        JSONConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            data: [],\n            orientation: 'rows'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        class JSONConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new JSONConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { data, dataUrl, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    data,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then((json) => json.json()) :\n                    data || [])\n                    .then((data) => {\n                    if (data) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ data });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector.setModifierOptions(dataModifier).then(() => data);\n                })\n                    .then((data) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        JSONConnector.defaultOptions = {\n            data: [],\n            enablePolling: false,\n            dataRefreshRate: 0,\n            firstRowAsNames: true,\n            orientation: 'rows'\n        };\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         */\n        class ChainModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            constructor(options, ...chain) {\n                super();\n                this.chain = chain;\n                this.options = merge(ChainModifier.defaultOptions, options);\n                const optionsChain = this.options.chain || [];\n                for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            add(modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            clear(eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            async modify(table, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                let modified = table;\n                for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    try {\n                        await modifiers[i].modify(modified, eventDetail);\n                    }\n                    catch (error) {\n                        this.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        throw error;\n                    }\n                    modified = modified.modified;\n                }\n                table.modified = modified;\n                return table;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            modifyTable(table, eventDetail) {\n                const chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table\n                });\n                const modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                let modified = table.modified;\n                for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table\n                });\n                return table;\n            }\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            remove(modifier, eventDetail) {\n                const modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default option for the ordered modifier chain.\n         */\n        ChainModifier.defaultOptions = {\n            type: 'Chain'\n        };\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        class InvertModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(InvertModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(`${i2}`, row);\n                    }\n                    else {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            }\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    const columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map((column) => `${column}`), columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    const columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[`${i}`] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the invert modifier.\n         */\n        InvertModifier.defaultOptions = {\n            type: 'Invert'\n        };\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         */\n        class RangeModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(RangeModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                let indexes = [];\n                const { additive, ranges, strict } = modifier.options;\n                if (ranges.length) {\n                    const modified = table.modified;\n                    let columns = table.getColumns(), rows = [];\n                    for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            modified.setOriginalRowIndexes(indexes, true);\n                            columns = modified.getColumns();\n                            rows = [];\n                            indexes = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (let j = 0, jEnd = rangeColumn.length, cell, row, originalRowIndex; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                if (additive) {\n                                    row = table.getRow(j);\n                                    originalRowIndex = table.getOriginalRowIndex(j);\n                                }\n                                else {\n                                    row = modified.getRow(j);\n                                    originalRowIndex = modified.getOriginalRowIndex(j);\n                                }\n                                if (row) {\n                                    rows.push(row);\n                                    indexes.push(originalRowIndex);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                    modified.setOriginalRowIndexes(indexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the range modifier.\n         */\n        RangeModifier.defaultOptions = {\n            type: 'Range',\n            ranges: []\n        };\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         */\n        class SortModifier extends DataModifier {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static ascending(a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            }\n            static descending(a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(SortModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            getRowReferences(table) {\n                const rows = table.getRows(), rowReferences = [];\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n                }\n                if (orderInColumn) {\n                    const column = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns({ [orderInColumn]: column });\n                }\n                else {\n                    const originalIndexes = [];\n                    const rows = [];\n                    let rowReference;\n                    for (let i = 0; i < rowCount; ++i) {\n                        rowReference = rowReferences[i];\n                        originalIndexes.push(modified.getOriginalRowIndex(rowReference.index));\n                        rows.push(rowReference.row);\n                    }\n                    modified.setRows(rows, 0);\n                    modified.setOriginalRowIndexes(originalIndexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options to group table rows.\n         */\n        SortModifier.defaultOptions = {\n            type: 'Sort',\n            direction: 'desc',\n            orderByColumn: 'y'\n        };\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'Dashboards/Accessibility/DashboardsAccessibility.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class DashboardsAccessibility {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(board) {\n                this.board = board;\n                this.addTabIndexToCells();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            addTabIndexToCells() {\n                const components = this.board.mountedComponents;\n                let cell;\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    cell = components[i].cell;\n                    if (cell && cell.container) {\n                        cell.container.setAttribute('tabindex', -1);\n                    }\n                }\n            }\n        }\n        /// namespace DashboardsAccessibility { }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DashboardsAccessibility;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        class DataCursor {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(stateMap = {}) {\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            addListener(tableId, state, listener) {\n                const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                const listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            }\n            /**\n             * @private\n             */\n            buildEmittingTag(e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            }\n            /**\n             * This function emits a state cursor related to a table. It will provide\n             * lasting state cursors of the table to listeners.\n             *\n             * @example\n             * ```ts\n             * dataCursor.emit(myTable, {\n             *     type: 'position',\n             *     column: 'city',\n             *     row: 4,\n             *     state: 'hover',\n             * });\n             * ```\n             *\n             * @param {Data.DataTable} table\n             * The related table of the cursor.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * The state cursor to emit.\n             *\n             * @param {Event} [event]\n             * Optional event information from a related source.\n             *\n             * @param {boolean} [lasting]\n             * Whether this state cursor should be kept until it is cleared with\n             * {@link DataCursor#remitCursor}.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            emitCursor(table, cursor, event, lasting) {\n                const tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ?? {});\n                    const cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    const e = {\n                        cursor,\n                        cursors,\n                        table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        const index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            }\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            remitCursor(tableId, cursor) {\n                const cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    const index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            removeListener(tableId, state, listener) {\n                const listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataCursor class.\n         * @internal\n         */\n        DataCursor.version = '1.0.0';\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    const columnNeedle = JSON.stringify(needle.columns);\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                const needleColumns = needle.columns;\n                const rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                const columns = (cursor.columns || []);\n                const positions = [];\n                const state = cursor.state;\n                for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row,\n                            state\n                        });\n                        continue;\n                    }\n                    for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row,\n                            state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                const range = {\n                    type: 'range',\n                    firstRow: (cursor.row ??\n                        (defaultRange && defaultRange.firstRow) ??\n                        0),\n                    lastRow: (cursor.row ??\n                        (defaultRange && defaultRange.lastRow) ??\n                        Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Dashboards/Serializable.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Contains the toolset to serialize class instance to JSON and deserialize JSON\n         * to class instances.\n         * @internal\n         * @private\n         */\n        var Serializable;\n        (function (Serializable) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry of serializable classes.\n             */\n            const classRegistry = {};\n            /**\n             * Registry of function sets.\n             */\n            const helperRegistry = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a class instance from the given JSON, if a suitable serializer\n             * has been found.\n             *\n             * @function Serializable.fromJSON\n             *\n             * @param {Serializable.JSON} json\n             * JSON to create a class instance or object from.\n             *\n             * @return {Globals.AnyRecord}\n             * Returns the class instance or object, or throws an exception.\n             */\n            function fromJSON(json) {\n                const $class = json.$class;\n                if (typeof $class !== 'string') {\n                    throw new Error('JSON has no $class property.');\n                }\n                const classs = classRegistry[$class];\n                if (classs) {\n                    return classs.fromJSON(json);\n                }\n                const helper = helperRegistry[$class];\n                if (helper) {\n                    return helper.fromJSON(json);\n                }\n                throw new Error(`'${$class}' unknown.`);\n            }\n            Serializable.fromJSON = fromJSON;\n            /**\n             * Registers a class prototype for the given JSON $class.\n             *\n             * @function Serializable.registerClassPrototype\n             *\n             * @param {string} $class\n             * JSON $class to register for.\n             *\n             * @param {Serializable} classPrototype\n             * Class to register.\n             */\n            function registerClassPrototype($class, classPrototype) {\n                if (classRegistry[$class]) {\n                    throw new Error('A serializer for \\'' + $class + '\\' is already registered.');\n                }\n                classRegistry[$class] = classPrototype;\n            }\n            Serializable.registerClassPrototype = registerClassPrototype;\n            /**\n             * Registers helper functions for the given JSON $class.\n             *\n             * @function Serializable.registerHelper\n             *\n             * @param {Helper} helperFunctions\n             * Helper functions to register.\n             */\n            function registerHelper(helperFunctions) {\n                if (helperRegistry[helperFunctions.$class]) {\n                    throw new Error('A serializer for \\'' + helperFunctions.$class +\n                        '\\' is already registered.');\n                }\n                helperRegistry[helperFunctions.$class] = helperFunctions;\n            }\n            Serializable.registerHelper = registerHelper;\n            /**\n             * Creates JSON from a class instance.\n             *\n             * @function Serializable.toJSON\n             *\n             * @param {Globals.AnyRecord} obj\n             * Class instance or object to serialize as JSON.\n             *\n             * @return {Serializable.JSON}\n             * JSON of the class instance.\n             */\n            function toJSON(obj) {\n                if (typeof obj.fromJSON === 'function' &&\n                    typeof obj.toJSON === 'function') {\n                    return obj.toJSON();\n                }\n                const classes = Object.keys(helperRegistry), numberOfHelpers = classes.length;\n                let $class, serializer;\n                for (let i = 0; i < numberOfHelpers; ++i) {\n                    $class = classes[i];\n                    serializer = helperRegistry[$class];\n                    if (serializer.jsonSupportFor(obj)) {\n                        return serializer.toJSON(obj);\n                    }\n                }\n                throw new Error('Object is not supported.');\n            }\n            Serializable.toJSON = toJSON;\n        })(Serializable || (Serializable = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Serializable;\n    });\n    _registerModule(_modules, 'Dashboards/SerializeHelper/DataCursorHelper.js', [_modules['Data/DataCursor.js'], _modules['Dashboards/Serializable.js']], function (DataCursor, Serializable) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts the given JSON to a class instance.\n         *\n         * @param {DataCursorHelper.JSON} json\n         * JSON to deserialize as a class instance or object.\n         *\n         * @return {DataCursor}\n         * Returns the class instance or object, or throws an exception.\n         */\n        function fromJSON(json) {\n            return new DataCursor(json.stateMap);\n        }\n        /**\n         * Validates the given class instance for JSON support.\n         *\n         * @param {Globals.AnyRecord} obj\n         * Class instance or object to validate.\n         *\n         * @return {boolean}\n         * Returns true, if the function set can convert the given object, otherwise\n         * false.\n         */\n        function jsonSupportFor(obj) {\n            return obj instanceof DataCursor;\n        }\n        /**\n         * Converts the given class instance to JSON.\n         *\n         * @param {DataTable} obj\n         * Class instance or object to serialize as JSON.\n         *\n         * @return {DataTableHelper.JSON}\n         * Returns the JSON of the class instance or object.\n         */\n        function toJSON(obj) {\n            const stateMap = obj.stateMap, stateMapJSON = {}, tableIds = Object.keys(obj.stateMap);\n            let cursors, cursorsJSON, tableId, state, states;\n            for (let i = 0, iEnd = tableIds.length; i < iEnd; ++i) {\n                tableId = tableIds[i];\n                states = Object.keys(stateMap[tableId]);\n                stateMapJSON[tableId] = {};\n                for (let j = 0, jEnd = states.length; j < jEnd; ++j) {\n                    state = states[j];\n                    cursors = stateMap[tableId][state];\n                    stateMapJSON[tableId][state] = cursorsJSON = [];\n                    for (let k = 0, kEnd = cursors.length; k < kEnd; ++k) {\n                        cursorsJSON.push({ ...cursors[k] });\n                    }\n                }\n            }\n            return {\n                $class: 'Data.DataCursor',\n                stateMap: stateMapJSON\n            };\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        const DataCursorHelper = {\n            $class: 'Data.DataCursor',\n            fromJSON,\n            jsonSupportFor,\n            toJSON\n        };\n        Serializable.registerHelper(DataCursorHelper);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursorHelper;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        class DataPool {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = DataPoolDefaults) {\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                U.fireEvent(this, e.type, e);\n            }\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            getConnector(connectorId) {\n                const connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                let waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    const connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(`Connector '${connectorId}' not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then((connector) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch']((error) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise((resolve, reject) => {\n                    waitingList.push([resolve, reject]);\n                });\n            }\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            getConnectorIds() {\n                const connectors = this.options.connectors, connectorIds = [];\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            }\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            getConnectorOptions(connectorId) {\n                const connectors = this.options.connectors;\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            }\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            getConnectorTable(connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then((connector) => connector.table);\n            }\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            isNewConnector(connectorId) {\n                return !this.connectors[connectorId];\n            }\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            loadConnector(options) {\n                return new Promise((resolve, reject) => {\n                    this.emit({\n                        type: 'load',\n                        options\n                    });\n                    const ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(`Connector type not found. (${options.type})`);\n                    }\n                    const connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then((connector) => {\n                        this.connectors[options.id] = connector;\n                        this.emit({\n                            type: 'afterLoad',\n                            options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return U.addEvent(this, type, callback);\n            }\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            setConnectorOptions(options) {\n                const connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options\n                });\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataPool class.\n         * @internal\n         */\n        DataPool.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Row.js', [_modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js']], function (Globals, Cell, GUIElement, U, EditGlobals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { pick, defined, merge, objectEach, fireEvent } = U;\n        /**\n         * @internal\n         **/\n        class Row extends GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /** @internal */\n            static fromJSON(json, layout) {\n                if (layout) {\n                    const options = json.options;\n                    let id = options.containerId || '';\n                    if (id && layout.copyId) {\n                        id = id + '_' + layout.copyId;\n                    }\n                    return new Row(layout, {\n                        id: id,\n                        parentContainerId: (layout.container && layout.container.id) ||\n                            options.parentContainerId,\n                        cellsJSON: options.cells,\n                        style: options.style\n                    });\n                }\n                return void 0;\n            }\n            static setContainerHeight(rowContainer, height) {\n                if (height) {\n                    rowContainer.style.height = height + 'px';\n                }\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Row class.\n             *\n             * @param {Layout} layout\n             * Reference to the layout instance.\n             *\n             * @param {Row.Options} options\n             * Options for the row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container of the row HTML element.\n             */\n            constructor(layout, options, rowElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.row;\n                this.layout = layout;\n                this.cells = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    layout.container;\n                const layoutOptions = (layout.options || {}), rowClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.row + ' ' +\n                            rowClassName\n                    },\n                    element: rowElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, options.style)\n                });\n                // Init rows from options.\n                if (this.options.cells) {\n                    this.setCells();\n                }\n                // Init rows from JSON.\n                if (options.cellsJSON && !this.cells.length) {\n                    this.setCellsFromJSON(options.cellsJSON);\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the row cells using cell options or cellClassName.\n             */\n            setCells() {\n                const row = this, cellClassName = (row.layout.options || {}).cellClassName || '', cellsElements = pick(row.options.cells, row.container && row.container.getElementsByClassName(cellClassName)) || [];\n                let cellElement, i, iEnd;\n                for (i = 0, iEnd = cellsElements.length; i < iEnd; ++i) {\n                    cellElement = cellsElements[i];\n                    row.addCell(row.layout.board.guiEnabled ? cellElement : { id: '' }, cellElement instanceof HTMLElement ? cellElement : void 0);\n                }\n            }\n            /** @internal */\n            setCellsFromJSON(json) {\n                const row = this, componentsToMount = [];\n                let cell, cellJSON;\n                // Set cells.\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    cellJSON = json[i];\n                    cell = Cell.fromJSON({\n                        $class: cellJSON.$class,\n                        options: {\n                            containerId: cellJSON.options.containerId,\n                            parentContainerId: cellJSON.options.parentContainerId,\n                            width: cellJSON.options.width,\n                            height: cellJSON.options.height,\n                            style: cellJSON.options.style,\n                            layoutJSON: cellJSON.options.layoutJSON,\n                            mountedComponentJSON: void 0 // Will be mounted later.\n                        }\n                    }, row);\n                    if (cell) {\n                        row.cells.push(cell);\n                        if (cellJSON.options.mountedComponentJSON) {\n                            componentsToMount.push({\n                                cell: cell,\n                                // eslint-disable-next-line\n                                mountedComponentJSON: cellJSON.options.mountedComponentJSON\n                            });\n                        }\n                    }\n                }\n                // Mount components.\n                for (let i = 0, iEnd = componentsToMount.length; i < iEnd; ++i) {\n                    componentsToMount[i].cell.mountComponentFromJSON(componentsToMount[i].mountedComponentJSON);\n                }\n            }\n            /**\n             * Add a new Cell instance to the row cells array.\n             *\n             * @param {Cell.Options} [options]\n             * Options for the row cell.\n             *\n             * @param {HTMLElement} [cellElement]\n             * The container for a new cell HTML element.\n             *\n             * @return {Cell}\n             * Returns the Cell object.\n             */\n            addCell(options, cellElement, index) {\n                const row = this, cell = new Cell(row, options, cellElement);\n                if (!defined(index)) {\n                    row.cells.push(cell);\n                }\n                else {\n                    row.mountCell(cell, index);\n                }\n                // Set editMode events.\n                if (row.layout.board.editMode) {\n                    row.layout.board.editMode.setCellEvents(cell);\n                }\n                return cell;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner cells.\n             */\n            destroy() {\n                const row = this;\n                const { layout } = row;\n                // Copy to avoid problem with index when shifting array of cells during\n                // the destroy.\n                const rowCells = [...row.cells];\n                // Destroy cells.\n                for (let i = 0, iEnd = rowCells?.length; i < iEnd; ++i) {\n                    if (rowCells[i]) {\n                        rowCells[i].destroy();\n                    }\n                }\n                if (row.layout) {\n                    row.layout.unmountRow(row);\n                    super.destroy();\n                    if (layout.rows?.length === 0) {\n                        layout.destroy();\n                    }\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Row.JSON}\n             * Class JSON of this Row instance.\n             */\n            toJSON() {\n                const row = this, layoutContainerId = (row.layout.container || {}).id || '', cells = [];\n                // Get cells JSON.\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    cells.push(row.cells[i].toJSON());\n                }\n                return {\n                    $class: 'Dashboards.Layout.Row',\n                    options: {\n                        containerId: row.container.id,\n                        parentContainerId: layoutContainerId,\n                        cells: cells,\n                        style: row.options.style\n                    }\n                };\n            }\n            /**\n             * Get the row's options.\n             * @returns\n             * The JSON of row's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const row = this, cells = [];\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    cells.push(row.cells[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    style: this.options.style,\n                    cells\n                };\n            }\n            setSize(height) {\n                Row.setContainerHeight(this.container, height);\n            }\n            // Get cell index from the row.cells array.\n            getCellIndex(cell) {\n                for (let i = 0, iEnd = this.cells?.length; i < iEnd; ++i) {\n                    if (this.cells[i].id === cell.id) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the row.cells array and move cell container.\n            mountCell(cell, index = 0) {\n                const row = this, nextCell = row.cells[index], prevCell = row.cells[index - 1];\n                if (cell.container) {\n                    if (nextCell && nextCell.container) {\n                        nextCell.container.parentNode.insertBefore(cell.container, nextCell.container);\n                    }\n                    else if (prevCell && prevCell.container) {\n                        prevCell.container.parentNode.insertBefore(cell.container, prevCell.container.nextSibling);\n                    }\n                    else if (!prevCell && !nextCell && row.container) {\n                        row.container.appendChild(cell.container);\n                    }\n                    row.cells.splice(index, 0, cell);\n                    cell.row = row;\n                    setTimeout(() => {\n                        fireEvent(row, 'cellChange', { row, cell });\n                    }, 0);\n                }\n            }\n            // Remove cell from the row.cells array.\n            unmountCell(cell) {\n                const cellIndex = this.getCellIndex(cell);\n                if (defined(cellIndex)) {\n                    this.cells.splice(cellIndex, 1);\n                }\n                setTimeout(() => {\n                    fireEvent(this, 'cellChange', { row: this, cell });\n                }, 0);\n            }\n            getVisibleCells() {\n                const cells = [];\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    if (this.cells[i].isVisible) {\n                        cells.push(this.cells[i]);\n                    }\n                }\n                return cells;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const row = this;\n                super.changeVisibility(setVisible, displayStyle);\n                // Change layout visibility if needed.\n                if (!row.layout.getVisibleRows().length) {\n                    row.layout.hide();\n                }\n                else if (row.isVisible && !row.layout.isVisible) {\n                    row.layout.show();\n                }\n            }\n            show() {\n                this.changeVisibility(true, 'flex');\n            }\n            setHighlight() {\n                const container = this.container;\n                container.classList.toggle(EditGlobals.classNames.rowContextHighlight);\n            }\n            // Row can have cells below each others.\n            // This method returns cells split into levels.\n            getRowLevels() {\n                const row = this, rowLevels = {}, rowLevelsArray = [];\n                let cell, cellOffsets;\n                for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                    cell = row.cells[k];\n                    if (cell.isVisible) {\n                        cellOffsets = GUIElement.getOffsets(cell);\n                        if (!rowLevels[cellOffsets.top]) {\n                            rowLevels[cellOffsets.top] = {\n                                top: cellOffsets.top,\n                                bottom: cellOffsets.bottom,\n                                cells: []\n                            };\n                        }\n                        if (rowLevels[cellOffsets.top].bottom < cellOffsets.bottom) {\n                            rowLevels[cellOffsets.top].bottom = cellOffsets.bottom;\n                        }\n                        rowLevels[cellOffsets.top].cells.push(cell);\n                    }\n                }\n                objectEach(rowLevels, (value) => {\n                    rowLevelsArray.push(value);\n                });\n                return rowLevelsArray;\n            }\n            // Get row level with additional info\n            // on a specific Y position.\n            getRowLevelInfo(posY) {\n                const rowLevels = this.getRowLevels();\n                let rowLevelInfo;\n                for (let i = 0, iEnd = rowLevels.length; i < iEnd; ++i) {\n                    if (rowLevels[i].top <= posY && rowLevels[i].bottom > posY) {\n                        rowLevelInfo = {\n                            index: i,\n                            rowLevels: rowLevels,\n                            rowLevel: rowLevels[i]\n                        };\n                    }\n                }\n                return rowLevelInfo;\n            }\n        }\n\n        return Row;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Layout.js', [_modules['Dashboards/Utilities.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Layout/Row.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Globals.js']], function (DU, U, Row, GUIElement, Globals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { uniqueKey } = DU;\n        const { pick, defined } = U;\n        /**\n         * @internal\n         **/\n        class Layout extends GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /** @internal */\n            static fromJSON(json, board, parentCell) {\n                const options = json.options, \n                // Check if layout container exists.\n                container = document.getElementById(json.options.containerId), layout = new Layout(board, {\n                    id: options.containerId,\n                    copyId: container ? uniqueKey() : '',\n                    parentContainerId: options.parentContainerId || board.container.id,\n                    rowsJSON: options.rows,\n                    style: options.style\n                }, parentCell);\n                // Save layout in the dashboard.\n                if (layout && !parentCell) {\n                    board.layouts.push(layout);\n                }\n                return layout;\n            }\n            /** @internal */\n            static importLocal(id, board) {\n                const layoutOptions = localStorage.getItem(Globals.classNamePrefix + id);\n                let layout;\n                if (layoutOptions) {\n                    layout = Layout.fromJSON(JSON.parse(layoutOptions), board);\n                }\n                return layout;\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Layout class.\n             *\n             * @param {Dashboard} board\n             * Reference to the dashboard instance.\n             *\n             * @param {Layout.Options} options\n             * Options for the layout.\n             */\n            constructor(board, options, parentCell) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.layout;\n                this.board = board;\n                this.rows = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = parentCell ? parentCell.container :\n                    document.getElementById(options.parentContainerId || '') || board.layoutsWrapper;\n                // Set layout level.\n                if (parentCell) {\n                    this.parentCell = parentCell;\n                    this.level = parentCell.row.layout.level + 1;\n                }\n                else {\n                    this.level = 0;\n                }\n                // GUI structure\n                if (options.copyId) {\n                    this.copyId = options.copyId;\n                }\n                const layoutOptions = (this.options || {}), layoutClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: (options.id || '') + (this.copyId ? '_' + this.copyId : ''),\n                        className: Globals.classNames.layout + ' ' +\n                            layoutClassName\n                    },\n                    elementId: options.id,\n                    style: this.options.style\n                });\n                // Init rows from options.\n                if (this.options.rows) {\n                    this.setRows();\n                }\n                // Init rows from JSON.\n                if (options.rowsJSON && !this.rows.length) {\n                    this.setRowsFromJSON(options.rowsJSON);\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the layout rows using rows options or rowClassName.\n             */\n            setRows() {\n                const layout = this, rowsElements = pick(layout.options.rows, layout.container && layout.container.getElementsByClassName(layout.options.rowClassName || '')) || [];\n                let rowElement, i, iEnd;\n                for (i = 0, iEnd = rowsElements.length; i < iEnd; ++i) {\n                    rowElement = rowsElements[i];\n                    layout.addRow(layout.board.guiEnabled ? rowElement : {}, rowElement instanceof HTMLElement ? rowElement : void 0);\n                }\n            }\n            /** @internal */\n            setRowsFromJSON(json) {\n                const layout = this;\n                let row;\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    row = Row.fromJSON(json[i], layout);\n                    if (row) {\n                        layout.rows.push(row);\n                    }\n                }\n            }\n            /**\n             * Add a new Row instance to the layout rows array.\n             *\n             * @param {Row.Options} options\n             * Options of a row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container for a new row HTML element.\n             *\n             * @return {Row}\n             * Returns the Row object.\n             */\n            addRow(options, rowElement, index) {\n                const layout = this, row = new Row(layout, options, rowElement);\n                if (!defined(index)) {\n                    layout.rows.push(row);\n                }\n                else {\n                    layout.mountRow(row, index);\n                }\n                // Set editMode events.\n                if (layout.board.editMode) {\n                    layout.board.editMode.setRowEvents(row);\n                }\n                return row;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner rows.\n             */\n            destroy() {\n                const layout = this;\n                for (let i = layout.board.layouts.length - 1; i >= 0; i--) {\n                    if (layout.board.layouts[i] === layout) {\n                        layout.board.layouts.splice(i, 1);\n                    }\n                }\n                if (layout.parentCell) {\n                    delete layout.parentCell.nestedLayout;\n                }\n                // Destroy rows.\n                for (let i = layout.rows.length - 1; i >= 0; i--) {\n                    layout.rows[i].destroy();\n                }\n                if (layout.parentCell) {\n                    layout.parentCell.destroy();\n                }\n                super.destroy();\n            }\n            /**\n             * Export layout's options and save in the local storage\n             * @internal\n             */\n            exportLocal() {\n                localStorage.setItem(Globals.classNamePrefix + this.options.id, JSON.stringify(this.toJSON()));\n            }\n            // Get row index from the layout.rows array.\n            getRowIndex(row) {\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i] === row) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the layout.rows array and move row container.\n            mountRow(row, index) {\n                const nextRow = this.rows[index], prevRow = this.rows[index - 1];\n                if (row.container) {\n                    if (nextRow && nextRow.container) {\n                        nextRow.container.parentNode.insertBefore(row.container, nextRow.container);\n                    }\n                    else if (prevRow && prevRow.container) {\n                        prevRow.container.parentNode.insertBefore(row.container, prevRow.container.nextSibling);\n                    }\n                    this.rows.splice(index, 0, row);\n                    row.layout = this;\n                }\n            }\n            // Remove row from the layout.rows array.\n            unmountRow(row) {\n                const rowIndex = this.getRowIndex(row);\n                if (defined(rowIndex)) {\n                    this.rows.splice(rowIndex, 1);\n                }\n            }\n            getVisibleRows() {\n                const rows = [];\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i].isVisible) {\n                        rows.push(this.rows[i]);\n                    }\n                }\n                return rows;\n            }\n            changeVisibility(setVisible = true) {\n                const layout = this;\n                super.changeVisibility(setVisible);\n                // Change parentCell visibility.\n                if (layout.parentCell) {\n                    if (layout.isVisible && !layout.parentCell.isVisible) {\n                        layout.parentCell.show();\n                    }\n                    else if (!layout.isVisible && layout.parentCell.isVisible) {\n                        layout.parentCell.hide();\n                    }\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Layout.JSON}\n             * Class JSON of this Layout instance.\n             */\n            toJSON() {\n                const layout = this, dashboardContainerId = (layout.board.container || {}).id || '', rows = [];\n                // Get rows JSON.\n                for (let i = 0, iEnd = layout.rows.length; i < iEnd; ++i) {\n                    rows.push(layout.rows[i].toJSON());\n                }\n                return {\n                    $class: 'Dashboards.Layout',\n                    options: {\n                        containerId: layout.container.id,\n                        parentContainerId: dashboardContainerId,\n                        rows: rows,\n                        style: layout.options.style\n                    }\n                };\n            }\n            /**\n             * Get the layout's options.\n             * @returns\n             * The JSON of layout's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const layout = this, rows = [];\n                // Get rows JSON.\n                for (let i = 0, iEnd = layout.rows.length; i < iEnd; ++i) {\n                    rows.push(layout.rows[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    layoutClassName: this.options.layoutClassName,\n                    rowClassName: this.options.rowClassName,\n                    cellClassName: this.options.cellClassName,\n                    style: this.options.style,\n                    rows\n                };\n            }\n        }\n\n        return Layout;\n    });\n    _registerModule(_modules, 'Dashboards/Board.js', [_modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Accessibility/DashboardsAccessibility.js'], _modules['Data/DataCursor.js'], _modules['Dashboards/SerializeHelper/DataCursorHelper.js'], _modules['Data/DataPool.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Dashboards/Serializable.js'], _modules['Dashboards/Components/HTMLComponent/HTMLComponent.js'], _modules['Core/Utilities.js']], function (Bindings, ComponentRegistry, DashboardsAccessibility, DataCursor, DataCursorHelper, DataPool, Globals, Layout, Serializable, HTMLComponent, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        const { merge, addEvent, error, objectEach, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that represents a dashboard.\n         *\n         * @example\n         * const dashboard = Dashboards.board('container', {\n         *      gui: {\n         *          layouts: [{\n         *              id: 'layout-1',\n         *              rows: [{\n         *                  cells: [{\n         *                      id: 'dashboard-col-0'\n         *                  }]\n         *              }]\n         *          }]\n         *      },\n         *      components: [{\n         *          cell: 'dashboard-col-0',\n         *          type: 'Highcharts',\n         *          chartOptions: {\n         *              series: [{\n         *                  data: [1, 2, 3, 4]\n         *              }]\n         *          }\n         *      }]\n         * });\n         */\n        class Board {\n            // Implementation:\n            static board(renderTo, options, async) {\n                return new Board(renderTo, options).init(async);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a dashboard with components like charts, tables, and HTML\n             * elements.\n             *\n             * @internal\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             *\n             * @param options\n             * The options for the dashboard.\n             */\n            constructor(renderTo, options) {\n                /**\n                 * All types of components available in the dashboard.\n                 * @internal\n                 */\n                this.componentTypes = ComponentRegistry.types;\n                this.options = merge(Board.defaultOptions, options);\n                this.dataPool = new DataPool(options.dataPool);\n                this.id = uniqueKey();\n                this.guiEnabled = !options.gui ?\n                    false : this.options?.gui?.enabled;\n                this.editModeEnabled = !options.editMode ?\n                    false : this.options?.editMode?.enabled;\n                this.layouts = [];\n                this.mountedComponents = [];\n                this.initContainer(renderTo);\n                this.initEditMode();\n                // Add table cursors support.\n                this.dataCursor = new DataCursor();\n                this.index = Globals.boards.length;\n                Globals.boards.push(this);\n                // A11y module\n                this.a11y = new DashboardsAccessibility(this);\n            }\n            // Implementation:\n            init(async) {\n                const options = this.options;\n                const componentPromises = (options.components) ?\n                    this.setComponents(options.components) : [];\n                // Init events.\n                this.initEvents();\n                if (async) {\n                    return Promise.all(componentPromises).then(() => this);\n                }\n                return this;\n            }\n            /**\n             * Initializes the events.\n             * @internal\n             */\n            initEvents() {\n                const board = this, runReflow = () => {\n                    board.reflow();\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(runReflow);\n                    this.resizeObserver.observe(board.container);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', runReflow);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * Initialize the container for the dashboard.\n             * @internal\n             *\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             */\n            initContainer(renderTo) {\n                const board = this;\n                if (typeof renderTo === 'string') {\n                    renderTo = window.document.getElementById(renderTo);\n                }\n                // Display an error if the renderTo doesn't exist.\n                if (!renderTo) {\n                    error(13, true);\n                }\n                board.container = renderTo;\n            }\n            /**\n             * Inits creating a layouts and setup the EditMode tools.\n             * @internal\n             *\n             */\n            initEditMode() {\n                if (Dashboards.EditMode) {\n                    this.editMode = new Dashboards.EditMode(this, this.options.editMode);\n                }\n                else if (this.editModeEnabled) {\n                    throw new Error('Missing layout.js module');\n                }\n            }\n            /**\n             * Set the components from options.\n             * @internal\n             *\n             * @param components\n             * An array of component options.\n             *\n             */\n            setComponents(components) {\n                const promises = [];\n                const board = this;\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    promises.push(Bindings.addComponent(components[i], board));\n                }\n                return promises;\n            }\n            /**\n             * Destroy the whole dashboard, its layouts and elements.\n             */\n            destroy() {\n                const board = this;\n                // Destroy layouts.\n                for (let i = 0, iEnd = board.layouts?.length; i < iEnd; ++i) {\n                    board.layouts[i].destroy();\n                }\n                // Remove resizeObserver from the board\n                this.resizeObserver?.unobserve(board.container);\n                // Destroy container.\n                board.container?.remove();\n                // @ToDo Destroy bindings.\n                // Delete all properties.\n                objectEach(board, function (val, key) {\n                    delete board[key];\n                });\n                Globals.boards[this.index] = void 0;\n                return;\n            }\n            /**\n             * Export layouts to the local storage.\n             */\n            exportLocal() {\n                localStorage.setItem(\n                // Dashboard.prefix + this.id,\n                Globals.classNamePrefix + '1', // Temporary for demo test\n                JSON.stringify(this.toJSON()));\n            }\n            /**\n             * Import the dashboard's layouts from the local storage.\n             *\n             * @param id\n             * The id of the layout to import.\n             *\n             * @returns Returns the imported layout.\n             */\n            importLayoutLocal(id) {\n                return Layout.importLocal(id, this);\n            }\n            /**\n             * Reflow the dashboard. Hide the toolbars and context pointer. Reflow the\n             * layouts and its cells.\n             */\n            reflow() {\n                const board = this;\n                if (board.editMode) {\n                    const editModeTools = board.editMode.tools;\n                    board.editMode.hideToolbars(['cell', 'row']);\n                    board.editMode.hideContextPointer();\n                    // Update expanded context menu container\n                    if (editModeTools.contextMenu) {\n                        editModeTools.contextMenu\n                            .updatePosition(editModeTools.contextButtonElement);\n                    }\n                }\n            }\n            /**\n             * Converts the given JSON to a class instance.\n             *\n             * @param json\n             * JSON to deserialize as a class instance or object.\n             *\n             * @returns Returns the class instance or object.\n             */\n            fromJSON(json) {\n                const options = json.options, board = new Board(options.containerId, {\n                    componentOptions: options.componentOptions,\n                    dataPool: options.dataPool,\n                    layoutsJSON: options.layouts\n                });\n                board.dataCursor = DataCursorHelper.fromJSON(json.dataCursor);\n                return board;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns Class JSON of this Dashboard instance.\n             */\n            toJSON() {\n                const board = this, layouts = [];\n                // Get layouts JSON.\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    layouts.push(board.layouts[i].toJSON());\n                }\n                return {\n                    $class: 'Board',\n                    dataCursor: DataCursorHelper.toJSON(board.dataCursor),\n                    options: {\n                        containerId: board.container.id,\n                        dataPool: board.options.dataPool,\n                        guiEnabled: board.guiEnabled,\n                        layouts: layouts,\n                        componentOptions: board.options.componentOptions\n                    }\n                };\n            }\n            /**\n             * Convert the current state of board's options into JSON. The function does\n             * not support converting functions or events into JSON object.\n             *\n             * @returns\n             * The JSON of boards's options.\n             */\n            getOptions() {\n                const board = this, options = {\n                    ...this.options,\n                    components: []\n                };\n                for (let i = 0, iEnd = board.mountedComponents.length; i < iEnd; ++i) {\n                    if (board.mountedComponents[i].cell &&\n                        board.mountedComponents[i].cell.mountedComponent) {\n                        options.components?.push(board.mountedComponents[i].component.getOptions());\n                    }\n                }\n                if (this.guiEnabled) {\n                    options.gui = {\n                        layouts: []\n                    };\n                    for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                        options.gui.layouts?.push(board.layouts[i].getOptions());\n                    }\n                }\n                else {\n                    delete options.gui;\n                }\n                return options;\n            }\n            /**\n             * Get a Dashboards component by its identifier.\n             *\n             * @param id\n             * The identifier of the requested component.\n             *\n             * @returns\n             * The component with the given identifier.\n             */\n            getComponentById(id) {\n                return this.mountedComponents.find((c) => c.component.id === id)?.component;\n            }\n            /**\n             * Get a Dashboards component by its cell identifier.\n             *\n             * @param id\n             * The identifier of the cell that contains the requested component.\n             *\n             * @returns\n             * The component with the given cell identifier.\n             */\n            getComponentByCellId(id) {\n                return this.mountedComponents.find((c) => c.cell.id === id)?.component;\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (Board) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Global dashboard settings.\n             */\n            Board.defaultOptions = {\n                gui: {\n                    enabled: true,\n                    layoutOptions: {\n                        rowClassName: void 0,\n                        cellClassName: void 0\n                    },\n                    layouts: []\n                },\n                components: []\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Import layouts from the local storage.\n             *\n             * @returns Returns the Dashboard instance or undefined.\n             */\n            function importLocal() {\n                const dashboardJSON = localStorage.getItem(\n                // Dashboard.prefix + this.id,\n                Globals.classNamePrefix + '1' // Temporary for demo test\n                );\n                if (dashboardJSON) {\n                    try {\n                        return Serializable\n                            .fromJSON(JSON.parse(dashboardJSON));\n                    }\n                    catch (e) {\n                        throw new Error('' + e);\n                    }\n                }\n            }\n            Board.importLocal = importLocal;\n        })(Board || (Board = {}));\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        Serializable.registerClassPrototype('Board', Board.prototype);\n        ComponentRegistry.registerComponent('HTML', HTMLComponent);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Board;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridExtremesSync.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: void 0,\n            handler: function () {\n                if (this.type !== 'DataGrid') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { board } = component;\n                const handleChangeExtremes = (e) => {\n                    const cursor = e.cursor;\n                    if (cursor.type === 'position' &&\n                        component.dataGrid &&\n                        typeof cursor?.row === 'number') {\n                        const { row } = cursor;\n                        const { viewport } = component.dataGrid;\n                        const rowIndex = viewport?.dataTable?.getLocalRowIndex(row);\n                        if (rowIndex !== void 0) {\n                            component.dataGrid.viewport?.scrollToRow(rowIndex);\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'xAxis.extremes.min' + groupKey, handleChangeExtremes);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    const { dataCursor: cursor } = board;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'xAxis.extremes.min' + groupKey, handleChangeExtremes);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridHighlightSync.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {\n            autoScroll: false\n        };\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'DataGrid') {\n                    return;\n                }\n                const component = this;\n                const { dataGrid, board } = component;\n                const highlightOptions = this.sync.syncConfig.highlight;\n                const groupKey = highlightOptions.group ?\n                    ':' + highlightOptions.group : '';\n                if (!board || !dataGrid || !highlightOptions?.enabled) {\n                    return;\n                }\n                const { dataCursor: cursor } = board;\n                const onCellHover = (e) => {\n                    const table = this.getFirstConnector()?.table;\n                    if (table) {\n                        const cell = e.target;\n                        cursor.emitCursor(table, {\n                            type: 'position',\n                            row: cell.row.id,\n                            column: cell.column.id,\n                            state: 'dataGrid.hoverRow' + groupKey\n                        });\n                    }\n                };\n                const onCellMouseOut = () => {\n                    const table = this.getFirstConnector()?.table;\n                    if (table) {\n                        cursor.emitCursor(table, {\n                            type: 'position',\n                            state: 'dataGrid.hoverOut' + groupKey\n                        });\n                    }\n                };\n                addEvent(dataGrid, 'cellMouseOver', onCellHover);\n                addEvent(dataGrid, 'cellMouseOut', onCellMouseOut);\n                // Return a function that calls the callbacks\n                return function () {\n                    removeEvent(dataGrid.container, 'cellMouseOver', onCellHover);\n                    removeEvent(dataGrid.container, 'cellMouseOut', onCellMouseOut);\n                };\n            },\n            handler: function () {\n                if (this.type !== 'DataGrid') {\n                    return;\n                }\n                const component = this;\n                const { board } = component;\n                const highlightOptions = component.sync.syncConfig.highlight;\n                const groupKey = highlightOptions.group ?\n                    ':' + highlightOptions.group : '';\n                if (!highlightOptions?.enabled) {\n                    return;\n                }\n                const handleCursor = (e) => {\n                    const cursor = e.cursor;\n                    if (cursor.type !== 'position') {\n                        return;\n                    }\n                    const { row, column } = cursor;\n                    const { dataGrid } = component;\n                    const viewport = dataGrid?.viewport;\n                    if (row === void 0 || !viewport) {\n                        return;\n                    }\n                    const rowIndex = viewport.dataTable.getLocalRowIndex(row);\n                    if (rowIndex === void 0) {\n                        return;\n                    }\n                    if (highlightOptions.autoScroll) {\n                        viewport.scrollToRow(rowIndex);\n                    }\n                    dataGrid.hoverRow(rowIndex);\n                    dataGrid.hoverColumn(column);\n                };\n                const handleCursorOut = () => {\n                    const { dataGrid } = component;\n                    if (dataGrid) {\n                        dataGrid.hoverColumn();\n                        dataGrid.hoverRow();\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                    cursor.addListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                };\n                const unregisterCursorListeners = () => {\n                    const cursor = board.dataCursor;\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                    cursor.removeListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridVisibilitySync.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: void 0,\n            handler: function () {\n                if (this.type !== 'DataGrid') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.visibility;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { board } = component;\n                const handleVisibilityChange = (e) => {\n                    const cursor = e.cursor, dataGrid = component.dataGrid;\n                    if (!(dataGrid && cursor.type === 'position' && cursor.column)) {\n                        return;\n                    }\n                    void dataGrid.updateColumn(cursor.column, {\n                        enabled: cursor.state !== 'series.hide' + groupKey\n                    });\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'series.show' + groupKey, handleVisibilityChange);\n                    cursor.addListener(table.id, 'series.hide' + groupKey, handleVisibilityChange);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    const { dataCursor: cursor } = board;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'series.show' + groupKey, handleVisibilityChange);\n                    cursor.removeListener(table.id, 'series.hide' + groupKey, handleVisibilityChange);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridSyncs.js', [_modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridExtremesSync.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridHighlightSync.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridVisibilitySync.js']], function (DataGridExtremesSync, DataGridHighlightSync, DataGridVisibilitySync) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Namespace\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                extremes: DataGridExtremesSync.syncPair,\n                highlight: DataGridHighlightSync.syncPair,\n                visibility: DataGridVisibilitySync.syncPair\n            },\n            defaultSyncOptions: {\n                extremes: DataGridExtremesSync.defaultOptions,\n                highlight: DataGridHighlightSync.defaultOptions,\n                visibility: DataGridVisibilitySync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridComponentDefaults.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { uniqueKey } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const DataGridComponentDefaults = {\n            dataGridClassName: 'dataGrid-container',\n            dataGridID: 'dataGrid-' + uniqueKey(),\n            dataGridOptions: {},\n            editableOptions: [\n                {\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                }, {\n                    name: 'title',\n                    propertyPath: ['title'],\n                    type: 'input'\n                }, {\n                    name: 'caption',\n                    propertyPath: ['caption'],\n                    type: 'input'\n                }, {\n                    name: 'DataGrid options',\n                    type: 'nested',\n                    nestedOptions: [{\n                            name: 'General',\n                            options: [\n                                {\n                                    name: 'Caption/title',\n                                    propertyPath: ['dataGridOptions', 'caption', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'Columns distribution',\n                                    propertyPath: [\n                                        'dataGridOptions',\n                                        'rendering',\n                                        'columns',\n                                        'distribution'\n                                    ],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'full'\n                                        }, {\n                                            name: 'fixed'\n                                        }]\n                                }, {\n                                    name: 'Editable DataGrid',\n                                    propertyPath: [\n                                        'dataGridOptions',\n                                        'columnDefaults',\n                                        'cells',\n                                        'editable'\n                                    ],\n                                    type: 'toggle'\n                                }, {\n                                    name: 'Resizable columns',\n                                    propertyPath: [\n                                        'dataGridOptions',\n                                        'columnDefaults',\n                                        'resizing'\n                                    ],\n                                    type: 'toggle'\n                                }, {\n                                    name: 'Sortable columns',\n                                    propertyPath: [\n                                        'dataGridOptions',\n                                        'columnDefaults',\n                                        'sorting',\n                                        'sortable'\n                                    ],\n                                    type: 'toggle'\n                                }, {\n                                    name: 'Cell text truncation',\n                                    propertyPath: [\n                                        'dataGridOptions',\n                                        'rendering',\n                                        'rows',\n                                        'strictHeights'\n                                    ],\n                                    type: 'toggle'\n                                }\n                            ]\n                        }]\n                }, {\n                    name: 'DataGrid class name',\n                    propertyPath: ['dataGridClassName'],\n                    type: 'input'\n                }, {\n                    name: 'DataGrid ID',\n                    propertyPath: ['dataGridID'],\n                    type: 'input'\n                }\n            ],\n            onUpdate: (e, connector) => {\n                const inputElement = e.target;\n                if (inputElement) {\n                    const parentRow = inputElement\n                        .closest('.highcharts-datagrid-row');\n                    const cell = inputElement.closest('.highcharts-datagrid-cell');\n                    if (parentRow &&\n                        parentRow instanceof HTMLElement &&\n                        cell &&\n                        cell instanceof HTMLElement) {\n                        const dataTableRowIndex = parentRow.dataset.rowIndex;\n                        const { columnName } = cell.dataset;\n                        if (dataTableRowIndex !== void 0 &&\n                            columnName !== void 0) {\n                            const table = connector.table;\n                            if (table) {\n                                const converter = new DataConverter();\n                                let valueToSet = converter\n                                    .asGuessedType(inputElement.value);\n                                if (valueToSet instanceof Date) {\n                                    valueToSet = valueToSet.toString();\n                                }\n                                table.setCell(columnName, Number(dataTableRowIndex), valueToSet);\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridSyncs.js'], _modules['Dashboards/Components/DataGridComponent/DataGridComponentDefaults.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Utilities.js']], function (Component, DataGridSyncs, DataGridComponentDefaults, U, DU) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge, diffObjects } = U;\n        const { deepClone } = DU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * DataGrid component for Highcharts Dashboards.\n         * @private\n         */\n        class DataGridComponent extends Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Function to create a DataGrid component from JSON.\n             *\n             * @param json\n             * The JSON to create the DataGrid component from.\n             *\n             * @param cell\n             * The cell to create the DataGrid component in.\n             *\n             * @returns\n             * The DataGrid component created from the JSON.\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const dataGridOptions = JSON.parse(json.options.dataGridOptions || '');\n                const component = new DataGridComponent(cell, merge(options, { dataGridOptions }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options, board) {\n                options = merge(DataGridComponent.defaultOptions, options);\n                super(cell, options, board);\n                this.options = options;\n                this.type = 'DataGrid';\n                this.setOptions();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            async update(options) {\n                await super.update(options);\n                this.setOptions();\n                if (this.dataGrid) {\n                    this.dataGrid.update(this.options.dataGridOptions ?? {}, false);\n                    if (this.dataGrid?.viewport?.dataTable?.id !==\n                        this.getFirstConnector()?.table?.id) {\n                        this.dataGrid.update({\n                            dataTable: this.getFirstConnector()?.table?.modified\n                        }, false);\n                    }\n                    this.dataGrid.renderViewport();\n                }\n                this.emit({ type: 'afterUpdate' });\n            }\n            render() {\n                super.render();\n                if (!this.dataGrid) {\n                    this.dataGrid = this.constructDataGrid();\n                }\n                else {\n                    this.dataGrid.renderViewport();\n                }\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            resize(width, height) {\n                if (height) {\n                    this.contentElement.style.minHeight = '0';\n                }\n                else if (height === null) {\n                    this.contentElement.style.removeProperty('min-height');\n                }\n                this.resizeDynamicContent(width, height);\n                this.dataGrid?.viewport?.reflow();\n            }\n            onTableChanged() {\n                this.dataGrid?.update({\n                    dataTable: this.getFirstConnector()?.table?.modified\n                });\n            }\n            getEditableOptions() {\n                const componentOptions = this.options;\n                const dataGridOptions = this.dataGrid?.options;\n                return deepClone(merge({\n                    dataGridOptions: dataGridOptions\n                }, componentOptions), ['editableOptions', 'dataTable']);\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'DataGrid'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Get the DataGrid component's options.\n             *\n             * @returns\n             * The JSON of DataGrid component's options.\n             *\n             * @internal\n             */\n            getOptions() {\n                // Remove the table from the options copy if the connector is set.\n                const optionsCopy = merge(this.options);\n                if (optionsCopy.connector?.id) {\n                    delete optionsCopy.dataGridOptions?.dataTable;\n                }\n                else if (optionsCopy.dataGridOptions?.dataTable?.id) {\n                    optionsCopy.dataGridOptions.dataTable = {\n                        columns: optionsCopy.dataGridOptions.dataTable.columns\n                    };\n                }\n                return {\n                    ...diffObjects(optionsCopy, DataGridComponent.defaultOptions),\n                    type: 'DataGrid'\n                };\n            }\n            /**\n             * Destroys the data grid component.\n             */\n            destroy() {\n                this.sync.stop();\n                this.dataGrid?.destroy();\n                super.destroy();\n            }\n            /**\n             * Sets the options for the data grid component content container.\n             */\n            setOptions() {\n                if (this.options.dataGridClassName) {\n                    this.contentElement.classList.value =\n                        DataGridComponentDefaults.className + ' ' +\n                            this.options.dataGridClassName;\n                }\n                if (this.options.dataGridID) {\n                    this.contentElement.id = this.options.dataGridID;\n                }\n            }\n            /**\n             * Function to create the DataGrid.\n             *\n             * @returns The DataGrid.\n             */\n            constructDataGrid() {\n                const DGN = DataGridComponent.DataGridNamespace;\n                if (!DGN) {\n                    throw new Error('DataGrid not connected.');\n                }\n                const dataTable = this.getFirstConnector()?.table;\n                const dataGridOptions = this.options.dataGridOptions ?? {};\n                if (dataTable) {\n                    dataGridOptions.dataTable = dataTable.modified;\n                }\n                const dataGridInstance = new DGN.DataGrid(this.contentElement, dataGridOptions);\n                this.options.dataGridOptions = dataGridInstance.options;\n                return dataGridInstance;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Predefined sync config for the DataGrid component.\n         */\n        DataGridComponent.predefinedSyncConfig = DataGridSyncs;\n        /**\n         * The default options for the DataGrid component.\n         */\n        DataGridComponent.defaultOptions = merge(Component.defaultOptions, DataGridComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/DataGridPlugin.js', [_modules['Dashboards/Components/DataGridComponent/DataGridComponent.js']], function (DataGridComponent) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects DataGrid with the Dashboard plugin.\n         *\n         * @param {Dashboards.DataGrid} dataGrid DataGrid core to connect.\n         */\n        function connectDataGrid(DataGridNS) {\n            DataGridComponent.DataGridNamespace = DataGridNS;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('DataGrid', DataGridComponent);\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e Plugin context provided by the Dashboard.\n         */\n        function onUnregister(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        e) { }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGridCustom = {\n            connectDataGrid\n        };\n        const DataGridPlugin = {\n            custom: DataGridCustom,\n            name: 'DataGrid.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return DataGridPlugin;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsExtremesSync.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, isString } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const cleanupCallbacks = [];\n                const { chart, board } = component;\n                const connector = component.connectorHandlers?.[0]?.connector;\n                const table = connector && connector.table;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { dataCursor: cursor } = board;\n                if (table && chart) {\n                    const extremesEventHandler = (e) => {\n                        const reset = !!e.resetSelection;\n                        if ((!e.trigger || (e.trigger && e.trigger !== 'dashboards-sync')) && !reset) {\n                            // TODO: investigate this type?\n                            const axis = e.target;\n                            const seriesFromConnectorArray = Object.keys(component.seriesFromConnector);\n                            // Prefer a series that's in a related table,\n                            // but allow for other data\n                            const series = seriesFromConnectorArray.length > 0 ?\n                                chart.get(seriesFromConnectorArray[0]) :\n                                axis.series[0];\n                            if (series) {\n                                // Get the indexes of the first and last drawn points\n                                const visiblePoints = series.points.filter((point) => point.isInside || false);\n                                const minCursorData = {\n                                    type: 'position',\n                                    state: `${axis.coll}.extremes.min${groupKey}`\n                                };\n                                const maxCursorData = {\n                                    type: 'position',\n                                    state: `${axis.coll}.extremes.max${groupKey}`\n                                };\n                                if (seriesFromConnectorArray.length > 0 &&\n                                    axis.coll === 'xAxis' &&\n                                    visiblePoints.length) {\n                                    let columnName;\n                                    const columnAssignment = (component.connectorHandlers[0]\n                                        ?.options).columnAssignment;\n                                    if (columnAssignment) {\n                                        const assignment = columnAssignment.find((assignment) => (assignment.seriesId ===\n                                            series.options.id));\n                                        if (assignment) {\n                                            const data = assignment.data;\n                                            if (isString(data)) {\n                                                columnName = data;\n                                            }\n                                            else if (Array.isArray(data)) {\n                                                columnName = data[data.length - 1];\n                                            }\n                                            else {\n                                                columnName = data.y;\n                                            }\n                                        }\n                                    }\n                                    if (!columnName) {\n                                        columnName = axis.dateTime && (table.hasColumns(['x']) ? 'x' :\n                                            series.options.id ?? series.name);\n                                    }\n                                    minCursorData.row = visiblePoints[0].index;\n                                    minCursorData.column = columnName;\n                                    maxCursorData.row =\n                                        visiblePoints[visiblePoints.length - 1].index;\n                                    maxCursorData.column = columnName;\n                                }\n                                // Emit as lasting cursors\n                                cursor.emitCursor(table, minCursorData, e, true).emitCursor(table, maxCursorData, e, true);\n                            }\n                        }\n                    };\n                    const addExtremesEvent = () => chart.axes.map((axis) => addEvent(axis, 'afterSetExtremes', extremesEventHandler));\n                    let addExtremesEventCallbacks = addExtremesEvent();\n                    const resetExtremesEvent = () => {\n                        addExtremesEventCallbacks.forEach((callback) => {\n                            callback();\n                        });\n                        addExtremesEventCallbacks = [];\n                    };\n                    const handleChartResetSelection = (e) => {\n                        if (e.resetSelection) {\n                            resetExtremesEvent();\n                            cursor.emitCursor(table, {\n                                type: 'position',\n                                state: 'chart.zoomOut' + groupKey\n                            }, e);\n                            addExtremesEventCallbacks.push(...addExtremesEvent());\n                        }\n                    };\n                    cleanupCallbacks.push(addEvent(chart, 'selection', handleChartResetSelection));\n                    cleanupCallbacks.push(() => {\n                        cursor.remitCursor(table.id, {\n                            type: 'position',\n                            state: 'xAxis.extremes.min' + groupKey\n                        });\n                        cursor.remitCursor(table.id, {\n                            type: 'position',\n                            state: 'xAxis.extremes.max' + groupKey\n                        });\n                        resetExtremesEvent();\n                    });\n                }\n                // Return cleanup\n                return function () {\n                    // Call back the cleanup callbacks\n                    cleanupCallbacks.forEach((callback) => {\n                        callback();\n                    });\n                };\n            },\n            handler: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { chart, board } = component;\n                if (chart && board && chart.zooming?.type) {\n                    const dimensions = chart.zooming.type.split('')\n                        .map((c) => c + 'Axis');\n                    const unregisterCallbacks = [];\n                    dimensions.forEach((dimension) => {\n                        const handleUpdateExtremes = (e) => {\n                            const { cursor, event } = e;\n                            if (cursor.type === 'position') {\n                                const eventTarget = event?.target;\n                                if (eventTarget && chart) {\n                                    const axes = chart[dimension];\n                                    let didZoom = false;\n                                    axes.forEach((axis) => {\n                                        if (eventTarget.coll === axis.coll &&\n                                            eventTarget !== axis &&\n                                            eventTarget.min !== null &&\n                                            eventTarget.max !== null && (axis.max !== eventTarget.max ||\n                                            axis.min !== eventTarget.min)) {\n                                            axis.setExtremes(eventTarget.min, eventTarget.max, false, void 0, {\n                                                trigger: 'dashboards-sync'\n                                            });\n                                            didZoom = true;\n                                        }\n                                    });\n                                    if (didZoom && !chart.resetZoomButton) {\n                                        chart.showResetZoom();\n                                    }\n                                    chart.redraw();\n                                }\n                            }\n                        };\n                        const addCursorListeners = () => {\n                            const { dataCursor: cursor } = board;\n                            const connector = component.connectorHandlers?.[0]?.connector;\n                            if (connector) {\n                                const { table } = connector;\n                                cursor.addListener(table.id, `${dimension}.extremes.min${groupKey}`, handleUpdateExtremes);\n                                cursor.addListener(table.id, `${dimension}.extremes.max${groupKey}`, handleUpdateExtremes);\n                                const handleChartZoomOut = () => {\n                                    chart.zoomOut();\n                                    setTimeout(() => {\n                                        // Workaround for zoom button not being removed\n                                        const resetZoomButtons = component.element\n                                            .querySelectorAll('.highcharts-reset-zoom');\n                                        resetZoomButtons.forEach((button) => {\n                                            button.remove();\n                                        });\n                                    });\n                                };\n                                cursor.addListener(table.id, 'chart.zoomOut', handleChartZoomOut);\n                                unregisterCallbacks.push(() => {\n                                    cursor.removeListener(table.id, `${dimension}.extremes.min${groupKey}`, handleUpdateExtremes);\n                                    cursor.removeListener(table.id, `${dimension}.extremes.max${groupKey}`, handleUpdateExtremes);\n                                    cursor.removeListener(table.id, 'chart.zoomOut' + groupKey, handleChartZoomOut);\n                                });\n                            }\n                        };\n                        if (board) {\n                            addCursorListeners();\n                        }\n                    });\n                    return function () {\n                        unregisterCallbacks.forEach((callback) => {\n                            callback();\n                        });\n                    };\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsHighlightSync.js', [_modules['Dashboards/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { error } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {\n            affectedSeriesId: null,\n            highlightPoint: true,\n            showTooltip: true,\n            showCrosshair: true\n        };\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const { chart, board } = component;\n                const highlightOptions = this.sync.syncConfig.highlight;\n                const groupKey = highlightOptions.group ?\n                    ':' + highlightOptions.group : '';\n                if (!highlightOptions.enabled || !chart) {\n                    return;\n                }\n                const { dataCursor: cursor } = board;\n                for (let i = 0, iEnd = chart.series?.length ?? 0; i < iEnd; ++i) {\n                    const series = chart.series[i];\n                    const seriesId = series.options.id ?? '';\n                    const connectorHandler = component.seriesFromConnector[seriesId];\n                    const table = connectorHandler?.connector?.table;\n                    let columnName;\n                    if (!table) {\n                        continue;\n                    }\n                    const presTable = table?.modified;\n                    const colAssignment = connectorHandler.columnAssignment?.find((s) => s.seriesId === seriesId);\n                    // TODO: Better way to recognize the column name.\n                    if (colAssignment) {\n                        const { data } = colAssignment;\n                        if (typeof data === 'string') {\n                            columnName = data;\n                        }\n                        else if (Array.isArray(data)) {\n                            columnName = data[1];\n                        }\n                        else {\n                            columnName = data.y ?? data.value;\n                        }\n                    }\n                    if (!columnName) {\n                        columnName = series.name;\n                    }\n                    series.update({\n                        point: {\n                            events: {\n                                // Emit table cursor\n                                mouseOver: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        row: presTable.getOriginalRowIndex(this.index),\n                                        column: columnName,\n                                        state: 'point.mouseOver' + groupKey\n                                    });\n                                },\n                                mouseOut: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        row: presTable.getOriginalRowIndex(this.index),\n                                        column: columnName,\n                                        state: 'point.mouseOut' + groupKey\n                                    });\n                                }\n                            }\n                        }\n                    }, false);\n                }\n                chart.redraw();\n                // Return function that handles cleanup\n                return function () {\n                    if (chart && chart.series) {\n                        chart.series.forEach((series) => {\n                            series.update({\n                                point: {\n                                    events: {\n                                        mouseOver: void 0,\n                                        mouseOut: void 0\n                                    }\n                                }\n                            }, false);\n                        });\n                        chart.redraw();\n                    }\n                };\n            },\n            handler: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const groupKey = this.sync.syncConfig.highlight.group ?\n                    ':' + this.sync.syncConfig.highlight.group : '';\n                const { chart, board } = component;\n                const getHoveredPoint = (e) => {\n                    const { table, cursor } = e;\n                    const highlightOptions = this.sync\n                        .syncConfig.highlight;\n                    if (chart && chart.series?.length && cursor.type === 'position') {\n                        let series;\n                        const seriesId = highlightOptions.affectedSeriesId;\n                        if (highlightOptions.affectedSeriesId) {\n                            const foundSeries = chart.get(highlightOptions.affectedSeriesId);\n                            if (foundSeries?.points) {\n                                series = foundSeries;\n                            }\n                            else {\n                                error('No series with ID \\'' + seriesId + '\\' found in ' +\n                                    'the chart. Affected series will be selected ' +\n                                    'according to the column assignment.');\n                            }\n                        }\n                        if (!series) {\n                            const seriesIds = Object.keys(component.seriesFromConnector);\n                            for (let i = 0, iEnd = seriesIds.length; i < iEnd; ++i) {\n                                const seriesId = seriesIds[i];\n                                const connectorHandler = component.seriesFromConnector[seriesId];\n                                if (connectorHandler?.connector?.table !== table) {\n                                    continue;\n                                }\n                                const colAssignment = connectorHandler.columnAssignment;\n                                series = chart.get(seriesId);\n                                if (!colAssignment) {\n                                    break;\n                                }\n                                const { data } = colAssignment.find((s) => s.seriesId === seriesId) ?? {};\n                                if (!data || !cursor.column) {\n                                    break;\n                                }\n                                if (typeof data === 'string') {\n                                    if (data === cursor.column) {\n                                        break;\n                                    }\n                                }\n                                else if (Array.isArray(data)) {\n                                    if (data.includes(cursor.column)) {\n                                        break;\n                                    }\n                                }\n                                else {\n                                    if (Object.keys(data)\n                                        .map((key) => data[key])\n                                        .includes(cursor.column)) {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        const row = cursor.row;\n                        if (series?.visible && row !== void 0) {\n                            const rowIndex = table.modified.getLocalRowIndex(row);\n                            if (rowIndex === void 0) {\n                                return;\n                            }\n                            const point = series.data[rowIndex];\n                            if (point?.visible) {\n                                return point;\n                            }\n                        }\n                    }\n                };\n                const handleCursor = (e) => {\n                    const highlightOptions = this.sync\n                        .syncConfig.highlight;\n                    if (!highlightOptions.enabled) {\n                        return;\n                    }\n                    const point = getHoveredPoint(e);\n                    if (!point || !chart ||\n                        // Non-cartesian points do not use 'isInside'\n                        (!point.isInside && point.series.isCartesian) ||\n                        // Abort if the affected chart is the same as the one\n                        // that is currently affected manually.\n                        point === chart.hoverPoint) {\n                        return;\n                    }\n                    const tooltip = chart.tooltip;\n                    if (tooltip && highlightOptions.showTooltip) {\n                        const useSharedTooltip = tooltip.shared;\n                        const hoverPoint = chart.hoverPoint;\n                        const hoverSeries = hoverPoint?.series ||\n                            chart.hoverSeries;\n                        const points = chart.pointer?.getHoverData(point, hoverSeries, chart.series, true, true);\n                        if (chart.tooltip && points?.hoverPoints.length) {\n                            tooltip.refresh(useSharedTooltip ? points.hoverPoints : point);\n                        }\n                    }\n                    if (highlightOptions.highlightPoint && (\n                    // If the tooltip is shared, the hover state is\n                    // already set on the point.\n                    (!tooltip?.shared && highlightOptions.showTooltip) ||\n                        !highlightOptions.showTooltip)) {\n                        point.setState('hover');\n                    }\n                    if (highlightOptions.showCrosshair) {\n                        point.series.xAxis?.drawCrosshair(void 0, point);\n                        point.series.yAxis?.drawCrosshair(void 0, point);\n                    }\n                };\n                const handleCursorOut = (e) => {\n                    const highlightOptions = this.sync\n                        .syncConfig.highlight;\n                    if (!chart || !chart.series.length ||\n                        !highlightOptions.enabled) {\n                        return;\n                    }\n                    const point = getHoveredPoint(e);\n                    // Abort if the affected chart is the same as the one\n                    // that is currently affected manually.\n                    if (point && (!point.isInside && point.series.isCartesian ||\n                        point === chart.hoverPoint)) {\n                        return;\n                    }\n                    let unhovered = false;\n                    const unhoverAllPoints = () => {\n                        // If the 'row' parameter is missing in the event\n                        // object, the unhovered point cannot be identified.\n                        const series = chart.series;\n                        const seriesLength = series.length;\n                        for (let i = 0; i < seriesLength; i++) {\n                            const points = chart.series[i].points;\n                            const pointsLength = points.length;\n                            for (let j = 0; j < pointsLength; j++) {\n                                points[j].setState();\n                            }\n                        }\n                    };\n                    const tooltip = chart.tooltip;\n                    if (tooltip && highlightOptions.showTooltip) {\n                        tooltip.hide();\n                        // Shared tooltip refresh always hovers points, so it's\n                        // important to unhover all points on cursor out.\n                        if (tooltip.shared) {\n                            unhoverAllPoints();\n                            unhovered = true;\n                        }\n                    }\n                    if (highlightOptions.highlightPoint && !unhovered) {\n                        if (point) {\n                            point.setState();\n                        }\n                        else {\n                            unhoverAllPoints();\n                        }\n                    }\n                    if (highlightOptions.showCrosshair) {\n                        if (point) {\n                            point.series.xAxis?.drawCrosshair();\n                            point.series.yAxis?.drawCrosshair();\n                        }\n                        else {\n                            // If the 'row' parameter is missing in the event\n                            // object, the unhovered point cannot be identified.\n                            const xAxes = chart.xAxis;\n                            const yAxes = chart.yAxis;\n                            for (let i = 0, l = xAxes.length; i < l; i++) {\n                                xAxes[i].drawCrosshair();\n                            }\n                            for (let i = 0, l = yAxes.length; i < l; i++) {\n                                yAxes[i].drawCrosshair();\n                            }\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    const { connectorHandlers } = this;\n                    if (!cursor) {\n                        return;\n                    }\n                    for (let i = 0, iEnd = connectorHandlers.length; i < iEnd; ++i) {\n                        const table = connectorHandlers[i]?.connector?.table;\n                        if (!table) {\n                            continue;\n                        }\n                        cursor.addListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                        cursor.addListener(table.id, 'dataGrid.hoverRow' + groupKey, handleCursor);\n                        cursor.addListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                        cursor.addListener(table.id, 'dataGrid.hoverOut' + groupKey, handleCursorOut);\n                    }\n                };\n                const unregisterCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    const { connectorHandlers } = this;\n                    if (!cursor) {\n                        return;\n                    }\n                    for (let i = 0, iEnd = connectorHandlers.length; i < iEnd; ++i) {\n                        const table = connectorHandlers[i]?.connector?.table;\n                        if (!table) {\n                            continue;\n                        }\n                        cursor.removeListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                        cursor.removeListener(table.id, 'dataGrid.hoverRow' + groupKey, handleCursor);\n                        cursor.removeListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                        cursor.removeListener(table.id, 'dataGrid.hoverOut' + groupKey, handleCursorOut);\n                    }\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsVisibilitySync.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.visibility;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const { chart, board } = component;\n                const connector = this.getFirstConnector();\n                if (!board || !chart) {\n                    return;\n                }\n                const table = connector?.table;\n                if (table) { // Has a connector\n                    const { dataCursor: cursor } = board;\n                    const { series } = chart;\n                    series.forEach((series) => {\n                        series.update({\n                            events: {\n                                show: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        state: 'series.show' + groupKey,\n                                        column: this.name\n                                    });\n                                },\n                                hide: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        state: 'series.hide' + groupKey,\n                                        column: this.name\n                                    });\n                                }\n                            }\n                        }, false);\n                    });\n                    chart.redraw();\n                }\n                return function () {\n                    if (!chart || !chart.series?.length) {\n                        return;\n                    }\n                    chart.series.forEach((series) => {\n                        series.update({\n                            events: {\n                                show: void 0,\n                                hide: void 0\n                            }\n                        }, false);\n                    });\n                    chart.redraw();\n                };\n            },\n            handler: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.visibility;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const { board } = component;\n                const findSeries = (seriesArray, name) => {\n                    for (const series of seriesArray) {\n                        if (series.name === name) {\n                            return series;\n                        }\n                    }\n                };\n                const handleShow = (e) => {\n                    const chart = component.chart;\n                    if (!chart || !chart.series?.length) {\n                        return;\n                    }\n                    if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                        const series = findSeries(chart.series, e.cursor.column);\n                        if (series) {\n                            series.setVisible(true, true);\n                        }\n                    }\n                };\n                const handleHide = (e) => {\n                    const chart = component.chart;\n                    if (!chart || !chart.series?.length) {\n                        return;\n                    }\n                    if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                        const series = findSeries(chart.series, e.cursor.column);\n                        if (series) {\n                            series.setVisible(false, true);\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor } = board;\n                    if (!dataCursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    dataCursor.addListener(table.id, 'series.show' + groupKey, handleShow);\n                    dataCursor.addListener(table.id, 'series.hide' + groupKey, handleHide);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (table) {\n                        board.dataCursor.removeListener(table.id, 'series.show' + groupKey, handleShow);\n                        board.dataCursor.removeListener(table.id, 'series.hide' + groupKey, handleHide);\n                    }\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsSyncs.js', [_modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsExtremesSync.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsHighlightSync.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsVisibilitySync.js']], function (HighchartsExtremesSync, HighchartsHighlightSync, HighchartsVisibilitySync) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                extremes: HighchartsExtremesSync.syncPair,\n                highlight: HighchartsHighlightSync.syncPair,\n                visibility: HighchartsVisibilitySync.syncPair\n            },\n            defaultSyncOptions: {\n                extremes: HighchartsExtremesSync.defaultOptions,\n                highlight: HighchartsHighlightSync.defaultOptions,\n                visibility: HighchartsVisibilitySync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsComponentDefaults.js', [_modules['Dashboards/Components/Component.js'], _modules['Core/Utilities.js']], function (Component, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const HighchartsComponentDefaults = {\n            allowConnectorUpdate: true,\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-highcharts`\n            ].join(' '),\n            chartClassName: 'chart-container',\n            chartID: 'chart-' + uniqueKey(),\n            chartOptions: {\n                series: []\n            },\n            chartConstructor: 'chart',\n            editableOptions: [\n                {\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                },\n                ...Component.defaultOptions.editableOptions || [],\n                {\n                    name: 'chartOptions',\n                    type: 'nested',\n                    nestedOptions: [{\n                            name: 'chart',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'subtitle',\n                                    propertyPath: ['chartOptions', 'subtitle', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'chart', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'column',\n                                            iconURL: 'series-types/icon-column.svg'\n                                        }, {\n                                            name: 'line',\n                                            iconURL: 'series-types/icon-line.svg'\n                                        }, {\n                                            name: 'scatter',\n                                            iconURL: 'series-types/icon-scatter.svg'\n                                        }, {\n                                            name: 'pie',\n                                            iconURL: 'series-types/icon-pie.svg'\n                                        }]\n                                }]\n                        }, {\n                            name: 'xAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'xAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'xAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'yAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'yAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'yAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'legend',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'legend', 'enabled'],\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: ['chartOptions', 'legend', 'align'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'tooltip',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'tooltip', 'enabled'],\n                            options: [{\n                                    name: 'split',\n                                    propertyPath: ['chartOptions', 'tooltip', 'split'],\n                                    type: 'toggle'\n                                }]\n                        }, {\n                            name: 'dataLabels',\n                            propertyPath: [\n                                'chartOptions',\n                                'plotOptions',\n                                'series',\n                                'dataLabels',\n                                'enabled'\n                            ],\n                            showToggle: true,\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'plotOptions',\n                                        'series',\n                                        'dataLabels',\n                                        'align'\n                                    ],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'credits',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'credits', 'enabled'],\n                            options: [{\n                                    name: 'name',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'text'\n                                    ],\n                                    type: 'input'\n                                }, {\n                                    name: 'url',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'href'\n                                    ],\n                                    type: 'input'\n                                }]\n                        }]\n                }, {\n                    name: 'chartConfig',\n                    propertyPath: ['chartOptions'],\n                    type: 'textarea'\n                }, {\n                    name: 'chartClassName',\n                    propertyPath: ['chartClassName'],\n                    type: 'input'\n                }, {\n                    name: 'chartID',\n                    propertyPath: ['chartID'],\n                    type: 'input'\n                }\n            ],\n            editableOptionsBindings: merge(Component.defaultOptions.editableOptionsBindings, {\n                skipRedraw: [\n                    'chartOptions',\n                    'chartConfig'\n                ]\n            })\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HighchartsComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsSyncs.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsComponentDefaults.js'], _modules['Dashboards/Utilities.js'], _modules['Core/Utilities.js']], function (Component, DataConverter, DataTable, Globals, HighchartsSyncs, HighchartsComponentDefaults, DU, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sebastian Bochan\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, diffObjects, isString, merge, splat } = U;\n        const { deepClone } = DU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a Highcharts component.\n         *\n         */\n        class HighchartsComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the Highcharts component.\n             *\n             * @returns\n             * Highcharts component based on config from JSON.\n             *\n             * @private\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const chartOptions = JSON.parse(json.options.chartOptions || '{}');\n                /// const store = json.store ? DataJSON.fromJSON(json.store) : void 0;\n                const component = new HighchartsComponent(cell, merge(options, {\n                    chartOptions\n                    // Highcharts, // TODO: Find a solution\n                    // store: store instanceof DataConnector ? store : void 0\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a Highcharts component in the cell.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                options = merge(HighchartsComponent.defaultOptions, options);\n                super(cell, options, board);\n                /**\n                 * An object of series IDs and their connector handlers.\n                 */\n                this.seriesFromConnector = {};\n                this.options = options;\n                this.chartConstructor = this.options.chartConstructor || 'chart';\n                this.type = 'Highcharts';\n                this.chartContainer = createElement('figure', void 0, void 0, this.contentElement, true);\n                this.setOptions();\n                this.chartOptions = merge((this.options.chartOptions ||\n                    { chart: {} }), {\n                    tooltip: {} // Temporary fix for #18876\n                });\n                for (const connectorHandler of this.connectorHandlers) {\n                    const connector = connectorHandler.connector;\n                    if (connector) {\n                        connector.on('afterLoad', (e) => {\n                            if (e.table) {\n                                connector.table.setColumns(e.table.getColumns());\n                            }\n                        });\n                    }\n                }\n                this.innerResizeTimeouts = [];\n            }\n            onTableChanged() {\n                this.updateSeries();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            async load() {\n                this.emit({ type: 'load' });\n                await super.load();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            render() {\n                const hcComponent = this;\n                super.render();\n                hcComponent.chart = hcComponent.getChart();\n                hcComponent.updateSeries();\n                hcComponent.emit({ type: 'afterRender' });\n                hcComponent.setupConnectorUpdate();\n                this.sync.start();\n                return this;\n            }\n            resize(width, height) {\n                this.resizeDynamicContent(width, height);\n                while (this.innerResizeTimeouts.length) {\n                    const timeoutID = this.innerResizeTimeouts.pop();\n                    if (timeoutID) {\n                        clearTimeout(timeoutID);\n                    }\n                }\n                this.innerResizeTimeouts.push(setTimeout(() => {\n                    if (this.chart && this.chart.container) {\n                        const heightOffset = this.contentElement.offsetHeight -\n                            this.chart?.container.offsetHeight;\n                        this.chart.setSize(null, (Math.abs(heightOffset) > 1) ?\n                            this.contentElement.offsetHeight : null, false);\n                    }\n                }, 33));\n                return this;\n            }\n            /**\n             * Adds call update value in store, when chart's point is updated.\n             *\n             * @private\n             * */\n            setupConnectorUpdate() {\n                const { connectorHandlers, chart } = this;\n                if (!chart || !this.options.allowConnectorUpdate) {\n                    return;\n                }\n                const seriesLength = chart.series.length;\n                for (let i = 0, iEnd = connectorHandlers.length; i < iEnd; i++) {\n                    const connectorHandler = connectorHandlers[i];\n                    for (let j = 0; j < seriesLength; j++) {\n                        const series = chart.series[j];\n                        series.update({\n                            point: {\n                                events: {\n                                    update: (e) => {\n                                        this.onChartUpdate(e.target, connectorHandler);\n                                    }\n                                }\n                            }\n                        }, false);\n                    }\n                }\n            }\n            /**\n             * Update the store, when the point is being dragged.\n             * @param point Dragged point.\n             * @param connectorHandler Connector handler with data to update.\n             */\n            onChartUpdate(point, connectorHandler) {\n                const table = connectorHandler.connector?.table;\n                const columnAssignment = connectorHandler.columnAssignment;\n                const seriesId = point.series.options.id;\n                const converter = new DataConverter();\n                const valueToSet = converter.asNumber(point.y);\n                if (!table) {\n                    return;\n                }\n                let columnName;\n                if (columnAssignment && seriesId) {\n                    const data = columnAssignment.find((s) => s.seriesId === seriesId)?.data;\n                    if (isString(data)) {\n                        columnName = data;\n                    }\n                    else if (Array.isArray(data)) {\n                        columnName = data[1];\n                    }\n                    else if (data) {\n                        columnName = data.y ?? data.value;\n                    }\n                }\n                if (!columnName) {\n                    columnName = seriesId ?? point.series.name;\n                }\n                table.setCell(columnName, point.index, valueToSet);\n            }\n            /**\n             * Internal method for handling option updates.\n             *\n             * @internal\n             */\n            setOptions() {\n                if (this.options.chartClassName) {\n                    this.chartContainer.classList.value =\n                        HighchartsComponentDefaults.className + ' ' +\n                            this.options.chartClassName;\n                }\n                if (this.options.chartID) {\n                    this.chartContainer.id = this.options.chartID;\n                }\n            }\n            /**\n             * Handles updating via options.\n             * @param options\n             * The options to apply.\n             *\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options, false);\n                this.setOptions();\n                if (this.chart) {\n                    this.chart.update(merge(this.options.chartOptions) || {});\n                }\n                this.emit({ type: 'afterUpdate' });\n                shouldRerender && this.render();\n            }\n            /**\n             * Updates chart's series when the data table is changed.\n             * @private\n             */\n            updateSeries() {\n                const { chart } = this;\n                const connectorHandlers = this.connectorHandlers;\n                if (!chart) {\n                    return;\n                }\n                const newSeriesIds = [];\n                for (const connectorHandler of connectorHandlers) {\n                    const options = connectorHandler.options;\n                    let columnAssignment = options.columnAssignment;\n                    if (!columnAssignment && connectorHandler.presentationTable) {\n                        columnAssignment = this.getDefaultColumnAssignment(connectorHandler.presentationTable.getColumnNames(), connectorHandler.presentationTable);\n                    }\n                    if (columnAssignment) {\n                        connectorHandler.columnAssignment = columnAssignment;\n                        for (const { seriesId } of columnAssignment) {\n                            if (seriesId) {\n                                newSeriesIds.push(seriesId);\n                            }\n                        }\n                    }\n                }\n                const seriesArray = Object.keys(this.seriesFromConnector);\n                // Remove series that were added in the previous update and are not\n                // present in the new columnAssignment.\n                for (let i = 0, iEnd = seriesArray.length; i < iEnd; ++i) {\n                    const oldSeriesId = seriesArray[i];\n                    if (newSeriesIds.some((newSeriesId) => newSeriesId === oldSeriesId)) {\n                        continue;\n                    }\n                    const series = chart.get(oldSeriesId);\n                    if (series) {\n                        series.destroy();\n                    }\n                }\n                this.seriesFromConnector = {};\n                for (const connectorHandler of connectorHandlers) {\n                    this.updateSeriesFromConnector(connectorHandler);\n                }\n                chart.redraw();\n            }\n            /**\n             * Updates the series based on the connector from each connector handler.\n             * @param connectorHandler The connector handler.\n             * @private\n             */\n            updateSeriesFromConnector(connectorHandler) {\n                const chart = this.chart;\n                if (!connectorHandler.connector ||\n                    !chart ||\n                    !connectorHandler.presentationTable) {\n                    return;\n                }\n                const table = connectorHandler.presentationTable.modified;\n                const modifierOptions = connectorHandler.presentationTable.getModifier()?.options;\n                const columnAssignment = connectorHandler.columnAssignment ?? [];\n                // Create the series or update the existing ones.\n                for (let i = 0, iEnd = columnAssignment.length; i < iEnd; ++i) {\n                    const assignment = columnAssignment[i];\n                    const dataStructure = assignment.data;\n                    const series = chart.get(assignment.seriesId);\n                    const seriesOptions = {};\n                    // Prevent dragging on series, which were created out of a\n                    // columns which are created by MathModifier.\n                    const adjustDraggableOptions = (compare) => {\n                        if (modifierOptions?.type === 'Math' &&\n                            modifierOptions\n                                .columnFormulas?.some((formula) => compare(formula.column))) {\n                            seriesOptions.dragDrop = {\n                                draggableY: false\n                            };\n                        }\n                    };\n                    // Set the series data based on the column assignment data structure\n                    // type.\n                    if (isString(dataStructure)) {\n                        const column = table.getColumn(dataStructure);\n                        if (column) {\n                            seriesOptions.data = column.slice();\n                        }\n                        adjustDraggableOptions((columnName) => (columnName === dataStructure));\n                    }\n                    else if (Array.isArray(dataStructure)) {\n                        const seriesTable = new DataTable({\n                            columns: table.getColumns(dataStructure)\n                        });\n                        seriesOptions.data = seriesTable.getRows();\n                        adjustDraggableOptions((columnName) => (dataStructure.some((name) => name === columnName)));\n                    }\n                    else {\n                        const keys = Object.keys(dataStructure);\n                        const columnNames = [];\n                        for (let j = 0, jEnd = keys.length; j < jEnd; ++j) {\n                            columnNames.push(dataStructure[keys[j]]);\n                        }\n                        const seriesTable = new DataTable({\n                            columns: table.getColumns(columnNames)\n                        });\n                        seriesOptions.keys = keys;\n                        seriesOptions.data = seriesTable.getRows();\n                        adjustDraggableOptions((columnName) => (columnNames.some((name) => name === columnName)));\n                    }\n                    if (!series) {\n                        chart.addSeries({\n                            name: assignment.seriesId,\n                            id: assignment.seriesId,\n                            ...seriesOptions\n                        }, false);\n                    }\n                    else {\n                        series.update(seriesOptions, false);\n                    }\n                    this.seriesFromConnector[assignment.seriesId] = connectorHandler;\n                }\n            }\n            /**\n             * Destroy chart and create a new one.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            getChart() {\n                return this.chart || this.createChart();\n            }\n            /**\n             * Destroys the highcharts component.\n             */\n            destroy() {\n                // Cleanup references in the global Highcharts scope\n                this.chart?.destroy();\n                super.destroy();\n            }\n            /**\n             * Creates default mapping when columnAssignment is not declared.\n             * @param  { Array<string>} columnNames all columns returned from dataTable.\n             *\n             * @returns\n             * The record of mapping\n             *\n             * @private\n             *\n             */\n            getDefaultColumnAssignment(columnNames = [], presentationTable) {\n                const result = [];\n                const firstColumn = presentationTable.getColumn(columnNames[0]);\n                if (firstColumn && isString(firstColumn[0])) {\n                    for (let i = 1, iEnd = columnNames.length; i < iEnd; ++i) {\n                        result.push({\n                            seriesId: columnNames[i],\n                            data: [columnNames[0], columnNames[i]]\n                        });\n                    }\n                    return result;\n                }\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    result.push({\n                        seriesId: columnNames[i],\n                        data: columnNames[i]\n                    });\n                }\n                return result;\n            }\n            /**\n             * Creates chart.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            createChart() {\n                const charter = HighchartsComponent.charter || Globals.win.Highcharts;\n                if (!this.chartConstructor) {\n                    this.chartConstructor = 'chart';\n                }\n                const Factory = charter[this.chartConstructor];\n                if (Factory) {\n                    try {\n                        if (this.chartConstructor === 'chart') {\n                            return charter.Chart.chart(this.chartContainer, this.chartOptions);\n                        }\n                        return new Factory(this.chartContainer, this.chartOptions);\n                    }\n                    catch (e) {\n                        throw new Error(`The Highcharts component in cell '${this.cell.id}' is misconfigured. \\n____________\\n${e}`);\n                    }\n                }\n                if (typeof charter.chart !== 'function') {\n                    throw new Error('Chart constructor not found');\n                }\n                return this.chart;\n            }\n            /**\n             * Registers events from the chart options to the callback register.\n             *\n             * @private\n             */\n            registerChartEvents() {\n                if (this.chart && this.chart.options) {\n                    const options = this.chart.options;\n                    const allEvents = [\n                        'chart',\n                        'series',\n                        'yAxis',\n                        'xAxis',\n                        'colorAxis',\n                        'annotations',\n                        'navigation'\n                    ].map((optionKey) => {\n                        let seriesOrAxisOptions = options[optionKey] || {};\n                        if (!Array.isArray(seriesOrAxisOptions) &&\n                            seriesOrAxisOptions.events) {\n                            seriesOrAxisOptions = [seriesOrAxisOptions];\n                        }\n                        if (seriesOrAxisOptions &&\n                            typeof seriesOrAxisOptions === 'object' &&\n                            Array.isArray(seriesOrAxisOptions)) {\n                            return seriesOrAxisOptions.reduce((acc, seriesOrAxis, i) => {\n                                if (seriesOrAxis && seriesOrAxis.events) {\n                                    acc[seriesOrAxis.id || `${optionKey}-${i}`] = seriesOrAxis.events;\n                                }\n                                return acc;\n                            }, {}) || {};\n                        }\n                        return {};\n                    });\n                    allEvents.forEach((options) => {\n                        Object.keys(options).forEach((key) => {\n                            const events = options[key];\n                            Object.keys(events).forEach((callbackKey) => {\n                                this.callbackRegistry.addCallback(`${key}-${callbackKey}`, {\n                                    type: 'seriesEvent',\n                                    func: events[callbackKey]\n                                });\n                            });\n                        });\n                    });\n                }\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'Highcharts',\n                    chartOptions: {\n                        chart: {\n                            animation: false,\n                            type: 'column',\n                            zooming: {}\n                        }\n                    }\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @private\n             */\n            toJSON() {\n                const chartOptions = JSON.stringify(this.options.chartOptions), chartConstructor = this.options.chartConstructor || 'chart';\n                this.registerChartEvents();\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    type: 'Highcharts',\n                    options: {\n                        ...base.options,\n                        chartOptions,\n                        chartConstructor,\n                        // TODO: may need to handle callback functions\n                        // Maybe have a sync.toJSON()\n                        type: 'Highcharts',\n                        sync: {}\n                    }\n                };\n                this.emit({ type: 'toJSON', json });\n                return json;\n            }\n            /**\n             * Get the HighchartsComponent component's options.\n             * @returns\n             * The JSON of HighchartsComponent component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HighchartsComponent.defaultOptions),\n                    type: 'Highcharts'\n                };\n            }\n            /**\n             * Retrieves editable options for the chart.\n             *\n             * @returns\n             * The editable options for the chart and its values.\n             */\n            getEditableOptions() {\n                const component = this;\n                const componentOptions = component.options;\n                const chart = component.chart;\n                const chartOptions = chart && chart.options;\n                const chartType = chartOptions?.chart?.type || 'line';\n                return deepClone(merge({\n                    chartOptions\n                }, {\n                    chartOptions: {\n                        yAxis: splat(chart && chart.yAxis[0].options),\n                        xAxis: splat(chart && chart.xAxis[0].options),\n                        plotOptions: {\n                            series: ((chartOptions && chartOptions.plotOptions) ||\n                                {})[chartType]\n                        }\n                    }\n                }, componentOptions), ['dataTable', 'points', 'series', 'data', 'editableOptions']);\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                if (propertyPath.length === 1 && propertyPath[0] === 'chartOptions') {\n                    return JSON.stringify(component.options.chartOptions, null, 2);\n                }\n                return super.getEditableOptionValue.call(this, propertyPath);\n            }\n        }\n        /**\n         * Predefined sync config for Highcharts component.\n         */\n        HighchartsComponent.predefinedSyncConfig = HighchartsSyncs;\n        /**\n         * Default options of the Highcharts component.\n         */\n        HighchartsComponent.defaultOptions = merge(Component.defaultOptions, HighchartsComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HighchartsComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPISyncs/KPIExtremesSync.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: void 0,\n            handler: function () {\n                if (this.type !== 'KPI') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const { board } = this;\n                const handleChangeExtremes = (e) => {\n                    const cursor = e.cursor;\n                    if (cursor.type === 'position' &&\n                        typeof cursor?.row === 'number' &&\n                        defined(cursor.column) &&\n                        component.connectorHandlers?.[0]?.connector &&\n                        !defined(component.options.value)) {\n                        const value = component.connectorHandlers[0].connector\n                            .table.modified.getCellAsString(cursor.column, cursor.row);\n                        component.setValue(value);\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = this.getFirstConnector()?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'xAxis.extremes.max' + groupKey, handleChangeExtremes);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = this.getFirstConnector()?.table;\n                    const { dataCursor: cursor } = board;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'xAxis.extremes.max' + groupKey, handleChangeExtremes);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPISyncs/KPISyncs.js', [_modules['Dashboards/Components/KPIComponent/KPISyncs/KPIExtremesSync.js']], function (KPIExtremesSync) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                extremes: KPIExtremesSync.syncPair\n            },\n            defaultSyncOptions: {\n                extremes: KPIExtremesSync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPIComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const KPIComponentDefaults = {\n            type: 'KPI',\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-kpi`\n            ].join(' '),\n            minFontSize: 20,\n            thresholdColors: ['#f45b5b', '#90ed7d'],\n            editableOptions: [\n                {\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                },\n                ...Component.defaultOptions.editableOptions || [],\n                {\n                    name: 'Value',\n                    type: 'input',\n                    propertyPath: ['value']\n                }, {\n                    name: 'Column name',\n                    type: 'input',\n                    propertyPath: ['columnName']\n                }, {\n                    name: 'Value format',\n                    type: 'input',\n                    propertyPath: ['valueFormat']\n                }\n            ],\n            linkedValueTo: {\n                enabled: true,\n                seriesIndex: 0,\n                pointIndex: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return KPIComponentDefaults;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * General options for the chart.\n         *\n         * @optionparent chart\n         */\n        const ChartDefaults = {\n            /**\n             * Default `mapData` for all series, in terms of a GeoJSON or TopoJSON\n             * object. If set to a string, it functions as an index into the\n             * `Highcharts.maps` array.\n             *\n             * For picking out individual shapes and geometries to use for each series\n             * of the map, see [series.mapData](#series.map.mapData).\n             *\n             * @sample    maps/demo/geojson\n             *            Loading GeoJSON data\n             * @sample    maps/chart/topojson\n             *            Loading TopoJSON data\n             *\n             * @type      {string|Array<*>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.map\n             */\n            /**\n             * Set lat/lon transformation definitions for the chart. If not defined,\n             * these are extracted from the map data.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.mapTransforms\n             */\n            /**\n             * When using multiple axes, the ticks of two or more opposite axes\n             * will automatically be aligned by adding ticks to the axis or axes\n             * with the least ticks, as if `tickAmount` were specified.\n             *\n             * This can be prevented by setting `alignTicks` to false. If the grid\n             * lines look messy, it's a good idea to hide them for the secondary\n             * axis by setting `gridLineWidth` to 0.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false,\n             * then the `alignTicks ` will be disabled for the axis.\n             *\n             * Disabled for logarithmic axes.\n             *\n             * @sample {highcharts} highcharts/chart/alignticks-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/alignticks-false/\n             *         False\n             * @sample {highstock} stock/chart/alignticks-true/\n             *         True by default\n             * @sample {highstock} stock/chart/alignticks-false/\n             *         False\n             *\n             * @type      {boolean}\n             * @default   true\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignTicks\n             */\n            /**\n             * When using multiple axes, align the thresholds. When this is true, other\n             * ticks will also be aligned.\n             *\n             * Note that for line series and some other series types, the `threshold`\n             * option is set to `null` by default. This will in turn cause their y-axis\n             * to not have a threshold. In order to avoid that, set the series\n             * `threshold` to 0 or another number.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false, or\n             * if the axis is logarithmic, the threshold will not be aligned.\n             *\n             * @sample {highcharts} highcharts/chart/alignthresholds/ Set to true\n             *\n             * @since 10.0.0\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignThresholds\n             */\n            alignThresholds: false,\n            /**\n             * Set the overall animation for all chart updating. Animation can be\n             * disabled throughout the chart by setting it to false here. It can\n             * be overridden for each individual API method as a function parameter.\n             * The only animation not affected by this option is the initial series\n             * animation, see [plotOptions.series.animation](\n             * #plotOptions.series.animation).\n             *\n             * The animation can either be set as a boolean or a configuration\n             * object. If `true`, it will use the 'swing' jQuery easing and a\n             * duration of 500 ms. If used as a configuration object, the following\n             * properties are supported:\n             *\n             * - `defer`: The animation delay time in milliseconds.\n             *\n             * - `duration`: The duration of the animation in milliseconds.\n             *\n             * - `easing`: A string reference to an easing function set on the\n             *   `Math` object. See\n             *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n             *\n             * When zooming on a series with less than 100 points, the chart redraw\n             * will be done with animation, but in case of more data points, it is\n             * necessary to set this option to ensure animation on zoom.\n             *\n             * @sample {highcharts} highcharts/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highcharts} highcharts/chart/animation-duration/\n             *         With a longer duration\n             * @sample {highcharts} highcharts/chart/animation-easing/\n             *         With a jQuery UI easing\n             * @sample {highmaps} maps/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highmaps} maps/chart/animation-duration/\n             *         With a longer duration\n             *\n             * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @default   true\n             * @apioption chart.animation\n             */\n            /**\n             * A CSS class name to apply to the charts container `div`, allowing\n             * unique CSS styling for each chart.\n             *\n             * @type      {string}\n             * @apioption chart.className\n             */\n            /**\n             * Event listeners for the chart.\n             *\n             * @apioption chart.events\n             */\n            /**\n             * Fires when a series is added to the chart after load time, using the\n             * `addSeries` method. One parameter, `event`, is passed to the\n             * function, containing common event information. Through\n             * `event.options` you can access the series options that were passed to\n             * the `addSeries` method. Returning false prevents the series from\n             * being added.\n             *\n             * @sample {highcharts} highcharts/chart/events-addseries/\n             *         Alert on add series\n             * @sample {highstock} stock/chart/events-addseries/\n             *         Alert on add series\n             *\n             * @type      {Highcharts.ChartAddSeriesCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.addSeries\n             */\n            /**\n             * Fires when clicking on the plot background. One parameter, `event`,\n             * is passed to the function, containing common event information.\n             *\n             * Information on the clicked spot can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' value at the clicked spot. The primary axes\n             * are `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * click: function(e) {\n             *     console.log(\n             *         Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n             *         e.yAxis[0].value\n             *     )\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highcharts} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highstock} stock/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highstock} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highmaps} maps/chart/events-click/\n             *         Record coordinates on click\n             * @sample {highmaps} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             *\n             * @type      {Highcharts.ChartClickCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.click\n             */\n            /**\n             * Fires when the chart is finished loading. Since v4.2.2, it also waits\n             * for images to be loaded, for example from point markers. One\n             * parameter, `event`, is passed to the function, containing common\n             * event information.\n             *\n             * There is also a second parameter to the chart constructor where a\n             * callback function can be passed to be executed on chart.load.\n             *\n             * @sample {highcharts} highcharts/chart/events-load/\n             *         Alert on chart load\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-load/\n             *         Alert on chart load\n             * @sample {highmaps} maps/chart/events-load/\n             *         Add series on chart load\n             *\n             * @type      {Highcharts.ChartLoadCallbackFunction}\n             * @context   Highcharts.Chart\n             * @apioption chart.events.load\n             */\n            /**\n             * Fires when the chart is redrawn, either after a call to\n             * `chart.redraw()` or after an axis, series or point is modified with\n             * the `redraw` option set to `true`. One parameter, `event`, is passed\n             * to the function, containing common event information.\n             *\n             * @sample {highcharts} highcharts/chart/events-redraw/\n             *         Alert on chart redraw\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-redraw/\n             *         Alert on chart redraw when adding a series or moving the\n             *         zoomed range\n             * @sample {highmaps} maps/chart/events-redraw/\n             *         Set subtitle on chart redraw\n             *\n             * @type      {Highcharts.ChartRedrawCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.redraw\n             */\n            /**\n             * Fires after initial load of the chart (directly after the `load`\n             * event), and after each redraw (directly after the `redraw` event).\n             *\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             *\n             * @type      {Highcharts.ChartRenderCallbackFunction}\n             * @since     5.0.7\n             * @context   Highcharts.Chart\n             * @apioption chart.events.render\n             */\n            /**\n             * Fires when an area of the chart has been selected. Selection is\n             * enabled by setting the chart's zoomType. One parameter, `event`, is\n             * passed to the function, containing common event information. The\n             * default action for the selection event is to zoom the chart to the\n             * selected area. It can be prevented by calling\n             * `event.preventDefault()` or return false.\n             *\n             * Information on the selected area can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' min and max values. The primary axes are\n             * `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * selection: function(event) {\n             *     // log the min and max of the primary, datetime x-axis\n             *     console.log(\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].min\n             *         ),\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].max\n             *         )\n             *     );\n             *     // log the min and max of the y axis\n             *     console.log(event.yAxis[0].min, event.yAxis[0].max);\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highcharts} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample {highstock} stock/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highstock} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             *         (Highcharts)\n             *\n             * @type      {Highcharts.ChartSelectionCallbackFunction}\n             * @apioption chart.events.selection\n             */\n            /**\n             * The margin between the outer edge of the chart and the plot area.\n             * The numbers in the array designate top, right, bottom and left\n             * respectively. Use the options `marginTop`, `marginRight`,\n             * `marginBottom` and `marginLeft` for shorthand setting of one option.\n             *\n             * By default there is no margin. The actual space is dynamically\n             * calculated from the offset of axis labels, axis title, title,\n             * subtitle and legend in addition to the `spacingTop`, `spacingRight`,\n             * `spacingBottom` and `spacingLeft` options.\n             *\n             * @sample {highcharts} highcharts/chart/margins-zero/\n             *         Zero margins\n             * @sample {highstock} stock/chart/margin-zero/\n             *         Zero margins\n             *\n             * @type      {number|Array<number>}\n             * @apioption chart.margin\n             */\n            /**\n             * The margin between the bottom outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingBottom`.\n             *\n             * @sample {highcharts} highcharts/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highstock} stock/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginBottom\n             */\n            /**\n             * The margin between the left outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingLeft`.\n             *\n             * @sample {highcharts} highcharts/chart/marginleft/\n             *         150px left margin\n             * @sample {highstock} stock/chart/marginleft/\n             *         150px left margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginLeft\n             */\n            /**\n             * The margin between the right outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingRight`.\n             *\n             * @sample {highcharts} highcharts/chart/marginright/\n             *         100px right margin\n             * @sample {highstock} stock/chart/marginright/\n             *         100px right margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginRight\n             */\n            /**\n             * The margin between the top outer edge of the chart and the plot area.\n             * Use this to set a fixed pixel value for the margin as opposed to\n             * the default dynamic margin. See also `spacingTop`.\n             *\n             * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n             * @sample {highstock} stock/chart/margintop/\n             *         100px top margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginTop\n             */\n            /**\n             * Callback function to override the default function that formats all\n             * the numbers in the chart. Returns a string with the formatted number.\n             *\n             * @sample highcharts/members/highcharts-numberformat\n             *      Arabic digits in Highcharts\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             * @since 8.0.0\n             * @apioption chart.numberFormatter\n             */\n            /**\n             * When a chart with an x and a y-axis is rendered, we first pre-render the\n             * labels of both in order to measure them. Then, if either of the axis\n             * labels take up so much space that it significantly affects the length of\n             * the other axis, we repeat the process.\n             *\n             * By default we stop at two axis layout runs, but it may be that the second\n             * run also alter the space required by either axis, for example if it\n             * causes the labels to rotate. In this situation, a subsequent redraw of\n             * the chart may cause the tick and label placement to change for apparently\n             * no reason.\n             *\n             * Use the `axisLayoutRuns` option to set the maximum allowed number of\n             * repetitions. But keep in mind that the default value of 2 is set because\n             * every run costs performance time.\n             *\n             * **Note:** Changing that option to higher than the default might decrease\n             * performance significantly, especially with bigger sets of data.\n             *\n             * @type      {number}\n             * @default   2\n             * @since     11.3.0\n             * @apioption chart.axisLayoutRuns\n             */\n            /**\n             * Allows setting a key to switch between zooming and panning. Can be\n             * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n             * key on Windows) or `shift`. The keys are mapped directly to the key\n             * properties of the click event argument (`event.altKey`,\n             * `event.ctrlKey`, `event.metaKey` and `event.shiftKey`).\n             *\n             * @type       {string}\n             * @since      4.0.3\n             * @product    highcharts gantt\n             * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n             * @apioption  chart.panKey\n             */\n            /**\n             * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n             * to combine zooming and panning.\n             *\n             * On touch devices, when the [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) option is `true` (default), panning\n             * requires two fingers. To allow panning with one finger, set\n             * `followTouchMove` to `false`.\n             *\n             * @sample  {highcharts} highcharts/chart/pankey/ Zooming and panning\n             * @sample  {highstock} stock/chart/panning/ Zooming and xy panning\n             */\n            panning: {\n                /**\n                 * Enable or disable chart panning.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock|highmaps} true\n                 */\n                enabled: false,\n                /**\n                 * Decides in what dimensions the user can pan the chart. Can be\n                 * one of `x`, `y`, or `xy`.\n                 *\n                 * During panning, all axes will behave as if\n                 * [`startOnTick`](#yAxis.startOnTick) and\n                 * [`endOnTick`](#yAxis.endOnTick) were set to `false`. After the\n                 * panning action is finished, the axes will adjust to their actual\n                 * settings.\n                 *\n                 * @sample {highcharts} highcharts/chart/panning-type\n                 *         Zooming and xy panning\n                 *\n                 * @declare    Highcharts.OptionsChartPanningTypeValue\n                 * @type       {string}\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @product    highcharts highstock gantt\n                 */\n                type: 'x'\n            },\n            /**\n             * Equivalent to [zoomType](#chart.zoomType), but for multitouch\n             * gestures only. By default, the `pinchType` is the same as the\n             * `zoomType` setting. However, pinching can be enabled separately in\n             * some cases, for example in stock charts where a mouse drag pans the\n             * chart, while pinching is enabled. When [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) is true, pinchType only applies to\n             * two-finger touches.\n             *\n             * @type       {string}\n             * @default    {highcharts} undefined\n             * @default    {highstock} undefined\n             * @since      3.0\n             * @product    highcharts highstock gantt\n             * @deprecated\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @apioption  chart.pinchType\n             */\n            /**\n             * Whether to apply styled mode. When in styled mode, no presentational\n             * attributes or CSS are applied to the chart SVG. Instead, CSS rules\n             * are required to style the chart. The default style sheet is\n             * available from `https://code.highcharts.com/css/highcharts.css`.\n             *\n             * [Read more in the docs](https://www.highcharts.com/docs/chart-design-and-style/style-by-css)\n             * on what classes and variables are available.\n             *\n             * @sample highcharts/css/colors\n             *         Color theming with CSS\n             * @sample highcharts/css/prefers-color-scheme\n             *         Dynamic theme based on system settings\n             * @type       {boolean}\n             * @default    false\n             * @since      7.0\n             * @apioption  chart.styledMode\n             */\n            styledMode: false,\n            /**\n             * The corner radius of the outer chart border.\n             *\n             * @sample {highcharts} highcharts/chart/borderradius/\n             *         20px radius\n             * @sample {highstock} stock/chart/border/\n             *         10px radius\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             */\n            borderRadius: 0,\n            /**\n             * In styled mode, this sets how many colors the class names\n             * should rotate between. With ten colors, series (or points) are\n             * given class names like `highcharts-color-0`, `highcharts-color-1`\n             * [...] `highcharts-color-9`. The equivalent in non-styled mode\n             * is to set colors using the [colors](#colors) setting.\n             *\n             * @since      5.0.0\n             */\n            colorCount: 10,\n            /**\n             * By default, (because of memory and performance reasons) the chart does\n             * not copy the data but keeps it as a reference. In some cases, this might\n             * result in mutating the original data source. In order to prevent that,\n             * set that property to false. Please note that changing that might decrease\n             * performance, especially with bigger sets of data.\n             *\n             * @type       {boolean}\n             * @since 10.1.0\n             */\n            allowMutatingData: true,\n            /**\n             * If true, the axes will scale to the remaining visible series once\n             * one series is hidden. If false, hiding and showing a series will\n             * not affect the axes or the other series. For stacks, once one series\n             * within the stack is hidden, the rest of the stack will close in\n             * around it even if the axis is not affected.\n             *\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n             *         False\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n             *         True with stack\n             * @sample {highstock} stock/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highstock} stock/chart/ignorehiddenseries-false/\n             *         False\n             *\n             * @since   1.2.0\n             * @product highcharts highstock gantt\n             */\n            ignoreHiddenSeries: true,\n            /**\n             * Whether to invert the axes so that the x axis is vertical and y axis\n             * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n             * by default.\n             *\n             * @productdesc {highcharts}\n             * If a bar series is present in the chart, it will be inverted\n             * automatically. Inverting the chart doesn't have an effect if there\n             * are no cartesian series in the chart.\n             *\n             * @sample {highcharts} highcharts/chart/inverted/\n             *         Inverted line\n             * @sample {highstock} stock/navigator/inverted/\n             *         Inverted stock chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @product   highcharts highstock gantt\n             * @apioption chart.inverted\n             */\n            /**\n             * The distance between the outer edge of the chart and the content,\n             * like title or legend, or axis title and labels if present. The\n             * numbers in the array designate top, right, bottom and left\n             * respectively. Use the options spacingTop, spacingRight, spacingBottom\n             * and spacingLeft options for shorthand setting of one option.\n             *\n             * @type    {Array<number>}\n             * @see     [chart.margin](#chart.margin)\n             * @default [10, 10, 15, 10]\n             * @since   3.0.6\n             */\n            spacing: [10, 10, 15, 10],\n            /**\n             * The button that appears after a selection zoom, allowing the user\n             * to reset zoom. This option is deprecated in favor of\n             * [zooming](#chart.zooming).\n             *\n             * @since      2.2\n             * @deprecated 10.2.1\n             */\n            resetZoomButton: {\n                /**\n                 * What frame the button placement should be related to. Can be\n                 * either `plotBox` or `spacingBox`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 *\n                 * @type      {Highcharts.ButtonRelativeToValue}\n                 * @apioption chart.resetZoomButton.relativeTo\n                 */\n                /**\n                 * A collection of attributes for the button. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                 * border radius. The theme also supports `style`, a collection of\n                 * CSS properties for the text. Equivalent attributes for the hover\n                 * state are given in `theme.states.hover`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                theme: {\n                /**\n                 * The z-index of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.theme.zIndex\n                 */\n                },\n                /**\n                 * The position of the button.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 *\n                 * @type {Highcharts.AlignObject}\n                 */\n                position: {\n                /**\n                 * The horizontal alignment of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.align\n                 */\n                /**\n                 * The horizontal offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.x\n                 */\n                /**\n                 * The vertical alignment of the button.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @apioption chart.resetZoomButton.position.verticalAlign\n                 */\n                /**\n                 * The vertical offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.y\n                 */\n                }\n            },\n            /**\n             * The pixel width of the plot area border.\n             *\n             * @sample {highcharts} highcharts/chart/plotborderwidth/\n             *         1px border\n             * @sample {highstock} stock/chart/plotborder/\n             *         2px border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.plotBorderWidth\n             */\n            /**\n             * Whether to apply a drop shadow to the plot area. Requires that\n             * plotBackgroundColor be set. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample {highcharts} highcharts/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highstock} stock/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.plotShadow\n             */\n            /**\n             * When true, cartesian charts like line, spline, area and column are\n             * transformed into the polar coordinate system. This produces _polar\n             * charts_, also known as _radar charts_.\n             *\n             * @sample {highcharts} highcharts/demo/polar/\n             *         Polar chart\n             * @sample {highcharts} highcharts/demo/polar-wind-rose/\n             *         Wind rose, stacked polar column chart\n             * @sample {highcharts} highcharts/demo/polar-spider/\n             *         Spider web chart\n             * @sample {highcharts} highcharts/parallel-coordinates/polar/\n             *         Star plot, multivariate data in a polar chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     2.3.0\n             * @product   highcharts\n             * @requires  highcharts-more\n             * @apioption chart.polar\n             */\n            /**\n             * Whether to reflow the chart to fit the width of the container div\n             * on resizing the window.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/reflow-false/\n             *         False\n             * @sample {highstock} stock/chart/reflow-true/\n             *         True by default\n             * @sample {highstock} stock/chart/reflow-false/\n             *         False\n             * @sample {highmaps} maps/chart/reflow-true/\n             *         True by default\n             * @sample {highmaps} maps/chart/reflow-false/\n             *         False\n             *\n             * @since     2.1\n             */\n            reflow: true,\n            /**\n             * The HTML element where the chart will be rendered. If it is a string,\n             * the element by that id is used. The HTML element can also be passed\n             * by direct reference, or as the first argument of the chart\n             * constructor, in which case the option is not needed.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         String\n             * @sample {highcharts} highcharts/chart/renderto-object/\n             *         Object reference\n             * @sample {highstock} stock/chart/renderto-string/\n             *         String\n             * @sample {highstock} stock/chart/renderto-object/\n             *         Object reference\n             *\n             * @type      {string|Highcharts.HTMLDOMElement}\n             * @apioption chart.renderTo\n             */\n            /**\n             * The background color of the marker square when selecting (zooming\n             * in on) an area of the chart.\n             *\n             * @see In styled mode, the selection marker fill is set with the\n             *      `.highcharts-selection-marker` class.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   rgba(51,92,173,0.25)\n             * @since     2.1.7\n             * @apioption chart.selectionMarkerFill\n             */\n            /**\n             * Whether to apply a drop shadow to the global series group. This causes\n             * all the series to have the same shadow. Contrary to the `series.shadow`\n             * option, this prevents items from casting shadows on each other, like for\n             * others series in a stack. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample highcharts/chart/seriesgroupshadow/ Shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to apply a drop shadow to the outer chart area. Requires\n             * that backgroundColor be set. The shadow can be an object\n             * configuration containing `color`, `offsetX`, `offsetY`, `opacity` and\n             * `width`.\n             *\n             * @sample {highcharts} highcharts/chart/shadow/\n             *         Shadow\n             * @sample {highstock} stock/chart/shadow/\n             *         Shadow\n             * @sample {highmaps} maps/chart/border/\n             *         Chart border and shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to show the axes initially. This only applies to empty charts\n             * where series are added dynamically, as axes are automatically added\n             * to cartesian series.\n             *\n             * @sample {highcharts} highcharts/chart/showaxes-false/\n             *         False by default\n             * @sample {highcharts} highcharts/chart/showaxes-true/\n             *         True\n             *\n             * @type      {boolean}\n             * @since     1.2.5\n             * @product   highcharts gantt\n             * @apioption chart.showAxes\n             */\n            /**\n             * The space between the bottom edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highstock} stock/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   15\n             * @since     2.1\n             * @apioption chart.spacingBottom\n             */\n            /**\n             * The space between the left edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highstock} stock/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingLeft\n             */\n            /**\n             * The space between the right edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingright-100/\n             *         Spacing set to 100\n             * @sample {highcharts} highcharts/chart/spacingright-legend/\n             *         Legend in right position with default spacing\n             * @sample {highstock} stock/chart/spacingright/\n             *         Spacing set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingRight\n             */\n            /**\n             * The space between the top edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingtop-100/\n             *         A top spacing of 100\n             * @sample {highcharts} highcharts/chart/spacingtop-10/\n             *         Floating chart title makes the plot area align to the default\n             *         spacingTop of 10.\n             * @sample {highstock} stock/chart/spacingtop/\n             *         A top spacing of 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingTop\n             */\n            /**\n             * Additional CSS styles to apply inline to the container `div` and the root\n             * SVG.\n             *\n             * According to the CSS syntax documentation, it is recommended to quote\n             * font family names that contain white space, digits, or punctuation\n             * characters other than hyphens. In such cases, wrap the fontFamily\n             * name as follows: `fontFamily: '\"Font name\"'`.\n             *\n             * Since v11, the root font size is 1rem by default, and all child element\n             * are given a relative `em` font size by default. This allows implementers\n             * to control all the chart's font sizes by only setting the root level.\n             *\n             * @see    In styled mode, general chart styles can be set with the\n             *         `.highcharts-root` class.\n             * @sample {highcharts} highcharts/chart/style-serif-font/\n             *         Using a serif type font\n             * @sample {highcharts} highcharts/chart/style-special-font/\n             *         Using a font with special character in name\n             * @sample {highcharts} highcharts/members/relative-font-size/\n             *         Relative font sizes\n             * @sample {highcharts} highcharts/css/em/\n             *         Styled mode with relative font sizes\n             * @sample {highstock} stock/chart/style/\n             *         Using a serif type font\n             * @sample {highmaps} maps/chart/style-serif-font/\n             *         Using a serif type font\n             *\n             * @type      {Highcharts.CSSObject}\n             * @default   {\"fontFamily\": \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', sans-serif\", \"fontSize\":\"1rem\"}\n             * @apioption chart.style\n             */\n            /**\n             * The default series type for the chart. Can be any of the chart types\n             * listed under [plotOptions](#plotOptions) and [series](#series) or can\n             * be a series provided by an additional module.\n             *\n             * In TypeScript this option has no effect in sense of typing and\n             * instead the `type` option must always be set in the series.\n             *\n             * @sample {highcharts} highcharts/chart/type-bar/\n             *         Bar\n             * @sample {highstock} stock/chart/type/\n             *         Areaspline\n             * @sample {highmaps} maps/chart/type-mapline/\n             *         Mapline\n             *\n             * @type       {string}\n             * @default    {highcharts} line\n             * @default    {highstock} line\n             * @default    {highmaps} map\n             * @since      2.1.0\n             * @apioption  chart.type\n             */\n            type: 'line',\n            /**\n             * Decides in what dimensions the user can zoom by dragging the mouse.\n             * Can be one of `x`, `y` or `xy`.\n             *\n             * @see [panKey](#chart.panKey)\n             *\n             * @sample {highcharts} highcharts/chart/zoomtype-none/\n             *         None by default\n             * @sample {highcharts} highcharts/chart/zoomtype-x/\n             *         X\n             * @sample {highcharts} highcharts/chart/zoomtype-y/\n             *         Y\n             * @sample {highcharts} highcharts/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highcharts} highcharts/chart/zoomtype-polar/\n             *         Zoom on polar chart\n             * @sample {highstock} stock/demo/basic-line/\n             *         None by default\n             * @sample {highstock} stock/chart/zoomtype-x/\n             *         X\n             * @sample {highstock} stock/chart/zoomtype-y/\n             *         Y\n             * @sample {highstock} stock/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highmaps} maps/chart/zoomtype-xy/\n             *         Map with selection zoom\n             *\n             * @type       {string}\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @deprecated\n             * @apioption  chart.zoomType\n             */\n            /**\n             * Enables zooming by a single touch, in combination with\n             * [chart.zoomType](#chart.zoomType). When enabled, two-finger pinch\n             * will still work as set up by [chart.pinchType](#chart.pinchType).\n             * However, `zoomBySingleTouch` will interfere with touch-dragging the\n             * chart to read the tooltip. And especially when vertical zooming is\n             * enabled, it will make it hard to scroll vertically on the page.\n             * @since      9.0.0\n             * @sample     highcharts/chart/zoombysingletouch\n             *             Zoom by single touch enabled, with buttons to toggle\n             * @product    highcharts highstock gantt\n             * @deprecated\n             */\n            /**\n             * Chart zooming options.\n             * @since 10.2.1\n             */\n            zooming: {\n                /**\n                 * Equivalent to [type](#chart.zooming.type), but for multitouch\n                 * gestures only. By default, the `pinchType` is the same as the\n                 * `type` setting. However, pinching can be enabled separately in\n                 * some cases, for example in stock charts where a mouse drag pans the\n                 * chart, while pinching is enabled. When [tooltip.followTouchMove](\n                 * #tooltip.followTouchMove) is true, pinchType only applies to\n                 * two-finger touches.\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @default    {highstock} x\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.pinchType\n                 */\n                /**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * @declare    Highcharts.OptionsChartZoomingTypeValue\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.type\n                 */\n                /**\n                 * Set a key to hold when dragging to zoom the chart. This is useful to\n                 * avoid zooming while moving points. Should be set different than\n                 * [chart.panKey](#chart.panKey).\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @requires   modules/draggable-points\n                 * @apioption  chart.zooming.key\n                 */\n                /**\n                 * Enables zooming by a single touch, in combination with\n                 * [chart.zooming.type](#chart.zooming.type). When enabled, two-finger\n                 * pinch will still work as set up by [chart.zooming.pinchType]\n                 * (#chart.zooming.pinchType). However, `singleTouch` will interfere\n                 * with touch-dragging the chart to read the tooltip. And especially\n                 * when vertical zooming is enabled, it will make it hard to scroll\n                 * vertically on the page.\n                 *\n                 * @sample  highcharts/chart/zoombysingletouch\n                 *          Zoom by single touch enabled, with buttons to toggle\n                 *\n                 * @product highcharts highstock gantt\n                 */\n                singleTouch: false,\n                /**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 */\n                resetButton: {\n                    /**\n                     * What frame the button placement should be related to. Can be\n                     * either `plotBox` or `spacingBox`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     *\n                     * @type      {Highcharts.ButtonRelativeToValue}\n                     * @default   plot\n                     * @apioption chart.zooming.resetButton.relativeTo\n                     */\n                    /**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                     * border radius. The theme also supports `style`, a collection of\n                     * CSS properties for the text. Equivalent attributes for the hover\n                     * state are given in `theme.states.hover`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     *\n                     * @type  {Highcharts.SVGAttributes}\n                     * @since 10.2.1\n                     */\n                    theme: {\n                        /** @internal */\n                        zIndex: 6\n                    },\n                    /**\n                     * The position of the button.\n                     *\n                     * Note: Adjusting position values might cause overlap with chart\n                     * elements. Ensure coordinates do not obstruct other components or\n                     * data visibility.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     *\n                     * @type  {Highcharts.AlignObject}\n                     * @since 10.2.1\n                     */\n                    position: {\n                        /**\n                         * The horizontal alignment of the button.\n                         */\n                        align: 'right',\n                        /**\n                         * The horizontal offset of the button.\n                         */\n                        x: -10,\n                        /**\n                         * The vertical alignment of the button.\n                         *\n                         * @type       {Highcharts.VerticalAlignValue}\n                         * @default    top\n                         * @apioption  chart.zooming.resetButton.position.verticalAlign\n                         */\n                        /**\n                         * The vertical offset of the button.\n                         */\n                        y: 10\n                    }\n                }\n            },\n            /**\n             * An explicit width for the chart. By default (when `null`) the width\n             * is calculated from the offset width of the containing element.\n             *\n             * @sample {highcharts} highcharts/chart/width/\n             *         800px wide\n             * @sample {highstock} stock/chart/width/\n             *         800px wide\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             *\n             * @type {null|number|string}\n             */\n            width: null,\n            /**\n             * An explicit height for the chart. If a _number_, the height is\n             * given in pixels. If given a _percentage string_ (for example\n             * `'56%'`), the height is given as the percentage of the actual chart\n             * width. This allows for preserving the aspect ratio across responsive\n             * sizes.\n             *\n             * By default (when `null`) the height is calculated from the offset\n             * height of the containing element, or 400 pixels if the containing\n             * element's height is 0.\n             *\n             * @sample {highcharts} highcharts/chart/height/\n             *         Forced 200px height\n             * @sample {highstock} stock/chart/height/\n             *         300px height\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             * @sample highcharts/chart/height-percent/\n             *         Highcharts with percentage height\n             * @sample highcharts/chart/height-inherited/\n             *         Chart with inherited height\n             *\n             * @type {null|number|string}\n             */\n            height: null,\n            /**\n             * The color of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/bordercolor/\n             *         Brown border\n             * @sample {highstock} stock/chart/border/\n             *         Brown border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: \"#334eff\" /* Palette.highlightColor80 */,\n            /**\n             * The pixel width of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/borderwidth/\n             *         5px border\n             * @sample {highstock} stock/chart/border/\n             *         2px border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.borderWidth\n             */\n            /**\n             * The background color or gradient for the outer chart area.\n             *\n             * @see In styled mode, the background is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The background color or gradient for the plot area.\n             *\n             * @see In styled mode, the plot background is set with the\n             *      `.highcharts-plot-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption chart.plotBackgroundColor\n             */\n            /**\n             * The URL for an image to use as the plot background. To set an image\n             * as the background for the entire chart, set a CSS background image\n             * to the container element. Note that for the image to be applied to\n             * exported charts, its URL needs to be accessible by the export server.\n             *\n             * @see In styled mode, a plot background image can be set with the\n             *      `.highcharts-plot-background` class and a [custom pattern](\n             *      https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundimage/\n             *         Skies\n             * @sample {highstock} stock/chart/plotbackgroundimage/\n             *         Skies\n             *\n             * @type      {string}\n             * @apioption chart.plotBackgroundImage\n             */\n            /**\n             * The color of the inner chart or plot area border.\n             *\n             * @see In styled mode, a plot border stroke can be set with the\n             *      `.highcharts-plot-border` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbordercolor/\n             *         Blue border\n             * @sample {highstock} stock/chart/plotborder/\n             *         Blue border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            plotBorderColor: \"#cccccc\" /* Palette.neutralColor20 */\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartDefaults;\n    });\n    _registerModule(_modules, 'Core/Color/Palettes.js', [], function () {\n        /*\n         * Series palettes for Highcharts. Series colors are defined in highcharts.css.\n         * **Do not edit this file!** This file is generated using the 'gulp palette' task.\n         */\n        const SeriesPalettes = {\n            /**\n             * Colors for data series and points\n             */\n            colors: [\n                '#2caffe',\n                '#544fc5',\n                '#00e272',\n                '#fe6a35',\n                '#6b8abc',\n                '#d568fb',\n                '#2ee0ca',\n                '#fa4b42',\n                '#feb56a',\n                '#91e8e1'\n            ]\n        };\n\n        return SeriesPalettes;\n    });\n    _registerModule(_modules, 'Core/Time.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { defined, error, extend, isNumber, isObject, isString, merge, objectEach, pad, splat, timeUnits, ucfirst } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // To do: Remove this when we no longer need support for Safari < v14.1\n        const hasOldSafariBug = H.isSafari &&\n            win.Intl &&\n            !win.Intl.DateTimeFormat.prototype.formatRange;\n        const isDateTimeFormatOptions = (obj) => obj.main === void 0;\n        // We use the Spanish locale for internal weekday handling because it uses\n        // unique letters for narrow weekdays\n        const spanishWeekdayIndex = (weekday) => ['D', 'L', 'M', 'X', 'J', 'V', 'S'].indexOf(weekday);\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The Time class. Time settings are applied in general for each page using\n         * `Highcharts.setOptions`, or individually for each Chart item through the\n         * [time](https://api.highcharts.com/highcharts/time) options set.\n         *\n         * The Time object is available from {@link Highcharts.Chart#time},\n         * which refers to  `Highcharts.time` if no individual time settings are\n         * applied.\n         *\n         * @example\n         * // Apply time settings globally\n         * Highcharts.setOptions({\n         *     time: {\n         *         timezone: 'Europe/London'\n         *     }\n         * });\n         *\n         * // Apply time settings by instance\n         * const chart = Highcharts.chart('container', {\n         *     time: {\n         *         timezone: 'America/New_York'\n         *     },\n         *     series: [{\n         *         data: [1, 4, 3, 5]\n         *     }]\n         * });\n         *\n         * // Use the Time object of a chart instance\n         * console.log(\n         *        'Current time in New York',\n         *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n         * );\n         *\n         * // Standalone use\n         * const time = new Highcharts.Time({\n         *    timezone: 'America/New_York'\n         * });\n         * const s = time.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2020, 0, 1));\n         * console.log(s); // => 2019-12-31 19:00:00\n         *\n         * @since 6.0.5\n         *\n         * @class\n         * @name Highcharts.Time\n         *\n         * @param {Highcharts.TimeOptions} [options]\n         * Time options as defined in [chart.options.time](/highcharts/time).\n         */\n        class Time {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = {};\n                this.variableTimezone = false;\n                this.Date = win.Date;\n                this.update(options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Update the Time object with current options. It is called internally on\n             * initializing Highcharts, after running `Highcharts.setOptions` and on\n             * `Chart.update`.\n             *\n             * @private\n             * @function Highcharts.Time#update\n             *\n             * @param {Highcharts.TimeOptions} [options]\n             *\n             */\n            update(options = {}) {\n                let timezone = options.timezone ?? 'UTC';\n                this.dTLCache = {};\n                this.options = options = merge(true, this.options, options);\n                const { timezoneOffset, useUTC } = options;\n                // Allow using a different Date class\n                this.Date = options.Date || win.Date || Date;\n                if (defined(useUTC)) {\n                    timezone = useUTC ? 'UTC' : void 0;\n                }\n                // The Etc/GMT time zones do not support offsets with half-hour\n                // resolutions\n                if (timezoneOffset && timezoneOffset % 60 === 0) {\n                    timezone = 'Etc/GMT' + ((timezoneOffset > 0 ? '+' : '')) + timezoneOffset / 60;\n                }\n                /*\n                 * The time object has options allowing for variable time zones, meaning\n                 * the axis ticks or series data needs to consider this.\n                 */\n                this.variableTimezone = timezone !== 'UTC' &&\n                    timezone?.indexOf('Etc/GMT') !== 0;\n                this.timezone = timezone;\n                // Assign default time formats from locale strings\n                ['months', 'shortMonths', 'weekdays', 'shortWeekdays'].forEach((name) => {\n                    const isMonth = /months/i.test(name), isShort = /short/.test(name), options = { timeZone: 'UTC' };\n                    options[isMonth ? 'month' : 'weekday'] = isShort ? 'short' : 'long';\n                    this[name] = (isMonth ?\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] :\n                        [3, 4, 5, 6, 7, 8, 9]).map((position) => this.dateFormat(options, (isMonth ? 31 : 1) * 24 * 36e5 * position));\n                });\n            }\n            /**\n             * Get a date in terms of numbers (year, month, day etc) for further\n             * processing. Takes the current `timezone` setting into account. Inverse of\n             * `makeTime` and the native `Date` constructor and `Date.UTC`.\n             *\n             * The date is returned in array format with the following indices:\n             *\n             * 0: year,\n             * 1: month (zero based),\n             * 2: day,\n             * 3: hours,\n             * 4: minutes,\n             * 5: seconds,\n             * 6: milliseconds,\n             * 7: weekday (Sunday as 0)\n             *\n             * @function Highcharts.Time#toParts\n             *\n             * @param {number|Date} [timestamp]\n             *                 The timestamp in milliseconds since January 1st 1970.\n             *                 A Date object is also accepted.\n             *\n             * @return {Array<number>} The date parts in array format.\n             */\n            toParts(timestamp) {\n                const [weekday, dayOfMonth, month, year, hours, minutes, seconds] = this.dateTimeFormat({\n                    weekday: 'narrow',\n                    day: 'numeric',\n                    month: 'numeric',\n                    year: 'numeric',\n                    hour: 'numeric',\n                    minute: 'numeric',\n                    second: 'numeric'\n                }, timestamp, 'es')\n                    .split(/(?:, |\\/|:)/g);\n                return [\n                    year,\n                    +month - 1,\n                    dayOfMonth,\n                    hours,\n                    minutes,\n                    seconds,\n                    // Milliseconds\n                    Math.floor(Number(timestamp) || 0) % 1000,\n                    // Weekday index\n                    spanishWeekdayIndex(weekday)\n                ].map(Number);\n            }\n            /**\n             * Shorthand to get a cached `Intl.DateTimeFormat` instance.\n             */\n            dateTimeFormat(options, timestamp, locale = this.options.locale) {\n                const cacheKey = JSON.stringify(options) + locale;\n                if (isString(options)) {\n                    options = this.str2dtf(options);\n                }\n                let dTL = this.dTLCache[cacheKey];\n                if (!dTL) {\n                    options.timeZone ?? (options.timeZone = this.timezone);\n                    try {\n                        dTL = new Intl.DateTimeFormat(locale, options);\n                    }\n                    catch (e) {\n                        if (/Invalid time zone/i.test(e.message)) {\n                            error(34);\n                            options.timeZone = 'UTC';\n                            dTL = new Intl.DateTimeFormat(locale, options);\n                        }\n                        else {\n                            error(e.message, false);\n                        }\n                    }\n                }\n                this.dTLCache[cacheKey] = dTL;\n                return dTL?.format(timestamp) || '';\n            }\n            /**\n             * Take a locale-aware string format and return a full DateTimeFormat in\n             * object form.\n             */\n            str2dtf(s, dtf = {}) {\n                const mapping = {\n                    L: { fractionalSecondDigits: 3 },\n                    S: { second: '2-digit' },\n                    M: { minute: 'numeric' },\n                    H: { hour: '2-digit' },\n                    k: { hour: 'numeric' },\n                    E: { weekday: 'narrow' },\n                    a: { weekday: 'short' },\n                    A: { weekday: 'long' },\n                    d: { day: '2-digit' },\n                    e: { day: 'numeric' },\n                    b: { month: 'short' },\n                    B: { month: 'long' },\n                    m: { month: '2-digit' },\n                    o: { month: 'numeric' },\n                    y: { year: '2-digit' },\n                    Y: { year: 'numeric' }\n                };\n                Object.keys(mapping).forEach((key) => {\n                    if (s.indexOf(key) !== -1) {\n                        extend(dtf, mapping[key]);\n                    }\n                });\n                return dtf;\n            }\n            /**\n             * Make a time and returns milliseconds. Similar to `Date.UTC`, but takes\n             * the current `timezone` setting into account.\n             *\n             * @function Highcharts.Time#makeTime\n             *\n             * @param {number} year\n             *        The year\n             *\n             * @param {number} month\n             *        The month. Zero-based, so January is 0.\n             *\n             * @param {number} [date=1]\n             *        The day of the month\n             *\n             * @param {number} [hours=0]\n             *        The hour of the day, 0-23.\n             *\n             * @param {number} [minutes=0]\n             *        The minutes\n             *\n             * @param {number} [seconds=0]\n             *        The seconds\n             *\n             * @return {number}\n             *         The time in milliseconds since January 1st 1970.\n             */\n            makeTime(year, month, date = 1, hours = 0, minutes, seconds, milliseconds) {\n                // eslint-disable-next-line new-cap\n                let d = this.Date.UTC(year, month, date, hours, minutes || 0, seconds || 0, milliseconds || 0);\n                if (this.timezone !== 'UTC') {\n                    const offset = this.getTimezoneOffset(d);\n                    d += offset;\n                    // Adjustments close to DST transitions\n                    if (\n                    // Optimize for speed by limiting the number of calls to\n                    // `getTimezoneOffset`. According to\n                    // https://en.wikipedia.org/wiki/Daylight_saving_time_by_country,\n                    // DST change may only occur in these months.\n                    [2, 3, 8, 9, 10, 11].indexOf(month) !== -1 &&\n                        // DST transitions occur only in the night-time\n                        (hours < 5 || hours > 20)) {\n                        const newOffset = this.getTimezoneOffset(d);\n                        if (offset !== newOffset) {\n                            d += newOffset - offset;\n                            // A special case for transitioning from summer time to winter\n                            // time. When the clock is set back, the same time is repeated\n                            // twice, i.e. 02:30 am is repeated since the clock is set back\n                            // from 3 am to 2 am. We need to make the same time as local\n                            // Date does.\n                        }\n                        else if (offset - 36e5 === this.getTimezoneOffset(d - 36e5) &&\n                            !hasOldSafariBug) {\n                            d -= 36e5;\n                        }\n                    }\n                }\n                return d;\n            }\n            /**\n             * Parse a datetime string. Unless the string contains time zone\n             * information, apply the current `timezone` from options. If the argument\n             * is a number, return it.\n             *\n             * @function Highcharts.Time#parse\n             * @param    {string|number|undefined} s The datetime string to parse\n             * @return   {number|undefined}          Parsed JavaScript timestamp\n             */\n            parse(s) {\n                if (!isString(s)) {\n                    return s ?? void 0;\n                }\n                s = s\n                    // Firefox fails on YYYY/MM/DD\n                    .replace(/\\//g, '-')\n                    // Replace some non-standard notations\n                    .replace(/(GMT|UTC)/, '');\n                // Extend shorthand hour timezone offset like +02\n                // .replace(/([+-][0-9]{2})$/, '$1:00');\n                // Check if the string has time zone information\n                const hasTimezone = s.indexOf('Z') > -1 ||\n                    /([+-][0-9]{2}):?[0-9]{2}$/.test(s), isYYYYMMDD = /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(s);\n                if (!hasTimezone && !isYYYYMMDD) {\n                    s += 'Z';\n                }\n                const ts = Date.parse(s);\n                if (isNumber(ts)) {\n                    // Unless the string contains time zone information, convert from\n                    // the local time result of `Date.parse` via UTC into the current\n                    // timezone of the time object.\n                    return ts + ((!hasTimezone || isYYYYMMDD) ?\n                        this.getTimezoneOffset(ts) :\n                        0);\n                }\n            }\n            /**\n             * Get the time zone offset based on the current timezone information as\n             * set in the global options.\n             *\n             * @function Highcharts.Time#getTimezoneOffset\n             *\n             * @param {number} timestamp\n             *        The JavaScript timestamp to inspect.\n             *\n             * @return {number}\n             *         The timezone offset in minutes compared to UTC.\n             */\n            getTimezoneOffset(timestamp) {\n                if (this.timezone !== 'UTC') {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const [date, gmt, hours, colon, minutes = 0] = this.dateTimeFormat({ timeZoneName: 'shortOffset' }, timestamp, 'en')\n                        .split(/(GMT|:)/)\n                        .map(Number), offset = -(hours + minutes / 60) * 60 * 60000;\n                    // Possible future NaNs stop here\n                    if (isNumber(offset)) {\n                        return offset;\n                    }\n                }\n                return 0;\n            }\n            /**\n             * Formats a JavaScript date timestamp (milliseconds since January 1 1970)\n             * into a human readable date string.\n             *\n             * The `format` parameter accepts two types of values:\n             * - An object containing settings that are passed directly on to\n             *   [Intl.DateTimeFormat.prototype.format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format).\n             * - A format string containing either individual or locale-aware format\n             *   keys. **Individual keys**, for example `%Y-%m-%d`, are listed below.\n             *   **Locale-aware keys** are grouped by square brackets, for example\n             *   `%[Ymd]`. The order of keys within the square bracket doesn't affect\n             *   the output, which is determined by the locale. See example below.\n             *   Internally, the locale-aware format keys are just a shorthand for the\n             *   full object formats, but are particularly practical in\n             *   [templating](https://www.highcharts.com/docs/chart-concepts/templating)\n             *   where full object definitions are not an option.\n             *\n             * The available string format keys are listed below. Additional formats can\n             * be given in the {@link Highcharts.dateFormats} hook.\n             *\n             * Supported format keys:\n             * | Key  | Description                     | Notes on locale-aware format |\n             * -------|----------------------------------------------|-------|\n             * | `%A` | Long weekday, like 'Monday'                  |       |\n             * | `%a` | Short weekday, like 'Mon'                    |       |\n             * | `%E` | Narrow weekday, single character             |       |\n             * | `%d` | Two digit day of the month, 01 to 31         |       |\n             * | `%e` | Day of the month, 1 through 31               |       |\n             * | `%w` | Day of the week, 0 through 6                 | N/A   |\n             * | `%b` | Short month, like 'Jan'                      |       |\n             * | `%B` | Long month, like 'January'                   |       |\n             * | `%m` | Two digit month number, 01 through 12        |       |\n             * | `%o` | Month number, 1 through 12                   |       |\n             * | `%y` | Two digits year, like 24 for 2024            |       |\n             * | `%Y` | Four digits year, like 2024                  |       |\n             * | `%H` | Two digits hours in 24h format, 00 through 23 | Depending on the locale, 12h format may be instered. |\n             * | `%k` | Hours in 24h format, 0 through 23            | Depending on the locale, 12h format may be instered. |\n             * | `%I` | Two digits hours in 12h format, 00 through 11 | N/A. The locale determines the hour format. |\n             * | `%l` | Hours in 12h format, 1 through 12            | N/A. The locale determines the hour format. |\n             * | `%M` | Two digits minutes, 00 through 59            |       |\n             * | `%p` | Upper case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n             * | `%P` | Lower case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n             * | `%S` | Two digits seconds, 00 through 59            |       |\n             * | `%L` | Milliseconds (naming from Ruby)              |       |\n             *\n             * @example\n             * // Object format, US English\n             * const time1 = new Highcharts.Time({ locale: 'en-US' });\n             * console.log(\n             *     time1.dateFormat({\n             *         day: 'numeric',\n             *         month: 'short',\n             *         year: 'numeric',\n             *         hour: 'numeric',\n             *         minute: 'numeric'\n             *     }, Date.UTC(2024, 11, 31))\n             * ); // => Dec 31, 2024, 12:00 AM\n             *\n             * // Object format, British English\n             * const time2 = new Highcharts.Time({ locale: 'en-GB' });\n             * console.log(\n             *     time2.dateFormat({\n             *         day: 'numeric',\n             *         month: 'short',\n             *         year: 'numeric',\n             *         hour: 'numeric',\n             *         minute: 'numeric'\n             *     }, Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * // Individual key string replacement\n             * const time3 = new Highcharts.Time();\n             * console.log(\n             *     time3.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2024, 11, 31))\n             * ); // => 2024-12-31 00:00:00\n             *\n             * // Locale-aware keys, US English\n             * const time4 = new Highcharts.Time({ locale: 'en-US' });\n             * console.log(\n             *     time4.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n             * ); // => Dec 31, 2024, 12:00 AM\n             *\n             * // Locale-aware keys, British English\n             * const time5 = new Highcharts.Time({ locale: 'en-GB' });\n             * console.log(\n             *     time5.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * // Mixed locale-aware and individual keys\n             * console.log(\n             *     time5.dateFormat('%[Yeb], %H:%M', Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * @function Highcharts.Time#dateFormat\n             *\n             * @param {string|Highcharts.DateTimeFormatOptions} format\n             *        The desired string format where various time representations are\n             *        prefixed with %, or an object representing the locale-aware format\n             *        options.\n             *\n             * @param {number} [timestamp]\n             *        The JavaScript timestamp.\n             *\n             * @param {boolean} [upperCaseFirst=false]\n             *        Upper case first letter in the return.\n             *\n             * @return {string}\n             *         The formatted date.\n             */\n            dateFormat(format, timestamp, upperCaseFirst) {\n                const lang = H.defaultOptions?.lang;\n                if (!defined(timestamp) || isNaN(timestamp)) {\n                    return lang?.invalidDate || '';\n                }\n                format = format ?? '%Y-%m-%d %H:%M:%S';\n                // First, identify and replace locale-aware formats like %[Ymd]\n                if (isString(format)) {\n                    const localeAwareRegex = /%\\[([a-zA-Z]+)\\]/g;\n                    let match;\n                    while ((match = localeAwareRegex.exec(format))) {\n                        format = format.replace(match[0], this.dateTimeFormat(match[1], timestamp));\n                    }\n                }\n                // Then, replace static formats like %Y, %m, %d etc.\n                if (isString(format) && format.indexOf('%') !== -1) {\n                    const time = this, [fullYear, month, dayOfMonth, hours, minutes, seconds, milliseconds, weekday] = this.toParts(timestamp), langWeekdays = lang?.weekdays || this.weekdays, shortWeekdays = lang?.shortWeekdays || this.shortWeekdays, months = lang?.months || this.months, shortMonths = lang?.shortMonths || this.shortMonths, \n                    // List all format keys. Custom formats can be added from the\n                    // outside.\n                    replacements = extend({\n                        // Day\n                        // Short weekday, like 'Mon'\n                        a: shortWeekdays ?\n                            shortWeekdays[weekday] :\n                            langWeekdays[weekday].substr(0, 3),\n                        // Long weekday, like 'Monday'\n                        A: langWeekdays[weekday],\n                        // Two digit day of the month, 01 to 31\n                        d: pad(dayOfMonth),\n                        // Day of the month, 1 through 31\n                        e: pad(dayOfMonth, 2, ' '),\n                        // Day of the week, 0 through 6\n                        w: weekday,\n                        // Week (none implemented)\n                        // 'W': weekNumber(),\n                        // Month\n                        // Short month, like 'Jan'\n                        b: shortMonths[month],\n                        // Long month, like 'January'\n                        B: months[month],\n                        // Two digit month number, 01 through 12\n                        m: pad(month + 1),\n                        // Month number, 1 through 12 (#8150)\n                        o: month + 1,\n                        // Year\n                        // Two digits year, like 09 for 2009\n                        y: fullYear.toString().substr(2, 2),\n                        // Four digits year, like 2009\n                        Y: fullYear,\n                        // Time\n                        // Two digits hours in 24h format, 00 through 23\n                        H: pad(hours),\n                        // Hours in 24h format, 0 through 23\n                        k: hours,\n                        // Two digits hours in 12h format, 00 through 11\n                        I: pad((hours % 12) || 12),\n                        // Hours in 12h format, 1 through 12\n                        l: (hours % 12) || 12,\n                        // Two digits minutes, 00 through 59\n                        M: pad(minutes),\n                        // Upper case AM or PM\n                        p: hours < 12 ? 'AM' : 'PM',\n                        // Lower case AM or PM\n                        P: hours < 12 ? 'am' : 'pm',\n                        // Two digits seconds, 00 through 59\n                        S: pad(seconds),\n                        // Milliseconds (naming from Ruby)\n                        L: pad(milliseconds, 3)\n                    }, H.dateFormats);\n                    // Do the replaces\n                    objectEach(replacements, function (val, key) {\n                        if (isString(format)) {\n                            // Regex would do it in one line, but this is faster\n                            while (format.indexOf('%' + key) !== -1) {\n                                format = format.replace('%' + key, typeof val === 'function' ?\n                                    val.call(time, timestamp) :\n                                    val);\n                            }\n                        }\n                    });\n                }\n                else if (isObject(format)) {\n                    const tzHours = (this.getTimezoneOffset(timestamp) || 0) /\n                        (60000 * 60), timeZone = this.options.timezone || ('Etc/GMT' + (tzHours >= 0 ? '+' : '') + tzHours), { prefix = '', suffix = '' } = format;\n                    format = prefix + this.dateTimeFormat(extend({ timeZone }, format), timestamp) + suffix;\n                }\n                // Optionally sentence-case the string and return\n                return upperCaseFirst ? ucfirst(format) : format;\n            }\n            /**\n             * Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\n             * an object.\n             * @private\n             * @param {string|Array<T>|Highcharts.Dictionary<T>} f\n             * General format description\n             * @return {Highcharts.Dictionary<T>}\n             * The object definition\n             */\n            resolveDTLFormat(f) {\n                if (!isObject(f, true)) { // Check for string or array\n                    f = splat(f);\n                    return {\n                        main: f[0],\n                        from: f[1],\n                        to: f[2]\n                    };\n                }\n                // Type-check DateTimeFormatOptions against DateTimeLabelFormatObject\n                if (isObject(f, true) && isDateTimeFormatOptions(f)) {\n                    return { main: f };\n                }\n                return f;\n            }\n            /**\n             * Return an array with time positions distributed on round time values\n             * right and right after min and max. Used in datetime axes as well as for\n             * grouping data on a datetime axis.\n             *\n             * @function Highcharts.Time#getTimeTicks\n             *\n             * @param {Highcharts.TimeNormalizedObject} normalizedInterval\n             *        The interval in axis values (ms) and the count\n             *\n             * @param {number} [min]\n             *        The minimum in axis values\n             *\n             * @param {number} [max]\n             *        The maximum in axis values\n             *\n             * @param {number} [startOfWeek=1]\n             *\n             * @return {Highcharts.AxisTickPositionsArray}\n             * Time positions\n             */\n            getTimeTicks(normalizedInterval, min, max, startOfWeek) {\n                const time = this, tickPositions = [], higherRanks = {}, { count = 1, unitRange } = normalizedInterval;\n                let [year, month, dayOfMonth, hours, minutes, seconds] = time.toParts(min), milliseconds = (min || 0) % 1000, variableDayLength;\n                startOfWeek ?? (startOfWeek = 1);\n                if (defined(min)) { // #1300\n                    milliseconds = unitRange >= timeUnits.second ?\n                        0 : // #3935\n                        count * Math.floor(milliseconds / count);\n                    if (unitRange >= timeUnits.second) { // Second\n                        seconds = unitRange >= timeUnits.minute ?\n                            0 : // #3935\n                            count * Math.floor(seconds / count);\n                    }\n                    if (unitRange >= timeUnits.minute) { // Minute\n                        minutes = unitRange >= timeUnits.hour ?\n                            0 :\n                            count * Math.floor(minutes / count);\n                    }\n                    if (unitRange >= timeUnits.hour) { // Hour\n                        hours = unitRange >= timeUnits.day ?\n                            0 :\n                            count * Math.floor(hours / count);\n                    }\n                    if (unitRange >= timeUnits.day) { // Day\n                        dayOfMonth = unitRange >= timeUnits.month ?\n                            1 :\n                            Math.max(1, count * Math.floor(dayOfMonth / count));\n                    }\n                    if (unitRange >= timeUnits.month) { // Month\n                        month = unitRange >= timeUnits.year ? 0 :\n                            count * Math.floor(month / count);\n                    }\n                    if (unitRange >= timeUnits.year) { // Year\n                        year -= year % count;\n                    }\n                    // Week is a special case that runs outside the hierarchy\n                    if (unitRange === timeUnits.week) {\n                        if (count) {\n                            min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n                        }\n                        // Get start of current week, independent of count\n                        const weekday = this.dateTimeFormat({\n                            timeZone: this.timezone,\n                            weekday: 'narrow'\n                        }, min, 'es'), weekdayNo = spanishWeekdayIndex(weekday);\n                        dayOfMonth += -weekdayNo + startOfWeek +\n                            // We don't want to skip days that are before\n                            // startOfWeek (#7051)\n                            (weekdayNo < startOfWeek ? -7 : 0);\n                    }\n                    min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n                    // Handle local timezone offset\n                    if (time.variableTimezone && defined(max)) {\n                        // Detect whether we need to take the DST crossover into\n                        // consideration. If we're crossing over DST, the day length may\n                        // be 23h or 25h and we need to compute the exact clock time for\n                        // each tick instead of just adding hours. This comes at a cost,\n                        // so first we find out if it is needed (#4951).\n                        variableDayLength = (\n                        // Long range, assume we're crossing over.\n                        max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time\n                            // zones.\n                            time.getTimezoneOffset(min) !==\n                                time.getTimezoneOffset(max));\n                    }\n                    // Iterate and add tick positions at appropriate values\n                    let t = min, i = 1;\n                    while (t < max) {\n                        tickPositions.push(t);\n                        // Increase the years\n                        if (unitRange === timeUnits.year) {\n                            t = time.makeTime(year + i * count, 0);\n                            // Increase the months\n                        }\n                        else if (unitRange === timeUnits.month) {\n                            t = time.makeTime(year, month + i * count);\n                            // If we're using local time, the interval is not fixed as it\n                            // jumps one hour at the DST crossover\n                        }\n                        else if (variableDayLength && (unitRange === timeUnits.day ||\n                            unitRange === timeUnits.week)) {\n                            t = time.makeTime(year, month, dayOfMonth +\n                                i * count * (unitRange === timeUnits.day ? 1 : 7));\n                        }\n                        else if (variableDayLength &&\n                            unitRange === timeUnits.hour &&\n                            count > 1) {\n                            // Make sure higher ranks are preserved across DST (#6797,\n                            // #7621)\n                            t = time.makeTime(year, month, dayOfMonth, hours + i * count);\n                            // Else, the interval is fixed and we use simple addition\n                        }\n                        else {\n                            t += unitRange * count;\n                        }\n                        i++;\n                    }\n                    // Push the last time\n                    tickPositions.push(t);\n                    // Handle higher ranks. Mark new days if the time is on midnight\n                    // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold\n                    // to prevent looping over dense data grouping (#6156).\n                    if (unitRange <= timeUnits.hour && tickPositions.length < 10000) {\n                        tickPositions.forEach((t) => {\n                            if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            t % 1800000 === 0 &&\n                                // Check for local or global midnight\n                                time.dateFormat('%H%M%S%L', t) === '000000000') {\n                                higherRanks[t] = 'day';\n                            }\n                        });\n                    }\n                }\n                // Record information on the chosen unit - for dynamic label formatter\n                tickPositions.info = extend(normalizedInterval, {\n                    higherRanks,\n                    totalRange: unitRange * count\n                });\n                return tickPositions;\n            }\n            /**\n             * Get the optimal date format for a point, based on a range.\n             *\n             * @private\n             * @function Highcharts.Time#getDateFormat\n             *\n             * @param {number} range\n             *        The time range\n             *\n             * @param {number} timestamp\n             *        The timestamp of the date\n             *\n             * @param {number} startOfWeek\n             *        An integer representing the first day of the week, where 0 is\n             *        Sunday.\n             *\n             * @param {Highcharts.Dictionary<string>} dateTimeLabelFormats\n             *        A map of time units to formats.\n             *\n             * @return {string}\n             *         The optimal date format for a point.\n             */\n            getDateFormat(range, timestamp, startOfWeek, dateTimeLabelFormats) {\n                const dateStr = this.dateFormat('%m-%d %H:%M:%S.%L', timestamp), blank = '01-01 00:00:00.000', strpos = {\n                    millisecond: 15,\n                    second: 12,\n                    minute: 9,\n                    hour: 6,\n                    day: 3\n                };\n                let n = 'millisecond', \n                // For sub-millisecond data, #4223\n                lastN = n;\n                for (n in timeUnits) { // eslint-disable-line guard-for-in\n                    // If the range is exactly one week and we're looking at a\n                    // Sunday/Monday, go for the week format\n                    if (range === timeUnits.week &&\n                        +this.dateFormat('%w', timestamp) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n                    // The first format that is too great for the range\n                    if (timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] &&\n                        dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n                    // Weeks are outside the hierarchy, only apply them on\n                    // Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n                return this.resolveDTLFormat(dateTimeLabelFormats[n]).main;\n            }\n        }\n        /* *\n         *\n         * Default export\n         *\n         * */\n        /* *\n         *\n         * API Declarations\n         *\n         * */\n        /**\n         * Normalized interval.\n         *\n         * @interface Highcharts.TimeNormalizedObject\n         */ /**\n        * The count.\n        *\n        * @name Highcharts.TimeNormalizedObject#count\n        * @type {number|undefined}\n        */ /**\n        * The interval in axis values (ms).\n        *\n        * @name Highcharts.TimeNormalizedObject#unitRange\n        * @type {number}\n        */\n        /**\n         * Function of an additional date format specifier.\n         *\n         * @callback Highcharts.TimeFormatCallbackFunction\n         *\n         * @param {number} timestamp\n         *        The time to format.\n         *\n         * @return {string}\n         *         The formatted portion of the date.\n         */\n        /**\n         * Time ticks.\n         *\n         * @interface Highcharts.AxisTickPositionsArray\n         * @extends global.Array<number>\n         */ /**\n        * @name Highcharts.AxisTickPositionsArray#info\n        * @type {Highcharts.TimeTicksInfoObject|undefined}\n        */\n        /**\n         * A callback to return the time zone offset for a given datetime. It\n         * takes the timestamp in terms of milliseconds since January 1 1970,\n         * and returns the timezone offset in minutes. This provides a hook\n         * for drawing time based charts in specific time zones using their\n         * local DST crossover dates, with the help of external libraries.\n         *\n         * @callback Highcharts.TimezoneOffsetCallbackFunction\n         *\n         * @param {number} timestamp\n         * Timestamp in terms of milliseconds since January 1 1970.\n         *\n         * @return {number}\n         * Timezone offset in minutes.\n         */\n        /**\n         * Options for formatting dates and times using the [Intl.DateTimeFormat](\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\n         * ) API, and extended with some custom options for Highcharts.\n         *\n         * @interface Highcharts.DateTimeFormatOptions\n         */ /**\n        * The locale matching algorithm to use.\n        *\n        * @name Highcharts.DateTimeFormatOptions#localeMatcher\n        * @type {string|undefined}\n        */ /**\n        * The time zone to use. The default is the browser's default time zone.\n        *\n        * @name Highcharts.DateTimeFormatOptions#timeZone\n        * @type {string|undefined}\n        */ /**\n        * Whether to use 12-hour time (as opposed to 24-hour time).\n        *\n        * @name Highcharts.DateTimeFormatOptions#hour12\n        * @type {'auto'|'always'|'never'|undefined}\n        */ /**\n        * The format matching algorithm to use.\n        *\n        * @name Highcharts.DateTimeFormatOptions#formatMatcher\n        * @type {string|undefined}\n        */ /**\n        * The representation of the weekday.\n        *\n        * @name Highcharts.DateTimeFormatOptions#weekday\n        * @type {'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the era.\n        *\n        * @name Highcharts.DateTimeFormatOptions#era\n        * @type {'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the year.\n        *\n        * @name Highcharts.DateTimeFormatOptions#year\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the month.\n        * \"narrow\", \"short\", \"long\".\n        *\n        * @name Highcharts.DateTimeFormatOptions#month\n        * @type {'numeric'|'2-digit'|'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the day.\n        *\n        * @name Highcharts.DateTimeFormatOptions#day\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the hour.\n        *\n        * @name Highcharts.DateTimeFormatOptions#hour\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the minute.\n        *\n        * @name Highcharts.DateTimeFormatOptions#minute\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the second.\n        *\n        * @name Highcharts.DateTimeFormatOptions#second\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The number of fractional digits to use. 3 means milliseconds.\n        *\n        * @name Highcharts.DateTimeFormatOptions#fractionalSecondDigits\n        * @type {number|undefined}\n        */ /**\n        * The representation of the time zone name.\n        *\n        * @name Highcharts.DateTimeFormatOptions#timeZoneName\n        * @type {'short'|'long'|undefined}\n        */ /**\n        * A prefix for the time string. Custom Highcharts option.\n        *\n        * @name Highcharts.DateTimeFormatOptions#prefix\n        * @type {'string'|undefined}\n        */ /**\n        * A suffix for the time string. Custom Highcharts option.\n        *\n        * @name Highcharts.DateTimeFormatOptions#suffix\n        * @type {'string'|undefined}\n        */\n        ''; // Keeps doclets above in JS file\n\n        return Time;\n    });\n    _registerModule(_modules, 'Core/Defaults.js', [_modules['Core/Chart/ChartDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Time.js'], _modules['Core/Utilities.js']], function (ChartDefaults, H, Palettes, Time, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { fireEvent, merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Global default settings.\n         *\n         * @name Highcharts.defaultOptions\n         * @type {Highcharts.Options}\n         */ /**\n        * @optionparent\n        * @private\n        */\n        const defaultOptions = {\n            /**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors),\n             * [pie.colors](#plotOptions.pie.colors).\n             *\n             * In styled mode, the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             * @sample {highcharts} highcharts/chart/colors/\n             *         Assign a global color theme\n             * @sample highcharts/members/theme-v10/\n             *         Latest release styled like version 10\n             *\n             * @type    {Array<(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)>}\n             * @default [\n             *     \"#2caffe\",\n             *     \"#544fc5\",\n             *     \"#00e272\",\n             *     \"#fe6a35\",\n             *     \"#6b8abc\",\n             *     \"#d568fb\",\n             *     \"#2ee0ca\",\n             *     \"#fa4b42\",\n             *     \"#feb56a\",\n             *     \"#91e8e1\"\n             * ]\n             */\n            colors: Palettes.colors,\n            /**\n             * Styled mode only. Configuration object for adding SVG definitions for\n             * reusable elements. See [gradients, shadows and\n             * patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\n             * for more information and code examples.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @apioption defs\n             */\n            /**\n             * @ignore-option\n             */\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            /**\n             * An object containing language-related strings and settings. A typical\n             * setup uses `Highcharts.setOptions` to make the options apply to all\n             * charts in the same page.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     lang: {\n             *         locale: 'fr'\n             *     }\n             * });\n             * ```\n             */\n            lang: {\n                /**\n                 * The browser locale to use for date and number formatting. The actual\n                 * locale used for each chart is determined in three steps:\n                 * 1. If this `lang.locale` option is specified, it is used.\n                 * 2. Else, look for the closest ancestor HTML element with a `lang`\n                 *    attribute, typically the `<html>` element.\n                 * 3. If no 'lang' attribute is found, use the default browser locale.\n                 *\n                 * Use `en-GB`, British English, for approximate consistency with\n                 * Highcharts v < 12.\n                 *\n                 * @sample highcharts/lang/locale/\n                 *         Set the locale using the `lang.locale` option\n                 * @sample highcharts/lang/locale-attribute/\n                 *         Pick up the locale from the HTML `lang` attribute\n                 * @sample highcharts/members/highcharts-numberformat\n                 *         Arabic locale with digits and dates         *\n                 *\n                 * @since 12.0.0\n                 * @type {string|Array<string>}\n                 */\n                locale: void 0,\n                /**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 */\n                loading: 'Loading...',\n                /**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`. Defaults to 'undefined',\n                 * meaning the default month names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                months: void 0,\n                /**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`. Defaults to\n                 * 'undefined', meaning the default short month names are used according\n                 * to the `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                shortMonths: void 0,\n                /**\n                 * An array containing the weekday names. Defaults to 'undefined',\n                 * meaning the default weekday names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                weekdays: void 0,\n                /**\n                 * Short week days, starting Sunday. Defaults to 'undefined', meaning\n                 * the default short weekday names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @sample highcharts/lang/shortweekdays/\n                 *         Finnish two-letter abbreviations\n                 *\n                 * @type      {Array<string>}\n                 * @since     4.2.4\n                 * @apioption lang.shortWeekdays\n                 */\n                /**\n                 * What to show in a date field for invalid dates. Defaults to an empty\n                 * string.\n                 *\n                 * @type      {string}\n                 * @since     4.1.8\n                 * @product   highcharts highstock\n                 * @apioption lang.invalidDate\n                 */\n                /**\n                 * The title appearing on hovering the zoom in button. The text itself\n                 * defaults to \"+\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom in\n                 * @product   highmaps\n                 * @apioption lang.zoomIn\n                 */\n                /**\n                 * The title appearing on hovering the zoom out button. The text itself\n                 * defaults to \"-\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom out\n                 * @product   highmaps\n                 * @apioption lang.zoomOut\n                 */\n                /**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to the locale decimal point as determined by `lang.locale`.\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     1.2.2\n                 * @apioption lang.decimalPoint\n                 */\n                /**\n                 * [Metric prefixes](https://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the\n                 * positions with `null` causes the full number to be written. Setting\n                 * `numericSymbols` to `undefined` disables shortening altogether.\n                 *\n                 * @sample {highcharts} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n                 * @since   2.3.0\n                 */\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'],\n                /**\n                 * The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\n                 * Use 10000 for Japanese, Korean and various Chinese locales, which\n                 * use symbols for 10^4, 10^8 and 10^12.\n                 *\n                 * @sample highcharts/lang/numericsymbolmagnitude/\n                 *         10000 magnitude for Japanese\n                 *\n                 * @type      {number}\n                 * @default   1000\n                 * @since     5.0.3\n                 * @apioption lang.numericSymbolMagnitude\n                 */\n                /**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to the locale thousands separator as determined by `lang.locale`.\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     1.2.2\n                 * @apioption lang.thousandsSep\n                 */\n                /**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoom: 'Reset zoom',\n                /**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoomTitle: 'Reset zoom level 1:1'\n            },\n            /**\n             * Global options that don't apply to each chart. These options, like\n             * the `lang` options, must be set using the `Highcharts.setOptions`\n             * method.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     global: {\n             *         buttonTheme: {\n             *             fill: '#d0d0d0'\n             *         }\n             *     }\n             * });\n             * ```\n             */\n            global: {\n                /**\n                 * General theme for buttons. This applies to the zoom button, exporting\n                 * context menu, map navigation, range selector buttons and custom\n                 * buttons generated using the `SVGRenderer.button` function. However,\n                 * each of these may be overridden with more specific options.\n                 *\n                 * @sample highcharts/global/buttontheme\n                 *         General button theme\n                 * @since 11.4.2\n                 */\n                buttonTheme: {\n                    /**\n                     * The fill color for buttons\n                     */\n                    fill: \"#f7f7f7\" /* Palette.neutralColor3 */,\n                    /**\n                     * The padding of buttons\n                     */\n                    padding: 8,\n                    /**\n                     * The border radius for buttons\n                     */\n                    r: 2,\n                    /**\n                     * The stroke color for buttons\n                     */\n                    stroke: \"#cccccc\" /* Palette.neutralColor20 */,\n                    /**\n                     * The stroke width for buttons\n                     */\n                    'stroke-width': 1,\n                    /**\n                     * CSS styling for the buttons' text\n                     */\n                    style: {\n                        color: \"#333333\" /* Palette.neutralColor80 */,\n                        cursor: 'pointer',\n                        fontSize: '0.8em',\n                        fontWeight: 'normal'\n                    },\n                    /**\n                     * State overrides for the buttons\n                     */\n                    states: {\n                        /**\n                         * Hover state overrides for the buttons are applied in addition\n                         * to the normal state options\n                         */\n                        hover: {\n                            fill: \"#e6e6e6\" /* Palette.neutralColor10 */\n                        },\n                        /**\n                         * Select state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        select: {\n                            fill: \"#e6e9ff\" /* Palette.highlightColor10 */,\n                            style: {\n                                color: \"#000000\" /* Palette.neutralColor100 */,\n                                fontWeight: 'bold'\n                            }\n                        },\n                        /**\n                         * Disabled state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        disabled: {\n                            /**\n                             * Disabled state CSS style overrides for the buttons' text\n                             */\n                            style: {\n                                color: \"#cccccc\" /* Palette.neutralColor20 */\n                            }\n                        }\n                    }\n                }\n            },\n            /**\n             * Time options that can apply globally or to individual charts. These\n             * settings affect how `datetime` axes are laid out, how tooltips are\n             * formatted, how series\n             * [pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\n             * the Highcharts Stock range selector handles time.\n             *\n             * The common use case is that all charts in the same Highcharts object\n             * share the same time settings, in which case the global settings are set\n             * using `setOptions`.\n             *\n             * ```js\n             * // Apply time settings globally\n             * Highcharts.setOptions({\n             *     time: {\n             *         timezone: 'Europe/London'\n             *     }\n             * });\n             * // Apply time settings by instance\n             * const chart = Highcharts.chart('container', {\n             *     time: {\n             *         timezone: 'America/New_York'\n             *     },\n             *     series: [{\n             *         data: [1, 4, 3, 5]\n             *     }]\n             * });\n             *\n             * // Use the Time object\n             * console.log(\n             *        'Current time in New York',\n             *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n             * );\n             * ```\n             *\n             * Since v6.0.5, the time options were moved from the `global` object to the\n             * `time` object, and time options can be set on each individual chart.\n             *\n             * @sample {highcharts|highstock}\n             *         highcharts/time/timezone/\n             *         Set the timezone globally\n             * @sample {highcharts}\n             *         highcharts/time/individual/\n             *         Set the timezone per chart instance\n             * @sample {highstock}\n             *         stock/time/individual/\n             *         Set the timezone per chart instance\n             *\n             * @since     6.0.5\n             * @optionparent time\n             */\n            time: {\n                /**\n                 * A custom `Date` class for advanced date handling. For example,\n                 * [JDate](https://github.com/tahajahangir/jdate) can be hooked in to\n                 * handle Jalali dates.\n                 *\n                 * @type      {*}\n                 * @since     4.0.4\n                 * @product   highcharts highstock gantt\n                 */\n                Date: void 0,\n                /**\n                 * A named time zone. Supported time zone names rely on the browser\n                 * implementations, as described in the [mdn\n                 * docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#timezone).\n                 * If the given time zone is not recognized by the browser, Highcharts\n                 * provides a warning and falls back to returning a 0 offset,\n                 * corresponding to the UTC time zone.\n                 *\n                 * The time zone affects axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`.\n                 *\n                 * Setting `timezone` to `undefined` falls back to the default browser\n                 * timezone setting.\n                 *\n                 * Until v11.2.0, this option depended on moment.js.\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezone/ Europe/Oslo\n                 *\n                 * @type      {string}\n                 * @since     5.0.7\n                 * @product   highcharts highstock gantt\n                 */\n                timezone: 'UTC',\n                /**\n                 * The timezone offset in minutes. Positive values are west, negative\n                 * values are east of UTC, as in the ECMAScript\n                 * [getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n                 * method. Use this to display UTC based data in a predefined time zone.\n                 *\n                 * This option is deprecated as of v11.4.1 and will be removed in a\n                 * future release. Use the [time.timezone](#time.timezone) option\n                 * instead.\n                 *\n                 * @see [time.getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezoneoffset/\n                 *         Timezone offset\n                 *\n                 * @since     3.0.8\n                 * @deprecated 11.4.2\n                 * @product   highcharts highstock gantt\n                 */\n                timezoneOffset: 0,\n                /**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * Setting `useUTC` to true is equivalent to setting `time.timezone` to\n                 * `\"UTC\"`. Setting `useUTC` to false is equivalent to setting\n                 * `time.timezone` to `undefined`.\n                 *\n                 * @see [time.timezone](#timezone)\n                 *\n                 * @sample {highcharts} highcharts/time/useutc-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/time/useutc-false/\n                 *         False\n                 *\n                 * @deprecated\n                 */\n                useUTC: void 0\n            },\n            chart: ChartDefaults,\n            /**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/\n             *         Title options demonstrated\n             * @sample {highcharts} highcharts/title/align-auto/\n             *         Default title alignment\n             */\n            title: {\n                /**\n                 * When the title is floating, the plot area will not move to make space\n                 * for it.\n                 *\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/\n                 *         False by default\n                 * @sample {highcharts} highcharts/title/floating/\n                 *         True - title on top of the plot area\n                 * @sample {highstock} stock/chart/title-floating/\n                 *         True - title on top of the plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption title.floating\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption title.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\n                 * as if [floating](#title.floating) were `true`.\n                 *\n                 * @sample {highcharts} highcharts/title/verticalalign/\n                 *         Chart title in bottom right corner\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption title.verticalAlign\n                 */\n                /**\n                 * The x position of the title relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption title.x\n                 */\n                /**\n                 * The y position of the title relative to the alignment within\n                 * [chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](\n                 * #chart.spacingBottom). By default it depends on the font size.\n                 *\n                 * @sample {highcharts} highcharts/title/y/\n                 *         Title inside the plot area\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption title.y\n                 */\n                /**\n                 * CSS styles for the title. Use this for font styling, but use `align`,\n                 * `x` and `y` for text alignment.\n                 *\n                 * Note that the default [title.minScale](#title.minScale) option also\n                 * affects the rendered font size. In order to keep the font size fixed\n                 * regardless of title length, set `minScale` to 1.\n                 *\n                 * In styled mode, the title style is given in the `.highcharts-title`\n                 * class.\n                 *\n                 * @sample {highcharts} highcharts/title/style/\n                 *         Custom color and weight\n                 * @sample {highstock} stock/chart/title-style/\n                 *         Custom color and weight\n                 * @sample highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {highcharts|highmaps} { \"color\": \"#333333\", \"fontSize\": \"18px\" }\n                 * @default   {highstock} { \"color\": \"#333333\", \"fontSize\": \"16px\" }\n                 */\n                style: {\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    fontWeight: 'bold'\n                },\n                /**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `undefined`.\n                 *\n                 * @sample {highcharts} highcharts/title/text/\n                 *         Custom title\n                 * @sample {highstock} stock/chart/title-text/\n                 *         Custom title\n                 *\n                 * @default {highcharts|highmaps} Chart title\n                 * @default {highstock} undefined\n                 */\n                text: 'Chart title',\n                /**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * Since v12 it defaults to `undefined`, meaning the alignment is\n                 * computed for best fit. If the text fits in one line, it aligned to\n                 * the center, but if it is wrapped into multiple lines, it is aligned\n                 * to the left.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Default alignment, dynamic\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {Highcharts.AlignValue}\n                 * @default   undefined\n                 * @since     2.0\n                 * @apioption title.align\n                 */\n                /**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @sample {highcharts} highcharts/title/margin-50/\n                 *         A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/\n                 *         The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/\n                 *         A chart title margin of 50\n                 *\n                 * @since 2.1\n                 */\n                margin: 15,\n                /**\n                 * When the title is too wide to fit in the chart, the default behavior\n                 * is to scale it down to fit, or apply word wrap if it is scaled down\n                 * to `minScale` and still doesn't fit.\n                 *\n                 * The default value reflects the scale, when using default font sizes,\n                 * when the title font size matches that of the subtitle. The title\n                 * still stands out as it is bold by default.\n                 *\n                 * Set `minScale` to 1 to avoid downscaling.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Downscaling demonstrated\n                 *\n                 * @since 12.0.0\n                 */\n                minScale: 0.67\n            },\n            /**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highcharts} highcharts/title/align-auto/\n             *         Default title alignment\n             * @sample {highmaps} maps/title/subtitle/\n             *         Subtitle options demonstrated\n             */\n            subtitle: {\n                /**\n                 * When the subtitle is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/floating/\n                 *         Floating title and subtitle\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote floating at bottom right of plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption subtitle.floating\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 * @apioption subtitle.style\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption subtitle.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\n                 * floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption subtitle.verticalAlign\n                 */\n                /**\n                 * The x position of the subtitle relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption subtitle.x\n                 */\n                /**\n                 * The y position of the subtitle relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\n                 * is laid out below the title unless the title is floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption subtitle.y\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The subtitle of the chart.\n                 *\n                 * @sample {highcharts|highstock} highcharts/subtitle/text/\n                 *         Custom subtitle\n                 * @sample {highcharts|highstock} highcharts/subtitle/text-formatted/\n                 *         Formatted and linked text.\n                 */\n                text: ''\n                /**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 * \"center\" and \"right\". Since v12, it defaults to `undefined`, meaning\n                 * the actual alignment is inherited from the alignment of the main\n                 * title.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Default title and subtitle alignment, dynamic\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at bottom right of plot area\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @default undefined\n                 * @since 2.0\n                 * @apioption subtitle.align\n                 */\n            },\n            /**\n             * The chart's caption, which will render below the chart and will be part\n             * of exported charts. The caption can be updated after chart initialization\n             * through the `Chart.update` or `Chart.caption.update` methods.\n             *\n             * @sample highcharts/caption/text/\n             *         A chart with a caption\n             * @since  7.2.0\n             */\n            caption: {\n                /**\n                 * When the caption is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.floating\n                 */\n                /**\n                 * The margin between the caption and the plot area.\n                 */\n                margin: 15,\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.useHTML\n                 */\n                /**\n                 * The x position of the caption relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption caption.x\n                 */\n                /**\n                 * The y position of the caption relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`.\n                 *\n                 * @type      {number}\n                 * @apioption caption.y\n                 */\n                /**\n                 * CSS styles for the caption.\n                 *\n                 * In styled mode, the caption style is given in the\n                 * `.highcharts-caption` class.\n                 *\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The caption text of the chart.\n                 *\n                 * @sample {highcharts} highcharts/caption/text/\n                 *         Custom caption\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the caption. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * The vertical alignment of the caption. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\n                 * floating.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'bottom'\n            },\n            /**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](\n             * #plotOptions.series) object. Then options for all series of a specific\n             * type are given in the plotOptions of that type, for example\n             * `plotOptions.line`. Next, options for one single series are given in\n             * [the series array](#series).\n             */\n            plotOptions: {},\n            /**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and create\n             * [custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */\n            legend: {\n                /**\n                 * The background color of the legend.\n                 *\n                 * @see In styled mode, the legend background fill can be applied with\n                 *      the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/backgroundcolor/\n                 *         Yellowish background\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption legend.backgroundColor\n                 */\n                /**\n                 * The width of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke width can be applied\n                 *      with the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderwidth/\n                 *         2px border width\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption legend.borderWidth\n                 */\n                /**\n                 * Enable or disable the legend. There is also a series-specific option,\n                 * [showInLegend](#plotOptions.series.showInLegend), that can hide the\n                 * series from the legend. In some series types this is `false` by\n                 * default, so it must set to `true` in order to show the legend for the\n                 * series.\n                 *\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 *\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @default {gantt} false\n                 */\n                enabled: true,\n                /**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/align/\n                 *         Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * If the [layout](legend.layout) is `horizontal` and the legend items\n                 * span over two lines or more, whether to align the items into vertical\n                 * columns. Setting this to `false` makes room for more items, but will\n                 * look more messy.\n                 *\n                 * @since 6.1.0\n                 */\n                alignColumns: true,\n                /**\n                 * A CSS class name to apply to the legend group.\n                 */\n                className: 'highcharts-no-tooltip',\n                /**\n                 * General event handlers for the legend. These event hooks can\n                 * also be attached to the legend at run time using the\n                 * `Highcharts.addEvent` function.\n                 *\n                 * @declare Highcharts.LegendEventsOptionsObject\n                 *\n                 * @private\n                 */\n                events: {},\n                /**\n                 * Fires when the legend item belonging to the series is clicked. One\n                 * parameter, `event`, is passed to the function. The default action\n                 * is to toggle the visibility of the series, point or data class. This\n                 * can be prevented by returning `false` or calling\n                 * `event.preventDefault()`.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemclick/\n                 *         Confirm hiding and showing\n                 * @sample {highcharts} highcharts/legend/pie-legend-itemclick/\n                 *         Confirm toggle visibility of pie slices\n                 *\n                 * @type      {Highcharts.LegendItemClickCallbackFunction}\n                 * @context   Highcharts.Legend\n                 * @apioption legend.events.itemClick\n                 */\n                /**\n                 * When the legend is floating, the plot area ignores it and is allowed\n                 * to be placed below it.\n                 *\n                 * @sample {highcharts} highcharts/legend/floating-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/legend/floating-true/\n                 *         True\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Floating legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption legend.floating\n                 */\n                /**\n                 * The layout of the legend items. Can be one of `horizontal` or\n                 * `vertical` or `proximate`. When `proximate`, the legend items will be\n                 * placed as close as possible to the graphs they're representing,\n                 * except in inverted charts or when the legend position doesn't allow\n                 * it.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/\n                 *         Vertical\n                 * @sample highcharts/legend/layout-proximate\n                 *         Labels proximate to the data\n                 * @sample {highstock} stock/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/\n                 *         Vertical with color axis gradient\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\", \"proximate\"]\n                 */\n                layout: 'horizontal',\n                /**\n                 * In a legend with horizontal layout, the itemDistance defines the\n                 * pixel distance between each item.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 * @sample {highstock} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 *\n                 * @type      {number}\n                 * @default   {highcharts} 20\n                 * @default   {highstock} 20\n                 * @default   {highmaps} 8\n                 * @since     3.0.3\n                 * @apioption legend.itemDistance\n                 */\n                /**\n                 * The pixel bottom margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginBottom: 2,\n                /**\n                 * The pixel top margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginTop: 2,\n                /**\n                 * The width for each legend item. By default the items are laid out\n                 * successively. In a [horizontal layout](legend.layout), if the items\n                 * are laid out across two rows or more, they will be vertically aligned\n                 * depending on the [legend.alignColumns](legend.alignColumns) option.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemwidth-default/\n                 *         Undefined by default\n                 * @sample {highcharts} highcharts/legend/itemwidth-80/\n                 *         80 for aligned legend items\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption legend.itemWidth\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for each legend label. Available variables relates to properties on\n                 * the series, or the point in case of pies.\n                 *\n                 * @type      {string}\n                 * @default   {name}\n                 * @since     1.3\n                 * @apioption legend.labelFormat\n                 */\n                /* eslint-disable valid-jsdoc */\n                /**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case of\n                 * pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps the context can also be a data class in case of a\n                 * `colorAxis`.\n                 *\n                 * @sample {highcharts} highcharts/legend/labelformatter/\n                 *         Add text\n                 * @sample {highmaps} maps/legend/labelformatter/\n                 *         Data classes with label formatter\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Point|Series>}\n                 */\n                labelFormatter: function () {\n                    // eslint-enable valid-jsdoc\n                    return this.name;\n                },\n                /**\n                 * Line height for the legend items. Deprecated as of 2.1\\. Instead,\n                 * the line height for each item can be set using\n                 * `itemStyle.lineHeight`, and the padding between items using\n                 * `itemMarginTop` and `itemMarginBottom`.\n                 *\n                 * @sample {highcharts} highcharts/legend/lineheight/\n                 *         Setting padding\n                 *\n                 * @deprecated\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @since     2.0\n                 * @product   highcharts gantt\n                 * @apioption legend.lineHeight\n                 */\n                /**\n                 * If the plot area sized is calculated automatically and the legend is\n                 * not floating, the legend margin is the space between the legend and\n                 * the axis labels or plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/margin-default/\n                 *         12 pixels by default\n                 * @sample {highcharts} highcharts/legend/margin-30/\n                 *         30 pixels\n                 *\n                 * @type      {number}\n                 * @default   12\n                 * @since     2.1\n                 * @apioption legend.margin\n                 */\n                /**\n                 * Maximum pixel height for the legend. When the maximum height is\n                 * extended, navigation will show.\n                 *\n                 * @type      {number}\n                 * @since     2.3.0\n                 * @apioption legend.maxHeight\n                 */\n                /**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke can be applied with the\n                 *      `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/bordercolor/\n                 *         Brown border\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                /**\n                 * The border corner radius of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderradius-default/\n                 *         Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/\n                 *         5px rounded\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 */\n                borderRadius: 0,\n                /**\n                 * Options for the paging or navigation appearing when the legend is\n                 * overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to\n                 * [increase the chart height in\n                 * export](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/).\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 */\n                navigation: {\n                    /**\n                     * How to animate the pages when navigating up or down. A value of\n                     * `true` applies the default navigation given in the\n                     * `chart.animation` option. Additional options can be given as an\n                     * object containing values for easing and duration.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @default   true\n                     * @since     2.2.4\n                     * @apioption legend.navigation.animation\n                     */\n                    /**\n                     * The pixel size of the up and down arrows in the legend paging\n                     * navigation.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {number}\n                     * @default   12\n                     * @since     2.2.4\n                     * @apioption legend.navigation.arrowSize\n                     */\n                    /**\n                     * Whether to enable the legend navigation. In most cases, disabling\n                     * the navigation results in an unwanted overflow.\n                     *\n                     * See also the\n                     * [adapt chart to legend](https://github.com/highcharts/adapt-chart-to-legend)\n                     * plugin for a solution to extend the chart height to make room for\n                     * the legend, optionally in exported charts only.\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     4.2.4\n                     * @apioption legend.navigation.enabled\n                     */\n                    /**\n                     * Text styles for the legend page navigation.\n                     *\n                     * @see In styled mode, the navigation items are styled with the\n                     *      `.highcharts-legend-navigation` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {Highcharts.CSSObject}\n                     * @since     2.2.4\n                     * @apioption legend.navigation.style\n                     */\n                    style: {\n                        /**\n                         * @type {number|string}\n                         */\n                        fontSize: '0.8em'\n                    },\n                    /**\n                     * The color for the active up or down arrow in the legend page\n                     * navigation.\n                     *\n                     * @see In styled mode, the active arrow be styled with the\n                     *      `.highcharts-legend-nav-active` class.\n                     *\n                     * @sample  {highcharts} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     * @sample  {highstock} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    activeColor: \"#0022ff\" /* Palette.highlightColor100 */,\n                    /**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @see In styled mode, the inactive arrow be styled with the\n                     *      `.highcharts-legend-nav-inactive` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    inactiveColor: \"#cccccc\" /* Palette.neutralColor20 */\n                },\n                /**\n                 * The inner padding of the legend box.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @type      {number}\n                 * @default   8\n                 * @since     2.2.0\n                 * @apioption legend.padding\n                 */\n                /**\n                 * Whether to reverse the order of the legend items compared to the\n                 * order of the series or points as defined in the configuration object.\n                 *\n                 * @see [yAxis.reversedStacks](#yAxis.reversedStacks),\n                 *      [series.legendIndex](#series.legendIndex)\n                 *\n                 * @sample {highcharts} highcharts/legend/reversed/\n                 *         Stacked bar with reversed legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.2.5\n                 * @apioption legend.reversed\n                 */\n                /**\n                 * Whether to show the symbol on the right side of the text rather than\n                 * the left side. This is common in Arabic and Hebrew.\n                 *\n                 * @sample {highcharts} highcharts/legend/rtl/\n                 *         Symbol to the right\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption legend.rtl\n                 */\n                /**\n                 * CSS styles for the legend area. In the 1.x versions the position\n                 * of the legend area was determined by CSS. In 2.x, the position is\n                 * determined by properties like `align`, `verticalAlign`, `x` and `y`,\n                 * but the styles are still parsed for backwards compatibility.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @product   highcharts highstock\n                 * @apioption legend.style\n                 */\n                /**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `undefined` to wrap\n                 * text instead. A `width` property can be added to control the text\n                 * width.\n                 *\n                 * @see In styled mode, the legend items can be styled with the\n                 *      `.highcharts-legend-item` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemstyle/\n                 *         Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"0.8em\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}\n                 */\n                itemStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /**\n                     * @ignore\n                     */\n                    cursor: 'pointer',\n                    /**\n                     * @ignore\n                     */\n                    fontSize: '0.8em',\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'none',\n                    /**\n                     * @ignore\n                     */\n                    textOverflow: 'ellipsis'\n                },\n                /**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @see In styled mode, the hovered legend items can be styled with\n                 *      the `.highcharts-legend-item:hover` pseudo-class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/\n                 *         Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#000000\"}\n                 */\n                itemHoverStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @see In styled mode, the hidden legend items can be styled with\n                 *      the `.highcharts-legend-item-hidden` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/\n                 *         Darker gray color\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#cccccc\"}\n                 */\n                itemHiddenStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'line-through'\n                },\n                /**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {boolean|Highcharts.CSSObject}\n                 */\n                shadow: false,\n                /**\n                 * Default styling for the checkbox next to a legend item when\n                 * `showCheckbox` is true.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 * @default {\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}\n                 */\n                itemCheckboxStyle: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    width: '13px', // For IE precision\n                    /**\n                     * @ignore\n                     */\n                    height: '13px'\n                },\n                /// itemWidth: undefined,\n                /**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @since 5.0.0\n                 */\n                squareSymbol: true,\n                /**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * Note: This option is a default source of color axis height, if the\n                 * [colorAxis.height](https://api.highcharts.com/highcharts/colorAxis.height)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolHeight\n                 */\n                /**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`, effectively\n                 * creating a circle.\n                 *\n                 * For color axis scales, it defaults to 3.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolRadius\n                 */\n                /**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * Note: This option is a default source of color axis width, if the\n                 * [colorAxis.width](https://api.highcharts.com/highcharts/colorAxis.width)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 *\n                 * @type      {number}\n                 * @apioption legend.symbolWidth\n                 */\n                /**\n                 * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the legend item texts.\n                 *\n                 * Prior to 4.1.7, when using HTML, [legend.navigation](\n                 * #legend.navigation) was disabled.\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption legend.useHTML\n                 */\n                /**\n                 * For a color axis with data classes, how many decimals to render in\n                 * the legend. The default preserves the decimals of the range numbers.\n                 *\n                 * @type      {number}\n                 * @default   -1\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueDecimals\n                 */\n                /**\n                 * For a color axis with data classes, a suffix for the range numbers in\n                 * the legend.\n                 *\n                 * @type      {string}\n                 * @default   ''\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueSuffix\n                 */\n                /**\n                 * The width of the legend box. If a number is set, it translates to\n                 * pixels. Since v7.0.2 it allows setting a percent string of the full\n                 * chart width, for example `40%`.\n                 *\n                 * Defaults to the full chart width for legends below or above the\n                 * chart, half the chart width for legends to the left and right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 * @sample {highcharts} highcharts/legend/width-percent/\n                 *         A percent of the chart width\n                 *\n                 * @type      {number|string}\n                 * @since     2.0\n                 * @apioption legend.width\n                 */\n                /**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolpadding/\n                 *         Greater symbol width and padding\n                 */\n                symbolPadding: 5,\n                /**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * When the [layout](#legend.layout) option is `proximate`, the\n                 * `verticalAlign` option doesn't apply.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'bottom',\n                // Width: undefined,\n                /**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 *\n                 * @since 2.0\n                 */\n                x: 0,\n                /**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @since 2.0\n                 */\n                y: 0,\n                /**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/\n                 *         Legend title\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend with title\n                 *\n                 * @since 3.0\n                 */\n                title: {\n                    /**\n                     * A text or HTML string for the title.\n                     *\n                     * @type      {string}\n                     * @since     3.0\n                     * @apioption legend.title.text\n                     */\n                    /**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @see In styled mode, the legend title is styled with the\n                     *      `.highcharts-legend-title` class.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"fontSize\": \"0.8em\", \"fontWeight\": \"bold\"}\n                     * @since   3.0\n                     */\n                    style: {\n                        /**\n                         * @ignore\n                         */\n                        fontSize: '0.8em',\n                        /**\n                         * @ignore\n                         */\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            /**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             */\n            loading: {\n                /**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.hideDuration\n                 */\n                /**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.showDuration\n                 */\n                /**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @see In styled mode, the loading label is styled with the\n                 *      `.highcharts-loading-inner` class.\n                 *\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/\n                 *         Vertically centered\n                 * @sample {highstock} stock/loading/general/\n                 *         Label styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}\n                 * @since   1.2.0\n                 */\n                labelStyle: {\n                    /**\n                     * @ignore\n                     */\n                    fontWeight: 'bold',\n                    /**\n                     * @ignore\n                     */\n                    position: 'relative',\n                    /**\n                     * @ignore\n                     */\n                    top: '45%'\n                },\n                /**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * In styled mode, the loading label is styled with the\n                 * `.highcharts-loading` class.\n                 *\n                 * @sample  {highcharts|highmaps} highcharts/loading/style/\n                 *          Gray plot area, white text\n                 * @sample  {highstock} stock/loading/general/\n                 *          Gray plot area, white text\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}\n                 * @since   1.2.0\n                 */\n                style: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                    /**\n                     * @ignore\n                     */\n                    opacity: 0.5,\n                    /**\n                     * @ignore\n                     */\n                    textAlign: 'center'\n                }\n            },\n            /**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @declare Highcharts.TooltipOptions\n             */\n            tooltip: {\n                /**\n                 * The color of the tooltip border. When `undefined`, the border takes\n                 * the color of the corresponding series or point.\n                 *\n                 * Note that the [borderWidth](#tooltip.borderWidth) is usually 0 by\n                 * default, so the border color may not be visible until a border width\n                 * is set.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ Follow\n                 *         series by default\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-black/ Black\n                 *         border\n                 * @sample {highstock} stock/tooltip/general/ Styled tooltip\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and\n                 *         border demo\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption tooltip.borderColor\n                 */\n                /**\n                 * A CSS class name to apply to the tooltip's container div,\n                 * allowing unique CSS styling for each chart.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.className\n                 */\n                /**\n                 * Since 4.1, the crosshair definitions are moved to the Axis object\n                 * in order for a better separation from the tooltip. See\n                 * [xAxis.crosshair](#xAxis.crosshair).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/crosshairs-x/\n                 *         Enable a crosshair for the x value\n                 *\n                 * @deprecated\n                 *\n                 * @type      {*}\n                 * @default   true\n                 * @apioption tooltip.crosshairs\n                 */\n                /**\n                 * Distance from point to tooltip in pixels.\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @apioption tooltip.distance\n                 */\n                /**\n                 * Whether the tooltip should follow the mouse as it moves across\n                 * columns, pie slices and other point types with an extent.\n                 * By default it behaves this way for pie, polygon, map, sankey\n                 * and wordcloud series by override in the `plotOptions`\n                 * for those series types.\n                 *\n                 * Does not apply if [split](#tooltip.split) is `true`.\n                 *\n                 * For touch moves to behave the same way, [followTouchMove](\n                 * #tooltip.followTouchMove) must be `true` also.\n                 *\n                 * @sample highcharts/tooltip/followpointer/\n                 *         Tooltip follow pointer comparison\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} false\n                 * @default   {highmaps} true\n                 * @since     3.0\n                 * @apioption tooltip.followPointer\n                 */\n                /**\n                 * Whether the tooltip should update as the finger moves on a touch\n                 * device. If this is `true` and [chart.panning](#chart.panning) is\n                 * set,`followTouchMove` will take over one-finger touches, so the user\n                 * needs to use two fingers for zooming and panning.\n                 *\n                 * Note the difference to [followPointer](#tooltip.followPointer) that\n                 * only defines the _position_ of the tooltip. If `followPointer` is\n                 * false in for example a column series, the tooltip will show above or\n                 * below the column, but as `followTouchMove` is true, the tooltip will\n                 * jump from column to column as the user swipes across the plot area.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} true\n                 * @default   {highstock} true\n                 * @default   {highmaps} false\n                 * @since     3.0.1\n                 * @apioption tooltip.followTouchMove\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for the whole shared tooltip. When format strings are a requirement,\n                 * it is usually more convenient to use `headerFormat`, `pointFormat`\n                 * and `footerFormat`, but the `format` option allows combining them\n                 * into one setting.\n                 *\n                 * The context of the format string is the same as that of the\n                 * `tooltip.formatter` callback.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/format-shared/\n                 *         Format for shared tooltip\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     11.1.0\n                 * @apioption tooltip.format\n                 */\n                /**\n                 * Callback function to format the text of the tooltip from scratch. In\n                 * case of single or [shared](#tooltip.shared) tooltips, a string should\n                 * be returned. In case of [split](#tooltip.split) tooltips, it should\n                 * return an array where the first item is the header, and subsequent\n                 * items are mapped to the points. Return `false` to disable tooltip for\n                 * a specific point on series.\n                 *\n                 * A subset of HTML is supported. Unless `useHTML` is true, the HTML of\n                 * the tooltip is parsed and converted to SVG, therefore this isn't a\n                 * complete HTML renderer. The following HTML tags are supported: `b`,\n                 * `br`, `em`, `i`, `span`, `strong`. Spans can be styled with a `style`\n                 * attribute, but only text-related CSS, that is shared with SVG, is\n                 * handled.\n                 *\n                 * The context of the formatter (since v12) is the\n                 * [Point](https://api.highcharts.com/class-reference/Highcharts.Point)\n                 * instance. If the tooltip is shared or split, an array `this.points`\n                 * contains all points of the hovered x-value.\n                 *\n                 * Common properties from the Point to use in the formatter include:\n                 *\n                 * - **Point.percentage**:\n                 *   Stacked series and pies only. The point's percentage of the total.\n                 *\n                 * - **Point.points**:\n                 *   In a shared or split tooltip, this is an array containing all the\n                 *   hovered points.\n                 *\n                 * - **this.series**:\n                 *   The series object. The series name is available through\n                 *   `this.series.name`.\n                 *\n                 * - **this.total**:\n                 *   The total value at this point's x value in a stacked series, or the\n                 *   sum of all slices in a pie series.\n                 *\n                 * - **this.x**:\n                 *   The x value.\n                 *\n                 * - **this.y**:\n                 *   The y value.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/formatter-simple/\n                 *         Simple string formatting\n                 * @sample {highcharts} highcharts/tooltip/formatter-shared/\n                 *         Formatting with shared tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Formatting with split tooltip\n                 * @sample highcharts/tooltip/formatter-conditional-default/\n                 *         Extending default formatter\n                 * @sample {highstock} stock/tooltip/formatter/\n                 *         Formatting with shared tooltip\n                 * @sample {highmaps} maps/tooltip/formatter/\n                 *         String formatting\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.formatter\n                 */\n                /**\n                 * Callback function to format the text of the tooltip for\n                 * visible null points.\n                 * Works analogously to [formatter](#tooltip.formatter).\n                 *\n                 * @sample highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.nullFormatter\n                 */\n                /**\n                 * Whether to allow the tooltip to render outside the chart's SVG\n                 * element box. By default (`false`), the tooltip is rendered within the\n                 * chart's SVG element, which results in the tooltip being aligned\n                 * inside the chart area. For small charts, this may result in clipping\n                 * or overlapping. When `true`, a separate SVG element is created and\n                 * overlaid on the page, allowing the tooltip to be aligned inside the\n                 * page itself. Beware that with this option active, CSS classes on the\n                 * chart's target container, with classnames matching the pattern\n                 * 'highcharts-*', will be set on the tooltip as well. This is done to\n                 * support theming for tooltips with this option.\n                 *\n                 * Defaults to `true` if `chart.scrollablePlotArea` is activated,\n                 * otherwise `false`.\n                 *\n                 * @sample highcharts/tooltip/outside\n                 *         Small charts with tooltips outside\n                 *\n                 * @type      {boolean|undefined}\n                 * @default   undefined\n                 * @since     6.1.1\n                 * @apioption tooltip.outside\n                 */\n                /**\n                 * A callback function for formatting the HTML output for a single point\n                 * in the tooltip. Like the `pointFormat` string, but with more\n                 * flexibility.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n                 * @since     4.1.0\n                 * @context   Highcharts.Point\n                 * @apioption tooltip.pointFormatter\n                 */\n                /**\n                 * A callback function to place the tooltip in a custom position. The\n                 * callback receives three parameters: `labelWidth`, `labelHeight` and\n                 * `point`, where point contains values for `plotX` and `plotY` telling\n                 * where the reference point is in the plot area. Add `chart.plotLeft`\n                 * and `chart.plotTop` to get the full coordinates.\n                 *\n                 * To find the actual hovered `Point` instance, use\n                 * `this.chart.hoverPoint`. For shared or split tooltips, all the hover\n                 * points are available in `this.chart.hoverPoints`.\n                 *\n                 * Since v7, when [tooltip.split](#tooltip.split) option is enabled,\n                 * positioner is called for each of the boxes separately, including\n                 * xAxis header. xAxis header is not a point, instead `point` argument\n                 * contains info: `{ plotX: Number, plotY: Number, isHeader: Boolean }`\n                 *\n                 * The return should be an object containing x and y values, for example\n                 * `{ x: 100, y: 100 }`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/positioner/\n                 *         A fixed tooltip position on top of the chart\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Split tooltip with fixed positions\n                 * @sample {highstock} stock/tooltip/positioner-scrollable-plotarea/\n                 *         Scrollable plot area combined with tooltip positioner\n                 *\n                 * @type      {Highcharts.TooltipPositionerCallbackFunction}\n                 * @since     2.2.4\n                 * @apioption tooltip.positioner\n                 */\n                /**\n                 * Shows tooltip for all points with the same X value. Splits the\n                 * tooltip into one label per series, with the header close to the axis.\n                 * This is recommended over [shared](#tooltip.shared)\n                 * tooltips for charts with multiple line series, generally making them\n                 * easier to read. This option takes precedence over `tooltip.shared`.\n                 *\n                 * Not supported for [polar](#chart.polar) and [inverted](#chart.inverted) charts.\n                 *\n                 * @productdesc {highstock} In Highcharts Stock, tooltips are split\n                 * by default since v6.0.0. Stock charts typically contain\n                 * multi-dimension points and multiple panes, making split tooltips\n                 * the preferred layout over\n                 * the previous `shared` tooltip.\n                 *\n                 * @sample highcharts/tooltip/split/\n                 *         Split tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Split tooltip and custom formatter callback\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} true\n                 * @since     5.0.0\n                 * @product   highcharts highstock\n                 * @apioption tooltip.split\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing, when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @type      {boolean}\n                 * @since     8.0.1\n                 * @apioption tooltip.stickOnContact\n                 */\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption tooltip.useHTML\n                 */\n                /**\n                 * How many decimals to show in each series' y value. This is\n                 * overridable in each series' tooltip options object. The default is to\n                 * preserve all decimals.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {number|undefined}\n                 * @since     2.2\n                 * @apioption tooltip.valueDecimals\n                 */\n                /**\n                 * A string to prepend to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valuePrefix\n                 */\n                /**\n                 * A string to append to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valueSuffix\n                 */\n                /**\n                 * The format for the date in the tooltip header if the X axis is a\n                 * datetime axis. The default is a best guess based on the smallest\n                 * distance between points in the chart.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/xdateformat/\n                 *         A different format\n                 *\n                 * @type      {string|Highcharts.DateTimeFormatOptions}\n                 * @product   highcharts highstock gantt\n                 * @apioption tooltip.xDateFormat\n                 */\n                /**\n                 * How many decimals to show for the `point.change`\n                 * or the `point.cumulativeSum` value when the `series.compare`\n                 * or the `series.cumulative` option is set.\n                 * This is overridable in each series' tooltip options object.\n                 *\n                 * @type      {number}\n                 * @default   2\n                 * @since     1.0.1\n                 * @product   highstock\n                 * @apioption tooltip.changeDecimals\n                 */\n                /**\n                 * Enable or disable the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/enabled/\n                 *         Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n                 *         Disable tooltip and show values on chart instead\n                 */\n                enabled: true,\n                /**\n                 * Enable or disable animation of the tooltip.\n                 *\n                 * @type       {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                 * @since      2.3.0\n                 */\n                animation: {\n                    duration: 300,\n                    // EaseOutCirc\n                    easing: (x) => Math.sqrt(1 - Math.pow(x - 1, 2))\n                },\n                /**\n                 * The radius of the rounded border corners.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         Default border radius\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/\n                 *         Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 */\n                borderRadius: 3,\n                /**\n                 * For series on datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the string or object configuration, see\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat).\n                 *\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 *\n                 * @type    {Highcharts.Dictionary<string|Highcharts.DateTimeFormatOptions>}\n                 * @product highcharts highstock gantt\n                 */\n                dateTimeLabelFormats: {\n                    /** @internal */\n                    millisecond: '%[AebHMSL]',\n                    /** @internal */\n                    second: '%[AebHMS]',\n                    /** @internal */\n                    minute: '%[AebHM]',\n                    /** @internal */\n                    hour: '%[AebHM]',\n                    /** @internal */\n                    day: '%[AebY]',\n                    /** @internal */\n                    week: 'Week from %[AebY]',\n                    /** @internal */\n                    month: '%[BY]',\n                    /** @internal */\n                    year: '%Y'\n                },\n                /**\n                 * A string to append to the tooltip format.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @since 2.2\n                 */\n                footerFormat: '',\n                /**\n                 * The name of a symbol to use for the border around the tooltip\n                 * header. Applies only when [tooltip.split](#tooltip.split) is\n                 * enabled.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @see [tooltip.shape](#tooltip.shape)\n                 *\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Different shapes for header and split boxes\n                 *\n                 * @type       {Highcharts.TooltipShapeValue}\n                 * @validvalue [\"callout\", \"rect\"]\n                 * @since      7.0\n                 */\n                headerShape: 'callout',\n                /**\n                 * The number of milliseconds to wait until the tooltip is hidden when\n                 * mouse out from a point or chart.\n                 *\n                 * @since 3.0\n                 */\n                hideDelay: 500,\n                /**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @since 5.0.0\n                 */\n                padding: 8,\n                /**\n                 * The name of a symbol to use for the border around the tooltip. Can\n                 * be one of: `\"callout\"`, `\"circle\"` or `\"rect\"`. When\n                 * [tooltip.split](#tooltip.split)\n                 * option is enabled, shape is applied to all boxes except header, which\n                 * is controlled by\n                 * [tooltip.headerShape](#tooltip.headerShape).\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @type  {Highcharts.TooltipShapeValue}\n                 * @since 4.0\n                 */\n                shape: 'callout',\n                /**\n                 * Shows information in the tooltip for all points with the same X\n                 * value. When the tooltip is shared, the entire plot area will capture\n                 * mouse movement or touch events. Tooltip texts for series types with\n                 * ordered data (not pie, scatter, flags etc) will be shown in a single\n                 * bubble. This is recommended for single series charts and for\n                 * tablet/mobile optimized charts.\n                 *\n                 * See also [tooltip.split](#tooltip.split), that is better suited for\n                 * charts with many series, especially line-type series. The\n                 * `tooltip.split` option takes precedence over `tooltip.shared`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/shared-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/tooltip/shared-true/\n                 *         True\n                 * @sample {highcharts} highcharts/tooltip/shared-x-crosshair/\n                 *         True with x axis crosshair\n                 * @sample {highcharts} highcharts/tooltip/shared-true-mixed-types/\n                 *         True with mixed series types\n                 *\n                 * @since   2.1\n                 * @product highcharts highstock\n                 */\n                shared: false,\n                /**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense. This\n                 * applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/\n                 *         50 px on graph\n                 *\n                 * @type    {number}\n                 * @default 10/25\n                 * @since   1.2.0\n                 * @product highcharts highstock\n                 */\n                snap: isTouchDevice ? 25 : 10,\n                /**\n                 * The HTML of the tooltip header line. The context is the\n                 * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n                 * Variables are enclosed in curly brackets. Examples of common\n                 * variables to include are `x`, `y`, `series.name` and `series.color`\n                 * and other properties on the same form. The `point.key` variable\n                 * contains the category name, x value or datetime string depending on\n                 * the type of axis. For datetime axes, the `point.key` date format can\n                 * be set using `tooltip.xDateFormat`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.headerFormat\n                 */\n                headerFormat: '<span style=\"font-size: 0.8em\">{ucfirst point.key}</span><br/>',\n                /**\n                 * The HTML of the null point's line in the tooltip. Works analogously\n                 * to [pointFormat](#tooltip.pointFormat).\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.nullFormat\n                 */\n                /**\n                 * The HTML of the point's line in the tooltip. The context is the\n                 * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n                 * Variables are enclosed in curly brackets. Examples of common\n                 * variables to include are `x`, `y`, `series.name` and `series.color`\n                 * and other properties on the same form. Furthermore, `y` can be\n                 * extended by the `tooltip.valuePrefix` and `tooltip.valueSuffix`\n                 * variables. This can also be overridden for each series, which makes\n                 * it a good hook for displaying units.\n                 *\n                 * In styled mode, the dot is colored by a class name rather than the\n                 * point color.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/pointformat/\n                 *         A different point format with value suffix\n                 * @sample {highcharts|highstock} highcharts/tooltip/pointformat-extra-information/\n                 *         Show extra information about points in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type       {string}\n                 * @since      2.2\n                 * @apioption  tooltip.pointFormat\n                 */\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n                /**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/\n                 *         Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                /**\n                 * The pixel width of the tooltip border. Defaults to 0 for single\n                 * tooltips and 1 for split tooltips.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         2 pixels\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/\n                 *         No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {number}\n                 */\n                borderWidth: void 0,\n                /**\n                 * Whether to apply a drop shadow to the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/\n                 *         False\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         Fixed tooltip position, border and shadow disabled\n                 *\n                 * @type {boolean|Highcharts.ShadowOptionsObject}\n                 */\n                shadow: true,\n                /**\n                 * Prevents the tooltip from switching or closing when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @since 8.0.1\n                 */\n                stickOnContact: false,\n                /**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * Note that the default `pointerEvents` style makes the tooltip ignore\n                 * mouse events, so in order to use clickable tooltips, this value must\n                 * be set to `auto`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/style/\n                 *         Greater padding, bold text\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @internal */\n                    cursor: 'default',\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @since 2.2\n                 */\n                useHTML: false\n            },\n            /**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             */\n            credits: {\n                /**\n                 * Credits for map source to be concatenated with conventional credit\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapTextFull](#credits.mapTextFull)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   \\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapText\n                 */\n                /**\n                 * Detailed credits for map source to be displayed on hover of credits\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapText](#credits.mapText)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   {geojson.copyright}\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapTextFull\n                 */\n                /**\n                 * Whether to show the credits text.\n                 *\n                 * @sample {highcharts} highcharts/credits/enabled-false/\n                 *         Credits disabled\n                 * @sample {highstock} stock/credits/enabled/\n                 *         Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/\n                 *         Credits disabled\n                 */\n                enabled: true,\n                /**\n                 * The URL for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                href: 'https://www.highcharts.com?credits',\n                /**\n                 * Position configuration for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 *\n                 * @type    {Highcharts.AlignObject}\n                 * @since   2.1\n                 */\n                position: {\n                    /** @internal */\n                    align: 'right',\n                    /** @internal */\n                    x: -10,\n                    /** @internal */\n                    verticalAlign: 'bottom',\n                    /** @internal */\n                    y: -5\n                },\n                /**\n                 * CSS styles for the credits label.\n                 *\n                 * @see In styled mode, credits styles can be set with the\n                 *      `.highcharts-credits` class.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    cursor: 'pointer',\n                    /** @internal */\n                    color: \"#999999\" /* Palette.neutralColor40 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.6em'\n                },\n                /**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to\n                 * `Highcharts @ {map-credits}`. Otherwise, it defaults to\n                 * `Highcharts.com`.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                text: 'Highcharts.com'\n            }\n        };\n        /* eslint-disable spaced-comment */\n\n        defaultOptions.chart.styledMode = false;\n\n        '';\n        const defaultTime = new Time(defaultOptions.time);\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions\n         * for outside modules wasn't enough because the setOptions method created a new\n         * object.\n         *\n         * @function Highcharts.getOptions\n         *\n         * @return {Highcharts.Options}\n         * Default options.\n         */\n        function getOptions() {\n            return defaultOptions;\n        }\n        /**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @sample highcharts/members/setoptions Applying a global theme\n         *\n         * @function Highcharts.setOptions\n         *\n         * @param {Highcharts.Options} options\n         * The new custom chart options.\n         *\n         * @return {Highcharts.Options}\n         * Updated options.\n         */\n        function setOptions(options) {\n            fireEvent(H, 'setOptions', { options });\n            // Copy in the default options\n            merge(true, defaultOptions, options);\n            // Update the time object\n            if (options.time) {\n                defaultTime.update(defaultOptions.time);\n            }\n            if (options.lang && 'locale' in options.lang) {\n                defaultTime.update({\n                    locale: options.lang.locale\n                });\n            }\n            return defaultOptions;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DefaultOptions = {\n            defaultOptions,\n            defaultTime,\n            getOptions,\n            setOptions\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"plotBox\"|\"spacingBox\"} Highcharts.ButtonRelativeToValue\n         */\n        /**\n         * Gets fired when a series is added to the chart after load time, using the\n         * `addSeries` method. Returning `false` prevents the series from being added.\n         *\n         * @callback Highcharts.ChartAddSeriesCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.ChartAddSeriesEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains common event information. Through the `options` property you can\n         * access the series options that were passed to the `addSeries` method.\n         *\n         * @interface Highcharts.ChartAddSeriesEventObject\n         */ /**\n        * The series options that were passed to the `addSeries` method.\n        * @name Highcharts.ChartAddSeriesEventObject#options\n        * @type {Highcharts.SeriesOptionsType}\n        */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.ChartAddSeriesEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The event target.\n        * @name Highcharts.ChartAddSeriesEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.ChartAddSeriesEventObject#type\n        * @type {\"addSeries\"}\n        */\n        /**\n         * Gets fired when clicking on the plot background.\n         *\n         * @callback Highcharts.ChartClickCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.PointerEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains an axes of the clicked spot.\n         *\n         * @interface Highcharts.ChartClickEventAxisObject\n         */ /**\n        * Axis at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#axis\n        * @type {Highcharts.Axis}\n        */ /**\n        * Axis value at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#value\n        * @type {number}\n        */\n        /**\n         * Contains information about the clicked spot on the chart. Remember the unit\n         * of a datetime axis is milliseconds since 1970-01-01 00:00:00.\n         *\n         * @interface Highcharts.ChartClickEventObject\n         * @extends Highcharts.PointerEventObject\n         */ /**\n        * Information about the x-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#xAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the y-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#yAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the z-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#zAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>|undefined}\n        */\n        /**\n         * Gets fired when the chart is finished loading.\n         *\n         * @callback Highcharts.ChartLoadCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Fires when the chart is redrawn, either after a call to `chart.redraw()` or\n         * after an axis, series or point is modified with the `redraw` option set to\n         * `true`.\n         *\n         * @callback Highcharts.ChartRedrawCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired after initial load of the chart (directly after the `load` event),\n         * and after each redraw (directly after the `redraw` event).\n         *\n         * @callback Highcharts.ChartRenderCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired when an area of the chart has been selected. The default action\n         * for the selection event is to zoom the chart to the selected area. It can be\n         * prevented by calling `event.preventDefault()` or return false.\n         *\n         * @callback Highcharts.ChartSelectionCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.SelectEventObject} event\n         *        Event informations\n         *\n         * @return {boolean|undefined}\n         *         Return false to prevent the default action, usually zoom.\n         */\n        (''); // Detach doclets above\n\n        return DefaultOptions;\n    });\n    _registerModule(_modules, 'Core/Templating.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (D, G, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, defaultTime } = D;\n        const { doc } = G;\n        const { extend, getNestedProperty, isArray, isNumber, isObject, pick, ucfirst } = U;\n        const helpers = {\n            // Built-in helpers\n            add: (a, b) => a + b,\n            divide: (a, b) => (b !== 0 ? a / b : ''),\n            // eslint-disable-next-line eqeqeq\n            eq: (a, b) => a == b,\n            each: function (arr) {\n                const match = arguments[arguments.length - 1];\n                return isArray(arr) ?\n                    arr.map((item, i) => format(match.body, extend(isObject(item) ? item : { '@this': item }, {\n                        '@index': i,\n                        '@first': i === 0,\n                        '@last': i === arr.length - 1\n                    }))).join('') :\n                    false;\n            },\n            ge: (a, b) => a >= b,\n            gt: (a, b) => a > b,\n            'if': (condition) => !!condition,\n            le: (a, b) => a <= b,\n            lt: (a, b) => a < b,\n            multiply: (a, b) => a * b,\n            // eslint-disable-next-line eqeqeq\n            ne: (a, b) => a != b,\n            subtract: (a, b) => a - b,\n            ucfirst,\n            unless: (condition) => !condition\n        };\n        const numberFormatCache = {};\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime](https://www.php.net/manual/en/function.strftime.php) function.\n         * Additional formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * Since v6.0.5, all internal dates are formatted through the\n         * {@link Highcharts.Chart#time} instance to respect chart-level time settings.\n         * The `Highcharts.dateFormat` function only reflects global time settings set\n         * with `setOptions`.\n         *\n         * Supported format keys:\n         * - `%a`: Short weekday, like 'Mon'\n         * - `%A`: Long weekday, like 'Monday'\n         * - `%d`: Two digit day of the month, 01 to 31\n         * - `%e`: Day of the month, 1 through 31\n         * - `%w`: Day of the week, 0 through 6\n         * - `%b`: Short month, like 'Jan'\n         * - `%B`: Long month, like 'January'\n         * - `%m`: Two digit month number, 01 through 12\n         * - `%y`: Two digits year, like 09 for 2009\n         * - `%Y`: Four digits year, like 2009\n         * - `%H`: Two digits hours in 24h format, 00 through 23\n         * - `%k`: Hours in 24h format, 0 through 23\n         * - `%I`: Two digits hours in 12h format, 00 through 11\n         * - `%l`: Hours in 12h format, 1 through 12\n         * - `%M`: Two digits minutes, 00 through 59\n         * - `%p`: Upper case AM or PM\n         * - `%P`: Lower case AM or PM\n         * - `%S`: Two digits seconds, 00 through 59\n         * - `%L`: Milliseconds (naming from Ruby)\n         *\n         * @function Highcharts.dateFormat\n         *\n         * @param {string} format\n         *        The desired format where various time representations are prefixed\n         *        with `%`.\n         *\n         * @param {number} timestamp\n         *        The JavaScript timestamp.\n         *\n         * @param {boolean} [upperCaseFirst=false]\n         *        Upper case first letter in the return.\n         *\n         * @return {string}\n         *         The formatted date.\n         */\n        function dateFormat(format, timestamp, upperCaseFirst) {\n            return defaultTime.dateFormat(format, timestamp, upperCaseFirst);\n        }\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @example\n         * let s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         *\n         * @function Highcharts.format\n         *\n         * @param {string} str\n         *        The string to format.\n         *\n         * @param {Record<string, *>} ctx\n         *        The context, a collection of key-value pairs where each key is\n         *        replaced by its value.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        A `Chart` instance used to get numberFormatter and time.\n         *\n         * @return {string}\n         *         The formatted string.\n         */\n        function format(str = '', ctx, chart) {\n            const regex = /\\{([\\p{L}\\d:\\.,;\\-\\/<>\\[\\]%_@\"'’= #\\(\\)]+)\\}/gu, \n            // The sub expression regex is the same as the top expression regex,\n            // but except parens and block helpers (#), and surrounded by parens\n            // instead of curly brackets.\n            subRegex = /\\(([\\p{L}\\d:\\.,;\\-\\/<>\\[\\]%_@\"'= ]+)\\)/gu, matches = [], floatRegex = /f$/, decRegex = /\\.(\\d)/, lang = chart?.options.lang || defaultOptions.lang, time = chart && chart.time || defaultTime, numberFormatter = chart && chart.numberFormatter || numberFormat;\n            /*\n             * Get a literal or variable value inside a template expression. May be\n             * extended with other types like string or null if needed, but keep it\n             * small for now.\n             */\n            const resolveProperty = (key = '') => {\n                let n;\n                // Literals\n                if (key === 'true') {\n                    return true;\n                }\n                if (key === 'false') {\n                    return false;\n                }\n                if ((n = Number(key)).toString() === key) {\n                    return n;\n                }\n                if (/^[\"'].+[\"']$/.test(key)) {\n                    return key.slice(1, -1);\n                }\n                // Variables and constants\n                return getNestedProperty(key, ctx);\n            };\n            let match, currentMatch, depth = 0, hasSub;\n            // Parse and create tree\n            while ((match = regex.exec(str)) !== null) {\n                // When a sub expression is found, it is evaluated first, and the\n                // results recursively evaluated until no subexpression exists.\n                const mainMatch = match, subMatch = subRegex.exec(match[1]);\n                if (subMatch) {\n                    match = subMatch;\n                    hasSub = true;\n                }\n                if (!currentMatch || !currentMatch.isBlock) {\n                    currentMatch = {\n                        ctx,\n                        expression: match[1],\n                        find: match[0],\n                        isBlock: match[1].charAt(0) === '#',\n                        start: match.index,\n                        startInner: match.index + match[0].length,\n                        length: match[0].length\n                    };\n                }\n                // Identify helpers\n                const fn = (currentMatch.isBlock ? mainMatch : match)[1].split(' ')[0].replace('#', '');\n                if (helpers[fn]) {\n                    // Block helper, only 0 level is handled\n                    if (currentMatch.isBlock && fn === currentMatch.fn) {\n                        depth++;\n                    }\n                    if (!currentMatch.fn) {\n                        currentMatch.fn = fn;\n                    }\n                }\n                // Closing a block helper\n                const startingElseSection = match[1] === 'else';\n                if (currentMatch.isBlock &&\n                    currentMatch.fn && (match[1] === `/${currentMatch.fn}` ||\n                    startingElseSection)) {\n                    if (!depth) { // === 0\n                        const start = currentMatch.startInner, body = str.substr(start, match.index - start);\n                        // Either closing without an else section, or when encountering\n                        // an else section\n                        if (currentMatch.body === void 0) {\n                            currentMatch.body = body;\n                            currentMatch.startInner = match.index + match[0].length;\n                            // The body exists already, so this is the else section\n                        }\n                        else {\n                            currentMatch.elseBody = body;\n                        }\n                        currentMatch.find += body + match[0];\n                        if (!startingElseSection) {\n                            matches.push(currentMatch);\n                            currentMatch = void 0;\n                        }\n                    }\n                    else if (!startingElseSection) {\n                        depth--;\n                    }\n                    // Common expression\n                }\n                else if (!currentMatch.isBlock) {\n                    matches.push(currentMatch);\n                }\n                // Evaluate sub-matches one by one to prevent orphaned block closers\n                if (subMatch && !currentMatch?.isBlock) {\n                    break;\n                }\n            }\n            // Execute\n            matches.forEach((match) => {\n                const { body, elseBody, expression, fn } = match;\n                let replacement, i;\n                // Helper function\n                if (fn) {\n                    // Pass the helpers the amount of arguments defined by the function,\n                    // then the match as the last argument.\n                    const args = [match], parts = [], len = expression.length;\n                    let start = 0, startChar;\n                    for (i = 0; i <= len; i++) {\n                        const char = expression.charAt(i);\n                        // Start of string\n                        if (!startChar && (char === '\"' || char === '\\'')) {\n                            startChar = char;\n                            // End of string\n                        }\n                        else if (startChar === char) {\n                            startChar = '';\n                        }\n                        if (!startChar &&\n                            (char === ' ' || i === len)) {\n                            parts.push(expression.substr(start, i - start));\n                            start = i + 1;\n                        }\n                    }\n                    i = helpers[fn].length;\n                    while (i--) {\n                        args.unshift(resolveProperty(parts[i + 1]));\n                    }\n                    replacement = helpers[fn].apply(ctx, args);\n                    // Block helpers may return true or false. They may also return a\n                    // string, like the `each` helper.\n                    if (match.isBlock && typeof replacement === 'boolean') {\n                        replacement = format(replacement ? body : elseBody, ctx, chart);\n                    }\n                    // Simple variable replacement\n                }\n                else {\n                    const valueAndFormat = expression.split(':');\n                    replacement = resolveProperty(valueAndFormat.shift() || '');\n                    // Format the replacement\n                    if (valueAndFormat.length && typeof replacement === 'number') {\n                        const segment = valueAndFormat.join(':');\n                        if (floatRegex.test(segment)) { // Float\n                            const decimals = parseInt((segment.match(decRegex) || ['', '-1'])[1], 10);\n                            if (replacement !== null) {\n                                replacement = numberFormatter(replacement, decimals, lang.decimalPoint, segment.indexOf(',') > -1 ? lang.thousandsSep : '');\n                            }\n                        }\n                        else {\n                            replacement = time.dateFormat(segment, replacement);\n                            // Use string literal in order to be preserved in the outer\n                            // expression\n                            if (hasSub) {\n                                replacement = `\"${replacement}\"`;\n                            }\n                        }\n                    }\n                }\n                str = str.replace(match.find, pick(replacement, ''));\n            });\n            return hasSub ? format(str, ctx, chart) : str;\n        }\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @sample highcharts/members/highcharts-numberformat/\n         *         Custom number format\n         *\n         * @function Highcharts.numberFormat\n         *\n         * @param {number} number\n         *        The input number to format.\n         *\n         * @param {number} decimals\n         *        The amount of decimals. A value of -1 preserves the amount in the\n         *        input number.\n         *\n         * @param {string} [decimalPoint]\n         *        The decimal point, defaults to the one given in the lang options, or\n         *        a dot.\n         *\n         * @param {string} [thousandsSep]\n         *        The thousands separator, defaults to the one given in the lang\n         *        options, or a space character.\n         *\n         * @return {string}\n         *         The formatted number.\n         */\n        function numberFormat(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n            let ret, fractionDigits, [mantissa, exp] = number.toString().split('e').map(Number);\n            const lang = this?.options?.lang || defaultOptions.lang, origDec = (number.toString().split('.')[1] || '').split('e')[0].length, firstDecimals = decimals, options = {};\n            decimalPoint ?? (decimalPoint = lang.decimalPoint);\n            thousandsSep ?? (thousandsSep = lang.thousandsSep);\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            }\n            else if (!isNumber(decimals)) {\n                decimals = 2;\n            }\n            else if (decimals && exp < 0) {\n                // Expose decimals from exponential notation (#7042)\n                fractionDigits = decimals + exp;\n                if (fractionDigits >= 0) {\n                    // Remove too small part of the number while keeping the notation\n                    mantissa = +mantissa.toExponential(fractionDigits).split('e')[0];\n                    decimals = fractionDigits;\n                }\n                else {\n                    // `fractionDigits < 0`\n                    mantissa = Math.floor(mantissa);\n                    if (decimals < 20) {\n                        // Use number instead of exponential notation (#7405)\n                        number = +(mantissa * Math.pow(10, exp)).toFixed(decimals);\n                    }\n                    else {\n                        // Or zero\n                        number = 0;\n                    }\n                    exp = 0;\n                }\n            }\n            if (exp) {\n                decimals ?? (decimals = 2);\n                number = mantissa;\n            }\n            if (isNumber(decimals) && decimals >= 0) {\n                options.minimumFractionDigits = decimals;\n                options.maximumFractionDigits = decimals;\n            }\n            if (thousandsSep === '') {\n                options.useGrouping = false;\n            }\n            const hasSeparators = thousandsSep || decimalPoint, locale = hasSeparators ?\n                'en' :\n                (this?.locale ||\n                    lang.locale ||\n                    doc.body.closest('[lang]')?.lang), cacheKey = JSON.stringify(options) + locale, nf = numberFormatCache[cacheKey] ?? (numberFormatCache[cacheKey] = new Intl.NumberFormat(locale, options));\n            ret = nf.format(number);\n            // If thousandsSep or decimalPoint are set, fall back to using English\n            // format with string replacement for the separators.\n            if (hasSeparators) {\n                ret = ret\n                    .replace(/\\,/g, thousandsSep ?? ',')\n                    .replace('.', decimalPoint ?? '.');\n            }\n            if (\n            // Remove signed zero (#20564)\n            (!decimals && +ret === 0) ||\n                // Small numbers, no decimals (#14023)\n                (exp < 0 && !firstDecimals)) {\n                ret = '0';\n            }\n            if (exp && +ret !== 0) {\n                ret += 'e' + (exp < 0 ? '' : '+') + exp;\n            }\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Templating = {\n            dateFormat,\n            format,\n            helpers,\n            numberFormat\n        };\n\n        return Templating;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPIComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/KPIComponent/KPISyncs/KPISyncs.js'], _modules['Dashboards/Components/KPIComponent/KPIComponentDefaults.js'], _modules['Core/Templating.js'], _modules['Core/Utilities.js']], function (AST, Component, KPISyncs, KPIComponentDefaults, Templating, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { format } = Templating;\n        const { createElement, css, defined, diffObjects, isArray, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a KPI component.\n         *\n         */\n        class KPIComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the KPI component.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @returns\n             * KPI component based on config from JSON.\n             *\n             * @internal\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const chartOptions = options.chartOptions && JSON.parse(options.chartOptions);\n                const subtitle = JSON.parse(options.subtitle || '{}');\n                const title = options.title && JSON.parse(options.title);\n                return new KPIComponent(cell, merge(options, {\n                    chartOptions,\n                    title,\n                    subtitle\n                }));\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a KPI component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                options = merge(KPIComponent.defaultOptions, options);\n                super(cell, options, board);\n                this.options = options;\n                this.type = 'KPI';\n                this.value = createElement('span', {\n                    className: `${options.className}-value`\n                }, {}, this.contentElement);\n                this.subtitle = createElement('span', {\n                    className: this.getSubtitleClassName()\n                }, {}, this.contentElement);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                await super.load();\n                this.linkValueToChart();\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                // Animate\n                if (this.chart && this.chart.container) {\n                    this.chart.reflow();\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.updateElements();\n                const charter = KPIComponent.charter?.Chart;\n                if (charter &&\n                    this.options.chartOptions &&\n                    !this.chart) {\n                    if (!this.chartContainer) {\n                        this.chartContainer = createElement('div', {\n                            className: `${this.options.className}-chart-container`\n                        }, {\n                            // Fix inner height, when using flex box\n                            padding: '0.1px'\n                        }, this.contentElement);\n                    }\n                    this.chart = charter.chart(this.chartContainer, merge(KPIComponent.defaultChartOptions, this.options.chartOptions));\n                }\n                else if (this.chart &&\n                    !this.options.chartOptions &&\n                    'chartOptions' in this.options) {\n                    this.chart.destroy();\n                    this.chart = void 0;\n                }\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options);\n                if (options.chartOptions && this.chart) {\n                    this.chart.update(options.chartOptions);\n                }\n                shouldRerender && this.render();\n            }\n            /**\n             * @internal\n             */\n            onTableChanged() {\n                this.setValue();\n            }\n            /**\n             * Destroys the highcharts component.\n             */\n            destroy() {\n                // Cleanup references in the global Highcharts scope\n                this.chart?.destroy();\n                super.destroy();\n            }\n            /**\n             * Gets the default value that should be displayed in the KPI.\n             *\n             * @returns\n             * The value that should be displayed in the KPI.\n             */\n            getValue() {\n                if (defined(this.options.value)) {\n                    return this.options.value;\n                }\n                const connector = this.getFirstConnector();\n                if (connector && this.options.columnName) {\n                    const table = connector.table.modified, column = table.getColumn(this.options.columnName), length = column?.length || 0;\n                    return table.getCellAsString(this.options.columnName, length - 1);\n                }\n            }\n            /**\n             * Sets the value that should be displayed in the KPI.\n             *\n             * @param value\n             * The value to display in the KPI.\n             */\n            setValue(value = this.getValue()) {\n                const { valueFormat, valueFormatter } = this.options;\n                if (defined(value)) {\n                    let prevValue;\n                    if (isNumber(+value)) {\n                        prevValue = +value;\n                    }\n                    if (valueFormatter) {\n                        value = valueFormatter.call(this, value);\n                    }\n                    else if (valueFormat) {\n                        value = format(valueFormat, { value });\n                    }\n                    else if (isNumber(value)) {\n                        value = value.toLocaleString();\n                    }\n                    AST.setElementHTML(this.value, '' + value);\n                    this.linkValueToChart(prevValue);\n                    this.prevValue = prevValue;\n                }\n            }\n            /**\n             * Handles updating chart point value.\n             *\n             * @internal\n             */\n            linkValueToChart(value = this.getValue()) {\n                const chart = this.chart;\n                const linkedValueTo = this.options.linkedValueTo;\n                if (!chart || !linkedValueTo.enabled ||\n                    !defined(value) || !isNumber(+value)) {\n                    return;\n                }\n                value = +value;\n                const targetSeries = chart.series[linkedValueTo.seriesIndex ?? 0], targetPoint = targetSeries?.points[linkedValueTo.pointIndex ?? 0];\n                if (targetSeries) {\n                    if (targetPoint) {\n                        targetPoint.update({\n                            y: value\n                        });\n                        return;\n                    }\n                    targetSeries.addPoint({\n                        y: value\n                    });\n                    return;\n                }\n                chart.addSeries({\n                    data: [{\n                            y: value\n                        }]\n                });\n            }\n            /**\n             * Handles updating elements via options\n             *\n             * @internal\n             */\n            updateElements() {\n                const { style, subtitle } = this.options;\n                this.setValue();\n                AST.setElementHTML(this.subtitle, this.getSubtitle());\n                if (style) {\n                    css(this.element, style);\n                }\n                if (typeof subtitle === 'object') {\n                    if (subtitle.style) {\n                        css(this.subtitle, subtitle.style);\n                    }\n                    this.subtitle.className = this.getSubtitleClassName();\n                }\n                if (this.chartContainer) {\n                    this.chartContainer.style.flex =\n                        this.options.chartOptions ? '1' : '0';\n                }\n                if (this.chart) {\n                    this.chart.reflow();\n                }\n                this.value.style.color = this.getValueColor();\n            }\n            /**\n             * Gets KPI subtitle text.\n             *\n             * @returns\n             * The subtitle's text.\n             *\n             * @internal\n             */\n            getSubtitle() {\n                const { subtitle, value } = this.options;\n                if (typeof subtitle === 'string') {\n                    return subtitle;\n                }\n                if (subtitle) {\n                    if (isNumber(this.prevValue) && isNumber(value)) {\n                        const diff = value - this.prevValue;\n                        let prefix = '';\n                        if (diff > 0) {\n                            prefix = '<span style=\"color:green\">&#9650;</span> +';\n                        }\n                        else if (diff < 0) {\n                            prefix = '<span style=\"color:red\">&#9660;</span> ';\n                        }\n                        else {\n                            return this.subtitle.innerHTML;\n                        }\n                        if (subtitle.type === 'diff') {\n                            return prefix + diff.toLocaleString();\n                        }\n                        if (subtitle.type === 'diffpercent') {\n                            return prefix + format('{v:,.2f}%', {\n                                v: diff / this.prevValue * 100\n                            });\n                        }\n                    }\n                    return subtitle.text || '';\n                }\n                return '';\n            }\n            /**\n             * Gets CSS class name of the KPI subtitle.\n             *\n             * @returns\n             * The name of class.\n             *\n             * @internal\n             */\n            getSubtitleClassName() {\n                const { subtitle } = this.options;\n                return `${Component.defaultOptions.className}-subtitle` +\n                    ((typeof subtitle === 'object' && subtitle.className) || '');\n            }\n            /**\n             * Applies title's color according to the threshold.\n             *\n             * @returns\n             * Hex of color.\n             *\n             * @internal\n             */\n            getValueColor() {\n                const { threshold, thresholdColors, value } = this.options;\n                if (thresholdColors && threshold && isNumber(value)) {\n                    if (isArray(threshold)) {\n                        for (let i = threshold.length - 1; i >= 0; i--) {\n                            if (value >= threshold[i]) {\n                                if (i + 1 < thresholdColors.length) {\n                                    return thresholdColors[i + 1];\n                                }\n                                return thresholdColors[thresholdColors.length - 1];\n                            }\n                        }\n                    }\n                    else if (value >= threshold) {\n                        return thresholdColors[1];\n                    }\n                    return thresholdColors[0];\n                }\n                return '';\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'KPI'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    type: 'KPI',\n                    options: {\n                        ...base.options,\n                        type: 'KPI',\n                        value: this.options.value,\n                        subtitle: JSON.stringify(this.options.subtitle),\n                        title: JSON.stringify(this.options.title),\n                        threshold: this.options.threshold,\n                        thresholdColors: this.options.thresholdColors,\n                        chartOptions: JSON.stringify(this.options.chartOptions),\n                        valueFormat: this.options.valueFormat\n                    }\n                };\n                this.emit({ type: 'toJSON', json: base });\n                return json;\n            }\n            /**\n             * Get the KPI component's options.\n             * @returns\n             * The JSON of KPI component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, KPIComponent.defaultOptions),\n                    type: 'KPI'\n                };\n            }\n        }\n        /**\n         * Default options of the KPI component.\n         */\n        KPIComponent.defaultOptions = merge(Component.defaultOptions, KPIComponentDefaults);\n        /**\n         * Predefined sync config for the KPI component.\n         */\n        KPIComponent.predefinedSyncConfig = KPISyncs;\n        /**\n         * Default options of the KPI component.\n         *\n         * @default {\n            chart: {\n                type: 'spline',\n                zooming: {\n                    mouseWheel: {\n                        enabled: false\n                    }\n                }\n            },\n            title: {\n                text: void 0\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false,\n                title: {\n                    text: null\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            tooltip: {\n                outside: true\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            }\n        }\n         */\n        KPIComponent.defaultChartOptions = {\n            chart: {\n                type: 'spline',\n                zooming: {\n                    mouseWheel: {\n                        enabled: false\n                    }\n                }\n            },\n            title: {\n                text: void 0\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false,\n                title: {\n                    text: null\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            tooltip: {\n                outside: true\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return KPIComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const NavigatorComponentDefaults = {\n            type: 'Navigator',\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-navigator`\n            ].join(' '),\n            chartOptions: {\n                chart: {\n                    animation: false,\n                    height: 200,\n                    type: 'column',\n                    zooming: {\n                        mouseWheel: {\n                            enabled: false\n                        }\n                    }\n                },\n                credits: {\n                    enabled: false\n                },\n                legend: {\n                    enabled: false\n                },\n                navigator: {\n                    enabled: true,\n                    outlineWidth: 0,\n                    series: {\n                        animation: false,\n                        lineWidth: 0,\n                        colorIndex: 0\n                    },\n                    xAxis: {\n                        endOnTick: true,\n                        gridZIndex: 4,\n                        labels: {\n                            x: 1,\n                            y: 22\n                        },\n                        opposite: true,\n                        showFirstLabel: true,\n                        showLastLabel: true,\n                        startOnTick: true,\n                        tickPosition: 'inside'\n                    },\n                    yAxis: {\n                        maxPadding: 0.5\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        borderRadius: 0,\n                        marker: {\n                            enabled: false\n                        },\n                        states: {\n                            hover: {\n                                enabled: false\n                            }\n                        }\n                    }\n                },\n                scrollbar: {\n                    enabled: true\n                },\n                title: {\n                    text: ''\n                },\n                tooltip: {\n                    enabled: false\n                },\n                xAxis: {\n                    visible: false,\n                    minRange: Number.MIN_VALUE\n                },\n                yAxis: {\n                    visible: false\n                }\n            },\n            editableOptions: (Component.defaultOptions.editableOptions || []).concat()\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncUtils.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Namespace\n        *\n        * */\n        var NavigatorSyncUtils;\n        (function (NavigatorSyncUtils) {\n            /* *\n            *\n            *  Utility Functions\n            *\n            * */\n            /**\n             * Adds or updates range options for a specific column.\n             * @param ranges Array of range options (will be modified).\n             * @param column Column name.\n             * @param minValue Minimum value.\n             * @param maxValue Maximum value.\n             * @internal\n             */\n            function setRangeOptions(ranges, column, minValue, maxValue) {\n                let changed = false;\n                for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                    if (ranges[i].column === column) {\n                        ranges[i].maxValue = maxValue;\n                        ranges[i].minValue = minValue;\n                        changed = true;\n                        break;\n                    }\n                }\n                if (!changed) {\n                    ranges.push({ column, maxValue, minValue });\n                }\n            }\n            NavigatorSyncUtils.setRangeOptions = setRangeOptions;\n            /**\n             * Removes range options for a specific column.\n             * @param ranges Array of range options (will be modified).\n             * @param column Column name.\n             * @internal\n             */\n            function unsetRangeOptions(ranges, column) {\n                for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                    if (ranges[i].column === column) {\n                        return ranges.splice(i, 1)[0];\n                    }\n                }\n            }\n            NavigatorSyncUtils.unsetRangeOptions = unsetRangeOptions;\n        })(NavigatorSyncUtils || (NavigatorSyncUtils = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorSyncUtils;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorCrossfilterSync.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncUtils.js'], _modules['Core/Utilities.js']], function (DataModifier, NavigatorSyncUtils, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { Range: RangeModifier } = DataModifier.types;\n        const { addEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {\n            affectNavigator: false\n        };\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Navigator') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.crossfilter;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const afterSetExtremes = async (extremes) => {\n                    if (component.connectorHandlers?.[0]?.connector) {\n                        const table = component.connectorHandlers[0].connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = component.getAxisExtremes();\n                        let modifier = table.getModifier();\n                        if (modifier instanceof RangeModifier) {\n                            NavigatorSyncUtils.setRangeOptions(modifier.options.ranges, filterColumn, min, max);\n                        }\n                        else {\n                            modifier = new RangeModifier({\n                                ranges: [{\n                                        column: filterColumn,\n                                        maxValue: max,\n                                        minValue: min\n                                    }]\n                            });\n                        }\n                        await table.setModifier(modifier);\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, min),\n                            state: 'crossfilter' + groupKey\n                        }, extremes);\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, max),\n                            state: 'crossfilter' + groupKey\n                        }, extremes);\n                    }\n                };\n                let delay;\n                return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                    clearTimeout(delay);\n                    delay = setTimeout(afterSetExtremes, 50, this, extremes);\n                });\n            },\n            handler: void 0\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorExtremesSync.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncUtils.js'], _modules['Core/Utilities.js']], function (DataModifier, NavigatorSyncUtils, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { Range: RangeModifier } = DataModifier.types;\n        const { addEvent, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Navigator') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const afterSetExtremes = (extremes) => {\n                    if (component.connectorHandlers?.[0]?.connector) {\n                        const table = component.connectorHandlers[0].connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = component.getAxisExtremes();\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, min),\n                            state: 'xAxis.extremes.min' + groupKey\n                        }, extremes);\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, max),\n                            state: 'xAxis.extremes.max' + groupKey\n                        }, extremes);\n                    }\n                };\n                let delay;\n                return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                    clearTimeout(delay);\n                    delay = setTimeout(afterSetExtremes, 50, this, extremes);\n                });\n            },\n            handler: function () {\n                if (this.type !== 'Navigator') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const dataCursor = component.board.dataCursor;\n                const extremesListener = (e) => {\n                    const cursor = e.cursor;\n                    if (!component.connectorHandlers?.[0]?.connector) {\n                        return;\n                    }\n                    const table = component.connectorHandlers[0].connector.table;\n                    // Assume first column with unique keys as fallback\n                    let extremesColumn = table.getColumnNames()[0], maxIndex = table.getRowCount(), minIndex = 0;\n                    if (cursor.type === 'range') {\n                        maxIndex = cursor.lastRow;\n                        minIndex = cursor.firstRow;\n                        if (cursor.columns) {\n                            extremesColumn = pick(cursor.columns[0], extremesColumn);\n                        }\n                    }\n                    else if (cursor.state === 'xAxis.extremes.max' + groupKey) {\n                        extremesColumn = pick(cursor.column, extremesColumn);\n                        maxIndex = pick(cursor.row, maxIndex);\n                    }\n                    else {\n                        extremesColumn = pick(cursor.column, extremesColumn);\n                        minIndex = pick(cursor.row, minIndex);\n                    }\n                    const modifier = table.getModifier();\n                    if (typeof extremesColumn === 'string' &&\n                        modifier instanceof RangeModifier) {\n                        const ranges = modifier.options.ranges, min = table.getCell(extremesColumn, minIndex), max = table.getCell(extremesColumn, maxIndex);\n                        if (max !== null && typeof max !== 'undefined' &&\n                            min !== null && typeof min !== 'undefined') {\n                            NavigatorSyncUtils.unsetRangeOptions(ranges, extremesColumn);\n                            ranges.unshift({\n                                column: extremesColumn,\n                                maxValue: max,\n                                minValue: min\n                            });\n                            table.setModifier(modifier);\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (table) {\n                        dataCursor.addListener(table.id, 'xAxis.extremes' + groupKey, extremesListener);\n                        dataCursor.addListener(table.id, 'xAxis.extremes.max' + groupKey, extremesListener);\n                        dataCursor.addListener(table.id, 'xAxis.extremes.min' + groupKey, extremesListener);\n                    }\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (table) {\n                        dataCursor.removeListener(table.id, 'xAxis.extremes' + groupKey, extremesListener);\n                        dataCursor.removeListener(table.id, 'xAxis.extremes.max' + groupKey, extremesListener);\n                        dataCursor.removeListener(table.id, 'xAxis.extremes.min' + groupKey, extremesListener);\n                    }\n                };\n                registerCursorListeners();\n                return unregisterCursorListeners;\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncs.js', [_modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorCrossfilterSync.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorExtremesSync.js']], function (NavigatorCrossfilterSync, NavigatorExtremesSync) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                crossfilter: NavigatorCrossfilterSync.syncPair,\n                extremes: NavigatorExtremesSync.syncPair\n            },\n            defaultSyncOptions: {\n                crossfilter: NavigatorCrossfilterSync.defaultOptions,\n                extremes: NavigatorExtremesSync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorComponentDefaults.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncs.js'], _modules['Core/Utilities.js']], function (Component, Globals, NavigatorComponentDefaults, NavigatorSyncs, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { diffObjects, isNumber, isString, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Setup a component with data navigation.\n         */\n        class NavigatorComponent extends Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the Highcharts component.\n             *\n             * @returns\n             * Highcharts component based on config from JSON.\n             *\n             * @private\n             */\n            static fromJSON(json, cell) {\n                const options = json.options, component = new NavigatorComponent(cell, options);\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options) {\n                super(cell, options);\n                this.type = 'Navigator';\n                this.options = merge(NavigatorComponent.defaultOptions, options);\n                const charter = (NavigatorComponent.charter.Chart ||\n                    Globals.win.Highcharts);\n                this.chartContainer = Globals.win.document.createElement('div');\n                this.chart = charter\n                    .chart(this.chartContainer, (this.options.chartOptions || {}));\n                this.chartContainer.classList\n                    .add(Globals.classNamePrefix + 'navigator');\n                if (this.sync.syncConfig.crossfilter?.enabled) {\n                    this.chart.update(merge({ navigator: { xAxis: { labels: { format: '{value}' } } } }, this.options.chartOptions || {}), false);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            adjustNavigator() {\n                const chart = this.chart, height = pick(chart.chartHeight, this.contentElement.clientHeight), width = this.contentElement.clientWidth, chartUpdates = {};\n                if (chart.chartHeight !== height ||\n                    chart.chartWidth !== width) {\n                    chartUpdates.chart = {\n                        height,\n                        width\n                    };\n                }\n                if (chart.navigator) {\n                    const navigator = chart.navigator, navigatorHeight = (navigator.top - chart.plotTop + navigator.height);\n                    if (navigator.height !== navigatorHeight) {\n                        chartUpdates.navigator = {\n                            handles: {\n                                height: Math.round(height / 4)\n                            },\n                            height: navigatorHeight\n                        };\n                    }\n                    if (Object.keys(chartUpdates).length) {\n                        chart.update(chartUpdates, false);\n                    }\n                    if (navigator.series && navigator.series[0]) {\n                        navigator.series[0].update({\n                            type: chart.series[0].type\n                        }, false);\n                    }\n                }\n                else if (Object.keys(chartUpdates).length) {\n                    chart.update(chartUpdates, false);\n                }\n            }\n            /**\n             * Returns the first column of columnAssignment to use for navigator data.\n             * @private\n             *\n             * @return\n             * Navigator column assignment.\n             */\n            getColumnAssignment() {\n                const columnAssignment = this.options.columnAssignment ??\n                    this.options.columnAssignments ?? {};\n                let columnsAssignment;\n                for (const column of Object.keys(columnAssignment)) {\n                    columnsAssignment = columnAssignment[column];\n                    if (columnsAssignment !== null) {\n                        return [column, columnsAssignment];\n                    }\n                }\n                const connector = this.getFirstConnector();\n                if (connector) {\n                    const columns = connector.table.getColumnNames();\n                    if (columns.length) {\n                        return [columns[0], 'y'];\n                    }\n                }\n                return ['', 'y'];\n            }\n            /**\n             * Gets the component's options.\n             * @internal\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, NavigatorComponentDefaults),\n                    type: 'Navigator'\n                };\n            }\n            /**\n             * Gets the extremes of the navigator's x-axis.\n             */\n            getAxisExtremes() {\n                const axis = this.chart.xAxis[0], extremes = axis.getExtremes(), min = isNumber(extremes.min) ? extremes.min : extremes.dataMin, max = isNumber(extremes.max) ? extremes.max : extremes.dataMax;\n                if (this.categories) {\n                    return [\n                        this.categories[Math.max(0, Math.ceil(min))],\n                        this.categories[Math.min(this.categories.length - 1, Math.floor(max))]\n                    ];\n                }\n                if (axis.hasNames) {\n                    return [\n                        axis.names[Math.ceil(min)],\n                        axis.names[Math.floor(max)]\n                    ];\n                }\n                return [min, max];\n            }\n            /** @private */\n            async load() {\n                await super.load();\n                this.contentElement.appendChild(this.chartContainer);\n                this.parentElement.appendChild(this.element);\n                this.adjustNavigator();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            onTableChanged() {\n                this.renderNavigator();\n            }\n            /** @private */\n            redrawNavigator() {\n                const timeouts = this.resizeTimeouts;\n                for (let i = 0, iEnd = timeouts.length; i < iEnd; ++i) {\n                    clearTimeout(timeouts[i]);\n                }\n                timeouts.length = 0;\n                timeouts.push(setTimeout(() => {\n                    this.adjustNavigator();\n                    this.chart.redraw();\n                }, 33));\n            }\n            /** @private */\n            render() {\n                const component = this;\n                super.render();\n                component.renderNavigator();\n                component.sync.start();\n                component.emit({ type: 'afterRender' });\n                return component;\n            }\n            /** @private */\n            renderNavigator() {\n                const chart = this.chart;\n                const connector = this.getFirstConnector();\n                if (connector) {\n                    const table = connector.table, column = this.getColumnAssignment(), columnValues = table.getColumn(column[0], true) || [];\n                    let data;\n                    if (this.sync.syncConfig.crossfilter?.enabled) {\n                        data = this.generateCrossfilterData();\n                    }\n                    else {\n                        data = columnValues.slice();\n                    }\n                    if (!chart.series[0]) {\n                        chart.addSeries({ id: table.id, data }, false);\n                    }\n                    else {\n                        chart.series[0].setData(data, false);\n                    }\n                }\n                this.redrawNavigator();\n            }\n            /**\n             * Generates the data for the crossfilter navigator.\n             */\n            generateCrossfilterData() {\n                const crossfilterOptions = this.sync.syncConfig.crossfilter;\n                const table = this.getFirstConnector()?.table;\n                const columnValues = table?.getColumn(this.getColumnAssignment()[0], true) || [];\n                if (!table || columnValues.length < 1 || !crossfilterOptions) {\n                    return [];\n                }\n                const values = [];\n                const uniqueXValues = [];\n                for (let i = 0, iEnd = columnValues.length; i < iEnd; i++) {\n                    let value = columnValues[i];\n                    if (value === null) {\n                        continue;\n                    }\n                    else if (!isNumber(value)) {\n                        value = `${value}`;\n                    }\n                    // Check if the x-axis data is not of mixed type.\n                    if (this.stringData === void 0) {\n                        this.stringData = isString(value);\n                    }\n                    else if (this.stringData !== isString(value)) {\n                        throw new Error('Mixed data types in crossfilter navigator are ' +\n                            'not supported.');\n                    }\n                    values.push(value);\n                    if (uniqueXValues.indexOf(value) === -1) {\n                        uniqueXValues.push(value);\n                    }\n                }\n                uniqueXValues.sort((a, b) => (pick(a, NaN) < pick(b, NaN) ? -1 : a === b ? 0 : 1));\n                let filteredValues;\n                const modifierOptions = table.getModifier()?.options;\n                if (crossfilterOptions.affectNavigator && modifierOptions) {\n                    const appliedRanges = [], rangedColumns = [], { ranges } = modifierOptions;\n                    for (let i = 0, iEnd = ranges.length; i < iEnd; i++) {\n                        if (ranges[i].column !== this.getColumnAssignment()[0]) {\n                            appliedRanges.push(ranges[i]);\n                            rangedColumns.push(table.getColumn(ranges[i].column, true) || []);\n                        }\n                    }\n                    filteredValues = [];\n                    const appliedRagesLength = appliedRanges.length;\n                    for (let i = 0, iEnd = values.length; i < iEnd; i++) {\n                        const value = values[i];\n                        let allConditionsMet = true;\n                        for (let j = 0; j < appliedRagesLength; j++) {\n                            const range = appliedRanges[j];\n                            if (!(rangedColumns[j][i] >=\n                                (range.minValue ?? -Infinity) &&\n                                rangedColumns[j][i] <=\n                                    (range.maxValue ?? Infinity))) {\n                                allConditionsMet = false;\n                                break;\n                            }\n                        }\n                        if (allConditionsMet) {\n                            filteredValues.push(value);\n                        }\n                    }\n                }\n                else {\n                    filteredValues = values;\n                }\n                const seriesData = [];\n                if (this.stringData) {\n                    this.categories = uniqueXValues;\n                    for (let i = 0, iEnd = uniqueXValues.length; i < iEnd; i++) {\n                        seriesData.push([i, null]);\n                    }\n                }\n                else {\n                    for (let i = 0, iEnd = uniqueXValues.length; i < iEnd; i++) {\n                        seriesData.push([uniqueXValues[i], null]);\n                    }\n                }\n                for (let i = 0, iEnd = filteredValues.length; i < iEnd; i++) {\n                    const index = uniqueXValues.indexOf(filteredValues[i]);\n                    seriesData[index][1] = (seriesData[index][1] || 0) + 1;\n                }\n                return seriesData;\n            }\n            /** @private */\n            resize(width, height) {\n                super.resize(width, height);\n                this.redrawNavigator();\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                const chart = this.chart;\n                await super.update(options, false);\n                if (options.chartOptions) {\n                    chart.update(merge(this.sync.syncConfig.crossfilter?.enabled ? ({ navigator: { xAxis: { labels: { format: '{value}' } } } }) : {}, options.chartOptions), false);\n                }\n                this.emit({ type: 'afterUpdate' });\n                if (shouldRerender) {\n                    this.render();\n                }\n            }\n            getOptionsOnDrop() {\n                return {};\n            }\n        }\n        /**\n         * Default options of the Navigator component.\n         */\n        NavigatorComponent.defaultOptions = merge(Component.defaultOptions, NavigatorComponentDefaults);\n        /**\n         * Predefined sync configuration for the Navigator component.\n         */\n        NavigatorComponent.predefinedSyncConfig = NavigatorSyncs;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/HighchartsPlugin.js', [_modules['Dashboards/Components/HighchartsComponent/HighchartsComponent.js'], _modules['Dashboards/Components/KPIComponent/KPIComponent.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorComponent.js']], function (HighchartsComponent, KPIComponent, NavigatorComponent) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects Highcharts core with the Dashboard plugin.\n         *\n         * @param {Highcharts} highcharts\n         * Highcharts core to connect.\n         */\n        function connectHighcharts(highcharts) {\n            HighchartsComponent.charter = highcharts;\n            KPIComponent.charter = highcharts;\n            NavigatorComponent.charter = highcharts;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('Highcharts', HighchartsComponent);\n            ComponentRegistry.registerComponent('KPI', KPIComponent);\n            ComponentRegistry.registerComponent('Navigator', NavigatorComponent);\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        function onUnregister(e) {\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const HighchartsCustom = {\n            connectHighcharts\n        };\n        const HighchartsPlugin = {\n            custom: HighchartsCustom,\n            name: 'Highcharts.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return HighchartsPlugin;\n    });\n    _registerModule(_modules, 'Dashboards/PluginHandler.js', [_modules['Dashboards/Board.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Components/ComponentRegistry.js']], function (Board, Sync, ComponentRegistry) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var PluginHandler;\n        (function (PluginHandler) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /** @internal */\n            PluginHandler.registry = {};\n            /**\n             * Revision of the Dashboard plugin API.\n             *\n             * @internal\n             */\n            PluginHandler.revision = 0;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a dashboard plugin.\n             *\n             * @param {Dashboards.Plugin} plugin\n             * Dashboard plugin to register.\n             *\n             * @param {string} [key]\n             * Plugin key for the registry. (Default: `plugin.name`)\n             */\n            function addPlugin(plugin, key = plugin.name) {\n                const { maxRevision, minRevision, onRegister } = plugin;\n                if (PluginHandler.registry[key]) {\n                    // Only throw error with custom key\n                    if (key !== plugin.name) {\n                        throw new Error(`Plugin '${key}' already registered.`);\n                    }\n                    return;\n                }\n                if ((typeof minRevision === 'number' && minRevision > PluginHandler.revision) ||\n                    (typeof maxRevision === 'number' && maxRevision < PluginHandler.revision)) {\n                    throw new Error(`Plugin '${key}' does not support revision ${PluginHandler.revision}.`);\n                }\n                onRegister({\n                    Board,\n                    ComponentRegistry,\n                    Sync,\n                    revision: PluginHandler.revision\n                });\n                PluginHandler.registry[key] = plugin;\n            }\n            PluginHandler.addPlugin = addPlugin;\n            /**\n             * Removes a dashboard plugin.\n             *\n             * @param {string} key\n             * Plugin key in the registry.\n             */\n            function removePlugin(key) {\n                if (PluginHandler.registry[key]) {\n                    PluginHandler.registry[key].onUnregister({\n                        ComponentRegistry: ComponentRegistry,\n                        Board,\n                        Sync,\n                        revision: PluginHandler.revision\n                    });\n                    delete PluginHandler.registry[key];\n                }\n            }\n            PluginHandler.removePlugin = removePlugin;\n        })(PluginHandler || (PluginHandler = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PluginHandler;\n    });\n    _registerModule(_modules, 'masters/dashboards.src.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Dashboards/Board.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Data/DataPool.js'], _modules['Data/DataCursor.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Plugins/DataGridPlugin.js'], _modules['Dashboards/Plugins/HighchartsPlugin.js'], _modules['Dashboards/PluginHandler.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Utilities.js']], function (AST, DataConnector, Board, Component, ComponentRegistry, DataPool, DataCursor, DataConverter, DataModifier, DataTable, Globals, DataGridPlugin, HighchartsPlugin, PluginHandler, Sync, Utilities) {\n\n        // Fill registries\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.board = Board.board;\n        G.addEvent = Utilities.addEvent;\n        G.error = Utilities.error;\n        G.merge = Utilities.merge;\n        G.removeEvent = Utilities.removeEvent;\n        G.uniqueKey = Utilities.uniqueKey;\n        G.AST = AST;\n        G.Board = Board;\n        G.Component = Component;\n        G.ComponentRegistry = ComponentRegistry;\n        G.DataConnector = DataConnector;\n        G.DataConverter = DataConverter;\n        G.DataCursor = DataCursor;\n        G.DataModifier = DataModifier;\n        G.DataPool = DataPool;\n        G.DataTable = DataTable;\n        G.DataGridPlugin = DataGridPlugin;\n        G.HighchartsPlugin = HighchartsPlugin;\n        G.PluginHandler = PluginHandler;\n        G.Sync = Sync;\n        /* *\n         *\n         *  Classic Export\n         *\n         * */\n        if (!G.win.Dashboards) {\n            G.win.Dashboards = G;\n        }\n        if (G.win.DataGrid) {\n            DataGridPlugin.custom.connectDataGrid(G.win.DataGrid);\n            G.PluginHandler.addPlugin(DataGridPlugin);\n        }\n        if (G.win.Highcharts) {\n            HighchartsPlugin.custom.connectHighcharts(G.win.Highcharts);\n            G.PluginHandler.addPlugin(HighchartsPlugin);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n    _modules['masters/dashboards.src.js']._modules = _modules;\n    return _modules['masters/dashboards.src.js'];\n}));"],"names":["root","factory","module","exports","document","define","amd","Dashboards","error","window","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","dispatchEvent","detail","Globals","SVG_NS","product","version","win","doc","svg","createElementNS","createSVGRect","userAgent","navigator","isChrome","chrome","isFirefox","indexOf","isMS","test","opera","isSafari","isTouchDevice","isWebKit","deg2rad","Math","PI","marginNames","noop","supportsPassiveEvents","supportsPassive","opts","Object","defineProperty","get","addEventListener","removeEventListener","charts","composed","dateFormats","seriesTypes","symbolSizes","chartCount","H","serialMode","code","stop","chart","params","severity","isCode","isNumber","message","toString","additionalMessages","objectEach","value","key","encodeURI","fireEvent","Error","console","messages","warn","push","pInt","s","mag","parseInt","isString","isArray","str","prototype","call","isObject","strict","isDOMElement","nodeType","isClass","c","constructor","name","n","isNaN","Infinity","defined","attr","elem","keyOrAttribs","ret","isGetter","attrSingle","setAttribute","getAttribute","removeAttribute","splat","extend","a","b","pick","arguments","length","i","arg","css","el","styles","style","getMagnitude","num","pow","floor","log","LN10","correctFloat","prec","parseFloat","toPrecision","easeInOutSine","pos","cos","find","Array","arr","callback","ctx","removeEvent","type","removeOneEvent","removeAllEvents","eventCollection","types","len","nodeName","_val","owner","events","hcEvents","typeEvents","filter","eventArguments","defaultFunction","createEvent","e","initEvent","target","preventDefault","defaultPrevented","object","multilevel","unshift","getPrototypeOf","sort","order","forEach","uniqueKey","hash","random","substring","id","jQuery","highcharts","slice","shift","addEvent","options","Point","series","runTrackerClick","passive","capture","eventObject","arrayMax","data","max","arrayMin","min","clamp","clearTimeout","createElement","tag","attribs","parent","nopad","padding","border","margin","appendChild","crisp","lineWidth","inverted","mod","inverter","round","destroyObjectProperties","except","destructablesOnly","val","destroy","diffObjects","newer","older","keepOlder","collectionsWithUpdate","diff","depth","keeper","newerVal","keys","discardElement","element","parentElement","removeChild","erase","item","splice","extendClass","members","getAlignFactor","align","center","right","middle","bottom","getClosestDistance","arrays","onError","closest","loopLength","distance","allowNegative","xData","getNestedProperty","pathElements","split","pathElement","thisProp","child","getStyle","prop","toInt","offsetWidth","scrollWidth","boundingClientRectWidth","getBoundingClientRect","width","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","insertItem","collection","indexOption","index","isInternal","_i","isFunction","merge","extendOrSource","sources","doCopy","copy","original","normalizeTickInterval","interval","multiples","magnitude","allowDecimals","hasTickAmount","retInterval","normalized","offset","docElem","documentElement","box","parentNode","top","left","height","pageYOffset","scrollTop","clientTop","pageXOffset","scrollLeft","clientLeft","pad","number","padder","String","replace","join","pushUnique","array","relativeLength","base","replaceNested","text","replacements","previous","replacement","stableSort","sortFunction","sortValue","safeI","syncTimeout","delay","context","setTimeout","timeUnits","millisecond","second","minute","hour","day","week","month","year","ucfirst","toUpperCase","useSerialIds","mode","wrap","method","func","proceed","outerArgs","scope","concat","U","trustedTypes","trustedTypesPolicy","createPolicy","createHTML","emptyHTML","AST","filterUserAttributes","attributes","valid","allowedAttributes","allowedReferences","some","ref","parseStyle","reduce","line","pair","map","trim","g","setElementHTML","html","innerHTML","ast","addToDOM","source","nodes","parseMarkup","recurse","subtree","subParent","node","tagName","textNode","textContent","createTextNode","bypassHTMLFiltering","allowedTags","NS","namespaceURI","children","markup","DOMParser","parseFromString","body","appendChildNodes","addTo","toLowerCase","astNode","parsedAttributes","attrib","childNodes","childNode","ComponentRegistry","registerComponent","ComponentClass","classNamePrefix","classNames","layout","cell","cellHover","cellActive","cellLoading","row","layoutsWrapper","boardContainer","guiElementType","boards","DG","PREFIX","resizeSnap","resizeSnapX","resizeSnapY","separator","contextMenuBtn","contextMenuBtnText","contextMenu","contextMenuItem","editModeEnabled","editToolbar","editToolbarCellOutline","editToolbarRowOutline","editToolbarItem","editToolbarRow","editToolbarCell","editSidebar","editSidebarShow","editSidebarHide","editSidebarHeader","editSidebarTitle","editSidebarMenuItem","rowContextHighlight","cellEditHighlight","dashboardCellEditHighlightActive","dragMock","dropPointer","contextDetectionPointer","resizePointer","currentEditedElement","maskElement","menuItem","menu","menuVerticalSeparator","menuHorizontalSeparator","menuDestroy","editSidebarWrapper","customSelect","customSelectButton","toggleContainer","toggleWrapper","toggleSlider","toggleWrapperColored","toggleLabels","button","sidebarNavButton","labelText","editSidebarTabBtn","editToolsBtn","editTools","editGridItems","confirmationPopup","popupButtonContainer","popupContentContainer","popupCancelBtn","popupConfirmBtn","popupCloseButton","editOverlay","editOverlayActive","resizerMenuBtnActive","sidebarCloseButton","editSidebarTabBtnWrapper","editSidebarRight","editSidebarRightShow","viewFullscreen","accordionMenu","accordionContainer","accordionHeader","accordionHeaderBtn","accordionHeaderWrapper","accordionHeaderIcon","accordionContent","accordionNestedWrapper","accordionMenuButtonsContainer","accordionMenuButton","accordionStandaloneWrapper","hiddenElement","collapsableContentHeader","standaloneElement","collapsedElement","dropdown","dropdownContent","dropdownButton","dropdownButtonContent","dropdownIcon","icon","lang","accessibility","editMode","addComponent","cancelButton","caption","chartClassName","chartConfig","chartID","chartOptions","chartType","connectorName","confirmButton","confirmDestroyCell","confirmDestroyRow","confirmDiscardChanges","dataLabels","errorMessage","exitFullscreen","htmlInput","off","on","pointFormat","settings","title","sidebar","HTML","Highcharts","DataGrid","KPI","getOffsets","guiElement","referenceElement","container","guiElementClientRect","referenceClientRect","getDimFromOffsets","offsets","getElementId","elementType","getPercentageWidth","result","fractionRegEx","match","getElementContainer","render","elementId","div","getElementById","HTMLElement","parentContainer","removeBindedEventFn","stopImmediatePropagation","getType","changeVisibility","setVisible","displayStyle","visibilityChanged","isVisible","display","hide","show","EditGlobals","GUIElement","mountedComponent","setHighlight","classList","toggle","board","setActiveState","add","CellHTML","Bindings","getGUIElement","idOrElement","querySelectorAll","querySelector","optionsStates","states","optionsEvents","renderTo","mountedComponents","getCell","componentContainer","className","component","promise","load","update","connector","setCell","active","enabled","isActive","click","hover","componentFromJSON","json","componentClass","$class","fromJSON","getRow","getLayout","Cell","containerId","copyId","parentContainerId","mountedComponentJSON","layoutJSON","cellElement","cellHeight","layoutOptions","rowOptions","cellClassName","guiEnabled","mountComponentFromJSON","setNestedLayout","layoutFromJSON","nestedLayout","Layout","optionsGui","gui","unmountCell","destroyRow","cells","toJSON","rowContainerId","getOptions","getVisibleCells","getParentCell","level","parentCell","getOverlappingLevels","levelMaxGap","levels","cellOffset","parentCellOffset","abs","setSize","flex","cellWidth","convertWidthToValue","hideContextPointer","cellToolbar","showToolbar","remove","cnt","isSet","contains","isHighlighted","setLoadingState","registry","addCallback","getCallback","tableEvents","initConnector","connectorId","dataPool","isNewConnector","getConnector","setConnector","eventCallback","pop","clearTableListeners","setupTableListeners","table","modified","emit","presentationModifier","presentationTable","modifyTable","clone","event","tableEventTimeout","targetConnector","updateOptions","newOptions","clearEvent","EditableOptions","bindings","defaultBindings","editableOptions","iEnd","option","selectOptions","getConnectorIds","keyMap","color","typeMap","skipRedraw","defaultTypeMap","SyncEmitter","register","emitter","emitterID","create","SyncHandler","handler","handlerID","Sync","predefinedSyncConfig","syncConfig","prepareSyncConfig","sync","registeredSyncHandlers","registeredSyncEmitters","isSyncing","listeners","predefinedConfig","componentSyncOptions","defaultSyncPairs","defaultPairs","defaultSyncOptions","defaultOptionsList","acc","syncName","defaultPair","defaultOptions","entry","preparedOptions","registerSyncEmitter","isRegisteredEmitter","Boolean","registerSyncHandler","isRegisteredHandler","start","syncOptions","emitterConfig","handlerConfig","defaultHandlers","ComponentUtilities","getStyles","elementStyles","sumPixels","accumulator","getMargins","includeBorders","borders","x","y","getPaddings","D","coreError","coreUniqueKey","deepClone","excludedKeys","v","includes","copyDepth","copyDepthError","CallbackRegistry","ConnectorHandler","CU","DU","Component","createTextElement","elementName","textOptions","connectorHandlers","callbackRegistry","cellListeners","resizeTimeouts","innerResizeTimeouts","connectorOptions","editableOptionsBindings","dimensions","Number","contentElement","setupEventListeners","attachCellListeners","onTableChanged","getOptionsOnDrop","getFirstConnector","resizeTo","getCellIndex","resize","initConnectors","connectorHandler","getContentHeight","titleHeight","titleElement","clientHeight","captionElement","removeProperty","resizeDynamicContent","margins","paddings","timeout","cancelAnimationFrame","timeoutID","requestAnimationFrame","shouldRerender","shouldForceRerender","connectorsHaveChanged","oldConnectorId","eventType","resizeObserverCallback","ResizeObserver","resizeObserver","observe","unbind","setTitle","titleOptions","newTitle","replaceWith","insertBefore","firstChild","setCaption","captionOptions","newCaption","getEditableOptions","getEditableOptionValue","propertyPath","end","elements","HTMLComponentDefaults","HTMLSyncs","HTMLComponent","JSON","parse","isError","getElementsFromString","constructTree","parser","htmlString","stringify","getStringFromElements","serializeNode","sender","autoId","columns","rowCount","versionTag","column","columnName","applyRowCount","getColumn","asReference","getColumns","columnNames","rowIndex","setColumn","eventDetail","setColumns","silent","setRow","insert","indexRowCount","cellValue","addColumns","DataTableCore","DataTable","isNull","NULL","skipColumns","tableOptions","tableClone","originalRowIndexes","localRowIndexes","deleteColumns","deletedColumns","modifiedColumns","modifier","deleteRowIndexReferences","modifyColumns","deleteRows","deletedRows","modifiedRows","deletedCells","j","jEnd","modifyRows","rows","getCellAsBoolean","getCellAsNumber","useNaN","getCellAsString","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","tableColumns","getLocalRowIndex","originalRowIndex","getModifier","getOriginalRowIndex","getRows","getRowCount","getRowIndexBy","rowIndexOffset","getRowObject","getRowObjects","i2","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","modifyCell","tableModifier","tableColumn","setModifier","modify","Promise","resolve","then","setOriginalRowIndexes","omitLocalRowIndexes","modifiedIndexes","originalIndex","setRows","DataConverter","regex","Date","UTC","NaN","alternative","d","getFullYear","mergedOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","converter","guessType","decimalRegex","getDate","deduceDateFormat","limit","save","stable","format","thing","guessedFormat","madeDeduction","dateFormat","export","headers","getTable","trimedValue","innerTrimedValue","floatValue","dateFormatProp","getTime","getTimezoneOffset","inside","alternativeFormat","startColumn","endColumn","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","getSortedColumns","usePresentationOrder","csvRows","columnsCount","rowArray","columnIndex","columnDataType","columnMeta","whatIs","dataType","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","token","actualColumn","read","pushType","isFinite","initialValue","points","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","DataModifier","benchmark","dataTable","results","execute","iterations","times","startTime","endTime","performance","now","reject","registerType","DataModifierClass","DataConnector","metadata","polling","describeColumn","describeColumns","getColumnOrder","usePresentationState","names","setColumnOrder","setModifierOptions","modifierOptions","ModifierClass","startPolling","refreshTime","_polling","stopPolling","DataConnectorClass","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","GoogleSheetsConverter","header","parseOptions","values","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","URL","canParse","status","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","range","onlyColumnNames","pathname","searchParams","set","href","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","tableCaption","classes","attrs","topheaders","subheaders","useRowspanHeaders","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","getElementsByTagName","rowsCount","items","itemsLength","columnsInRow","columnsInRowLength","relativeColumnIndex","HTMLTableConnector","tableID","JSONConverter","orientation","newRow","arrayWithPath","JSONConnector","dataUrl","ChainModifier","chain","optionsChain","clear","modifiers","reverse","InvertModifier","modifiedRowIndex","modifiedColumnNames","reset","j2","RangeModifier","indexes","additive","ranges","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","rowReference","originalIndexes","addTabIndexToCells","components","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","needle","columnNeedle","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","Serializable","classRegistry","helperRegistry","classs","helper","registerClassPrototype","classPrototype","registerHelper","helperFunctions","serializer","numberOfHelpers","jsonSupportFor","DataCursorHelper","cursorsJSON","stateMapJSON","tableIds","k","kEnd","connectors","DataPoolDefaults","DataPool","waiting","waitingList","getConnectorOptions","loadConnector","connectorIds","getConnectorTable","ConnectorClass","setConnectorOptions","instances","Row","cellsJSON","setContainerHeight","rowContainer","rowElement","rowClassName","setCells","setCellsFromJSON","cellsElements","getElementsByClassName","addCell","cellJSON","componentsToMount","mountCell","setCellEvents","rowCells","unmountRow","layoutContainerId","nextCell","prevCell","nextSibling","cellIndex","getVisibleRows","getRowLevels","cellOffsets","rowLevels","rowLevelsArray","getRowLevelInfo","posY","rowLevelInfo","rowLevel","rowsJSON","layouts","importLocal","localStorage","getItem","layoutClassName","setRowsFromJSON","rowsElements","addRow","mountRow","setRowEvents","exportLocal","setItem","getRowIndex","nextRow","prevRow","dashboardContainerId","DashboardsAccessibility","Board","async","init","componentTypes","initContainer","initEditMode","dataCursor","a11y","componentPromises","setComponents","initEvents","all","runReflow","reflow","EditMode","promises","unobserve","importLayoutLocal","editModeTools","tools","hideToolbars","updatePosition","contextButtonElement","componentOptions","layoutsJSON","getComponentById","getComponentByCellId","dashboardJSON","syncPair","extremes","groupKey","group","handleChangeExtremes","dataGrid","viewport","scrollToRow","registerCursorListeners","autoScroll","highlightOptions","highlight","onCellHover","onCellMouseOut","handleCursor","hoverRow","hoverColumn","handleCursorOut","visibility","handleVisibilityChange","updateColumn","DataGridExtremesSync","DataGridHighlightSync","DataGridVisibilitySync","dataGridClassName","dataGridID","dataGridOptions","nestedOptions","onUpdate","inputElement","parentRow","dataTableRowIndex","dataset","valueToSet","DataGridSyncs","DataGridComponentDefaults","DataGridComponent","setOptions","renderViewport","constructDataGrid","minHeight","connectorsIds","optionsCopy","DGN","DataGridNamespace","dataGridInstance","custom","connectDataGrid","DataGridNS","onRegister","onUnregister","cleanupCallbacks","extremesEventHandler","resetSelection","trigger","axis","seriesFromConnectorArray","seriesFromConnector","visiblePoints","point","isInside","minCursorData","coll","maxCursorData","columnAssignment","assignment","seriesId","dateTime","addExtremesEvent","axes","addExtremesEventCallbacks","resetExtremesEvent","zooming","unregisterCallbacks","dimension","handleUpdateExtremes","eventTarget","didZoom","setExtremes","resetZoomButton","showResetZoom","redraw","addCursorListeners","handleChartZoomOut","zoomOut","resetZoomButtons","affectedSeriesId","highlightPoint","showTooltip","showCrosshair","presTable","colAssignment","mouseOver","mouseOut","getHoveredPoint","foundSeries","seriesIds","visible","isCartesian","hoverPoint","tooltip","useSharedTooltip","shared","hoverSeries","pointer","getHoverData","hoverPoints","refresh","setState","xAxis","drawCrosshair","yAxis","unhovered","unhoverAllPoints","seriesLength","pointsLength","xAxes","yAxes","l","findSeries","seriesArray","handleShow","handleHide","HighchartsExtremesSync","HighchartsHighlightSync","HighchartsVisibilitySync","allowConnectorUpdate","chartConstructor","iconURL","showToggle","HighchartsSyncs","HighchartsComponentDefaults","HighchartsComponent","chartContainer","updateSeries","hcComponent","getChart","setupConnectorUpdate","heightOffset","onChartUpdate","newSeriesIds","getDefaultColumnAssignment","oldSeriesId","newSeriesId","updateSeriesFromConnector","dataStructure","seriesOptions","adjustDraggableOptions","columnFormulas","formula","dragDrop","draggableY","seriesTable","addSeries","createChart","firstColumn","charter","Factory","Chart","registerChartEvents","allEvents","optionKey","seriesOrAxisOptions","seriesOrAxis","callbackKey","animation","plotOptions","setValue","KPIExtremesSync","minFontSize","thresholdColors","linkedValueTo","seriesIndex","pointIndex","alignThresholds","panning","styledMode","borderRadius","colorCount","allowMutatingData","ignoreHiddenSeries","spacing","theme","position","singleTouch","resetButton","zIndex","borderColor","backgroundColor","plotBorderColor","colors","hasOldSafariBug","Intl","DateTimeFormat","formatRange","isDateTimeFormatOptions","main","spanishWeekdayIndex","weekday","variableTimezone","timezone","dTLCache","timezoneOffset","useUTC","isMonth","isShort","timeZone","toParts","dayOfMonth","hours","minutes","seconds","dateTimeFormat","locale","cacheKey","str2dtf","dTL","dtf","mapping","L","fractionalSecondDigits","S","M","E","A","B","m","o","Y","makeTime","date","milliseconds","newOffset","hasTimezone","isYYYYMMDD","ts","gmt","colon","timeZoneName","upperCaseFirst","invalidDate","localeAwareRegex","exec","time","fullYear","langWeekdays","weekdays","shortWeekdays","months","shortMonths","substr","w","I","p","P","tzHours","prefix","suffix","resolveDTLFormat","f","from","to","getTimeTicks","normalizedInterval","startOfWeek","tickPositions","higherRanks","count","unitRange","variableDayLength","weekdayNo","t","info","totalRange","getDateFormat","dateTimeLabelFormats","dateStr","blank","strpos","lastN","ChartDefaults","Palettes","Time","symbols","loading","numericSymbols","resetZoom","resetZoomTitle","global","buttonTheme","fill","r","stroke","fontSize","fontWeight","select","disabled","minScale","subtitle","verticalAlign","legend","alignColumns","itemMarginBottom","itemMarginTop","labelFormatter","navigation","activeColor","inactiveColor","itemStyle","textDecoration","textOverflow","itemHoverStyle","itemHiddenStyle","shadow","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","opacity","textAlign","duration","easing","sqrt","footerFormat","headerShape","hideDelay","shape","snap","headerFormat","borderWidth","stickOnContact","useHTML","credits","defaultTime","G","helpers","divide","eq","each","ge","gt","condition","le","lt","multiply","ne","subtract","unless","numberFormatCache","subRegex","matches","floatRegex","decRegex","numberFormatter","numberFormat","resolveProperty","currentMatch","hasSub","mainMatch","subMatch","isBlock","expression","charAt","startInner","startingElseSection","elseBody","parts","startChar","char","valueAndFormat","segment","decimals","thousandsSep","fractionDigits","mantissa","exp","origDec","firstDecimals","toExponential","toFixed","minimumFractionDigits","maximumFractionDigits","useGrouping","hasSeparators","nf","NumberFormat","KPISyncs","KPIComponentDefaults","Templating","KPIComponent","getSubtitleClassName","linkValueToChart","updateElements","defaultChartOptions","getValue","valueFormat","valueFormatter","prevValue","targetSeries","targetPoint","addPoint","getSubtitle","getValueColor","threshold","mouseWheel","outside","marker","outlineWidth","colorIndex","endOnTick","gridZIndex","labels","opposite","showFirstLabel","showLastLabel","startOnTick","tickPosition","maxPadding","scrollbar","minRange","MIN_VALUE","NavigatorSyncUtils","setRangeOptions","changed","unsetRangeOptions","Range","affectNavigator","crossfilter","afterSetExtremes","filterColumn","getColumnAssignment","getAxisExtremes","extremesListener","extremesColumn","maxIndex","minIndex","NavigatorCrossfilterSync","NavigatorExtremesSync","NavigatorComponentDefaults","NavigatorSyncs","NavigatorComponent","adjustNavigator","chartHeight","clientWidth","chartUpdates","chartWidth","navigatorHeight","plotTop","handles","columnsAssignment","columnAssignments","getExtremes","dataMin","dataMax","categories","ceil","hasNames","renderNavigator","redrawNavigator","timeouts","columnValues","generateCrossfilterData","setData","filteredValues","crossfilterOptions","uniqueXValues","stringData","appliedRanges","rangedColumns","appliedRagesLength","allConditionsMet","seriesData","connectHighcharts","PluginHandler","revision","addPlugin","plugin","maxRevision","minRevision","removePlugin","DataGridPlugin","HighchartsPlugin","Utilities"],"mappings":"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f,EAEA,MADA,EAAE,CAAC/N,OAAO,CAACjF,IAAI,CAACjE,EAAI6W,IAAI,CAACO,UAAU,CAAE,AAACC,GAAcP,EAAiBO,EAAW1B,IACzEA,CACX,CACJ,CA2QA,OAtPArB,EAAII,iBAAiB,CAAG,CACpB,MACA,gBACA,mBACA,gBACA,gBACA,cACA,aACA,kBACA,YACA,eACA,gBACA,uBACA,gBACA,QACA,YACA,QACA,UACA,KACA,KACA,IACA,KACA,KACA,WACA,OACA,cACA,cACA,gBACA,SACA,OACA,KACA,KACA,MACA,eACA,cACA,SACA,UACA,WACA,SACA,UACA,cACA,eACA,eACA,IACA,SACA,OACA,OACA,OACA,QACA,QACA,MACA,cACA,eACA,SACA,iBACA,eACA,QACA,cACA,SACA,UACA,UACA,SACA,WACA,aACA,cACA,aACA,aACA,QACA,OACA,SACA,QACA,IACA,KACA,KACA,aACA,IACA,KACA,KACA,SACH,CAgBDJ,EAAIK,iBAAiB,CAAG,CACpB,WACA,UACA,UACA,IACA,MACA,KACA,IACH,CAeDL,EAAIgC,WAAW,CAAG,CACd,IACA,OACA,IACA,KACA,SACA,UACA,SACA,WACA,OACA,KACA,OACA,MACA,KACA,KACA,KACA,sBACA,cACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,eACA,WACA,UACA,cACA,SACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,KACA,iBACA,SACA,KACA,IACA,OACA,UACA,MACA,OACA,QACA,OACA,OACA,SACA,QACA,MACA,MACA,MACA,QACA,OACA,WACA,QACA,QACA,QACA,QACA,KACA,KACA,KACA,IACA,KACA,QACH,CACDhC,EAAID,SAAS,CAAGA,EA4BhBC,EAAI+B,mBAAmB,CAAG,CAAA,EA8BnB/B,CACX,GACArV,EAAgBD,EAAU,6CAA8C,EAAE,CAAE,eAepEsY,EACOA,EAwCX,MA5BIA,CAZOA,EAiCRA,GAAsBA,CAAAA,EAAoB,CAAC,CAAA,GArBxB3P,KAAK,CAAG,CAAC,EAoB3B2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"}