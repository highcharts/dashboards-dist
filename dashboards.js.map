{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards v1.1.3 (2023-11-29)\n *\n * (c) 2009-2023 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = root.document ?\n            factory(root) :\n            factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/dashboards', function () {\n            return factory(root);\n        });\n    } else {\n        if (root.Dashboards) {\n            root.Dashboards.error(16, true);\n        }\n        root.Dashboards = factory(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function (window) {\n    'use strict';\n    var _modules = {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Shared Highcharts properties.\n         * @private\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.SVG_NS = 'http://www.w3.org/2000/svg', Globals.product = 'Highcharts', Globals.version = '1.1.3', Globals.win = (typeof window !== 'undefined' ?\n                window :\n                {}), // eslint-disable-line node/no-unsupported-features/es-builtins\n            Globals.doc = Globals.win.document, Globals.svg = (Globals.doc &&\n                Globals.doc.createElementNS &&\n                !!Globals.doc.createElementNS(Globals.SVG_NS, 'svg').createSVGRect), Globals.userAgent = (Globals.win.navigator && Globals.win.navigator.userAgent) || '', Globals.isChrome = Globals.userAgent.indexOf('Chrome') !== -1, Globals.isFirefox = Globals.userAgent.indexOf('Firefox') !== -1, Globals.isMS = /(edge|msie|trident)/i.test(Globals.userAgent) && !Globals.win.opera, Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1, Globals.isTouchDevice = /(Mobile|Android|Windows Phone)/.test(Globals.userAgent), Globals.isWebKit = Globals.userAgent.indexOf('AppleWebKit') !== -1, Globals.deg2rad = Math.PI * 2 / 360, Globals.hasBidiBug = (Globals.isFirefox &&\n                parseInt(Globals.userAgent.split('Firefox/')[1], 10) < 4 // issue #38\n            ), Globals.hasTouch = !!Globals.win.TouchEvent, Globals.marginNames = [\n                'plotTop',\n                'marginRight',\n                'marginBottom',\n                'plotLeft'\n            ], Globals.noop = function () { }, Globals.supportsPassiveEvents = (function () {\n                // Checks whether the browser supports passive events, (#11353).\n                let supportsPassive = false;\n                // Object.defineProperty doesn't work on IE as well as passive\n                // events - instead of using polyfill, we can exclude IE totally.\n                if (!Globals.isMS) {\n                    const opts = Object.defineProperty({}, 'passive', {\n                        get: function () {\n                            supportsPassive = true;\n                        }\n                    });\n                    if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                        Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                        Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n                    }\n                }\n                return supportsPassive;\n            }());\n            /**\n             * An array containing the current chart objects in the page. A chart's\n             * position in the array is preserved throughout the page's lifetime. When\n             * a chart is destroyed, the array item becomes `undefined`.\n             *\n             * @name Highcharts.charts\n             * @type {Array<Highcharts.Chart|undefined>}\n             */\n            Globals.charts = [];\n            /**\n             * A hook for defining additional date format specifiers. New\n             * specifiers are defined as key-value pairs by using the\n             * specifier as key, and a function which takes the timestamp as\n             * value. This function returns the formatted portion of the\n             * date.\n             *\n             * @sample highcharts/global/dateformats/\n             *         Adding support for week number\n             *\n             * @name Highcharts.dateFormats\n             * @type {Record<string, Highcharts.TimeFormatCallbackFunction>}\n             */\n            Globals.dateFormats = {};\n            /**\n             * @private\n             * @deprecated\n             * @todo Use only `Core/Series/SeriesRegistry.seriesTypes`\n             */\n            Globals.seriesTypes = {};\n            /**\n             * @private\n             */\n            Globals.symbolSizes = {};\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            // eslint-disable-next-line prefer-const\n            Globals.chartCount = 0;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Theme options that should get applied to the chart. In module mode it\n         * might not be possible to change this property because of read-only\n         * restrictions, instead use {@link Highcharts.setOptions}.\n         *\n         * @deprecated\n         * @name Highcharts.theme\n         * @type {Highcharts.Options}\n         */\n        (''); // keeps doclets above in JS file\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Core/Utilities.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { charts, doc, win } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Highcharts.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        Reference to the chart that causes the error. Used in 'debugger'\n         *        module to display errors directly on the chart.\n         *        Important note: This argument is undefined for errors that lack\n         *        access to the Chart instance. In such case, the error will be\n         *        displayed on the last created chart.\n         *\n         * @param {Highcharts.Dictionary<string>} [params]\n         *        Additional parameters for the generated message.\n         *\n         * @return {void}\n         */\n        function error(code, stop, chart, params) {\n            const severity = stop ? 'Highcharts error' : 'Highcharts warning';\n            if (code === 32) {\n                code = `${severity}: Deprecated member`;\n            }\n            const isCode = isNumber(code);\n            let message = isCode ?\n                `${severity} #${code}: www.highcharts.com/errors/${code}/` :\n                code.toString();\n            const defaultHandler = function () {\n                if (stop) {\n                    throw new Error(message);\n                }\n                // else ...\n                if (win.console &&\n                    error.messages.indexOf(message) === -1 // prevent console flooting\n                ) {\n                    console.warn(message); // eslint-disable-line no-console\n                }\n            };\n            if (typeof params !== 'undefined') {\n                let additionalMessages = '';\n                if (isCode) {\n                    message += '?';\n                }\n                objectEach(params, function (value, key) {\n                    additionalMessages += `\\n - ${key}: ${value}`;\n                    if (isCode) {\n                        message += encodeURI(key) + '=' + encodeURI(value);\n                    }\n                });\n                message += additionalMessages;\n            }\n            fireEvent(H, 'displayError', { chart, code, message, params }, defaultHandler);\n            error.messages.push(message);\n        }\n        (function (error) {\n            error.messages = [];\n        })(error || (error = {}));\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {boolean} extend\n         *        Whether to extend the left-side object (a) or return a whole new\n         *        object.\n         *\n         * @param {T|undefined} a\n         *        The first object to extend. When only this is given, the function\n         *        returns a deep copy.\n         *\n         * @param {...Array<object|undefined>} [n]\n         *        An object to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */ /**\n        * Utility function to deep merge two or more objects and return a third object.\n        * The merge function can also be used with a single object argument to create a\n        * deep copy of an object.\n        *\n        * @function Highcharts.merge<T>\n        *\n        * @param {T|undefined} a\n        *        The first object to extend. When only this is given, the function\n        *        returns a deep copy.\n        *\n        * @param {...Array<object|undefined>} [n]\n        *        An object to merge into the previous one.\n        *\n        * @return {T}\n        *         The merged object. If the first argument is true, the return is the\n        *         same as the second argument.\n        */\n        function merge() {\n            /* eslint-enable valid-jsdoc */\n            let i, args = arguments, ret = {};\n            const doCopy = function (copy, original) {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                objectEach(original, function (value, key) {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (args[0] === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Constrain a value to within a lower and upper threshold.\n         *\n         * @private\n         * @param {number} value The initial value\n         * @param {number} min The lower threshold\n         * @param {number} max The upper threshold\n         * @return {number} Returns a number value within min and max.\n         */\n        function clamp(value, min, max) {\n            return value > min ? value < max ? value : max : min;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Return the deep difference between two objects. It can either return the new\n         * properties, or optionally return the old values of new properties.\n         * @private\n         */\n        function diffObjects(newer, older, keepOlder, collectionsWithUpdate) {\n            const ret = {};\n            /**\n             * Recurse over a set of options and its current values, and store the\n             * current values in the ret object.\n             */\n            function diff(newer, older, ret, depth) {\n                const keeper = keepOlder ? older : newer;\n                objectEach(newer, function (newerVal, key) {\n                    if (!depth &&\n                        collectionsWithUpdate &&\n                        collectionsWithUpdate.indexOf(key) > -1 &&\n                        older[key]) {\n                        newerVal = splat(newerVal);\n                        ret[key] = [];\n                        // Iterate over collections like series, xAxis or yAxis and map\n                        // the items by index.\n                        for (let i = 0; i < Math.max(newerVal.length, older[key].length); i++) {\n                            // Item exists in current data (#6347)\n                            if (older[key][i]) {\n                                // If the item is missing from the new data, we need to\n                                // save the whole config structure. Like when\n                                // responsively updating from a dual axis layout to a\n                                // single axis and back (#13544).\n                                if (newerVal[i] === void 0) {\n                                    ret[key][i] = older[key][i];\n                                    // Otherwise, proceed\n                                }\n                                else {\n                                    ret[key][i] = {};\n                                    diff(newerVal[i], older[key][i], ret[key][i], depth + 1);\n                                }\n                            }\n                        }\n                    }\n                    else if (isObject(newerVal, true) &&\n                        !newerVal.nodeType // #10044\n                    ) {\n                        ret[key] = isArray(newerVal) ? [] : {};\n                        diff(newerVal, older[key] || {}, ret[key], depth + 1);\n                        // Delete empty nested objects\n                        if (Object.keys(ret[key]).length === 0 &&\n                            // Except colorAxis which is a special case where the empty\n                            // object means it is enabled. Which is unfortunate and we\n                            // should try to find a better way.\n                            !(key === 'colorAxis' && depth === 0)) {\n                            delete ret[key];\n                        }\n                    }\n                    else if (newer[key] !== older[key] ||\n                        // If the newer key is explicitly undefined, keep it (#10525)\n                        (key in newer && !(key in older))) {\n                        ret[key] = keeper[key];\n                    }\n                });\n            }\n            diff(newer, older, ret, 0);\n            return ret;\n        }\n        /**\n         * Shortcut for parseInt\n         *\n         * @private\n         * @function Highcharts.pInt\n         *\n         * @param {*} s\n         *        any\n         *\n         * @param {number} [mag]\n         *        Magnitude\n         *\n         * @return {number}\n         *         number\n         */\n        function pInt(s, mag) {\n            return parseInt(s, mag || 10);\n        }\n        /**\n         * Utility function to check for string type.\n         *\n         * @function Highcharts.isString\n         *\n         * @param {*} s\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a string.\n         */\n        function isString(s) {\n            return typeof s === 'string';\n        }\n        /**\n         * Utility function to check if an item is an array.\n         *\n         * @function Highcharts.isArray\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is an array.\n         */\n        function isArray(obj) {\n            const str = Object.prototype.toString.call(obj);\n            return str === '[object Array]' || str === '[object Array Iterator]';\n        }\n        /**\n         * Utility function to check if an item is of type object.\n         *\n         * @function Highcharts.isObject\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @param {boolean} [strict=false]\n         *        Also checks that the object is not an array.\n         *\n         * @return {boolean}\n         *         True if the argument is an object.\n         */\n        function isObject(obj, strict) {\n            return (!!obj &&\n                typeof obj === 'object' &&\n                (!strict || !isArray(obj))); // eslint-disable-line @typescript-eslint/no-explicit-any\n        }\n        /**\n         * Utility function to check if an Object is a HTML Element.\n         *\n         * @function Highcharts.isDOMElement\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a HTML Element.\n         */\n        function isDOMElement(obj) {\n            return isObject(obj) && typeof obj.nodeType === 'number';\n        }\n        /**\n         * Utility function to check if an Object is a class.\n         *\n         * @function Highcharts.isClass\n         *\n         * @param {object|undefined} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a class.\n         */\n        function isClass(obj) {\n            const c = obj && obj.constructor;\n            return !!(isObject(obj, true) &&\n                !isDOMElement(obj) &&\n                (c && c.name && c.name !== 'Object'));\n        }\n        /**\n         * Utility function to check if an item is a number and it is finite (not NaN,\n         * Infinity or -Infinity).\n         *\n         * @function Highcharts.isNumber\n         *\n         * @param {*} n\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the item is a finite number\n         */\n        function isNumber(n) {\n            return typeof n === 'number' && !isNaN(n) && n < Infinity && n > -Infinity;\n        }\n        /**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function Highcharts.erase\n         *\n         * @param {Array<*>} arr\n         *        The array.\n         *\n         * @param {*} item\n         *        The item to remove.\n         *\n         * @return {void}\n         */\n        function erase(arr, item) {\n            let i = arr.length;\n            while (i--) {\n                if (arr[i] === item) {\n                    arr.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        /**\n         * Insert a series or an axis in a collection with other items, either the\n         * chart series or yAxis series or axis collections, in the correct order\n         * according to the index option and whether it is internal. Used internally\n         * when adding series and axes.\n         *\n         * @private\n         * @function Highcharts.Chart#insertItem\n         * @param  {Highcharts.Series|Highcharts.Axis} item\n         *         The item to insert\n         * @param  {Array<Highcharts.Series>|Array<Highcharts.Axis>} collection\n         *         A collection of items, like `chart.series` or `xAxis.series`.\n         * @return {number} The index of the series in the collection.\n         */\n        function insertItem(item, collection) {\n            const indexOption = item.options.index, length = collection.length;\n            let i;\n            for (\n            // Internal item (navigator) should always be pushed to the end\n            i = item.options.isInternal ? length : 0; i < length + 1; i++) {\n                if (\n                // No index option, reached the end of the collection,\n                // equivalent to pushing\n                !collection[i] ||\n                    // Handle index option, the element to insert has lower index\n                    (isNumber(indexOption) &&\n                        indexOption < pick(collection[i].options.index, collection[i]._i)) ||\n                    // Insert the new item before other internal items\n                    // (navigator)\n                    collection[i].options.isInternal) {\n                    collection.splice(i, 0, item);\n                    break;\n                }\n            }\n            return i;\n        }\n        /**\n         * Adds an item to an array, if it is not present in the array.\n         *\n         * @function Highcharts.pushUnique\n         *\n         * @param {Array<unknown>} array\n         * The array to add the item to.\n         *\n         * @param {unknown} item\n         * The item to add.\n         *\n         * @return {boolean}\n         * Returns true, if the item was not present and has been added.\n         */\n        function pushUnique(array, item) {\n            return array.indexOf(item) < 0 && !!array.push(item);\n        }\n        /**\n         * Check if an object is null or undefined.\n         *\n         * @function Highcharts.defined\n         *\n         * @param {*} obj\n         *        The object to check.\n         *\n         * @return {boolean}\n         *         False if the object is null or undefined, otherwise true.\n         */\n        function defined(obj) {\n            return typeof obj !== 'undefined' && obj !== null;\n        }\n        /**\n         * Set or get an attribute or an object of attributes.\n         *\n         * To use as a setter, pass a key and a value, or let the second argument be a\n         * collection of keys and values. When using a collection, passing a value of\n         * `null` or `undefined` will remove the attribute.\n         *\n         * To use as a getter, pass only a string as the second argument.\n         *\n         * @function Highcharts.attr\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} elem\n         *        The DOM element to receive the attribute(s).\n         *\n         * @param {string|Highcharts.HTMLAttributes|Highcharts.SVGAttributes} [keyOrAttribs]\n         *        The property or an object of key-value pairs.\n         *\n         * @param {number|string} [value]\n         *        The value if a single property is set.\n         *\n         * @return {string|null|undefined}\n         *         When used as a getter, return the value.\n         */\n        function attr(elem, keyOrAttribs, value) {\n            const isGetter = isString(keyOrAttribs) && !defined(value);\n            let ret;\n            const attrSingle = (value, key) => {\n                // Set the value\n                if (defined(value)) {\n                    elem.setAttribute(key, value);\n                    // Get the value\n                }\n                else if (isGetter) {\n                    ret = elem.getAttribute(key);\n                    // IE7 and below cannot get class through getAttribute (#7850)\n                    if (!ret && key === 'class') {\n                        ret = elem.getAttribute(key + 'Name');\n                    }\n                    // Remove the value\n                }\n                else {\n                    elem.removeAttribute(key);\n                }\n            };\n            // If keyOrAttribs is a string\n            if (isString(keyOrAttribs)) {\n                attrSingle(value, keyOrAttribs);\n                // Else if keyOrAttribs is defined, it is a hash of key/value pairs\n            }\n            else {\n                objectEach(keyOrAttribs, attrSingle);\n            }\n            return ret;\n        }\n        /**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function Highcharts.splat\n         *\n         * @param {*} obj\n         *        The object to splat.\n         *\n         * @return {Array}\n         *         The produced or original array.\n         */\n        function splat(obj) {\n            return isArray(obj) ? obj : [obj];\n        }\n        /**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function Highcharts.syncTimeout\n         *\n         * @param {Function} fn\n         *        The function callback.\n         *\n         * @param {number} delay\n         *        Delay in milliseconds.\n         *\n         * @param {*} [context]\n         *        An optional context to send to the function callback.\n         *\n         * @return {number}\n         *         An identifier for the timeout that can later be cleared with\n         *         Highcharts.clearTimeout. Returns -1 if there is no timeout.\n         */\n        function syncTimeout(fn, delay, context) {\n            if (delay > 0) {\n                return setTimeout(fn, delay, context);\n            }\n            fn.call(0, context);\n            return -1;\n        }\n        /**\n         * Internal clear timeout. The function checks that the `id` was not removed\n         * (e.g. by `chart.destroy()`). For the details see\n         * [issue #7901](https://github.com/highcharts/highcharts/issues/7901).\n         *\n         * @function Highcharts.clearTimeout\n         *\n         * @param {number|undefined} id\n         * Id of a timeout.\n         */\n        function internalClearTimeout(id) {\n            if (defined(id)) {\n                clearTimeout(id);\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function Highcharts.extend<T>\n         *\n         * @param {T|undefined} a\n         *        The object to be extended.\n         *\n         * @param {Partial<T>} b\n         *        The object to add to the first one.\n         *\n         * @return {T}\n         *         Object a, the original object.\n         */\n        function extend(a, b) {\n            /* eslint-enable valid-jsdoc */\n            let n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) { // eslint-disable-line guard-for-in\n                a[n] = b[n];\n            }\n            return a;\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Return the first value that is not null or undefined.\n         *\n         * @function Highcharts.pick<T>\n         *\n         * @param {...Array<T|null|undefined>} items\n         *        Variable number of arguments to inspect.\n         *\n         * @return {T}\n         *         The value of the first argument that is not null or undefined.\n         */\n        function pick() {\n            const args = arguments;\n            const length = args.length;\n            for (let i = 0; i < length; i++) {\n                const arg = args[i];\n                if (typeof arg !== 'undefined' && arg !== null) {\n                    return arg;\n                }\n            }\n        }\n        /**\n         * Set CSS on a given element.\n         *\n         * @function Highcharts.css\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} el\n         *        An HTML DOM element.\n         *\n         * @param {Highcharts.CSSObject} styles\n         *        Style object with camel case property names.\n         *\n         * @return {void}\n         */\n        function css(el, styles) {\n            if (H.isMS && !H.svg) { // #2686\n                if (styles && defined(styles.opacity)) {\n                    styles.filter = `alpha(opacity=${styles.opacity * 100})`;\n                }\n            }\n            extend(el.style, styles);\n        }\n        /**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function Highcharts.createElement\n         *\n         * @param {string} tag\n         *        The HTML tag.\n         *\n         * @param {Highcharts.HTMLAttributes} [attribs]\n         *        Attributes as an object of key-value pairs.\n         *\n         * @param {Highcharts.CSSObject} [styles]\n         *        Styles as an object of key-value pairs.\n         *\n         * @param {Highcharts.HTMLDOMElement} [parent]\n         *        The parent HTML object.\n         *\n         * @param {boolean} [nopad=false]\n         *        If true, remove all padding, border and margin.\n         *\n         * @return {Highcharts.HTMLDOMElement}\n         *         The created DOM element.\n         */\n        function createElement(tag, attribs, styles, parent, nopad) {\n            const el = doc.createElement(tag);\n            if (attribs) {\n                extend(el, attribs);\n            }\n            if (nopad) {\n                css(el, { padding: '0', border: 'none', margin: '0' });\n            }\n            if (styles) {\n                css(el, styles);\n            }\n            if (parent) {\n                parent.appendChild(el);\n            }\n            return el;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Extend a prototyped class by new members.\n         *\n         * @deprecated\n         * @function Highcharts.extendClass<T>\n         *\n         * @param {Highcharts.Class<T>} parent\n         *        The parent prototype to inherit.\n         *\n         * @param {Highcharts.Dictionary<*>} members\n         *        A collection of prototype members to add or override compared to the\n         *        parent prototype.\n         *\n         * @return {Highcharts.Class<T>}\n         *         A new prototype.\n         */\n        function extendClass(parent, members) {\n            const obj = (function () { });\n            obj.prototype = new parent(); // eslint-disable-line new-cap\n            extend(obj.prototype, members);\n            return obj;\n        }\n        /**\n         * Left-pad a string to a given length by adding a character repetitively.\n         *\n         * @function Highcharts.pad\n         *\n         * @param {number} number\n         *        The input string or number.\n         *\n         * @param {number} [length]\n         *        The desired string length.\n         *\n         * @param {string} [padder=0]\n         *        The character to pad with.\n         *\n         * @return {string}\n         *         The padded string.\n         */\n        function pad(number, length, padder) {\n            return new Array((length || 2) +\n                1 -\n                String(number)\n                    .replace('-', '')\n                    .length).join(padder || '0') + number;\n        }\n        /**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function Highcharts.relativeLength\n         *\n         * @param {Highcharts.RelativeSize} value\n         *        A percentage string or a number.\n         *\n         * @param {number} base\n         *        The full length that represents 100%.\n         *\n         * @param {number} [offset=0]\n         *        A pixel offset to apply for percentage values. Used internally in\n         *        axis positioning.\n         *\n         * @return {number}\n         *         The computed length.\n         */\n        function relativeLength(value, base, offset) {\n            return (/%$/).test(value) ?\n                (base * parseFloat(value) / 100) + (offset || 0) :\n                parseFloat(value);\n        }\n        /**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function Highcharts.wrap\n         *\n         * @param {*} obj\n         *        The context object that the method belongs to. In real cases, this is\n         *        often a prototype.\n         *\n         * @param {string} method\n         *        The name of the method to extend.\n         *\n         * @param {Highcharts.WrapProceedFunction} func\n         *        A wrapper function callback. This function is called with the same\n         *        arguments as the original function, except that the original function\n         *        is unshifted and passed as the first argument.\n         */\n        function wrap(obj, method, func) {\n            const proceed = obj[method];\n            obj[method] = function () {\n                const outerArgs = arguments, scope = this;\n                return func.apply(this, [\n                    function () {\n                        return proceed.apply(scope, arguments.length ? arguments : outerArgs);\n                    }\n                ].concat([].slice.call(arguments)));\n            };\n        }\n        /**\n         * Get the magnitude of a number.\n         *\n         * @function Highcharts.getMagnitude\n         *\n         * @param {number} num\n         *        The number.\n         *\n         * @return {number}\n         *         The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc.\n         */\n        function getMagnitude(num) {\n            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n        }\n        /**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @deprecated\n         * @function Highcharts.normalizeTickInterval\n         *\n         * @param {number} interval\n         *        The raw, un-rounded interval.\n         *\n         * @param {Array<*>} [multiples]\n         *        Allowed multiples.\n         *\n         * @param {number} [magnitude]\n         *        The magnitude of the number.\n         *\n         * @param {boolean} [allowDecimals]\n         *        Whether to allow decimals.\n         *\n         * @param {boolean} [hasTickAmount]\n         *        If it has tickAmount, avoid landing on tick intervals lower than\n         *        original.\n         *\n         * @return {number}\n         *         The normalized interval.\n         *\n         * @todo\n         * Move this function to the Axis prototype. It is here only for historical\n         * reasons.\n         */\n        function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, hasTickAmount) {\n            let i, retInterval = interval;\n            // round to a tenfold of 1, 2, 2.5 or 5\n            magnitude = pick(magnitude, getMagnitude(interval));\n            const normalized = interval / magnitude;\n            // multiples for a linear scale\n            if (!multiples) {\n                multiples = hasTickAmount ?\n                    // Finer grained ticks when the tick amount is hard set, including\n                    // when alignTicks is true on multiple axes (#4580).\n                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n                    // Else, let ticks fall on rounder numbers\n                    [1, 2, 2.5, 5, 10];\n                // the allowDecimals option\n                if (allowDecimals === false) {\n                    if (magnitude === 1) {\n                        multiples = multiples.filter(function (num) {\n                            return num % 1 === 0;\n                        });\n                    }\n                    else if (magnitude <= 0.1) {\n                        multiples = [1 / magnitude];\n                    }\n                }\n            }\n            // normalize the interval to the nearest multiple\n            for (i = 0; i < multiples.length; i++) {\n                retInterval = multiples[i];\n                // only allow tick amounts smaller than natural\n                if ((hasTickAmount &&\n                    retInterval * magnitude >= interval) ||\n                    (!hasTickAmount &&\n                        (normalized <=\n                            (multiples[i] +\n                                (multiples[i + 1] || multiples[i])) / 2))) {\n                    break;\n                }\n            }\n            // Multiply back to the correct magnitude. Correct floats to appropriate\n            // precision (#6085).\n            retInterval = correctFloat(retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10));\n            return retInterval;\n        }\n        /**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function Highcharts.stableSort\n         *\n         * @param {Array<*>} arr\n         *        The array to sort.\n         *\n         * @param {Function} sortFunction\n         *        The function to sort it with, like with regular Array.prototype.sort.\n         */\n        function stableSort(arr, sortFunction) {\n            // @todo It seems like Chrome since v70 sorts in a stable way internally,\n            // plus all other browsers do it, so over time we may be able to remove this\n            // function\n            const length = arr.length;\n            let sortValue, i;\n            // Add index to each item\n            for (i = 0; i < length; i++) {\n                arr[i].safeI = i; // stable sort index\n            }\n            arr.sort(function (a, b) {\n                sortValue = sortFunction(a, b);\n                return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n            });\n            // Remove index from items\n            for (i = 0; i < length; i++) {\n                delete arr[i].safeI; // stable sort index\n            }\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMin\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The lowest number.\n         */\n        function arrayMin(data) {\n            let i = data.length, min = data[0];\n            while (i--) {\n                if (data[i] < min) {\n                    min = data[i];\n                }\n            }\n            return min;\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMax\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The highest number.\n         */\n        function arrayMax(data) {\n            let i = data.length, max = data[0];\n            while (i--) {\n                if (data[i] > max) {\n                    max = data[i];\n                }\n            }\n            return max;\n        }\n        /**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function Highcharts.destroyObjectProperties\n         *\n         * @param {*} obj\n         *        The object to destroy properties on.\n         *\n         * @param {*} [except]\n         *        Exception, do not destroy this property, only delete it.\n         */\n        function destroyObjectProperties(obj, except) {\n            objectEach(obj, function (val, n) {\n                // If the object is non-null and destroy is defined\n                if (val && val !== except && val.destroy) {\n                    // Invoke the destroy\n                    val.destroy();\n                }\n                // Delete the property from the object.\n                delete obj[n];\n            });\n        }\n        /**\n         * Discard a HTML element\n         *\n         * @function Highcharts.discardElement\n         *\n         * @param {Highcharts.HTMLDOMElement} element\n         *        The HTML node to discard.\n         */\n        function discardElement(element) {\n            if (element && element.parentElement) {\n                element.parentElement.removeChild(element);\n            }\n        }\n        /**\n         * Fix JS round off float errors.\n         *\n         * @function Highcharts.correctFloat\n         *\n         * @param {number} num\n         *        A float number to fix.\n         *\n         * @param {number} [prec=14]\n         *        The precision.\n         *\n         * @return {number}\n         *         The corrected float number.\n         */\n        function correctFloat(num, prec) {\n            // When the number is higher than 1e14 use the number (#16275)\n            return num > 1e14 ? num : parseFloat(num.toPrecision(prec || 14));\n        }\n        /**\n         * The time unit lookup\n         *\n         * @ignore\n         */\n        const timeUnits = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 24 * 3600000,\n            week: 7 * 24 * 3600000,\n            month: 28 * 24 * 3600000,\n            year: 364 * 24 * 3600000\n        };\n        /**\n         * Easing definition\n         *\n         * @private\n         * @function Math.easeInOutSine\n         *\n         * @param {number} pos\n         *        Current position, ranging from 0 to 1.\n         *\n         * @return {number}\n         *         Ease result\n         */\n        Math.easeInOutSine = function (pos) {\n            return -0.5 * (Math.cos(Math.PI * pos) - 1);\n        };\n        /**\n         * Find the closest distance between two values of a two-dimensional array\n         * @private\n         * @function Highcharts.getClosestDistance\n         *\n         * @param {Array<Array<number>>} arrays\n         *          An array of arrays of numbers\n         *\n         * @return {number | undefined}\n         *          The closest distance between values\n         */\n        function getClosestDistance(arrays, onError) {\n            const allowNegative = !onError;\n            let closest, loopLength, distance, i;\n            arrays.forEach((xData) => {\n                if (xData.length > 1) {\n                    loopLength = xData.length - 1;\n                    for (i = loopLength; i > 0; i--) {\n                        distance = xData[i] - xData[i - 1];\n                        if (distance < 0 && !allowNegative) {\n                            onError?.();\n                            // Only one call\n                            onError = void 0;\n                        }\n                        else if (distance && (typeof closest === 'undefined' || distance < closest)) {\n                            closest = distance;\n                        }\n                    }\n                }\n            });\n            return closest;\n        }\n        /**\n         * Returns the value of a property path on a given object.\n         *\n         * @private\n         * @function getNestedProperty\n         *\n         * @param {string} path\n         * Path to the property, for example `custom.myValue`.\n         *\n         * @param {unknown} obj\n         * Instance containing the property on the specific path.\n         *\n         * @return {unknown}\n         * The unknown property value.\n         */\n        function getNestedProperty(path, parent) {\n            const pathElements = path.split('.');\n            while (pathElements.length && defined(parent)) {\n                const pathElement = pathElements.shift();\n                // Filter on the key\n                if (typeof pathElement === 'undefined' ||\n                    pathElement === '__proto__') {\n                    return; // undefined\n                }\n                if (pathElement === 'this') {\n                    let thisProp;\n                    if (isObject(parent)) {\n                        thisProp = parent['@this'];\n                    }\n                    return thisProp ?? parent;\n                }\n                const child = parent[pathElement];\n                // Filter on the child\n                if (!defined(child) ||\n                    typeof child === 'function' ||\n                    typeof child.nodeType === 'number' ||\n                    child === win) {\n                    return; // undefined\n                }\n                // Else, proceed\n                parent = child;\n            }\n            return parent;\n        }\n        /**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function Highcharts.getStyle\n         *\n         * @param {Highcharts.HTMLDOMElement} el\n         * An HTML element.\n         *\n         * @param {string} prop\n         * The property name.\n         *\n         * @param {boolean} [toInt=true]\n         * Parse to integer.\n         *\n         * @return {number|string|undefined}\n         * The style value.\n         */\n        function getStyle(el, prop, toInt) {\n            let style;\n            // For width and height, return the actual inner pixel size (#4913)\n            if (prop === 'width') {\n                let offsetWidth = Math.min(el.offsetWidth, el.scrollWidth);\n                // In flex boxes, we need to use getBoundingClientRect and floor it,\n                // because scrollWidth doesn't support subpixel precision (#6427) ...\n                const boundingClientRectWidth = el.getBoundingClientRect &&\n                    el.getBoundingClientRect().width;\n                // ...unless if the containing div or its parents are transform-scaled\n                // down, in which case the boundingClientRect can't be used as it is\n                // also scaled down (#9871, #10498).\n                if (boundingClientRectWidth < offsetWidth &&\n                    boundingClientRectWidth >= offsetWidth - 1) {\n                    offsetWidth = Math.floor(boundingClientRectWidth);\n                }\n                return Math.max(0, // #8377\n                (offsetWidth -\n                    (getStyle(el, 'padding-left', true) || 0) -\n                    (getStyle(el, 'padding-right', true) || 0)));\n            }\n            if (prop === 'height') {\n                return Math.max(0, // #8377\n                (Math.min(el.offsetHeight, el.scrollHeight) -\n                    (getStyle(el, 'padding-top', true) || 0) -\n                    (getStyle(el, 'padding-bottom', true) || 0)));\n            }\n            // Otherwise, get the computed style\n            const css = win.getComputedStyle(el, void 0); // eslint-disable-line no-undefined\n            if (css) {\n                style = css.getPropertyValue(prop);\n                if (pick(toInt, prop !== 'opacity')) {\n                    style = pInt(style);\n                }\n            }\n            return style;\n        }\n        /**\n         * Search for an item in an array.\n         *\n         * @function Highcharts.inArray\n         *\n         * @deprecated\n         *\n         * @param {*} item\n         *        The item to search for.\n         *\n         * @param {Array<*>} arr\n         *        The array or node collection to search in.\n         *\n         * @param {number} [fromIndex=0]\n         *        The index to start searching from.\n         *\n         * @return {number}\n         *         The index within the array, or -1 if not found.\n         */\n        function inArray(item, arr, fromIndex) {\n            error(32, false, void 0, { 'Highcharts.inArray': 'use Array.indexOf' });\n            return arr.indexOf(item, fromIndex);\n        }\n        /**\n         * Return the value of the first element in the array that satisfies the\n         * provided testing function.\n         *\n         * @function Highcharts.find<T>\n         *\n         * @param {Array<T>} arr\n         *        The array to test.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if this item satisfies the condition.\n         *\n         * @return {T|undefined}\n         *         The value of the element.\n         */\n        const find = Array.prototype.find ?\n            function (arr, callback) {\n                return arr.find(callback);\n            } :\n            // Legacy implementation. PhantomJS, IE <= 11 etc. #7223.\n            function (arr, callback) {\n                let i;\n                const length = arr.length;\n                for (i = 0; i < length; i++) {\n                    if (callback(arr[i], i)) { // eslint-disable-line node/callback-return\n                        return arr[i];\n                    }\n                }\n            };\n        /**\n         * Returns an array of a given object's own properties.\n         *\n         * @function Highcharts.keys\n         * @deprecated\n         *\n         * @param {*} obj\n         *        The object of which the properties are to be returned.\n         *\n         * @return {Array<string>}\n         *         An array of strings that represents all the properties.\n         */\n        function keys(obj) {\n            error(32, false, void 0, { 'Highcharts.keys': 'use Object.keys' });\n            return Object.keys(obj);\n        }\n        /**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function Highcharts.offset\n         *\n         * @param {global.Element} el\n         *        The DOM element.\n         *\n         * @return {Highcharts.OffsetObject}\n         *         An object containing `left` and `top` properties for the position in\n         *         the page.\n         */\n        function offset(el) {\n            const docElem = doc.documentElement, box = (el.parentElement || el.parentNode) ?\n                el.getBoundingClientRect() :\n                { top: 0, left: 0, width: 0, height: 0 };\n            return {\n                top: box.top + (win.pageYOffset || docElem.scrollTop) -\n                    (docElem.clientTop || 0),\n                left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n                    (docElem.clientLeft || 0),\n                width: box.width,\n                height: box.height\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Iterate over object key pairs in an object.\n         *\n         * @function Highcharts.objectEach<T>\n         *\n         * @param {*} obj\n         *        The object to iterate over.\n         *\n         * @param {Highcharts.ObjectEachCallbackFunction<T>} fn\n         *        The iterator callback. It passes three arguments:\n         *        * value - The property value.\n         *        * key - The property key.\n         *        * obj - The object that objectEach is being applied to.\n         *\n         * @param {T} [ctx]\n         *        The context.\n         */\n        function objectEach(obj, fn, ctx) {\n            /* eslint-enable valid-jsdoc */\n            for (const key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    fn.call(ctx || obj[key], obj[key], key, obj);\n                }\n            }\n        }\n        /**\n         * Iterate over an array.\n         *\n         * @deprecated\n         * @function Highcharts.each\n         *\n         * @param {Array<*>} arr\n         *        The array to iterate over.\n         *\n         * @param {Function} fn\n         *        The iterator callback. It passes three arguments:\n         *        - `item`: The array item.\n         *        - `index`: The item's index in the array.\n         *        - `arr`: The array that each is being applied to.\n         *\n         * @param {*} [ctx]\n         *        The context.\n         *\n         * @return {void}\n         */\n        /**\n         * Filter an array by a callback.\n         *\n         * @deprecated\n         * @function Highcharts.grep\n         *\n         * @param {Array<*>} arr\n         *        The array to filter.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if the item is to be preserved.\n         *\n         * @return {Array<*>}\n         *         A new, filtered array.\n         */\n        /**\n         * Map an array by a callback.\n         *\n         * @deprecated\n         * @function Highcharts.map\n         *\n         * @param {Array<*>} arr\n         *        The array to map.\n         *\n         * @param {Function} fn\n         *        The callback function. Return the new value for the new array.\n         *\n         * @return {Array<*>}\n         *         A new array item with modified items.\n         */\n        /**\n         * Reduce an array to a single value.\n         *\n         * @deprecated\n         * @function Highcharts.reduce\n         *\n         * @param {Array<*>} arr\n         *        The array to reduce.\n         *\n         * @param {Function} fn\n         *        The callback function. Return the reduced value. Receives 4\n         *        arguments: Accumulated/reduced value, current value, current array\n         *        index, and the array.\n         *\n         * @param {*} initialValue\n         *        The initial value of the accumulator.\n         *\n         * @return {*}\n         *         The reduced value.\n         */\n        /**\n         * Test whether at least one element in the array passes the test implemented by\n         * the provided function.\n         *\n         * @deprecated\n         * @function Highcharts.some\n         *\n         * @param {Array<*>} arr\n         *        The array to test\n         *\n         * @param {Function} fn\n         *        The function to run on each item. Return truty to pass the test.\n         *        Receives arguments `currentValue`, `index` and `array`.\n         *\n         * @param {*} ctx\n         *        The context.\n         *\n         * @return {boolean}\n         */\n        objectEach({\n            map: 'map',\n            each: 'forEach',\n            grep: 'filter',\n            reduce: 'reduce',\n            some: 'some'\n        }, function (val, key) {\n            H[key] = function (arr) {\n                error(32, false, void 0, { [`Highcharts.${key}`]: `use Array.${val}` });\n                return Array.prototype[val].apply(arr, [].slice.call(arguments, 1));\n            };\n        });\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Add an event listener.\n         *\n         * @function Highcharts.addEvent<T>\n         *\n         * @param {Highcharts.Class<T>|T} el\n         *        The element or object to add a listener to. It can be a\n         *        {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The event type.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>|Function} fn\n         *        The function callback to execute when the event is fired.\n         *\n         * @param {Highcharts.EventOptionsObject} [options]\n         *        Options for adding the event.\n         *\n         * @return {Function}\n         *         A callback function to remove the added event.\n         */\n        function addEvent(el, type, fn, options = {}) {\n            /* eslint-enable valid-jsdoc */\n            // Add hcEvents to either the prototype (in case we're running addEvent on a\n            // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n            // inherited down the prototype chain, in which case we need to set the\n            // property on this instance (which may itself be a prototype).\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                owner.hcEvents = {};\n            }\n            const events = owner.hcEvents;\n            // Allow click events added to points, otherwise they will be prevented by\n            // the TouchPointer.pinch function after a pinch zoom operation (#7091).\n            if (H.Point && // without H a dependency loop occurs\n                el instanceof H.Point &&\n                el.series &&\n                el.series.chart) {\n                el.series.chart.runTrackerClick = true;\n            }\n            // Handle DOM events\n            // If the browser supports passive events, add it to improve performance\n            // on touch events (#11353).\n            const addEventListener = el.addEventListener;\n            if (addEventListener) {\n                addEventListener.call(el, type, fn, H.supportsPassiveEvents ? {\n                    passive: options.passive === void 0 ?\n                        type.indexOf('touch') !== -1 : options.passive,\n                    capture: false\n                } : false);\n            }\n            if (!events[type]) {\n                events[type] = [];\n            }\n            const eventObject = {\n                fn,\n                order: typeof options.order === 'number' ? options.order : Infinity\n            };\n            events[type].push(eventObject);\n            // Order the calls\n            events[type].sort((a, b) => a.order - b.order);\n            // Return a function that can be called to remove this event.\n            return function () {\n                removeEvent(el, type, fn);\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.removeEvent<T>\n         *\n         * @param {Highcharts.Class<T>|T} el\n         *        The element to remove events on.\n         *\n         * @param {string} [type]\n         *        The type of events to remove. If undefined, all events are removed\n         *        from the element.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>} [fn]\n         *        The specific callback to remove. If undefined, all events that match\n         *        the element and optionally the type are removed.\n         *\n         * @return {void}\n         */\n        function removeEvent(el, type, fn) {\n            /* eslint-enable valid-jsdoc */\n            /**\n             * @private\n             */\n            function removeOneEvent(type, fn) {\n                const removeEventListener = el.removeEventListener;\n                if (removeEventListener) {\n                    removeEventListener.call(el, type, fn, false);\n                }\n            }\n            /**\n             * @private\n             */\n            function removeAllEvents(eventCollection) {\n                let types, len;\n                if (!el.nodeName) {\n                    return; // break on non-DOM events\n                }\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                }\n                else {\n                    types = eventCollection;\n                }\n                objectEach(types, function (_val, n) {\n                    if (eventCollection[n]) {\n                        len = eventCollection[n].length;\n                        while (len--) {\n                            removeOneEvent(n, eventCollection[n][len].fn);\n                        }\n                    }\n                });\n            }\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                const events = owner.hcEvents;\n                if (type) {\n                    const typeEvents = (events[type] || []);\n                    if (fn) {\n                        events[type] = typeEvents.filter(function (obj) {\n                            return fn !== obj.fn;\n                        });\n                        removeOneEvent(type, fn);\n                    }\n                    else {\n                        removeAllEvents(events);\n                        events[type] = [];\n                    }\n                }\n                else {\n                    removeAllEvents(events);\n                    delete owner.hcEvents;\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.fireEvent<T>\n         *\n         * @param {T} el\n         *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n         *        an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The type of event.\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Custom event arguments that are passed on as an argument to the event\n         *        handler.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>|Function} [defaultFunction]\n         *        The default function to execute if the other listeners haven't\n         *        returned false.\n         *\n         * @return {void}\n         */\n        function fireEvent(el, type, eventArguments, defaultFunction) {\n            /* eslint-enable valid-jsdoc */\n            let e, i;\n            eventArguments = eventArguments || {};\n            if (doc.createEvent &&\n                (el.dispatchEvent ||\n                    (el.fireEvent &&\n                        // Enable firing events on Highcharts instance.\n                        el !== H))) {\n                e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                eventArguments = extend(e, eventArguments);\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(eventArguments);\n                }\n                else {\n                    el.fireEvent(type, eventArguments);\n                }\n            }\n            else if (el.hcEvents) {\n                if (!eventArguments.target) {\n                    // We're running a custom event\n                    extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip\n                        // default handler if called. The built-in\n                        // defaultPrevented property is not overwritable (#5112)\n                        preventDefault: function () {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking\n                        // the zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event\n                        // (#2297). If it is set, we're running a browser event.\n                        type: type\n                    });\n                }\n                const events = [];\n                let object = el;\n                let multilevel = false;\n                // Recurse up the inheritance chain and collect hcEvents set as own\n                // objects on the prototypes.\n                while (object.hcEvents) {\n                    if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                        object.hcEvents[type]) {\n                        if (events.length) {\n                            multilevel = true;\n                        }\n                        events.unshift.apply(events, object.hcEvents[type]);\n                    }\n                    object = Object.getPrototypeOf(object);\n                }\n                // For performance reasons, only sort the event handlers in case we are\n                // dealing with multiple levels in the prototype chain. Otherwise, the\n                // events are already sorted in the addEvent function.\n                if (multilevel) {\n                    // Order the calls\n                    events.sort((a, b) => a.order - b.order);\n                }\n                // Call the collected event handlers\n                events.forEach((obj) => {\n                    // If the event handler returns false, prevent the default handler\n                    // from executing\n                    if (obj.fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                });\n            }\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction.call(el, eventArguments);\n            }\n        }\n        let serialMode;\n        /**\n         * Get a unique key for using in internal element id's and pointers. The key is\n         * composed of a random hash specific to this Highcharts instance, and a\n         * counter.\n         *\n         * @example\n         * let id = uniqueKey(); // => 'highcharts-x45f6hp-0'\n         *\n         * @function Highcharts.uniqueKey\n         *\n         * @return {string}\n         * A unique key.\n         */\n        const uniqueKey = (function () {\n            const hash = Math.random().toString(36).substring(2, 9) + '-';\n            let id = 0;\n            return function () {\n                return 'highcharts-' + (serialMode ? '' : hash) + id++;\n            };\n        }());\n        /**\n         * Activates a serial mode for element IDs provided by\n         * {@link Highcharts.uniqueKey}. This mode can be used in automated tests, where\n         * a simple comparison of two rendered SVG graphics is needed.\n         *\n         * **Note:** This is only for testing purposes and will break functionality in\n         * webpages with multiple charts.\n         *\n         * @example\n         * if (\n         *   process &&\n         *   process.env.NODE_ENV === 'development'\n         * ) {\n         *   Highcharts.useSerialIds(true);\n         * }\n         *\n         * @function Highcharts.useSerialIds\n         *\n         * @param {boolean} [mode]\n         * Changes the state of serial mode.\n         *\n         * @return {boolean|undefined}\n         * State of the serial mode.\n         */\n        function useSerialIds(mode) {\n            return (serialMode = pick(mode, serialMode));\n        }\n        function isFunction(obj) {\n            return typeof obj === 'function';\n        }\n        // Register Highcharts as a plugin in jQuery\n        if (win.jQuery) {\n            /**\n             * Highcharts-extended JQuery.\n             *\n             * @external JQuery\n             */\n            /**\n             * Helper function to return the chart of the current JQuery selector\n             * element.\n             *\n             * @function external:JQuery#highcharts\n             *\n             * @return {Highcharts.Chart}\n             *         The chart that is linked to the JQuery selector element.\n             */ /**\n            * Factory function to create a chart in the current JQuery selector\n            * element.\n            *\n            * @function external:JQuery#highcharts\n            *\n            * @param {'Chart'|'Map'|'StockChart'|string} [className]\n            *        Name of the factory class in the Highcharts namespace.\n            *\n            * @param {Highcharts.Options} [options]\n            *        The chart options structure.\n            *\n            * @param {Highcharts.ChartCallbackFunction} [callback]\n            *        Function to run when the chart has loaded and and all external\n            *        images are loaded. Defining a\n            *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n            *        handler is equivalent.\n            *\n            * @return {JQuery}\n            *         The current JQuery selector.\n            */\n            win.jQuery.fn.highcharts = function () {\n                const args = [].slice.call(arguments);\n                if (this[0]) { // this[0] is the renderTo div\n                    // Create the chart\n                    if (args[0]) {\n                        new H[ // eslint-disable-line computed-property-spacing, no-new\n                        // Constructor defaults to Chart\n                        isString(args[0]) ? args.shift() : 'Chart'](this[0], args[0], args[1]);\n                        return this;\n                    }\n                    // When called without parameters or with the return argument,\n                    // return an existing chart\n                    return charts[attr(this[0], 'data-highcharts-chart')];\n                }\n            };\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // TODO use named exports when supported.\n        const Utilities = {\n            addEvent,\n            arrayMax,\n            arrayMin,\n            attr,\n            clamp,\n            clearTimeout: internalClearTimeout,\n            correctFloat,\n            createElement,\n            css,\n            defined,\n            destroyObjectProperties,\n            diffObjects,\n            discardElement,\n            erase,\n            error,\n            extend,\n            extendClass,\n            find,\n            fireEvent,\n            getClosestDistance,\n            getMagnitude,\n            getNestedProperty,\n            getStyle,\n            inArray,\n            insertItem,\n            isArray,\n            isClass,\n            isDOMElement,\n            isFunction,\n            isNumber,\n            isObject,\n            isString,\n            keys,\n            merge,\n            normalizeTickInterval,\n            objectEach,\n            offset,\n            pad,\n            pick,\n            pInt,\n            pushUnique,\n            relativeLength,\n            removeEvent,\n            splat,\n            stableSort,\n            syncTimeout,\n            timeUnits,\n            uniqueKey,\n            useSerialIds,\n            wrap\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms and defer of 0ms.\n         *\n         * @interface Highcharts.AnimationOptionsObject\n         */ /**\n        * A callback function to exectute when the animation finishes.\n        * @name Highcharts.AnimationOptionsObject#complete\n        * @type {Function|undefined}\n        */ /**\n        * The animation defer in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#defer\n        * @type {number|undefined}\n        */ /**\n        * The animation duration in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#duration\n        * @type {number|undefined}\n        */ /**\n        * The name of an easing function as defined on the `Math` object.\n        * @name Highcharts.AnimationOptionsObject#easing\n        * @type {string|Function|undefined}\n        */ /**\n        * A callback function to execute on each step of each attribute or CSS property\n        * that's being animated. The first argument contains information about the\n        * animation and progress.\n        * @name Highcharts.AnimationOptionsObject#step\n        * @type {Function|undefined}\n        */\n        /**\n         * Creates a frame for the animated SVG element.\n         *\n         * @callback Highcharts.AnimationStepCallbackFunction\n         *\n         * @param {Highcharts.SVGElement} this\n         *        The SVG element to animate.\n         *\n         * @return {void}\n         */\n        /**\n         * Interface description for a class.\n         *\n         * @interface Highcharts.Class<T>\n         * @extends Function\n         */ /**\n        * Class costructor.\n        * @function Highcharts.Class<T>#new\n        * @param {...Array<*>} args\n        *        Constructor arguments.\n        * @return {T}\n        *         Class instance.\n        */\n        /**\n         * A style object with camel case property names to define visual appearance of\n         * a SVG element or HTML element. The properties can be whatever styles are\n         * supported on the given SVG or HTML element.\n         *\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         *\n         * @interface Highcharts.CSSObject\n         */ /**\n        * @name Highcharts.CSSObject#[key:string]\n        * @type {boolean|number|string|undefined}\n        */ /**\n        * Background style for the element.\n        * @name Highcharts.CSSObject#background\n        * @type {string|undefined}\n        */ /**\n        * Background color of the element.\n        * @name Highcharts.CSSObject#backgroundColor\n        * @type {Highcharts.ColorString|undefined}\n        */ /**\n        * Border style for the element.\n        * @name Highcharts.CSSObject#border\n        * @type {string|undefined}\n        */ /**\n        * Radius of the element border.\n        * @name Highcharts.CSSObject#borderRadius\n        * @type {number|undefined}\n        */ /**\n        * Color used in the element. The 'contrast' option is a Highcharts custom\n        * property that results in black or white, depending on the background of the\n        * element.\n        * @name Highcharts.CSSObject#color\n        * @type {'contrast'|Highcharts.ColorString|undefined}\n        */ /**\n        * Style of the mouse cursor when resting over the element.\n        * @name Highcharts.CSSObject#cursor\n        * @type {Highcharts.CursorValue|undefined}\n        */ /**\n        * Font family of the element text. Multiple values have to be in decreasing\n        * preference order and separated by comma.\n        * @name Highcharts.CSSObject#fontFamily\n        * @type {string|undefined}\n        */ /**\n        * Font size of the element text.\n        * @name Highcharts.CSSObject#fontSize\n        * @type {string|undefined}\n        */ /**\n        * Font weight of the element text.\n        * @name Highcharts.CSSObject#fontWeight\n        * @type {string|undefined}\n        */ /**\n        * Height of the element.\n        * @name Highcharts.CSSObject#height\n        * @type {number|undefined}\n        */ /**\n        * Width of the element border.\n        * @name Highcharts.CSSObject#lineWidth\n        * @type {number|undefined}\n        */ /**\n        * Opacity of the element.\n        * @name Highcharts.CSSObject#opacity\n        * @type {number|undefined}\n        */ /**\n        * Space around the element content.\n        * @name Highcharts.CSSObject#padding\n        * @type {string|undefined}\n        */ /**\n        * Behaviour of the element when the mouse cursor rests over it.\n        * @name Highcharts.CSSObject#pointerEvents\n        * @type {string|undefined}\n        */ /**\n        * Positioning of the element.\n        * @name Highcharts.CSSObject#position\n        * @type {string|undefined}\n        */ /**\n        * Alignment of the element text.\n        * @name Highcharts.CSSObject#textAlign\n        * @type {string|undefined}\n        */ /**\n        * Additional decoration of the element text.\n        * @name Highcharts.CSSObject#textDecoration\n        * @type {string|undefined}\n        */ /**\n        * Outline style of the element text.\n        * @name Highcharts.CSSObject#textOutline\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text. Highcharts SVG elements support\n        * `ellipsis` when a `width` is set.\n        * @name Highcharts.CSSObject#textOverflow\n        * @type {string|undefined}\n        */ /**\n        * Top spacing of the element relative to the parent element.\n        * @name Highcharts.CSSObject#top\n        * @type {string|undefined}\n        */ /**\n        * Animated transition of selected element properties.\n        * @name Highcharts.CSSObject#transition\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text.\n        * @name Highcharts.CSSObject#whiteSpace\n        * @type {string|undefined}\n        */ /**\n        * Width of the element.\n        * @name Highcharts.CSSObject#width\n        * @type {number|undefined}\n        */\n        /**\n         * All possible cursor styles.\n         *\n         * @typedef {'alias'|'all-scroll'|'auto'|'cell'|'col-resize'|'context-menu'|'copy'|'crosshair'|'default'|'e-resize'|'ew-resize'|'grab'|'grabbing'|'help'|'move'|'n-resize'|'ne-resize'|'nesw-resize'|'no-drop'|'none'|'not-allowed'|'ns-resize'|'nw-resize'|'nwse-resize'|'pointer'|'progress'|'row-resize'|'s-resize'|'se-resize'|'sw-resize'|'text'|'vertical-text'|'w-resize'|'wait'|'zoom-in'|'zoom-out'} Highcharts.CursorValue\n         */\n        /**\n         * All possible dash styles.\n         *\n         * @typedef {'Dash'|'DashDot'|'Dot'|'LongDash'|'LongDashDot'|'LongDashDotDot'|'ShortDash'|'ShortDashDot'|'ShortDashDotDot'|'ShortDot'|'Solid'} Highcharts.DashStyleValue\n         */\n        /**\n         * Generic dictionary in TypeScript notation.\n         * Use the native `AnyRecord` instead.\n         *\n         * @deprecated\n         * @interface Highcharts.Dictionary<T>\n         */ /**\n        * @name Highcharts.Dictionary<T>#[key:string]\n        * @type {T}\n        */\n        /**\n         * The function callback to execute when the event is fired. The `this` context\n         * contains the instance, that fired the event.\n         *\n         * @callback Highcharts.EventCallbackFunction<T>\n         *\n         * @param {T} this\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Event arguments.\n         *\n         * @return {boolean|void}\n         */\n        /**\n         * The event options for adding function callback.\n         *\n         * @interface Highcharts.EventOptionsObject\n         */ /**\n        * The order the event handler should be called. This opens for having one\n        * handler be called before another, independent of in which order they were\n        * added.\n        * @name Highcharts.EventOptionsObject#order\n        * @type {number}\n        */ /**\n        * Whether an event should be passive or not.\n        * When set to `true`, the function specified by listener will never call\n        * `preventDefault()`.\n        * @name Highcharts.EventOptionsObject#passive\n        * @type boolean\n        */\n        /**\n         * Formats data as a string. Usually the data is accessible throught the `this`\n         * keyword.\n         *\n         * @callback Highcharts.FormatterCallbackFunction<T>\n         *\n         * @param {T} this\n         *        Context to format\n         *\n         * @return {string}\n         *         Formatted text\n         */\n        /**\n         * An object of key-value pairs for HTML attributes.\n         *\n         * @typedef {Highcharts.Dictionary<boolean|number|string|Function>} Highcharts.HTMLAttributes\n         */\n        /**\n         * An HTML DOM element. The type is a reference to the regular HTMLElement in\n         * the global scope.\n         *\n         * @typedef {global.HTMLElement} Highcharts.HTMLDOMElement\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\n         */\n        /**\n         * The iterator callback.\n         *\n         * @callback Highcharts.ObjectEachCallbackFunction<T>\n         *\n         * @param {T} this\n         *        The context.\n         *\n         * @param {*} value\n         *        The property value.\n         *\n         * @param {string} key\n         *        The property key.\n         *\n         * @param {*} obj\n         *        The object that objectEach is being applied to.\n         */\n        /**\n         * An object containing `left` and `top` properties for the position in the\n         * page.\n         *\n         * @interface Highcharts.OffsetObject\n         */ /**\n        * Left distance to the page border.\n        * @name Highcharts.OffsetObject#left\n        * @type {number}\n        */ /**\n        * Top distance to the page border.\n        * @name Highcharts.OffsetObject#top\n        * @type {number}\n        */\n        /**\n         * Describes a range.\n         *\n         * @interface Highcharts.RangeObject\n         */ /**\n        * Maximum number of the range.\n        * @name Highcharts.RangeObject#max\n        * @type {number}\n        */ /**\n        * Minimum number of the range.\n        * @name Highcharts.RangeObject#min\n        * @type {number}\n        */\n        /**\n         * If a number is given, it defines the pixel length. If a percentage string is\n         * given, like for example `'50%'`, the setting defines a length relative to a\n         * base size, for example the size of a container.\n         *\n         * @typedef {number|string} Highcharts.RelativeSize\n         */\n        /**\n         * Proceed function to call original (wrapped) function.\n         *\n         * @callback Highcharts.WrapProceedFunction\n         *\n         * @param {*} [arg1]\n         *        Optional argument. Without any arguments defaults to first argument of\n         *        the wrapping function.\n         *\n         * @param {*} [arg2]\n         *        Optional argument. Without any arguments defaults to second argument\n         *        of the wrapping function.\n         *\n         * @param {*} [arg3]\n         *        Optional argument. Without any arguments defaults to third argument of\n         *        the wrapping function.\n         *\n         * @return {*}\n         *         Return value of the original function.\n         */\n        /**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions. The most important member of the namespace would be the\n         * chart constructor.\n         *\n         * @example\n         * let chart = Highcharts.chart('container', { ... });\n         *\n         * @namespace Highcharts\n         */\n        ''; // detach doclets above\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         * @private\n         */\n        class DataModifier {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            benchmark(dataTable, options) {\n                const results = [];\n                const modifier = this;\n                const execute = () => {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                const defaultOptions = {\n                    iterations: 1\n                };\n                const { iterations } = merge(defaultOptions, options);\n                modifier.on('afterBenchmarkIteration', () => {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                const times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', () => {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', () => {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            }\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifier = this;\n                return new Promise((resolve, reject) => {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        reject(e);\n                    }\n                });\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         * @private\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @private\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTable {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            static isNull(row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    const columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            constructor(options = {}) {\n                /**\n                 * Dictionary of all column aliases and their mapped column. If a column\n                 * for one of the get-methods matches an column alias, this column will\n                 * be replaced with the mapped column by the column alias.\n                 *\n                 * @name Highcharts.DataTable#aliases\n                 * @type {Highcharts.Dictionary<string>}\n                 */\n                this.aliases = (options.aliases ?\n                    JSON.parse(JSON.stringify(options.aliases)) :\n                    {});\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for indentification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                const columns = options.columns || {}, columnNames = Object.keys(columns), thisColumns = this.columns;\n                let rowCount = 0;\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName].slice();\n                    thisColumns[columnName] = column;\n                    rowCount = Math.max(rowCount, column.length);\n                }\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    thisColumns[columnNames[i]].length = rowCount;\n                }\n                this.rowCount = rowCount;\n                const aliases = options.aliases || {}, aliasKeys = Object.keys(aliases), thisAliases = this.aliases;\n                for (let i = 0, iEnd = aliasKeys.length, alias; i < iEnd; ++i) {\n                    alias = aliasKeys[i];\n                    thisAliases[alias] = aliases[alias];\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            clone(skipColumns, eventDetail) {\n                const table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.aliases = table.aliases;\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                const tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone\n                });\n                return tableClone;\n            }\n            /**\n             * Deletes a column alias and returns the original column name. If the alias\n             * is not found, the method returns `undefined`. Deleting an alias does not\n             * affect the data in the table, only the way columns are accessed.\n             *\n             * @function Highcharts.DataTable#deleteColumnAlias\n             *\n             * @param {string} alias\n             * The alias to delete.\n             *\n             * @return {string|undefined}\n             * Returns the original column name, if found.\n             */\n            deleteColumnAlias(alias) {\n                const table = this, aliases = table.aliases, deletedAlias = aliases[alias], modifier = table.modifier;\n                if (deletedAlias) {\n                    delete table.aliases[alias];\n                    if (modifier) {\n                        modifier.modifyColumns(table, { [deletedAlias]: new Array(table.rowCount) }, 0);\n                    }\n                }\n                return deletedAlias;\n            }\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names (no alias) of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            deleteColumns(columnNames, eventDetail) {\n                const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            }\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1, eventDetail) {\n                const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    const columns = table.columns, columnNames = Object.keys(columns);\n                    for (let i = 0, iEnd = columnNames.length, column, deletedCells; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            }\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                const table = this;\n                switch (e.type) {\n                    case 'afterDeleteColumns':\n                    case 'afterDeleteRows':\n                    case 'afterSetCell':\n                    case 'afterSetColumns':\n                    case 'afterSetRows':\n                        table.versionTag = uniqueKey();\n                        break;\n                    default:\n                }\n                fireEvent(table, e.type, e);\n            }\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            getCell(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return column[rowIndex];\n                }\n            }\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            getCellAsBoolean(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                return !!(column && column[rowIndex]);\n            }\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            getCellAsNumber(columnNameOrAlias, rowIndex, useNaN) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                let cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(`${cellValue}`);\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            }\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            getCellAsString(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                return `${(column && column[rowIndex])}`;\n            }\n            /**\n             * Fetches the given column by the canonical column name or by an alias.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnNameOrAlias, asReference) {\n                return this.getColumns([columnNameOrAlias], asReference)[columnNameOrAlias];\n            }\n            /**\n             * Fetches the given column by the canonical column name or by an alias, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            getColumnAsNumbers(columnNameOrAlias, useNaN) {\n                const table = this, columns = table.columns;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = columns[columnNameOrAlias], columnAsNumber = [];\n                if (column) {\n                    const columnLength = column.length;\n                    if (useNaN) {\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i, true));\n                        }\n                    }\n                    else {\n                        for (let i = 0, cellValue; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            }\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            getColumnNames() {\n                const table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            }\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases to retrieve. Aliases taking precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNamesOrAliases, asReference) {\n                const table = this, tableAliasMap = table.aliases, tableColumns = table.columns, columns = {};\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(tableColumns));\n                for (let i = 0, iEnd = columnNamesOrAliases.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    column = tableColumns[(tableAliasMap[columnName] || columnName)];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            getModifier() {\n                return this.modifier;\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNamesOrAliases) {\n                return this.getRows(rowIndex, 1, columnNamesOrAliases)[0];\n            }\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            getRowCount() {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            }\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            getRowIndexBy(columnNameOrAlias, cellValue, rowIndexOffset) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    const rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRowObject(rowIndex, columnNamesOrAliases) {\n                return this.getRowObjects(rowIndex, 1, columnNamesOrAliases)[0];\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (const columnName of columnNamesOrAliases) {\n                        column = columns[(aliases[columnName] || columnName)];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (const columnName of columnNamesOrAliases) {\n                        column = columns[(aliases[columnName] || columnName)];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            getVersionTag() {\n                return this.versionTag;\n            }\n            /**\n             * Checks for given column names or aliases.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNamesOrAliases\n             * Column names of aliases to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            hasColumns(columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns;\n                for (let i = 0, iEnd = columnNamesOrAliases.length, columnName; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    if (!columns[columnName] && !aliases[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            hasRowWith(columnNameOrAlias, cellValue) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            renameColumn(columnName, newColumnName) {\n                const table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        const aliases = table.aliases;\n                        if (aliases[newColumnName]) {\n                            delete aliases[newColumnName];\n                        }\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Sets a cell value based on the row index and column name or alias.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            setCell(columnNameOrAlias, rowIndex, cellValue, eventDetail) {\n                const table = this, columns = table.columns, modifier = table.modifier;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                let column = columns[columnNameOrAlias];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!column) {\n                    column = columns[columnNameOrAlias] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnNameOrAlias, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumn(columnNameOrAlias, column = [], rowIndex = 0, eventDetail) {\n                this.setColumns({ [columnNameOrAlias]: column }, rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names or aliases.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                const table = this, tableColumns = table.columns, tableModifier = table.modifier, tableRowCount = table.rowCount, reset = (typeof rowIndex === 'undefined'), columnNames = Object.keys(columns);\n                table.emit({\n                    type: 'setColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    columnName = (table.aliases[columnName] ||\n                        columnName);\n                    if (reset) {\n                        tableColumns[columnName] = column.slice();\n                        table.rowCount = column.length;\n                    }\n                    else {\n                        const tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                            tableColumn[i] = column[i];\n                        }\n                        table.rowCount = Math.max(table.rowCount, tableColumn.length);\n                    }\n                }\n                const tableColumnNames = Object.keys(tableColumns);\n                for (let i = 0, iEnd = tableColumnNames.length; i < iEnd; ++i) {\n                    tableColumns[tableColumnNames[i]].length = table.rowCount;\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, (rowIndex || 0));\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets or unsets the modifier for the table.\n             * @private\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successfull, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            setModifier(modifier, eventDetail) {\n                const table = this;\n                let promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then((table) => {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch']((error) => {\n                    table.emit({\n                        type: 'setModifierError',\n                        error,\n                        modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex, eventDetail) {\n                this.setRows([row], rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefind` to add as new rows.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRows(rows, rowIndex = this.rowCount, eventDetail) {\n                const table = this, aliases = table.aliases, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n                for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = null;\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        const rowColumnNames = Object.keys(row);\n                        for (let j = 0, jEnd = rowColumnNames.length, rowColumnName; j < jEnd; ++j) {\n                            rowColumnName = rowColumnNames[j];\n                            rowColumnName = (aliases[rowColumnName] || rowColumnName);\n                            if (!columns[rowColumnName]) {\n                                columns[rowColumnName] = new Array(i2 + 1);\n                            }\n                            columns[rowColumnName][i2] = row[rowColumnName];\n                        }\n                    }\n                }\n                const indexRowCount = (rowIndex + rowCount);\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Null state for a row record. In some cases, a row in a table may not\n         * contain any data or may be invalid. In these cases, a null state can be\n         * used to indicate that the row record is empty or invalid.\n         *\n         * @name Highcharts.DataTable.NULL\n         * @type {Highcharts.DataTableRowObject}\n         *\n         * @see {@link Highcharts.DataTable.isNull} for a null test.\n         *\n         * @example\n         * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n         */\n        DataTable.NULL = {};\n        /**\n         * Semantic version string of the DataTable class.\n         * @internal\n         */\n        DataTable.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        class DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            constructor(options = {}) {\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            /**\n             * Poll timer ID, if active.\n             */\n            get polling() {\n                return !!this.polling;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            describeColumn(name, columnMeta) {\n                const connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            }\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            describeColumns(columns) {\n                const connector = this, columnNames = Object.keys(columns);\n                let columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            }\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            getColumnOrder(usePresentationState) {\n                const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort((a, b) => (pick(columns[a].index, 0) - pick(columns[b].index, 0)));\n                }\n            }\n            /**\n             * Retrieves the columns of the the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            getSortedColumns(usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            }\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            load() {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            }\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            save() {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            }\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            setColumnOrder(columnNames) {\n                const connector = this;\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            }\n            setModifierOptions(modifierOptions) {\n                const ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(() => this);\n            }\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            startPolling(refreshTime = 1000) {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(() => connector\n                    .load()['catch']((error) => connector.emit({\n                    type: 'loadError',\n                    error,\n                    table: connector.table\n                }))\n                    .then(() => {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }), refreshTime);\n            }\n            /**\n             * Stops polling data.\n             */\n            stopPolling() {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            }\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            whatIs(name) {\n                return this.metadata.columns[name];\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentRegistry.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentRegistry;\n        (function (ComponentRegistry) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             *\n             * Record of component classes\n             * @todo\n             *\n             */\n            ComponentRegistry.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method used to register new component classes.\n             *\n             * @param {string} key\n             * Registry key of the component class.\n             *\n             * @param {ComponentType} DataConnectorClass\n             * Component class (aka class constructor) to register.\n             */\n            function registerComponent(key, ComponentClass) {\n                return (!!key &&\n                    !ComponentRegistry.types[key] &&\n                    !!(ComponentRegistry.types[key] = ComponentClass));\n            }\n            ComponentRegistry.registerComponent = registerComponent;\n        })(ComponentRegistry || (ComponentRegistry = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Global Dashboards namespace in classic `<scripts>`-based implementations.\n         *\n         * @namespace Dashboards\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Prefix of a GUIElement HTML class name.\n             */\n            Globals.classNamePrefix = 'highcharts-dashboards-';\n            /** @internal */\n            Globals.classNames = {\n                layout: Globals.classNamePrefix + 'layout',\n                cell: Globals.classNamePrefix + 'cell',\n                cellHover: Globals.classNamePrefix + 'cell-state-hover',\n                cellActive: Globals.classNamePrefix + 'cell-state-active',\n                cellLoading: Globals.classNamePrefix + 'cell-state-loading',\n                row: Globals.classNamePrefix + 'row',\n                layoutsWrapper: Globals.classNamePrefix + 'layouts-wrapper',\n                boardContainer: Globals.classNamePrefix + 'wrapper'\n            };\n            /** @internal */\n            Globals.guiElementType = {\n                row: 'row',\n                cell: 'cell',\n                layout: 'layout'\n            };\n            /** @internal */\n            Globals.responsiveBreakpoints = {\n                small: 'small',\n                medium: 'medium',\n                large: 'large'\n            };\n            /**\n             * Contains all Board instances of this window.\n             */\n            Globals.boards = [];\n            /**\n             * Reference to the window used by Dashboards.\n             */\n            Globals.win = window;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/Bindings.js', [_modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (ComponentRegistry, Globals, U) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, fireEvent, error } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var Bindings;\n        (function (Bindings) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getGUIElement(idOrElement) {\n                const container = typeof idOrElement === 'string' ?\n                    document.getElementById(idOrElement) : idOrElement;\n                let guiElement;\n                if (container !== null) {\n                    fireEvent(container, 'bindedGUIElement', {}, function (e) {\n                        guiElement = e.guiElement;\n                    });\n                }\n                return guiElement;\n            }\n            async function addComponent(options, cell) {\n                const optionsStates = options.states;\n                const optionsEvents = options.events;\n                cell = cell || Bindings.getCell(options.cell || '');\n                if (!cell?.container || !options.type) {\n                    error(`The component is misconfigured and is unable to find the\n                        HTML cell element ${options.cell} to render the content.`);\n                    return;\n                }\n                const componentContainer = cell.container;\n                let ComponentClass = ComponentRegistry.types[options.type];\n                if (!ComponentClass) {\n                    error(`The component's type ${options.type} does not exist.`);\n                    ComponentClass =\n                        ComponentRegistry.types['HTML'];\n                    options.title = {\n                        text: cell.row.layout.board?.editMode?.lang.errorMessage,\n                        className: Globals.classNamePrefix + 'component-title-error ' +\n                            Globals.classNamePrefix + 'component-title'\n                    };\n                }\n                const component = new ComponentClass(cell, options);\n                const promise = component.load()['catch']((e) => {\n                    // eslint-disable-next-line no-console\n                    console.error(e);\n                    component.update({\n                        connector: {\n                            id: ''\n                        },\n                        title: {\n                            text: cell?.row.layout.board?.editMode?.lang.errorMessage,\n                            className: Globals.classNamePrefix + 'component-title-error ' +\n                                Globals.classNamePrefix + 'component-title'\n                        }\n                    });\n                });\n                fireEvent(component, 'mount');\n                component.setCell(cell);\n                cell.mountedComponent = component;\n                cell.row.layout.board.mountedComponents.push({\n                    options: options,\n                    component: component,\n                    cell: cell\n                });\n                // events\n                if (optionsEvents && optionsEvents.click) {\n                    addEvent(componentContainer, 'click', () => {\n                        optionsEvents.click();\n                        if (cell &&\n                            component &&\n                            componentContainer &&\n                            optionsStates &&\n                            optionsStates.active) {\n                            cell.setActiveState();\n                        }\n                    });\n                }\n                // states\n                if (optionsStates?.hover) {\n                    componentContainer.classList.add(Globals.classNames.cellHover);\n                }\n                fireEvent(component, 'afterLoad');\n                return promise;\n            }\n            Bindings.addComponent = addComponent;\n            /** @internal */\n            function componentFromJSON(json, cellContainer // @todo\n            ) {\n                let componentClass = ComponentRegistry.types[json.$class];\n                if (!componentClass) {\n                    return;\n                }\n                const cell = Bindings.getCell(json.options.cell || '');\n                if (!cell) {\n                    return;\n                }\n                const component = componentClass.fromJSON(json, cell);\n                if (component) {\n                    component.render();\n                }\n                return component;\n            }\n            Bindings.componentFromJSON = componentFromJSON;\n            function getCell(idOrElement) {\n                const cell = getGUIElement(idOrElement);\n                if (!(cell && cell.getType() === 'cell')) {\n                    return;\n                }\n                return cell;\n            }\n            Bindings.getCell = getCell;\n            function getRow(idOrElement) {\n                const row = getGUIElement(idOrElement);\n                if (!(row && row.getType() === 'row')) {\n                    return;\n                }\n                return row;\n            }\n            Bindings.getRow = getRow;\n            function getLayout(idOrElement) {\n                const layout = getGUIElement(idOrElement);\n                if (!(layout && layout.getType() === 'layout')) {\n                    return;\n                }\n                return layout;\n            }\n            Bindings.getLayout = getLayout;\n        })(Bindings || (Bindings = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Bindings;\n    });\n    _registerModule(_modules, 'Dashboards/Accessibility/DashboardsAccessibility.js', [], function () {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class DashboardsAccessibility {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(board) {\n                this.board = board;\n                this.addTabIndexToCells();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            addTabIndexToCells() {\n                const components = this.board.mountedComponents;\n                let cell;\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    cell = components[i].cell;\n                    if (cell && cell.container) {\n                        cell.container.setAttribute('tabindex', -1);\n                    }\n                }\n            }\n        }\n        // namespace DashboardsAccessibility { }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DashboardsAccessibility;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        class DataCursor {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(stateMap = {}) {\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            addListener(tableId, state, listener) {\n                const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                const listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            }\n            /**\n             * @private\n             */\n            buildEmittingTag(e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            }\n            // Implementation\n            emitCursor(table, groupOrCursor, cursorOrEvent, eventOrLasting, lasting) {\n                const cursor = (typeof groupOrCursor === 'object' ?\n                    groupOrCursor :\n                    cursorOrEvent), event = (typeof eventOrLasting === 'object' ?\n                    eventOrLasting :\n                    cursorOrEvent), group = (typeof groupOrCursor === 'string' ?\n                    groupOrCursor :\n                    void 0), tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                lasting = (lasting || eventOrLasting === true);\n                if (listeners) {\n                    const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ||\n                        {});\n                    const cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    const e = {\n                        cursor,\n                        cursors,\n                        table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    if (group) {\n                        e.group = group;\n                    }\n                    const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        const index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            }\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            remitCursor(tableId, cursor) {\n                const cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    const index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            removeListener(tableId, state, listener) {\n                const listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const index = listeners.indexOf(listener);\n                    if (index) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataCursor class.\n         * @internal\n         */\n        DataCursor.version = '1.0.0';\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    const columnNeedle = JSON.stringify(needle.columns);\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                const needleColumns = needle.columns;\n                const rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                const columns = (cursor.columns || []);\n                const positions = [];\n                const state = cursor.state;\n                for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row,\n                            state\n                        });\n                        continue;\n                    }\n                    for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row,\n                            state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                const range = {\n                    type: 'range',\n                    firstRow: (cursor.row ??\n                        (defaultRange && defaultRange.firstRow) ??\n                        0),\n                    lastRow: (cursor.row ??\n                        (defaultRange && defaultRange.lastRow) ??\n                        Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Dashboards/Serializable.js', [], function () {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Contains the toolset to serialize class instance to JSON and deserialize JSON\n         * to class instances.\n         * @internal\n         * @private\n         */\n        var Serializable;\n        (function (Serializable) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry of serializable classes.\n             */\n            const classRegistry = {};\n            /**\n             * Registry of function sets.\n             */\n            const helperRegistry = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a class instance from the given JSON, if a suitable serializer\n             * has been found.\n             *\n             * @function Serializable.fromJSON\n             *\n             * @param {Serializable.JSON} json\n             * JSON to create a class instance or object from.\n             *\n             * @return {Globals.AnyRecord}\n             * Returns the class instance or object, or throws an exception.\n             */\n            function fromJSON(json) {\n                const $class = json.$class;\n                if (typeof $class !== 'string') {\n                    throw new Error('JSON has no $class property.');\n                }\n                const classs = classRegistry[$class];\n                if (classs) {\n                    return classs.fromJSON(json);\n                }\n                const helper = helperRegistry[$class];\n                if (helper) {\n                    return helper.fromJSON(json);\n                }\n                throw new Error(`'${$class}' unknown.`);\n            }\n            Serializable.fromJSON = fromJSON;\n            /**\n             * Registers a class prototype for the given JSON $class.\n             *\n             * @function Serializable.registerClassPrototype\n             *\n             * @param {string} $class\n             * JSON $class to register for.\n             *\n             * @param {Serializable} classPrototype\n             * Class to register.\n             */\n            function registerClassPrototype($class, classPrototype) {\n                if (classRegistry[$class]) {\n                    throw new Error('A serializer for \\'' + $class + '\\' is already registered.');\n                }\n                classRegistry[$class] = classPrototype;\n            }\n            Serializable.registerClassPrototype = registerClassPrototype;\n            /**\n             * Registers helper functions for the given JSON $class.\n             *\n             * @function Serializable.registerHelper\n             *\n             * @param {Helper} helperFunctions\n             * Helper functions to register.\n             */\n            function registerHelper(helperFunctions) {\n                if (helperRegistry[helperFunctions.$class]) {\n                    throw new Error('A serializer for \\'' + helperFunctions.$class +\n                        '\\' is already registered.');\n                }\n                helperRegistry[helperFunctions.$class] = helperFunctions;\n            }\n            Serializable.registerHelper = registerHelper;\n            /**\n             * Creates JSON from a class instance.\n             *\n             * @function Serializable.toJSON\n             *\n             * @param {Globals.AnyRecord} obj\n             * Class instance or object to serialize as JSON.\n             *\n             * @return {Serializable.JSON}\n             * JSON of the class instance.\n             */\n            function toJSON(obj) {\n                if (typeof obj.fromJSON === 'function' &&\n                    typeof obj.toJSON === 'function') {\n                    return obj.toJSON();\n                }\n                const classes = Object.keys(helperRegistry), numberOfHelpers = classes.length;\n                let $class, serializer;\n                for (let i = 0; i < numberOfHelpers; ++i) {\n                    $class = classes[i];\n                    serializer = helperRegistry[$class];\n                    if (serializer.jsonSupportFor(obj)) {\n                        return serializer.toJSON(obj);\n                    }\n                }\n                throw new Error('Object is not supported.');\n            }\n            Serializable.toJSON = toJSON;\n        })(Serializable || (Serializable = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Serializable;\n    });\n    _registerModule(_modules, 'Dashboards/SerializeHelper/DataCursorHelper.js', [_modules['Data/DataCursor.js'], _modules['Dashboards/Serializable.js']], function (DataCursor, Serializable) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts the given JSON to a class instance.\n         *\n         * @param {DataCursorHelper.JSON} json\n         * JSON to deserialize as a class instance or object.\n         *\n         * @return {DataCursor}\n         * Returns the class instance or object, or throws an exception.\n         */\n        function fromJSON(json) {\n            return new DataCursor(json.stateMap);\n        }\n        /**\n         * Validates the given class instance for JSON support.\n         *\n         * @param {Globals.AnyRecord} obj\n         * Class instance or object to validate.\n         *\n         * @return {boolean}\n         * Returns true, if the function set can convert the given object, otherwise\n         * false.\n         */\n        function jsonSupportFor(obj) {\n            return obj instanceof DataCursor;\n        }\n        /**\n         * Converts the given class instance to JSON.\n         *\n         * @param {DataTable} obj\n         * Class instance or object to serialize as JSON.\n         *\n         * @return {DataTableHelper.JSON}\n         * Returns the JSON of the class instance or object.\n         */\n        function toJSON(obj) {\n            const stateMap = obj.stateMap, stateMapJSON = {}, tableIds = Object.keys(obj.stateMap);\n            let cursors, cursorsJSON, tableId, state, states;\n            for (let i = 0, iEnd = tableIds.length; i < iEnd; ++i) {\n                tableId = tableIds[i];\n                states = Object.keys(stateMap[tableId]);\n                stateMapJSON[tableId] = {};\n                for (let j = 0, jEnd = states.length; j < jEnd; ++j) {\n                    state = states[j];\n                    cursors = stateMap[tableId][state];\n                    stateMapJSON[tableId][state] = cursorsJSON = [];\n                    for (let k = 0, kEnd = cursors.length; k < kEnd; ++k) {\n                        cursorsJSON.push({ ...cursors[k] });\n                    }\n                }\n            }\n            return {\n                $class: 'Data.DataCursor',\n                stateMap: stateMapJSON\n            };\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        const DataCursorHelper = {\n            $class: 'Data.DataCursor',\n            fromJSON,\n            jsonSupportFor,\n            toJSON\n        };\n        Serializable.registerHelper(DataCursorHelper);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursorHelper;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        class DataPool {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = DataPoolDefaults) {\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                U.fireEvent(this, e.type, e);\n            }\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} name\n             * Name of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            getConnector(name) {\n                const connector = this.connectors[name];\n                // already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                let waitingList = this.waiting[name];\n                // start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[name] = [];\n                    const connectorOptions = this.getConnectorOptions(name);\n                    if (!connectorOptions) {\n                        throw new Error(`Connector not found. (${name})`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then((connector) => {\n                        delete this.waiting[name];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch']((error) => {\n                        delete this.waiting[name];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // add request to waiting list\n                return new Promise((resolve, reject) => {\n                    waitingList.push([resolve, reject]);\n                });\n            }\n            /**\n             * Returns the names of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            getConnectorIds() {\n                const connectors = this.options.connectors, connectorIds = [];\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            }\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} id\n             * Name of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            getConnectorOptions(id) {\n                const connectors = this.options.connectors;\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === id) {\n                        return connectors[i];\n                    }\n                }\n            }\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            getConnectorTable(connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then((connector) => connector.table);\n            }\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            loadConnector(options) {\n                return new Promise((resolve, reject) => {\n                    this.emit({\n                        type: 'load',\n                        options\n                    });\n                    const ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(`Connector type not found. (${options.type})`);\n                    }\n                    const connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then((connector) => {\n                        this.connectors[options.id] = connector;\n                        this.emit({\n                            type: 'afterLoad',\n                            options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return U.addEvent(this, type, callback);\n            }\n            /**\n             * Sets connector options with a specific name.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            setConnectorOptions(options) {\n                const connectors = this.options.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options\n                });\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataPool class.\n         * @internal\n         */\n        DataPool.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditGlobals.js', [_modules['Dashboards/Globals.js']], function (DG) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const PREFIX = DG.classNamePrefix + 'edit-';\n        /**\n         * @internal\n         */\n        const EditGlobals = {\n            classNames: {\n                resizeSnap: PREFIX + 'resize-snap',\n                resizeSnapX: PREFIX + 'resize-snap-x',\n                resizeSnapY: PREFIX + 'resize-snap-y',\n                separator: PREFIX + 'separator',\n                contextMenuBtn: PREFIX + 'context-menu-btn',\n                contextMenuBtnText: PREFIX + 'context-menu-btn-text',\n                contextMenu: PREFIX + 'context-menu',\n                contextMenuItem: PREFIX + 'context-menu-item',\n                editModeEnabled: PREFIX + 'enabled',\n                editToolbar: PREFIX + 'toolbar',\n                editToolbarCellOutline: PREFIX + 'toolbar-cell-outline',\n                editToolbarRowOutline: PREFIX + 'toolbar-row-outline',\n                editToolbarItem: PREFIX + 'toolbar-item',\n                editToolbarRow: PREFIX + 'toolbar-row',\n                editToolbarCell: PREFIX + 'toolbar-cell',\n                editSidebar: PREFIX + 'sidebar',\n                editSidebarShow: PREFIX + 'sidebar-show',\n                editSidebarHide: PREFIX + 'sidebar-hide',\n                editSidebarTitle: PREFIX + 'sidebar-title',\n                editSidebarMenuItem: PREFIX + 'sidebar-item',\n                rowContextHighlight: PREFIX + 'row-context-highlight',\n                cellEditHighlight: PREFIX + 'cell-highlight',\n                dashboardCellEditHighlightActive: PREFIX + 'cell-highlight-active',\n                dragMock: PREFIX + 'drag-mock',\n                dropPointer: PREFIX + 'drop-pointer',\n                contextDetectionPointer: PREFIX + 'ctx-detection-pointer',\n                resizePointer: PREFIX + 'resize-pointer',\n                currentEditedElement: PREFIX + 'unmask',\n                maskElement: PREFIX + 'mask',\n                menuItem: PREFIX + 'menu-item',\n                menu: PREFIX + 'menu',\n                menuVerticalSeparator: PREFIX + 'menu-vertical-separator',\n                menuHorizontalSeparator: PREFIX + 'menu-horizontal-separator',\n                menuDestroy: PREFIX + 'menu-destroy',\n                editSidebarWrapper: PREFIX + 'sidebar-wrapper',\n                customSelect: PREFIX + 'custom-select',\n                customSelectButton: PREFIX + 'custom-option-button',\n                toggleContainer: PREFIX + 'toggle-container',\n                toggleWrapper: PREFIX + 'toggle-wrapper',\n                toggleSlider: PREFIX + 'toggle-slider',\n                toggleWrapperColored: PREFIX + 'toggle-wrapper-colored',\n                toggleLabels: PREFIX + 'toggle-labels',\n                button: PREFIX + 'button',\n                sidebarNavButton: PREFIX + 'sidebar-button-nav',\n                labelText: PREFIX + 'label-text',\n                editSidebarTabBtn: PREFIX + 'sidebar-tab-btn',\n                editToolsBtn: PREFIX + 'tools-btn',\n                editTools: PREFIX + 'tools',\n                editGridItems: PREFIX + 'grid-items',\n                // Confirmation popup\n                confirmationPopup: PREFIX + 'confirmation-popup',\n                popupButtonContainer: PREFIX + 'confirmation-popup-button-container',\n                popupContentContainer: PREFIX + 'confirmation-popup-content',\n                popupCancelBtn: PREFIX + 'confirmation-popup-cancel-btn',\n                popupConfirmBtn: PREFIX + 'confirmation-popup-confirm-btn',\n                popupCloseButton: PREFIX + 'popup-close',\n                editOverlay: PREFIX + 'overlay',\n                editOverlayActive: PREFIX + 'overlay-active',\n                resizerMenuBtnActive: PREFIX + 'resizer-menu-btn-active',\n                sidebarCloseButton: PREFIX + 'close-btn',\n                editSidebarTabBtnWrapper: PREFIX + 'tabs-buttons-wrapper',\n                editSidebarRight: PREFIX + 'sidebar-right',\n                editSidebarRightShow: PREFIX + 'sidebar-right-show',\n                viewFullscreen: PREFIX + 'view-fullscreen',\n                // Accordion\n                accordionMenu: PREFIX + 'accordion-menu',\n                accordionContainer: PREFIX + 'accordion',\n                accordionHeader: PREFIX + 'accordion-header',\n                accordionHeaderBtn: PREFIX + 'accordion-header-btn',\n                accordionHeaderIcon: PREFIX + 'accordion-header-icon',\n                accordionContent: PREFIX + 'accordion-content',\n                accordionNestedWrapper: PREFIX + 'accordion-nested',\n                accordionMenuButtonsContainer: PREFIX + 'accordion-menu-buttons-container',\n                accordionMenuButton: PREFIX + 'accordion-menu-button',\n                hiddenElement: PREFIX + 'hidden-element',\n                collapsableContentHeader: PREFIX + 'collapsable-content-header',\n                // Custom dropdown with icons\n                collapsedElement: PREFIX + 'collapsed-element',\n                dropdown: PREFIX + 'dropdown',\n                dropdownContent: PREFIX + 'dropdown-content',\n                dropdownButton: PREFIX + 'dropdown-button',\n                dropdownButtonContent: PREFIX + 'dropdown-button-content',\n                dropdownIcon: PREFIX + 'pointer',\n                icon: PREFIX + 'icon'\n            },\n            lang: {\n                accessibility: {\n                    contextMenu: {\n                        button: 'Context menu'\n                    },\n                    editMode: {\n                        editMode: 'Edit mode toggle button'\n                    }\n                },\n                addComponent: 'Add component',\n                cancelButton: 'Cancel',\n                caption: 'Caption',\n                chartClassName: 'Chart class name',\n                chartConfig: 'Chart configuration',\n                chartID: 'Chart ID',\n                chartOptions: 'Chart options',\n                chartType: 'Chart type',\n                connectorName: 'Connector name',\n                confirmButton: 'Confirm',\n                confirmDestroyCell: 'Do you really want to destroy the cell?',\n                confirmDestroyRow: 'Do you really want to destroy the row?',\n                dataLabels: 'Data labels',\n                editMode: 'Edit mode',\n                errorMessage: 'Something went wrong',\n                exitFullscreen: 'Exit full screen',\n                id: 'Id',\n                large: 'Large',\n                medium: 'Medium',\n                off: 'off',\n                on: 'on',\n                pointFormat: 'Point format',\n                settings: 'Settings',\n                small: 'Small',\n                style: 'Styles',\n                title: 'Title',\n                viewFullscreen: 'View in full screen'\n            }\n        };\n\n        return EditGlobals;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditRenderer.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js']], function (EditGlobals, U) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, createElement, defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Function to create a context button.\n         * @internal\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param editMode\n         * EditMode instance.\n         *\n         * @returns\n         * Context button element.\n         */\n        function renderContextButton(parentNode, editMode) {\n            const contextMenuOptions = editMode.options.contextMenu;\n            let contextButton;\n            if (contextMenuOptions) {\n                contextButton = createElement('button', {\n                    className: EditGlobals.classNames.contextMenuBtn,\n                    onclick: function (event) {\n                        event.stopPropagation();\n                        editMode.onContextBtnClick();\n                    }\n                }, {}, parentNode);\n                // Add the icon if defined.\n                if (contextMenuOptions.icon) {\n                    createElement('img', {\n                        src: contextMenuOptions.icon,\n                        className: EditGlobals.classNames.icon\n                    }, {}, contextButton);\n                }\n                // Add text next to the icon if defined.\n                if (contextMenuOptions.text) {\n                    createElement('span', {\n                        className: EditGlobals.classNames.contextMenuBtnText,\n                        textContent: contextMenuOptions.text\n                    }, {}, contextButton);\n                }\n                contextButton.setAttribute('aria-label', editMode.lang.accessibility.contextMenu.button);\n                contextButton.setAttribute('aria-expanded', 'false');\n            }\n            return contextButton;\n        }\n        /**\n         * Creates the collapsable header element.\n         * @internal\n         *\n         * @param parentElement\n         * The HTMLElement to which the element should be rendered to.\n         *\n         * @param options\n         * Nested header options.\n         *\n         * @returns the outer element and content in the collapsable div.\n         */\n        function renderCollapseHeader(parentElement, options) {\n            const { name, showToggle, onchange, isEnabled, isNested, lang } = options;\n            const accordion = createElement('div', {\n                className: EditGlobals.classNames[isNested ? 'accordionNestedWrapper' : 'accordionContainer'] + ' ' + EditGlobals.classNames.collapsableContentHeader\n            }, {}, parentElement);\n            const header = createElement('div', {\n                className: EditGlobals.classNames.accordionHeader\n            }, {}, accordion);\n            const headerBtn = createElement('button', { className: EditGlobals.classNames.accordionHeaderBtn }, {}, header);\n            createElement('span', {\n                textContent: lang[name] || name\n            }, {}, headerBtn);\n            if (showToggle) {\n                renderToggle(header, {\n                    enabledOnOffLabels: true,\n                    id: name,\n                    name: '',\n                    onchange: onchange,\n                    value: isEnabled || false,\n                    lang\n                });\n            }\n            const headerIcon = createElement('span', {\n                className: EditGlobals.classNames.accordionHeaderIcon + ' ' +\n                    EditGlobals.classNames.collapsedElement\n            }, {}, headerBtn);\n            const content = createElement('div', {\n                className: EditGlobals.classNames.accordionContent + ' ' +\n                    EditGlobals.classNames.hiddenElement\n            }, {}, accordion);\n            headerBtn.addEventListener('click', function () {\n                content.classList.toggle(EditGlobals.classNames.hiddenElement);\n                headerIcon.classList.toggle(EditGlobals.classNames.collapsedElement);\n            });\n            return { outerElement: accordion, content: content };\n        }\n        /**\n         * Function to create select element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param options\n         * Select form field options.\n         *\n         * @returns\n         * Select element\n         */\n        function renderSelect(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const iconsURLPrefix = options.iconsURLPrefix || '';\n            const customSelect = createElement('div', {\n                className: EditGlobals.classNames.dropdown +\n                    ' ' +\n                    EditGlobals.classNames.collapsableContentHeader\n            }, {}, parentElement);\n            const btn = createElement('button', {\n                className: EditGlobals.classNames.dropdownButton\n            }, {}, customSelect);\n            const btnContent = createElement('div', {\n                className: EditGlobals.classNames.dropdownButtonContent\n            }, {}, btn);\n            const iconURL = (U.find(options.selectOptions, (item) => item.name === options.value) || {}).iconURL;\n            let headerIcon;\n            if (iconURL) {\n                headerIcon = createElement('img', {\n                    src: iconsURLPrefix + iconURL,\n                    className: EditGlobals.classNames.icon\n                }, {}, btnContent);\n            }\n            const placeholder = createElement('span', {\n                textContent: options.value,\n                id: options.id || ''\n            }, {}, btnContent);\n            const dropdownPointer = createElement('img', {\n                className: EditGlobals.classNames.dropdownIcon +\n                    ' ' +\n                    EditGlobals.classNames.collapsedElement,\n                src: iconsURLPrefix + 'dropdown-pointer.svg'\n            }, {}, btn);\n            const dropdown = createElement('ul', {\n                className: EditGlobals.classNames.dropdownContent +\n                    ' ' +\n                    EditGlobals.classNames.hiddenElement\n            }, {}, customSelect);\n            btn.addEventListener('click', function () {\n                dropdown.classList.toggle(EditGlobals.classNames.hiddenElement);\n                dropdownPointer.classList.toggle(EditGlobals.classNames.collapsedElement);\n            });\n            for (let i = 0, iEnd = options.selectOptions.length; i < iEnd; ++i) {\n                renderSelectElement(merge(options.selectOptions[i] || {}, { iconsURLPrefix }), dropdown, placeholder, options.id, dropdownPointer, headerIcon, options.onchange);\n            }\n            return customSelect;\n        }\n        /**\n         * @internal\n         */\n        function renderSelectElement(option, dropdown, placeholder, id, dropdownPointer, headerIcon, callback) {\n            const iconURL = option.iconsURLPrefix + option.iconURL;\n            const selectOption = createElement('li', {}, {}, dropdown);\n            const selectOptionBtn = createElement('button', { className: EditGlobals.classNames.customSelectButton }, {}, selectOption);\n            let icon;\n            if (option.iconURL) {\n                icon = createElement('img', {\n                    src: iconURL\n                }, {}, selectOptionBtn);\n            }\n            createElement('span', { textContent: option.name || '' }, {}, selectOptionBtn);\n            selectOptionBtn.addEventListener('click', function () {\n                dropdown.classList.add(EditGlobals.classNames.hiddenElement);\n                dropdownPointer.classList.toggle(EditGlobals.classNames.collapsedElement);\n                placeholder.textContent = option.name || '';\n                if (headerIcon && option.iconURL) {\n                    headerIcon.src = iconURL;\n                }\n                if (callback) {\n                    return callback(option.name);\n                }\n            });\n        }\n        /**\n         * Function to create toggle element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param options\n         * Form field options.\n         *\n         * @returns\n         * Toggle element.\n         */\n        function renderToggle(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            const lang = options.lang, value = options.value, title = options.title || options.name, langKey = options.langKey;\n            const toggleContainer = createElement('button', {\n                className: EditGlobals.classNames.toggleContainer,\n                type: 'button',\n                role: 'switch',\n                ariaChecked: false,\n                ariaLabel: langKey ? lang.accessibility[langKey][options.name] : ''\n            }, {}, parentElement);\n            if (title) {\n                renderText(toggleContainer, { title });\n            }\n            if (options.enabledOnOffLabels) {\n                renderText(toggleContainer, {\n                    title: lang.off,\n                    className: EditGlobals.classNames.toggleLabels\n                });\n            }\n            const toggle = createElement('label', {\n                className: EditGlobals.classNames.toggleWrapper +\n                    ' ' + (options.className || '')\n            }, {}, toggleContainer);\n            const input = renderCheckbox(toggle, value), callbackFn = options.onchange;\n            callbackFn && toggleContainer.addEventListener('click', (e) => {\n                callbackFn(!input.checked);\n                input.checked = !input.checked;\n                toggleContainer.setAttribute('aria-checked', input.checked);\n                e.stopPropagation();\n            });\n            const slider = createElement('span', {\n                className: EditGlobals.classNames.toggleSlider\n            }, {}, toggle);\n            callbackFn && slider.addEventListener('click', (e) => {\n                e.preventDefault();\n            });\n            if (options.enabledOnOffLabels) {\n                renderText(toggleContainer, {\n                    title: lang.on,\n                    className: EditGlobals.classNames.toggleLabels\n                });\n            }\n            return toggleContainer;\n        }\n        /**\n         * Function to create text element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended\n         *\n         * @param text\n         * Text to be displayed\n         *\n         * @param callback\n         * Callback function to be fired on the click\n         *\n         * @returns text Element\n         */\n        function renderText(parentElement, options) {\n            let textElem;\n            const { title: text, className, isLabel } = options;\n            if (parentElement) {\n                const labelFor = isLabel ? { htmlFor: text } : {};\n                textElem = createElement(isLabel ? 'label' : 'div', {\n                    className: EditGlobals.classNames.labelText + ' ' + (className || ''),\n                    textContent: text,\n                    ...labelFor\n                }, {}, parentElement);\n            }\n            return textElem;\n        }\n        /**\n         * Function to create Icon element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param icon\n         * Icon URL\n         *\n         * @param callback\n         * Callback function\n         *\n         * @returns\n         * Icon Element\n         */\n        function renderIcon(parentElement, options) {\n            const { icon, callback } = options;\n            if (!parentElement) {\n                return;\n            }\n            const iconElem = createElement('div', {\n                onclick: callback,\n                className: options.className || ''\n            }, {}, parentElement);\n            iconElem.style['background-image'] = 'url(' + icon + ')';\n            const mousedown = options.mousedown;\n            const click = options.click;\n            if (mousedown) {\n                iconElem.onmousedown = function () {\n                    mousedown.apply(this, arguments);\n                };\n            }\n            if (click) {\n                iconElem.addEventListener('click', function () {\n                    click.apply(this, arguments);\n                });\n            }\n            return iconElem;\n        }\n        /**\n         * Function to create input element.\n         *\n         * @param parentElement\n         * the element to which the new element should be appended\n         *\n         * @param options\n         * Form field options\n         *\n         * @returns\n         * Input Element\n         */\n        function renderInput(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const input = createElement('input', {\n                type: 'text',\n                onclick: options.callback,\n                id: options.id || '',\n                name: options.name || '',\n                value: ((defined(options.value) &&\n                    options.value.toString().replace(/\\\"/g, '')) || '')\n            }, {}, parentElement);\n            const onchange = options.onchange;\n            if (onchange) {\n                input.addEventListener('change', function (e) {\n                    onchange(e.target.value);\n                });\n            }\n            return input;\n        }\n        /**\n         * Function to create textarea element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended\n         *\n         * @param options\n         * Form field options\n         *\n         * @returns\n         * textarea Element\n         */\n        function renderTextarea(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const textarea = createElement('textarea', {\n                id: options.id,\n                name: options.name,\n                value: options.value || ''\n            }, {}, parentElement);\n            const onchange = options.onchange;\n            if (onchange) {\n                textarea.addEventListener('change', function (e) {\n                    onchange(e.target.value);\n                });\n            }\n            return textarea;\n        }\n        /**\n         * Function to render the input of type checkbox.\n         *\n         * @param parentElement\n         * An element to which render the checkbox to\n         *\n         * @param checked\n         * Whether the checkbox should be checked or not.\n         *\n         * @returns\n         * The checkbox element\n         */\n        function renderCheckbox(parentElement, checked) {\n            let input;\n            if (parentElement) {\n                input = createElement('input', {\n                    type: 'checkbox',\n                    checked: !!checked\n                }, {}, parentElement);\n            }\n            return input;\n        }\n        /**\n         * Function to create button element.\n         *\n         * @param parentElement\n         * the element to which the new element should be appended\n         *\n         * @param options\n         * Button field options\n         *\n         * @returns\n         * Button Element\n         */\n        function renderButton(parentElement, options) {\n            let button;\n            if (!parentElement) {\n                return;\n            }\n            button = createElement('button', {\n                className: (EditGlobals.classNames.button + ' ' +\n                    (options.className || '')),\n                onclick: options.callback,\n                textContent: options.text\n            }, options.style || {}, parentElement);\n            if (options.icon) {\n                button.style['background-image'] =\n                    'url(' + options.icon + ')';\n            }\n            return button;\n        }\n        /**\n         * Get the renderer function based on the type of the element to render.\n         *\n         * @param type\n         * Type of the element to render\n         *\n         * @returns\n         * function to render a specific element\n         */\n        function getRendererFunction(type) {\n            return {\n                select: renderSelect,\n                toggle: renderToggle,\n                text: renderText,\n                collapse: renderCollapseHeader,\n                icon: renderIcon,\n                contextButton: renderContextButton,\n                input: renderInput,\n                textarea: renderTextarea,\n                checkbox: renderCheckbox,\n                button: renderButton\n            }[type];\n        }\n        const EditRenderer = {\n            renderSelect,\n            renderToggle,\n            renderText,\n            renderCollapseHeader,\n            renderIcon,\n            renderContextButton,\n            renderInput,\n            renderTextarea,\n            renderCheckbox,\n            renderButton,\n            getRendererFunction\n        };\n\n        return EditRenderer;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/MenuItem.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditRenderer.js']], function (EditGlobals, U, EditRenderer) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, merge } = U;\n        class MenuItem {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(menu, options) {\n                this.menu = menu;\n                this.isActive = false;\n                this.options = merge(MenuItem.defaultOptions, options);\n                this.container = this.setContainer();\n                this.innerElement = this.setInnerElement();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            setContainer() {\n                const item = this, options = item.options;\n                let className = EditGlobals.classNames.menuItem;\n                if (item.menu.options.itemsClassName) {\n                    className += ' ' + item.menu.options.itemsClassName;\n                }\n                if (options.className) {\n                    className += ' ' + options.className;\n                }\n                return createElement('div', { className: className || '' }, merge(this.options.style || {}, \n                // to remove\n                this.isActive ? { display: 'block' } : {}), this.menu.container);\n            }\n            setInnerElement() {\n                const item = this, options = item.options, container = item.container, langKey = options.langKey;\n                if (options.type === 'toggle') {\n                    return EditRenderer.renderToggle(container, {\n                        id: options.id,\n                        name: options.id,\n                        title: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            options.text,\n                        value: !!(options.getValue && options.getValue(item)),\n                        lang: this.menu.editMode.lang,\n                        langKey: langKey,\n                        onchange: options.events?.click?.bind(item)\n                    });\n                }\n                if (options.type === 'text') {\n                    return EditRenderer.renderText(container, {\n                        title: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            options.text || '',\n                        className: options.className || ''\n                    });\n                }\n                if (options.type === 'icon') {\n                    return EditRenderer.renderIcon(container, {\n                        icon: options.icon || '',\n                        mousedown: options.events?.onmousedown?.bind(item),\n                        click: options.events?.click?.bind(item)\n                    });\n                }\n                if (options.type === 'button') {\n                    return EditRenderer.renderButton(container, {\n                        callback: options.events?.click?.bind(item),\n                        className: options.className || '',\n                        style: options.style || {},\n                        text: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            (options.text || '')\n                    });\n                }\n            }\n            update() {\n                const item = this, options = item.options;\n                if (options.events && options.events.update) {\n                    options.events.update.apply(item, arguments);\n                }\n            }\n            activate() {\n                const item = this;\n                item.update();\n                // Temp.\n                if (item.container) {\n                    item.isActive = true;\n                    item.container.style.display = 'block';\n                }\n            }\n            deactivate() {\n                const item = this;\n                // Temp.\n                if (item.container) {\n                    item.isActive = false;\n                    item.container.style.display = 'none';\n                }\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        MenuItem.defaultOptions = {\n            id: '',\n            type: 'text'\n        };\n\n        return MenuItem;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/MenuItemBindings.js', [], function () {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const MenuItemBindings = {\n            /* *\n            *\n            *  Context menu\n            *\n            * */\n            viewFullscreen: {\n                id: 'viewFullscreen',\n                type: 'button',\n                langKey: 'viewFullscreen',\n                events: {\n                    click: function (e) {\n                        const fullScreen = this.menu.editMode.board.fullscreen;\n                        if (fullScreen) {\n                            fullScreen.toggle();\n                        }\n                    }\n                }\n            }\n        };\n\n        return MenuItemBindings;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/Menu.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/MenuItem.js'], _modules['Dashboards/EditMode/Menu/MenuItemBindings.js']], function (EditGlobals, U, MenuItem, MenuItemBindings) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, merge } = U;\n        class Menu {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(parentElement, options, editMode, parent) {\n                this.parentElement = parentElement;\n                this.isVisible = false;\n                this.activeItems = [];\n                this.options = options;\n                this.items = {};\n                this.editMode = editMode;\n                if (parent) {\n                    this.parent = parent;\n                }\n                this.container = this.setContainer();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            setContainer() {\n                return createElement('div', {\n                    className: EditGlobals.classNames.menu +\n                        ' ' + (this.options.className || '')\n                }, {}, this.parentElement);\n            }\n            // ItemsSchemas - default items definitions.\n            initItems(itemsSchemas, activeItems) {\n                const menu = this, optionsItems = menu.options.items || [];\n                let itemSchema, itemConfig, item, options;\n                for (let i = 0, iEnd = optionsItems.length; i < iEnd; ++i) {\n                    itemConfig = optionsItems[i];\n                    itemSchema =\n                        typeof itemConfig === 'string' ? itemsSchemas[itemConfig] :\n                            itemConfig.id ? itemsSchemas[itemConfig.id] :\n                                {};\n                    options = typeof itemConfig === 'string' ?\n                        merge(itemSchema, { id: itemConfig }) :\n                        merge(itemSchema, itemConfig);\n                    if (options.id) {\n                        item = new MenuItem(menu, options);\n                        // Save initialized item.\n                        menu.items[item.options.id] = item;\n                        if (activeItems) {\n                            item.activate();\n                            menu.activeItems.push(item);\n                        }\n                    }\n                    else {\n                        // Error - defined item needs an id.\n                    }\n                }\n            }\n            setActiveItems(items) {\n                const menu = this;\n                let item;\n                // Deactivate items.\n                for (let i = 0, iEnd = menu.activeItems.length; i < iEnd; ++i) {\n                    if (items.indexOf(menu.activeItems[i].options.id) === -1) {\n                        menu.activeItems[i].deactivate();\n                    }\n                }\n                menu.activeItems.length = 0;\n                for (let j = 0, jEnd = items.length; j < jEnd; ++j) {\n                    item = menu.items[items[j]];\n                    if (item) {\n                        // Activate item.\n                        if (!item.isActive) {\n                            item.activate();\n                        }\n                        else {\n                            item.update();\n                        }\n                        menu.activeItems.push(item);\n                    }\n                }\n            }\n            deactivateActiveItems() {\n                const menu = this;\n                for (let i = 0, iEnd = menu.activeItems.length; i < iEnd; ++i) {\n                    menu.activeItems[i].deactivate();\n                }\n            }\n            updateActiveItems() {\n                const activeItems = this.activeItems;\n                for (let i = 0, iEnd = activeItems.length; i < iEnd; ++i) {\n                    activeItems[i].update();\n                }\n            }\n            destroy() {\n                this.activeItems.length = 0;\n                this.container.remove();\n                this.items = {};\n                this.options = {};\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        Menu.items = MenuItemBindings;\n\n        return Menu;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/EditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/Menu.js']], function (U, Menu) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { defined, createElement, css } = U;\n        /**\n         * Abstract Class of Edit Toolbar.\n         * @internal\n         */\n        class EditToolbar {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode, options) {\n                this.container = createElement('div', {\n                    className: options.className\n                }, void 0, editMode.board.container);\n                this.editMode = editMode;\n                this.iconURLPrefix = editMode.iconsURLPrefix;\n                this.menu = new Menu(this.container, options.menu, editMode, this);\n                this.options = options;\n                this.isVisible = false;\n                if (this.options.outline) {\n                    this.outline = createElement('div', {\n                        className: options.outlineClassName\n                    }, void 0, this.container);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            hide() {\n                this.setPosition(void 0, void 0);\n            }\n            refreshOutline(x, y, guiElement, offset = 0) {\n                const toolbar = this, guiElemCnt = (guiElement || {}).container;\n                if (toolbar.outline && guiElemCnt) {\n                    css(toolbar.outline, {\n                        display: 'block',\n                        left: x - offset + 'px',\n                        top: y - offset + 'px',\n                        width: guiElemCnt.offsetWidth + offset * 2 + 'px',\n                        height: guiElemCnt.offsetHeight + offset * 2 + 'px'\n                    });\n                }\n            }\n            hideOutline() {\n                if (this.outline) {\n                    this.outline.style.display = 'none';\n                }\n            }\n            setPosition(x, y) {\n                const toolbar = this;\n                if (toolbar.container) {\n                    css(toolbar.container, {\n                        left: (x || '-9999') + 'px',\n                        top: (y || '-9999') + 'px'\n                    });\n                }\n                toolbar.isVisible = defined(x) && defined(y);\n            }\n        }\n\n        return EditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/GUIElement.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js']], function (U, Globals) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, uniqueKey, objectEach, error } = U;\n        class GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            // Get offsets of the guiElement relative to\n            // the referenceElement or the Viewport.\n            static getOffsets(guiElement, referenceElement) {\n                const offset = { left: 0, top: 0, right: 0, bottom: 0 };\n                if (guiElement.container) {\n                    const guiElementClientRect = guiElement.container.getBoundingClientRect();\n                    const referenceClientRect = referenceElement ?\n                        referenceElement.getBoundingClientRect() : { left: 0, top: 0 };\n                    offset.left = guiElementClientRect.left - referenceClientRect.left;\n                    offset.top = guiElementClientRect.top - referenceClientRect.top;\n                    offset.right =\n                        guiElementClientRect.right - referenceClientRect.left;\n                    offset.bottom =\n                        guiElementClientRect.bottom - referenceClientRect.top;\n                }\n                return offset;\n            }\n            // Get dimensions of the guiElement container from offsets.\n            static getDimFromOffsets(offsets) {\n                return {\n                    width: offsets.right - offsets.left,\n                    height: offsets.bottom - offsets.top\n                };\n            }\n            // Method for element id generation.\n            static createElementId(elementType // col, row, layout\n            ) {\n                return (Globals.classNamePrefix + elementType + '-' +\n                    uniqueKey().slice(11));\n            }\n            // Get width in percentages (0% - 100%).\n            static getPercentageWidth(width // supported formats '50%' or '1/2'\n            ) {\n                const fractionRegEx = /^([0-9]{1})[\\-\\/\\.]([0-9]{1,2})$/;\n                let result;\n                if (fractionRegEx.test(width)) {\n                    const match = width.match(fractionRegEx) || [], multiplier = +match[1], divider = +match[2];\n                    result = 100 * multiplier / divider;\n                    result = (result <= 100 ? result : 100) + '%';\n                }\n                else if (width.indexOf('%') !== -1) {\n                    const value = parseFloat(width);\n                    result = (value <= 100 ?\n                        (value >= 0 ? value : 0) : 100) + '%';\n                }\n                return result;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Create or get existing HTML element as a GUIElement container.\n             *\n             * @param {GUIElement.ContainerOptions} options\n             * Options.\n             */\n            getElementContainer(options) {\n                const guiElement = this;\n                let elem;\n                if (options.render) {\n                    if (options.attribs && !options.attribs.id) {\n                        delete options.attribs.id;\n                    }\n                }\n                else if (typeof options.elementId === 'string') {\n                    const div = document.getElementById(options.elementId);\n                    if (div) {\n                        guiElement.container = div;\n                    }\n                    else {\n                        error('Element ' + options.elementId + ' does not exist');\n                    }\n                }\n                if (options.element instanceof HTMLElement) {\n                    elem = options.element;\n                }\n                else {\n                    elem = createElement('div', options.attribs || {}, options.style || {}, options.parentContainer);\n                }\n                // Set bindedGUIElement event on GUIElement container.\n                guiElement.removeBindedEventFn = addEvent(elem, 'bindedGUIElement', function (e) {\n                    e.guiElement = guiElement;\n                    e.stopImmediatePropagation();\n                });\n                return elem;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and all properties.\n             */\n            destroy() {\n                const guiElement = this;\n                // Remove bindedGUIElement event.\n                if (guiElement.removeBindedEventFn) {\n                    guiElement.removeBindedEventFn();\n                }\n                // Remove HTML container.\n                if (guiElement.container && guiElement.container.parentNode) {\n                    guiElement.container.parentNode.removeChild(guiElement.container);\n                }\n                // Delete all properties.\n                objectEach(guiElement, function (val, key) {\n                    delete guiElement[key];\n                });\n            }\n            /**\n             * Return the GUIElement instance type.\n             * @return {GUIElement.GUIElementType|undefined}\n             * The GUIElement instance type\n             */\n            getType() {\n                return this.type;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const visibilityChanged = (this.isVisible && !setVisible ||\n                    !this.isVisible && setVisible);\n                if (this.container && visibilityChanged) {\n                    this.container.style.display = (setVisible ?\n                        (displayStyle || 'block') :\n                        'none');\n                    this.isVisible = setVisible;\n                }\n            }\n            hide() {\n                this.changeVisibility(false);\n            }\n            show() {\n                this.changeVisibility();\n            }\n        }\n\n        return GUIElement;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/CellEditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/Toolbar/EditToolbar.js'], _modules['Dashboards/Layout/GUIElement.js']], function (U, EditGlobals, EditToolbar, GUIElement) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, fireEvent, objectEach } = U;\n        /**\n         * @internal\n         */\n        class CellEditToolbar extends EditToolbar {\n            static getItemsConfig(options, iconURLPrefix) {\n                const items = [];\n                if (options.dragDrop?.enabled) {\n                    items.push({\n                        id: 'drag',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'drag.svg',\n                        events: {\n                            onmousedown: function (e) {\n                                const cellEditToolbar = this.menu\n                                    .parent;\n                                const dragDrop = cellEditToolbar.editMode.dragDrop;\n                                if (dragDrop && cellEditToolbar.cell) {\n                                    dragDrop.onDragStart(e, cellEditToolbar.cell);\n                                }\n                            }\n                        }\n                    });\n                }\n                if (options.settings?.enabled) {\n                    items.push({\n                        id: 'settings',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'settings.svg',\n                        events: {\n                            click: function (e) {\n                                this.menu.parent.editMode.setEditOverlay();\n                                this.menu.parent.onCellOptions();\n                            }\n                        }\n                    });\n                }\n                items.push({\n                    id: 'destroy',\n                    type: 'icon',\n                    className: EditGlobals.classNames.menuDestroy,\n                    icon: iconURLPrefix + 'destroy.svg',\n                    events: {\n                        click: function (e) {\n                            const parentNode = this.menu.parent, editMode = this.menu.parent.editMode, popup = editMode.confirmationPopup;\n                            popup.show({\n                                confirmButton: {\n                                    value: editMode.lang.confirmButton,\n                                    callback: parentNode.onCellDestroy,\n                                    context: parentNode\n                                },\n                                cancelButton: {\n                                    value: editMode.lang.cancelButton,\n                                    callback: () => {\n                                        popup.closePopup();\n                                    }\n                                },\n                                text: editMode.lang.confirmDestroyCell\n                            });\n                        }\n                    }\n                });\n                return items;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode) {\n                super(editMode, merge(CellEditToolbar.defaultOptions, (editMode.options.toolbars || {}).cell, {\n                    menu: {\n                        items: CellEditToolbar.getItemsConfig(editMode.options, editMode.iconsURLPrefix)\n                    }\n                }));\n                this.menu.initItems({});\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            showToolbar(cell) {\n                const toolbar = this, cellCnt = cell.container, toolbarWidth = 30, toolbarMargin = 10;\n                let x, y;\n                if (cellCnt &&\n                    toolbar.editMode.isActive() &&\n                    !(toolbar.editMode.dragDrop || {}).isActive) {\n                    const cellOffsets = GUIElement.getOffsets(cell, toolbar.editMode.board.container);\n                    x = cellOffsets.right - toolbarWidth - toolbarMargin;\n                    y = cellOffsets.top + toolbarMargin;\n                    // Temp - activate all items.\n                    objectEach(toolbar.menu.items, (item) => {\n                        item.activate();\n                    });\n                    toolbar.setPosition(x, y);\n                    toolbar.cell = cell;\n                    toolbar.refreshOutline();\n                }\n                else if (toolbar.isVisible) {\n                    toolbar.hide();\n                }\n            }\n            refreshOutline() {\n                const toolbar = this, offsetWidth = -1;\n                if (toolbar.cell && toolbar.cell.container && toolbar.outline) {\n                    super.refreshOutline(-toolbar.cell.container.offsetWidth, 0, this.cell, offsetWidth);\n                }\n            }\n            onCellOptions() {\n                const toolbar = this;\n                if (toolbar.editMode.sidebar) {\n                    toolbar.editMode.sidebar.show(toolbar.cell);\n                    if (this.cell) {\n                        this.cell.setHighlight();\n                    }\n                }\n            }\n            onCellDestroy() {\n                const toolbar = this;\n                if (toolbar.cell) {\n                    const row = toolbar.cell.row;\n                    toolbar.resetEditedCell();\n                    toolbar.cell.destroy();\n                    toolbar.cell = void 0;\n                    // Hide row and cell toolbars.\n                    toolbar.editMode.hideToolbars(['cell', 'row']);\n                    // Call cellResize dashboard event.\n                    if (row && row.cells && row.cells.length) {\n                        fireEvent(toolbar.editMode.board, 'cellResize', {\n                            cell: row.cells[0]\n                        });\n                        fireEvent(row, 'cellChange', { cell: row.cells[0], row });\n                    }\n                }\n            }\n            resetEditedCell() {\n                this.editedCell = void 0;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CellEditToolbar.defaultOptions = {\n            enabled: true,\n            className: EditGlobals.classNames.editToolbar,\n            outline: false,\n            outlineClassName: EditGlobals.classNames.editToolbarCellOutline,\n            menu: {\n                className: EditGlobals.classNames.editToolbarCell,\n                itemsClassName: EditGlobals.classNames.editToolbarItem,\n                items: []\n            }\n        };\n\n        return CellEditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/RowEditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/Toolbar/EditToolbar.js'], _modules['Dashboards/Layout/GUIElement.js']], function (U, EditGlobals, EditToolbar, GUIElement) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, objectEach } = U;\n        /**\n         * @internal\n         */\n        class RowEditToolbar extends EditToolbar {\n            static getMenuItemsConfig(options, iconURLPrefix) {\n                const items = [];\n                if (options.dragDrop?.enabled) {\n                    items.push({\n                        id: 'drag',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'drag.svg',\n                        events: {\n                            onmousedown: function (e) {\n                                const rowEditToolbar = this.menu\n                                    .parent, dragDrop = rowEditToolbar.editMode.dragDrop;\n                                if (dragDrop && rowEditToolbar.row) {\n                                    dragDrop.onDragStart(e, rowEditToolbar.row);\n                                }\n                            }\n                        }\n                    });\n                }\n                if (options.settings?.enabled) {\n                    items.push({\n                        id: 'settings',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'settings.svg',\n                        events: {\n                            click: function (e) {\n                                this.menu.parent.editMode.setEditOverlay();\n                                this.menu.parent.onRowOptions(e);\n                            }\n                        }\n                    });\n                }\n                items.push({\n                    id: 'destroy',\n                    type: 'icon',\n                    className: EditGlobals.classNames.menuDestroy,\n                    icon: iconURLPrefix + 'destroy.svg',\n                    events: {\n                        click: function (e) {\n                            const parentNode = this.menu.parent, editMode = this.menu.parent.editMode, popup = editMode.confirmationPopup;\n                            popup.show({\n                                confirmButton: {\n                                    value: editMode.lang.confirmButton,\n                                    callback: parentNode.onRowDestroy,\n                                    context: parentNode\n                                },\n                                cancelButton: {\n                                    value: editMode.lang.cancelButton,\n                                    callback: () => {\n                                        popup.closePopup();\n                                    }\n                                },\n                                text: editMode.lang.confirmDestroyRow\n                            });\n                        }\n                    }\n                });\n                return items;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode) {\n                super(editMode, merge(RowEditToolbar.defaultOptions, (editMode.options.toolbars || {}).row, {\n                    menu: {\n                        items: RowEditToolbar.getMenuItemsConfig(editMode.options, editMode.iconsURLPrefix)\n                    }\n                }));\n                this.menu.initItems({});\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            refreshOutline(x, y) {\n                const toolbar = this, offsetWidth = 2;\n                if (toolbar.row && toolbar.row.container) {\n                    super.refreshOutline(x, y, this.row, offsetWidth);\n                }\n            }\n            showToolbar(row) {\n                const toolbar = this, rowCnt = row.container;\n                let x, y, offsetX;\n                if (rowCnt &&\n                    toolbar.editMode.isActive() &&\n                    !(toolbar.editMode.dragDrop || {}).isActive) {\n                    const rowOffsets = GUIElement.getOffsets(row, toolbar.editMode.board.container);\n                    const rowWidth = rowOffsets.right - rowOffsets.left;\n                    // Temp - activate all items.\n                    objectEach(toolbar.menu.items, (item) => {\n                        item.activate();\n                    });\n                    offsetX = rowWidth / 2 - toolbar.container.clientWidth / 2;\n                    x = rowOffsets.left + offsetX;\n                    y = rowOffsets.top - toolbar.container.clientHeight;\n                    toolbar.setPosition(x, y);\n                    toolbar.row = row;\n                    toolbar.refreshOutline(-offsetX, toolbar.container.clientHeight);\n                }\n                else if (toolbar.isVisible) {\n                    toolbar.hide();\n                }\n            }\n            onRowOptions(e) {\n                const toolbar = this;\n                if (toolbar.editMode.sidebar) {\n                    toolbar.editMode.sidebar.show(toolbar.row);\n                    // toolbar.editMode.sidebar.updateTitle('ROW OPTIONS');\n                    // @ToDo - mask is buggy - should be refactored or removed.\n                    // if (this.row) {\n                    //     super.maskNotEditedElements(\n                    //         this.row,\n                    //         true\n                    //     );\n                    //     this.editedRow = this.row;\n                    // }\n                }\n            }\n            onRowDestroy(e) {\n                const toolbar = this;\n                if (toolbar.row) {\n                    this.resetEditedRow();\n                    toolbar.row.destroy();\n                    toolbar.row = void 0;\n                    // Hide row and cell toolbars.\n                    toolbar.editMode.hideToolbars(['cell', 'row']);\n                }\n            }\n            resetEditedRow() {\n                // super.resetCurrentElements(this.row as Row, true);\n                this.editedRow = void 0;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        RowEditToolbar.defaultOptions = {\n            enabled: true,\n            className: EditGlobals.classNames.editToolbar,\n            outline: true,\n            outlineClassName: EditGlobals.classNames.editToolbarRowOutline,\n            menu: {\n                className: EditGlobals.classNames.editToolbarRow,\n                itemsClassName: EditGlobals.classNames.editToolbarItem,\n                items: []\n            }\n        };\n\n        return RowEditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/AccordionMenu.js', [_modules['Dashboards/EditMode/EditRenderer.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js']], function (EditRenderer, U, EditGlobals) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *  - Sebastian Bochan\n         *\n         * */\n        const { createElement, merge, error } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Accordion menu class.\n         */\n        class AccordionMenu {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(iconsURLPrefix, closeSidebar) {\n                this.changedOptions = {};\n                this.chartOptionsJSON = {};\n                this.iconsURLPrefix = iconsURLPrefix;\n                this.closeSidebar = closeSidebar;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Renders the menu for given component.\n             *\n             * @param container\n             * The HTML Element to render the menu in.\n             * @param component\n             * The component to render the menu for.\n             */\n            renderContent(container, component) {\n                const menu = this;\n                const editableOptions = component.editableOptions.getOptions();\n                let option, content;\n                const accordionContainer = createElement('div', {\n                    className: EditGlobals.classNames.accordionMenu\n                }, {}, container);\n                for (let i = 0, end = editableOptions.length; i < end; i++) {\n                    option = editableOptions[i];\n                    content = EditRenderer.renderCollapseHeader(accordionContainer, {\n                        name: option.name,\n                        iconsURLPrefix: menu.iconsURLPrefix,\n                        lang: (component.board?.editMode || EditGlobals).lang\n                    }).content;\n                    this.renderAccordion(option, content, component);\n                }\n                const buttonContainer = createElement('div', {\n                    className: EditGlobals.classNames.accordionMenuButtonsContainer\n                }, {}, accordionContainer);\n                EditRenderer.renderButton(buttonContainer, {\n                    text: (component.board?.editMode || EditGlobals)\n                        .lang.confirmButton,\n                    className: EditGlobals.classNames.popupConfirmBtn,\n                    callback: () => {\n                        const changedOptions = this\n                            .changedOptions;\n                        component.update(merge(changedOptions, {\n                            chartOptions: this.chartOptionsJSON\n                        }));\n                        menu.changedOptions = {};\n                        menu.chartOptionsJSON = {};\n                        menu.closeSidebar();\n                    }\n                });\n                EditRenderer.renderButton(buttonContainer, {\n                    text: (component.board?.editMode || EditGlobals)\n                        .lang.cancelButton,\n                    className: EditGlobals.classNames.popupCancelBtn,\n                    callback: () => {\n                        menu.changedOptions = {};\n                        menu.chartOptionsJSON = {};\n                        menu.closeSidebar();\n                    }\n                });\n            }\n            /**\n             * Update the options object with new nested value, based on the property\n             * path. If the objects in the path are not defined, the function will\n             * create them.\n             *\n             * @param propertyPath\n             * Path of the property for which the value should be updated.\n             * Example: ```['chartOptions', 'chart', 'type']```\n             * @param value\n             * New value of the property.\n             */\n            updateOptions(propertyPath, value) {\n                const pathLength = propertyPath.length - 1;\n                let currentLevel = this.changedOptions;\n                if (pathLength === 0 && propertyPath[0] === 'chartOptions') {\n                    try {\n                        const parsedValue = JSON.parse(value);\n                        this.chartOptionsJSON = parsedValue;\n                    }\n                    catch (e) {\n                        // TODO: Handle the wrong config passed from the user.\n                        error('Dashboards Error: Wrong JSON config structure passed as' +\n                            ' a chart options.');\n                    }\n                }\n                for (let i = 0; i < pathLength; i++) {\n                    const key = propertyPath[i];\n                    if (!currentLevel[key]) {\n                        currentLevel[key] = {};\n                    }\n                    currentLevel = currentLevel[key];\n                }\n                currentLevel[propertyPath[pathLength]] = value;\n            }\n            /**\n             * Renders either a basic or nested element. This function can be recursivly\n             * called, if there are multiple nested options.\n             *\n             * @param options\n             * Configuration object of the Component options.\n             * @param parentNode\n             * A container where the accordion is rendered.\n             * @param component\n             * the component for which the menu should be rendered.\n             */\n            renderAccordion(options, parentNode, component) {\n                if (options.type === 'nested') {\n                    return this.renderNested(parentNode, options, component);\n                }\n                const renderFunction = EditRenderer.getRendererFunction(options.type);\n                if (!renderFunction) {\n                    return;\n                }\n                renderFunction(parentNode, {\n                    ...options,\n                    iconsURLPrefix: this.iconsURLPrefix,\n                    value: component.getEditableOptionValue(options.propertyPath),\n                    onchange: (value) => this.updateOptions(options.propertyPath || [], value)\n                });\n            }\n            /**\n             * Render nested menu for the component.\n             *\n             * @param parentElement\n             * HTML element to which the nested structure should be rendered to\n             * @param options\n             * configuration object for the options\n             * @param component\n             * The component instance for the options should be rendered\n             */\n            renderNested(parentElement, options, component) {\n                if (!parentElement || !options.nestedOptions) {\n                    return;\n                }\n                const nestedOptions = options.nestedOptions;\n                for (let i = 0, iEnd = nestedOptions.length; i < iEnd; ++i) {\n                    const name = nestedOptions[i].name;\n                    const accordionOptions = nestedOptions[i].options;\n                    const showToggle = !!nestedOptions[i].showToggle;\n                    const propertyPath = nestedOptions[i].propertyPath || [];\n                    const collapsedHeader = EditRenderer.renderCollapseHeader(parentElement, {\n                        name,\n                        isEnabled: !!component.getEditableOptionValue(propertyPath),\n                        iconsURLPrefix: this.iconsURLPrefix,\n                        showToggle: showToggle,\n                        onchange: (value) => this.updateOptions(propertyPath, value),\n                        isNested: true,\n                        lang: (component.board?.editMode || EditGlobals).lang\n                    });\n                    for (let j = 0, jEnd = accordionOptions.length; j < jEnd; ++j) {\n                        this.renderAccordion(accordionOptions[j], collapsedHeader.content, component);\n                    }\n                }\n                return;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AccordionMenu;\n    });\n    _registerModule(_modules, 'Core/Renderer/HTML/AST.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2020 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { SVG_NS, win } = H;\n        const { attr, createElement, css, error, isFunction, isString, objectEach, splat } = U;\n        const { trustedTypes } = win;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // Create the trusted type policy. This should not be exposed.\n        const trustedTypesPolicy = (trustedTypes &&\n            isFunction(trustedTypes.createPolicy) &&\n            trustedTypes.createPolicy('highcharts', {\n                createHTML: (s) => s\n            }));\n        const emptyHTML = trustedTypesPolicy ?\n            trustedTypesPolicy.createHTML('') :\n            '';\n        // IE9 and PhantomJS are only able to parse XML.\n        const hasValidDOMParser = (function () {\n            try {\n                return Boolean(new DOMParser().parseFromString(emptyHTML, 'text/html'));\n            }\n            catch (e) {\n                return false;\n            }\n        }());\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AST class represents an abstract syntax tree of HTML or SVG content. It\n         * can take HTML as an argument, parse it, optionally transform it to SVG, then\n         * perform sanitation before inserting it into the DOM.\n         *\n         * @class\n         * @name Highcharts.AST\n         *\n         * @param {string|Array<Highcharts.ASTNode>} source\n         * Either an HTML string or an ASTNode list to populate the tree.\n         */\n        class AST {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Filter an object of SVG or HTML attributes against the allow list.\n             *\n             * @static\n             *\n             * @function Highcharts.AST#filterUserAttributes\n             *\n             * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The filtered attributes\n             */\n            static filterUserAttributes(attributes) {\n                objectEach(attributes, (val, key) => {\n                    let valid = true;\n                    if (AST.allowedAttributes.indexOf(key) === -1) {\n                        valid = false;\n                    }\n                    if (['background', 'dynsrc', 'href', 'lowsrc', 'src']\n                        .indexOf(key) !== -1) {\n                        valid = isString(val) && AST.allowedReferences.some((ref) => val.indexOf(ref) === 0);\n                    }\n                    if (!valid) {\n                        error(33, false, void 0, {\n                            'Invalid attribute in config': `${key}`\n                        });\n                        delete attributes[key];\n                    }\n                    // #17753, < is not allowed in SVG attributes\n                    if (isString(val) && attributes[key]) {\n                        attributes[key] = val.replace(/</g, '&lt;');\n                    }\n                });\n                return attributes;\n            }\n            static parseStyle(style) {\n                return style\n                    .split(';')\n                    .reduce((styles, line) => {\n                    const pair = line.split(':').map((s) => s.trim()), key = pair.shift();\n                    if (key && pair.length) {\n                        styles[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = pair.join(':'); // #17146\n                    }\n                    return styles;\n                }, {});\n            }\n            /**\n             * Utility function to set html content for an element by passing in a\n             * markup string. The markup is safely parsed by the AST class to avoid\n             * XSS vulnerabilities. This function should be used instead of setting\n             * `innerHTML` in all cases where the content is not fully trusted.\n             *\n             * @static\n             * @function Highcharts.AST#setElementHTML\n             *\n             * @param {SVGDOMElement|HTMLDOMElement} el\n             * Node to set content of.\n             *\n             * @param {string} html\n             * Markup string\n             */\n            static setElementHTML(el, html) {\n                el.innerHTML = AST.emptyHTML; // Clear previous\n                if (html) {\n                    const ast = new AST(html);\n                    ast.addToDOM(el);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n            constructor(source) {\n                this.nodes = typeof source === 'string' ?\n                    this.parseMarkup(source) : source;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add the tree defined as a hierarchical JS structure to the DOM\n             *\n             * @function Highcharts.AST#addToDOM\n             *\n             * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n             * The node where it should be added\n             *\n             * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n             * The inserted node.\n             */\n            addToDOM(parent) {\n                /**\n                 * @private\n                 * @param {Highcharts.ASTNode} subtree\n                 * HTML/SVG definition\n                 * @param {Element} [subParent]\n                 * parent node\n                 * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n                 * The inserted node.\n                 */\n                function recurse(subtree, subParent) {\n                    let ret;\n                    splat(subtree).forEach(function (item) {\n                        const tagName = item.tagName;\n                        const textNode = item.textContent ?\n                            H.doc.createTextNode(item.textContent) :\n                            void 0;\n                        // Whether to ignore the AST filtering totally, #15345\n                        const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n                        let node;\n                        if (tagName) {\n                            if (tagName === '#text') {\n                                node = textNode;\n                            }\n                            else if (AST.allowedTags.indexOf(tagName) !== -1 ||\n                                bypassHTMLFiltering) {\n                                const NS = tagName === 'svg' ?\n                                    SVG_NS :\n                                    (subParent.namespaceURI || SVG_NS);\n                                const element = H.doc.createElementNS(NS, tagName);\n                                const attributes = item.attributes || {};\n                                // Apply attributes from root of AST node, legacy from\n                                // from before TextBuilder\n                                objectEach(item, function (val, key) {\n                                    if (key !== 'tagName' &&\n                                        key !== 'attributes' &&\n                                        key !== 'children' &&\n                                        key !== 'style' &&\n                                        key !== 'textContent') {\n                                        attributes[key] = val;\n                                    }\n                                });\n                                attr(element, bypassHTMLFiltering ?\n                                    attributes :\n                                    AST.filterUserAttributes(attributes));\n                                if (item.style) {\n                                    css(element, item.style);\n                                }\n                                // Add text content\n                                if (textNode) {\n                                    element.appendChild(textNode);\n                                }\n                                // Recurse\n                                recurse(item.children || [], element);\n                                node = element;\n                            }\n                            else {\n                                error(33, false, void 0, {\n                                    'Invalid tagName in config': tagName\n                                });\n                            }\n                        }\n                        // Add to the tree\n                        if (node) {\n                            subParent.appendChild(node);\n                        }\n                        ret = node;\n                    });\n                    // Return last node added (on top level it's the only one)\n                    return ret;\n                }\n                return recurse(this.nodes, parent);\n            }\n            /**\n             * Parse HTML/SVG markup into AST Node objects. Used internally from the\n             * constructor.\n             *\n             * @private\n             *\n             * @function Highcharts.AST#getNodesFromMarkup\n             *\n             * @param {string} markup The markup string.\n             *\n             * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n             */\n            parseMarkup(markup) {\n                const nodes = [];\n                markup = markup\n                    .trim()\n                    // The style attribute throws a warning when parsing when CSP is\n                    // enabled (#6884), so use an alias and pick it up below\n                    // Make all quotation marks parse correctly to DOM (#17627)\n                    .replace(/ style=([\"'])/g, ' data-style=$1');\n                let doc;\n                if (hasValidDOMParser) {\n                    doc = new DOMParser().parseFromString(trustedTypesPolicy ?\n                        trustedTypesPolicy.createHTML(markup) :\n                        markup, 'text/html');\n                }\n                else {\n                    const body = createElement('div');\n                    body.innerHTML = markup;\n                    doc = { body };\n                }\n                const appendChildNodes = (node, addTo) => {\n                    const tagName = node.nodeName.toLowerCase();\n                    // Add allowed tags\n                    const astNode = {\n                        tagName\n                    };\n                    if (tagName === '#text') {\n                        astNode.textContent = node.textContent || '';\n                    }\n                    const parsedAttributes = node.attributes;\n                    // Add attributes\n                    if (parsedAttributes) {\n                        const attributes = {};\n                        [].forEach.call(parsedAttributes, (attrib) => {\n                            if (attrib.name === 'data-style') {\n                                astNode.style = AST.parseStyle(attrib.value);\n                            }\n                            else {\n                                attributes[attrib.name] = attrib.value;\n                            }\n                        });\n                        astNode.attributes = attributes;\n                    }\n                    // Handle children\n                    if (node.childNodes.length) {\n                        const children = [];\n                        [].forEach.call(node.childNodes, (childNode) => {\n                            appendChildNodes(childNode, children);\n                        });\n                        if (children.length) {\n                            astNode.children = children;\n                        }\n                    }\n                    addTo.push(astNode);\n                };\n                [].forEach.call(doc.body.childNodes, (childNode) => appendChildNodes(childNode, nodes));\n                return nodes;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * The list of allowed SVG or HTML attributes, used for sanitizing\n         * potentially harmful content from the chart configuration before adding to\n         * the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n         *\n         * @example\n         * // Allow a custom, trusted attribute\n         * Highcharts.AST.allowedAttributes.push('data-value');\n         *\n         * @name Highcharts.AST.allowedAttributes\n         * @type {Array<string>}\n         */\n        AST.allowedAttributes = [\n            'alt',\n            'aria-controls',\n            'aria-describedby',\n            'aria-expanded',\n            'aria-haspopup',\n            'aria-hidden',\n            'aria-label',\n            'aria-labelledby',\n            'aria-live',\n            'aria-pressed',\n            'aria-readonly',\n            'aria-roledescription',\n            'aria-selected',\n            'class',\n            'clip-path',\n            'color',\n            'colspan',\n            'cx',\n            'cy',\n            'd',\n            'dx',\n            'dy',\n            'disabled',\n            'fill',\n            'filterUnits',\n            'flood-color',\n            'flood-opacity',\n            'height',\n            'href',\n            'id',\n            'in',\n            'markerHeight',\n            'markerWidth',\n            'offset',\n            'opacity',\n            'orient',\n            'padding',\n            'paddingLeft',\n            'paddingRight',\n            'patternUnits',\n            'r',\n            'refX',\n            'refY',\n            'role',\n            'scope',\n            'slope',\n            'src',\n            'startOffset',\n            'stdDeviation',\n            'stroke',\n            'stroke-linecap',\n            'stroke-width',\n            'style',\n            'tableValues',\n            'result',\n            'rowspan',\n            'summary',\n            'target',\n            'tabindex',\n            'text-align',\n            'text-anchor',\n            'textAnchor',\n            'textLength',\n            'title',\n            'type',\n            'valign',\n            'width',\n            'x',\n            'x1',\n            'x2',\n            'xlink:href',\n            'y',\n            'y1',\n            'y2',\n            'zIndex'\n        ];\n        /**\n         * The list of allowed references for referring attributes like `href` and\n         * `src`. Attribute values will only be allowed if they start with one of\n         * these strings.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n         *\n         * @example\n         * // Allow tel:\n         * Highcharts.AST.allowedReferences.push('tel:');\n         *\n         * @name    Highcharts.AST.allowedReferences\n         * @type    {Array<string>}\n         */\n        AST.allowedReferences = [\n            'https://',\n            'http://',\n            'mailto:',\n            '/',\n            '../',\n            './',\n            '#'\n        ];\n        /**\n         * The list of allowed SVG or HTML tags, used for sanitizing potentially\n         * harmful content from the chart configuration before adding to the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n         *\n         * @example\n         * // Allow a custom, trusted tag\n         * Highcharts.AST.allowedTags.push('blink'); // ;)\n         *\n         * @name    Highcharts.AST.allowedTags\n         * @type    {Array<string>}\n         */\n        AST.allowedTags = [\n            'a',\n            'abbr',\n            'b',\n            'br',\n            'button',\n            'caption',\n            'circle',\n            'clipPath',\n            'code',\n            'dd',\n            'defs',\n            'div',\n            'dl',\n            'dt',\n            'em',\n            'feComponentTransfer',\n            'feDropShadow',\n            'feFuncA',\n            'feFuncB',\n            'feFuncG',\n            'feFuncR',\n            'feGaussianBlur',\n            'feOffset',\n            'feMerge',\n            'feMergeNode',\n            'filter',\n            'h1',\n            'h2',\n            'h3',\n            'h4',\n            'h5',\n            'h6',\n            'hr',\n            'i',\n            'img',\n            'li',\n            'linearGradient',\n            'marker',\n            'ol',\n            'p',\n            'path',\n            'pattern',\n            'pre',\n            'rect',\n            'small',\n            'span',\n            'stop',\n            'strong',\n            'style',\n            'sub',\n            'sup',\n            'svg',\n            'table',\n            'text',\n            'textPath',\n            'thead',\n            'title',\n            'tbody',\n            'tspan',\n            'td',\n            'th',\n            'tr',\n            'u',\n            'ul',\n            '#text'\n        ];\n        AST.emptyHTML = emptyHTML;\n        /**\n         * Allow all custom SVG and HTML attributes, references and tags (together\n         * with potentially harmful ones) to be added to the DOM from the chart\n         * configuration. In other words, disable the the allow-listing which is the\n         * primary functionality of the AST.\n         *\n         * WARNING: Setting this property to `true` while allowing untrusted user\n         * data in the chart configuration will expose your application to XSS\n         * security risks!\n         *\n         * Note that in case you want to allow a known set of tags or attributes,\n         * you should allow-list them instead of disabling the filtering totally.\n         * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n         * [allowedReferences](Highcharts.AST#.allowedReferences) and\n         * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n         * setting is intended only for those cases where allow-listing is not\n         * practical, and the chart configuration already comes from a secure\n         * source.\n         *\n         * @example\n         * // Allow all custom attributes, references and tags (disable DOM XSS\n         * // filtering)\n         * Highcharts.AST.bypassHTMLFiltering = true;\n         *\n         * @name Highcharts.AST.bypassHTMLFiltering\n         * @static\n         */\n        AST.bypassHTMLFiltering = false;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Serialized form of an SVG/HTML definition, including children.\n         *\n         * @interface Highcharts.ASTNode\n         */ /**\n        * @name Highcharts.ASTNode#attributes\n        * @type {Highcharts.SVGAttributes|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#children\n        * @type {Array<Highcharts.ASTNode>|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#tagName\n        * @type {string|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#textContent\n        * @type {string|undefined}\n        */\n        (''); // keeps doclets above in file\n\n        return AST;\n    });\n    _registerModule(_modules, 'Shared/BaseForm.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (AST, U) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { addEvent, createElement } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentDiv, iconsURL) {\n                this.iconsURL = iconsURL;\n                this.container = this.createPopupContainer(parentDiv);\n                this.closeButton = this.addCloseButton();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create popup div container.\n             *\n             * @param {HTMLElement} parentDiv\n             * Parent div to attach popup.\n             *\n             * @param  {string} className\n             * Class name of the popup.\n             *\n             * @return {HTMLElement}\n             * Popup div.\n             */\n            createPopupContainer(parentDiv, className = 'highcharts-popup highcharts-no-tooltip') {\n                return createElement('div', { className }, void 0, parentDiv);\n            }\n            /**\n             * Create HTML element and attach click event to close popup.\n             *\n             * @param {string} className\n             * Class name of the close button.\n             *\n             * @return {HTMLElement}\n             * Close button.\n             */\n            addCloseButton(className = 'highcharts-popup-close') {\n                const popup = this, iconsURL = this.iconsURL;\n                // Create close popup button.\n                const closeButton = createElement('div', { className }, void 0, this.container);\n                closeButton.style['background-image'] = 'url(' +\n                    (iconsURL.match(/png|svg|jpeg|jpg|gif/ig) ?\n                        iconsURL : iconsURL + 'close.svg') + ')';\n                ['click', 'touchstart'].forEach((eventName) => {\n                    addEvent(closeButton, eventName, popup.closeButtonEvents.bind(popup));\n                });\n                // close popup when press ESC\n                addEvent(document, 'keydown', function (event) {\n                    if (event.code === 'Escape') {\n                        popup.closeButtonEvents();\n                    }\n                });\n                return closeButton;\n            }\n            /**\n             * Close button events.\n             * @return {void}\n             */\n            closeButtonEvents() {\n                this.closePopup();\n            }\n            /**\n             * Reset content of the current popup and show.\n             *\n             * @param {string} toolbarClass\n             * Class name of the toolbar which styles should be reset.\n             */\n            showPopup(toolbarClass = 'highcharts-annotation-toolbar') {\n                const popupDiv = this.container, popupCloseButton = this.closeButton;\n                this.type = void 0;\n                // Reset content.\n                popupDiv.innerHTML = AST.emptyHTML;\n                // Reset toolbar styles if exists.\n                if (popupDiv.className.indexOf(toolbarClass) >= 0) {\n                    popupDiv.classList.remove(toolbarClass);\n                    // reset toolbar inline styles\n                    popupDiv.removeAttribute('style');\n                }\n                // Add close button.\n                popupDiv.appendChild(popupCloseButton);\n                popupDiv.style.display = 'block';\n                popupDiv.style.height = '';\n            }\n            /**\n             * Hide popup.\n             */\n            closePopup() {\n                this.container.style.display = 'none';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BaseForm;\n    });\n    _registerModule(_modules, 'Dashboards/Utilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { isClass, isDOMElement, isObject, objectEach, uniqueKey: coreUniqueKey } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {boolean} extend\n         *        Whether to extend the left-side object (a) or return a whole new\n         *        object.\n         *\n         * @param {T|undefined} a\n         *        The first object to extend. When only this is given, the function\n         *        returns a deep copy.\n         *\n         * @param {...Array<object|undefined>} [n]\n         *        An object to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */ /**\n        * Utility function to deep merge two or more objects and return a third object.\n        * The merge function can also be used with a single object argument to create a\n        * deep copy of an object.\n        *\n        * @function Highcharts.merge<T>\n        *\n        * @param {T|undefined} a\n        *        The first object to extend. When only this is given, the function\n        *        returns a deep copy.\n        *\n        * @param {...Array<object|undefined>} [n]\n        *        An object to merge into the previous one.\n        *\n        * @return {T}\n        *         The merged object. If the first argument is true, the return is the\n        *         same as the second argument.\n        */\n        function merge() {\n            /* eslint-enable valid-jsdoc */\n            let i, args = arguments, copyDepth = 0, ret = {};\n            // describtive error stack:\n            const copyDepthError = new Error('Recursive copy depth > 100'), doCopy = (copy, original) => {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                if (++copyDepth > 100) {\n                    throw copyDepthError;\n                }\n                objectEach(original, (value, key) => {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                --copyDepth;\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (args[0] === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Creates a session-dependent unique key string for reference purposes.\n         *\n         * @function Dashboards.uniqueKey\n         *\n         * @return {string}\n         * Unique key string\n         */\n        function uniqueKey() {\n            return `dashboard-${coreUniqueKey().replace('highcharts-', '')}`;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Utilities = {\n            merge,\n            uniqueKey\n        };\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Cell.js', [_modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (Bindings, EditGlobals, Globals, GUIElement, U) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { componentFromJSON } = Bindings;\n        const { merge, fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @internal\n         **/\n        class Cell extends GUIElement {\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /** @internal */\n            static fromJSON(json, row) {\n                if (row) {\n                    const options = json.options;\n                    let id = options.containerId;\n                    if (row.layout.copyId) {\n                        id = id + '_' + row.layout.copyId;\n                    }\n                    return new Cell(row, {\n                        id: id,\n                        parentContainerId: (row.container && row.container.id) ||\n                            options.parentContainerId,\n                        mountedComponentJSON: options.mountedComponentJSON,\n                        style: options.style,\n                        layoutJSON: options.layoutJSON,\n                        width: options.width,\n                        height: options.height\n                    });\n                }\n                return void 0;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the Cell class.\n             *\n             * @param {Row} row\n             * Reference to the row instance.\n             *\n             * @param {Cell.Options} options\n             * Options for the cell.\n             *\n             * @param {HTMLElement} cellElement\n             * The container of the cell HTML element.\n             */\n            constructor(row, options, cellElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.cell;\n                this.id = options.id;\n                this.options = options;\n                this.row = row;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    row.container;\n                const layoutOptions = row.layout.options || {}, rowOptions = row.options || {}, cellClassName = layoutOptions.cellClassName || '';\n                let cellHeight;\n                if (options.height) {\n                    if (typeof options.height === 'number') {\n                        cellHeight = options.height + 'px';\n                    }\n                    else {\n                        cellHeight = options.height;\n                    }\n                }\n                this.container = this.getElementContainer({\n                    render: row.layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.cell + ' ' +\n                            cellClassName\n                    },\n                    element: cellElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, rowOptions.style, options.style, {\n                        height: cellHeight\n                    })\n                });\n                // Set cell width respecting responsive options.\n                this.reflow();\n                // Mount component from JSON.\n                if (this.options.mountedComponentJSON) {\n                    this.mountComponentFromJSON(this.options.mountedComponentJSON, this.container);\n                }\n                // nested layout\n                if (this.options.layout) {\n                    this.setNestedLayout();\n                }\n                if (this.options.layoutJSON) {\n                    const layout = this.row.layout, board = layout.board, layoutFromJSON = layout.constructor.fromJSON;\n                    this.nestedLayout = layoutFromJSON(merge(this.options.layoutJSON, {\n                        parentContainerId: this.options.id\n                    }), board, this);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create a nested layout in the cell and assign it to the nestedCell\n             * property.\n             * @internal\n             */\n            setNestedLayout() {\n                const board = this.row.layout.board, Layout = this.row.layout.constructor;\n                const optionsGui = board.options.gui;\n                this.nestedLayout = new Layout(board, merge({}, optionsGui && optionsGui.layoutOptions, this.options.layout, {\n                    parentContainerId: this.options.id\n                }), this);\n            }\n            /**\n             * Mount component from JSON.\n             * @internal\n             *\n             * @param {Component.JSON} [json]\n             * Component JSON.\n             *\n             * @param {HTMLDOMElement} [cellContainer]\n             * Cell container\n             *\n             * @return {boolean}\n             * Returns true, if the component created from JSON is mounted,\n             * otherwise false.\n             */\n            mountComponentFromJSON(json, cellContainer // @todo\n            ) {\n                const cell = this;\n                if (cell.id !== json.options.parentElement) {\n                    json.options.parentElement = cell.id;\n                }\n                const component = componentFromJSON(json, cellContainer);\n                if (component) {\n                    cell.mountedComponent = component;\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and mounted component.\n             */\n            destroy() {\n                const cell = this;\n                const { row } = cell;\n                // Destroy mounted component.\n                if (cell.mountedComponent) {\n                    cell.mountedComponent.destroy();\n                }\n                row.unmountCell(cell);\n                const destroyRow = row.cells.length === 0;\n                super.destroy();\n                if (destroyRow) {\n                    row.destroy();\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Cell.JSON}\n             * Class JSON of this Cell instance.\n             */\n            toJSON() {\n                const cell = this, rowContainerId = (cell.row.container || {}).id || '';\n                return {\n                    $class: 'Dashboards.Layout.Cell',\n                    options: {\n                        containerId: cell.container.id,\n                        parentContainerId: rowContainerId,\n                        width: cell.options.width,\n                        height: cell.options.height,\n                        mountedComponentJSON: cell.mountedComponent && cell.mountedComponent.toJSON(),\n                        style: cell.options.style,\n                        layoutJSON: cell.nestedLayout && cell.nestedLayout.toJSON()\n                    }\n                };\n            }\n            /**\n             * Get the cell's options.\n             * @returns\n             * The JSON of cell's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return this.options;\n            }\n            changeVisibility(setVisible = true) {\n                super.changeVisibility(setVisible);\n                const cell = this, row = cell.row;\n                // Change row visibility if needed.\n                if (!cell.row.getVisibleCells().length) {\n                    cell.row.hide();\n                }\n                else if (cell.isVisible && !row.isVisible) {\n                    cell.row.show();\n                }\n                setTimeout(() => {\n                    fireEvent(row, 'cellChange', { row, cell });\n                }, 0);\n            }\n            getParentCell(level) {\n                const cell = this;\n                let parentCell;\n                if (level <= cell.row.layout.level) {\n                    if (cell.row.layout.level === level) {\n                        return cell;\n                    }\n                    if (cell.row.layout.level - 1 >= 0) {\n                        parentCell = cell.row.layout.parentCell;\n                        if (parentCell) {\n                            return parentCell.getParentCell(level);\n                        }\n                    }\n                }\n            }\n            // Method to get array of overlapping levels.\n            getOverlappingLevels(align, // left, right, top, bottom\n            levelMaxGap, // max distance between levels\n            offset // analized cell offset\n            ) {\n                const cell = this, parentCell = cell.row.layout.parentCell;\n                let levels = [cell.row.layout.level];\n                if (parentCell) {\n                    const cellOffset = offset || GUIElement.getOffsets(cell)[align];\n                    const parentCellOffset = GUIElement.getOffsets(parentCell)[align];\n                    if (Math.abs(cellOffset - parentCellOffset) < levelMaxGap) {\n                        levels = [\n                            ...levels,\n                            ...parentCell.getOverlappingLevels(align, levelMaxGap, parentCellOffset)\n                        ];\n                    }\n                }\n                return levels;\n            }\n            reflow(dashContainerSize) {\n                const cell = this, cntSize = dashContainerSize ||\n                    cell.row.layout.board.getLayoutContainerSize(), respoOptions = cell.options.responsive, optWidth = cell.options.width;\n                if (cell.container) {\n                    let width = '';\n                    if (respoOptions &&\n                        respoOptions[cntSize] &&\n                        respoOptions[cntSize].width) {\n                        width = cell.convertWidthToValue(respoOptions[cntSize].width);\n                    }\n                    else if (optWidth) {\n                        width = cell.convertWidthToValue(optWidth);\n                    }\n                    cell.setSize(width || 'auto');\n                }\n            }\n            /**\n             * Set cell size.\n             *\n             * @param width\n             * % value or 'auto' or px\n             *\n             * @param height\n             * value in px\n             */\n            setSize(width, height) {\n                const cell = this, editMode = cell.row.layout.board.editMode;\n                if (cell.container) {\n                    if (width) {\n                        if (width === 'auto' &&\n                            cell.container.style.flex !== '1 1 0%') {\n                            cell.container.style.flex = '1 1 0%';\n                        }\n                        else {\n                            const cellWidth = cell.convertWidthToValue(width);\n                            if (cellWidth &&\n                                cell.container.style.flex !== '0 0 ' + cellWidth) {\n                                cell.container.style.flex = '0 0 ' + cellWidth;\n                            }\n                            cell.options.width = cellWidth;\n                        }\n                    }\n                    if (height) {\n                        cell.options.height = cell.container.style.height =\n                            height + 'px';\n                    }\n                    if (editMode) {\n                        editMode.hideContextPointer();\n                        if (editMode.cellToolbar &&\n                            editMode.cellToolbar.isVisible) {\n                            if (editMode.cellToolbar.cell === cell) {\n                                editMode.cellToolbar.showToolbar(cell);\n                            }\n                            else {\n                                editMode.cellToolbar.hide();\n                            }\n                        }\n                    }\n                    // Call cellResize board event.\n                    fireEvent(cell.row.layout.board, 'cellResize', { cell: cell });\n                    fireEvent(cell.row, 'cellChange', { cell: cell, row: cell.row });\n                }\n            }\n            // Updates width in responsive options.\n            updateSize(width, // % value or 'auto' or px\n            rwdMode // small, medium, large\n            ) {\n                const cell = this, cntSize = rwdMode ||\n                    cell.row.layout.board.getLayoutContainerSize();\n                if (!cell.options.responsive) {\n                    cell.options.responsive = {};\n                }\n                cell.options.responsive[cntSize] = {\n                    width: width\n                };\n            }\n            setHighlight(remove) {\n                const cell = this, editMode = cell.row.layout.board.editMode;\n                if (cell.container && editMode) {\n                    const cnt = cell.container, isSet = cnt.classList.contains(EditGlobals.classNames.cellEditHighlight);\n                    if (!remove && !isSet) {\n                        cnt.classList.add(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.add(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = true;\n                    }\n                    else if (remove && isSet) {\n                        cnt.classList.remove(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.remove(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = false;\n                    }\n                }\n            }\n            setActiveState() {\n                // reset other boxes\n                const cell = this;\n                cell.row.layout.board.mountedComponents.forEach((mountedComponent) => {\n                    if (mountedComponent.cell.container) {\n                        mountedComponent.cell.container.classList.remove(Globals.classNames.cellActive);\n                    }\n                });\n                // apply class\n                if (cell.container) {\n                    cell.container.classList.add(Globals.classNames.cellActive);\n                }\n            }\n            /**\n             * Enables or disables the loading indicator in the cell.\n             *\n             * @internal\n             */\n            setLoadingState(enabled = true) {\n                this.container?.classList?.toggle(Globals.classNames.cellLoading, enabled);\n            }\n            convertWidthToValue(width) {\n                if (typeof width === 'number') {\n                    return width + 'px';\n                }\n                if (/px/.test(width)) {\n                    return width;\n                }\n                return GUIElement.getPercentageWidth(width) || '';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Cell;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Row.js', [_modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js']], function (Globals, Cell, GUIElement, U, EditGlobals) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { pick, defined, merge, objectEach, fireEvent } = U;\n        /**\n         * @internal\n         **/\n        class Row extends GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /** @internal */\n            static fromJSON(json, layout) {\n                if (layout) {\n                    const options = json.options;\n                    let id = options.containerId || '';\n                    if (id && layout.copyId) {\n                        id = id + '_' + layout.copyId;\n                    }\n                    return new Row(layout, {\n                        id: id,\n                        parentContainerId: (layout.container && layout.container.id) ||\n                            options.parentContainerId,\n                        cellsJSON: options.cells,\n                        style: options.style\n                    });\n                }\n                return void 0;\n            }\n            static setContainerHeight(rowContainer, height) {\n                if (height) {\n                    rowContainer.style.height = height + 'px';\n                }\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Row class.\n             *\n             * @param {Layout} layout\n             * Reference to the layout instance.\n             *\n             * @param {Row.Options} options\n             * Options for the row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container of the row HTML element.\n             */\n            constructor(layout, options, rowElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.row;\n                this.layout = layout;\n                this.cells = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    layout.container;\n                const layoutOptions = (layout.options || {}), rowClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.row + ' ' +\n                            rowClassName\n                    },\n                    element: rowElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, options.style)\n                });\n                // Init rows from options.\n                if (this.options.cells) {\n                    this.setCells();\n                }\n                // Init rows from JSON.\n                if (options.cellsJSON && !this.cells.length) {\n                    this.setCellsFromJSON(options.cellsJSON);\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the row cells using cell options or cellClassName.\n             */\n            setCells() {\n                const row = this, cellClassName = (row.layout.options || {}).cellClassName || '', cellsElements = pick(row.options.cells, row.container && row.container.getElementsByClassName(cellClassName)) || [];\n                let cellElement, i, iEnd;\n                for (i = 0, iEnd = cellsElements.length; i < iEnd; ++i) {\n                    cellElement = cellsElements[i];\n                    row.addCell(row.layout.board.guiEnabled ? cellElement : { id: '' }, cellElement instanceof HTMLElement ? cellElement : void 0);\n                }\n            }\n            /** @internal */\n            setCellsFromJSON(json) {\n                const row = this, componentsToMount = [];\n                let cell, cellJSON;\n                // Set cells.\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    cellJSON = json[i];\n                    cell = Cell.fromJSON({\n                        $class: cellJSON.$class,\n                        options: {\n                            containerId: cellJSON.options.containerId,\n                            parentContainerId: cellJSON.options.parentContainerId,\n                            width: cellJSON.options.width,\n                            height: cellJSON.options.height,\n                            style: cellJSON.options.style,\n                            layoutJSON: cellJSON.options.layoutJSON,\n                            mountedComponentJSON: void 0 // Will be mounted later.\n                        }\n                    }, row);\n                    if (cell) {\n                        row.cells.push(cell);\n                        if (cellJSON.options.mountedComponentJSON) {\n                            componentsToMount.push({\n                                cell: cell,\n                                // eslint-disable-next-line\n                                mountedComponentJSON: cellJSON.options.mountedComponentJSON\n                            });\n                        }\n                    }\n                }\n                // Mount components.\n                for (let i = 0, iEnd = componentsToMount.length; i < iEnd; ++i) {\n                    componentsToMount[i].cell.mountComponentFromJSON(componentsToMount[i].mountedComponentJSON, (cell || {}).container);\n                }\n            }\n            /**\n             * Add a new Cell instance to the row cells array.\n             *\n             * @param {Cell.Options} [options]\n             * Options for the row cell.\n             *\n             * @param {HTMLElement} [cellElement]\n             * The container for a new cell HTML element.\n             *\n             * @return {Cell}\n             * Returns the Cell object.\n             */\n            addCell(options, cellElement, index) {\n                const row = this, cell = new Cell(row, options, cellElement);\n                if (!defined(index)) {\n                    row.cells.push(cell);\n                }\n                else {\n                    row.mountCell(cell, index);\n                }\n                // Set editMode events.\n                if (row.layout.board.editMode) {\n                    row.layout.board.editMode.setCellEvents(cell);\n                }\n                return cell;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner cells.\n             */\n            destroy() {\n                const row = this;\n                const { layout } = row;\n                // Destroy cells.\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    if (row.cells[i]) {\n                        row.cells[i].destroy();\n                    }\n                }\n                if (row.layout) {\n                    row.layout.unmountRow(row);\n                    super.destroy();\n                    if (layout.rows.length === 0) {\n                        layout.destroy();\n                    }\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Row.JSON}\n             * Class JSON of this Row instance.\n             */\n            toJSON() {\n                const row = this, layoutContainerId = (row.layout.container || {}).id || '', cells = [];\n                // Get cells JSON.\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    cells.push(row.cells[i].toJSON());\n                }\n                return {\n                    $class: 'Dashboards.Layout.Row',\n                    options: {\n                        containerId: row.container.id,\n                        parentContainerId: layoutContainerId,\n                        cells: cells,\n                        style: row.options.style\n                    }\n                };\n            }\n            /**\n             * Get the row's options.\n             * @returns\n             * The JSON of row's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const row = this, cells = [];\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    cells.push(row.cells[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    style: this.options.style,\n                    cells\n                };\n            }\n            setSize(height) {\n                const cells = this.cells;\n                Row.setContainerHeight(this.container, height);\n            }\n            // Get cell index from the row.cells array.\n            getCellIndex(cell) {\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    if (this.cells[i].id === cell.id) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the row.cells array and move cell container.\n            mountCell(cell, index = 0) {\n                const row = this, nextCell = row.cells[index], prevCell = row.cells[index - 1];\n                if (cell.container) {\n                    if (nextCell && nextCell.container) {\n                        nextCell.container.parentNode.insertBefore(cell.container, nextCell.container);\n                    }\n                    else if (prevCell && prevCell.container) {\n                        prevCell.container.parentNode.insertBefore(cell.container, prevCell.container.nextSibling);\n                    }\n                    else if (!prevCell && !nextCell && row.container) {\n                        row.container.appendChild(cell.container);\n                    }\n                    row.cells.splice(index, 0, cell);\n                    cell.row = row;\n                    setTimeout(() => {\n                        fireEvent(row, 'cellChange', { row, cell });\n                    }, 0);\n                }\n            }\n            // Remove cell from the row.cells array.\n            unmountCell(cell) {\n                const cellIndex = this.getCellIndex(cell);\n                if (defined(cellIndex)) {\n                    this.cells.splice(cellIndex, 1);\n                }\n                setTimeout(() => {\n                    fireEvent(this, 'cellChange', { row: this, cell });\n                }, 0);\n            }\n            getVisibleCells() {\n                const cells = [];\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    if (this.cells[i].isVisible) {\n                        cells.push(this.cells[i]);\n                    }\n                }\n                return cells;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const row = this;\n                super.changeVisibility(setVisible, displayStyle);\n                // Change layout visibility if needed.\n                if (!row.layout.getVisibleRows().length) {\n                    row.layout.hide();\n                }\n                else if (row.isVisible && !row.layout.isVisible) {\n                    row.layout.show();\n                }\n            }\n            show() {\n                this.changeVisibility(true, 'flex');\n            }\n            setHighlight(remove) {\n                if (this.container) {\n                    const cnt = this.container, isSet = cnt.classList.contains(EditGlobals.classNames.rowContextHighlight);\n                    if (!remove && !isSet) {\n                        cnt.classList.add(EditGlobals.classNames.rowContextHighlight);\n                    }\n                    else if (remove && isSet) {\n                        cnt.classList.remove(EditGlobals.classNames.rowContextHighlight);\n                    }\n                }\n            }\n            // Row can have cells below each others.\n            // This method returns cells split into levels.\n            getRowLevels() {\n                const row = this, rowLevels = {}, rowLevelsArray = [];\n                let cell, cellOffsets;\n                for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                    cell = row.cells[k];\n                    if (cell.isVisible) {\n                        cellOffsets = GUIElement.getOffsets(cell);\n                        if (!rowLevels[cellOffsets.top]) {\n                            rowLevels[cellOffsets.top] = {\n                                top: cellOffsets.top,\n                                bottom: cellOffsets.bottom,\n                                cells: []\n                            };\n                        }\n                        if (rowLevels[cellOffsets.top].bottom < cellOffsets.bottom) {\n                            rowLevels[cellOffsets.top].bottom = cellOffsets.bottom;\n                        }\n                        rowLevels[cellOffsets.top].cells.push(cell);\n                    }\n                }\n                objectEach(rowLevels, (value) => {\n                    rowLevelsArray.push(value);\n                });\n                return rowLevelsArray;\n            }\n            // Get row level with additional info\n            // on a specific Y position.\n            getRowLevelInfo(posY) {\n                const rowLevels = this.getRowLevels();\n                let rowLevelInfo;\n                for (let i = 0, iEnd = rowLevels.length; i < iEnd; ++i) {\n                    if (rowLevels[i].top <= posY && rowLevels[i].bottom > posY) {\n                        rowLevelInfo = {\n                            index: i,\n                            rowLevels: rowLevels,\n                            rowLevel: rowLevels[i]\n                        };\n                    }\n                }\n                return rowLevelInfo;\n            }\n        }\n\n        return Row;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Layout.js', [_modules['Dashboards/Utilities.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Layout/Row.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Globals.js']], function (DU, U, Row, GUIElement, Globals) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { uniqueKey } = DU;\n        const { pick, defined } = U;\n        /**\n         * @internal\n         **/\n        class Layout extends GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /** @internal */\n            static fromJSON(json, board, parentCell) {\n                const options = json.options, \n                // Check if layout container exists.\n                container = document.getElementById(json.options.containerId), layout = new Layout(board, {\n                    id: options.containerId,\n                    copyId: container ? uniqueKey() : '',\n                    parentContainerId: options.parentContainerId || board.container.id,\n                    rowsJSON: options.rows,\n                    style: options.style\n                }, parentCell);\n                // Save layout in the dashboard.\n                if (layout && !parentCell) {\n                    board.layouts.push(layout);\n                }\n                return layout;\n            }\n            /** @internal */\n            static importLocal(id, board) {\n                const layoutOptions = localStorage.getItem(Globals.classNamePrefix + id);\n                let layout;\n                if (layoutOptions) {\n                    layout = Layout.fromJSON(JSON.parse(layoutOptions), board);\n                }\n                return layout;\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Layout class.\n             *\n             * @param {Dashboard} board\n             * Reference to the dashboard instance.\n             *\n             * @param {Layout.Options} options\n             * Options for the layout.\n             */\n            constructor(board, options, parentCell) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.layout;\n                this.board = board;\n                this.rows = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = parentCell ? parentCell.container :\n                    document.getElementById(options.parentContainerId || '') || board.layoutsWrapper;\n                // Set layout level.\n                if (parentCell) {\n                    this.parentCell = parentCell;\n                    this.level = parentCell.row.layout.level + 1;\n                }\n                else {\n                    this.level = 0;\n                }\n                // GUI structure\n                if (options.copyId) {\n                    this.copyId = options.copyId;\n                }\n                const layoutOptions = (this.options || {}), layoutClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: (options.id || '') + (this.copyId ? '_' + this.copyId : ''),\n                        className: Globals.classNames.layout + ' ' +\n                            layoutClassName\n                    },\n                    elementId: options.id,\n                    style: this.options.style\n                });\n                // Init rows from options.\n                if (this.options.rows) {\n                    this.setRows();\n                }\n                // Init rows from JSON.\n                if (options.rowsJSON && !this.rows.length) {\n                    this.setRowsFromJSON(options.rowsJSON);\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the layout rows using rows options or rowClassName.\n             */\n            setRows() {\n                const layout = this, rowsElements = pick(layout.options.rows, layout.container && layout.container.getElementsByClassName(layout.options.rowClassName || '')) || [];\n                let rowElement, i, iEnd;\n                for (i = 0, iEnd = rowsElements.length; i < iEnd; ++i) {\n                    rowElement = rowsElements[i];\n                    layout.addRow(layout.board.guiEnabled ? rowElement : {}, rowElement instanceof HTMLElement ? rowElement : void 0);\n                }\n            }\n            /** @internal */\n            setRowsFromJSON(json) {\n                const layout = this;\n                let row;\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    row = Row.fromJSON(json[i], layout);\n                    if (row) {\n                        layout.rows.push(row);\n                    }\n                }\n            }\n            /**\n             * Add a new Row instance to the layout rows array.\n             *\n             * @param {Row.Options} options\n             * Options of a row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container for a new row HTML element.\n             *\n             * @return {Row}\n             * Returns the Row object.\n             */\n            addRow(options, rowElement, index) {\n                const layout = this, row = new Row(layout, options, rowElement);\n                if (!defined(index)) {\n                    layout.rows.push(row);\n                }\n                else {\n                    layout.mountRow(row, index);\n                }\n                // Set editMode events.\n                if (layout.board.editMode) {\n                    layout.board.editMode.setRowEvents(row);\n                }\n                return row;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner rows.\n             */\n            destroy() {\n                const layout = this;\n                for (let i = layout.board.layouts.length - 1; i >= 0; i--) {\n                    if (layout.board.layouts[i] === layout) {\n                        layout.board.layouts.splice(i, 1);\n                    }\n                }\n                // Destroy rows.\n                for (let i = layout.rows.length - 1; i >= 0; i--) {\n                    layout.rows[i].destroy();\n                }\n                if (layout.parentCell) {\n                    layout.parentCell.destroy();\n                }\n                super.destroy();\n            }\n            /**\n             * Export layout's options and save in the local storage\n             * @internal\n             */\n            exportLocal() {\n                localStorage.setItem(Globals.classNamePrefix + this.options.id, JSON.stringify(this.toJSON()));\n            }\n            // Get row index from the layout.rows array.\n            getRowIndex(row) {\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i] === row) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the layout.rows array and move row container.\n            mountRow(row, index) {\n                const nextRow = this.rows[index], prevRow = this.rows[index - 1];\n                if (row.container) {\n                    if (nextRow && nextRow.container) {\n                        nextRow.container.parentNode.insertBefore(row.container, nextRow.container);\n                    }\n                    else if (prevRow && prevRow.container) {\n                        prevRow.container.parentNode.insertBefore(row.container, prevRow.container.nextSibling);\n                    }\n                    this.rows.splice(index, 0, row);\n                    row.layout = this;\n                }\n            }\n            // Remove row from the layout.rows array.\n            unmountRow(row) {\n                const rowIndex = this.getRowIndex(row);\n                if (defined(rowIndex)) {\n                    this.rows.splice(rowIndex, 1);\n                }\n            }\n            getVisibleRows() {\n                const rows = [];\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i].isVisible) {\n                        rows.push(this.rows[i]);\n                    }\n                }\n                return rows;\n            }\n            changeVisibility(setVisible = true) {\n                const layout = this;\n                super.changeVisibility(setVisible);\n                // Change parentCell visibility.\n                if (layout.parentCell) {\n                    if (layout.isVisible && !layout.parentCell.isVisible) {\n                        layout.parentCell.show();\n                    }\n                    else if (!layout.isVisible && layout.parentCell.isVisible) {\n                        layout.parentCell.hide();\n                    }\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Layout.JSON}\n             * Class JSON of this Layout instance.\n             */\n            toJSON() {\n                const layout = this, dashboardContainerId = (layout.board.container || {}).id || '', rows = [];\n                // Get rows JSON.\n                for (let i = 0, iEnd = layout.rows.length; i < iEnd; ++i) {\n                    rows.push(layout.rows[i].toJSON());\n                }\n                return {\n                    $class: 'Dashboards.Layout',\n                    options: {\n                        containerId: layout.container.id,\n                        parentContainerId: dashboardContainerId,\n                        rows: rows,\n                        style: layout.options.style\n                    }\n                };\n            }\n            /**\n             * Get the layout's options.\n             * @returns\n             * The JSON of layout's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const layout = this, rows = [];\n                // Get rows JSON.\n                for (let i = 0, iEnd = layout.rows.length; i < iEnd; ++i) {\n                    rows.push(layout.rows[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    layoutClassName: this.options.layoutClassName,\n                    rowClassName: this.options.rowClassName,\n                    cellClassName: this.options.cellClassName,\n                    style: this.options.style,\n                    rows\n                };\n            }\n        }\n\n        return Layout;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/SidebarPopup.js', [_modules['Dashboards/EditMode/AccordionMenu.js'], _modules['Shared/BaseForm.js'], _modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Core/Utilities.js']], function (AccordionMenu, BaseForm, Bindings, EditGlobals, EditRenderer, GUIElement, Layout, U) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  Pawel Lysy\n         *\n         * */\n        const { addEvent, createElement, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class which creates the sidebar and handles its behaviour.\n         */\n        class SidebarPopup extends BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor of the SidebarPopup class.\n             *\n             * @param parentDiv\n             * Element to which the sidebar will be appended.\n             * @param iconsURL\n             * URL to the icons.\n             * @param editMode\n             * Instance of EditMode.\n             */\n            constructor(parentDiv, iconsURL, editMode) {\n                super(parentDiv, iconsURL);\n                /**\n                 * Whether the sidebar is visible.\n                 */\n                this.isVisible = false;\n                this.editMode = editMode;\n                this.accordionMenu = new AccordionMenu(this.iconsURL, this.hide.bind(this));\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Function to detect on which side of the screen should the sidebar be.\n             *\n             * @param context\n             * The cell or row which is the context of the sidebar.\n             * @returns\n             * Whether the sidebar should be on the right side of the screen.\n             */\n            detectRightSidebar(context) {\n                const editMode = this.editMode;\n                const layoutWrapper = editMode.board.layoutsWrapper;\n                return GUIElement.getOffsets(context, layoutWrapper).left < ((layoutWrapper.offsetWidth / 2) - 10); // 10 = snap\n            }\n            /**\n             * Function to remove the class names from the sidebar.\n             */\n            removeClassNames() {\n                const classNames = EditGlobals.classNames, classList = this.container.classList;\n                classList.remove(classNames.editSidebarShow);\n                classList.remove(classNames.editSidebarRightShow);\n            }\n            /**\n             * Function to add the class names to the sidebar depending on the position\n             * of the sidebar.\n             *\n             * @param isRightSidebar\n             * Whether the sidebar should be on the right side of the screen.\n             */\n            addClassNames(isRightSidebar) {\n                const classList = this.container.classList;\n                if (isRightSidebar) {\n                    classList.add(EditGlobals.classNames.editSidebarRight);\n                }\n                else {\n                    classList.remove(EditGlobals.classNames.editSidebarRight);\n                }\n                setTimeout(() => {\n                    classList.add(EditGlobals.classNames[isRightSidebar ? 'editSidebarRightShow' : 'editSidebarShow']);\n                });\n            }\n            /**\n             * Function to show the sidebar.\n             *\n             * @param context\n             * The cell or row which is the context of the sidebar.\n             */\n            show(context) {\n                const editMode = this.editMode, isRightSidebar = !!(context && this.detectRightSidebar(context));\n                this.showPopup(EditGlobals.classNames.editSidebarShow);\n                this.addClassNames(isRightSidebar);\n                if (editMode.resizer) {\n                    editMode.resizer.disableResizer();\n                }\n                // Remove highlight from the row.\n                if (editMode.editCellContext && editMode.editCellContext.row) {\n                    editMode.editCellContext.row.setHighlight(true);\n                }\n                editMode.hideToolbars(['cell', 'row']);\n                editMode.stopContextDetection();\n                this.isVisible = true;\n                this.generateContent(context);\n            }\n            generateContent(context) {\n                // Title\n                this.renderHeader(context ?\n                    this.editMode.lang.settings :\n                    this.editMode.lang.addComponent, '');\n                if (!context) {\n                    this.renderAddComponentsList();\n                    return;\n                }\n                const type = context.getType();\n                if (type === 'cell') {\n                    const component = context.mountedComponent;\n                    if (!component) {\n                        return;\n                    }\n                    this.accordionMenu.renderContent(this.container, component);\n                }\n            }\n            renderAddComponentsList() {\n                const sidebar = this;\n                const components = SidebarPopup.components;\n                let gridElement;\n                const gridWrapper = createElement('div', {\n                    className: EditGlobals.classNames.editGridItems\n                }, {}, sidebar.container);\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    gridElement = createElement('div', {}, {}, gridWrapper);\n                    // Drag drop new component.\n                    gridElement.addEventListener('mousedown', (e) => {\n                        if (sidebar.editMode.dragDrop) {\n                            const onMouseLeave = () => {\n                                sidebar.hide();\n                            };\n                            sidebar.container.addEventListener('mouseleave', onMouseLeave);\n                            sidebar.editMode.dragDrop.onDragStart(e, void 0, (dropContext) => {\n                                // Add component if there is no layout yet.\n                                if (this.editMode.board.layouts.length === 0) {\n                                    const board = this.editMode.board, newLayoutName = GUIElement.createElementId('layout'), layout = new Layout(board, {\n                                        id: newLayoutName,\n                                        copyId: '',\n                                        parentContainerId: board.container.id,\n                                        rows: [{}],\n                                        style: {}\n                                    });\n                                    if (layout) {\n                                        board.layouts.push(layout);\n                                    }\n                                    dropContext = layout.rows[0];\n                                }\n                                const newCell = components[i].onDrop(sidebar, dropContext);\n                                if (newCell) {\n                                    const mountedComponent = newCell.mountedComponent;\n                                    // skip init connector when is not defined by\n                                    // options f.e HTML component.\n                                    if (mountedComponent.options?.connector?.id) {\n                                        mountedComponent.initConnector();\n                                    }\n                                    sidebar.editMode.setEditCellContext(newCell);\n                                    sidebar.show(newCell);\n                                    newCell.setHighlight();\n                                }\n                                sidebar.container.removeEventListener('mouseleave', onMouseLeave);\n                            });\n                        }\n                    });\n                    gridElement.innerHTML = components[i].text;\n                }\n                return;\n            }\n            onDropNewComponent(dropContext, componentOptions) {\n                const sidebar = this, dragDrop = sidebar.editMode.dragDrop;\n                if (dragDrop) {\n                    const row = (dropContext.getType() === 'cell' ?\n                        dropContext.row :\n                        dropContext), newCell = row.addCell({\n                        id: GUIElement.createElementId('col')\n                    });\n                    dragDrop.onCellDragEnd(newCell);\n                    const options = merge(componentOptions, {\n                        cell: newCell.id\n                    });\n                    Bindings.addComponent(options, newCell);\n                    sidebar.editMode.setEditOverlay();\n                    return newCell;\n                }\n            }\n            /**\n             * Function to hide the sidebar.\n             */\n            hide() {\n                const editMode = this.editMode;\n                const editCellContext = editMode.editCellContext;\n                this.removeClassNames();\n                // Remove edit overlay if active.\n                if (editMode.isEditOverlayActive) {\n                    editMode.setEditOverlay(true);\n                }\n                if (editCellContext && editCellContext.row) {\n                    editMode.showToolbars(['cell', 'row'], editCellContext);\n                    editCellContext.row.setHighlight();\n                    // Remove cell highlight if active.\n                    if (editCellContext.isHighlighted) {\n                        editCellContext.setHighlight(true);\n                    }\n                }\n                editMode.isContextDetectionActive = true;\n                this.isVisible = false;\n            }\n            /**\n             * Function called when the close button is pressed.\n             */\n            closeButtonEvents() {\n                this.hide();\n            }\n            renderHeader(title, iconURL) {\n                const icon = EditRenderer.renderIcon(this.container, {\n                    icon: iconURL,\n                    className: EditGlobals.classNames.editSidebarTitle\n                });\n                if (icon) {\n                    icon.textContent = title;\n                }\n            }\n            /**\n             * Function to create and add the close button to the sidebar.\n             *\n             * @param className\n             * Class name of the close button.\n             * @returns Close button element\n             */\n            addCloseButton(className = EditGlobals.classNames.popupCloseButton) {\n                // close popup when click outside the popup\n                addEvent(document, 'click', (event) => {\n                    event.stopPropagation();\n                    if (this.container.style.display === 'block' &&\n                        !this.container.contains(event.target) &&\n                        this.container.classList.value.includes('show')) {\n                        this.hide();\n                    }\n                });\n                return super.addCloseButton.call(this, className);\n            }\n            /**\n             * Function that creates the container of the sidebar.\n             *\n             * @param parentDiv\n             * The parent div to which the sidebar will be appended.\n             * @param className\n             * Class name of the sidebar.\n             * @returns The container of the sidebar.\n             */\n            createPopupContainer(parentDiv, className = EditGlobals.classNames.editSidebar) {\n                return super.createPopupContainer.call(this, parentDiv, className);\n            }\n        }\n        SidebarPopup.components = [\n            {\n                text: 'HTML',\n                onDrop: function (sidebar, dropContext) {\n                    if (sidebar && dropContext) {\n                        return sidebar.onDropNewComponent(dropContext, {\n                            cell: '',\n                            type: 'HTML',\n                            elements: [{\n                                    tagName: 'img',\n                                    attributes: {\n                                        src: 'https://www.highcharts.com/samples/graphics/stock-dark.svg'\n                                    }\n                                }]\n                        });\n                    }\n                }\n            }, {\n                text: 'layout',\n                onDrop: function (sidebar, dropContext) {\n                    if (!dropContext) {\n                        return;\n                    }\n                    const row = (dropContext.getType() === 'cell' ?\n                        dropContext.row :\n                        dropContext), board = row.layout.board, newLayoutName = GUIElement.createElementId('layout'), cellName = GUIElement.createElementId('cell'), layout = new Layout(board, {\n                        id: newLayoutName,\n                        copyId: '',\n                        parentContainerId: board.container.id,\n                        rows: [{\n                                cells: [{\n                                        id: cellName\n                                    }]\n                            }],\n                        style: {}\n                    });\n                    if (layout) {\n                        board.layouts.push(layout);\n                    }\n                    Bindings.addComponent({\n                        type: 'HTML',\n                        cell: cellName,\n                        elements: [\n                            {\n                                tagName: 'div',\n                                style: { 'text-align': 'center' },\n                                textContent: 'Placeholder text'\n                            }\n                        ]\n                    });\n                }\n            }, {\n                text: 'chart',\n                onDrop: function (sidebar, dropContext) {\n                    if (sidebar && dropContext) {\n                        const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                        let options = {\n                            cell: '',\n                            type: 'Highcharts',\n                            chartOptions: {\n                                chart: {\n                                    animation: false,\n                                    type: 'column',\n                                    zooming: {}\n                                }\n                            }\n                        };\n                        if (connectorsIds.length) {\n                            options = {\n                                ...options,\n                                connector: {\n                                    id: connectorsIds[0]\n                                }\n                            };\n                        }\n                        return sidebar.onDropNewComponent(dropContext, options);\n                    }\n                }\n            }, {\n                text: 'datagrid',\n                onDrop: function (sidebar, dropContext) {\n                    if (sidebar && dropContext) {\n                        const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                        let options = {\n                            cell: '',\n                            type: 'DataGrid'\n                        };\n                        if (connectorsIds.length) {\n                            options = {\n                                ...options,\n                                connector: {\n                                    id: connectorsIds[0]\n                                }\n                            };\n                        }\n                        return sidebar.onDropNewComponent(dropContext, options);\n                    }\n                }\n            }, {\n                text: 'KPI',\n                onDrop: function (sidebar, dropContext) {\n                    if (sidebar && dropContext) {\n                        const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                        let options = {\n                            cell: '',\n                            type: 'KPI'\n                        };\n                        if (connectorsIds.length) {\n                            options = {\n                                ...options,\n                                connector: {\n                                    id: connectorsIds[0]\n                                }\n                            };\n                        }\n                        return sidebar.onDropNewComponent(dropContext, options);\n                    }\n                }\n            }\n        ];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SidebarPopup;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditContextMenu.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/Menu.js']], function (EditGlobals, U, Menu) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, merge } = U;\n        /**\n         * Class to create context menu.\n         * @internal\n         */\n        class EditContextMenu extends Menu {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentElement, options, editMode, parent) {\n                super(editMode.board.container, merge(EditContextMenu.defaultOptions, options || {}), editMode);\n                this.editMode = editMode;\n                this.options = merge(EditContextMenu.defaultOptions, options || {});\n                // Move it in the DOM after the edit tools so it is better accessible.\n                this.editMode.board.layoutsWrapper.parentNode.insertBefore(this.container, this.editMode.board.layoutsWrapper);\n                // Set the context menu container width.\n                this.container.style.width = this.options.width + 'px';\n                super.initItems(EditContextMenu.items);\n                if (this.options.items) {\n                    const items = [];\n                    for (let i = 0, iEnd = this.options.items.length; i < iEnd; ++i) {\n                        if (typeof this.options.items[i] === 'string') {\n                            items.push(this.options.items[i]);\n                        }\n                        else if (this.options.items[i].id) {\n                            items.push(this.options.items[i].id);\n                        }\n                    }\n                    this.setActiveItems(items);\n                }\n                this.initEvents();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            initEvents() {\n                const contextMenu = this;\n                // Click on document close the context menu\n                // TODO refactor\n                addEvent(document, 'click', (event) => {\n                    if (event.target !== this.container &&\n                        event.target !==\n                            contextMenu.editMode.tools.contextButtonElement &&\n                        !event.target.classList\n                            .contains(EditGlobals.classNames.toggleSlider) &&\n                        event.target.tagName !== 'INPUT' &&\n                        this.isVisible) {\n                        this.setVisible(false);\n                    }\n                });\n            }\n            setVisible(visible) {\n                const contextMenu = this, contextButtonElement = contextMenu.editMode.tools.contextButtonElement;\n                if (contextMenu.container && contextButtonElement) {\n                    if (visible) {\n                        contextMenu.container.style.display = 'block';\n                        contextMenu.isVisible = true;\n                        contextButtonElement.setAttribute('aria-expanded', 'true');\n                    }\n                    else {\n                        contextMenu.container.style.display = 'none';\n                        contextMenu.isVisible = false;\n                        contextButtonElement.setAttribute('aria-expanded', 'false');\n                    }\n                }\n            }\n            updatePosition(ctxButton, x, y) {\n                const contextMenu = this, width = contextMenu.options.width || 0, left = (ctxButton ?\n                    ctxButton.offsetLeft - width + ctxButton.offsetWidth :\n                    x), top = ctxButton ? ctxButton.offsetTop + ctxButton.offsetHeight : y;\n                if (left && top) {\n                    contextMenu.container.style.left = left + 'px';\n                    contextMenu.container.style.top = top + 'px';\n                }\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        EditContextMenu.defaultOptions = {\n            enabled: true,\n            width: 150,\n            className: EditGlobals.classNames.contextMenu,\n            itemsClassName: EditGlobals.classNames.contextMenuItem,\n            items: ['editMode']\n        };\n        /**\n         * Default Context menu items.\n         */\n        EditContextMenu.items = merge(Menu.items, {\n            editMode: {\n                id: 'editMode',\n                type: 'toggle',\n                getValue: function (item) {\n                    return item.menu.editMode.isActive();\n                },\n                langKey: 'editMode',\n                events: {\n                    click: function () {\n                        this.menu.editMode.onEditModeToggle();\n                    }\n                }\n            }\n        });\n\n        return EditContextMenu;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/ContextDetection.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Layout/GUIElement.js']], function (U, GUIElement) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { defined } = U;\n        class ContextDetection {\n            static isGUIElementOnParentEdge(mouseContext, side // right, left, top, bottom\n            ) {\n                const visibleElements = (side === 'top' || side === 'bottom') ?\n                    mouseContext.row.layout.getVisibleRows() :\n                    (side === 'left' || side === 'right') ?\n                        mouseContext.row.getVisibleCells() :\n                        [];\n                const lastElementIndex = (visibleElements.length - 1);\n                return ((visibleElements[lastElementIndex] === mouseContext &&\n                    side === 'right') ||\n                    (visibleElements[lastElementIndex] === mouseContext.row &&\n                        side === 'bottom') ||\n                    (visibleElements[0] === mouseContext && side === 'left') ||\n                    (visibleElements[0] === mouseContext.row && side === 'top'));\n            }\n            static getContextLevel(mouseContext, offset, sideOffset, side) {\n                // Array of overlapped levels.\n                const overlappedLevels = mouseContext.getOverlappingLevels(side, offset / 2);\n                // Divide offset to level sections (eg 3 nested layouts -\n                // cell edge will have 3 sections each 1/3 offset width).\n                const divOffset = offset / overlappedLevels.length;\n                // Overlapped nested layout level.\n                const lastOverlappedLevel = overlappedLevels[overlappedLevels.length - 1];\n                let level = mouseContext.row.layout.level - Math.floor(sideOffset / divOffset);\n                level = level < lastOverlappedLevel ? lastOverlappedLevel : (level > mouseContext.row.layout.level ?\n                    mouseContext.row.layout.level : level);\n                return level;\n            }\n            static getContext(mouseCellContext, e, offset) {\n                let sideOffset;\n                // get cell offsets, width, height\n                const mouseCellContextOffsets = GUIElement.getOffsets(mouseCellContext);\n                const { width, height } = GUIElement.getDimFromOffsets(mouseCellContextOffsets);\n                // Correct offset when element to small.\n                if (width < 2 * offset) {\n                    offset = width / 2;\n                }\n                // Get mouse position relative to the mouseContext sides.\n                const leftSideX = e.clientX - mouseCellContextOffsets.left;\n                const topSideY = e.clientY - mouseCellContextOffsets.top;\n                // get cell side - right, left, top, bottom\n                const sideY = topSideY >= -offset && topSideY <= offset ? 'top' :\n                    topSideY - height >= -offset && topSideY - height <= offset ?\n                        'bottom' :\n                        '';\n                const sideX = leftSideX >= -offset && leftSideX <= offset ? 'left' :\n                    leftSideX - width >= -offset && leftSideX - width <= offset ?\n                        'right' :\n                        '';\n                const side = sideX ? sideX : sideY; // X is prioritized.\n                switch (side) {\n                    case 'right':\n                        sideOffset = leftSideX - width + offset;\n                        break;\n                    case 'left':\n                        sideOffset = offset - leftSideX;\n                        break;\n                    case 'top':\n                        sideOffset = offset - topSideY;\n                        break;\n                    case 'bottom':\n                        sideOffset = topSideY - height + offset;\n                        break;\n                }\n                const context = {\n                    cell: mouseCellContext,\n                    side: side\n                };\n                // Nested layouts.\n                if (mouseCellContext.row.layout.level !== 0 &&\n                    side &&\n                    ContextDetection.isGUIElementOnParentEdge(mouseCellContext, side) &&\n                    defined(sideOffset)) {\n                    const level = ContextDetection.getContextLevel(mouseCellContext, offset, sideOffset, side);\n                    const cell = mouseCellContext.getParentCell(level);\n                    if (cell) {\n                        context.cell = cell;\n                    }\n                }\n                return context;\n            }\n        }\n\n        return ContextDetection;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/DragDrop.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Actions/ContextDetection.js']], function (U, Globals, EditGlobals, GUIElement, ContextDetection) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, merge, css, fireEvent, createElement } = U;\n        /**\n         * Class providing a drag and drop functionality.\n         * @internal\n         */\n        class DragDrop {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * Constructor for the DragDrop class.\n             * @internal\n             *\n             * @param {EditMode} editMode\n             * The parent editMode reference.\n             *\n             * @param {DragDrop.Options} options\n             * Options for the DragDrop.\n             */\n            constructor(editMode, options) {\n                this.editMode = editMode;\n                this.options = merge(DragDrop.defaultOptions, options);\n                this.mockElement = createElement('div', { className: EditGlobals.classNames.dragMock }, {}, editMode.board.container);\n                this.dropPointer = {\n                    isVisible: false,\n                    align: '',\n                    element: createElement('div', { className: EditGlobals.classNames.dropPointer }, {}, editMode.board.container)\n                };\n                this.isActive = false;\n                this.initEvents();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for showing and positioning drop pointer.\n             *\n             * @param {number} left\n             * Drop pointer left position.\n             *\n             * @param {number} top\n             * Drop pointer top position.\n             *\n             * @param {number} width\n             * Drop pointer width.\n             *\n             * @param {number} height\n             * Drop pointer height.\n             */\n            showDropPointer(left, top, width, height) {\n                this.dropPointer.isVisible = true;\n                css(this.dropPointer.element, {\n                    display: 'block',\n                    left: left + 'px',\n                    top: top + 'px',\n                    height: height + 'px',\n                    width: width + 'px'\n                });\n            }\n            /**\n             * Method for hiding drop pointer.\n             */\n            hideDropPointer() {\n                if (this.dropPointer.isVisible) {\n                    this.dropPointer.isVisible = false;\n                    this.dropPointer.align = '';\n                    this.dropPointer.element.style.display = 'none';\n                }\n            }\n            /**\n             * Method for positioning drag mock element.\n             *\n             * @param {PointerEvent} mouseEvent\n             * Mouse event.\n             */\n            setMockElementPosition(mouseEvent) {\n                const dragDrop = this, dashBoundingRect = dragDrop.editMode.board.container.getBoundingClientRect(), offset = dragDrop.mockElement.clientWidth / 2, x = mouseEvent.clientX - dashBoundingRect.left - offset, y = mouseEvent.clientY - dashBoundingRect.top - offset;\n                css(this.mockElement, { left: x + 'px', top: y + 'px' });\n            }\n            /**\n             * Method for initializing drag drop events.\n             */\n            initEvents() {\n                const dragDrop = this;\n                // DragDrop events.\n                addEvent(document, 'mousemove', dragDrop.onDrag.bind(dragDrop));\n                addEvent(document, 'mouseup', dragDrop.onDragEnd.bind(dragDrop));\n            }\n            /**\n             * General method used on drag start.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {Cell|Row} context\n             * Reference to the dragged context.\n             *\n             * @param {Function} dragEndCallback\n             * Callback invoked on drag end.\n             */\n            onDragStart(e, context, dragEndCallback) {\n                this.isActive = true;\n                this.editMode.hideToolbars(['cell', 'row']);\n                if (this.editMode.resizer) {\n                    this.editMode.resizer.disableResizer();\n                }\n                this.setMockElementPosition(e);\n                if (context) {\n                    this.context = context;\n                    context.hide();\n                    if (context.getType() === Globals.guiElementType.cell) {\n                        const draggedCell = context;\n                        // Call cellResize board event.\n                        fireEvent(this.editMode.board, 'cellResize', { cell: context });\n                        fireEvent(draggedCell.row, 'cellChange', { cell: context, row: draggedCell.row });\n                    }\n                }\n                else if (dragEndCallback) {\n                    this.dragEndCallback = dragEndCallback;\n                }\n                css(this.mockElement, {\n                    cursor: 'grabbing',\n                    display: 'block'\n                });\n            }\n            /**\n             * General method used while dragging.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             */\n            onDrag(e) {\n                const dragDrop = this;\n                if (dragDrop.isActive) {\n                    e.preventDefault();\n                    dragDrop.setMockElementPosition(e);\n                    if (dragDrop.context) {\n                        if (dragDrop.context.getType() ===\n                            Globals.guiElementType.cell) {\n                            dragDrop.onCellDrag(e);\n                        }\n                        else if (dragDrop.context.getType() ===\n                            Globals.guiElementType.row) {\n                            dragDrop.onRowDrag(e);\n                        }\n                    }\n                    else if (dragDrop.dragEndCallback) {\n                        dragDrop.onCellDrag(e);\n                    }\n                }\n            }\n            /**\n             * General method used when drag finish.\n             */\n            onDragEnd() {\n                const dragDrop = this;\n                if (dragDrop.isActive) {\n                    dragDrop.isActive = false;\n                    css(dragDrop.mockElement, {\n                        cursor: 'grab',\n                        display: 'none'\n                    });\n                    if (dragDrop.context) {\n                        if (dragDrop.context.getType() ===\n                            Globals.guiElementType.cell) {\n                            dragDrop.onCellDragEnd();\n                        }\n                        else if (dragDrop.context.getType() ===\n                            Globals.guiElementType.row) {\n                            dragDrop.onRowDragEnd();\n                        }\n                        dragDrop.context = void 0;\n                        // Show toolbars and snaps.\n                        if (dragDrop.editMode.editCellContext) {\n                            dragDrop.editMode.showToolbars(['row', 'cell'], dragDrop.editMode.editCellContext);\n                            if (dragDrop.editMode.resizer) {\n                                dragDrop.editMode.resizer.setSnapPositions(dragDrop.editMode.editCellContext);\n                            }\n                        }\n                    }\n                    else if (dragDrop.dragEndCallback) {\n                        dragDrop.dragEndCallback(dragDrop.dropContext);\n                        dragDrop.dragEndCallback = void 0;\n                        dragDrop.hideDropPointer();\n                    }\n                }\n            }\n            /**\n             * Sets appropriate drop context and refresh drop pointer position when\n             * row is dragged or cell is dragged as a row.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} contextDetails\n             * Context details (cell, side)\n             */\n            onRowDrag(e, contextDetails) {\n                const dragDrop = this, mouseCellContext = dragDrop.mouseCellContext, dropPointerSize = dragDrop.options.dropPointerSize, offset = dragDrop.options.rowDropOffset;\n                let updateDropPointer = false;\n                if (mouseCellContext) {\n                    const context = (contextDetails ||\n                        ContextDetection.getContext(mouseCellContext, e, offset));\n                    const align = context.side;\n                    if (dragDrop.dropPointer.align !== align ||\n                        dragDrop.dropContext !== context.cell.row) {\n                        updateDropPointer = true;\n                        dragDrop.dropPointer.align = align;\n                        dragDrop.dropContext = context.cell.row;\n                    }\n                    if (align) {\n                        const dropContextRowOffsets = GUIElement.getOffsets(dragDrop.dropContext, dragDrop.editMode.board.container);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(dropContextRowOffsets);\n                        // Update or show drop pointer.\n                        if (!dragDrop.dropPointer.isVisible || updateDropPointer) {\n                            dragDrop.showDropPointer(dropContextRowOffsets.left, dropContextRowOffsets.top + (dragDrop.dropPointer.align === 'bottom' ?\n                                height :\n                                0) - dropPointerSize / 2, width, dropPointerSize);\n                        }\n                    }\n                    else {\n                        dragDrop.dropContext = void 0;\n                        dragDrop.hideDropPointer();\n                    }\n                }\n            }\n            /**\n             * Unmounts dropped row and mounts it in a new position.\n             */\n            onRowDragEnd() {\n                const dragDrop = this, draggedRow = dragDrop.context, dropContext = dragDrop.dropContext;\n                if (dragDrop.dropPointer.align) {\n                    draggedRow.layout.unmountRow(draggedRow);\n                    // Destroy layout when empty.\n                    if (draggedRow.layout.rows.length === 0) {\n                        draggedRow.layout.destroy();\n                    }\n                    dropContext.layout.mountRow(draggedRow, (dropContext.layout.getRowIndex(dropContext) || 0) +\n                        (dragDrop.dropPointer.align === 'bottom' ? 1 : 0));\n                    // Call cellResize board event.\n                    if (draggedRow.cells[0]) {\n                        fireEvent(dragDrop.editMode.board, 'cellResize', { cell: draggedRow.cells[0] });\n                        fireEvent(draggedRow, 'cellChange', { cell: draggedRow.cells[0], row: draggedRow });\n                    }\n                }\n                dragDrop.hideDropPointer();\n                draggedRow.show();\n            }\n            /**\n             * Method used as middleware when cell is dragged.\n             * Decides where to pass an event depending on the mouse context.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} contextDetails\n             * Context details (cell, side)\n             */\n            onCellDrag(e, contextDetails) {\n                const dragDrop = this, mouseCellContext = dragDrop.mouseCellContext, offset = dragDrop.options.cellDropOffset;\n                if (mouseCellContext || contextDetails) {\n                    dragDrop.onCellDragCellCtx(e, contextDetails ||\n                        ContextDetection.getContext(mouseCellContext, e, offset));\n                }\n                else if (dragDrop.mouseRowContext) {\n                    dragDrop.onCellDragRowCtx(e, dragDrop.mouseRowContext);\n                }\n            }\n            /**\n             * Sets appropriate drop context and refreshes the drop pointer\n             * position when a cell is dragged and a cell context is detected.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} context\n             * Context details (cell, side)\n             */\n            onCellDragCellCtx(e, context) {\n                const dragDrop = this, dropPointerSize = dragDrop.options.dropPointerSize, align = context.side;\n                let updateDropPointer = false;\n                if (dragDrop.dropPointer.align !== align ||\n                    dragDrop.dropContext !== context.cell) {\n                    updateDropPointer = true;\n                    dragDrop.dropPointer.align = align;\n                    dragDrop.dropContext = context.cell;\n                }\n                if (align === 'right' || align === 'left') {\n                    const dropContextOffsets = GUIElement.getOffsets(dragDrop.dropContext, dragDrop.editMode.board.container);\n                    const { width, height } = GUIElement.getDimFromOffsets(dropContextOffsets);\n                    // Update or show drop pointer.\n                    if (!dragDrop.dropPointer.isVisible || updateDropPointer) {\n                        const rowLevelInfo = dragDrop.dropContext.row.getRowLevelInfo(e.clientY), pointerHeight = (rowLevelInfo ?\n                            (rowLevelInfo.rowLevel.bottom -\n                                rowLevelInfo.rowLevel.top) :\n                            height);\n                        dragDrop.showDropPointer(dropContextOffsets.left + (align === 'right' ? width : 0) -\n                            dropPointerSize / 2, dropContextOffsets.top, dropPointerSize, pointerHeight);\n                    }\n                }\n                else if (align === 'top' || align === 'bottom') {\n                    const dropContextOffsets = GUIElement.getOffsets(dragDrop.dropContext), rowLevelInfo = dragDrop.dropContext.row\n                        .getRowLevelInfo(dropContextOffsets.top);\n                    if (rowLevelInfo &&\n                        ((rowLevelInfo.index === 0 && align === 'top') ||\n                            (rowLevelInfo.index ===\n                                rowLevelInfo.rowLevels.length - 1 &&\n                                align === 'bottom'))) {\n                        // Checks if a cell is dragged as a row\n                        // (only when a cell edge is on a row edge)\n                        dragDrop.onRowDrag(e, context);\n                    }\n                }\n                else {\n                    dragDrop.dropContext = void 0;\n                    dragDrop.hideDropPointer();\n                }\n            }\n            /**\n             * Sets appropriate drop context and refreshes the drop pointer\n             * position when a cell is dragged and a row context is detected.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {Row} mouseRowContext\n             * Row context.\n             */\n            onCellDragRowCtx(e, mouseRowContext) {\n                const dragDrop = this, dropPointerSize = dragDrop.options.dropPointerSize, rowOffsets = GUIElement.getOffsets(mouseRowContext), rowLevelInfo = mouseRowContext.getRowLevelInfo(e.clientY);\n                let cell, cellOffsets;\n                if (rowLevelInfo) {\n                    for (let i = 0, iEnd = rowLevelInfo.rowLevel.cells.length; i < iEnd; ++i) {\n                        cell = rowLevelInfo.rowLevel.cells[i];\n                        cellOffsets = GUIElement.getOffsets(cell);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(cellOffsets), dashOffsets = dragDrop.editMode.board.container\n                            .getBoundingClientRect(), levelHeight = (rowLevelInfo.rowLevel.bottom -\n                            rowLevelInfo.rowLevel.top);\n                        if (cell.isVisible) {\n                            if (height < 0.8 * levelHeight &&\n                                cellOffsets.left <= e.clientX &&\n                                cellOffsets.right >= e.clientX) {\n                                if (cellOffsets.top > e.clientY) {\n                                    // @ToDo - Mouse above the cell.\n                                }\n                                else if (cellOffsets.bottom < e.clientY) {\n                                    // Mouse below the cell.\n                                    dragDrop.showDropPointer(cellOffsets.left - dashOffsets.left, cellOffsets.top - dashOffsets.top + height, width, levelHeight - height);\n                                    dragDrop.dropPointer.align = 'nestedBottom';\n                                    dragDrop.dropContext = cell;\n                                }\n                                i = iEnd; // Stop the loop\n                            }\n                            else if ((i === 0 && cellOffsets.left > e.clientX) ||\n                                (i === iEnd - 1 && cellOffsets.right < e.clientX)) {\n                                if (cellOffsets.left > e.clientX) {\n                                    // @ToDo - Mouse on the cell left side.\n                                }\n                                else if (cellOffsets.right < e.clientX) {\n                                    // Mouse on the cell right side.\n                                    const pointerWidth = rowOffsets.right - cellOffsets.right;\n                                    dragDrop.showDropPointer(cellOffsets.left + ((i === 0 && cellOffsets.left > e.clientX) ?\n                                        0 :\n                                        width) - dropPointerSize / 2 - dashOffsets.left, cellOffsets.top - dashOffsets.top, pointerWidth > dropPointerSize ?\n                                        pointerWidth :\n                                        dropPointerSize, levelHeight || height);\n                                    dragDrop.dropPointer.align = 'right';\n                                    dragDrop.dropContext = cell;\n                                }\n                                i = iEnd; // Stop the loop\n                            }\n                        }\n                        else if (!cell.isVisible && cell === dragDrop.context) {\n                            // Element is not visible.\n                            dragDrop.dropContext = void 0;\n                            dragDrop.hideDropPointer();\n                        }\n                    }\n                }\n            }\n            /**\n             * Unmounts dropped cell and mounts it in a new position.\n             * When cell is dragged as a row also creates a new row\n             * and mounts cell there.\n             *\n             * @param {Cell} contextCell\n             * Cell used as a dragDrop context.\n             */\n            onCellDragEnd(contextCell) {\n                const dragDrop = this, draggedCell = contextCell || dragDrop.context;\n                let dropContext = dragDrop.dropContext;\n                if (dragDrop.dropPointer.align && dropContext && draggedCell) {\n                    draggedCell.row.unmountCell(draggedCell);\n                    // Destroy row when empty.\n                    if (draggedCell.row.cells.length === 0) {\n                        draggedCell.row.destroy();\n                    }\n                    if ((dragDrop.dropPointer.align === 'top' ||\n                        dragDrop.dropPointer.align === 'bottom') &&\n                        dropContext.getType() === Globals.guiElementType.row) {\n                        dropContext = dropContext;\n                        const newRow = dropContext.layout.addRow({}, void 0, (dropContext.layout.getRowIndex(dropContext) || 0) +\n                            (dragDrop.dropPointer.align === 'bottom' ? 1 : 0));\n                        newRow.mountCell(draggedCell, 0);\n                    }\n                    else if (dragDrop.dropPointer.align === 'nestedBottom' &&\n                        dropContext.getType() === Globals.guiElementType.cell) {\n                        // Create nesting.\n                        const dropContextCell = dropContext;\n                        const row = dropContextCell.row;\n                        const dropContextCellIndex = row.getCellIndex(dropContextCell);\n                        row.unmountCell(dropContextCell);\n                        const newCell = row.addCell({\n                            id: GUIElement.createElementId('col-nested-'),\n                            layout: {\n                                rows: [{}, {}]\n                            }\n                        }, void 0, dropContextCellIndex);\n                        if (newCell.nestedLayout) {\n                            newCell.nestedLayout.rows[0].mountCell(dropContextCell);\n                            newCell.nestedLayout.rows[1].mountCell(draggedCell);\n                        }\n                    }\n                    else if (dropContext.getType() === Globals.guiElementType.cell) {\n                        dropContext = dropContext;\n                        dropContext.row.mountCell(draggedCell, (dropContext.row.getCellIndex(dropContext) || 0) +\n                            (dragDrop.dropPointer.align === 'right' ? 1 : 0));\n                    }\n                }\n                // Call cellResize board event.\n                fireEvent(dragDrop.editMode.board, 'cellResize', { cell: draggedCell });\n                fireEvent(draggedCell.row, 'cellChange', { cell: draggedCell, row: draggedCell.row });\n                dragDrop.hideDropPointer();\n                draggedCell.show();\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        DragDrop.defaultOptions = {\n            enabled: true,\n            rowDropOffset: 30,\n            cellDropOffset: 30,\n            dropPointerSize: 16\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DragDrop;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/Resizer.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (EditGlobals, GUIElement, U) {\n        const { merge, addEvent, createElement, fireEvent, removeEvent, pick } = U;\n        /**\n         * Class providing a resizing functionality.\n         */\n        class Resizer {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /**\n             * Creates a new instance of the Resizer class based on JSON.\n             * @internal\n             */\n            static fromJSON(editMode, json) {\n                return new Resizer(editMode, json.options);\n            }\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            /**\n             * Constructor for the Resizer class.\n             *\n             * @param {EditMode} editMode\n             * The parent editMode reference.\n             *\n             * @param {Resizer.Options} options\n             * Options for the Resizer.\n             */\n            constructor(editMode, options) {\n                this.editMode = editMode;\n                this.options = merge({}, Resizer.defaultOptions, editMode.options.resize, options);\n                this.currentCell = void 0;\n                this.isX = this.options.type.indexOf('x') > -1;\n                this.isY = this.options.type.indexOf('y') > -1;\n                this.isActive = false;\n                this.startX = 0;\n                this.tempSiblingsWidth = [];\n                this.addSnaps();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add Snap - create snaps and add events.\n             *\n             */\n            addSnaps() {\n                const iconsURLPrefix = this.editMode.iconsURLPrefix;\n                const snapWidth = this.options.snap.width || 0;\n                const snapHeight = this.options.snap.height || 0;\n                const dashboardContainer = this.editMode.board.container;\n                // Right snap\n                this.snapRight = createElement('img', {\n                    className: EditGlobals.classNames.resizeSnap + ' ' +\n                        EditGlobals.classNames.resizeSnapX,\n                    src: iconsURLPrefix + 'resize-handle.svg'\n                }, {\n                    width: snapWidth + 'px',\n                    height: snapHeight + 'px',\n                    left: -9999 + 'px'\n                }, dashboardContainer);\n                // Bottom snap\n                this.snapBottom = createElement('img', {\n                    className: EditGlobals.classNames.resizeSnap + ' ' +\n                        EditGlobals.classNames.resizeSnapY,\n                    src: iconsURLPrefix + 'resize-handle.svg'\n                }, {\n                    width: snapWidth + 'px',\n                    height: snapHeight + 'px',\n                    top: -9999 + 'px',\n                    left: '0px'\n                }, dashboardContainer);\n                this.addResizeEvents();\n            }\n            /**\n             * Hide snaps\n             *\n             */\n            disableResizer() {\n                this.isActive = false;\n                this.currentDimension = void 0;\n                this.currentCell = void 0;\n                if (this.snapRight) {\n                    this.snapRight.style.left = '-9999px';\n                }\n                if (this.snapBottom) {\n                    this.snapBottom.style.left = '-9999px';\n                }\n            }\n            /**\n             * Update snap position.\n             *\n             * @param cell\n             * Cell reference\n             */\n            setSnapPositions(cell) {\n                // Set current cell\n                this.currentCell = cell;\n                // Set position of snaps\n                const cellOffsets = GUIElement.getOffsets(cell, this.editMode.board.container);\n                const left = cellOffsets.left || 0;\n                const top = cellOffsets.top || 0;\n                const { width, height } = GUIElement.getDimFromOffsets(cellOffsets);\n                const snapWidth = (this.options.snap.width || 0);\n                const snapHeight = (this.options.snap.height || 0);\n                if (this.snapRight) {\n                    this.snapRight.style.left = (left + width - snapWidth) + 'px';\n                    this.snapRight.style.top = top + (height / 2) - (snapHeight / 2) + 'px';\n                }\n                if (this.snapBottom) {\n                    this.snapBottom.style.top = (top + height - snapHeight) + 'px';\n                    this.snapBottom.style.left = (left + (width / 2) - (snapWidth / 2)) + 'px';\n                }\n            }\n            /**\n             * Method detects siblings and auto-width applied by flex. The resizer\n             * requires static widths for correct calculations, so we need to apply\n             * temporary width on siblings.\n             */\n            setTempWidthSiblings() {\n                const currentCell = this.currentCell;\n                if (currentCell) {\n                    const currentRwdMode = this.editMode.rwdMode, cellOffsets = GUIElement.getOffsets(currentCell), rowLevelInfo = currentCell.row.getRowLevelInfo(cellOffsets.top), rowLevelCells = (rowLevelInfo && rowLevelInfo.rowLevel.cells) || [];\n                    let cellContainer, cell, optionsWidth;\n                    for (let i = 0, iEnd = rowLevelCells.length; i < iEnd; ++i) {\n                        cell = rowLevelCells[i];\n                        cellContainer = cell.container;\n                        optionsWidth = pick(((cell.options.responsive || {})[currentRwdMode] || {})\n                            .width, cell.options.width);\n                        // Do not convert width on the current cell and next siblings.\n                        if (cell === currentCell) {\n                            break;\n                        }\n                        if (cellContainer &&\n                            (!optionsWidth || optionsWidth === 'auto')) {\n                            cellContainer.style.flex =\n                                '0 0 ' + cellContainer.offsetWidth + 'px';\n                            this.tempSiblingsWidth.push(cell);\n                        }\n                    }\n                }\n            }\n            /**\n             * Revert widths to auto.\n             */\n            revertSiblingsAutoWidth() {\n                const tempSiblingsWidth = this.tempSiblingsWidth;\n                let cellContainer, cellResize;\n                for (let i = 0, iEnd = tempSiblingsWidth.length; i < iEnd; ++i) {\n                    cellContainer = tempSiblingsWidth[i].container;\n                    if (cellContainer) {\n                        cellContainer.style.flex = '1 1 0%';\n                        cellResize = tempSiblingsWidth[i];\n                    }\n                }\n                this.tempSiblingsWidth = [];\n                // Call cellResize dashboard event.\n                if (cellResize) {\n                    fireEvent(this.editMode.board, 'cellResize', {\n                        cell: cellResize\n                    });\n                    fireEvent(cellResize.row, 'cellChange', {\n                        cell: cellResize,\n                        row: cellResize.row\n                    });\n                }\n            }\n            /**\n             * Add mouse events to snaps\n             *\n             */\n            addResizeEvents() {\n                const resizer = this;\n                let mouseDownSnapX, mouseDownSnapY, mouseMoveSnap, mouseUpSnap;\n                resizer.mouseDownSnapX = mouseDownSnapX = function (e) {\n                    resizer.isActive = true;\n                    resizer.currentDimension = 'x';\n                    resizer.editMode.hideToolbars(['row', 'cell']);\n                    resizer.setTempWidthSiblings();\n                    resizer.startX = e.clientX;\n                };\n                resizer.mouseDownSnapY = mouseDownSnapY = function (e) {\n                    resizer.isActive = true;\n                    resizer.currentDimension = 'y';\n                    resizer.editMode.hideToolbars(['row', 'cell']);\n                };\n                resizer.mouseMoveSnap = mouseMoveSnap = function (e) {\n                    if (resizer.isActive) {\n                        resizer.onMouseMove(e);\n                    }\n                };\n                resizer.mouseUpSnap = mouseUpSnap = function (e) {\n                    if (resizer.isActive) {\n                        resizer.isActive = false;\n                        resizer.currentDimension = void 0;\n                        resizer.revertSiblingsAutoWidth();\n                        resizer.editMode.showToolbars(['row', 'cell'], resizer.currentCell);\n                        if (resizer.currentCell) {\n                            resizer.setSnapPositions(resizer.currentCell);\n                        }\n                    }\n                };\n                // Add mouse events\n                addEvent(this.snapRight, 'mousedown', mouseDownSnapX);\n                addEvent(this.snapBottom, 'mousedown', mouseDownSnapY);\n                addEvent(document, 'mousemove', mouseMoveSnap);\n                addEvent(document, 'mouseup', mouseUpSnap);\n                // Touch events\n                // if (hasTouch) {\n                //     addEvent(snapX, 'touchstart', mouseDownSnapX);\n                //     addEvent(snapY, 'touchstart', mouseDownSnapY);\n                //     if (!rowContainer.hcEvents.mousemove) {\n                //         addEvent(rowContainer, 'touchmove', mouseMoveSnap);\n                //         addEvent(rowContainer, 'touchend', mouseUpSnap);\n                //     }\n                // }\n                const runReflow = () => {\n                    if (resizer.currentCell) {\n                        resizer.setSnapPositions(resizer.currentCell);\n                    }\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(runReflow);\n                    this.resizeObserver.observe(resizer.editMode.board.container);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', runReflow);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * General method used on resizing.\n             *\n             * @param {global.Event} e\n             * A mouse event.\n             *\n             */\n            onMouseMove(e) {\n                const currentCell = this.currentCell;\n                const cellContainer = currentCell && currentCell.container;\n                const currentDimension = this.currentDimension;\n                const sidebar = this.editMode.sidebar;\n                const currentRwdMode = sidebar && sidebar.editMode.rwdMode;\n                if (currentCell &&\n                    cellContainer &&\n                    !((currentCell.row.layout.board.editMode || {}).dragDrop || {})\n                        .isActive) {\n                    const cellOffsets = GUIElement.getOffsets(currentCell);\n                    const { width: parentRowWidth } = GUIElement.getDimFromOffsets(GUIElement.getOffsets(currentCell.row));\n                    // Resize width\n                    if (currentDimension === 'x') {\n                        const newWidth = (Math.min(e.clientX - cellOffsets.left, parentRowWidth) /\n                            parentRowWidth) *\n                            100 +\n                            '%';\n                        currentCell.setSize(newWidth);\n                        currentCell.updateSize(newWidth, currentRwdMode);\n                        this.startX = e.clientX;\n                    }\n                    // Resize height\n                    if (currentDimension === 'y') {\n                        currentCell.setSize(void 0, e.clientY - cellOffsets.top);\n                    }\n                    // Call cellResize dashboard event.\n                    fireEvent(this.editMode.board, 'cellResize', {\n                        cell: currentCell\n                    });\n                    fireEvent(currentCell.row, 'cellChange', {\n                        cell: currentCell,\n                        row: currentCell.row\n                    });\n                    this.setSnapPositions(currentCell);\n                }\n            }\n            /**\n             * Destroy resizer\n             */\n            destroy() {\n                const snaps = ['snapRight', 'snapBottom'];\n                let snap;\n                // Unbind events\n                removeEvent(document, 'mousemove');\n                removeEvent(document, 'mouseup');\n                this.resizeObserver?.unobserve(this.editMode.board.container);\n                for (let i = 0, iEnd = snaps.length; i < iEnd; ++i) {\n                    snap = this[snaps[i]];\n                    // Unbind event\n                    removeEvent(snap, 'mousedown');\n                    // Destroy snap\n                    snap.remove();\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Resizer.JSON}\n             * Class JSON of this Resizer instance.\n             */\n            toJSON() {\n                const options = this.options;\n                return {\n                    $class: 'Dashboards.Action.Resizer',\n                    options: {\n                        enabled: options.enabled,\n                        styles: {\n                            minWidth: options.styles.minWidth,\n                            minHeight: options.styles.minHeight\n                        },\n                        type: options.type,\n                        snap: {\n                            width: options.snap.width,\n                            height: options.snap.height\n                        }\n                    }\n                };\n            }\n        }\n        Resizer.defaultOptions = {\n            enabled: true,\n            styles: {\n                minWidth: 20,\n                minHeight: 50\n            },\n            type: 'xy',\n            snap: {\n                width: 9,\n                height: 17\n            }\n        };\n\n        return Resizer;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/ConfirmationPopup.js', [_modules['Core/Utilities.js'], _modules['Shared/BaseForm.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js']], function (U, BaseForm, EditGlobals, EditRenderer) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement } = U;\n        /**\n         * Class to create confirmation popup.\n         */\n        class ConfirmationPopup extends BaseForm {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the ConfirmationPopup.\n             *\n             * @param parentDiv\n             * Parent div where the popup will be added.\n             *\n             * @param iconsURL\n             * URL to the icons.\n             *\n             * @param editMode\n             * The EditMode instance.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            constructor(parentDiv, iconsURL, editMode, options) {\n                iconsURL =\n                    options && options.close && options.close.icon ?\n                        options.close.icon :\n                        iconsURL;\n                super(parentDiv, iconsURL);\n                this.editMode = editMode;\n                this.options = options;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Returns popup container.\n             *\n             * @param parentDiv\n             * Parent div where the popup will be added.\n             *\n             * @param className\n             * Class name added to the popup container.\n             */\n            createPopupContainer(parentDiv, className = EditGlobals.classNames.confirmationPopup) {\n                return super.createPopupContainer(parentDiv, className);\n            }\n            /**\n             * Adds close button to the popup.\n             *\n             * @param className\n             * Class name added to the close button.\n             */\n            addCloseButton(className = EditGlobals.classNames.popupCloseButton) {\n                return super.addCloseButton(className);\n            }\n            /**\n             * Adds content inside the popup.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            renderContent(options) {\n                // Render content wrapper\n                this.contentContainer = createElement('div', {\n                    className: EditGlobals.classNames.popupContentContainer\n                }, {}, this.container);\n                const popupContainer = this.contentContainer.parentNode;\n                popupContainer.style.marginTop = '0px';\n                const offsetTop = popupContainer.getBoundingClientRect().top;\n                popupContainer.style.marginTop = (offsetTop < 0 ? Math.abs(offsetTop - 200) : 200) + 'px';\n                // Render text\n                EditRenderer.renderText(this.contentContainer, {\n                    title: options.text || ''\n                });\n                // Render button wrapper\n                this.buttonContainer = createElement('div', {\n                    className: EditGlobals.classNames.popupButtonContainer\n                }, {}, this.container);\n                // Render cancel buttons\n                EditRenderer.renderButton(this.buttonContainer, {\n                    text: options.cancelButton.value,\n                    className: EditGlobals.classNames.popupCancelBtn,\n                    callback: options.cancelButton.callback\n                });\n                // Confirm\n                EditRenderer.renderButton(this.buttonContainer, {\n                    text: options.confirmButton.value,\n                    className: EditGlobals.classNames.popupConfirmBtn,\n                    callback: () => {\n                        // Run callback\n                        // confirmCallback.call(context);\n                        options.confirmButton.callback.call(options.confirmButton.context);\n                        // Hide popup\n                        this.closePopup();\n                    }\n                });\n            }\n            /**\n             * Shows confirmation popup.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            show(options) {\n                this.showPopup();\n                this.renderContent(options);\n                this.editMode.setEditOverlay();\n            }\n            /**\n             * Hides confirmation popup.\n             */\n            closePopup() {\n                super.closePopup();\n                this.editMode.setEditOverlay(true);\n            }\n        }\n\n        return ConfirmationPopup;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditMode.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js'], _modules['Dashboards/EditMode/Toolbar/CellEditToolbar.js'], _modules['Dashboards/EditMode/Toolbar/RowEditToolbar.js'], _modules['Dashboards/EditMode/SidebarPopup.js'], _modules['Dashboards/EditMode/EditContextMenu.js'], _modules['Dashboards/Actions/DragDrop.js'], _modules['Dashboards/Actions/Resizer.js'], _modules['Dashboards/EditMode/ConfirmationPopup.js'], _modules['Dashboards/Actions/ContextDetection.js'], _modules['Dashboards/Layout/GUIElement.js']], function (U, EditGlobals, EditRenderer, CellEditToolbar, RowEditToolbar, SidebarPopup, EditContextMenu, DragDrop, Resizer, ConfirmationPopup, ContextDetection, GUIElement) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, css, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class EditMode {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Edit mode constructor.\n             * @internal\n              *\n             * @param board\n             * Board instance\n             *\n             * @param options\n             * Edit mode options\n             */\n            constructor(board, options) {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * @internal\n                 */\n                this.active = false;\n                /**\n                 * URL from which the icons will be fetched.\n                 */\n                this.iconsURLPrefix = 'https://code.highcharts.com/dashboards/1.1.3/gfx/dashboards-icons/';\n                this.iconsURLPrefix =\n                    (options && options.iconsURLPrefix) || this.iconsURLPrefix;\n                this.options = merge(\n                // Default options.\n                {\n                    dragDrop: {\n                        enabled: true\n                    },\n                    resize: {\n                        enabled: true\n                    },\n                    settings: {\n                        enabled: true\n                    },\n                    enabled: true,\n                    contextMenu: {\n                        icon: this.iconsURLPrefix + 'menu.svg'\n                    },\n                    tools: {\n                        addComponentBtn: {\n                            enabled: true,\n                            icon: this.iconsURLPrefix + 'add.svg'\n                        },\n                        rwdButtons: {\n                            enabled: true,\n                            icons: {\n                                small: this.iconsURLPrefix + 'smartphone.svg',\n                                medium: this.iconsURLPrefix + 'tablet.svg',\n                                large: this.iconsURLPrefix + 'computer.svg'\n                            }\n                        }\n                    },\n                    confirmationPopup: {\n                        close: {\n                            icon: this.iconsURLPrefix + 'close.svg'\n                        }\n                    },\n                    toolbars: {\n                        cell: {\n                            enabled: true\n                        },\n                        row: {\n                            enabled: true\n                        }\n                    }\n                }, options || {});\n                this.board = board;\n                this.lang = merge({}, EditGlobals.lang, this.options.lang);\n                this.contextPointer = {\n                    isVisible: false,\n                    element: createElement('div', { className: EditGlobals.classNames.contextDetectionPointer }, {}, this.board.container)\n                };\n                this.isInitialized = false;\n                this.isContextDetectionActive = false;\n                this.tools = {};\n                this.rwdMenu = [];\n                this.rwdMode = this.board.getLayoutContainerSize();\n                this.createTools();\n                this.confirmationPopup = new ConfirmationPopup(board.container, this.iconsURLPrefix, this, this.options.confirmationPopup);\n                // Create edit overlay.\n                this.editOverlay = createElement('div', {\n                    className: EditGlobals.classNames.editOverlay\n                }, {}, board.container);\n                this.isEditOverlayActive = false;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Event to fire on click of the context button.\n             * @internal\n             */\n            onContextBtnClick() {\n                const editMode = this;\n                // Toggle context menu visibility.\n                if (editMode.tools.contextMenu) {\n                    if (!editMode.tools.contextMenu.isVisible) {\n                        editMode.tools.contextMenu\n                            .updatePosition(editMode.tools.contextButtonElement);\n                    }\n                    editMode.tools.contextMenu.setVisible(!editMode.tools.contextMenu.isVisible);\n                }\n            }\n            /**\n             * Activate or deactivate edit mode.\n             */\n            onEditModeToggle() {\n                const editMode = this;\n                if (editMode.active) {\n                    editMode.deactivate();\n                }\n                else {\n                    editMode.activate();\n                }\n            }\n            /**\n             * Init the instance of edit mode.\n             * @internal\n             */\n            init() {\n                const editMode = this;\n                if (this.options.resize?.enabled) {\n                    editMode.resizer = new Resizer(editMode, editMode.options.resize);\n                }\n                editMode.dragDrop = new DragDrop(editMode, editMode.options.dragDrop);\n                // Init rowToolbar.\n                if (editMode.options.toolbars?.row?.enabled && !editMode.rowToolbar) {\n                    editMode.rowToolbar = new RowEditToolbar(editMode);\n                }\n                // Init cellToolbar.\n                if (editMode.options.toolbars?.cell?.enabled && !editMode.cellToolbar) {\n                    editMode.cellToolbar = new CellEditToolbar(editMode);\n                }\n                // Init Sidebar.\n                if (!editMode.sidebar) {\n                    editMode.sidebar = new SidebarPopup(this.board.container, this.iconsURLPrefix, editMode);\n                }\n                editMode.isInitialized = true;\n            }\n            /**\n             * Init events for edit mode.\n             * @internal\n             */\n            initEvents() {\n                const editMode = this, board = editMode.board;\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    editMode.setLayoutEvents(board.layouts[i]);\n                }\n                if (editMode.cellToolbar) {\n                    // Stop context detection when mouse on cell toolbar.\n                    addEvent(editMode.cellToolbar.container, 'mouseenter', function () {\n                        editMode.stopContextDetection();\n                    });\n                    addEvent(editMode.cellToolbar.container, 'mouseleave', function () {\n                        editMode.isContextDetectionActive = true;\n                    });\n                }\n                if (editMode.rowToolbar) {\n                    // Stop context detection when mouse on row toolbar.\n                    addEvent(editMode.rowToolbar.container, 'mouseenter', function () {\n                        editMode.stopContextDetection();\n                    });\n                    addEvent(editMode.rowToolbar.container, 'mouseleave', function () {\n                        editMode.isContextDetectionActive = true;\n                    });\n                }\n                addEvent(board.layoutsWrapper, 'mousemove', editMode.onDetectContext.bind(editMode));\n                addEvent(board.layoutsWrapper, 'click', editMode.onContextConfirm.bind(editMode));\n                addEvent(board.layoutsWrapper, 'mouseleave', () => {\n                    editMode.hideContextPointer();\n                });\n            }\n            /**\n             * Set events for the layout.\n             * @internal\n             */\n            setLayoutEvents(layout) {\n                const editMode = this;\n                for (let j = 0, jEnd = layout.rows.length; j < jEnd; ++j) {\n                    const row = layout.rows[j];\n                    editMode.setRowEvents(row);\n                    for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                        editMode.setCellEvents(row.cells[k]);\n                    }\n                }\n            }\n            /**\n             * Set events for the row.\n             * @internal\n             */\n            setRowEvents(row) {\n                const editMode = this;\n                // Init dragDrop row events.\n                if (editMode.dragDrop) {\n                    const dragDrop = editMode.dragDrop;\n                    addEvent(row.container, 'mouseenter', function () {\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseRowContext = row;\n                        }\n                    });\n                    addEvent(row.container, 'mousemove', function (e) {\n                        if (dragDrop.isActive && e.target === row.container) {\n                            dragDrop.mouseRowContext = row;\n                        }\n                    });\n                    addEvent(row.container, 'mouseleave', function (e) {\n                        if (dragDrop.isActive && dragDrop.mouseRowContext === row) {\n                            dragDrop.mouseRowContext = void 0;\n                        }\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseRowContext = void 0;\n                        }\n                    });\n                }\n            }\n            /**\n             * Set events for the cell.\n             * @internal\n             */\n            setCellEvents(cell) {\n                const editMode = this;\n                if (cell.nestedLayout) {\n                    editMode.setLayoutEvents(cell.nestedLayout);\n                }\n                else if (editMode.cellToolbar && cell.container) {\n                    // Init dragDrop cell events.\n                    if (editMode.dragDrop || editMode.resizer) {\n                        const dragDrop = editMode.dragDrop;\n                        addEvent(cell.container, 'mouseenter', function (e) {\n                            if (editMode.isContextDetectionActive) {\n                                editMode.mouseCellContext = cell;\n                            }\n                        });\n                        addEvent(cell.container, 'mousemove', function (e) {\n                            if (dragDrop &&\n                                dragDrop.isActive &&\n                                e.target === cell.container) {\n                                dragDrop.mouseCellContext = cell;\n                                dragDrop.mouseRowContext = void 0;\n                            }\n                        });\n                        addEvent(cell.container, 'mouseleave', function () {\n                            if (dragDrop &&\n                                dragDrop.isActive &&\n                                dragDrop.mouseCellContext === cell) {\n                                dragDrop.mouseCellContext = void 0;\n                            }\n                            if (editMode.isContextDetectionActive) {\n                                editMode.mouseCellContext = void 0;\n                            }\n                        });\n                    }\n                }\n            }\n            /**\n             * Activate the edit mode.\n             * @internal\n             */\n            activate() {\n                const editMode = this;\n                // Init edit mode.\n                if (!editMode.isInitialized) {\n                    editMode.init();\n                    editMode.initEvents();\n                }\n                // Set edit mode active class to dashboard.\n                editMode.board.container.classList.add(EditGlobals.classNames.editModeEnabled);\n                // TODO all buttons should be activated, add some wrapper?\n                if (this.addComponentBtn) {\n                    this.addComponentBtn.style.display = 'block';\n                }\n                // Sets proper rwd mode.\n                editMode.rwdMode = editMode.board.getLayoutContainerSize();\n                // Show responsive buttons.\n                this.showRwdButtons();\n                editMode.active = true;\n                editMode.isContextDetectionActive = true;\n            }\n            /**\n             * Deactivate the edit mode.\n             * @internal\n             */\n            deactivate() {\n                const editMode = this, dashboardCnt = editMode.board.container;\n                dashboardCnt.classList.remove(EditGlobals.classNames.editModeEnabled);\n                // Hide toolbars.\n                editMode.hideToolbars();\n                // Remove highlight from the context row if exists.\n                if (this.editCellContext) {\n                    this.editCellContext.row.setHighlight(true);\n                }\n                // TODO all buttons should be deactivated.\n                if (this.addComponentBtn) {\n                    this.addComponentBtn.style.display = 'none';\n                }\n                if (editMode.resizer) {\n                    editMode.resizer.disableResizer();\n                }\n                // Hide responsive buttons.\n                this.hideRwdButtons();\n                // Disable responsive width and restore elements to their original\n                // positions and sizes.\n                this.board.layoutsWrapper.style.width = '100%';\n                this.board.reflow();\n                editMode.active = false;\n                editMode.stopContextDetection();\n                this.editCellContext = void 0;\n                this.potentialCellContext = void 0;\n            }\n            /**\n             * Function to check whether the edit mode is activated.\n             * @internal\n             *\n             * @returns\n             * Whether the edit mode is activated.\n             */\n            isActive() {\n                return this.active;\n            }\n            /**\n             * Method for hiding edit toolbars.\n             * @internal\n             *\n             * @param toolbarTypes\n             * The array of toolbar names to hide ('cell', 'row', 'sidebar').\n             */\n            hideToolbars(toolbarTypes) {\n                const editMode = this, toolbarsToHide = toolbarTypes || ['cell', 'row', 'sidebar'];\n                for (let i = 0, iEnd = toolbarsToHide.length; i < iEnd; ++i) {\n                    switch (toolbarsToHide[i]) {\n                        case 'cell': {\n                            if (editMode.cellToolbar &&\n                                editMode.cellToolbar.isVisible) {\n                                editMode.cellToolbar.hide();\n                            }\n                            break;\n                        }\n                        case 'row': {\n                            if (editMode.rowToolbar && editMode.rowToolbar.isVisible) {\n                                editMode.rowToolbar.hide();\n                            }\n                            break;\n                        }\n                        case 'sidebar': {\n                            if (editMode.sidebar && editMode.sidebar.isVisible) {\n                                editMode.sidebar.hide();\n                            }\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Method for hiding edit toolbars.\n             * @internal\n             *\n             * @param toolbarTypes\n             * The array of toolbar names to hide ('cell', 'row', 'sidebar').\n             *\n             * @param currentCell\n             * The cell reference for toolbar.\n             *\n             */\n            showToolbars(toolbarTypes, currentCell) {\n                const editMode = this, toolbarsToShow = toolbarTypes || ['cell', 'row', 'sidebar'];\n                for (let i = 0, iEnd = toolbarsToShow.length; i < iEnd; ++i) {\n                    switch (toolbarsToShow[i]) {\n                        case 'cell': {\n                            if (currentCell && editMode.cellToolbar) {\n                                editMode.cellToolbar.isVisible = true;\n                                editMode.cellToolbar.showToolbar(currentCell);\n                            }\n                            break;\n                        }\n                        case 'row': {\n                            if (currentCell && currentCell.row && editMode.rowToolbar) {\n                                editMode.rowToolbar.isVisible = true;\n                                editMode.rowToolbar.showToolbar(currentCell.row);\n                            }\n                            break;\n                        }\n                        case 'sidebar': {\n                            if (editMode.sidebar && !editMode.sidebar.isVisible) {\n                                editMode.sidebar.show();\n                            }\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Creates the buttons such as `addComponent` button, rwd buttons and\n             * context menu button and its container.\n             * @internal\n             */\n            createTools() {\n                const editMode = this;\n                const options = this.options;\n                // Create tools container\n                this.tools.container = document.createElement('div');\n                this.tools.container.classList.add(EditGlobals.classNames.editTools);\n                this.board.layoutsWrapper.parentNode.insertBefore(this.tools.container, this.board.layoutsWrapper);\n                // Create context menu button\n                if (options.contextMenu && options.contextMenu.enabled) {\n                    this.tools.contextButtonElement = EditRenderer.renderContextButton(this.tools.container, editMode);\n                    // Init contextMenu if doesn't exist.\n                    if (!editMode.tools.contextMenu) {\n                        editMode.tools.contextMenu = new EditContextMenu(editMode.board.container, editMode.options.contextMenu || {}, editMode);\n                    }\n                }\n                if (options.tools?.rwdButtons?.enabled) {\n                    this.createRwdMenu();\n                }\n                // Create add component button\n                if (options.tools?.addComponentBtn?.enabled &&\n                    options.toolbars?.cell?.enabled) {\n                    const addIconURL = options.tools.addComponentBtn.icon;\n                    this.addComponentBtn = EditRenderer.renderButton(this.tools.container, {\n                        className: EditGlobals.classNames.editToolsBtn,\n                        icon: addIconURL,\n                        text: this.lang.addComponent,\n                        callback: () => {\n                            // Sidebar trigger\n                            if (editMode.sidebar) {\n                                editMode.sidebar.show();\n                                editMode.setEditOverlay();\n                            }\n                        },\n                        style: {\n                            display: 'none'\n                        }\n                    });\n                }\n            }\n            /**\n             * Creates the responsive width buttons.\n             * @internal\n             */\n            createRwdMenu() {\n                const rwdBreakingPoints = this.board.options.responsiveBreakpoints;\n                const toolsContainer = this.tools.container;\n                const options = this.options;\n                const rwdIcons = options?.tools?.rwdButtons?.icons || {};\n                for (const key in rwdBreakingPoints) {\n                    if (toolsContainer) {\n                        const btn = EditRenderer.renderButton(toolsContainer, {\n                            className: EditGlobals.classNames.editToolsBtn,\n                            icon: rwdIcons[key] || '',\n                            text: this.lang[key],\n                            callback: (e) => {\n                                const button = e.target, isSelected = button.classList.contains('selected');\n                                // Deselect given button and reset board width.\n                                if (isSelected) {\n                                    button.classList.remove('selected');\n                                    this.board.layoutsWrapper.style.width = '';\n                                    this.rwdMode = '';\n                                }\n                                else {\n                                    // Deselect all buttons.\n                                    this.rwdMenu.forEach((btn) => {\n                                        btn.classList.remove('selected');\n                                    });\n                                    // Select given button and change board width.\n                                    button.classList.add('selected');\n                                    this.board.layoutsWrapper.style.width =\n                                        rwdBreakingPoints[key] + 'px';\n                                    this.rwdMode = key;\n                                }\n                                // Reflow elements.\n                                this.board.reflow();\n                            },\n                            style: {\n                                display: 'none'\n                            }\n                        });\n                        if (btn) {\n                            this.rwdMenu.push(btn);\n                        }\n                    }\n                }\n            }\n            /**\n             * Shows responsive buttons.\n             * @internal\n             */\n            showRwdButtons() {\n                for (let i = 0, iEnd = this.rwdMenu.length; i < iEnd; ++i) {\n                    this.rwdMenu[i].style.display = 'block';\n                }\n            }\n            /**\n             * Hides responsive buttons.\n             * @internal\n             */\n            hideRwdButtons() {\n                for (let i = 0, iEnd = this.rwdMenu.length; i < iEnd; ++i) {\n                    this.rwdMenu[i].style.display = 'none';\n                }\n            }\n            /**\n             * Event fired when detecting context on drag&drop.\n             *\n             * @param e\n             * Mouse pointer event.\n             */\n            onDetectContext(e) {\n                const editMode = this, offset = 50; // TODO - add it from options.\n                if (editMode.isActive() &&\n                    editMode.isContextDetectionActive &&\n                    (editMode.mouseCellContext || editMode.mouseRowContext) &&\n                    !(editMode.dragDrop || {}).isActive) {\n                    let cellContext, rowContext;\n                    if (editMode.mouseCellContext) {\n                        cellContext = ContextDetection\n                            .getContext(editMode.mouseCellContext, e, offset).cell;\n                    }\n                    else if (editMode.mouseRowContext) {\n                        rowContext = editMode.mouseRowContext;\n                        cellContext = rowContext.layout.parentCell;\n                    }\n                    this.potentialCellContext = cellContext;\n                    if (cellContext) {\n                        const cellContextOffsets = GUIElement\n                            .getOffsets(cellContext, editMode.board.container);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(cellContextOffsets);\n                        editMode.showContextPointer(cellContextOffsets.left, cellContextOffsets.top, width, height);\n                    }\n                }\n            }\n            /**\n             * Stops the context detection.\n             */\n            stopContextDetection() {\n                this.isContextDetectionActive = false;\n                if (this.dragDrop) {\n                    this.dragDrop.mouseCellContext = void 0;\n                }\n                this.mouseCellContext = void 0;\n                this.hideContextPointer();\n            }\n            /**\n             * Confirms the selected context.\n             */\n            onContextConfirm() {\n                if (this.isContextDetectionActive &&\n                    this.potentialCellContext &&\n                    this.editCellContext !== this.potentialCellContext) {\n                    this.setEditCellContext(this.potentialCellContext, this.editCellContext);\n                }\n            }\n            /**\n             * Sets the edit cell context.\n             * @internal\n             */\n            setEditCellContext(editCellContext, oldEditCellContext) {\n                const editMode = this, oldContextRow = oldEditCellContext && oldEditCellContext.row;\n                editMode.editCellContext = editCellContext;\n                editMode.showToolbars(['row', 'cell'], editCellContext);\n                if (!oldContextRow || oldContextRow !== editCellContext.row) {\n                    if (oldContextRow) {\n                        // Remove highlight from the previous row.\n                        oldContextRow.setHighlight(true);\n                    }\n                    // Add highlight to the context row.\n                    editCellContext.row.setHighlight();\n                }\n                if (editMode.resizer) {\n                    editMode.resizer.setSnapPositions(editCellContext);\n                }\n            }\n            /**\n             * Method for showing and positioning context pointer.\n             * @internal\n             */\n            showContextPointer(left, top, width, height) {\n                this.contextPointer.isVisible = true;\n                css(this.contextPointer.element, {\n                    display: 'block',\n                    left: left + 'px',\n                    top: top + 'px',\n                    height: height + 'px',\n                    width: width + 'px'\n                });\n            }\n            /**\n             * Method for hiding context pointer.\n             * @internal\n             */\n            hideContextPointer() {\n                if (this.contextPointer.isVisible) {\n                    this.contextPointer.isVisible = false;\n                    this.contextPointer.element.style.display = 'none';\n                }\n            }\n            /**\n             * Adds/Removes the edit mode overlay.\n             * @internal\n             *\n             * @param remove\n             * Whether the edit overlay should be removed.\n             */\n            setEditOverlay(remove) {\n                const editMode = this, cnt = editMode.editOverlay, isSet = cnt.classList.contains(EditGlobals.classNames.editOverlayActive);\n                if (!remove && !isSet) {\n                    cnt.classList.add(EditGlobals.classNames.editOverlayActive);\n                    editMode.isEditOverlayActive = true;\n                }\n                else if (remove && isSet) {\n                    cnt.classList.remove(EditGlobals.classNames.editOverlayActive);\n                    editMode.isEditOverlayActive = false;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return EditMode;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Fullscreen.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js']], function (U, Globals) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent } = U;\n        class Fullscreen {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(DashboardClass) {\n                this.isOpen = false;\n                this.board = DashboardClass;\n                // add class to allow scroll element\n                this.board.boardWrapper.classList.add(Globals.classNamePrefix + '-fullscreen');\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Toggles displaying the board in fullscreen mode.\n             */\n            toggle() {\n                const fullscreen = this, isOpen = this.isOpen;\n                fullscreen[isOpen ? 'close' : 'open']();\n            }\n            /**\n             * Display board in fullscreen.\n             */\n            open() {\n                if (this.isOpen) {\n                    return;\n                }\n                const fullscreen = this, board = fullscreen.board;\n                // Handle exitFullscreen() method when user clicks 'Escape' button.\n                const unbindChange = addEvent(board.boardWrapper.ownerDocument, // dashboard's document\n                'fullscreenchange', function () {\n                    if (fullscreen.isOpen) {\n                        fullscreen.isOpen = false;\n                        fullscreen.close();\n                    }\n                    else {\n                        fullscreen.isOpen = true;\n                        fullscreen.setButtonText();\n                    }\n                });\n                fullscreen.unbindFullscreenEvent = () => {\n                    unbindChange();\n                };\n                const promise = board.boardWrapper.requestFullscreen();\n                // eslint-disable-next-line highcharts/quote-members\n                promise.catch(() => {\n                    throw new Error('Full screen is not supported.');\n                });\n            }\n            /**\n             * Stops displaying the dashboard in fullscreen mode.\n             */\n            close() {\n                const fullscreen = this, board = fullscreen.board;\n                // Don't fire exitFullscreen() when user exited using 'Escape' button.\n                if (fullscreen.isOpen &&\n                    board.boardWrapper.ownerDocument instanceof Document) {\n                    void board.boardWrapper.ownerDocument.exitFullscreen();\n                }\n                // Unbind event as it's necessary only before exiting from fullscreen.\n                if (fullscreen.unbindFullscreenEvent) {\n                    fullscreen.unbindFullscreenEvent =\n                        fullscreen.unbindFullscreenEvent();\n                }\n                fullscreen.isOpen = false;\n                this.setButtonText();\n            }\n            /**\n             * Set the correct text depending of the fullscreen is on or of.\n             */\n            setButtonText() {\n                const editMode = this.board.editMode, contextMenu = editMode && editMode.tools.contextMenu, button = contextMenu && contextMenu.items.viewFullscreen;\n                if (button && button.innerElement) {\n                    const lang = editMode.lang;\n                    button.innerElement.innerHTML =\n                        (this.isOpen ? lang.exitFullscreen : lang.viewFullscreen) || '';\n                }\n            }\n        }\n\n        return Fullscreen;\n    });\n    _registerModule(_modules, 'Dashboards/CallbackRegistry.js', [], function () {\n        class CallbackRegistry {\n            constructor() {\n                this.registry = {};\n            }\n            addCallback(id, callback) {\n                this.registry[id] = callback;\n            }\n            getCallback(id) {\n                return this.registry[id];\n            }\n            /** @internal */\n            toJSON() {\n                const json = {};\n                Object.keys(this.registry).forEach((key) => {\n                    const entry = this.getCallback(key);\n                    const { func, type } = entry;\n                    json[key] = {\n                        func: func.toString(),\n                        type\n                    };\n                });\n                return json;\n            }\n        }\n\n        return CallbackRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Components/EditableOptions.js', [], function () {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        class EditableOptions {\n            constructor(component, bindings = EditableOptions.defaultBindings) {\n                this.component = component;\n                this.bindings = bindings;\n            }\n            getOptions() {\n                const options = this.component.options.editableOptions;\n                for (let i = 0, iEnd = options.length; i < iEnd; i++) {\n                    const option = options[i];\n                    if (option.name === 'connectorName') {\n                        const board = this.component.board;\n                        const selectOptions = !board ?\n                            [] :\n                            board.dataPool\n                                .getConnectorIds()\n                                .map((name) => ({ name }));\n                        option.selectOptions = selectOptions;\n                    }\n                }\n                return options;\n            }\n        }\n        EditableOptions.defaultBindings = {\n            keyMap: {\n                color: 'colorPicker',\n                title: 'text',\n                caption: 'text',\n                style: 'textarea'\n            },\n            typeMap: {\n                'string': 'text',\n                'number': 'input',\n                'boolean': 'toggle'\n            },\n            skipRedraw: []\n        };\n        // Bindings of basic types to \"editor components\"\n        EditableOptions.defaultTypeMap = {\n            'string': 'text',\n            'number': 'input',\n            'boolean': 'toggle'\n        };\n\n        return EditableOptions;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentUtilities;\n        (function (ComponentUtilities) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getMargins(element, includeBorders = true) {\n                const borders = {\n                    x: ['borderLeft', 'borderRight'],\n                    y: ['borderTop', 'borderBottom']\n                };\n                return {\n                    y: getStyles(element, [\n                        'marginTop',\n                        'marginBottom',\n                        ...(includeBorders ? borders.y : [])\n                    ]).reduce(sumPixels, 0),\n                    x: getStyles(element, [\n                        'marginLeft',\n                        'marginTop',\n                        ...(includeBorders ? borders.x : [])\n                    ]).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getMargins = getMargins;\n            function getPaddings(element) {\n                return {\n                    x: getStyles(element, ['paddingLeft', 'paddingRight']).reduce(sumPixels, 0),\n                    y: getStyles(element, ['paddingTop', 'paddingBottom']).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getPaddings = getPaddings;\n            function getStyles(element, styles) {\n                const elementStyles = window.getComputedStyle(element);\n                return styles.map((style) => elementStyles[style]); // Cannot use getPropertyValue?\n            }\n            ComponentUtilities.getStyles = getStyles;\n            function sumPixels(accumulator, value) {\n                if (value) {\n                    accumulator += (typeof value === 'number' ? value : parseFloat(value));\n                }\n                return accumulator;\n            }\n            ComponentUtilities.sumPixels = sumPixels;\n        })(ComponentUtilities || (ComponentUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentUtilities;\n    });\n    _registerModule(_modules, 'Dashboards/Components/SharedComponentState.js', [_modules['Dashboards/Serializable.js'], _modules['Core/Utilities.js']], function (Serializable, U) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Contains presentation information like column order, usually in relation to a\n         * table instance.\n         */\n        class SharedComponentState {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columnVisibilityMap = {};\n                this.hiddenRowIndexes = [];\n                this.selection = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             *\n             * @param {DataPresentationState.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns an ordered array of column names.\n             *\n             * @return {Array<string>}\n             * Array of column names in order.\n             */\n            getColumnOrder() {\n                return (this.columnOrder || []).slice();\n            }\n            getColumnVisibility(columnName) {\n                return this.columnVisibilityMap[columnName];\n            }\n            /**\n             * Returns a function for `Array.sort` to change the order of an array of\n             * column names. Unknown column names come last.\n             *\n             * @return {DataPresentationState.ColumnOrderCallback}\n             * Sort function to change the order.\n             */\n            getColumnSorter() {\n                const columnOrder = (this.columnOrder || []).slice();\n                if (!columnOrder.length) {\n                    return () => 0;\n                }\n                return (a, b) => {\n                    const aIndex = columnOrder.indexOf(a), bIndex = columnOrder.indexOf(b);\n                    if (aIndex > -1 && bIndex > -1) {\n                        return aIndex - bIndex;\n                    }\n                    if (bIndex > -1) {\n                        return 1;\n                    }\n                    if (aIndex > -1) {\n                        return -1;\n                    }\n                    return 0;\n                };\n            }\n            /**\n             * @return {boolean}\n             * Returns true, if the state was changed since initialization.\n             */\n            isSet() {\n                return this.isModified === true;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Sets the order of the columns in place.\n             *\n             * @param {Array<string>} columnOrder\n             * Array of column names in order.\n             *\n             * @param {DataEventEmitter.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            setColumnOrder(columnOrder, eventDetail) {\n                const presentationState = this, oldColumnOrder = (presentationState.columnOrder || []).slice(), newColumnOrder = columnOrder.slice();\n                presentationState.emit({\n                    type: 'columnOrderChange',\n                    detail: eventDetail,\n                    newColumnOrder,\n                    oldColumnOrder\n                });\n                presentationState.columnOrder = newColumnOrder;\n                presentationState.isModified = true;\n                presentationState.emit({\n                    type: 'afterColumnOrderChange',\n                    detail: eventDetail,\n                    newColumnOrder,\n                    oldColumnOrder\n                });\n            }\n            setColumnVisibility(columnVisibility, eventDetail) {\n                this.columnVisibilityMap = merge(this.columnVisibilityMap, columnVisibility);\n                this.emit({\n                    type: 'afterColumnVisibilityChange',\n                    visibilityMap: this.columnVisibilityMap,\n                    detail: eventDetail\n                });\n            }\n            setHiddenRows(rowIndexes, hidden = true) {\n                rowIndexes.forEach((rowIndex) => {\n                    if (this.hiddenRowIndexes.indexOf(rowIndex) === -1 && hidden) {\n                        this.hiddenRowIndexes.push(rowIndex);\n                    }\n                    if (this.hiddenRowIndexes.indexOf(rowIndex) > -1 && !hidden) {\n                        this.hiddenRowIndexes\n                            .splice(this.hiddenRowIndexes.indexOf(rowIndex), 1);\n                    }\n                });\n                this.emit({\n                    type: 'afterSetHiddenRows',\n                    hiddenRows: this.hiddenRowIndexes\n                });\n            }\n            getHiddenRows() {\n                return this.hiddenRowIndexes;\n            }\n            setHoverPoint(point, eventDetail) {\n                const isDataGrid = eventDetail && eventDetail.isDataGrid;\n                this.hoverPoint = isDataGrid ? void 0 : point;\n                if (point instanceof HTMLElement) {\n                    this.hoverRow = isDataGrid ? point : void 0;\n                }\n                this.emit({\n                    type: 'afterHoverPointChange',\n                    hoverPoint: isDataGrid ? void 0 : this.hoverPoint,\n                    hoverRow: isDataGrid ? this.hoverRow : void 0,\n                    detail: eventDetail\n                });\n            }\n            getHoverPoint() {\n                return this.hoverPoint;\n            }\n            getSelection() {\n                return this.selection;\n            }\n            setSelection(selection, reset = false, eventDetail) {\n                const axes = Object.keys(selection);\n                axes.forEach((axisID) => {\n                    this.selection[axisID] = selection[axisID];\n                });\n                this.emit({\n                    type: 'afterSelectionChange',\n                    selection: this.selection,\n                    reset,\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Converts JSON to a presentation state.\n             * @internal\n             *\n             * @param {DataPresentationState.ClassJSON} json\n             * JSON (usually with a $class property) to convert.\n             *\n             * @return {DataPresentationState}\n             * Class instance from the JSON.\n             */\n            fromJSON(json) {\n                const presentationState = new SharedComponentState();\n                const { columnOrder, visibilityMap, selection, hoverpoint } = json;\n                if (columnOrder) {\n                    presentationState.setColumnOrder(columnOrder);\n                }\n                if (visibilityMap) {\n                    presentationState.setColumnVisibility(visibilityMap);\n                }\n                if (selection) {\n                    presentationState.setSelection(selection);\n                }\n                if (hoverpoint) {\n                    presentationState.setHoverPoint(hoverpoint);\n                }\n                return presentationState;\n            }\n            /**\n             * Converts the presentation state to JSON.\n             * @internal\n             *\n             * @return {SharedComponentState.JSON}\n             * JSON of this class instance.\n             */\n            toJSON() {\n                const json = {\n                    $class: 'Dashboards.SharedComponentState'\n                };\n                if (this.columnOrder) {\n                    json.columnOrder = this.columnOrder.slice();\n                }\n                if (this.hoverPoint) {\n                    const { x, y, id } = this.hoverPoint;\n                    json.hoverPoint = { x, y, id };\n                }\n                if (this.selection) {\n                    json.selection = this.selection;\n                }\n                if (this.columnVisibilityMap) {\n                    json.columnVisibility = this.columnVisibilityMap;\n                }\n                return json;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        Serializable.registerClassPrototype('Dashboards.SharedComponentState', SharedComponentState.prototype);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SharedComponentState;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentGroup.js', [_modules['Dashboards/Components/SharedComponentState.js']], function (SharedState) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        class ComponentGroup {\n            static getComponentGroup(groupID) {\n                if (this.componentGroups[groupID]) {\n                    return this.componentGroups[groupID];\n                }\n            }\n            static addComponentGroup(group) {\n                const { id } = group;\n                if (!this.componentGroups[id]) {\n                    this.componentGroups[id] = group;\n                }\n            }\n            static getGroupsFromComponent(componentID) {\n                const groups = Object.keys(this.componentGroups);\n                return groups.reduce((arr, groupKey) => {\n                    const group = this.getComponentGroup(groupKey);\n                    if (group && group.components.indexOf(componentID) > -1) {\n                        arr.push(group);\n                    }\n                    return arr;\n                }, []);\n            }\n            constructor(id) {\n                this.state = new SharedState();\n                this.components = [];\n                this.id = id;\n                ComponentGroup.addComponentGroup(this);\n            }\n            addComponents(components) {\n                while (components.length) {\n                    const id = components.pop();\n                    if (!id) {\n                        break;\n                    }\n                    if (this.components.indexOf(id) === -1) {\n                        this.components.push(id);\n                    }\n                }\n            }\n            removeComponents(components) {\n                while (components.length) {\n                    const id = components.pop();\n                    if (!id) {\n                        break;\n                    }\n                    const index = this.components.indexOf(id);\n                    if (index > -1) {\n                        this.components.splice(index, 1);\n                    }\n                }\n            }\n            getSharedState() {\n                return this.state;\n            }\n            on() {\n                throw new Error('Method not implemented.');\n            }\n            emit() {\n                throw new Error('Method not implemented.');\n            }\n        }\n        ComponentGroup.componentGroups = {};\n\n        return ComponentGroup;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Emitter.js', [], function () {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /**\n         *  Class responsible for adding event listeners on a component\n         *  @internal\n         */\n        class SyncEmitter {\n            /**\n             * Adds an emitter to the emitter registry.\n             *\n             * @param emitter the emitter to add to the registry.\n             */\n            static register(emitter) {\n                const { id } = emitter;\n                this.registry[id] = emitter;\n            }\n            /**\n             * Gets an emitter from emitter registry.\n             *\n             * @param emitterID The ID of the emitter to get.\n             */\n            static get(emitterID) {\n                return this.registry[emitterID];\n            }\n            /**\n             * Creates a new emitter instance.\n             *\n             * @param id An unique ID for the emitter.\n             *\n             * @param func\n             * The function to be called when the emitter is activated.\n             */\n            constructor(id, func) {\n                this.id = id;\n                this.func = func;\n                SyncEmitter.register(this);\n            }\n            /**\n             * Attaches the emitter to a component.\n             *\n             * @param component The component to attach to.\n             */\n            create(component) {\n                this.callback = this.func.call(component);\n            }\n            /**\n             * To be used when removing the emitter from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable emitter.\n         * The emitter is stored by ID.\n         */\n        SyncEmitter.registry = {};\n\n        return SyncEmitter;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Handler.js', [], function () {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class responsible for storing handler callbacks used in component sync.\n         * @internal\n         */\n        class SyncHandler {\n            /**\n             * Adds a handler to the handler regisitry.\n             *\n             * @param handler The handler to add to the registry.\n             */\n            static register(handler) {\n                const { id } = handler;\n                this.registry[id] = handler;\n            }\n            /**\n             * Gets a handler from handler registry.\n             *\n             * @param handlerID The ID of the handler to get.\n             */\n            static get(handlerID) {\n                return this.registry[handlerID];\n            }\n            /**\n             * Creates a new handler instance.\n             *\n             * @param id an unique ID for the handler.\n             *\n             * @param trigger The id of the presentationState that should trigger\n             * this handler. Should be `undefined` when DataCursor is used.\n             *\n             * @param func\n             * The function to be called when the handler is activated.\n             */\n            constructor(id, trigger, func) {\n                this.id = id;\n                this.presentationStateTrigger = trigger;\n                this.func = func;\n                SyncHandler.register(this);\n            }\n            /**\n             * Attaches the handler to a component and presentationState.\n             *\n             * @deprecated use {@link register}\n             * @param component The component to attach to.\n             */\n            create(component) {\n                const { activeGroup } = component;\n                const { func } = this;\n                if (activeGroup && this.presentationStateTrigger) {\n                    this.callback = activeGroup\n                        .getSharedState()\n                        .on(this.presentationStateTrigger, function (e) {\n                        if (component.id !==\n                            (e.detail ? e.detail.sender : void 0)) {\n                            func.call(component, e);\n                        }\n                    });\n                }\n            }\n            /**\n             * Calls the activation function on the component and sets the callback to\n             * the return function.\n             *\n             * @param component The component to register on.\n             */\n            register(component) {\n                const { func } = this;\n                this.callback = func.call(component);\n            }\n            /**\n             * To be used when removing the handler from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable handlers.\n         * The handler is stored by ID.\n         */\n        SyncHandler.registry = {};\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SyncHandler;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Sync.js', [_modules['Dashboards/Components/Sync/Emitter.js'], _modules['Dashboards/Components/Sync/Handler.js']], function (SyncEmitter, SyncHandler) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         * Class\n         *\n         * */\n        /** @internal */\n        class Sync {\n            /* *\n             *\n             * Constructor\n             *\n             * */\n            constructor(component, syncHandlers = Sync.defaultHandlers) {\n                this.component = component;\n                this.syncConfig = syncHandlers;\n                this.registeredSyncHandlers = {};\n                this.registeredSyncEmitters = {};\n                this.isSyncing = false;\n                this.listeners = [];\n            }\n            /**\n             * Creates an instance of the sync class.\n             *\n             * @param component\n             * The component to which the emitters and handlers are attached.\n             *\n             * @param syncHandlers\n             * The emitters and handlers to use for each event.\n             */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add new emitter to the registered emitters.\n             * @param emitter\n             The emitter to register.\n             */\n            registerSyncEmitter(emitter) {\n                const { id } = emitter;\n                this.registeredSyncEmitters[id] = emitter;\n            }\n            /**\n             * Method that checks if the emitter is registered.\n             *\n             * @param id\n             * The id of the emitter to check.\n             *\n             * @returns\n             * Whether the emitter is registered.\n             */\n            isRegisteredEmitter(id) {\n                return Boolean(this.registeredSyncEmitters[id]);\n            }\n            /**\n             * Register new handler to the registered handlers.\n             *\n             * @param handler\n             * The handler to register.\n             */\n            registerSyncHandler(handler) {\n                const { id } = handler;\n                this.registeredSyncHandlers[id] = handler;\n            }\n            /**\n             * Method that checks if the handler is registered.\n             *\n             * @param handlerID\n             * The id of the handler to check.\n             *\n             * @returns\n             * Whether the handler is registered.\n             */\n            isRegisteredHandler(handlerID) {\n                return Boolean(this.registeredSyncHandlers[handlerID]);\n            }\n            /**\n             * Registers the handlers and emitters on the component\n             */\n            start() {\n                const { syncConfig, component } = this;\n                for (const id of Object.keys(syncConfig)) {\n                    if (!syncConfig[id]) {\n                        continue;\n                    }\n                    let { emitter: emitterConfig, handler: handlerConfig } = syncConfig[id];\n                    if (handlerConfig) {\n                        // Avoid registering the same handler multiple times\n                        // i.e. panning and selection uses the same handler\n                        if (typeof handlerConfig === 'boolean') {\n                            handlerConfig =\n                                Sync.defaultHandlers[id]\n                                    .handler;\n                        }\n                        // TODO: should rework the SyncHandler constructor when\n                        // all handlers are updated\n                        if (typeof handlerConfig === 'function') {\n                            handlerConfig = [id, void 0, handlerConfig];\n                        }\n                        const handler = new SyncHandler(...handlerConfig);\n                        if (!this.isRegisteredHandler(handler.id)) {\n                            this.registerSyncHandler(handler);\n                            // TODO: workaround for now\n                            // we should only use register in the future\n                            if (handlerConfig[1] !== void 0) {\n                                handler.create(component);\n                            }\n                            else {\n                                handler.register(component);\n                            }\n                        }\n                    }\n                    if (emitterConfig) {\n                        if (typeof emitterConfig === 'boolean') {\n                            emitterConfig =\n                                Sync.defaultHandlers[id]\n                                    .emitter;\n                        }\n                        // TODO: should rework the SyncHandler constructor when\n                        // all handlers are updated\n                        if (typeof emitterConfig === 'function') {\n                            emitterConfig = [id, emitterConfig];\n                        }\n                        const emitter = new SyncEmitter(...emitterConfig);\n                        if (!this.isRegisteredEmitter(emitter.id)) {\n                            this.registerSyncEmitter(emitter);\n                            emitter.create(component);\n                        }\n                    }\n                }\n                this.isSyncing = true;\n                this.listeners.push(component.on('update', () => this.stop()));\n            }\n            /**\n             * Removes the handlers and emitters from the component.\n             */\n            stop() {\n                const { component, listeners, registeredSyncHandlers, registeredSyncEmitters } = this;\n                Object.keys(registeredSyncHandlers).forEach((id) => {\n                    registeredSyncHandlers[id].remove();\n                    delete registeredSyncHandlers[id];\n                });\n                Object.keys(registeredSyncEmitters).forEach((id) => {\n                    registeredSyncEmitters[id].remove();\n                    delete registeredSyncEmitters[id];\n                });\n                this.isSyncing = false;\n                for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                    listeners[i]();\n                }\n                this.listeners.length = 0;\n                this.listeners.push(component.on('afterUpdate', () => {\n                    this.start();\n                }));\n            }\n        }\n        /**\n         * Default handlers for the sync class. This property is extended by\n         * different Components, where default syncs are added. Allows overwriting\n         * the configuration before creating the dashboard.\n         */\n        Sync.defaultHandlers = {};\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Sync;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Component.js', [_modules['Dashboards/CallbackRegistry.js'], _modules['Dashboards/Components/EditableOptions.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Components/ComponentUtilities.js'], _modules['Dashboards/Components/ComponentGroup.js'], _modules['Dashboards/Utilities.js'], _modules['Dashboards/Components/Sync/Sync.js']], function (CallbackRegistry, EditableOptions, Globals, U, CU, ComponentGroup, DU, Sync) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { classNamePrefix } = Globals;\n        const { createElement, isArray, merge, fireEvent, addEvent, objectEach, isFunction, getStyle, relativeLength, diffObjects } = U;\n        const { getMargins, getPaddings } = CU;\n        const { uniqueKey } = DU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Abstract Class of component.\n         *\n         * @internal\n         *\n         */\n        /**\n         * Abstract Class of component.\n         * @internal\n         */\n        class Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             *\n             * Creates HTML text element like header or title\n             *\n             * @param tagName\n             * HTML tag name used as wrapper of text like `h2` or `p`.\n             * @param elementName\n             * Name of element\n             * @param textOptions\n             * The options for the component\n             * @returns\n             * HTML object when title is created, otherwise undefined\n             *\n             * @internal\n             */\n            static createTextElement(tagName, elementName, textOptions) {\n                if (typeof textOptions === 'object') {\n                    const { className, text, style } = textOptions;\n                    return createElement(tagName, {\n                        className: className || `${classNamePrefix}component-${elementName}`,\n                        textContent: text\n                    }, style);\n                }\n                if (typeof textOptions === 'string') {\n                    return createElement(tagName, {\n                        className: `${classNamePrefix}component-${elementName}`,\n                        textContent: textOptions\n                    }, {});\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options) {\n                /**\n                 * Registry of callbacks registered on the component. Used in the Highcharts\n                 * component to keep track of chart events.\n                 *\n                 * @internal\n                 */\n                this.callbackRegistry = new CallbackRegistry();\n                /**\n                 * Event listeners tied to the current DataTable. Used for rerendering the\n                 * component on data changes.\n                 *\n                 * @internal\n                 */\n                this.tableEvents = [];\n                /**\n                 * Event listeners tied to the parent cell. Used for rendering/resizing the\n                 * component on interactions.\n                 *\n                 * @internal\n                 */\n                this.cellListeners = [];\n                /**\n                 * The active group of the component. Used for sync.\n                 *\n                 * @internal\n                 */\n                this.activeGroup = void 0;\n                /**\n                 * Timeouts for calls to `Component.resizeTo()`.\n                 *\n                 * @internal\n                /* *\n                 */\n                this.resizeTimeouts = [];\n                /**\n                 * Timeouts for resizing the content. I.e. `chart.setSize()`.\n                 *\n                 * @internal\n                 * */\n                this.innerResizeTimeouts = [];\n                this.board = cell.row.layout.board;\n                this.parentElement = cell.container;\n                this.cell = cell;\n                this.options = merge(Component.defaultOptions, options);\n                this.id = this.options.id && this.options.id.length ?\n                    this.options.id :\n                    uniqueKey();\n                this.editableOptions =\n                    new EditableOptions(this, options.editableOptionsBindings);\n                this.presentationModifier = this.options.presentationModifier;\n                this.dimensions = {\n                    width: null,\n                    height: null\n                };\n                this.element = createElement('div', {\n                    className: this.options.className\n                }, {}, this.parentElement);\n                this.contentElement = createElement('div', {\n                    className: `${this.options.className}-content`\n                }, {\n                    height: '100%'\n                }, this.element, true);\n                this.filterAndAssignSyncOptions();\n                this.setupEventListeners();\n                this.attachCellListeneres();\n                this.on('tableChanged', () => {\n                    this.onTableChanged();\n                });\n                this.on('update', () => {\n                    this.cell.setLoadingState();\n                });\n                this.on('afterRender', () => {\n                    this.cell.setLoadingState(false);\n                });\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Inits connectors for the component and rerenders it.\n             *\n             * @returns\n             * Promise resolving to the component.\n             */\n            async initConnector() {\n                if (this.options.connector?.id &&\n                    this.connectorId !== this.options.connector.id) {\n                    this.cell.setLoadingState();\n                    const connector = await this.board.dataPool\n                        .getConnector(this.options.connector.id);\n                    this.setConnector(connector);\n                }\n                return this;\n            }\n            /**\n            * Filter the sync options that are declared in the component options.\n            * Assigns the sync options to the component and to the sync instance.\n            *\n            * @param defaultHandlers\n            * Sync handlers on component.\n            *\n            * @internal\n            */\n            filterAndAssignSyncOptions(defaultHandlers = this.constructor.syncHandlers) {\n                const sync = this.options.sync || {};\n                const syncHandlers = Object.keys(sync)\n                    .reduce((carry, handlerName) => {\n                    if (handlerName) {\n                        const handler = sync[handlerName];\n                        if (handler && typeof handler === 'object') {\n                            carry[handlerName] = handler;\n                        }\n                        if (handler && typeof handler === 'boolean') {\n                            carry[handlerName] = defaultHandlers[handlerName];\n                        }\n                    }\n                    return carry;\n                }, {});\n                this.sync ? this.sync.syncConfig = syncHandlers : void 0;\n                this.syncHandlers = syncHandlers;\n            }\n            /**\n             * Setup listeners on cell/other things up the chain\n             *\n             * @internal\n             */\n            attachCellListeneres() {\n                // remove old listeners\n                while (this.cellListeners.length) {\n                    const destroy = this.cellListeners.pop();\n                    if (destroy) {\n                        destroy();\n                    }\n                }\n                if (this.cell && Object.keys(this.cell).length) {\n                    const board = this.cell.row.layout.board;\n                    this.cellListeners.push(\n                    // Listen for resize on dashboard\n                    addEvent(board, 'cellResize', () => {\n                        this.resizeTo(this.parentElement);\n                    }), \n                    // Listen for changed parent\n                    addEvent(this.cell.row, 'cellChange', (e) => {\n                        const { row } = e;\n                        if (row && this.cell) {\n                            const hasLeftTheRow = row.getCellIndex(this.cell) === void 0;\n                            if (hasLeftTheRow) {\n                                if (this.cell) {\n                                    this.setCell(this.cell);\n                                }\n                            }\n                        }\n                    }));\n                }\n            }\n            /**\n             * Set a parent cell.\n             * @param cell\n             * Instance of a cell.\n             * @param resize\n             * Flag that allow to resize the component.\n             *\n             * @internal\n             */\n            setCell(cell, resize = false) {\n                this.cell = cell;\n                if (cell.container) {\n                    this.parentElement = cell.container;\n                }\n                this.attachCellListeneres();\n                if (resize) {\n                    this.resizeTo(this.parentElement);\n                }\n            }\n            /**\n             * Adds event listeners to data table.\n             * @param table\n             * Data table that is source of data.\n             * @internal\n             */\n            setupTableListeners(table) {\n                const connector = this.connector;\n                if (connector) {\n                    if (table) {\n                        [\n                            'afterDeleteColumns',\n                            'afterDeleteRows',\n                            'afterSetCell',\n                            'afterSetConnector',\n                            'afterSetColumns',\n                            'afterSetRows'\n                        ].forEach((event) => {\n                            this.tableEvents.push((table)\n                                .on(event, (e) => {\n                                clearInterval(this.tableEventTimeout);\n                                this.tableEventTimeout = Globals.win.setTimeout(() => {\n                                    this.emit({\n                                        ...e,\n                                        type: 'tableChanged'\n                                    });\n                                    this.tableEventTimeout = void 0;\n                                }, 0);\n                            }));\n                        });\n                    }\n                    this.tableEvents.push(connector.on('afterLoad', () => {\n                        this.emit({\n                            target: this,\n                            type: 'tableChanged'\n                        });\n                    }));\n                }\n            }\n            /**\n             * Remove event listeners in data table.\n             * @internal\n             */\n            clearTableListeners() {\n                const connector = this.connector, tableEvents = this.tableEvents;\n                if (tableEvents.length) {\n                    tableEvents.forEach((removeEventCallback) => removeEventCallback());\n                }\n                if (connector) {\n                    tableEvents.push(connector.table.on('afterSetModifier', (e) => {\n                        if (e.type === 'afterSetModifier') {\n                            this.emit({\n                                ...e,\n                                type: 'tableChanged'\n                            });\n                        }\n                    }));\n                }\n            }\n            /**\n             * Attaches data store to the component.\n             * @param connector\n             * Connector of data.\n             *\n             * @returns\n             * Component which can be used in chaining.\n             *\n             * @internal\n             */\n            setConnector(connector) {\n                fireEvent(this, 'setConnector', { connector });\n                // Clean up old event listeners\n                while (this.tableEvents.length) {\n                    const eventCallback = this.tableEvents.pop();\n                    if (typeof eventCallback === 'function') {\n                        eventCallback();\n                    }\n                }\n                this.connector = connector;\n                if (connector) {\n                    // Set up event listeners\n                    this.clearTableListeners();\n                    this.setupTableListeners(connector.table);\n                    // re-setup if modifier changes\n                    connector.table.on('setModifier', () => this.clearTableListeners());\n                    connector.table.on('afterSetModifier', (e) => {\n                        if (e.type === 'afterSetModifier' && e.modified) {\n                            this.setupTableListeners(e.modified);\n                        }\n                    });\n                    // Add the component to a group based on the\n                    // connector table id by default\n                    // TODO: make this configurable\n                    const tableID = connector.table.id;\n                    if (!ComponentGroup.getComponentGroup(tableID)) {\n                        ComponentGroup.addComponentGroup(new ComponentGroup(tableID));\n                    }\n                    const group = ComponentGroup.getComponentGroup(tableID);\n                    if (group) {\n                        group.addComponents([this.id]);\n                        this.activeGroup = group;\n                    }\n                }\n                fireEvent(this, 'afterSetConnector', { connector });\n                return this;\n            }\n            /** @internal */\n            setActiveGroup(group) {\n                if (typeof group === 'string') {\n                    group = ComponentGroup.getComponentGroup(group) || null;\n                }\n                if (group instanceof ComponentGroup) {\n                    this.activeGroup = group;\n                }\n                if (group === null) {\n                    this.activeGroup = void 0;\n                }\n                if (this.activeGroup) {\n                    this.activeGroup.addComponents([this.id]);\n                }\n            }\n            /**\n             * Gets height of the component's content.\n             *\n             * @returns\n             * Current height as number.\n             * @internal\n             */\n            getContentHeight() {\n                const parentHeight = this.dimensions.height || Number(getStyle(this.element, 'height'));\n                const titleHeight = this.titleElement ?\n                    this.titleElement.clientHeight + getMargins(this.titleElement).y :\n                    0;\n                const captionHeight = this.captionElement ?\n                    this.captionElement.clientHeight +\n                        getMargins(this.captionElement).y :\n                    0;\n                return parentHeight - titleHeight - captionHeight;\n            }\n            /**\n             * Resize the component\n             * @param width\n             * The width to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style\n             * @param height\n             * The height to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style.\n             */\n            resize(width, height) {\n                if (height) {\n                    // Get offset for border, padding\n                    const pad = getPaddings(this.element).y + getMargins(this.element).y;\n                    this.dimensions.height = relativeLength(height, Number(getStyle(this.parentElement, 'height'))) - pad;\n                    this.element.style.height = this.dimensions.height + 'px';\n                    this.contentElement.style.height = this.getContentHeight() + 'px';\n                }\n                if (width) {\n                    const pad = getPaddings(this.element).x + getMargins(this.element).x;\n                    this.dimensions.width = relativeLength(width, Number(getStyle(this.parentElement, 'width'))) - pad;\n                    this.element.style.width = this.dimensions.width + 'px';\n                }\n                if (height === null) {\n                    this.dimensions.height = null;\n                    this.element.style.removeProperty('height');\n                }\n                if (width === null) {\n                    this.dimensions.width = null;\n                    this.element.style.removeProperty('width');\n                }\n                fireEvent(this, 'resize', {\n                    width,\n                    height\n                });\n            }\n            /**\n             * Adjusts size of component to parent's cell size when animation is done.\n             * @param element\n             * HTML element that is resized.\n             */\n            resizeTo(element) {\n                while (this.resizeTimeouts.length) {\n                    const timeout = this.resizeTimeouts.pop();\n                    if (timeout) {\n                        cancelAnimationFrame(timeout);\n                    }\n                }\n                const timeoutID = requestAnimationFrame(() => {\n                    const { width, height } = element.getBoundingClientRect();\n                    const padding = getPaddings(element);\n                    const margins = getMargins(element);\n                    this.resize(width - padding.x - margins.x, height - padding.y - margins.y);\n                });\n                this.resizeTimeouts.push(timeoutID);\n            }\n            /**\n             * Handles updating via options.\n             * @param newOptions\n             * The options to apply.\n             *\n             * @param shouldRerender\n             * Set to true if the update should rerender the component.\n             */\n            async update(newOptions, shouldRerender = true) {\n                const eventObject = {\n                    options: newOptions,\n                    shouldForceRerender: false\n                };\n                // Update options\n                fireEvent(this, 'update', eventObject);\n                this.options = merge(this.options, newOptions);\n                if (this.options.connector?.id &&\n                    this.connectorId !== this.options.connector.id) {\n                    const connector = await this.board.dataPool\n                        .getConnector(this.options.connector.id);\n                    this.setConnector(connector);\n                }\n                this.options = merge(this.options, newOptions);\n                if (shouldRerender || eventObject.shouldForceRerender) {\n                    this.render();\n                }\n            }\n            /**\n             * Private method which sets up event listeners for the component.\n             *\n             * @internal\n             */\n            setupEventListeners() {\n                const events = this.options.events;\n                if (events) {\n                    Object.keys(events).forEach((key) => {\n                        const eventCallback = events[key];\n                        if (eventCallback) {\n                            this.callbackRegistry.addCallback(key, {\n                                type: 'component',\n                                func: eventCallback\n                            });\n                        }\n                    });\n                    objectEach(events, (eventCallback, eventType) => {\n                        if (isFunction(eventCallback)) {\n                            this.on(eventType, eventCallback);\n                        }\n                    });\n                }\n                // TODO: Replace with a resize observer.\n                window.addEventListener('resize', () => this.resizeTo(this.parentElement));\n            }\n            /**\n             * Adds title at the top of component's container.\n             *\n             * @param titleOptions\n             * The options for the title.\n             */\n            setTitle(titleOptions) {\n                const titleElement = this.titleElement, shouldExist = titleOptions &&\n                    (typeof titleOptions === 'string' || titleOptions.text);\n                if (shouldExist) {\n                    const newTitle = Component.createTextElement('h2', 'title', titleOptions);\n                    if (newTitle) {\n                        if (!titleElement) {\n                            this.element.insertBefore(newTitle, this.element.firstChild);\n                        }\n                        else {\n                            titleElement.replaceWith(newTitle);\n                        }\n                        this.titleElement = newTitle;\n                    }\n                }\n                else {\n                    if (titleElement) {\n                        titleElement.remove();\n                        delete this.titleElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Adds caption at the bottom of component's container.\n             *\n             * @param captionOptions\n             * The options for the caption.\n             */\n            setCaption(captionOptions) {\n                const captionElement = this.captionElement, shouldExist = captionOptions &&\n                    (typeof captionOptions === 'string' || captionOptions.text);\n                if (shouldExist) {\n                    const newCaption = Component.createTextElement('div', 'caption', captionOptions);\n                    if (newCaption) {\n                        if (!captionElement) {\n                            this.element.appendChild(newCaption);\n                        }\n                        else {\n                            captionElement.replaceWith(newCaption);\n                        }\n                        this.titleElement = newCaption;\n                    }\n                }\n                else {\n                    if (captionElement) {\n                        captionElement.remove();\n                        delete this.captionElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Handles setting things up on initial render.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            async load() {\n                await this.initConnector();\n                this.render();\n                return this;\n            }\n            /**\n             * Renders the component.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            render() {\n                this.emit({ type: 'render' });\n                this.resizeTo(this.parentElement);\n                this.setTitle(this.options.title);\n                this.setCaption(this.options.caption);\n                return this;\n            }\n            /**\n             * Destroys the component.\n             */\n            destroy() {\n                /**\n                 * TODO: Should perhaps set an `isActive` flag to false.\n                 */\n                while (this.element.firstChild) {\n                    this.element.firstChild.remove();\n                }\n                // call unmount\n                fireEvent(this, 'unmount');\n                // Unregister events\n                this.tableEvents.forEach((eventCallback) => eventCallback());\n                this.element.remove();\n            }\n            /** @internal */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /** @internal */\n            emit(e) {\n                if (!e.target) {\n                    e.target = this;\n                }\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const dimensions = {\n                    width: 0,\n                    height: 0\n                };\n                objectEach(this.dimensions, function (value, key) {\n                    if (value === null) {\n                        return;\n                    }\n                    dimensions[key] = value;\n                });\n                const json = {\n                    $class: this.options.type,\n                    // connector: this.connector ? this.connector.toJSON() : void 0,\n                    options: {\n                        cell: this.options.cell,\n                        parentElement: this.parentElement.id,\n                        dimensions,\n                        id: this.id,\n                        type: this.type\n                    }\n                };\n                return json;\n            }\n            /**\n             * Get the component's options.\n             * @returns\n             * The JSON of component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return diffObjects(this.options, Component.defaultOptions);\n            }\n            getEditableOptions() {\n                const component = this;\n                return merge(component.options);\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                let result = component.getEditableOptions();\n                for (let i = 0, end = propertyPath.length; i < end; i++) {\n                    if (isArray(result)) {\n                        result = result[0];\n                    }\n                    if (!result) {\n                        return;\n                    }\n                    result = result[propertyPath[i]];\n                }\n                return result;\n            }\n        }\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        /** @internal */\n        Component.Sync = Sync;\n        /**\n         * Default options of the component.\n         */\n        Component.defaultOptions = {\n            className: `${classNamePrefix}component`,\n            id: '',\n            title: false,\n            caption: false,\n            sync: Sync.defaultHandlers,\n            editableOptions: [{\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                }, {\n                    name: 'title',\n                    propertyPath: ['title'],\n                    type: 'input'\n                }, {\n                    name: 'caption',\n                    propertyPath: ['caption'],\n                    type: 'input'\n                }]\n        };\n        /**\n         * Default sync Handlers.\n         */\n        Component.syncHandlers = {};\n\n        return Component;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Core/Utilities.js']], function (AST, Component, U) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, diffObjects } = U;\n        // TODO: This may affect the AST parsing in Highcharts\n        // should look into adding these as options if possible\n        // Needs to go in a composition in the Highcharts plugin\n        AST.allowedTags = [\n            ...AST.allowedTags,\n            'option',\n            'select',\n            'label',\n            'input',\n            'textarea'\n        ];\n        AST.allowedAttributes = [\n            ...AST.allowedAttributes,\n            'for', 'value', 'checked', 'src', 'name', 'selected'\n        ];\n        AST.allowedReferences = [...AST.allowedReferences, 'data:image/'];\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a HTML component.\n         *\n         */\n        class HTMLComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the HTML component.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @returns\n             * HTML component based on config from JSON.\n             *\n             * @internal\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const elements = (json.elements ?\n                    json.elements.map((el) => JSON.parse(el)) :\n                    []);\n                // const connector = (\n                //     json.connector ? DataJSON.fromJSON(json.connector) : void 0\n                // );\n                const component = new HTMLComponent(cell, merge(options, {\n                    elements\n                    // connector: (\n                    //   connector instanceof DataConnector ? connector : void 0\n                    // )\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a HTML component in the cell.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options) {\n                options = merge(HTMLComponent.defaultOptions, options);\n                super(cell, options);\n                this.options = options;\n                this.type = 'HTML';\n                this.elements = [];\n                this.sync = new Component.Sync(this, this.syncHandlers);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                this.emit({\n                    type: 'load'\n                });\n                await super.load();\n                const options = this.options;\n                let isError = false;\n                if (options.elements) {\n                    this.elements = options.elements.map(function (element) {\n                        if (typeof element === 'string') {\n                            return new AST(element).nodes[0];\n                        }\n                        if (!element.textContent &&\n                            !element.tagName &&\n                            element.attributes) {\n                            isError = true;\n                        }\n                        return element;\n                    });\n                }\n                this.constructTree();\n                this.emit({ type: 'afterLoad' });\n                if (isError) {\n                    throw new Error('Missing tagName param in component: ' +\n                        options.cell);\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.constructTree();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             * @param options\n             * The options to apply.\n             */\n            async update(options) {\n                await super.update(options);\n                this.emit({ type: 'afterUpdate' });\n            }\n            /**\n             * TODO: Could probably use the serialize function moved on\n             * the exportdata branch\n             *\n             * @internal\n             */\n            constructTree() {\n                // Remove old tree if rerendering.\n                while (this.contentElement.firstChild) {\n                    this.contentElement.firstChild.remove();\n                }\n                const parser = new AST(this.elements);\n                parser.addToDOM(this.contentElement);\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const elements = (this.options.elements || [])\n                    .map((el) => JSON.stringify(el));\n                const json = merge(super.toJSON(), {\n                    elements,\n                    options: this.options\n                });\n                this.emit({\n                    type: 'toJSON',\n                    json\n                });\n                return json;\n            }\n            /**\n             * Get the HTML component's options.\n             * @returns\n             * The JSON of HTML component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HTMLComponent.defaultOptions),\n                    type: 'HTML'\n                };\n            }\n            /**\n             * @internal\n             */\n            onTableChanged(e) {\n                if (e.detail?.sender !== this.id) {\n                    this.render();\n                }\n            }\n        }\n        /* *\n         *\n         *  Static properties\n         *\n         * */\n        /**\n         * Default options of the HTML component.\n         */\n        HTMLComponent.defaultOptions = merge(Component.defaultOptions, {\n            type: 'HTML',\n            elements: []\n        });\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return HTMLComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Board.js', [_modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Accessibility/DashboardsAccessibility.js'], _modules['Data/DataCursor.js'], _modules['Dashboards/SerializeHelper/DataCursorHelper.js'], _modules['Data/DataPool.js'], _modules['Dashboards/EditMode/EditMode.js'], _modules['Dashboards/EditMode/Fullscreen.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Dashboards/Serializable.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Components/HTMLComponent.js']], function (Bindings, ComponentRegistry, DashboardsAccessibility, DataCursor, DataCursorHelper, DataPool, EditMode, Fullscreen, Globals, Layout, Serializable, U, HTMLComponent) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        const { merge, addEvent, error, objectEach, uniqueKey, createElement } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that represents a dashboard.\n         *\n         * @example\n         * const dashboard = Dashboards.board('container', {\n         *      gui: {\n         *          layouts: [{\n         *              id: 'layout-1',\n         *              rows: [{\n         *                  cells: [{\n         *                      id: 'dashboard-col-0'\n         *                  }]\n         *              }]\n         *          }]\n         *      },\n         *      components: [{\n         *          cell: 'dashboard-col-0',\n         *          type: 'Highcharts',\n         *          chartOptions: {\n         *              series: [{\n         *                  data: [1, 2, 3, 4]\n         *              }]\n         *          }\n         *      }]\n         * });\n         */\n        class Board {\n            // Implementation:\n            static board(renderTo, options, async) {\n                return new Board(renderTo, options).init(async);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a dashboard with components like charts, tables, and HTML\n             * elements.\n             *\n             * @internal\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             *\n             * @param options\n             * The options for the dashboard.\n             */\n            constructor(renderTo, options) {\n                /**\n                 * The container referenced by the `renderTo` option when creating the\n                 * dashboard.\n                 * @internal\n                 * */\n                this.boardWrapper = void 0;\n                /**\n                 * The main container for the dashboard. Created inside the element\n                 * specified by user when creating the dashboard.\n                 * */\n                this.container = void 0;\n                this.options = merge(Board.defaultOptions, options);\n                this.dataPool = new DataPool(options.dataPool);\n                this.id = uniqueKey();\n                this.guiEnabled = (this.options.gui || {}).enabled;\n                this.layouts = [];\n                this.mountedComponents = [];\n                this.initContainer(renderTo);\n                // Create layouts wrapper.\n                this.layoutsWrapper = createElement('div', {\n                    className: Globals.classNames.layoutsWrapper\n                }, {}, this.container);\n                // Init edit mode.\n                if (EditMode && !(this.options.editMode &&\n                    !this.options.editMode.enabled)) {\n                    this.editMode = new EditMode(this, this.options.editMode);\n                }\n                // Add table cursors support.\n                this.dataCursor = new DataCursor();\n                // Add fullscreen support.\n                this.fullscreen = new Fullscreen(this);\n                this.index = Globals.boards.length;\n                Globals.boards.push(this);\n                // a11y module\n                this.a11y = new DashboardsAccessibility(this);\n            }\n            // Implementation:\n            init(async) {\n                const options = this.options;\n                if (options.gui && this.options.gui) {\n                    this.setLayouts(this.options.gui);\n                }\n                // Init layouts from JSON.\n                if (options.layoutsJSON && !this.layouts.length) {\n                    this.setLayoutsFromJSON(options.layoutsJSON);\n                }\n                let componentPromises = (options.components) ?\n                    this.setComponents(options.components) : [];\n                // Init events.\n                this.initEvents();\n                if (async) {\n                    return Promise.all(componentPromises).then(() => this);\n                }\n                return this;\n            }\n            /**\n             * Initializes the events.\n             * @internal\n             */\n            initEvents() {\n                const board = this, runReflow = () => {\n                    board.reflow();\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(runReflow);\n                    this.resizeObserver.observe(board.container);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', runReflow);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * Initialize the container for the dashboard.\n             * @internal\n             *\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             */\n            initContainer(renderTo) {\n                const board = this;\n                if (typeof renderTo === 'string') {\n                    renderTo = window.document.getElementById(renderTo);\n                }\n                // Display an error if the renderTo doesn't exist.\n                if (!renderTo) {\n                    error(13, true);\n                }\n                // Clear the container from any content.\n                renderTo.innerHTML = '';\n                // Set the main wrapper container.\n                board.boardWrapper = renderTo;\n                // Add container for the board.\n                board.container = createElement('div', {\n                    className: Globals.classNames.boardContainer\n                }, {}, this.boardWrapper);\n            }\n            /**\n             * Creates a new layouts and adds it to the dashboard based on the options.\n             * @internal\n             *\n             * @param guiOptions\n             * The GUI options for the layout.\n             *\n             */\n            setLayouts(guiOptions) {\n                const board = this, layoutsOptions = guiOptions.layouts;\n                for (let i = 0, iEnd = layoutsOptions.length; i < iEnd; ++i) {\n                    board.layouts.push(new Layout(board, merge({}, guiOptions.layoutOptions, layoutsOptions[i])));\n                }\n            }\n            /**\n             * Set the layouts from JSON.\n             * @internal\n             *\n             * @param json\n             * An array of layout JSON objects.\n             *\n             */\n            setLayoutsFromJSON(json) {\n                const board = this;\n                let layout;\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    layout = Layout.fromJSON(json[i], board);\n                    if (layout) {\n                        board.layouts.push(layout);\n                    }\n                }\n            }\n            /**\n             * Set the components from options.\n             * @internal\n             *\n             * @param components\n             * An array of component options.\n             *\n             */\n            setComponents(components) {\n                const promises = [];\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    promises.push(Bindings.addComponent(components[i]));\n                }\n                return promises;\n            }\n            /**\n             * Returns the current size of the layout container based on the selected\n             * responsive breakpoints.\n             * @internal\n             *\n             * @returns Return current size of the layout container in px.\n             */\n            getLayoutContainerSize() {\n                const board = this, responsiveOptions = board.options.responsiveBreakpoints, cntWidth = (board.layoutsWrapper || {}).clientWidth;\n                let size = Globals.responsiveBreakpoints.large;\n                if (responsiveOptions) {\n                    if (cntWidth <= responsiveOptions.small) {\n                        size = Globals.responsiveBreakpoints.small;\n                    }\n                    else if (cntWidth > responsiveOptions.small &&\n                        cntWidth <= responsiveOptions.medium) {\n                        size = Globals.responsiveBreakpoints.medium;\n                    }\n                }\n                return size;\n            }\n            /**\n             * Destroy the whole dashboard, its layouts and elements.\n             */\n            destroy() {\n                const board = this;\n                // Destroy layouts.\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    board.layouts[i].destroy();\n                }\n                // Remove resizeObserver from the board\n                this.resizeObserver?.unobserve(board.container);\n                // Destroy container.\n                board.container.remove();\n                // @ToDo Destroy bindings.\n                // Delete all properties.\n                objectEach(board, function (val, key) {\n                    delete board[key];\n                });\n                Globals.boards[this.index] = void 0;\n                return;\n            }\n            /**\n             * Export layouts to the local storage.\n             */\n            exportLocal() {\n                localStorage.setItem(\n                // Dashboard.prefix + this.id,\n                Globals.classNamePrefix + '1', // temporary for demo test\n                JSON.stringify(this.toJSON()));\n            }\n            /**\n             * Import the dashboard's layouts from the local storage.\n             *\n             * @param id\n             * The id of the layout to import.\n             *\n             * @returns Returns the imported layout.\n             */\n            importLayoutLocal(id) {\n                return Layout.importLocal(id, this);\n            }\n            /**\n             * Reflow the dashboard. Hide the toolbars and context pointer. Reflow the\n             * layouts and its cells.\n             */\n            reflow() {\n                const board = this, cntSize = board.getLayoutContainerSize();\n                let layout;\n                if (board.editMode) {\n                    board.editMode.hideToolbars(['cell', 'row']);\n                    board.editMode.hideContextPointer();\n                }\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    this.reflowLayout(board.layouts[i], cntSize);\n                }\n            }\n            reflowLayout(layout, cntSize) {\n                let row, cell;\n                for (let j = 0, jEnd = layout.rows.length; j < jEnd; ++j) {\n                    row = layout.rows[j];\n                    for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                        cell = row.cells[k];\n                        cell.reflow(cntSize);\n                        if (cell.nestedLayout) {\n                            this.reflowLayout(cell.nestedLayout, cntSize);\n                        }\n                    }\n                }\n            }\n            /**\n             * Converts the given JSON to a class instance.\n             *\n             * @param json\n             * JSON to deserialize as a class instance or object.\n             *\n             * @returns Returns the class instance or object.\n             */\n            fromJSON(json) {\n                const options = json.options, board = new Board(options.containerId, {\n                    componentOptions: options.componentOptions,\n                    responsiveBreakpoints: options.responsiveBreakpoints,\n                    dataPool: options.dataPool,\n                    layoutsJSON: options.layouts\n                });\n                board.dataCursor = DataCursorHelper.fromJSON(json.dataCursor);\n                return board;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns Class JSON of this Dashboard instance.\n             */\n            toJSON() {\n                const board = this, layouts = [];\n                // Get layouts JSON.\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    layouts.push(board.layouts[i].toJSON());\n                }\n                return {\n                    $class: 'Board',\n                    dataCursor: DataCursorHelper.toJSON(board.dataCursor),\n                    options: {\n                        containerId: board.container.id,\n                        dataPool: board.options.dataPool,\n                        guiEnabled: board.guiEnabled,\n                        layouts: layouts,\n                        componentOptions: board.options.componentOptions,\n                        responsiveBreakpoints: board.options.responsiveBreakpoints\n                    }\n                };\n            }\n            /**\n             * Convert the current state of board's options into JSON. The function does\n             * not support converting functions or events into JSON object.\n             *\n             * @returns\n             * The JSON of boards's options.\n             */\n            getOptions() {\n                const board = this, layouts = [], components = [];\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    layouts.push(board.layouts[i].getOptions());\n                }\n                for (let i = 0, iEnd = board.mountedComponents.length; i < iEnd; ++i) {\n                    if (board.mountedComponents[i].cell &&\n                        board.mountedComponents[i].cell.mountedComponent) {\n                        components.push(board.mountedComponents[i].component.getOptions());\n                    }\n                }\n                return {\n                    ...this.options,\n                    gui: {\n                        layouts\n                    },\n                    components: components\n                };\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (Board) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Global dashboard settings.\n             * @internal\n             *\n             */\n            Board.defaultOptions = {\n                gui: {\n                    enabled: true,\n                    layoutOptions: {\n                        rowClassName: void 0,\n                        cellClassName: void 0\n                    },\n                    layouts: []\n                },\n                components: [],\n                responsiveBreakpoints: {\n                    small: 576,\n                    medium: 992,\n                    large: 1200\n                }\n            };\n            /**\n             * @internal\n             */\n            Board.componentTypes = ComponentRegistry.types;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Import layouts from the local storage.\n             *\n             * @returns Returns the Dashboard instance or undefined.\n             */\n            function importLocal() {\n                const dashboardJSON = localStorage.getItem(\n                // Dashboard.prefix + this.id,\n                Globals.classNamePrefix + '1' // temporary for demo test\n                );\n                if (dashboardJSON) {\n                    try {\n                        return Serializable\n                            .fromJSON(JSON.parse(dashboardJSON));\n                    }\n                    catch (e) {\n                        // nothing to do\n                    }\n                }\n            }\n            Board.importLocal = importLocal;\n        })(Board || (Board = {}));\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        Serializable.registerClassPrototype('Board', Board.prototype);\n        ComponentRegistry.registerComponent('HTML', HTMLComponent);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Board;\n    });\n    _registerModule(_modules, 'Dashboards/PluginHandler.js', [_modules['Dashboards/Board.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Components/ComponentRegistry.js']], function (Board, Sync, ComponentRegistry) {\n        /* *\n         *\n         *  (c) 2009 - 2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var PluginHandler;\n        (function (PluginHandler) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /** @internal */\n            PluginHandler.registry = {};\n            /**\n             * Revision of the Dashboard plugin API.\n             *\n             * @internal\n             */\n            PluginHandler.revision = 0;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a dashboard plugin.\n             *\n             * @param {Dashboards.Plugin} plugin\n             * Dashboard plugin to register.\n             *\n             * @param {string} [key]\n             * Plugin key for the registry. (Default: `plugin.name`)\n             */\n            function addPlugin(plugin, key = plugin.name) {\n                const { maxRevision, minRevision, onRegister } = plugin;\n                if (PluginHandler.registry[key]) {\n                    // only throw error with custom key\n                    if (key !== plugin.name) {\n                        throw new Error(`Plugin '${key}' already registered.`);\n                    }\n                    return;\n                }\n                if ((typeof minRevision === 'number' && minRevision > PluginHandler.revision) ||\n                    (typeof maxRevision === 'number' && maxRevision < PluginHandler.revision)) {\n                    throw new Error(`Plugin '${key}' does not support revision ${PluginHandler.revision}.`);\n                }\n                onRegister({\n                    Board,\n                    ComponentRegistry,\n                    Sync,\n                    revision: PluginHandler.revision\n                });\n                PluginHandler.registry[key] = plugin;\n            }\n            PluginHandler.addPlugin = addPlugin;\n            /**\n             * Removes a dashboard plugin.\n             *\n             * @param {string} key\n             * Plugin key in the registry.\n             */\n            function removePlugin(key) {\n                if (PluginHandler.registry[key]) {\n                    PluginHandler.registry[key].onUnregister({\n                        ComponentRegistry: ComponentRegistry,\n                        Board,\n                        Sync,\n                        revision: PluginHandler.revision\n                    });\n                    delete PluginHandler.registry[key];\n                }\n            }\n            PluginHandler.removePlugin = removePlugin;\n        })(PluginHandler || (PluginHandler = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PluginHandler;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        const { addEvent, fireEvent, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        class DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^([0-9]{4})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{2})$/,\n                        parser: function (match) {\n                            const d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            let year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                const mergedOptions = merge(DataConverter.defaultOptions, options);\n                let regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            asBoolean(value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            }\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            asDate(value) {\n                let timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            }\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            asGuessedType(value) {\n                const converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            }\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            asNumber(value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    const decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            }\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            asString(value) {\n                return '' + value;\n            }\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            deduceDateFormat(data, limit, save) {\n                const parser = this, stable = [], max = [];\n                let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                // candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        // madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            }\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            export(connector, options) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            getTable() {\n                throw new Error('Not implemented');\n            }\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            guessType(value) {\n                const converter = this;\n                let result = 'string';\n                if (typeof value === 'string') {\n                    const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n                    let innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    const floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // string is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // determine if a date string\n                        const dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            parse(options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @function Highcharts.Data#parseDate\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            parseDate(value, dateFormatProp) {\n                const converter = this, options = converter.options;\n                let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // converter.options.dateFormat = dateFormat = key;\n                                dateFormat = key;\n                                // converter.options.alternativeFormat =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            trim(str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[0-9\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        DataConverter.defaultOptions = {\n            dateFormat: '',\n            alternativeFormat: '',\n            startColumn: 0,\n            endColumn: Number.MAX_VALUE,\n            startRow: 0,\n            endRow: Number.MAX_VALUE,\n            firstRowAsNames: true,\n            switchRowsAndColumns: false\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns = [], headers = []) {\n                const table = new DataTable();\n                for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || `${i}`, columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        class CSVConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            export(connector, options = this.options) {\n                const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n                let { decimalPoint, itemDelimiter } = options;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    const columnMeta = connector.whatIs(columnName);\n                    let columnDataType;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = `\"${cellValue}\"`;\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            let i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                const cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            }\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n                let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (let i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    let offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                let cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Internal method that parses a single CSV row\n             */\n            parseCSVRow(columnStr, rowNumber) {\n                const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                let { decimalPoint } = converter.options;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                let i = 0, c = '', cl = '', cn = '', token = '', actualColumn = 0, column = 0;\n                const read = (j) => {\n                    c = columnStr[j];\n                    cl = columnStr[j - 1];\n                    cn = columnStr[j + 1];\n                };\n                const pushType = (type) => {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                const push = () => {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        const initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[0-F]{3,3}|[0-F]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            }\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            guessDelimiter(lines) {\n                let points = 0, commas = 0, guessed;\n                const potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (let i = 0; i < linesCount; i++) {\n                    let inStr = false, c, cn, cl, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    const columnStr = lines[i];\n                    for (let j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        CSVConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            lineDelimiter: '\\n'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        class CSVConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new CSVConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { csv, csvURL, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    csv,\n                    detail: eventDetail,\n                    table\n                });\n                // If already loaded, clear the current rows\n                table.deleteRows();\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then((response) => response.text()) :\n                    csv || '')\n                    .then((csv) => {\n                    if (csv) {\n                        converter.parse({ csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(() => csv);\n                })\n                    .then((csv) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CSVConnector.defaultOptions = {\n            csv: '',\n            csvURL: '',\n            enablePolling: false,\n            dataRefreshRate: 1,\n            firstRowAsNames: true\n        };\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        class GoogleSheetsConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.header = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, parseOptions = merge(converter.options, options), columns = ((parseOptions.json &&\n                    parseOptions.json.values) || []).map((column) => column.slice());\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                converter.columns = columns;\n                let column;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        `${column.shift()}` :\n                        uniqueKey());\n                    for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            let cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        GoogleSheetsConverter.defaultOptions = {\n            ...DataConverter.defaultOptions\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        class GoogleSheetsConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new GoogleSheetsConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, dataRefreshRate, enablePolling, firstRowAsNames, googleAPIKey, googleSpreadsheetKey } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    url\n                });\n                // If already loaded, clear the current table\n                table.deleteColumns();\n                return fetch(url)\n                    .then((response) => (response.json()))\n                    .then((json) => {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames,\n                        json\n                    });\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GoogleSheetsConnector.defaultOptions = {\n            googleAPIKey: '',\n            googleSpreadsheetKey: '',\n            worksheet: 1,\n            enablePolling: false,\n            dataRefreshRate: 2,\n            firstRowAsNames: true\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options = {}) {\n                return (`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/` +\n                    (options.onlyColumnNames ?\n                        'A1:Z1' :\n                        buildQueryRange(options)) +\n                    '?alt=json' +\n                    (options.onlyColumnNames ?\n                        '' :\n                        '&dateTimeRenderOption=FORMATTED_STRING' +\n                            '&majorDimension=COLUMNS' +\n                            '&valueRenderOption=UNFORMATTED_VALUE') +\n                    '&prettyPrint=false' +\n                    `&key=${apiKey}`);\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options = {}) {\n                const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            let i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        class HTMLTableConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    this.tableElement = mergedOptions.tableElement;\n                    this.tableElementID = mergedOptions.tableElement.id;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            export(connector, options = this.options) {\n                const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                let tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    const subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (const name of columnNames) {\n                            const subhead = (columns[name].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                let caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            }\n            /**\n             * Get table cell markup from row data.\n             */\n            getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n                let val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            }\n            /**\n             * Get table header markup from row data.\n             */\n            getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n                const { useMultiLevelHeaders, useRowspanHeaders } = options, decimalPoint = (options.useLocalDecimalPoint ?\n                    (1.1).toLocaleString()[1] :\n                    '.');\n                let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            }\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            parse(options, eventDetail) {\n                const converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns,\n                        detail: eventDetail,\n                        headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                let rowIndex = 0, item, { startRow } = parseOptions;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    const items = rows[0].children, itemsLength = items.length;\n                    for (let i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        let columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                let cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                let i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns,\n                    detail: eventDetail,\n                    headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        HTMLTableConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            useRowspanHeaders: true,\n            useMultiLevelHeaders: true\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { win } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        class HTMLTableConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new HTMLTableConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    tableElement: connector.tableElement\n                });\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                let tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    const error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HTMLTableConnector.defaultOptions = {\n            table: ''\n        };\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge, isArray } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        class JSONConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n                this.table = new DataTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this;\n                options = merge(converter.options, options);\n                const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n                let data = options.data;\n                if (!data) {\n                    return;\n                }\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                        const item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (firstRowAsNames) {\n                            converter.headers.push(`${item.shift()}`);\n                        }\n                        else if (columnNames) {\n                            converter.headers.push(columnNames[i]);\n                        }\n                        converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        const row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                this.table.setCell(converter.headers[columnIndex] ||\n                                    rowIndex.toString(), rowIndex, row[columnIndex]);\n                            }\n                        }\n                        else {\n                            this.table.setRows([row], rowIndex);\n                        }\n                    }\n                }\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return this.table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        JSONConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            data: [],\n            orientation: 'columns'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        class JSONConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new JSONConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { data, dataUrl, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    data,\n                    detail: eventDetail,\n                    table\n                });\n                // If already loaded, clear the current rows\n                table.deleteRows();\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then((json) => json.json()) :\n                    data || [])\n                    .then((data) => {\n                    if (data) {\n                        converter.parse({ data });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(() => data);\n                })\n                    .then((data) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        JSONConnector.defaultOptions = {\n            data: [],\n            enablePolling: false,\n            dataRefreshRate: 0,\n            firstRowAsNames: true,\n            orientation: 'rows'\n        };\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         * @private\n         */\n        class ChainModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            constructor(options, ...chain) {\n                super();\n                this.chain = chain;\n                this.options = merge(ChainModifier.defaultOptions, options);\n                const optionsChain = this.options.chain || [];\n                for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            add(modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            clear(eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                let promiseChain = Promise.resolve(table);\n                for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    const modifier = modifiers[i];\n                    promiseChain = promiseChain.then((chainTable) => modifier.modify(chainTable.modified, eventDetail));\n                }\n                promiseChain = promiseChain.then((chainTable) => {\n                    table.modified.deleteColumns();\n                    table.modified.setColumns(chainTable.modified.getColumns());\n                    return table;\n                });\n                promiseChain = promiseChain['catch']((error) => {\n                    this.emit({\n                        type: 'error',\n                        detail: eventDetail,\n                        table\n                    });\n                    throw error;\n                });\n                return promiseChain;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            modifyTable(table, eventDetail) {\n                const chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table\n                });\n                const modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                let modified = table.modified;\n                for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table\n                });\n                return table;\n            }\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            remove(modifier, eventDetail) {\n                const modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default option for the ordered modifier chain.\n         */\n        ChainModifier.defaultOptions = {\n            type: 'Chain'\n        };\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        class InvertModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(InvertModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(`${i2}`, row);\n                    }\n                    else {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            }\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // inverted table\n                    const columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map((column) => `${column}`), columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // regular table\n                    const columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[`${i}`] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the invert modifier.\n         */\n        InvertModifier.defaultOptions = {\n            type: 'Invert'\n        };\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         * @private\n         */\n        class RangeModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(RangeModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const { additive, ranges, strict } = modifier.options;\n                if (ranges.length) {\n                    const modified = table.modified;\n                    let columns = table.getColumns(), rows = [];\n                    for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            columns = modified.getColumns();\n                            rows = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (let j = 0, jEnd = rangeColumn.length, cell, row; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                row = (additive ?\n                                    table.getRow(j) :\n                                    modified.getRow(j));\n                                if (row) {\n                                    rows.push(row);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the range modifier.\n         */\n        RangeModifier.defaultOptions = {\n            type: 'Range',\n            ranges: []\n        };\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2023 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         * @private\n         */\n        class SortModifier extends DataModifier {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static ascending(a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            }\n            static descending(a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(SortModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            getRowReferences(table) {\n                const rows = table.getRows(), rowReferences = [];\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n                }\n                if (orderInColumn) {\n                    const column = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns({ [orderInColumn]: column });\n                }\n                else {\n                    const rows = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        rows.push(rowReferences[i].row);\n                    }\n                    modified.setRows(rows, 0);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options to group table rows.\n         */\n        SortModifier.defaultOptions = {\n            type: 'Sort',\n            direction: 'desc',\n            orderByColumn: 'y'\n        };\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'masters/dashboards.src.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Dashboards/Board.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Data/DataPool.js'], _modules['Data/DataCursor.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/PluginHandler.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Utilities.js']], function (DataConnector, Board, Component, ComponentRegistry, DataPool, DataCursor, DataModifier, DataTable, Globals, PluginHandler, Sync, Utilities) {\n\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        // Fill registries\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.board = Board.board;\n        G.merge = Utilities.merge;\n        G.uniqueKey = Utilities.uniqueKey;\n        G.Board = Board;\n        G.Component = Component;\n        G.ComponentRegistry = ComponentRegistry;\n        G.DataConnector = DataConnector;\n        G.DataCursor = DataCursor;\n        G.DataModifier = DataModifier;\n        G.DataPool = DataPool;\n        G.DataTable = DataTable;\n        G.PluginHandler = PluginHandler;\n        G.Sync = Sync;\n        /* *\n         *\n         *  Classic Export\n         *\n         * */\n        if (!G.win.Dashboards) {\n            G.win.Dashboards = G;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n    _modules['masters/dashboards.src.js']._modules = _modules;\n    return _modules['masters/dashboards.src.js'];\n}));"],"names":["root","factory","module","exports","document","define","amd","Dashboards","error","window","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","dispatchEvent","detail","Globals","SVG_NS","product","version","win","doc","svg","createElementNS","createSVGRect","userAgent","navigator","isChrome","indexOf","isFirefox","isMS","test","opera","isSafari","isTouchDevice","isWebKit","deg2rad","Math","PI","hasBidiBug","parseInt","split","hasTouch","TouchEvent","marginNames","noop","supportsPassiveEvents","supportsPassive","opts","Object","defineProperty","get","addEventListener","removeEventListener","charts","dateFormats","seriesTypes","symbolSizes","chartCount","H","serialMode","code","stop","chart","params","severity","isCode","isNumber","message","toString","additionalMessages","objectEach","value","key","encodeURI","fireEvent","Error","console","messages","warn","push","pInt","s","mag","isString","isArray","str","prototype","call","isObject","strict","isDOMElement","nodeType","isClass","c","constructor","name","n","isNaN","Infinity","defined","attr","elem","keyOrAttribs","ret","isGetter","attrSingle","setAttribute","getAttribute","removeAttribute","splat","extend","a","b","pick","arguments","length","i","arg","css","el","styles","opacity","filter","style","getMagnitude","num","pow","floor","log","LN10","correctFloat","prec","parseFloat","toPrecision","easeInOutSine","pos","cos","find","Array","arr","callback","ctx","removeEvent","type","removeOneEvent","removeAllEvents","eventCollection","types","len","nodeName","_val","owner","events","hcEvents","typeEvents","eventArguments","defaultFunction","e","createEvent","initEvent","target","preventDefault","defaultPrevented","object","multilevel","unshift","getPrototypeOf","sort","order","forEach","map","each","grep","reduce","some","val","slice","uniqueKey","hash","random","substring","id","jQuery","highcharts","shift","Utilities","addEvent","options","Point","series","runTrackerClick","passive","capture","eventObject","arrayMax","data","max","arrayMin","min","clamp","clearTimeout","createElement","tag","attribs","parent","nopad","padding","border","margin","appendChild","destroyObjectProperties","except","destroy","diffObjects","newer","older","keepOlder","collectionsWithUpdate","diff","depth","keeper","newerVal","keys","discardElement","element","parentElement","removeChild","erase","item","splice","extendClass","members","getClosestDistance","arrays","onError","closest","distance","allowNegative","xData","getNestedProperty","pathElements","pathElement","thisProp","child","getStyle","prop","toInt","offsetWidth","scrollWidth","boundingClientRectWidth","getBoundingClientRect","width","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","inArray","fromIndex","insertItem","collection","indexOption","index","isInternal","_i","isFunction","merge","doCopy","copy","original","normalizeTickInterval","interval","multiples","magnitude","allowDecimals","hasTickAmount","retInterval","normalized","round","offset","docElem","documentElement","box","parentNode","top","left","height","pageYOffset","scrollTop","clientTop","pageXOffset","scrollLeft","clientLeft","pad","number","padder","String","replace","join","pushUnique","array","relativeLength","base","stableSort","sortFunction","sortValue","safeI","syncTimeout","delay","context","setTimeout","timeUnits","millisecond","second","minute","hour","day","week","month","year","useSerialIds","mode","wrap","method","func","proceed","outerArgs","scope","concat","U","DataModifier","benchmark","dataTable","results","modifier","execute","modifyTable","emit","iterations","on","times","startTime","endTime","performance","now","modify","table","eventDetail","Promise","resolve","reject","modified","clone","modifyCell","columnName","rowIndex","cellValue","modifyColumns","columns","modifyRows","rows","registerType","DataModifierClass","DataTable","isNull","row","NULL","iEnd","columnNames","aliases","JSON","parse","stringify","autoId","rowCount","versionTag","thisColumns","column","aliasKeys","thisAliases","alias","skipColumns","tableOptions","tableClone","deleteColumnAlias","deletedAlias","deleteColumns","deletedColumns","modifiedColumns","deleteRows","deletedRows","modifiedRows","deletedCells","j","jEnd","getCell","columnNameOrAlias","getCellAsBoolean","getCellAsNumber","useNaN","getCellAsString","getColumn","asReference","getColumns","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","columnNamesOrAliases","tableAliasMap","tableColumns","getModifier","getRow","getRows","getRowCount","getRowIndexBy","rowIndexOffset","getRowObject","getRowObjects","i2","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","setCell","setColumn","setColumns","tableModifier","reset","tableColumn","tableColumnNames","setModifier","promise","then","setRow","setRows","rowColumnNames","rowColumnName","indexRowCount","DataConnector","metadata","polling","describeColumn","columnMeta","connector","describeColumns","pop","getColumnOrder","usePresentationState","names","getSortedColumns","usePresentationOrder","load","save","setColumnOrder","setModifierOptions","modifierOptions","ModifierClass","startPolling","refreshTime","_polling","stopPolling","whatIs","DataConnectorClass","ComponentRegistry","registerComponent","ComponentClass","classNamePrefix","classNames","layout","cell","cellHover","cellActive","cellLoading","layoutsWrapper","boardContainer","guiElementType","responsiveBreakpoints","small","medium","large","boards","Bindings","getGUIElement","idOrElement","guiElement","container","getElementById","addComponent","optionsStates","states","optionsEvents","componentContainer","title","text","board","editMode","lang","errorMessage","className","component","update","mountedComponent","mountedComponents","click","active","setActiveState","hover","classList","add","componentFromJSON","json","cellContainer","componentClass","$class","fromJSON","render","getType","getLayout","addTabIndexToCells","components","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","listeners","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","groupOrCursor","cursorOrEvent","eventOrLasting","lasting","event","group","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","range","Number","MAX_VALUE","needle","columnNeedle","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","Serializable","classRegistry","helperRegistry","classs","helper","registerClassPrototype","classPrototype","registerHelper","helperFunctions","toJSON","serializer","classes","numberOfHelpers","jsonSupportFor","DataCursorHelper","cursorsJSON","stateMapJSON","tableIds","k","kEnd","connectors","DataPoolDefaults","DataPool","waiting","getConnector","waitingList","connectorOptions","getConnectorOptions","loadConnector","getConnectorIds","connectorIds","getConnectorTable","connectorId","ConnectorClass","setConnectorOptions","DG","PREFIX","resizeSnap","resizeSnapX","resizeSnapY","separator","contextMenuBtn","contextMenuBtnText","contextMenu","contextMenuItem","editModeEnabled","editToolbar","editToolbarCellOutline","editToolbarRowOutline","editToolbarItem","editToolbarRow","editToolbarCell","editSidebar","editSidebarShow","editSidebarHide","editSidebarTitle","editSidebarMenuItem","rowContextHighlight","cellEditHighlight","dashboardCellEditHighlightActive","dragMock","dropPointer","contextDetectionPointer","resizePointer","currentEditedElement","maskElement","menuItem","menu","menuVerticalSeparator","menuHorizontalSeparator","menuDestroy","editSidebarWrapper","customSelect","customSelectButton","toggleContainer","toggleWrapper","toggleSlider","toggleWrapperColored","toggleLabels","button","sidebarNavButton","labelText","editSidebarTabBtn","editToolsBtn","editTools","editGridItems","confirmationPopup","popupButtonContainer","popupContentContainer","popupCancelBtn","popupConfirmBtn","popupCloseButton","editOverlay","editOverlayActive","resizerMenuBtnActive","sidebarCloseButton","editSidebarTabBtnWrapper","editSidebarRight","editSidebarRightShow","viewFullscreen","accordionMenu","accordionContainer","accordionHeader","accordionHeaderBtn","accordionHeaderIcon","accordionContent","accordionNestedWrapper","accordionMenuButtonsContainer","accordionMenuButton","hiddenElement","collapsableContentHeader","collapsedElement","dropdown","dropdownContent","dropdownButton","dropdownButtonContent","dropdownIcon","icon","accessibility","cancelButton","caption","chartClassName","chartConfig","chartID","chartOptions","chartType","connectorName","confirmButton","confirmDestroyCell","confirmDestroyRow","dataLabels","exitFullscreen","off","pointFormat","settings","EditGlobals","renderContextButton","contextButton","contextMenuOptions","onclick","stopPropagation","onContextBtnClick","src","textContent","renderCollapseHeader","showToggle","onchange","isEnabled","isNested","accordion","header","headerBtn","renderToggle","enabledOnOffLabels","headerIcon","content","toggle","outerElement","renderSelect","renderText","isLabel","iconsURLPrefix","btn","btnContent","iconURL","selectOptions","placeholder","dropdownPointer","renderSelectElement","option","selectOption","selectOptionBtn","langKey","role","ariaChecked","ariaLabel","input","renderCheckbox","callbackFn","checked","slider","textElem","labelFor","htmlFor","renderIcon","iconElem","mousedown","onmousedown","renderInput","renderTextarea","textarea","renderButton","getRendererFunction","select","collapse","checkbox","EditRenderer","MenuItem","isActive","defaultOptions","setContainer","innerElement","setInnerElement","itemsClassName","display","getValue","bind","activate","deactivate","fullScreen","fullscreen","MenuItemBindings","Menu","isVisible","activeItems","items","initItems","itemsSchemas","itemSchema","itemConfig","optionsItems","setActiveItems","deactivateActiveItems","updateActiveItems","remove","iconURLPrefix","outline","outlineClassName","hide","setPosition","refreshOutline","x","y","guiElemCnt","toolbar","hideOutline","getOffsets","referenceElement","right","bottom","guiElementClientRect","referenceClientRect","getDimFromOffsets","offsets","createElementId","elementType","getPercentageWidth","result","fractionRegEx","match","multiplier","divider","getElementContainer","elementId","div","HTMLElement","parentContainer","removeBindedEventFn","stopImmediatePropagation","changeVisibility","setVisible","displayStyle","visibilityChanged","show","EditToolbar","GUIElement","CellEditToolbar","getItemsConfig","dragDrop","enabled","cellEditToolbar","onDragStart","setEditOverlay","onCellOptions","popup","onCellDestroy","closePopup","toolbars","showToolbar","cellCnt","cellOffsets","sidebar","setHighlight","resetEditedCell","hideToolbars","cells","editedCell","RowEditToolbar","getMenuItemsConfig","rowEditToolbar","onRowOptions","onRowDestroy","offsetX","rowCnt","rowOffsets","rowWidth","clientWidth","clientHeight","resetEditedRow","editedRow","closeSidebar","changedOptions","chartOptionsJSON","renderContent","editableOptions","getOptions","end","renderAccordion","buttonContainer","updateOptions","propertyPath","pathLength","currentLevel","parsedValue","renderNested","renderFunction","getEditableOptionValue","nestedOptions","accordionOptions","collapsedHeader","trustedTypes","trustedTypesPolicy","createPolicy","createHTML","emptyHTML","hasValidDOMParser","Boolean","DOMParser","parseFromString","AST","filterUserAttributes","attributes","valid","allowedAttributes","allowedReferences","ref","parseStyle","line","pair","trim","g","toUpperCase","setElementHTML","html","innerHTML","ast","addToDOM","source","nodes","parseMarkup","recurse","subtree","subParent","node","tagName","textNode","createTextNode","bypassHTMLFiltering","allowedTags","NS","namespaceURI","children","markup","body","appendChildNodes","addTo","toLowerCase","astNode","parsedAttributes","attrib","childNodes","childNode","parentDiv","iconsURL","createPopupContainer","closeButton","addCloseButton","eventName","closeButtonEvents","showPopup","toolbarClass","popupDiv","coreUniqueKey","copyDepth","copyDepthError","Cell","containerId","copyId","parentContainerId","mountedComponentJSON","layoutJSON","cellElement","cellHeight","layoutOptions","rowOptions","cellClassName","guiEnabled","reflow","mountComponentFromJSON","setNestedLayout","layoutFromJSON","nestedLayout","Layout","optionsGui","gui","unmountCell","destroyRow","rowContainerId","getVisibleCells","getParentCell","level","parentCell","getOverlappingLevels","align","levelMaxGap","levels","cellOffset","parentCellOffset","abs","dashContainerSize","cntSize","getLayoutContainerSize","respoOptions","responsive","optWidth","convertWidthToValue","setSize","flex","cellWidth","hideContextPointer","cellToolbar","updateSize","rwdMode","cnt","isSet","contains","isHighlighted","setLoadingState","Row","cellsJSON","setContainerHeight","rowContainer","rowElement","rowClassName","setCells","setCellsFromJSON","cellsElements","getElementsByClassName","addCell","cellJSON","componentsToMount","mountCell","setCellEvents","unmountRow","layoutContainerId","getCellIndex","nextCell","prevCell","insertBefore","nextSibling","cellIndex","getVisibleRows","getRowLevels","rowLevels","rowLevelsArray","getRowLevelInfo","posY","rowLevelInfo","rowLevel","DU","rowsJSON","layouts","importLocal","localStorage","getItem","layoutClassName","setRowsFromJSON","rowsElements","addRow","mountRow","setRowEvents","exportLocal","setItem","getRowIndex","nextRow","prevRow","dashboardContainerId","AccordionMenu","BaseForm","SidebarPopup","detectRightSidebar","layoutWrapper","removeClassNames","addClassNames","isRightSidebar","resizer","disableResizer","editCellContext","stopContextDetection","generateContent","renderHeader","renderAddComponentsList","gridElement","gridWrapper","onMouseLeave","dropContext","newLayoutName","newCell","onDrop","initConnector","setEditCellContext","onDropNewComponent","componentOptions","onCellDragEnd","isEditOverlayActive","showToolbars","isContextDetectionActive","includes","elements","cellName","connectorsIds","dataPool","animation","zooming","EditContextMenu","initEvents","tools","contextButtonElement","visible","updatePosition","ctxButton","offsetLeft","offsetTop","onEditModeToggle","ContextDetection","isGUIElementOnParentEdge","mouseContext","side","visibleElements","lastElementIndex","getContextLevel","sideOffset","overlappedLevels","divOffset","lastOverlappedLevel","getContext","mouseCellContext","mouseCellContextOffsets","leftSideX","clientX","topSideY","clientY","sideY","sideX","DragDrop","mockElement","showDropPointer","hideDropPointer","setMockElementPosition","mouseEvent","dashBoundingRect","onDrag","onDragEnd","dragEndCallback","draggedCell","onCellDrag","onRowDrag","onRowDragEnd","setSnapPositions","contextDetails","dropPointerSize","rowDropOffset","updateDropPointer","dropContextRowOffsets","draggedRow","cellDropOffset","onCellDragCellCtx","mouseRowContext","onCellDragRowCtx","dropContextOffsets","pointerHeight","dashOffsets","levelHeight","pointerWidth","contextCell","newRow","dropContextCell","dropContextCellIndex","Resizer","resize","currentCell","isX","isY","startX","tempSiblingsWidth","addSnaps","snapWidth","snap","snapHeight","dashboardContainer","snapRight","snapBottom","addResizeEvents","currentDimension","setTempWidthSiblings","optionsWidth","currentRwdMode","rowLevelCells","revertSiblingsAutoWidth","cellResize","mouseDownSnapX","mouseDownSnapY","mouseMoveSnap","mouseUpSnap","onMouseMove","runReflow","ResizeObserver","resizeObserver","observe","unbind","parentRowWidth","newWidth","snaps","unobserve","minWidth","minHeight","close","contentContainer","popupContainer","marginTop","ConfirmationPopup","addComponentBtn","rwdButtons","icons","contextPointer","isInitialized","rwdMenu","createTools","init","rowToolbar","setLayoutEvents","onDetectContext","onContextConfirm","showRwdButtons","dashboardCnt","hideRwdButtons","potentialCellContext","toolbarTypes","toolbarsToHide","toolbarsToShow","createRwdMenu","addIconURL","rwdBreakingPoints","toolsContainer","rwdIcons","isSelected","cellContext","rowContext","cellContextOffsets","showContextPointer","oldEditCellContext","oldContextRow","DashboardClass","isOpen","boardWrapper","open","unbindChange","ownerDocument","setButtonText","unbindFullscreenEvent","requestFullscreen","catch","Document","registry","addCallback","getCallback","entry","EditableOptions","bindings","defaultBindings","keyMap","color","typeMap","skipRedraw","defaultTypeMap","ComponentUtilities","getStyles","elementStyles","sumPixels","accumulator","getMargins","includeBorders","borders","getPaddings","SharedComponentState","columnVisibilityMap","hiddenRowIndexes","selection","columnOrder","getColumnVisibility","getColumnSorter","aIndex","bIndex","isModified","oldColumnOrder","presentationState","newColumnOrder","setColumnVisibility","columnVisibility","visibilityMap","setHiddenRows","rowIndexes","hidden","hiddenRows","getHiddenRows","setHoverPoint","point","isDataGrid","hoverPoint","hoverRow","getHoverPoint","getSelection","setSelection","axes","axisID","hoverpoint","SharedState","ComponentGroup","getComponentGroup","groupID","componentGroups","addComponentGroup","getGroupsFromComponent","componentID","groups","groupKey","addComponents","removeComponents","getSharedState","SyncEmitter","register","emitter","emitterID","create","SyncHandler","handler","handlerID","trigger","presentationStateTrigger","activeGroup","sender","Sync","syncHandlers","defaultHandlers","syncConfig","registeredSyncHandlers","registeredSyncEmitters","isSyncing","registerSyncEmitter","isRegisteredEmitter","registerSyncHandler","isRegisteredHandler","start","emitterConfig","handlerConfig","CallbackRegistry","CU","Component","createTextElement","elementName","textOptions","callbackRegistry","tableEvents","cellListeners","resizeTimeouts","innerResizeTimeouts","editableOptionsBindings","presentationModifier","dimensions","contentElement","filterAndAssignSyncOptions","setupEventListeners","attachCellListeneres","onTableChanged","setConnector","sync","carry","handlerName","resizeTo","hasLeftTheRow","setupTableListeners","clearInterval","tableEventTimeout","clearTableListeners","removeEventCallback","eventCallback","tableID","setActiveGroup","getContentHeight","parentHeight","titleHeight","titleElement","captionHeight","captionElement","removeProperty","timeout","cancelAnimationFrame","timeoutID","requestAnimationFrame","margins","newOptions","shouldRerender","shouldForceRerender","eventType","setTitle","titleOptions","shouldExist","newTitle","replaceWith","firstChild","setCaption","captionOptions","newCaption","getEditableOptions","HTMLComponent","isError","constructTree","parser","DashboardsAccessibility","EditMode","Fullscreen","Board","renderTo","async","initContainer","dataCursor","a11y","setLayouts","layoutsJSON","setLayoutsFromJSON","componentPromises","setComponents","all","guiOptions","layoutsOptions","promises","responsiveOptions","cntWidth","size","importLayoutLocal","reflowLayout","componentTypes","dashboardJSON","PluginHandler","revision","addPlugin","plugin","maxRevision","minRevision","onRegister","removePlugin","onUnregister","DataConverter","regex","Date","UTC","NaN","alternative","d","getFullYear","mergedOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","converter","guessType","decimalRegex","getDate","deduceDateFormat","limit","stable","format","thing","guessedFormat","madeDeduction","dateFormat","export","headers","getTable","trimedValue","innerTrimedValue","floatValue","dateValue","dateFormatProp","getTime","getTimezoneOffset","inside","alternativeFormat","startColumn","endColumn","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","csvRows","columnsCount","rowArray","columnIndex","columnDataType","dataType","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","token","actualColumn","read","pushType","isFinite","initialValue","points","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","GoogleSheetsConverter","parseOptions","values","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","status","worksheet","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","tableCaption","attrs","topheaders","subheaders","useRowspanHeaders","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","getElementsByTagName","rowsCount","itemsLength","columnsInRow","columnsInRowLength","relativeColumnIndex","HTMLTableConnector","JSONConverter","orientation","JSONConnector","dataUrl","ChainModifier","chain","optionsChain","clear","modifiers","reverse","promiseChain","chainTable","InvertModifier","modifiedRowIndex","modifiedColumnNames","j2","RangeModifier","additive","ranges","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","G"],"mappings":"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"}