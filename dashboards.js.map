{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards v2.2.0 (2024-07-02)\n *\n * (c) 2009-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = (root && root.document) ?\n            factory(root) :\n            factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/dashboards', function () {\n            return factory(root);\n        });\n    } else {\n        if (root.Dashboards) {\n            root.Dashboards.error(16, true);\n        }\n        root.Dashboards = factory(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function (window) {\n    'use strict';\n    var _modules = {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Shared Highcharts properties.\n         * @private\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.SVG_NS = 'http://www.w3.org/2000/svg', Globals.product = 'Highcharts', Globals.version = '2.2.0', Globals.win = (typeof window !== 'undefined' ?\n                window :\n                {}), // eslint-disable-line node/no-unsupported-features/es-builtins\n            Globals.doc = Globals.win.document, Globals.svg = (Globals.doc &&\n                Globals.doc.createElementNS &&\n                !!Globals.doc.createElementNS(Globals.SVG_NS, 'svg').createSVGRect), Globals.userAgent = (Globals.win.navigator && Globals.win.navigator.userAgent) || '', Globals.isChrome = Globals.win.chrome, Globals.isFirefox = Globals.userAgent.indexOf('Firefox') !== -1, Globals.isMS = /(edge|msie|trident)/i.test(Globals.userAgent) && !Globals.win.opera, Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1, Globals.isTouchDevice = /(Mobile|Android|Windows Phone)/.test(Globals.userAgent), Globals.isWebKit = Globals.userAgent.indexOf('AppleWebKit') !== -1, Globals.deg2rad = Math.PI * 2 / 360, Globals.hasBidiBug = (Globals.isFirefox &&\n                parseInt(Globals.userAgent.split('Firefox/')[1], 10) < 4 // Issue #38\n            ), Globals.marginNames = [\n                'plotTop',\n                'marginRight',\n                'marginBottom',\n                'plotLeft'\n            ], Globals.noop = function () { }, Globals.supportsPassiveEvents = (function () {\n                // Checks whether the browser supports passive events, (#11353).\n                let supportsPassive = false;\n                // Object.defineProperty doesn't work on IE as well as passive\n                // events - instead of using polyfill, we can exclude IE totally.\n                if (!Globals.isMS) {\n                    const opts = Object.defineProperty({}, 'passive', {\n                        get: function () {\n                            supportsPassive = true;\n                        }\n                    });\n                    if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                        Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                        Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n                    }\n                }\n                return supportsPassive;\n            }());\n            /**\n             * An array containing the current chart objects in the page. A chart's\n             * position in the array is preserved throughout the page's lifetime. When\n             * a chart is destroyed, the array item becomes `undefined`.\n             *\n             * @name Highcharts.charts\n             * @type {Array<Highcharts.Chart|undefined>}\n             */\n            Globals.charts = [];\n            /**\n             * A shared registry between all bundles to keep track of applied\n             * compositions.\n             * @private\n             */\n            Globals.composed = [];\n            /**\n             * A hook for defining additional date format specifiers. New\n             * specifiers are defined as key-value pairs by using the\n             * specifier as key, and a function which takes the timestamp as\n             * value. This function returns the formatted portion of the\n             * date.\n             *\n             * @sample highcharts/global/dateformats/\n             *         Adding support for week number\n             *\n             * @name Highcharts.dateFormats\n             * @type {Record<string, Highcharts.TimeFormatCallbackFunction>}\n             */\n            Globals.dateFormats = {};\n            /**\n             * @private\n             * @deprecated\n             * @todo Use only `Core/Series/SeriesRegistry.seriesTypes`\n             */\n            Globals.seriesTypes = {};\n            /**\n             * @private\n             */\n            Globals.symbolSizes = {};\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            // eslint-disable-next-line prefer-const\n            Globals.chartCount = 0;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Theme options that should get applied to the chart. In module mode it\n         * might not be possible to change this property because of read-only\n         * restrictions, instead use {@link Highcharts.setOptions}.\n         *\n         * @deprecated\n         * @name Highcharts.theme\n         * @type {Highcharts.Options}\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Core/Utilities.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { charts, doc, win } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Highcharts.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        Reference to the chart that causes the error. Used in 'debugger'\n         *        module to display errors directly on the chart.\n         *        Important note: This argument is undefined for errors that lack\n         *        access to the Chart instance. In such case, the error will be\n         *        displayed on the last created chart.\n         *\n         * @param {Highcharts.Dictionary<string>} [params]\n         *        Additional parameters for the generated message.\n         *\n         * @return {void}\n         */\n        function error(code, stop, chart, params) {\n            const severity = stop ? 'Highcharts error' : 'Highcharts warning';\n            if (code === 32) {\n                code = `${severity}: Deprecated member`;\n            }\n            const isCode = isNumber(code);\n            let message = isCode ?\n                `${severity} #${code}: www.highcharts.com/errors/${code}/` :\n                code.toString();\n            const defaultHandler = function () {\n                if (stop) {\n                    throw new Error(message);\n                }\n                // Else ...\n                if (win.console &&\n                    error.messages.indexOf(message) === -1 // Prevent console flooting\n                ) {\n                    console.warn(message); // eslint-disable-line no-console\n                }\n            };\n            if (typeof params !== 'undefined') {\n                let additionalMessages = '';\n                if (isCode) {\n                    message += '?';\n                }\n                objectEach(params, function (value, key) {\n                    additionalMessages += `\\n - ${key}: ${value}`;\n                    if (isCode) {\n                        message += encodeURI(key) + '=' + encodeURI(value);\n                    }\n                });\n                message += additionalMessages;\n            }\n            fireEvent(H, 'displayError', { chart, code, message, params }, defaultHandler);\n            error.messages.push(message);\n        }\n        (function (error) {\n            error.messages = [];\n        })(error || (error = {}));\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {boolean} extend\n         *        Whether to extend the left-side object (a) or return a whole new\n         *        object.\n         *\n         * @param {T|undefined} a\n         *        The first object to extend. When only this is given, the function\n         *        returns a deep copy.\n         *\n         * @param {...Array<object|undefined>} [n]\n         *        An object to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */ /**\n        * Utility function to deep merge two or more objects and return a third object.\n        * The merge function can also be used with a single object argument to create a\n        * deep copy of an object.\n        *\n        * @function Highcharts.merge<T>\n        *\n        * @param {T|undefined} a\n        *        The first object to extend. When only this is given, the function\n        *        returns a deep copy.\n        *\n        * @param {...Array<object|undefined>} [n]\n        *        An object to merge into the previous one.\n        *\n        * @return {T}\n        *         The merged object. If the first argument is true, the return is the\n        *         same as the second argument.\n        */\n        function merge() {\n            /* eslint-enable valid-jsdoc */\n            let i, args = arguments, ret = {};\n            const doCopy = function (copy, original) {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                objectEach(original, function (value, key) {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (args[0] === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Constrain a value to within a lower and upper threshold.\n         *\n         * @private\n         * @param {number} value The initial value\n         * @param {number} min The lower threshold\n         * @param {number} max The upper threshold\n         * @return {number} Returns a number value within min and max.\n         */\n        function clamp(value, min, max) {\n            return value > min ? value < max ? value : max : min;\n        }\n        /**\n         * Utility for crisping a line position to the nearest full pixel depening on\n         * the line width\n         * @param {number} value       The raw pixel position\n         * @param {number} lineWidth   The line width\n         * @param {boolean} [inverted] Whether the containing group is inverted.\n         *                             Crisping round numbers on the y-scale need to go\n         *                             to the other side because the coordinate system\n         *                             is flipped (scaleY is -1)\n         * @return {number}            The pixel position to use for a crisp display\n         */\n        const crisp = (value, lineWidth = 0, inverted) => {\n            const mod = lineWidth % 2 / 2, inverter = inverted ? -1 : 1;\n            return (Math.round(value * inverter - mod) + mod) * inverter;\n        };\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Return the deep difference between two objects. It can either return the new\n         * properties, or optionally return the old values of new properties.\n         * @private\n         */\n        function diffObjects(newer, older, keepOlder, collectionsWithUpdate) {\n            const ret = {};\n            /**\n             * Recurse over a set of options and its current values, and store the\n             * current values in the ret object.\n             */\n            function diff(newer, older, ret, depth) {\n                const keeper = keepOlder ? older : newer;\n                objectEach(newer, function (newerVal, key) {\n                    if (!depth &&\n                        collectionsWithUpdate &&\n                        collectionsWithUpdate.indexOf(key) > -1 &&\n                        older[key]) {\n                        newerVal = splat(newerVal);\n                        ret[key] = [];\n                        // Iterate over collections like series, xAxis or yAxis and map\n                        // the items by index.\n                        for (let i = 0; i < Math.max(newerVal.length, older[key].length); i++) {\n                            // Item exists in current data (#6347)\n                            if (older[key][i]) {\n                                // If the item is missing from the new data, we need to\n                                // save the whole config structure. Like when\n                                // responsively updating from a dual axis layout to a\n                                // single axis and back (#13544).\n                                if (newerVal[i] === void 0) {\n                                    ret[key][i] = older[key][i];\n                                    // Otherwise, proceed\n                                }\n                                else {\n                                    ret[key][i] = {};\n                                    diff(newerVal[i], older[key][i], ret[key][i], depth + 1);\n                                }\n                            }\n                        }\n                    }\n                    else if (isObject(newerVal, true) &&\n                        !newerVal.nodeType // #10044\n                    ) {\n                        ret[key] = isArray(newerVal) ? [] : {};\n                        diff(newerVal, older[key] || {}, ret[key], depth + 1);\n                        // Delete empty nested objects\n                        if (Object.keys(ret[key]).length === 0 &&\n                            // Except colorAxis which is a special case where the empty\n                            // object means it is enabled. Which is unfortunate and we\n                            // should try to find a better way.\n                            !(key === 'colorAxis' && depth === 0)) {\n                            delete ret[key];\n                        }\n                    }\n                    else if (newer[key] !== older[key] ||\n                        // If the newer key is explicitly undefined, keep it (#10525)\n                        (key in newer && !(key in older))) {\n                        if (key !== '__proto__' && key !== 'constructor') {\n                            ret[key] = keeper[key];\n                        }\n                    }\n                });\n            }\n            diff(newer, older, ret, 0);\n            return ret;\n        }\n        /**\n         * Shortcut for parseInt\n         *\n         * @private\n         * @function Highcharts.pInt\n         *\n         * @param {*} s\n         *        any\n         *\n         * @param {number} [mag]\n         *        Magnitude\n         *\n         * @return {number}\n         *         number\n         */\n        function pInt(s, mag) {\n            return parseInt(s, mag || 10);\n        }\n        /**\n         * Utility function to check for string type.\n         *\n         * @function Highcharts.isString\n         *\n         * @param {*} s\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a string.\n         */\n        function isString(s) {\n            return typeof s === 'string';\n        }\n        /**\n         * Utility function to check if an item is an array.\n         *\n         * @function Highcharts.isArray\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is an array.\n         */\n        function isArray(obj) {\n            const str = Object.prototype.toString.call(obj);\n            return str === '[object Array]' || str === '[object Array Iterator]';\n        }\n        /**\n         * Utility function to check if an item is of type object.\n         *\n         * @function Highcharts.isObject\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @param {boolean} [strict=false]\n         *        Also checks that the object is not an array.\n         *\n         * @return {boolean}\n         *         True if the argument is an object.\n         */\n        function isObject(obj, strict) {\n            return (!!obj &&\n                typeof obj === 'object' &&\n                (!strict || !isArray(obj))); // eslint-disable-line @typescript-eslint/no-explicit-any\n        }\n        /**\n         * Utility function to check if an Object is a HTML Element.\n         *\n         * @function Highcharts.isDOMElement\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a HTML Element.\n         */\n        function isDOMElement(obj) {\n            return isObject(obj) && typeof obj.nodeType === 'number';\n        }\n        /**\n         * Utility function to check if an Object is a class.\n         *\n         * @function Highcharts.isClass\n         *\n         * @param {object|undefined} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a class.\n         */\n        function isClass(obj) {\n            const c = obj && obj.constructor;\n            return !!(isObject(obj, true) &&\n                !isDOMElement(obj) &&\n                (c && c.name && c.name !== 'Object'));\n        }\n        /**\n         * Utility function to check if an item is a number and it is finite (not NaN,\n         * Infinity or -Infinity).\n         *\n         * @function Highcharts.isNumber\n         *\n         * @param {*} n\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the item is a finite number\n         */\n        function isNumber(n) {\n            return typeof n === 'number' && !isNaN(n) && n < Infinity && n > -Infinity;\n        }\n        /**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function Highcharts.erase\n         *\n         * @param {Array<*>} arr\n         *        The array.\n         *\n         * @param {*} item\n         *        The item to remove.\n         *\n         * @return {void}\n         */\n        function erase(arr, item) {\n            let i = arr.length;\n            while (i--) {\n                if (arr[i] === item) {\n                    arr.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        /**\n         * Insert a series or an axis in a collection with other items, either the\n         * chart series or yAxis series or axis collections, in the correct order\n         * according to the index option and whether it is internal. Used internally\n         * when adding series and axes.\n         *\n         * @private\n         * @function Highcharts.Chart#insertItem\n         * @param  {Highcharts.Series|Highcharts.Axis} item\n         *         The item to insert\n         * @param  {Array<Highcharts.Series>|Array<Highcharts.Axis>} collection\n         *         A collection of items, like `chart.series` or `xAxis.series`.\n         * @return {number} The index of the series in the collection.\n         */\n        function insertItem(item, collection) {\n            const indexOption = item.options.index, length = collection.length;\n            let i;\n            for (\n            // Internal item (navigator) should always be pushed to the end\n            i = item.options.isInternal ? length : 0; i < length + 1; i++) {\n                if (\n                // No index option, reached the end of the collection,\n                // equivalent to pushing\n                !collection[i] ||\n                    // Handle index option, the element to insert has lower index\n                    (isNumber(indexOption) &&\n                        indexOption < pick(collection[i].options.index, collection[i]._i)) ||\n                    // Insert the new item before other internal items\n                    // (navigator)\n                    collection[i].options.isInternal) {\n                    collection.splice(i, 0, item);\n                    break;\n                }\n            }\n            return i;\n        }\n        /**\n         * Adds an item to an array, if it is not present in the array.\n         *\n         * @function Highcharts.pushUnique\n         *\n         * @param {Array<unknown>} array\n         * The array to add the item to.\n         *\n         * @param {unknown} item\n         * The item to add.\n         *\n         * @return {boolean}\n         * Returns true, if the item was not present and has been added.\n         */\n        function pushUnique(array, item) {\n            return array.indexOf(item) < 0 && !!array.push(item);\n        }\n        /**\n         * Check if an object is null or undefined.\n         *\n         * @function Highcharts.defined\n         *\n         * @param {*} obj\n         *        The object to check.\n         *\n         * @return {boolean}\n         *         False if the object is null or undefined, otherwise true.\n         */\n        function defined(obj) {\n            return typeof obj !== 'undefined' && obj !== null;\n        }\n        /**\n         * Set or get an attribute or an object of attributes.\n         *\n         * To use as a setter, pass a key and a value, or let the second argument be a\n         * collection of keys and values. When using a collection, passing a value of\n         * `null` or `undefined` will remove the attribute.\n         *\n         * To use as a getter, pass only a string as the second argument.\n         *\n         * @function Highcharts.attr\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} elem\n         *        The DOM element to receive the attribute(s).\n         *\n         * @param {string|Highcharts.HTMLAttributes|Highcharts.SVGAttributes} [keyOrAttribs]\n         *        The property or an object of key-value pairs.\n         *\n         * @param {number|string} [value]\n         *        The value if a single property is set.\n         *\n         * @return {string|null|undefined}\n         *         When used as a getter, return the value.\n         */\n        function attr(elem, keyOrAttribs, value) {\n            const isGetter = isString(keyOrAttribs) && !defined(value);\n            let ret;\n            const attrSingle = (value, key) => {\n                // Set the value\n                if (defined(value)) {\n                    elem.setAttribute(key, value);\n                    // Get the value\n                }\n                else if (isGetter) {\n                    ret = elem.getAttribute(key);\n                    // IE7 and below cannot get class through getAttribute (#7850)\n                    if (!ret && key === 'class') {\n                        ret = elem.getAttribute(key + 'Name');\n                    }\n                    // Remove the value\n                }\n                else {\n                    elem.removeAttribute(key);\n                }\n            };\n            // If keyOrAttribs is a string\n            if (isString(keyOrAttribs)) {\n                attrSingle(value, keyOrAttribs);\n                // Else if keyOrAttribs is defined, it is a hash of key/value pairs\n            }\n            else {\n                objectEach(keyOrAttribs, attrSingle);\n            }\n            return ret;\n        }\n        /**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function Highcharts.splat\n         *\n         * @param {*} obj\n         *        The object to splat.\n         *\n         * @return {Array}\n         *         The produced or original array.\n         */\n        function splat(obj) {\n            return isArray(obj) ? obj : [obj];\n        }\n        /**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function Highcharts.syncTimeout\n         *\n         * @param {Function} fn\n         *        The function callback.\n         *\n         * @param {number} delay\n         *        Delay in milliseconds.\n         *\n         * @param {*} [context]\n         *        An optional context to send to the function callback.\n         *\n         * @return {number}\n         *         An identifier for the timeout that can later be cleared with\n         *         Highcharts.clearTimeout. Returns -1 if there is no timeout.\n         */\n        function syncTimeout(fn, delay, context) {\n            if (delay > 0) {\n                return setTimeout(fn, delay, context);\n            }\n            fn.call(0, context);\n            return -1;\n        }\n        /**\n         * Internal clear timeout. The function checks that the `id` was not removed\n         * (e.g. by `chart.destroy()`). For the details see\n         * [issue #7901](https://github.com/highcharts/highcharts/issues/7901).\n         *\n         * @function Highcharts.clearTimeout\n         *\n         * @param {number|undefined} id\n         * Id of a timeout.\n         */\n        function internalClearTimeout(id) {\n            if (defined(id)) {\n                clearTimeout(id);\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function Highcharts.extend<T>\n         *\n         * @param {T|undefined} a\n         *        The object to be extended.\n         *\n         * @param {Partial<T>} b\n         *        The object to add to the first one.\n         *\n         * @return {T}\n         *         Object a, the original object.\n         */\n        function extend(a, b) {\n            /* eslint-enable valid-jsdoc */\n            let n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) { // eslint-disable-line guard-for-in\n                a[n] = b[n];\n            }\n            return a;\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Return the first value that is not null or undefined.\n         *\n         * @function Highcharts.pick<T>\n         *\n         * @param {...Array<T|null|undefined>} items\n         *        Variable number of arguments to inspect.\n         *\n         * @return {T}\n         *         The value of the first argument that is not null or undefined.\n         */\n        function pick() {\n            const args = arguments;\n            const length = args.length;\n            for (let i = 0; i < length; i++) {\n                const arg = args[i];\n                if (typeof arg !== 'undefined' && arg !== null) {\n                    return arg;\n                }\n            }\n        }\n        /**\n         * Set CSS on a given element.\n         *\n         * @function Highcharts.css\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} el\n         *        An HTML DOM element.\n         *\n         * @param {Highcharts.CSSObject} styles\n         *        Style object with camel case property names.\n         *\n         * @return {void}\n         */\n        function css(el, styles) {\n            extend(el.style, styles);\n        }\n        /**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function Highcharts.createElement\n         *\n         * @param {string} tag\n         *        The HTML tag.\n         *\n         * @param {Highcharts.HTMLAttributes} [attribs]\n         *        Attributes as an object of key-value pairs.\n         *\n         * @param {Highcharts.CSSObject} [styles]\n         *        Styles as an object of key-value pairs.\n         *\n         * @param {Highcharts.HTMLDOMElement} [parent]\n         *        The parent HTML object.\n         *\n         * @param {boolean} [nopad=false]\n         *        If true, remove all padding, border and margin.\n         *\n         * @return {Highcharts.HTMLDOMElement}\n         *         The created DOM element.\n         */\n        function createElement(tag, attribs, styles, parent, nopad) {\n            const el = doc.createElement(tag);\n            if (attribs) {\n                extend(el, attribs);\n            }\n            if (nopad) {\n                css(el, { padding: '0', border: 'none', margin: '0' });\n            }\n            if (styles) {\n                css(el, styles);\n            }\n            if (parent) {\n                parent.appendChild(el);\n            }\n            return el;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Extend a prototyped class by new members.\n         *\n         * @deprecated\n         * @function Highcharts.extendClass<T>\n         *\n         * @param {Highcharts.Class<T>} parent\n         *        The parent prototype to inherit.\n         *\n         * @param {Highcharts.Dictionary<*>} members\n         *        A collection of prototype members to add or override compared to the\n         *        parent prototype.\n         *\n         * @return {Highcharts.Class<T>}\n         *         A new prototype.\n         */\n        function extendClass(parent, members) {\n            const obj = (function () { });\n            obj.prototype = new parent(); // eslint-disable-line new-cap\n            extend(obj.prototype, members);\n            return obj;\n        }\n        /**\n         * Left-pad a string to a given length by adding a character repetitively.\n         *\n         * @function Highcharts.pad\n         *\n         * @param {number} number\n         *        The input string or number.\n         *\n         * @param {number} [length]\n         *        The desired string length.\n         *\n         * @param {string} [padder=0]\n         *        The character to pad with.\n         *\n         * @return {string}\n         *         The padded string.\n         */\n        function pad(number, length, padder) {\n            return new Array((length || 2) +\n                1 -\n                String(number)\n                    .replace('-', '')\n                    .length).join(padder || '0') + number;\n        }\n        /**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function Highcharts.relativeLength\n         *\n         * @param {Highcharts.RelativeSize} value\n         *        A percentage string or a number.\n         *\n         * @param {number} base\n         *        The full length that represents 100%.\n         *\n         * @param {number} [offset=0]\n         *        A pixel offset to apply for percentage values. Used internally in\n         *        axis positioning.\n         *\n         * @return {number}\n         *         The computed length.\n         */\n        function relativeLength(value, base, offset) {\n            return (/%$/).test(value) ?\n                (base * parseFloat(value) / 100) + (offset || 0) :\n                parseFloat(value);\n        }\n        /**\n         * Replaces text in a string with a given replacement in a loop to catch nested\n         * matches after previous replacements.\n         *\n         * @function Highcharts.replaceNested\n         *\n         * @param {string} text\n         * Text to search and modify.\n         *\n         * @param {...Array<(RegExp|string)>} replacements\n         * One or multiple tuples with search pattern (`[0]: (string|RegExp)`) and\n         * replacement (`[1]: string`) for matching text.\n         *\n         * @return {string}\n         * Text with replacements.\n         */\n        function replaceNested(text, ...replacements) {\n            let previous, replacement;\n            do {\n                previous = text;\n                for (replacement of replacements) {\n                    text = text.replace(replacement[0], replacement[1]);\n                }\n            } while (text !== previous);\n            return text;\n        }\n        /**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function Highcharts.wrap\n         *\n         * @param {*} obj\n         *        The context object that the method belongs to. In real cases, this is\n         *        often a prototype.\n         *\n         * @param {string} method\n         *        The name of the method to extend.\n         *\n         * @param {Highcharts.WrapProceedFunction} func\n         *        A wrapper function callback. This function is called with the same\n         *        arguments as the original function, except that the original function\n         *        is unshifted and passed as the first argument.\n         */\n        function wrap(obj, method, func) {\n            const proceed = obj[method];\n            obj[method] = function () {\n                const outerArgs = arguments, scope = this;\n                return func.apply(this, [\n                    function () {\n                        return proceed.apply(scope, arguments.length ? arguments : outerArgs);\n                    }\n                ].concat([].slice.call(arguments)));\n            };\n        }\n        /**\n         * Get the magnitude of a number.\n         *\n         * @function Highcharts.getMagnitude\n         *\n         * @param {number} num\n         *        The number.\n         *\n         * @return {number}\n         *         The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc.\n         */\n        function getMagnitude(num) {\n            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n        }\n        /**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @deprecated\n         * @function Highcharts.normalizeTickInterval\n         *\n         * @param {number} interval\n         *        The raw, un-rounded interval.\n         *\n         * @param {Array<*>} [multiples]\n         *        Allowed multiples.\n         *\n         * @param {number} [magnitude]\n         *        The magnitude of the number.\n         *\n         * @param {boolean} [allowDecimals]\n         *        Whether to allow decimals.\n         *\n         * @param {boolean} [hasTickAmount]\n         *        If it has tickAmount, avoid landing on tick intervals lower than\n         *        original.\n         *\n         * @return {number}\n         *         The normalized interval.\n         *\n         * @todo\n         * Move this function to the Axis prototype. It is here only for historical\n         * reasons.\n         */\n        function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, hasTickAmount) {\n            let i, retInterval = interval;\n            // Round to a tenfold of 1, 2, 2.5 or 5\n            magnitude = pick(magnitude, getMagnitude(interval));\n            const normalized = interval / magnitude;\n            // Multiples for a linear scale\n            if (!multiples) {\n                multiples = hasTickAmount ?\n                    // Finer grained ticks when the tick amount is hard set, including\n                    // when alignTicks is true on multiple axes (#4580).\n                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n                    // Else, let ticks fall on rounder numbers\n                    [1, 2, 2.5, 5, 10];\n                // The allowDecimals option\n                if (allowDecimals === false) {\n                    if (magnitude === 1) {\n                        multiples = multiples.filter(function (num) {\n                            return num % 1 === 0;\n                        });\n                    }\n                    else if (magnitude <= 0.1) {\n                        multiples = [1 / magnitude];\n                    }\n                }\n            }\n            // Normalize the interval to the nearest multiple\n            for (i = 0; i < multiples.length; i++) {\n                retInterval = multiples[i];\n                // Only allow tick amounts smaller than natural\n                if ((hasTickAmount &&\n                    retInterval * magnitude >= interval) ||\n                    (!hasTickAmount &&\n                        (normalized <=\n                            (multiples[i] +\n                                (multiples[i + 1] || multiples[i])) / 2))) {\n                    break;\n                }\n            }\n            // Multiply back to the correct magnitude. Correct floats to appropriate\n            // precision (#6085).\n            retInterval = correctFloat(retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10));\n            return retInterval;\n        }\n        /**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function Highcharts.stableSort\n         *\n         * @param {Array<*>} arr\n         *        The array to sort.\n         *\n         * @param {Function} sortFunction\n         *        The function to sort it with, like with regular Array.prototype.sort.\n         */\n        function stableSort(arr, sortFunction) {\n            // @todo It seems like Chrome since v70 sorts in a stable way internally,\n            // plus all other browsers do it, so over time we may be able to remove this\n            // function\n            const length = arr.length;\n            let sortValue, i;\n            // Add index to each item\n            for (i = 0; i < length; i++) {\n                arr[i].safeI = i; // Stable sort index\n            }\n            arr.sort(function (a, b) {\n                sortValue = sortFunction(a, b);\n                return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n            });\n            // Remove index from items\n            for (i = 0; i < length; i++) {\n                delete arr[i].safeI; // Stable sort index\n            }\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMin\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The lowest number.\n         */\n        function arrayMin(data) {\n            let i = data.length, min = data[0];\n            while (i--) {\n                if (data[i] < min) {\n                    min = data[i];\n                }\n            }\n            return min;\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMax\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The highest number.\n         */\n        function arrayMax(data) {\n            let i = data.length, max = data[0];\n            while (i--) {\n                if (data[i] > max) {\n                    max = data[i];\n                }\n            }\n            return max;\n        }\n        /**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function Highcharts.destroyObjectProperties\n         *\n         * @param {*} obj\n         *        The object to destroy properties on.\n         *\n         * @param {*} [except]\n         *        Exception, do not destroy this property, only delete it.\n         */\n        function destroyObjectProperties(obj, except, destructablesOnly) {\n            objectEach(obj, function (val, n) {\n                // If the object is non-null and destroy is defined\n                if (val !== except && val?.destroy) {\n                    // Invoke the destroy\n                    val.destroy();\n                }\n                // Delete the property from the object\n                if (val?.destroy || !destructablesOnly) {\n                    delete obj[n];\n                }\n            });\n        }\n        /**\n         * Discard a HTML element\n         *\n         * @function Highcharts.discardElement\n         *\n         * @param {Highcharts.HTMLDOMElement} element\n         *        The HTML node to discard.\n         */\n        function discardElement(element) {\n            if (element && element.parentElement) {\n                element.parentElement.removeChild(element);\n            }\n        }\n        /**\n         * Fix JS round off float errors.\n         *\n         * @function Highcharts.correctFloat\n         *\n         * @param {number} num\n         *        A float number to fix.\n         *\n         * @param {number} [prec=14]\n         *        The precision.\n         *\n         * @return {number}\n         *         The corrected float number.\n         */\n        function correctFloat(num, prec) {\n            // When the number is higher than 1e14 use the number (#16275)\n            return num > 1e14 ? num : parseFloat(num.toPrecision(prec || 14));\n        }\n        /**\n         * The time unit lookup\n         *\n         * @ignore\n         */\n        const timeUnits = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 24 * 3600000,\n            week: 7 * 24 * 3600000,\n            month: 28 * 24 * 3600000,\n            year: 364 * 24 * 3600000\n        };\n        /**\n         * Easing definition\n         *\n         * @private\n         * @function Math.easeInOutSine\n         *\n         * @param {number} pos\n         *        Current position, ranging from 0 to 1.\n         *\n         * @return {number}\n         *         Ease result\n         */\n        Math.easeInOutSine = function (pos) {\n            return -0.5 * (Math.cos(Math.PI * pos) - 1);\n        };\n        /**\n         * Find the closest distance between two values of a two-dimensional array\n         * @private\n         * @function Highcharts.getClosestDistance\n         *\n         * @param {Array<Array<number>>} arrays\n         *          An array of arrays of numbers\n         *\n         * @return {number | undefined}\n         *          The closest distance between values\n         */\n        function getClosestDistance(arrays, onError) {\n            const allowNegative = !onError;\n            let closest, loopLength, distance, i;\n            arrays.forEach((xData) => {\n                if (xData.length > 1) {\n                    loopLength = xData.length - 1;\n                    for (i = loopLength; i > 0; i--) {\n                        distance = xData[i] - xData[i - 1];\n                        if (distance < 0 && !allowNegative) {\n                            onError?.();\n                            // Only one call\n                            onError = void 0;\n                        }\n                        else if (distance && (typeof closest === 'undefined' || distance < closest)) {\n                            closest = distance;\n                        }\n                    }\n                }\n            });\n            return closest;\n        }\n        /**\n         * Returns the value of a property path on a given object.\n         *\n         * @private\n         * @function getNestedProperty\n         *\n         * @param {string} path\n         * Path to the property, for example `custom.myValue`.\n         *\n         * @param {unknown} obj\n         * Instance containing the property on the specific path.\n         *\n         * @return {unknown}\n         * The unknown property value.\n         */\n        function getNestedProperty(path, parent) {\n            const pathElements = path.split('.');\n            while (pathElements.length && defined(parent)) {\n                const pathElement = pathElements.shift();\n                // Filter on the key\n                if (typeof pathElement === 'undefined' ||\n                    pathElement === '__proto__') {\n                    return; // Undefined\n                }\n                if (pathElement === 'this') {\n                    let thisProp;\n                    if (isObject(parent)) {\n                        thisProp = parent['@this'];\n                    }\n                    return thisProp ?? parent;\n                }\n                const child = parent[pathElement];\n                // Filter on the child\n                if (!defined(child) ||\n                    typeof child === 'function' ||\n                    typeof child.nodeType === 'number' ||\n                    child === win) {\n                    return; // Undefined\n                }\n                // Else, proceed\n                parent = child;\n            }\n            return parent;\n        }\n        /**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function Highcharts.getStyle\n         *\n         * @param {Highcharts.HTMLDOMElement} el\n         * An HTML element.\n         *\n         * @param {string} prop\n         * The property name.\n         *\n         * @param {boolean} [toInt=true]\n         * Parse to integer.\n         *\n         * @return {number|string|undefined}\n         * The style value.\n         */\n        function getStyle(el, prop, toInt) {\n            let style;\n            // For width and height, return the actual inner pixel size (#4913)\n            if (prop === 'width') {\n                let offsetWidth = Math.min(el.offsetWidth, el.scrollWidth);\n                // In flex boxes, we need to use getBoundingClientRect and floor it,\n                // because scrollWidth doesn't support subpixel precision (#6427) ...\n                const boundingClientRectWidth = el.getBoundingClientRect &&\n                    el.getBoundingClientRect().width;\n                // ...unless if the containing div or its parents are transform-scaled\n                // down, in which case the boundingClientRect can't be used as it is\n                // also scaled down (#9871, #10498).\n                if (boundingClientRectWidth < offsetWidth &&\n                    boundingClientRectWidth >= offsetWidth - 1) {\n                    offsetWidth = Math.floor(boundingClientRectWidth);\n                }\n                return Math.max(0, // #8377\n                (offsetWidth -\n                    (getStyle(el, 'padding-left', true) || 0) -\n                    (getStyle(el, 'padding-right', true) || 0)));\n            }\n            if (prop === 'height') {\n                return Math.max(0, // #8377\n                (Math.min(el.offsetHeight, el.scrollHeight) -\n                    (getStyle(el, 'padding-top', true) || 0) -\n                    (getStyle(el, 'padding-bottom', true) || 0)));\n            }\n            // Otherwise, get the computed style\n            const css = win.getComputedStyle(el, void 0); // eslint-disable-line no-undefined\n            if (css) {\n                style = css.getPropertyValue(prop);\n                if (pick(toInt, prop !== 'opacity')) {\n                    style = pInt(style);\n                }\n            }\n            return style;\n        }\n        /**\n         * Search for an item in an array.\n         *\n         * @function Highcharts.inArray\n         *\n         * @deprecated\n         *\n         * @param {*} item\n         *        The item to search for.\n         *\n         * @param {Array<*>} arr\n         *        The array or node collection to search in.\n         *\n         * @param {number} [fromIndex=0]\n         *        The index to start searching from.\n         *\n         * @return {number}\n         *         The index within the array, or -1 if not found.\n         */\n        function inArray(item, arr, fromIndex) {\n            error(32, false, void 0, { 'Highcharts.inArray': 'use Array.indexOf' });\n            return arr.indexOf(item, fromIndex);\n        }\n        /**\n         * Return the value of the first element in the array that satisfies the\n         * provided testing function.\n         *\n         * @function Highcharts.find<T>\n         *\n         * @param {Array<T>} arr\n         *        The array to test.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if this item satisfies the condition.\n         *\n         * @return {T|undefined}\n         *         The value of the element.\n         */\n        const find = Array.prototype.find ?\n            function (arr, callback) {\n                return arr.find(callback);\n            } :\n            // Legacy implementation. PhantomJS, IE <= 11 etc. #7223.\n            function (arr, callback) {\n                let i;\n                const length = arr.length;\n                for (i = 0; i < length; i++) {\n                    if (callback(arr[i], i)) { // eslint-disable-line node/callback-return\n                        return arr[i];\n                    }\n                }\n            };\n        /**\n         * Returns an array of a given object's own properties.\n         *\n         * @function Highcharts.keys\n         * @deprecated\n         *\n         * @param {*} obj\n         *        The object of which the properties are to be returned.\n         *\n         * @return {Array<string>}\n         *         An array of strings that represents all the properties.\n         */\n        function keys(obj) {\n            error(32, false, void 0, { 'Highcharts.keys': 'use Object.keys' });\n            return Object.keys(obj);\n        }\n        /**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function Highcharts.offset\n         *\n         * @param {global.Element} el\n         *        The DOM element.\n         *\n         * @return {Highcharts.OffsetObject}\n         *         An object containing `left` and `top` properties for the position in\n         *         the page.\n         */\n        function offset(el) {\n            const docElem = doc.documentElement, box = (el.parentElement || el.parentNode) ?\n                el.getBoundingClientRect() :\n                { top: 0, left: 0, width: 0, height: 0 };\n            return {\n                top: box.top + (win.pageYOffset || docElem.scrollTop) -\n                    (docElem.clientTop || 0),\n                left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n                    (docElem.clientLeft || 0),\n                width: box.width,\n                height: box.height\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Iterate over object key pairs in an object.\n         *\n         * @function Highcharts.objectEach<T>\n         *\n         * @param {*} obj\n         *        The object to iterate over.\n         *\n         * @param {Highcharts.ObjectEachCallbackFunction<T>} fn\n         *        The iterator callback. It passes three arguments:\n         *        * value - The property value.\n         *        * key - The property key.\n         *        * obj - The object that objectEach is being applied to.\n         *\n         * @param {T} [ctx]\n         *        The context.\n         */\n        function objectEach(obj, fn, ctx) {\n            /* eslint-enable valid-jsdoc */\n            for (const key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    fn.call(ctx || obj[key], obj[key], key, obj);\n                }\n            }\n        }\n        /**\n         * Iterate over an array.\n         *\n         * @deprecated\n         * @function Highcharts.each\n         *\n         * @param {Array<*>} arr\n         *        The array to iterate over.\n         *\n         * @param {Function} fn\n         *        The iterator callback. It passes three arguments:\n         *        - `item`: The array item.\n         *        - `index`: The item's index in the array.\n         *        - `arr`: The array that each is being applied to.\n         *\n         * @param {*} [ctx]\n         *        The context.\n         *\n         * @return {void}\n         */\n        /**\n         * Filter an array by a callback.\n         *\n         * @deprecated\n         * @function Highcharts.grep\n         *\n         * @param {Array<*>} arr\n         *        The array to filter.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if the item is to be preserved.\n         *\n         * @return {Array<*>}\n         *         A new, filtered array.\n         */\n        /**\n         * Map an array by a callback.\n         *\n         * @deprecated\n         * @function Highcharts.map\n         *\n         * @param {Array<*>} arr\n         *        The array to map.\n         *\n         * @param {Function} fn\n         *        The callback function. Return the new value for the new array.\n         *\n         * @return {Array<*>}\n         *         A new array item with modified items.\n         */\n        /**\n         * Reduce an array to a single value.\n         *\n         * @deprecated\n         * @function Highcharts.reduce\n         *\n         * @param {Array<*>} arr\n         *        The array to reduce.\n         *\n         * @param {Function} fn\n         *        The callback function. Return the reduced value. Receives 4\n         *        arguments: Accumulated/reduced value, current value, current array\n         *        index, and the array.\n         *\n         * @param {*} initialValue\n         *        The initial value of the accumulator.\n         *\n         * @return {*}\n         *         The reduced value.\n         */\n        /**\n         * Test whether at least one element in the array passes the test implemented by\n         * the provided function.\n         *\n         * @deprecated\n         * @function Highcharts.some\n         *\n         * @param {Array<*>} arr\n         *        The array to test\n         *\n         * @param {Function} fn\n         *        The function to run on each item. Return truthy to pass the test.\n         *        Receives arguments `currentValue`, `index` and `array`.\n         *\n         * @param {*} ctx\n         *        The context.\n         *\n         * @return {boolean}\n         */\n        objectEach({\n            map: 'map',\n            each: 'forEach',\n            grep: 'filter',\n            reduce: 'reduce',\n            some: 'some'\n        }, function (val, key) {\n            H[key] = function (arr) {\n                error(32, false, void 0, { [`Highcharts.${key}`]: `use Array.${val}` });\n                return Array.prototype[val].apply(arr, [].slice.call(arguments, 1));\n            };\n        });\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Add an event listener.\n         *\n         * @function Highcharts.addEvent<T>\n         *\n         * @param  {Highcharts.Class<T>|T} el\n         *         The element or object to add a listener to. It can be a\n         *         {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         *\n         * @param  {string} type\n         *         The event type.\n         *\n         * @param  {Highcharts.EventCallbackFunction<T>|Function} fn\n         *         The function callback to execute when the event is fired.\n         *\n         * @param  {Highcharts.EventOptionsObject} [options]\n         *         Options for adding the event.\n         *\n         * @sample highcharts/members/addevent\n         *         Use a general `render` event to draw shapes on a chart\n         *\n         * @return {Function}\n         *         A callback function to remove the added event.\n         */\n        function addEvent(el, type, fn, options = {}) {\n            /* eslint-enable valid-jsdoc */\n            // Add hcEvents to either the prototype (in case we're running addEvent on a\n            // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n            // inherited down the prototype chain, in which case we need to set the\n            // property on this instance (which may itself be a prototype).\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                owner.hcEvents = {};\n            }\n            const events = owner.hcEvents;\n            // Allow click events added to points, otherwise they will be prevented by\n            // the TouchPointer.pinch function after a pinch zoom operation (#7091).\n            if (H.Point && // Without H a dependency loop occurs\n                el instanceof H.Point &&\n                el.series &&\n                el.series.chart) {\n                el.series.chart.runTrackerClick = true;\n            }\n            // Handle DOM events\n            // If the browser supports passive events, add it to improve performance\n            // on touch events (#11353).\n            const addEventListener = el.addEventListener;\n            if (addEventListener) {\n                addEventListener.call(el, type, fn, H.supportsPassiveEvents ? {\n                    passive: options.passive === void 0 ?\n                        type.indexOf('touch') !== -1 : options.passive,\n                    capture: false\n                } : false);\n            }\n            if (!events[type]) {\n                events[type] = [];\n            }\n            const eventObject = {\n                fn,\n                order: typeof options.order === 'number' ? options.order : Infinity\n            };\n            events[type].push(eventObject);\n            // Order the calls\n            events[type].sort((a, b) => a.order - b.order);\n            // Return a function that can be called to remove this event.\n            return function () {\n                removeEvent(el, type, fn);\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.removeEvent<T>\n         *\n         * @param {Highcharts.Class<T>|T} el\n         *        The element to remove events on.\n         *\n         * @param {string} [type]\n         *        The type of events to remove. If undefined, all events are removed\n         *        from the element.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>} [fn]\n         *        The specific callback to remove. If undefined, all events that match\n         *        the element and optionally the type are removed.\n         *\n         * @return {void}\n         */\n        function removeEvent(el, type, fn) {\n            /* eslint-enable valid-jsdoc */\n            /**\n             * @private\n             */\n            function removeOneEvent(type, fn) {\n                const removeEventListener = el.removeEventListener;\n                if (removeEventListener) {\n                    removeEventListener.call(el, type, fn, false);\n                }\n            }\n            /**\n             * @private\n             */\n            function removeAllEvents(eventCollection) {\n                let types, len;\n                if (!el.nodeName) {\n                    return; // Break on non-DOM events\n                }\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                }\n                else {\n                    types = eventCollection;\n                }\n                objectEach(types, function (_val, n) {\n                    if (eventCollection[n]) {\n                        len = eventCollection[n].length;\n                        while (len--) {\n                            removeOneEvent(n, eventCollection[n][len].fn);\n                        }\n                    }\n                });\n            }\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                const events = owner.hcEvents;\n                if (type) {\n                    const typeEvents = (events[type] || []);\n                    if (fn) {\n                        events[type] = typeEvents.filter(function (obj) {\n                            return fn !== obj.fn;\n                        });\n                        removeOneEvent(type, fn);\n                    }\n                    else {\n                        removeAllEvents(events);\n                        events[type] = [];\n                    }\n                }\n                else {\n                    removeAllEvents(events);\n                    delete owner.hcEvents;\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.fireEvent<T>\n         *\n         * @param {T} el\n         *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n         *        an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The type of event.\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Custom event arguments that are passed on as an argument to the event\n         *        handler.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>|Function} [defaultFunction]\n         *        The default function to execute if the other listeners haven't\n         *        returned false.\n         *\n         * @return {void}\n         */\n        function fireEvent(el, type, eventArguments, defaultFunction) {\n            /* eslint-enable valid-jsdoc */\n            eventArguments = eventArguments || {};\n            if (doc.createEvent &&\n                (el.dispatchEvent ||\n                    (el.fireEvent &&\n                        // Enable firing events on Highcharts instance.\n                        el !== H))) {\n                const e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                eventArguments = extend(e, eventArguments);\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(eventArguments);\n                }\n                else {\n                    el.fireEvent(type, eventArguments);\n                }\n            }\n            else if (el.hcEvents) {\n                if (!eventArguments.target) {\n                    // We're running a custom event\n                    extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip\n                        // default handler if called. The built-in\n                        // defaultPrevented property is not overwritable (#5112)\n                        preventDefault: function () {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking\n                        // the zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event\n                        // (#2297). If it is set, we're running a browser event.\n                        type: type\n                    });\n                }\n                const events = [];\n                let object = el;\n                let multilevel = false;\n                // Recurse up the inheritance chain and collect hcEvents set as own\n                // objects on the prototypes.\n                while (object.hcEvents) {\n                    if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                        object.hcEvents[type]) {\n                        if (events.length) {\n                            multilevel = true;\n                        }\n                        events.unshift.apply(events, object.hcEvents[type]);\n                    }\n                    object = Object.getPrototypeOf(object);\n                }\n                // For performance reasons, only sort the event handlers in case we are\n                // dealing with multiple levels in the prototype chain. Otherwise, the\n                // events are already sorted in the addEvent function.\n                if (multilevel) {\n                    // Order the calls\n                    events.sort((a, b) => a.order - b.order);\n                }\n                // Call the collected event handlers\n                events.forEach((obj) => {\n                    // If the event handler returns false, prevent the default handler\n                    // from executing\n                    if (obj.fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                });\n            }\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction.call(el, eventArguments);\n            }\n        }\n        let serialMode;\n        /**\n         * Get a unique key for using in internal element id's and pointers. The key is\n         * composed of a random hash specific to this Highcharts instance, and a\n         * counter.\n         *\n         * @example\n         * let id = uniqueKey(); // => 'highcharts-x45f6hp-0'\n         *\n         * @function Highcharts.uniqueKey\n         *\n         * @return {string}\n         * A unique key.\n         */\n        const uniqueKey = (function () {\n            const hash = Math.random().toString(36).substring(2, 9) + '-';\n            let id = 0;\n            return function () {\n                return 'highcharts-' + (serialMode ? '' : hash) + id++;\n            };\n        }());\n        /**\n         * Activates a serial mode for element IDs provided by\n         * {@link Highcharts.uniqueKey}. This mode can be used in automated tests, where\n         * a simple comparison of two rendered SVG graphics is needed.\n         *\n         * **Note:** This is only for testing purposes and will break functionality in\n         * webpages with multiple charts.\n         *\n         * @example\n         * if (\n         *   process &&\n         *   process.env.NODE_ENV === 'development'\n         * ) {\n         *   Highcharts.useSerialIds(true);\n         * }\n         *\n         * @function Highcharts.useSerialIds\n         *\n         * @param {boolean} [mode]\n         * Changes the state of serial mode.\n         *\n         * @return {boolean|undefined}\n         * State of the serial mode.\n         */\n        function useSerialIds(mode) {\n            return (serialMode = pick(mode, serialMode));\n        }\n        function isFunction(obj) {\n            return typeof obj === 'function';\n        }\n        // Register Highcharts as a plugin in jQuery\n        if (win.jQuery) {\n            /**\n             * Highcharts-extended JQuery.\n             *\n             * @external JQuery\n             */\n            /**\n             * Helper function to return the chart of the current JQuery selector\n             * element.\n             *\n             * @function external:JQuery#highcharts\n             *\n             * @return {Highcharts.Chart}\n             *         The chart that is linked to the JQuery selector element.\n             */ /**\n            * Factory function to create a chart in the current JQuery selector\n            * element.\n            *\n            * @function external:JQuery#highcharts\n            *\n            * @param {'Chart'|'Map'|'StockChart'|string} [className]\n            *        Name of the factory class in the Highcharts namespace.\n            *\n            * @param {Highcharts.Options} [options]\n            *        The chart options structure.\n            *\n            * @param {Highcharts.ChartCallbackFunction} [callback]\n            *        Function to run when the chart has loaded and all external\n            *        images are loaded. Defining a\n            *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n            *        handler is equivalent.\n            *\n            * @return {JQuery}\n            *         The current JQuery selector.\n            */\n            win.jQuery.fn.highcharts = function () {\n                const args = [].slice.call(arguments);\n                if (this[0]) { // `this[0]` is the renderTo div\n                    // Create the chart\n                    if (args[0]) {\n                        new H[ // eslint-disable-line computed-property-spacing, no-new\n                        // Constructor defaults to Chart\n                        isString(args[0]) ? args.shift() : 'Chart'](this[0], args[0], args[1]);\n                        return this;\n                    }\n                    // When called without parameters or with the return argument,\n                    // return an existing chart\n                    return charts[attr(this[0], 'data-highcharts-chart')];\n                }\n            };\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // TODO use named exports when supported.\n        const Utilities = {\n            addEvent,\n            arrayMax,\n            arrayMin,\n            attr,\n            clamp,\n            clearTimeout: internalClearTimeout,\n            correctFloat,\n            createElement,\n            crisp,\n            css,\n            defined,\n            destroyObjectProperties,\n            diffObjects,\n            discardElement,\n            erase,\n            error,\n            extend,\n            extendClass,\n            find,\n            fireEvent,\n            getClosestDistance,\n            getMagnitude,\n            getNestedProperty,\n            getStyle,\n            inArray,\n            insertItem,\n            isArray,\n            isClass,\n            isDOMElement,\n            isFunction,\n            isNumber,\n            isObject,\n            isString,\n            keys,\n            merge,\n            normalizeTickInterval,\n            objectEach,\n            offset,\n            pad,\n            pick,\n            pInt,\n            pushUnique,\n            relativeLength,\n            removeEvent,\n            replaceNested,\n            splat,\n            stableSort,\n            syncTimeout,\n            timeUnits,\n            uniqueKey,\n            useSerialIds,\n            wrap\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms and defer of 0ms.\n         *\n         * @interface Highcharts.AnimationOptionsObject\n         */ /**\n        * A callback function to execute when the animation finishes.\n        * @name Highcharts.AnimationOptionsObject#complete\n        * @type {Function|undefined}\n        */ /**\n        * The animation defer in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#defer\n        * @type {number|undefined}\n        */ /**\n        * The animation duration in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#duration\n        * @type {number|undefined}\n        */ /**\n        * The name of an easing function as defined on the `Math` object.\n        * @name Highcharts.AnimationOptionsObject#easing\n        * @type {string|Function|undefined}\n        */ /**\n        * A callback function to execute on each step of each attribute or CSS property\n        * that's being animated. The first argument contains information about the\n        * animation and progress.\n        * @name Highcharts.AnimationOptionsObject#step\n        * @type {Function|undefined}\n        */\n        /**\n         * Creates a frame for the animated SVG element.\n         *\n         * @callback Highcharts.AnimationStepCallbackFunction\n         *\n         * @param {Highcharts.SVGElement} this\n         *        The SVG element to animate.\n         *\n         * @return {void}\n         */\n        /**\n         * Interface description for a class.\n         *\n         * @interface Highcharts.Class<T>\n         * @extends Function\n         */ /**\n        * Class constructor.\n        * @function Highcharts.Class<T>#new\n        * @param {...Array<*>} args\n        *        Constructor arguments.\n        * @return {T}\n        *         Class instance.\n        */\n        /**\n         * A style object with camel case property names to define visual appearance of\n         * a SVG element or HTML element. The properties can be whatever styles are\n         * supported on the given SVG or HTML element.\n         *\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         *\n         * @interface Highcharts.CSSObject\n         */ /**\n        * @name Highcharts.CSSObject#[key:string]\n        * @type {boolean|number|string|undefined}\n        */ /**\n        * Background style for the element.\n        * @name Highcharts.CSSObject#background\n        * @type {string|undefined}\n        */ /**\n        * Background color of the element.\n        * @name Highcharts.CSSObject#backgroundColor\n        * @type {Highcharts.ColorString|undefined}\n        */ /**\n        * Border style for the element.\n        * @name Highcharts.CSSObject#border\n        * @type {string|undefined}\n        */ /**\n        * Radius of the element border.\n        * @name Highcharts.CSSObject#borderRadius\n        * @type {number|undefined}\n        */ /**\n        * Color used in the element. The 'contrast' option is a Highcharts custom\n        * property that results in black or white, depending on the background of the\n        * element.\n        * @name Highcharts.CSSObject#color\n        * @type {'contrast'|Highcharts.ColorString|undefined}\n        */ /**\n        * Style of the mouse cursor when resting over the element.\n        * @name Highcharts.CSSObject#cursor\n        * @type {Highcharts.CursorValue|undefined}\n        */ /**\n        * Font family of the element text. Multiple values have to be in decreasing\n        * preference order and separated by comma.\n        * @name Highcharts.CSSObject#fontFamily\n        * @type {string|undefined}\n        */ /**\n        * Font size of the element text.\n        * @name Highcharts.CSSObject#fontSize\n        * @type {string|undefined}\n        */ /**\n        * Font weight of the element text.\n        * @name Highcharts.CSSObject#fontWeight\n        * @type {string|undefined}\n        */ /**\n        * Height of the element.\n        * @name Highcharts.CSSObject#height\n        * @type {number|undefined}\n        */ /**\n        * Width of the element border.\n        * @name Highcharts.CSSObject#lineWidth\n        * @type {number|undefined}\n        */ /**\n        * Opacity of the element.\n        * @name Highcharts.CSSObject#opacity\n        * @type {number|undefined}\n        */ /**\n        * Space around the element content.\n        * @name Highcharts.CSSObject#padding\n        * @type {string|undefined}\n        */ /**\n        * Behaviour of the element when the mouse cursor rests over it.\n        * @name Highcharts.CSSObject#pointerEvents\n        * @type {string|undefined}\n        */ /**\n        * Positioning of the element.\n        * @name Highcharts.CSSObject#position\n        * @type {string|undefined}\n        */ /**\n        * Alignment of the element text.\n        * @name Highcharts.CSSObject#textAlign\n        * @type {string|undefined}\n        */ /**\n        * Additional decoration of the element text.\n        * @name Highcharts.CSSObject#textDecoration\n        * @type {string|undefined}\n        */ /**\n        * Outline style of the element text.\n        * @name Highcharts.CSSObject#textOutline\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text. Highcharts SVG elements support\n        * `ellipsis` when a `width` is set.\n        * @name Highcharts.CSSObject#textOverflow\n        * @type {string|undefined}\n        */ /**\n        * Top spacing of the element relative to the parent element.\n        * @name Highcharts.CSSObject#top\n        * @type {string|undefined}\n        */ /**\n        * Animated transition of selected element properties.\n        * @name Highcharts.CSSObject#transition\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text.\n        * @name Highcharts.CSSObject#whiteSpace\n        * @type {string|undefined}\n        */ /**\n        * Width of the element.\n        * @name Highcharts.CSSObject#width\n        * @type {number|undefined}\n        */\n        /**\n         * All possible cursor styles.\n         *\n         * @typedef {'alias'|'all-scroll'|'auto'|'cell'|'col-resize'|'context-menu'|'copy'|'crosshair'|'default'|'e-resize'|'ew-resize'|'grab'|'grabbing'|'help'|'move'|'n-resize'|'ne-resize'|'nesw-resize'|'no-drop'|'none'|'not-allowed'|'ns-resize'|'nw-resize'|'nwse-resize'|'pointer'|'progress'|'row-resize'|'s-resize'|'se-resize'|'sw-resize'|'text'|'vertical-text'|'w-resize'|'wait'|'zoom-in'|'zoom-out'} Highcharts.CursorValue\n         */\n        /**\n         * All possible dash styles.\n         *\n         * @typedef {'Dash'|'DashDot'|'Dot'|'LongDash'|'LongDashDot'|'LongDashDotDot'|'ShortDash'|'ShortDashDot'|'ShortDashDotDot'|'ShortDot'|'Solid'} Highcharts.DashStyleValue\n         */\n        /**\n         * Generic dictionary in TypeScript notation.\n         * Use the native `AnyRecord` instead.\n         *\n         * @deprecated\n         * @interface Highcharts.Dictionary<T>\n         */ /**\n        * @name Highcharts.Dictionary<T>#[key:string]\n        * @type {T}\n        */\n        /**\n         * The function callback to execute when the event is fired. The `this` context\n         * contains the instance, that fired the event.\n         *\n         * @callback Highcharts.EventCallbackFunction<T>\n         *\n         * @param {T} this\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Event arguments.\n         *\n         * @return {boolean|void}\n         */\n        /**\n         * The event options for adding function callback.\n         *\n         * @interface Highcharts.EventOptionsObject\n         */ /**\n        * The order the event handler should be called. This opens for having one\n        * handler be called before another, independent of in which order they were\n        * added.\n        * @name Highcharts.EventOptionsObject#order\n        * @type {number}\n        */ /**\n        * Whether an event should be passive or not.\n        * When set to `true`, the function specified by listener will never call\n        * `preventDefault()`.\n        * @name Highcharts.EventOptionsObject#passive\n        * @type boolean\n        */\n        /**\n         * Formats data as a string. Usually the data is accessible through the `this`\n         * keyword.\n         *\n         * @callback Highcharts.FormatterCallbackFunction<T>\n         *\n         * @param {T} this\n         *        Context to format\n         *\n         * @return {string}\n         *         Formatted text\n         */\n        /**\n         * An object of key-value pairs for HTML attributes.\n         *\n         * @typedef {Highcharts.Dictionary<boolean|number|string|Function>} Highcharts.HTMLAttributes\n         */\n        /**\n         * An HTML DOM element. The type is a reference to the regular HTMLElement in\n         * the global scope.\n         *\n         * @typedef {global.HTMLElement} Highcharts.HTMLDOMElement\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\n         */\n        /**\n         * The iterator callback.\n         *\n         * @callback Highcharts.ObjectEachCallbackFunction<T>\n         *\n         * @param {T} this\n         *        The context.\n         *\n         * @param {*} value\n         *        The property value.\n         *\n         * @param {string} key\n         *        The property key.\n         *\n         * @param {*} obj\n         *        The object that objectEach is being applied to.\n         */\n        /**\n         * An object containing `left` and `top` properties for the position in the\n         * page.\n         *\n         * @interface Highcharts.OffsetObject\n         */ /**\n        * Left distance to the page border.\n        * @name Highcharts.OffsetObject#left\n        * @type {number}\n        */ /**\n        * Top distance to the page border.\n        * @name Highcharts.OffsetObject#top\n        * @type {number}\n        */\n        /**\n         * Describes a range.\n         *\n         * @interface Highcharts.RangeObject\n         */ /**\n        * Maximum number of the range.\n        * @name Highcharts.RangeObject#max\n        * @type {number}\n        */ /**\n        * Minimum number of the range.\n        * @name Highcharts.RangeObject#min\n        * @type {number}\n        */\n        /**\n         * If a number is given, it defines the pixel length. If a percentage string is\n         * given, like for example `'50%'`, the setting defines a length relative to a\n         * base size, for example the size of a container.\n         *\n         * @typedef {number|string} Highcharts.RelativeSize\n         */\n        /**\n         * Proceed function to call original (wrapped) function.\n         *\n         * @callback Highcharts.WrapProceedFunction\n         *\n         * @param {*} [arg1]\n         *        Optional argument. Without any arguments defaults to first argument of\n         *        the wrapping function.\n         *\n         * @param {*} [arg2]\n         *        Optional argument. Without any arguments defaults to second argument\n         *        of the wrapping function.\n         *\n         * @param {*} [arg3]\n         *        Optional argument. Without any arguments defaults to third argument of\n         *        the wrapping function.\n         *\n         * @return {*}\n         *         Return value of the original function.\n         */\n        /**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions. The most important member of the namespace would be the\n         * chart constructor.\n         *\n         * @example\n         * let chart = Highcharts.chart('container', { ... });\n         *\n         * @namespace Highcharts\n         */\n        ''; // Detach doclets above\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Core/Renderer/HTML/AST.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { SVG_NS, win } = H;\n        const { attr, createElement, css, error, isFunction, isString, objectEach, splat } = U;\n        const { trustedTypes } = win;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // Create the trusted type policy. This should not be exposed.\n        const trustedTypesPolicy = (trustedTypes &&\n            isFunction(trustedTypes.createPolicy) &&\n            trustedTypes.createPolicy('highcharts', {\n                createHTML: (s) => s\n            }));\n        const emptyHTML = trustedTypesPolicy ?\n            trustedTypesPolicy.createHTML('') :\n            '';\n        // IE9 and PhantomJS are only able to parse XML.\n        const hasValidDOMParser = (function () {\n            try {\n                return Boolean(new DOMParser().parseFromString(emptyHTML, 'text/html'));\n            }\n            catch (e) {\n                return false;\n            }\n        }());\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AST class represents an abstract syntax tree of HTML or SVG content. It\n         * can take HTML as an argument, parse it, optionally transform it to SVG, then\n         * perform sanitation before inserting it into the DOM.\n         *\n         * @class\n         * @name Highcharts.AST\n         *\n         * @param {string|Array<Highcharts.ASTNode>} source\n         * Either an HTML string or an ASTNode list to populate the tree.\n         */\n        class AST {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Filter an object of SVG or HTML attributes against the allow list.\n             *\n             * @static\n             *\n             * @function Highcharts.AST#filterUserAttributes\n             *\n             * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The filtered attributes\n             */\n            static filterUserAttributes(attributes) {\n                objectEach(attributes, (val, key) => {\n                    let valid = true;\n                    if (AST.allowedAttributes.indexOf(key) === -1) {\n                        valid = false;\n                    }\n                    if (['background', 'dynsrc', 'href', 'lowsrc', 'src']\n                        .indexOf(key) !== -1) {\n                        valid = isString(val) && AST.allowedReferences.some((ref) => val.indexOf(ref) === 0);\n                    }\n                    if (!valid) {\n                        error(33, false, void 0, {\n                            'Invalid attribute in config': `${key}`\n                        });\n                        delete attributes[key];\n                    }\n                    // #17753, < is not allowed in SVG attributes\n                    if (isString(val) && attributes[key]) {\n                        attributes[key] = val.replace(/</g, '&lt;');\n                    }\n                });\n                return attributes;\n            }\n            static parseStyle(style) {\n                return style\n                    .split(';')\n                    .reduce((styles, line) => {\n                    const pair = line.split(':').map((s) => s.trim()), key = pair.shift();\n                    if (key && pair.length) {\n                        styles[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = pair.join(':'); // #17146\n                    }\n                    return styles;\n                }, {});\n            }\n            /**\n             * Utility function to set html content for an element by passing in a\n             * markup string. The markup is safely parsed by the AST class to avoid\n             * XSS vulnerabilities. This function should be used instead of setting\n             * `innerHTML` in all cases where the content is not fully trusted.\n             *\n             * @static\n             * @function Highcharts.AST#setElementHTML\n             *\n             * @param {SVGDOMElement|HTMLDOMElement} el\n             * Node to set content of.\n             *\n             * @param {string} html\n             * Markup string\n             */\n            static setElementHTML(el, html) {\n                el.innerHTML = AST.emptyHTML; // Clear previous\n                if (html) {\n                    const ast = new AST(html);\n                    ast.addToDOM(el);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n            constructor(source) {\n                this.nodes = typeof source === 'string' ?\n                    this.parseMarkup(source) : source;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add the tree defined as a hierarchical JS structure to the DOM\n             *\n             * @function Highcharts.AST#addToDOM\n             *\n             * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n             * The node where it should be added\n             *\n             * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n             * The inserted node.\n             */\n            addToDOM(parent) {\n                /**\n                 * @private\n                 * @param {Highcharts.ASTNode} subtree\n                 * HTML/SVG definition\n                 * @param {Element} [subParent]\n                 * parent node\n                 * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n                 * The inserted node.\n                 */\n                function recurse(subtree, subParent) {\n                    let ret;\n                    splat(subtree).forEach(function (item) {\n                        const tagName = item.tagName;\n                        const textNode = item.textContent ?\n                            H.doc.createTextNode(item.textContent) :\n                            void 0;\n                        // Whether to ignore the AST filtering totally, #15345\n                        const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n                        let node;\n                        if (tagName) {\n                            if (tagName === '#text') {\n                                node = textNode;\n                            }\n                            else if (AST.allowedTags.indexOf(tagName) !== -1 ||\n                                bypassHTMLFiltering) {\n                                const NS = tagName === 'svg' ?\n                                    SVG_NS :\n                                    (subParent.namespaceURI || SVG_NS);\n                                const element = H.doc.createElementNS(NS, tagName);\n                                const attributes = item.attributes || {};\n                                // Apply attributes from root of AST node, legacy from\n                                // from before TextBuilder\n                                objectEach(item, function (val, key) {\n                                    if (key !== 'tagName' &&\n                                        key !== 'attributes' &&\n                                        key !== 'children' &&\n                                        key !== 'style' &&\n                                        key !== 'textContent') {\n                                        attributes[key] = val;\n                                    }\n                                });\n                                attr(element, bypassHTMLFiltering ?\n                                    attributes :\n                                    AST.filterUserAttributes(attributes));\n                                if (item.style) {\n                                    css(element, item.style);\n                                }\n                                // Add text content\n                                if (textNode) {\n                                    element.appendChild(textNode);\n                                }\n                                // Recurse\n                                recurse(item.children || [], element);\n                                node = element;\n                            }\n                            else {\n                                error(33, false, void 0, {\n                                    'Invalid tagName in config': tagName\n                                });\n                            }\n                        }\n                        // Add to the tree\n                        if (node) {\n                            subParent.appendChild(node);\n                        }\n                        ret = node;\n                    });\n                    // Return last node added (on top level it's the only one)\n                    return ret;\n                }\n                return recurse(this.nodes, parent);\n            }\n            /**\n             * Parse HTML/SVG markup into AST Node objects. Used internally from the\n             * constructor.\n             *\n             * @private\n             *\n             * @function Highcharts.AST#getNodesFromMarkup\n             *\n             * @param {string} markup The markup string.\n             *\n             * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n             */\n            parseMarkup(markup) {\n                const nodes = [];\n                markup = markup\n                    .trim()\n                    // The style attribute throws a warning when parsing when CSP is\n                    // enabled (#6884), so use an alias and pick it up below\n                    // Make all quotation marks parse correctly to DOM (#17627)\n                    .replace(/ style=([\"'])/g, ' data-style=$1');\n                let doc;\n                if (hasValidDOMParser) {\n                    doc = new DOMParser().parseFromString(trustedTypesPolicy ?\n                        trustedTypesPolicy.createHTML(markup) :\n                        markup, 'text/html');\n                }\n                else {\n                    const body = createElement('div');\n                    body.innerHTML = markup;\n                    doc = { body };\n                }\n                const appendChildNodes = (node, addTo) => {\n                    const tagName = node.nodeName.toLowerCase();\n                    // Add allowed tags\n                    const astNode = {\n                        tagName\n                    };\n                    if (tagName === '#text') {\n                        astNode.textContent = node.textContent || '';\n                    }\n                    const parsedAttributes = node.attributes;\n                    // Add attributes\n                    if (parsedAttributes) {\n                        const attributes = {};\n                        [].forEach.call(parsedAttributes, (attrib) => {\n                            if (attrib.name === 'data-style') {\n                                astNode.style = AST.parseStyle(attrib.value);\n                            }\n                            else {\n                                attributes[attrib.name] = attrib.value;\n                            }\n                        });\n                        astNode.attributes = attributes;\n                    }\n                    // Handle children\n                    if (node.childNodes.length) {\n                        const children = [];\n                        [].forEach.call(node.childNodes, (childNode) => {\n                            appendChildNodes(childNode, children);\n                        });\n                        if (children.length) {\n                            astNode.children = children;\n                        }\n                    }\n                    addTo.push(astNode);\n                };\n                [].forEach.call(doc.body.childNodes, (childNode) => appendChildNodes(childNode, nodes));\n                return nodes;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * The list of allowed SVG or HTML attributes, used for sanitizing\n         * potentially harmful content from the chart configuration before adding to\n         * the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n         *\n         * @example\n         * // Allow a custom, trusted attribute\n         * Highcharts.AST.allowedAttributes.push('data-value');\n         *\n         * @name Highcharts.AST.allowedAttributes\n         * @type {Array<string>}\n         */\n        AST.allowedAttributes = [\n            'alt',\n            'aria-controls',\n            'aria-describedby',\n            'aria-expanded',\n            'aria-haspopup',\n            'aria-hidden',\n            'aria-label',\n            'aria-labelledby',\n            'aria-live',\n            'aria-pressed',\n            'aria-readonly',\n            'aria-roledescription',\n            'aria-selected',\n            'class',\n            'clip-path',\n            'color',\n            'colspan',\n            'cx',\n            'cy',\n            'd',\n            'dx',\n            'dy',\n            'disabled',\n            'fill',\n            'filterUnits',\n            'flood-color',\n            'flood-opacity',\n            'height',\n            'href',\n            'id',\n            'in',\n            'in2',\n            'markerHeight',\n            'markerWidth',\n            'offset',\n            'opacity',\n            'operator',\n            'orient',\n            'padding',\n            'paddingLeft',\n            'paddingRight',\n            'patternUnits',\n            'r',\n            'radius',\n            'refX',\n            'refY',\n            'role',\n            'scope',\n            'slope',\n            'src',\n            'startOffset',\n            'stdDeviation',\n            'stroke',\n            'stroke-linecap',\n            'stroke-width',\n            'style',\n            'tableValues',\n            'result',\n            'rowspan',\n            'summary',\n            'target',\n            'tabindex',\n            'text-align',\n            'text-anchor',\n            'textAnchor',\n            'textLength',\n            'title',\n            'type',\n            'valign',\n            'width',\n            'x',\n            'x1',\n            'x2',\n            'xlink:href',\n            'y',\n            'y1',\n            'y2',\n            'zIndex'\n        ];\n        /**\n         * The list of allowed references for referring attributes like `href` and\n         * `src`. Attribute values will only be allowed if they start with one of\n         * these strings.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n         *\n         * @example\n         * // Allow tel:\n         * Highcharts.AST.allowedReferences.push('tel:');\n         *\n         * @name    Highcharts.AST.allowedReferences\n         * @type    {Array<string>}\n         */\n        AST.allowedReferences = [\n            'https://',\n            'http://',\n            'mailto:',\n            '/',\n            '../',\n            './',\n            '#'\n        ];\n        /**\n         * The list of allowed SVG or HTML tags, used for sanitizing potentially\n         * harmful content from the chart configuration before adding to the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n         *\n         * @example\n         * // Allow a custom, trusted tag\n         * Highcharts.AST.allowedTags.push('blink'); // ;)\n         *\n         * @name    Highcharts.AST.allowedTags\n         * @type    {Array<string>}\n         */\n        AST.allowedTags = [\n            'a',\n            'abbr',\n            'b',\n            'br',\n            'button',\n            'caption',\n            'circle',\n            'clipPath',\n            'code',\n            'dd',\n            'defs',\n            'div',\n            'dl',\n            'dt',\n            'em',\n            'feComponentTransfer',\n            'feComposite',\n            'feDropShadow',\n            'feFlood',\n            'feFuncA',\n            'feFuncB',\n            'feFuncG',\n            'feFuncR',\n            'feGaussianBlur',\n            'feMorphology',\n            'feOffset',\n            'feMerge',\n            'feMergeNode',\n            'filter',\n            'h1',\n            'h2',\n            'h3',\n            'h4',\n            'h5',\n            'h6',\n            'hr',\n            'i',\n            'img',\n            'li',\n            'linearGradient',\n            'marker',\n            'ol',\n            'p',\n            'path',\n            'pattern',\n            'pre',\n            'rect',\n            'small',\n            'span',\n            'stop',\n            'strong',\n            'style',\n            'sub',\n            'sup',\n            'svg',\n            'table',\n            'text',\n            'textPath',\n            'thead',\n            'title',\n            'tbody',\n            'tspan',\n            'td',\n            'th',\n            'tr',\n            'u',\n            'ul',\n            '#text'\n        ];\n        AST.emptyHTML = emptyHTML;\n        /**\n         * Allow all custom SVG and HTML attributes, references and tags (together\n         * with potentially harmful ones) to be added to the DOM from the chart\n         * configuration. In other words, disable the allow-listing which is the\n         * primary functionality of the AST.\n         *\n         * WARNING: Setting this property to `true` while allowing untrusted user\n         * data in the chart configuration will expose your application to XSS\n         * security risks!\n         *\n         * Note that in case you want to allow a known set of tags or attributes,\n         * you should allow-list them instead of disabling the filtering totally.\n         * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n         * [allowedReferences](Highcharts.AST#.allowedReferences) and\n         * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n         * setting is intended only for those cases where allow-listing is not\n         * practical, and the chart configuration already comes from a secure\n         * source.\n         *\n         * @example\n         * // Allow all custom attributes, references and tags (disable DOM XSS\n         * // filtering)\n         * Highcharts.AST.bypassHTMLFiltering = true;\n         *\n         * @name Highcharts.AST.bypassHTMLFiltering\n         * @static\n         */\n        AST.bypassHTMLFiltering = false;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Serialized form of an SVG/HTML definition, including children.\n         *\n         * @interface Highcharts.ASTNode\n         */ /**\n        * @name Highcharts.ASTNode#attributes\n        * @type {Highcharts.SVGAttributes|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#children\n        * @type {Array<Highcharts.ASTNode>|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#tagName\n        * @type {string|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#textContent\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in file\n\n        return AST;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentRegistry;\n        (function (ComponentRegistry) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             *\n             * Record of component classes\n             * @todo\n             *\n             */\n            ComponentRegistry.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method used to register new component classes.\n             *\n             * @param {string} key\n             * Registry key of the component class.\n             *\n             * @param {ComponentType} DataConnectorClass\n             * Component class (aka class constructor) to register.\n             */\n            function registerComponent(key, ComponentClass) {\n                return (!!key &&\n                    !ComponentRegistry.types[key] &&\n                    !!(ComponentRegistry.types[key] = ComponentClass));\n            }\n            ComponentRegistry.registerComponent = registerComponent;\n        })(ComponentRegistry || (ComponentRegistry = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Global Dashboards namespace in classic `<scripts>`-based implementations.\n         *\n         * @namespace Dashboards\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Prefix of a GUIElement HTML class name.\n             */\n            Globals.classNamePrefix = 'highcharts-dashboards-';\n            /** @internal */\n            Globals.classNames = {\n                layout: Globals.classNamePrefix + 'layout',\n                cell: Globals.classNamePrefix + 'cell',\n                cellHover: Globals.classNamePrefix + 'cell-state-hover',\n                cellActive: Globals.classNamePrefix + 'cell-state-active',\n                cellLoading: Globals.classNamePrefix + 'cell-state-loading',\n                row: Globals.classNamePrefix + 'row',\n                layoutsWrapper: Globals.classNamePrefix + 'layouts-wrapper',\n                boardContainer: Globals.classNamePrefix + 'wrapper'\n            };\n            /** @internal */\n            Globals.guiElementType = {\n                row: 'row',\n                cell: 'cell',\n                layout: 'layout'\n            };\n            /**\n             * Contains all Board instances of this window.\n             */\n            Globals.boards = [];\n            /**\n             * Reference to the window used by Dashboards.\n             */\n            Globals.win = window;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditGlobals.js', [_modules['Dashboards/Globals.js']], function (DG) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const PREFIX = DG.classNamePrefix + 'edit-';\n        /**\n         * @internal\n         */\n        const EditGlobals = {\n            classNames: {\n                resizeSnap: PREFIX + 'resize-snap',\n                resizeSnapX: PREFIX + 'resize-snap-x',\n                resizeSnapY: PREFIX + 'resize-snap-y',\n                separator: PREFIX + 'separator',\n                contextMenuBtn: PREFIX + 'context-menu-btn',\n                contextMenuBtnText: PREFIX + 'context-menu-btn-text',\n                contextMenu: PREFIX + 'context-menu',\n                contextMenuItem: PREFIX + 'context-menu-item',\n                editModeEnabled: PREFIX + 'enabled',\n                editToolbar: PREFIX + 'toolbar',\n                editToolbarCellOutline: PREFIX + 'toolbar-cell-outline',\n                editToolbarRowOutline: PREFIX + 'toolbar-row-outline',\n                editToolbarItem: PREFIX + 'toolbar-item',\n                editToolbarRow: PREFIX + 'toolbar-row',\n                editToolbarCell: PREFIX + 'toolbar-cell',\n                editSidebar: PREFIX + 'sidebar',\n                editSidebarShow: PREFIX + 'sidebar-show',\n                editSidebarHide: PREFIX + 'sidebar-hide',\n                editSidebarTitle: PREFIX + 'sidebar-title',\n                editSidebarMenuItem: PREFIX + 'sidebar-item',\n                rowContextHighlight: PREFIX + 'row-context-highlight',\n                cellEditHighlight: PREFIX + 'cell-highlight',\n                dashboardCellEditHighlightActive: PREFIX + 'cell-highlight-active',\n                dragMock: PREFIX + 'drag-mock',\n                dropPointer: PREFIX + 'drop-pointer',\n                contextDetectionPointer: PREFIX + 'ctx-detection-pointer',\n                resizePointer: PREFIX + 'resize-pointer',\n                currentEditedElement: PREFIX + 'unmask',\n                maskElement: PREFIX + 'mask',\n                menuItem: PREFIX + 'menu-item',\n                menu: PREFIX + 'menu',\n                menuVerticalSeparator: PREFIX + 'menu-vertical-separator',\n                menuHorizontalSeparator: PREFIX + 'menu-horizontal-separator',\n                menuDestroy: PREFIX + 'menu-destroy',\n                editSidebarWrapper: PREFIX + 'sidebar-wrapper',\n                customSelect: PREFIX + 'custom-select',\n                customSelectButton: PREFIX + 'custom-option-button',\n                toggleContainer: PREFIX + 'toggle-container',\n                toggleWrapper: PREFIX + 'toggle-wrapper',\n                toggleSlider: PREFIX + 'toggle-slider',\n                toggleWrapperColored: PREFIX + 'toggle-wrapper-colored',\n                toggleLabels: PREFIX + 'toggle-labels',\n                button: PREFIX + 'button',\n                sidebarNavButton: PREFIX + 'sidebar-button-nav',\n                labelText: PREFIX + 'label-text',\n                editSidebarTabBtn: PREFIX + 'sidebar-tab-btn',\n                editToolsBtn: PREFIX + 'tools-btn',\n                editTools: PREFIX + 'tools',\n                editGridItems: PREFIX + 'grid-items',\n                // Confirmation popup\n                confirmationPopup: PREFIX + 'confirmation-popup',\n                popupButtonContainer: PREFIX + 'confirmation-popup-button-container',\n                popupContentContainer: PREFIX + 'confirmation-popup-content',\n                popupCancelBtn: PREFIX + 'confirmation-popup-cancel-btn',\n                popupConfirmBtn: PREFIX + 'confirmation-popup-confirm-btn',\n                popupCloseButton: PREFIX + 'popup-close',\n                editOverlay: PREFIX + 'overlay',\n                editOverlayActive: PREFIX + 'overlay-active',\n                resizerMenuBtnActive: PREFIX + 'resizer-menu-btn-active',\n                sidebarCloseButton: PREFIX + 'close-btn',\n                editSidebarTabBtnWrapper: PREFIX + 'tabs-buttons-wrapper',\n                editSidebarRight: PREFIX + 'sidebar-right',\n                editSidebarRightShow: PREFIX + 'sidebar-right-show',\n                viewFullscreen: PREFIX + 'view-fullscreen',\n                // Accordion\n                accordionMenu: PREFIX + 'accordion-menu',\n                accordionContainer: PREFIX + 'accordion',\n                accordionHeader: PREFIX + 'accordion-header',\n                accordionHeaderBtn: PREFIX + 'accordion-header-btn',\n                accordionHeaderIcon: PREFIX + 'accordion-header-icon',\n                accordionContent: PREFIX + 'accordion-content',\n                accordionNestedWrapper: PREFIX + 'accordion-nested',\n                accordionMenuButtonsContainer: PREFIX + 'accordion-menu-buttons-container',\n                accordionMenuButton: PREFIX + 'accordion-menu-button',\n                hiddenElement: PREFIX + 'hidden-element',\n                collapsableContentHeader: PREFIX + 'collapsable-content-header',\n                standaloneElement: PREFIX + 'standalone-element',\n                // Custom dropdown with icons\n                collapsedElement: PREFIX + 'collapsed-element',\n                dropdown: PREFIX + 'dropdown',\n                dropdownContent: PREFIX + 'dropdown-content',\n                dropdownButton: PREFIX + 'dropdown-button',\n                dropdownButtonContent: PREFIX + 'dropdown-button-content',\n                dropdownIcon: PREFIX + 'pointer',\n                icon: PREFIX + 'icon'\n            },\n            lang: {\n                accessibility: {\n                    contextMenu: {\n                        button: 'Context menu'\n                    },\n                    editMode: {\n                        editMode: 'Edit mode toggle button'\n                    }\n                },\n                addComponent: 'Add component',\n                cancelButton: 'Cancel',\n                caption: 'Caption',\n                chartClassName: 'Chart class name',\n                chartConfig: 'Chart configuration',\n                chartID: 'Chart ID',\n                chartOptions: 'Chart options',\n                chartType: 'Chart type',\n                connectorName: 'Connector name',\n                confirmButton: 'Confirm',\n                confirmDestroyCell: 'Do you really want to destroy the cell?',\n                confirmDestroyRow: 'Do you really want to destroy the row?',\n                confirmDiscardChanges: 'Do you really want to discard the changes?',\n                dataLabels: 'Data labels',\n                editMode: 'Edit mode',\n                errorMessage: 'Something went wrong',\n                exitFullscreen: 'Exit full screen',\n                id: 'Id',\n                off: 'off',\n                on: 'on',\n                pointFormat: 'Point format',\n                settings: 'Settings',\n                style: 'Styles',\n                title: 'Title',\n                viewFullscreen: 'View in full screen',\n                sidebar: {\n                    HTML: 'HTML',\n                    layout: 'Layout',\n                    Highcharts: 'Highcharts',\n                    DataGrid: 'DataGrid',\n                    KPI: 'KPI'\n                }\n            }\n        };\n\n        return EditGlobals;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/GUIElement.js', [_modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (Globals, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, uniqueKey, objectEach, error } = U;\n        class GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /**\n             * Get offsets of the guiElement relative to the referenceElement or the\n             * Viewport.\n             *\n             * @param guiElement\n             * The element to get the offsets from.\n             *\n             * @param referenceElement\n             * The element to get the offsets relative to.\n             *\n             * @returns\n             * The offsets of the guiElement.\n             */\n            static getOffsets(guiElement, referenceElement) {\n                const offset = { left: 0, top: 0, right: 0, bottom: 0 };\n                if (!guiElement.container) {\n                    return offset;\n                }\n                const guiElementClientRect = guiElement.container.getBoundingClientRect();\n                const referenceClientRect = referenceElement ?\n                    referenceElement.getBoundingClientRect() : { left: 0, top: 0 };\n                offset.left = guiElementClientRect.left - referenceClientRect.left;\n                offset.top = guiElementClientRect.top - referenceClientRect.top;\n                offset.right =\n                    guiElementClientRect.right - referenceClientRect.left;\n                offset.bottom =\n                    guiElementClientRect.bottom - referenceClientRect.top;\n                return offset;\n            }\n            /**\n             * Get dimensions of the guiElement container from offsets.\n             *\n             * @param offsets\n             * The offsets of the guiElement container.\n             *\n             * @returns\n             * The dimensions of the guiElement container.\n             */\n            static getDimFromOffsets(offsets) {\n                return {\n                    width: offsets.right - offsets.left,\n                    height: offsets.bottom - offsets.top\n                };\n            }\n            /**\n             * Based on the element provided, generate an unique id.\n             *\n             * @param elementType\n             * Type of the element.\n             *\n             * @returns\n             * The unique id.\n             */\n            static getElementId(elementType) {\n                return (Globals.classNamePrefix + elementType + '-' +\n                    uniqueKey().slice(11));\n            }\n            /**\n             * Get width in percentages (0% - 100%).\n             *\n             * @param width\n             * The width of the element. Supported formats '50%' or '1/2'.\n             *\n             * @returns\n             * The width in percentages.\n             */\n            static getPercentageWidth(width) {\n                const fractionRegEx = /^(\\d{1})[\\-\\/\\.](\\d{1,2})$/;\n                let result;\n                if (fractionRegEx.test(width)) {\n                    const match = width.match(fractionRegEx) || [], multiplier = +match[1], divider = +match[2];\n                    result = 100 * multiplier / divider;\n                    result = (result <= 100 ? result : 100) + '%';\n                }\n                else if (width.indexOf('%') !== -1) {\n                    const value = parseFloat(width);\n                    result = (value <= 100 ?\n                        (value >= 0 ? value : 0) : 100) + '%';\n                }\n                return result;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Create or get existing HTML element as a GUIElement container.\n             *\n             * @param {GUIElement.ContainerOptions} options\n             * Options.\n             *\n             * @returns\n             * The HTML element for the element container.\n             */\n            getElementContainer(options) {\n                const guiElement = this;\n                let elem;\n                if (options.render) {\n                    if (options.attribs && !options.attribs.id) {\n                        delete options.attribs.id;\n                    }\n                }\n                else if (typeof options.elementId === 'string') {\n                    const div = document.getElementById(options.elementId);\n                    if (div) {\n                        guiElement.container = div;\n                    }\n                    else {\n                        error('Element ' + options.elementId + ' does not exist');\n                    }\n                }\n                if (options.element instanceof HTMLElement) {\n                    elem = options.element;\n                }\n                else {\n                    elem = createElement('div', options.attribs || {}, options.style || {}, options.parentContainer);\n                }\n                // Set bindedGUIElement event on GUIElement container.\n                guiElement.removeBindedEventFn = addEvent(elem, 'bindedGUIElement', function (e) {\n                    e.guiElement = guiElement;\n                    e.stopImmediatePropagation();\n                });\n                return elem;\n            }\n            /**\n             * Destroy the element, its container, event hooks and all properties.\n             */\n            destroy() {\n                const guiElement = this;\n                // Remove bindedGUIElement event.\n                if (guiElement.removeBindedEventFn) {\n                    guiElement.removeBindedEventFn();\n                }\n                // Remove HTML container.\n                if (guiElement.container && guiElement.container.parentNode) {\n                    guiElement.container.parentNode.removeChild(guiElement.container);\n                }\n                // Delete all properties.\n                objectEach(guiElement, function (val, key) {\n                    delete guiElement[key];\n                });\n            }\n            /**\n             * Return the GUIElement instance type.\n             *\n             * @returns\n             * The GUIElement instance type\n             */\n            getType() {\n                return this.type;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const visibilityChanged = (this.isVisible && !setVisible ||\n                    !this.isVisible && setVisible);\n                if (this.container && visibilityChanged) {\n                    this.container.style.display = (setVisible ?\n                        (displayStyle || 'block') :\n                        'none');\n                    this.isVisible = setVisible;\n                }\n            }\n            hide() {\n                this.changeVisibility(false);\n            }\n            show() {\n                this.changeVisibility();\n            }\n        }\n\n        return GUIElement;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/CellHTML.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/GUIElement.js']], function (EditGlobals, Globals, GUIElement) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @internal\n         **/\n        class CellHTML extends GUIElement {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CellHTML class.\n             *\n             * @param {Cell.Options} options\n             * Options for the cell.\n             */\n            constructor(options) {\n                super();\n                /**\n                 * The type of a GUIElement instance.\n                 */\n                this.type = 'cell-html';\n                this.options = options;\n                this.id = options.id;\n                this.container = options.container;\n                this.mountedComponent = options.mountedComponent;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and mounted component.\n             */\n            destroy() {\n                const cell = this;\n                // Destroy mounted component.\n                cell.mountedComponent?.destroy();\n                super.destroy();\n            }\n            /**\n             * Highlight the cell.\n             */\n            setHighlight() {\n                const cell = this;\n                cell.container.classList.toggle(EditGlobals.classNames.cellEditHighlight);\n                cell.mountedComponent?.board.container.classList.toggle(EditGlobals.classNames.dashboardCellEditHighlightActive);\n            }\n            setActiveState() {\n                const cell = this;\n                // Apply class\n                if (cell.container) {\n                    cell.container.classList.add(Globals.classNames.cellActive);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellHTML;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/Bindings.js', [_modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Layout/CellHTML.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (ComponentRegistry, CellHTML, Globals, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, fireEvent } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var Bindings;\n        (function (Bindings) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getGUIElement(idOrElement, parentElement) {\n                let guiElement;\n                if (typeof idOrElement === 'string' &&\n                    document.querySelectorAll('#' + idOrElement).length > 1) {\n                    // eslint-disable-next-line no-console\n                    console.warn(`Multiple cells have identical ID %c${idOrElement}%c, potentially leading to unexpected behavior. \\nEnsure that each cell has a unique ID on the page.`, 'font-weight: bold', '');\n                }\n                const container = parentElement ?\n                    parentElement.querySelector('#' + idOrElement) :\n                    document.getElementById(idOrElement);\n                if (container !== null) {\n                    fireEvent(container, 'bindedGUIElement', {}, function (e) {\n                        guiElement = e.guiElement;\n                    });\n                }\n                return guiElement;\n            }\n            async function addComponent(options, board, cell) {\n                const optionsStates = options.states;\n                const optionsEvents = options.events;\n                const renderTo = options.renderTo || options.cell;\n                if (!renderTo) {\n                    // eslint-disable-next-line no-console\n                    console.error('The%c renderTo%c option is required to render the component.', 'font-weight: bold', '');\n                    return;\n                }\n                if (board.mountedComponents.filter((el) => ((el.options.renderTo || el.options.cell) === renderTo)).length > 0) {\n                    // eslint-disable-next-line no-console\n                    console.error(`A component has already been declared in the cell %c${renderTo}%c use a different cell.`, 'font-weight: bold', '');\n                    return;\n                }\n                cell = cell || Bindings.getCell(renderTo, board.container);\n                const componentContainer = cell?.container || document.querySelector('#' + renderTo);\n                if (!componentContainer || !options.type) {\n                    // eslint-disable-next-line no-console\n                    console.error(`The component is unable to find the HTML cell element %c${renderTo}%c to render the content.`, 'font-weight: bold', '');\n                    return;\n                }\n                let ComponentClass = ComponentRegistry.types[options.type];\n                if (!ComponentClass) {\n                    // eslint-disable-next-line no-console\n                    console.error(`The component's type %c${options.type}%c does not exist.`, 'font-weight: bold', '');\n                    if (cell) {\n                        ComponentClass =\n                            ComponentRegistry.types['HTML'];\n                        options.title = {\n                            text: board.editMode?.lang.errorMessage ||\n                                'Something went wrong',\n                            className: Globals.classNamePrefix + 'component-title-error ' +\n                                Globals.classNamePrefix + 'component-title'\n                        };\n                    }\n                }\n                const component = new ComponentClass(cell, options, board);\n                const promise = component.load()['catch']((e) => {\n                    // eslint-disable-next-line no-console\n                    console.error(e);\n                    component.update({\n                        connector: {\n                            id: ''\n                        },\n                        title: {\n                            text: board.editMode?.lang.errorMessage ||\n                                'Something went wrong',\n                            className: Globals.classNamePrefix + 'component-title-error ' +\n                                Globals.classNamePrefix + 'component-title'\n                        }\n                    });\n                });\n                if (cell) {\n                    component.setCell(cell);\n                    cell.mountedComponent = component;\n                }\n                board.mountedComponents.push({\n                    options: options,\n                    component: component,\n                    cell: cell || new CellHTML({\n                        id: renderTo,\n                        container: componentContainer,\n                        mountedComponent: component\n                    })\n                });\n                fireEvent(component, 'mount');\n                // Events\n                if (optionsEvents && optionsEvents.click) {\n                    addEvent(componentContainer, 'click', () => {\n                        optionsEvents.click();\n                        if (cell &&\n                            component &&\n                            componentContainer &&\n                            optionsStates &&\n                            optionsStates.active) {\n                            cell.setActiveState();\n                        }\n                    });\n                }\n                // States\n                if (optionsStates?.hover) {\n                    componentContainer.classList.add(Globals.classNames.cellHover);\n                }\n                fireEvent(component, 'afterLoad');\n                return promise;\n            }\n            Bindings.addComponent = addComponent;\n            /** @internal */\n            function componentFromJSON(json) {\n                const componentClass = ComponentRegistry.types[json.$class];\n                if (!componentClass) {\n                    return;\n                }\n                const cell = Bindings.getCell(json.options.renderTo || '');\n                if (!cell) {\n                    return;\n                }\n                const component = componentClass.fromJSON(json, cell);\n                if (component) {\n                    component.render();\n                }\n                return component;\n            }\n            Bindings.componentFromJSON = componentFromJSON;\n            function getCell(idOrElement, parentElement) {\n                const cell = getGUIElement(idOrElement, parentElement);\n                if (!(cell && cell.getType() === 'cell')) {\n                    return;\n                }\n                return cell;\n            }\n            Bindings.getCell = getCell;\n            function getRow(idOrElement, parentElement) {\n                const row = getGUIElement(idOrElement, parentElement);\n                if (!(row && row.getType() === 'row')) {\n                    return;\n                }\n                return row;\n            }\n            Bindings.getRow = getRow;\n            function getLayout(idOrElement, parentElement) {\n                const layout = getGUIElement(idOrElement, parentElement);\n                if (!(layout && layout.getType() === 'layout')) {\n                    return;\n                }\n                return layout;\n            }\n            Bindings.getLayout = getLayout;\n        })(Bindings || (Bindings = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Bindings;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Cell.js', [_modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (Bindings, EditGlobals, Globals, GUIElement, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { componentFromJSON } = Bindings;\n        const { merge, fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @internal\n         **/\n        class Cell extends GUIElement {\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /** @internal */\n            static fromJSON(json, row) {\n                if (row) {\n                    const options = json.options;\n                    let id = options.containerId;\n                    if (row.layout.copyId) {\n                        id = id + '_' + row.layout.copyId;\n                    }\n                    return new Cell(row, {\n                        id: id,\n                        parentContainerId: (row.container && row.container.id) ||\n                            options.parentContainerId,\n                        mountedComponentJSON: options.mountedComponentJSON,\n                        style: options.style,\n                        layoutJSON: options.layoutJSON,\n                        width: options.width,\n                        height: options.height\n                    });\n                }\n                return void 0;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the Cell class.\n             *\n             * @param {Row} row\n             * Reference to the row instance.\n             *\n             * @param {Cell.Options} options\n             * Options for the cell.\n             *\n             * @param {HTMLElement} cellElement\n             * The container of the cell HTML element.\n             */\n            constructor(row, options, cellElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.cell;\n                this.id = options.id;\n                this.options = options;\n                this.row = row;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    row.container;\n                const layoutOptions = row.layout.options || {}, rowOptions = row.options || {}, cellClassName = layoutOptions.cellClassName || '';\n                let cellHeight;\n                if (options.height) {\n                    if (typeof options.height === 'number') {\n                        cellHeight = options.height + 'px';\n                    }\n                    else {\n                        cellHeight = options.height;\n                    }\n                }\n                this.container = this.getElementContainer({\n                    render: row.layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.cell + ' ' +\n                            cellClassName\n                    },\n                    element: cellElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, rowOptions.style, options.style, {\n                        height: cellHeight\n                    })\n                });\n                // Mount component from JSON.\n                if (this.options.mountedComponentJSON) {\n                    this.mountComponentFromJSON(this.options.mountedComponentJSON);\n                }\n                // Nested layout\n                if (this.options.layout) {\n                    this.setNestedLayout();\n                }\n                if (this.options.layoutJSON) {\n                    const layout = this.row.layout, board = layout.board, layoutFromJSON = layout.constructor.fromJSON;\n                    this.nestedLayout = layoutFromJSON(merge(this.options.layoutJSON, {\n                        parentContainerId: this.options.id\n                    }), board, this);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create a nested layout in the cell and assign it to the nestedCell\n             * property.\n             * @internal\n             */\n            setNestedLayout() {\n                const board = this.row.layout.board, Layout = this.row.layout.constructor;\n                const optionsGui = board.options.gui;\n                this.nestedLayout = new Layout(board, merge({}, optionsGui && optionsGui.layoutOptions, this.options.layout, {\n                    parentContainerId: this.options.id\n                }), this);\n            }\n            /**\n             * Mount component from JSON.\n             * @internal\n             *\n             * @param {Component.JSON} [json]\n             * Component JSON.\n             *\n             * @return {boolean}\n             * Returns true, if the component created from JSON is mounted,\n             * otherwise false.\n             */\n            mountComponentFromJSON(json) {\n                const cell = this;\n                if (cell.id !== json.options.parentElement) {\n                    json.options.parentElement = cell.id;\n                }\n                const component = componentFromJSON(json);\n                if (component) {\n                    cell.mountedComponent = component;\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and mounted component.\n             */\n            destroy() {\n                const cell = this;\n                const { row } = cell;\n                // Destroy mounted component.\n                cell.mountedComponent?.destroy();\n                // If layout exists in the cell - destroy it\n                cell.nestedLayout?.destroy();\n                row.unmountCell(cell);\n                const destroyRow = row.cells?.length === 0;\n                super.destroy();\n                if (destroyRow) {\n                    row.destroy();\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Cell.JSON}\n             * Class JSON of this Cell instance.\n             */\n            toJSON() {\n                const cell = this, rowContainerId = (cell.row.container || {}).id || '';\n                return {\n                    $class: 'Dashboards.Layout.Cell',\n                    options: {\n                        containerId: cell.container.id,\n                        parentContainerId: rowContainerId,\n                        width: cell.options.width,\n                        height: cell.options.height,\n                        mountedComponentJSON: cell.mountedComponent && cell.mountedComponent.toJSON(),\n                        style: cell.options.style,\n                        layoutJSON: cell.nestedLayout && cell.nestedLayout.toJSON()\n                    }\n                };\n            }\n            /**\n             * Get the cell's options.\n             * @returns\n             * The JSON of cell's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return this.options;\n            }\n            changeVisibility(setVisible = true) {\n                super.changeVisibility(setVisible);\n                const cell = this, row = cell.row;\n                // Change row visibility if needed.\n                if (!cell.row.getVisibleCells().length) {\n                    cell.row.hide();\n                }\n                else if (cell.isVisible && !row.isVisible) {\n                    cell.row.show();\n                }\n                setTimeout(() => {\n                    fireEvent(row, 'cellChange', { row, cell });\n                }, 0);\n            }\n            getParentCell(level) {\n                const cell = this;\n                let parentCell;\n                if (level <= cell.row.layout.level) {\n                    if (cell.row.layout.level === level) {\n                        return cell;\n                    }\n                    if (cell.row.layout.level - 1 >= 0) {\n                        parentCell = cell.row.layout.parentCell;\n                        if (parentCell) {\n                            return parentCell.getParentCell(level);\n                        }\n                    }\n                }\n            }\n            // Method to get array of overlapping levels.\n            getOverlappingLevels(align, levelMaxGap, // Max distance between levels\n            offset // Analyzed cell offset\n            ) {\n                const cell = this, parentCell = cell.row.layout.parentCell;\n                let levels = [cell.row.layout.level];\n                if (parentCell) {\n                    const cellOffset = offset || GUIElement.getOffsets(cell)[align];\n                    const parentCellOffset = GUIElement.getOffsets(parentCell)[align];\n                    if (Math.abs(cellOffset - parentCellOffset) < levelMaxGap) {\n                        levels = [\n                            ...levels,\n                            ...parentCell.getOverlappingLevels(align, levelMaxGap, parentCellOffset)\n                        ];\n                    }\n                }\n                return levels;\n            }\n            /**\n             * Set cell size.\n             *\n             * @param width\n             * % value or 'auto' or px\n             *\n             * @param height\n             * value in px\n             */\n            setSize(width, height) {\n                const cell = this, editMode = cell.row.layout.board.editMode;\n                if (cell.container) {\n                    if (width) {\n                        if (width === 'auto' &&\n                            cell.container.style.flex !== '1 1 0%') {\n                            cell.container.style.flex = '1 1 0%';\n                        }\n                        else {\n                            const cellWidth = cell.convertWidthToValue(width);\n                            if (cellWidth &&\n                                cell.container.style.flex !== '0 0 ' + cellWidth) {\n                                cell.container.style.flex = '0 0 ' + cellWidth;\n                            }\n                            cell.options.width = cellWidth;\n                        }\n                    }\n                    if (height) {\n                        cell.options.height = cell.container.style.height =\n                            height + 'px';\n                    }\n                    if (editMode) {\n                        editMode.hideContextPointer();\n                        if (editMode.cellToolbar &&\n                            editMode.cellToolbar.isVisible) {\n                            if (editMode.cellToolbar.cell === cell) {\n                                editMode.cellToolbar.showToolbar(cell);\n                            }\n                            else {\n                                editMode.cellToolbar.hide();\n                            }\n                        }\n                    }\n                    // Call cellResize board event.\n                    fireEvent(cell.row.layout.board, 'cellResize', { cell: cell });\n                    fireEvent(cell.row, 'cellChange', { cell: cell, row: cell.row });\n                }\n            }\n            setHighlight(remove) {\n                const cell = this, editMode = cell.row.layout.board.editMode;\n                if (cell.container && editMode) {\n                    const cnt = cell.container, isSet = cnt.classList.contains(EditGlobals.classNames.cellEditHighlight);\n                    if (!remove && !isSet) {\n                        cnt.classList.add(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.add(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = true;\n                    }\n                    else if (remove && isSet) {\n                        cnt.classList.remove(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.remove(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = false;\n                    }\n                }\n            }\n            setActiveState() {\n                // Reset other boxes\n                const cell = this;\n                cell.row.layout.board.mountedComponents.forEach((mountedComponent) => {\n                    if (mountedComponent.cell.container) {\n                        mountedComponent.cell.container.classList.remove(Globals.classNames.cellActive);\n                    }\n                });\n                // Apply class\n                if (cell.container) {\n                    cell.container.classList.add(Globals.classNames.cellActive);\n                }\n            }\n            /**\n             * Enables or disables the loading indicator in the cell.\n             *\n             * @internal\n             */\n            setLoadingState(enabled = true) {\n                this.container?.classList?.toggle(Globals.classNames.cellLoading, enabled);\n            }\n            convertWidthToValue(width) {\n                if (typeof width === 'number') {\n                    return width + 'px';\n                }\n                if (/px/.test(width)) {\n                    return width;\n                }\n                return GUIElement.getPercentageWidth(width) || '';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Cell;\n    });\n    _registerModule(_modules, 'Dashboards/CallbackRegistry.js', [], function () {\n        class CallbackRegistry {\n            constructor() {\n                this.registry = {};\n            }\n            addCallback(id, callback) {\n                this.registry[id] = callback;\n            }\n            getCallback(id) {\n                return this.registry[id];\n            }\n            /** @internal */\n            toJSON() {\n                const json = {};\n                Object.keys(this.registry).forEach((key) => {\n                    const entry = this.getCallback(key);\n                    const { func, type } = entry;\n                    json[key] = {\n                        func: func.toString(),\n                        type\n                    };\n                });\n                return json;\n            }\n        }\n\n        return CallbackRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ConnectorHandler.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Globals.js']], function (Cell, Globals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A class that handles the connection between the component and the data\n         * connector.\n         */\n        class ConnectorHandler {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates an object that manages the data layer for the component.\n             *\n             * @param component\n             * The component that the connector is tied to.\n             *\n             * @param options\n             * The options for the connector.\n             *\n             */\n            constructor(component, options) {\n                /**\n                 * Event listeners tied to the current DataTable. Used for rerendering the\n                 * component on data changes.\n                 *\n                 * @internal\n                 */\n                this.tableEvents = [];\n                this.component = component;\n                this.options = options;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Inits connectors for the component and rerenders it.\n             *\n             * @returns\n             * Promise resolving to the component.\n             */\n            async initConnector() {\n                const component = this.component;\n                const connectorId = this.options.id;\n                const dataPool = this.component.board.dataPool;\n                if (connectorId &&\n                    (this.connectorId !== connectorId ||\n                        dataPool.isNewConnector(connectorId))) {\n                    if (component.cell instanceof Cell) {\n                        component.cell.setLoadingState();\n                    }\n                    const connector = await dataPool.getConnector(connectorId);\n                    this.setConnector(connector);\n                }\n                return component;\n            }\n            /**\n             * Sets the connector for the component connector handler.\n             *\n             * @param connector\n             * The connector to set.\n             */\n            setConnector(connector) {\n                // Clean up old event listeners\n                while (this.tableEvents.length) {\n                    const eventCallback = this.tableEvents.pop();\n                    if (typeof eventCallback === 'function') {\n                        eventCallback();\n                    }\n                }\n                this.connector = connector;\n                if (connector) {\n                    // Set up event listeners\n                    this.clearTableListeners();\n                    this.setupTableListeners(connector.table);\n                    // Re-setup if modifier changes\n                    connector.table.on('setModifier', () => this.clearTableListeners());\n                    connector.table.on('afterSetModifier', (e) => {\n                        if (e.type === 'afterSetModifier' && e.modified) {\n                            this.setupTableListeners(e.modified);\n                            this.component.emit({\n                                type: 'tableChanged',\n                                connector: connector\n                            });\n                        }\n                    });\n                    if (connector.table) {\n                        if (this.presentationModifier) {\n                            this.presentationTable =\n                                this.presentationModifier.modifyTable(connector.table.modified.clone()).modified;\n                        }\n                        else {\n                            this.presentationTable = connector.table;\n                        }\n                    }\n                }\n                return this.component;\n            }\n            /**\n             * Adds event listeners to data table.\n             * @param table\n             * Data table that is source of data.\n             * @internal\n             */\n            setupTableListeners(table) {\n                const connector = this.connector;\n                if (connector) {\n                    if (table) {\n                        [\n                            'afterDeleteRows',\n                            'afterSetCell',\n                            'afterSetColumns',\n                            'afterSetRows'\n                        ].forEach((event) => {\n                            this.tableEvents.push(table.on(event, (e) => {\n                                clearTimeout(this.tableEventTimeout);\n                                this.tableEventTimeout = Globals.win.setTimeout(() => {\n                                    this.component.emit({\n                                        ...e,\n                                        type: 'tableChanged',\n                                        targetConnector: connector\n                                    });\n                                    this.tableEventTimeout = void 0;\n                                });\n                            }));\n                        });\n                    }\n                }\n            }\n            /**\n             * Remove event listeners in data table.\n             * @internal\n             */\n            clearTableListeners() {\n                const connector = this.connector;\n                const tableEvents = this.tableEvents;\n                this.destroy();\n                if (connector) {\n                    tableEvents.push(connector.table.on('afterSetModifier', (e) => {\n                        if (e.type === 'afterSetModifier') {\n                            clearTimeout(this.tableEventTimeout);\n                            this.tableEventTimeout = Globals.win.setTimeout(() => {\n                                connector.emit({\n                                    ...e,\n                                    type: 'tableChanged',\n                                    targetConnector: connector\n                                });\n                                this.tableEventTimeout = void 0;\n                            });\n                        }\n                    }));\n                }\n            }\n            updateOptions(newOptions) {\n                this.options = newOptions;\n            }\n            destroy() {\n                this.tableEvents.forEach((clearEvent) => clearEvent());\n                this.tableEvents.length = 0;\n            }\n        }\n\n        return ConnectorHandler;\n    });\n    _registerModule(_modules, 'Dashboards/Components/EditableOptions.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        class EditableOptions {\n            constructor(component, bindings = EditableOptions.defaultBindings) {\n                this.component = component;\n                this.bindings = bindings;\n            }\n            getOptions() {\n                const options = this.component.options.editableOptions;\n                if (!options) {\n                    return [];\n                }\n                for (let i = 0, iEnd = options.length; i < iEnd; i++) {\n                    const option = options[i];\n                    if (option.name === 'connectorName') {\n                        const board = this.component.board;\n                        const selectOptions = !board ?\n                            [] :\n                            board.dataPool\n                                .getConnectorIds()\n                                .map((name) => ({ name }));\n                        option.selectOptions = selectOptions;\n                    }\n                }\n                return options;\n            }\n        }\n        EditableOptions.defaultBindings = {\n            keyMap: {\n                color: 'colorPicker',\n                title: 'text',\n                caption: 'text',\n                style: 'textarea'\n            },\n            typeMap: {\n                'string': 'text',\n                'number': 'input',\n                'boolean': 'toggle'\n            },\n            skipRedraw: []\n        };\n        // Bindings of basic types to \"editor components\"\n        EditableOptions.defaultTypeMap = {\n            'string': 'text',\n            'number': 'input',\n            'boolean': 'toggle'\n        };\n\n        return EditableOptions;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Emitter.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /**\n         *  Class responsible for adding event listeners on a component\n         *  @internal\n         */\n        class SyncEmitter {\n            /**\n             * Adds an emitter to the emitter registry.\n             *\n             * @param emitter the emitter to add to the registry.\n             */\n            static register(emitter) {\n                const { id } = emitter;\n                this.registry[id] = emitter;\n            }\n            /**\n             * Gets an emitter from emitter registry.\n             *\n             * @param emitterID The ID of the emitter to get.\n             */\n            static get(emitterID) {\n                return this.registry[emitterID];\n            }\n            /**\n             * Creates a new emitter instance.\n             *\n             * @param id An unique ID for the emitter.\n             *\n             * @param func\n             * The function to be called when the emitter is activated.\n             */\n            constructor(id, func) {\n                this.id = id;\n                this.func = func;\n                SyncEmitter.register(this);\n            }\n            /**\n             * Attaches the emitter to a component.\n             *\n             * @param component The component to attach to.\n             */\n            create(component) {\n                this.callback = this.func.call(component);\n            }\n            /**\n             * To be used when removing the emitter from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable emitter.\n         * The emitter is stored by ID.\n         */\n        SyncEmitter.registry = {};\n\n        return SyncEmitter;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Handler.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class responsible for storing handler callbacks used in component sync.\n         * @internal\n         */\n        class SyncHandler {\n            /**\n             * Adds a handler to the handler registry.\n             *\n             * @param handler\n             * The handler to add to the registry.\n             */\n            static register(handler) {\n                const { id } = handler;\n                this.registry[id] = handler;\n            }\n            /**\n             * Gets a handler from handler registry.\n             *\n             * @param handlerID\n             * The ID of the handler to get.\n             */\n            static get(handlerID) {\n                return this.registry[handlerID];\n            }\n            /**\n             * Creates a new handler instance.\n             *\n             * @param id\n             * An unique ID for the handler.\n             *\n             * @param func\n             * The function to be called when the handler is activated.\n             */\n            constructor(id, func) {\n                this.id = id;\n                this.func = func;\n                SyncHandler.register(this);\n            }\n            /**\n             * Calls the activation function on the component and sets the callback to\n             * the return function.\n             *\n             * @param component\n             * The component to register on.\n             */\n            register(component) {\n                const { func } = this;\n                this.callback = func.call(component);\n            }\n            /**\n             * To be used when removing the handler from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable handlers.\n         * The handler is stored by ID.\n         */\n        SyncHandler.registry = {};\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SyncHandler;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Sync.js', [_modules['Dashboards/Components/Sync/Emitter.js'], _modules['Dashboards/Components/Sync/Handler.js'], _modules['Core/Utilities.js']], function (SyncEmitter, SyncHandler, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, isObject } = U;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /** @internal */\n        class Sync {\n            /* *\n             *\n             * Constructor\n             *\n             * */\n            /**\n             * Creates an instance of the sync class.\n             *\n             * @param component\n             * The component to which the emitters and handlers are attached.\n             *\n             * @param predefinedSyncConfig\n             * The predefined sync configuration.\n             */\n            constructor(component, predefinedSyncConfig) {\n                this.component = component;\n                this.predefinedSyncConfig = predefinedSyncConfig;\n                this.syncConfig = Sync.prepareSyncConfig(predefinedSyncConfig, component.options.sync);\n                this.registeredSyncHandlers = {};\n                this.registeredSyncEmitters = {};\n                this.isSyncing = false;\n                this.listeners = [];\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method that prepares the sync configuration from the predefined config\n             * and current component options.\n             *\n             * @param predefinedConfig The predefined sync configuration.\n             * @param componentSyncOptions The current component sync options.\n             * @returns The sync configuration.\n             */\n            static prepareSyncConfig(predefinedConfig, componentSyncOptions = {}) {\n                const { defaultSyncPairs: defaultPairs, defaultSyncOptions: defaultOptionsList } = predefinedConfig;\n                return Object.keys(componentSyncOptions).reduce((acc, syncName) => {\n                    if (syncName) {\n                        const defaultPair = defaultPairs[syncName];\n                        const defaultOptions = defaultOptionsList[syncName];\n                        const entry = componentSyncOptions[syncName];\n                        const preparedOptions = merge(defaultOptions || {}, { enabled: isObject(entry) ? entry.enabled : entry }, isObject(entry) ? entry : {});\n                        if (defaultPair && preparedOptions.enabled) {\n                            const keys = [\n                                'emitter',\n                                'handler'\n                            ];\n                            for (const key of keys) {\n                                if (preparedOptions[key] === true ||\n                                    preparedOptions[key] === void 0) {\n                                    preparedOptions[key] =\n                                        defaultPair[key];\n                                }\n                            }\n                        }\n                        acc[syncName] = preparedOptions;\n                    }\n                    return acc;\n                }, {});\n            }\n            /**\n             * Add new emitter to the registered emitters.\n             *\n             * @param emitter\n             * The emitter to register.\n             */\n            registerSyncEmitter(emitter) {\n                const { id } = emitter;\n                this.registeredSyncEmitters[id] = emitter;\n            }\n            /**\n             * Method that checks if the emitter is registered.\n             *\n             * @param id\n             * The id of the emitter to check.\n             *\n             * @returns\n             * Whether the emitter is registered.\n             */\n            isRegisteredEmitter(id) {\n                return Boolean(this.registeredSyncEmitters[id]);\n            }\n            /**\n             * Register new handler to the registered handlers.\n             *\n             * @param handler\n             * The handler to register.\n             */\n            registerSyncHandler(handler) {\n                const { id } = handler;\n                this.registeredSyncHandlers[id] = handler;\n            }\n            /**\n             * Method that checks if the handler is registered.\n             *\n             * @param handlerID\n             * The id of the handler to check.\n             *\n             * @returns\n             * Whether the handler is registered.\n             */\n            isRegisteredHandler(handlerID) {\n                return Boolean(this.registeredSyncHandlers[handlerID]);\n            }\n            /**\n             * Registers the handlers and emitters on the component\n             */\n            start() {\n                const { component } = this;\n                this.syncConfig = Sync.prepareSyncConfig(this.predefinedSyncConfig, component.options.sync);\n                for (const id of Object.keys(this.syncConfig)) {\n                    const syncOptions = this.syncConfig[id];\n                    if (!syncOptions) {\n                        continue;\n                    }\n                    let { emitter: emitterConfig, handler: handlerConfig } = syncOptions;\n                    if (handlerConfig) {\n                        if (handlerConfig === true) {\n                            handlerConfig =\n                                Sync.defaultHandlers[id]\n                                    .handler;\n                        }\n                        const handler = new SyncHandler(id, handlerConfig);\n                        if (!this.isRegisteredHandler(handler.id)) {\n                            this.registerSyncHandler(handler);\n                            handler.register(component);\n                        }\n                    }\n                    if (emitterConfig) {\n                        if (emitterConfig === true) {\n                            emitterConfig =\n                                Sync.defaultHandlers[id]\n                                    .emitter;\n                        }\n                        const emitter = new SyncEmitter(id, emitterConfig);\n                        if (!this.isRegisteredEmitter(emitter.id)) {\n                            this.registerSyncEmitter(emitter);\n                            emitter.create(component);\n                        }\n                    }\n                }\n                this.isSyncing = true;\n                this.listeners.push(component.on('update', () => this.stop()));\n            }\n            /**\n             * Removes the handlers and emitters from the component.\n             */\n            stop() {\n                const { component, listeners, registeredSyncHandlers, registeredSyncEmitters } = this;\n                Object.keys(registeredSyncHandlers).forEach((id) => {\n                    registeredSyncHandlers[id].remove();\n                    delete registeredSyncHandlers[id];\n                });\n                Object.keys(registeredSyncEmitters).forEach((id) => {\n                    registeredSyncEmitters[id].remove();\n                    delete registeredSyncEmitters[id];\n                });\n                this.isSyncing = false;\n                for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                    listeners[i]();\n                }\n                this.listeners.length = 0;\n                this.listeners.push(component.on('afterUpdate', () => {\n                    this.start();\n                }));\n            }\n        }\n        /**\n         * Default handlers for the sync class. This property is extended by\n         * different Components, where default syncs are added. Allows overwriting\n         * the configuration before creating the dashboard.\n         */\n        Sync.defaultHandlers = {};\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Sync;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentUtilities;\n        (function (ComponentUtilities) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getMargins(element, includeBorders = true) {\n                const borders = {\n                    x: ['borderLeft', 'borderRight'],\n                    y: ['borderTop', 'borderBottom']\n                };\n                return {\n                    y: getStyles(element, [\n                        'marginTop',\n                        'marginBottom',\n                        ...(includeBorders ? borders.y : [])\n                    ]).reduce(sumPixels, 0),\n                    x: getStyles(element, [\n                        'marginLeft',\n                        'marginTop',\n                        ...(includeBorders ? borders.x : [])\n                    ]).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getMargins = getMargins;\n            function getPaddings(element) {\n                return {\n                    x: getStyles(element, ['paddingLeft', 'paddingRight']).reduce(sumPixels, 0),\n                    y: getStyles(element, ['paddingTop', 'paddingBottom']).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getPaddings = getPaddings;\n            function getStyles(element, styles) {\n                const elementStyles = window.getComputedStyle(element);\n                return styles.map((style) => elementStyles[style]); // Cannot use getPropertyValue?\n            }\n            ComponentUtilities.getStyles = getStyles;\n            function sumPixels(accumulator, value) {\n                if (value) {\n                    accumulator += (typeof value === 'number' ? value : parseFloat(value));\n                }\n                return accumulator;\n            }\n            ComponentUtilities.sumPixels = sumPixels;\n        })(ComponentUtilities || (ComponentUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentUtilities;\n    });\n    _registerModule(_modules, 'Dashboards/Utilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { error: coreError, isClass, isDOMElement, isObject, objectEach, uniqueKey: coreUniqueKey } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {boolean} extend\n         *        Whether to extend the left-side object (a) or return a whole new\n         *        object.\n         *\n         * @param {T|undefined} a\n         *        The first object to extend. When only this is given, the function\n         *        returns a deep copy.\n         *\n         * @param {...Array<object|undefined>} [n]\n         *        An object to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */ /**\n        * Utility function to deep merge two or more objects and return a third object.\n        * The merge function can also be used with a single object argument to create a\n        * deep copy of an object.\n        *\n        * @function Highcharts.merge<T>\n        *\n        * @param {T|undefined} a\n        *        The first object to extend. When only this is given, the function\n        *        returns a deep copy.\n        *\n        * @param {...Array<object|undefined>} [n]\n        *        An object to merge into the previous one.\n        *\n        * @return {T}\n        *         The merged object. If the first argument is true, the return is the\n        *         same as the second argument.\n        */\n        function merge() {\n            /* eslint-enable valid-jsdoc */\n            let i, args = arguments, copyDepth = 0, ret = {};\n            // Descriptive error stack:\n            const copyDepthError = new Error('Recursive copy depth > 100'), doCopy = (copy, original) => {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                if (++copyDepth > 100) {\n                    throw copyDepthError;\n                }\n                objectEach(original, (value, key) => {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                --copyDepth;\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (args[0] === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Creates a session-dependent unique key string for reference purposes.\n         *\n         * @function Dashboards.uniqueKey\n         *\n         * @return {string}\n         * Unique key string\n         */\n        function uniqueKey() {\n            return `dashboard-${coreUniqueKey().replace('highcharts-', '')}`;\n        }\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Dashboards.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @return {void}\n         */\n        function error(code, stop) {\n            // TODO- replace with proper error handling\n            if (code === 16) {\n                console.warn(// eslint-disable-line no-console\n                'Dashboard error: Dashboards library loaded more than once.' +\n                    'This may cause undefined behavior.');\n                return;\n            }\n            coreError(code, stop);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Utilities = {\n            error,\n            merge,\n            uniqueKey\n        };\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Component.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/CallbackRegistry.js'], _modules['Dashboards/Components/ConnectorHandler.js'], _modules['Dashboards/Components/EditableOptions.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Components/ComponentUtilities.js'], _modules['Dashboards/Utilities.js']], function (Cell, CallbackRegistry, ConnectorHandler, EditableOptions, Sync, Globals, U, CU, DU) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { classNamePrefix } = Globals;\n        const { createElement, isArray, merge, fireEvent, addEvent, objectEach, isFunction, getStyle, diffObjects } = U;\n        const { getMargins, getPaddings } = CU;\n        const { uniqueKey } = DU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Abstract Class of component.\n         *\n         * @internal\n         *\n         */\n        /**\n         * Abstract Class of component.\n         * @internal\n         */\n        class Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             *\n             * Creates HTML text element like header or title\n             *\n             * @param tagName\n             * HTML tag name used as wrapper of text like `h2` or `p`.\n             * @param elementName\n             * Name of element\n             * @param textOptions\n             * The options for the component\n             * @returns\n             * HTML object when title is created, otherwise undefined\n             *\n             * @internal\n             */\n            static createTextElement(tagName, elementName, textOptions) {\n                if (typeof textOptions === 'object') {\n                    const { className, text, style } = textOptions;\n                    return createElement(tagName, {\n                        className: className || `${classNamePrefix}component-${elementName}`,\n                        textContent: text\n                    }, style);\n                }\n                if (typeof textOptions === 'string') {\n                    return createElement(tagName, {\n                        className: `${classNamePrefix}component-${elementName}`,\n                        textContent: textOptions\n                    }, {});\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                /**\n                 * The connector handlers for the component.\n                 */\n                this.connectorHandlers = [];\n                /**\n                 * Registry of callbacks registered on the component. Used in the Highcharts\n                 * component to keep track of chart events.\n                 *\n                 * @internal\n                 */\n                this.callbackRegistry = new CallbackRegistry();\n                /**\n                 * Event listeners tied to the parent cell. Used for rendering/resizing the\n                 * component on interactions.\n                 *\n                 * @internal\n                 */\n                this.cellListeners = [];\n                /**\n                 * Timeouts for calls to `Component.resizeTo()`.\n                 *\n                 * @internal\n                /* *\n                 */\n                this.resizeTimeouts = [];\n                /**\n                 * Timeouts for resizing the content. I.e. `chart.setSize()`.\n                 *\n                 * @internal\n                 * */\n                this.innerResizeTimeouts = [];\n                const renderTo = options.renderTo || options.cell;\n                this.board = board || cell?.row?.layout?.board || {};\n                this.parentElement =\n                    cell?.container || document.querySelector('#' + renderTo);\n                this.cell = cell;\n                this.options = merge(Component.defaultOptions, options);\n                this.id = this.options.id && this.options.id.length ?\n                    this.options.id :\n                    uniqueKey();\n                if (this.options.connector) {\n                    const connectorOptionsArray = isArray(this.options.connector) ?\n                        this.options.connector :\n                        [this.options.connector];\n                    for (const connectorOptions of connectorOptionsArray) {\n                        this.connectorHandlers.push(new ConnectorHandler(this, connectorOptions));\n                    }\n                }\n                this.editableOptions =\n                    new EditableOptions(this, options.editableOptionsBindings);\n                this.dimensions = {\n                    width: null,\n                    height: null\n                };\n                this.element = createElement('div', {\n                    className: this.options.className\n                }, {}, this.parentElement);\n                if (!Number(getStyle(this.element, 'padding'))) {\n                    // Fix flex problem, because of wrong height in internal elements\n                    this.element.style.padding = '0.1px';\n                }\n                this.contentElement = createElement('div', {\n                    className: `${this.options.className}-content`\n                }, {}, this.element, true);\n                this.sync = new Sync(this, this.constructor.predefinedSyncConfig);\n                this.setupEventListeners();\n                if (cell) {\n                    this.attachCellListeners();\n                    this.on('update', () => {\n                        if (this.cell instanceof Cell) {\n                            this.cell.setLoadingState();\n                        }\n                    });\n                    this.on('afterRender', () => {\n                        if (this.cell instanceof Cell) {\n                            this.cell.setLoadingState(false);\n                        }\n                    });\n                }\n                this.on('tableChanged', () => {\n                    this.onTableChanged();\n                });\n            }\n            /**\n             * Returns the component's options when it is dropped from the sidebar.\n             *\n             * @param sidebar\n             * The sidebar popup.\n             */\n            getOptionsOnDrop(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            sidebar) {\n                return {};\n            }\n            /**\n             * Returns the first connector of the component if it exists.\n             *\n             * @internal\n             */\n            getFirstConnector() {\n                return this.connectorHandlers[0]?.connector;\n            }\n            /**\n             * Setup listeners on cell/other things up the chain\n             *\n             * @internal\n             */\n            attachCellListeners() {\n                // Remove old listeners\n                while (this.cellListeners.length) {\n                    const destroy = this.cellListeners.pop();\n                    if (destroy) {\n                        destroy();\n                    }\n                }\n                if (this.cell &&\n                    this.cell instanceof Cell &&\n                    Object.keys(this.cell).length) {\n                    const board = this.cell.row.layout.board;\n                    this.cellListeners.push(\n                    // Listen for resize on dashboard\n                    addEvent(board, 'cellResize', () => {\n                        this.resizeTo(this.parentElement);\n                    }), \n                    // Listen for changed parent\n                    addEvent(this.cell.row, 'cellChange', (e) => {\n                        const { row } = e;\n                        if (row && this.cell) {\n                            const hasLeftTheRow = row.getCellIndex(this.cell) === void 0;\n                            if (hasLeftTheRow) {\n                                if (this.cell) {\n                                    this.setCell(this.cell);\n                                }\n                            }\n                        }\n                    }));\n                }\n            }\n            /**\n             * Set a parent cell.\n             * @param cell\n             * Instance of a cell.\n             * @param resize\n             * Flag that allow to resize the component.\n             *\n             * @internal\n             */\n            setCell(cell, resize = false) {\n                this.cell = cell;\n                if (cell.container) {\n                    this.parentElement = cell.container;\n                }\n                this.attachCellListeners();\n                if (resize) {\n                    this.resizeTo(this.parentElement);\n                }\n            }\n            /**\n             * Initializes connector handlers for the component.\n             */\n            async initConnectors() {\n                fireEvent(this, 'setConnectors', {\n                    connectorHandlers: this.connectorHandlers\n                });\n                for (const connectorHandler of this.connectorHandlers) {\n                    await connectorHandler.initConnector();\n                }\n                fireEvent(this, 'afterSetConnectors', {\n                    connectorHandlers: this.connectorHandlers\n                });\n                return this;\n            }\n            /**\n             * Gets height of the component's content.\n             *\n             * @returns\n             * Current height as number.\n             * @internal\n             */\n            getContentHeight() {\n                const titleHeight = this.titleElement ?\n                    this.titleElement.clientHeight + getMargins(this.titleElement).y :\n                    0;\n                const captionHeight = this.captionElement ?\n                    this.captionElement.clientHeight +\n                        getMargins(this.captionElement).y :\n                    0;\n                return titleHeight + captionHeight;\n            }\n            /**\n             * Resize the component\n             * @param width\n             * The width to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style\n             * @param height\n             * The height to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style.\n             */\n            resize(width, height) {\n                if (height) {\n                    // Get offset for border, padding\n                    const pad = getPaddings(this.element).y + getMargins(this.element).y;\n                    this.element.style.height = 'calc(100% - ' + pad + 'px)';\n                    this.contentElement.style.height =\n                        'calc(100% - ' + this.getContentHeight() + 'px)';\n                }\n                else if (height === null) {\n                    this.dimensions.height = null;\n                    this.element.style.removeProperty('height');\n                }\n                fireEvent(this, 'resize', {\n                    width,\n                    height\n                });\n            }\n            /**\n             * Adjusts size of component to parent's cell size when animation is done.\n             * @param element\n             * HTML element that is resized.\n             */\n            resizeTo(element) {\n                while (this.resizeTimeouts.length) {\n                    const timeout = this.resizeTimeouts.pop();\n                    if (timeout) {\n                        cancelAnimationFrame(timeout);\n                    }\n                }\n                const timeoutID = requestAnimationFrame(() => {\n                    const { width, height } = element.getBoundingClientRect();\n                    const padding = getPaddings(element);\n                    const margins = getMargins(element);\n                    this.resize(width - padding.x - margins.x, height - padding.y - margins.y);\n                });\n                this.resizeTimeouts.push(timeoutID);\n            }\n            /**\n             * Handles updating via options.\n             * @param newOptions\n             * The options to apply.\n             *\n             * @param shouldRerender\n             * Set to true if the update should rerender the component.\n             */\n            async update(newOptions, shouldRerender = true) {\n                const eventObject = {\n                    options: newOptions,\n                    shouldForceRerender: false\n                };\n                // Update options\n                fireEvent(this, 'update', eventObject);\n                if (newOptions.connector && Array.isArray(this.options.connector)) {\n                    this.options.connector = void 0;\n                }\n                this.options = merge(this.options, newOptions);\n                const connectorOptions = (this.options.connector ? (isArray(this.options.connector) ? this.options.connector :\n                    [this.options.connector]) : []);\n                let connectorsHaveChanged = connectorOptions.length !== this.connectorHandlers.length;\n                if (!connectorsHaveChanged) {\n                    for (let i = 0, iEnd = connectorOptions.length; i < iEnd; i++) {\n                        const oldConnectorId = this.connectorHandlers[i]?.options.id;\n                        const newConnectorId = connectorOptions[i]?.id;\n                        if (oldConnectorId !== newConnectorId) {\n                            connectorsHaveChanged = true;\n                            break;\n                        }\n                        this.connectorHandlers[i].updateOptions(connectorOptions[i]);\n                    }\n                }\n                if (connectorsHaveChanged) {\n                    for (const connectorHandler of this.connectorHandlers) {\n                        connectorHandler.destroy();\n                    }\n                    this.connectorHandlers.length = 0;\n                    for (const options of connectorOptions) {\n                        this.connectorHandlers.push(new ConnectorHandler(this, options));\n                    }\n                    await this.initConnectors();\n                }\n                if (shouldRerender || eventObject.shouldForceRerender) {\n                    this.render();\n                }\n            }\n            /**\n             * Private method which sets up event listeners for the component.\n             *\n             * @internal\n             */\n            setupEventListeners() {\n                const events = this.options.events;\n                if (events) {\n                    Object.keys(events).forEach((key) => {\n                        const eventCallback = events[key];\n                        if (eventCallback) {\n                            this.callbackRegistry.addCallback(key, {\n                                type: 'component',\n                                func: eventCallback\n                            });\n                        }\n                    });\n                    objectEach(events, (eventCallback, eventType) => {\n                        if (isFunction(eventCallback)) {\n                            this.on(eventType, eventCallback);\n                        }\n                    });\n                }\n                const resizeObserverCallback = () => {\n                    this.resizeTo(this.parentElement);\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(resizeObserverCallback);\n                    this.resizeObserver.observe(this.element);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', resizeObserverCallback);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * Adds title at the top of component's container.\n             *\n             * @param titleOptions\n             * The options for the title.\n             */\n            setTitle(titleOptions) {\n                const titleElement = this.titleElement, shouldExist = titleOptions &&\n                    (typeof titleOptions === 'string' || titleOptions.text);\n                if (shouldExist) {\n                    const newTitle = Component.createTextElement('h2', 'title', titleOptions);\n                    if (newTitle) {\n                        if (!titleElement) {\n                            this.element.insertBefore(newTitle, this.element.firstChild);\n                        }\n                        else {\n                            titleElement.replaceWith(newTitle);\n                        }\n                        this.titleElement = newTitle;\n                    }\n                }\n                else {\n                    if (titleElement) {\n                        titleElement.remove();\n                        delete this.titleElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Adds caption at the bottom of component's container.\n             *\n             * @param captionOptions\n             * The options for the caption.\n             */\n            setCaption(captionOptions) {\n                const captionElement = this.captionElement, shouldExist = captionOptions &&\n                    (typeof captionOptions === 'string' || captionOptions.text);\n                if (shouldExist) {\n                    const newCaption = Component.createTextElement('div', 'caption', captionOptions);\n                    if (newCaption) {\n                        if (!captionElement) {\n                            this.element.appendChild(newCaption);\n                        }\n                        else {\n                            captionElement.replaceWith(newCaption);\n                        }\n                        this.captionElement = newCaption;\n                    }\n                }\n                else {\n                    if (captionElement) {\n                        captionElement.remove();\n                        delete this.captionElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Handles setting things up on initial render.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            async load() {\n                await this.initConnectors();\n                this.render();\n                return this;\n            }\n            /**\n             * Renders the component.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            render() {\n                this.emit({ type: 'render' });\n                this.setTitle(this.options.title);\n                this.setCaption(this.options.caption);\n                this.resizeTo(this.parentElement);\n                return this;\n            }\n            /**\n             * Destroys the component.\n             */\n            destroy() {\n                /**\n                 * TODO: Should perhaps set an `isActive` flag to false.\n                 */\n                this.sync.stop();\n                while (this.element.firstChild) {\n                    this.element.firstChild.remove();\n                }\n                // Call unmount\n                fireEvent(this, 'unmount');\n                for (const connectorHandler of this.connectorHandlers) {\n                    connectorHandler.destroy();\n                }\n                this.element.remove();\n            }\n            /** @internal */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /** @internal */\n            emit(e) {\n                if (!e.target) {\n                    e.target = this;\n                }\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const dimensions = {\n                    width: 0,\n                    height: 0\n                };\n                objectEach(this.dimensions, function (value, key) {\n                    if (value === null) {\n                        return;\n                    }\n                    dimensions[key] = value;\n                });\n                const json = {\n                    $class: this.options.type,\n                    options: {\n                        renderTo: this.options.renderTo,\n                        parentElement: this.parentElement.id,\n                        dimensions,\n                        id: this.id,\n                        type: this.type\n                    }\n                };\n                return json;\n            }\n            /**\n             * Get the component's options.\n             * @returns\n             * The JSON of component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return diffObjects(this.options, Component.defaultOptions);\n            }\n            getEditableOptions() {\n                const component = this;\n                return merge(component.options);\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                let result = component.getEditableOptions();\n                for (let i = 0, end = propertyPath.length; i < end; i++) {\n                    if (isArray(result)) {\n                        if (propertyPath[0] === 'connector' &&\n                            result.length > 1) {\n                            return 'multiple connectors';\n                        }\n                        result = result[0];\n                    }\n                    if (!result) {\n                        return;\n                    }\n                    result = result[propertyPath[i]];\n                    if (result === false &&\n                        (propertyPath.indexOf('title') >= 0 ||\n                            propertyPath.indexOf('subtitle') >= 0 ||\n                            propertyPath.indexOf('caption') >= 0)) {\n                        result = '';\n                    }\n                }\n                return result;\n            }\n        }\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        /** @internal */\n        Component.Sync = Sync;\n        /**\n         * Predefined sync config for component.\n         */\n        Component.predefinedSyncConfig = {\n            defaultSyncOptions: {},\n            defaultSyncPairs: {}\n        };\n        /**\n         * Default options of the component.\n         */\n        Component.defaultOptions = {\n            className: `${classNamePrefix}component`,\n            id: '',\n            title: false,\n            caption: false,\n            sync: Sync.defaultHandlers,\n            editableOptions: [{\n                    name: 'title',\n                    propertyPath: ['title'],\n                    type: 'input'\n                }, {\n                    name: 'caption',\n                    propertyPath: ['caption'],\n                    type: 'input'\n                }]\n        };\n\n        return Component;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLComponentDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const HTMLComponentDefaults = {\n            type: 'HTML',\n            elements: []\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLSyncs/HTMLSyncs.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {},\n            defaultSyncOptions: {}\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/HTMLComponent/HTMLComponentDefaults.js'], _modules['Dashboards/Components/HTMLComponent/HTMLSyncs/HTMLSyncs.js'], _modules['Core/Utilities.js']], function (AST, Component, HTMLComponentDefaults, HTMLSyncs, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, diffObjects } = U;\n        // TODO: This may affect the AST parsing in Highcharts\n        // should look into adding these as options if possible\n        // Needs to go in a composition in the Highcharts plugin\n        AST.allowedTags = [\n            ...AST.allowedTags,\n            'option',\n            'select',\n            'label',\n            'input',\n            'textarea'\n        ];\n        AST.allowedAttributes = [\n            ...AST.allowedAttributes,\n            'for',\n            'value',\n            'checked',\n            'src',\n            'name',\n            'selected'\n        ];\n        AST.allowedReferences = [\n            ...AST.allowedReferences,\n            'data:image/'\n        ];\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a HTML component.\n         *\n         */\n        class HTMLComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the HTML component.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @returns\n             * HTML component based on config from JSON.\n             *\n             * @internal\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const elements = (json.elements ?\n                    json.elements.map((el) => JSON.parse(el)) :\n                    []);\n                /// const connector = (\n                //     json.connector ? DataJSON.fromJSON(json.connector) : void 0\n                // );\n                const component = new HTMLComponent(cell, merge(options, {\n                    elements\n                    /// connector: (\n                    //   connector instanceof DataConnector ? connector : void 0\n                    // )\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a HTML component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options) {\n                options = merge(HTMLComponent.defaultOptions, options);\n                super(cell, options);\n                this.options = options;\n                this.type = 'HTML';\n                this.elements = [];\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                this.emit({\n                    type: 'load'\n                });\n                await super.load();\n                const options = this.options;\n                let isError = false;\n                if (options.elements?.length) {\n                    this.elements = options.elements.map(function (element) {\n                        if (typeof element === 'string') {\n                            return new AST(element).nodes[0];\n                        }\n                        if (!element.textContent &&\n                            !element.tagName &&\n                            element.attributes) {\n                            isError = true;\n                        }\n                        return element;\n                    });\n                }\n                else if (options.html) {\n                    this.elements = this.getElementsFromString(options.html);\n                }\n                this.constructTree();\n                this.emit({ type: 'afterLoad' });\n                if (isError) {\n                    throw new Error(`Missing tagName param in component: ${options.renderTo}`);\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.constructTree();\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             * @param options\n             * The options to apply.\n             */\n            async update(options) {\n                await super.update(options);\n                this.emit({ type: 'afterUpdate' });\n            }\n            getOptionsOnDrop() {\n                return {\n                    cell: '',\n                    type: 'HTML',\n                    elements: [{\n                            tagName: 'img',\n                            attributes: {\n                                src: 'https://www.highcharts.com/samples/graphics/stock-dark.svg'\n                            }\n                        }]\n                };\n            }\n            /**\n             * @internal\n             */\n            constructTree() {\n                // Remove old tree if rerendering.\n                while (this.contentElement.firstChild) {\n                    this.contentElement.firstChild.remove();\n                }\n                const parser = new AST(this.elements);\n                parser.addToDOM(this.contentElement);\n            }\n            /**\n             * When HTML definition is a string, it needs to be parsed to AST.\n             *\n             * @internal\n             */\n            getElementsFromString(htmlString) {\n                return new AST(htmlString).nodes;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const elements = (this.options.elements || [])\n                    .map((el) => JSON.stringify(el));\n                const json = merge(super.toJSON(), {\n                    elements,\n                    options: this.options\n                });\n                this.emit({\n                    type: 'toJSON',\n                    json\n                });\n                return json;\n            }\n            /**\n             * Get the HTML component's options.\n             * @returns\n             * The JSON of HTML component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HTMLComponent.defaultOptions),\n                    type: 'HTML'\n                };\n            }\n            /**\n             * @internal\n             */\n            onTableChanged(e) {\n                if (e.detail?.sender !== this.id) {\n                    this.render();\n                }\n            }\n        }\n        /* *\n         *\n         *  Static properties\n         *\n         * */\n        /**\n         * Default options of the HTML component.\n         */\n        HTMLComponent.defaultOptions = merge(Component.defaultOptions, HTMLComponentDefaults);\n        /**\n         * Predefined sync config for HTML component.\n         */\n        HTMLComponent.predefinedSyncConfig = HTMLSyncs;\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return HTMLComponent;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *  - Jomar Hønsi\n         *\n         * */\n        const { addEvent, fireEvent, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTable {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            static isNull(row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    const columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            constructor(options = {}) {\n                /**\n                 * Dictionary of all column aliases and their mapped column. If a column\n                 * for one of the get-methods matches an column alias, this column will\n                 * be replaced with the mapped column by the column alias.\n                 *\n                 * @name Highcharts.DataTable#aliases\n                 * @type {Highcharts.Dictionary<string>}\n                 */\n                this.aliases = (options.aliases ?\n                    JSON.parse(JSON.stringify(options.aliases)) :\n                    {});\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for identification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                this.rowKeysId = options.rowKeysId;\n                const columns = options.columns || {}, columnNames = Object.keys(columns), thisColumns = this.columns;\n                let rowCount = 0;\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName].slice();\n                    thisColumns[columnName] = column;\n                    rowCount = Math.max(rowCount, column.length);\n                }\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    thisColumns[columnNames[i]].length = rowCount;\n                }\n                this.rowCount = rowCount;\n                const aliases = options.aliases || {}, aliasKeys = Object.keys(aliases), thisAliases = this.aliases;\n                for (let i = 0, iEnd = aliasKeys.length, alias; i < iEnd; ++i) {\n                    alias = aliasKeys[i];\n                    thisAliases[alias] = aliases[alias];\n                }\n                this.setRowKeysColumn(rowCount);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            clone(skipColumns, eventDetail) {\n                const table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.aliases = table.aliases;\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                if (table.rowKeysId) {\n                    tableOptions.rowKeysId = table.rowKeysId;\n                }\n                const tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone\n                });\n                return tableClone;\n            }\n            /**\n             * Deletes a column alias and returns the original column name. If the alias\n             * is not found, the method returns `undefined`. Deleting an alias does not\n             * affect the data in the table, only the way columns are accessed.\n             *\n             * @function Highcharts.DataTable#deleteColumnAlias\n             *\n             * @param {string} alias\n             * The alias to delete.\n             *\n             * @return {string|undefined}\n             * Returns the original column name, if found.\n             */\n            deleteColumnAlias(alias) {\n                const table = this, aliases = table.aliases, deletedAlias = aliases[alias], modifier = table.modifier;\n                if (deletedAlias) {\n                    delete table.aliases[alias];\n                    if (modifier) {\n                        modifier.modifyColumns(table, { [deletedAlias]: new Array(table.rowCount) }, 0);\n                    }\n                }\n                return deletedAlias;\n            }\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names (no alias) of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            deleteColumns(columnNames, eventDetail) {\n                const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    let nColumns = Object.keys(columns).length;\n                    if (table.rowKeysId && nColumns === 1) {\n                        // All columns deleted, remove row keys column\n                        delete columns[table.rowKeysId];\n                        nColumns = 0;\n                    }\n                    if (!nColumns) {\n                        table.rowCount = 0;\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            }\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1, eventDetail) {\n                const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    const columns = table.columns, columnNames = Object.keys(columns);\n                    for (let i = 0, iEnd = columnNames.length, column, deletedCells; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            }\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                const table = this;\n                switch (e.type) {\n                    case 'afterDeleteColumns':\n                    case 'afterDeleteRows':\n                    case 'afterSetCell':\n                    case 'afterSetColumns':\n                    case 'afterSetRows':\n                        table.versionTag = uniqueKey();\n                        break;\n                    default:\n                }\n                fireEvent(table, e.type, e);\n            }\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            getCell(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return column[rowIndex];\n                }\n            }\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            getCellAsBoolean(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                return !!(column && column[rowIndex]);\n            }\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            getCellAsNumber(columnNameOrAlias, rowIndex, useNaN) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                let cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(`${cellValue ?? ''}`);\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            }\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            getCellAsString(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                return `${(column && column[rowIndex])}`;\n            }\n            /**\n             * Fetches the given column by the canonical column name or by an alias.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnNameOrAlias, asReference) {\n                return this.getColumns([columnNameOrAlias], asReference)[columnNameOrAlias];\n            }\n            /**\n             * Fetches the given column by the canonical column name or by an alias, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            getColumnAsNumbers(columnNameOrAlias, useNaN) {\n                const table = this, columns = table.columns;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = columns[columnNameOrAlias], columnAsNumber = [];\n                if (column) {\n                    const columnLength = column.length;\n                    if (useNaN) {\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i, true));\n                        }\n                    }\n                    else {\n                        for (let i = 0, cellValue; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            }\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            getColumnNames() {\n                const table = this, columnNames = Object.keys(table.columns);\n                this.removeRowKeysColumn(columnNames);\n                return columnNames;\n            }\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases to retrieve. Aliases taking precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNamesOrAliases, asReference) {\n                const table = this, tableAliasMap = table.aliases, tableColumns = table.columns, columns = {};\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(tableColumns));\n                this.removeRowKeysColumn(columnNamesOrAliases);\n                for (let i = 0, iEnd = columnNamesOrAliases.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    column = tableColumns[(tableAliasMap[columnName] || columnName)];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            getModifier() {\n                return this.modifier;\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNamesOrAliases) {\n                return this.getRows(rowIndex, 1, columnNamesOrAliases)[0];\n            }\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            getRowCount() {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            }\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            getRowIndexBy(columnNameOrAlias, cellValue, rowIndexOffset) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    const rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRowObject(rowIndex, columnNamesOrAliases) {\n                return this.getRowObjects(rowIndex, 1, columnNamesOrAliases)[0];\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                this.removeRowKeysColumn(columnNamesOrAliases);\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (const columnName of columnNamesOrAliases) {\n                        column = columns[(aliases[columnName] || columnName)];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (const columnName of columnNamesOrAliases) {\n                        column = columns[(aliases[columnName] || columnName)];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            getVersionTag() {\n                return this.versionTag;\n            }\n            /**\n             * Checks for given column names or aliases.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNamesOrAliases\n             * Column names of aliases to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            hasColumns(columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns;\n                for (let i = 0, iEnd = columnNamesOrAliases.length, columnName; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    if (!columns[columnName] && !aliases[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            hasRowWith(columnNameOrAlias, cellValue) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            renameColumn(columnName, newColumnName) {\n                const table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        const aliases = table.aliases;\n                        if (aliases[newColumnName]) {\n                            delete aliases[newColumnName];\n                        }\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                        if (table.rowKeysId) {\n                            // Ensure that row keys column is last\n                            this.moveRowKeysColumnToLast(columns, table.rowKeysId);\n                        }\n                    }\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Sets a cell value based on the row index and column name or alias.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            setCell(columnNameOrAlias, rowIndex, cellValue, eventDetail) {\n                const table = this, columns = table.columns, modifier = table.modifier;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                let column = columns[columnNameOrAlias];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!column) {\n                    column = columns[columnNameOrAlias] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnNameOrAlias, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumn(columnNameOrAlias, column = [], rowIndex = 0, eventDetail) {\n                this.setColumns({ [columnNameOrAlias]: column }, rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names or aliases.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                const table = this, tableColumns = table.columns, tableModifier = table.modifier, reset = (typeof rowIndex === 'undefined'), columnNames = Object.keys(columns);\n                table.emit({\n                    type: 'setColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    columnName = (table.aliases[columnName] ||\n                        columnName);\n                    if (reset) {\n                        tableColumns[columnName] = column.slice();\n                        table.rowCount = column.length;\n                    }\n                    else {\n                        const tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                            tableColumn[i] = column[i];\n                        }\n                        table.rowCount = Math.max(table.rowCount, tableColumn.length);\n                    }\n                }\n                const tableColumnNames = Object.keys(tableColumns);\n                for (let i = 0, iEnd = tableColumnNames.length; i < iEnd; ++i) {\n                    tableColumns[tableColumnNames[i]].length = table.rowCount;\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, (rowIndex || 0));\n                }\n                if (table.rowKeysId) {\n                    // Ensure that the row keys column is always last\n                    this.moveRowKeysColumnToLast(tableColumns, table.rowKeysId);\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets the row key column. This column is invisible and the cells\n             * serve as identifiers to the rows they are contained in. Accessing\n             * rows by keys instead of indexes is necessary in cases where rows\n             * are rearranged by a DataModifier (e.g. SortModifier or RangeModifier).\n             *\n             * @function Highcharts.DataTable#setRowKeysColumn\n             *\n             * @param {number} nRows\n             * Number of rows to add to the column.\n             *\n             */\n            setRowKeysColumn(nRows) {\n                const id = this.rowKeysId;\n                if (!id) {\n                    return;\n                }\n                this.columns[id] = [];\n                const keysArray = this.columns[id];\n                for (let i = 0; i < nRows; i++) {\n                    keysArray.push(id + '_' + i);\n                }\n            }\n            /**\n             * Get the row key column.\n             *\n             * @function Highcharts.DataTable#getRowKeysColumn\n             *     *\n             * @return {DataTable.Column|undefined}\n             * Returns row keys if rowKeysId is defined, else undefined.\n             */\n            getRowKeysColumn() {\n                const id = this.rowKeysId;\n                if (id) {\n                    return this.columns[id];\n                }\n            }\n            /**\n             * Get the row index in the original (unmodified) data table.\n             *\n             * @function Highcharts.DataTable#getRowIndexOriginal\n             *\n             * @param {number} idx\n             * Row index in the modified data table.\n             *\n             * @return {string}\n             * Row index in the original data table.\n             */\n            getRowIndexOriginal(idx) {\n                const id = this.rowKeysId;\n                if (id) {\n                    const rowKeyCol = this.columns[id];\n                    const idxOrig = '' + rowKeyCol[idx];\n                    return idxOrig.split('_')[1];\n                }\n                return String(idx);\n            }\n            /**\n             * Sets or unsets the modifier for the table.\n             * @private\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successful, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            setModifier(modifier, eventDetail) {\n                const table = this;\n                let promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then((table) => {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch']((error) => {\n                    table.emit({\n                        type: 'setModifierError',\n                        error,\n                        modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex, eventDetail) {\n                this.setRows([row], rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefined` to add as new rows.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRows(rows, rowIndex = this.rowCount, eventDetail) {\n                const table = this, aliases = table.aliases, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n                for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = null;\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        const rowColumnNames = Object.keys(row);\n                        for (let j = 0, jEnd = rowColumnNames.length, rowColumnName; j < jEnd; ++j) {\n                            rowColumnName = rowColumnNames[j];\n                            rowColumnName = (aliases[rowColumnName] || rowColumnName);\n                            if (!columns[rowColumnName]) {\n                                columns[rowColumnName] = new Array(i2 + 1);\n                            }\n                            columns[rowColumnName][i2] = row[rowColumnName];\n                        }\n                    }\n                }\n                const indexRowCount = (rowIndex + rowCount);\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (this.rowKeysId && !columnNames.includes(this.rowKeysId)) {\n                    this.setRowKeysColumn(rowCount);\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n            }\n            // The row keys column must always be the last column\n            moveRowKeysColumnToLast(columns, id) {\n                const rowKeyColumn = columns[id];\n                delete columns[id];\n                columns[id] = rowKeyColumn;\n            }\n            // The row keys column must be removed in some methods\n            // (API backwards compatibility)\n            removeRowKeysColumn(columnNamesOrAliases) {\n                if (this.rowKeysId) {\n                    const pos = columnNamesOrAliases.indexOf(this.rowKeysId);\n                    if (pos !== -1) {\n                        // Always the last column\n                        columnNamesOrAliases.pop();\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Null state for a row record. In some cases, a row in a table may not\n         * contain any data or may be invalid. In these cases, a null state can be\n         * used to indicate that the row record is empty or invalid.\n         *\n         * @name Highcharts.DataTable.NULL\n         * @type {Highcharts.DataTableRowObject}\n         *\n         * @see {@link Highcharts.DataTable.isNull} for a null test.\n         *\n         * @example\n         * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n         */\n        DataTable.NULL = {};\n        /**\n         * Semantic version string of the DataTable class.\n         * @internal\n         */\n        DataTable.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        const { addEvent, fireEvent, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        class DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^(\\d{4})([\\-\\.\\/])(\\d{1,2})\\2(\\d{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            const d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            let year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                const mergedOptions = merge(DataConverter.defaultOptions, options);\n                let regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            asBoolean(value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            }\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            asDate(value) {\n                let timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            }\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            asGuessedType(value) {\n                const converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            }\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            asNumber(value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    const decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            }\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            asString(value) {\n                return '' + value;\n            }\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            deduceDateFormat(data, limit, save) {\n                const parser = this, stable = [], max = [];\n                let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[\\-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            }\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            export(\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            getTable() {\n                throw new Error('Not implemented');\n            }\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            guessType(value) {\n                const converter = this;\n                let result = 'string';\n                if (typeof value === 'string') {\n                    const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n                    let innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    const floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        const dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            parse(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @function Highcharts.Data#parseDate\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            parseDate(value, dateFormatProp) {\n                const converter = this, options = converter.options;\n                let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            trim(str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[\\d\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        DataConverter.defaultOptions = {\n            dateFormat: '',\n            alternativeFormat: '',\n            startColumn: 0,\n            endColumn: Number.MAX_VALUE,\n            startRow: 0,\n            endRow: Number.MAX_VALUE,\n            firstRowAsNames: true,\n            switchRowsAndColumns: false\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns = [], headers = []) {\n                const table = new DataTable();\n                for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || `${i}`, columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        class CSVConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            export(connector, options = this.options) {\n                const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n                let { decimalPoint, itemDelimiter } = options;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    const columnMeta = connector.whatIs(columnName);\n                    let columnDataType;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = `\"${cellValue}\"`;\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            let i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                const cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            }\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n                let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (let i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    let offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                let cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Internal method that parses a single CSV row\n             */\n            parseCSVRow(columnStr, rowNumber) {\n                const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                let { decimalPoint } = converter.options;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                let i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                const read = (j) => {\n                    c = columnStr[j];\n                };\n                const pushType = (type) => {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                const push = () => {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        const initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[A-F\\d]{3,3}|[A-F\\d]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            }\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            guessDelimiter(lines) {\n                let points = 0, commas = 0, guessed;\n                const potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (let i = 0; i < linesCount; i++) {\n                    let inStr = false, c, cn, cl, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    const columnStr = lines[i];\n                    for (let j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        CSVConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            lineDelimiter: '\\n'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         * @private\n         */\n        class DataModifier {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            benchmark(dataTable, options) {\n                const results = [];\n                const modifier = this;\n                const execute = () => {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                const defaultOptions = {\n                    iterations: 1\n                };\n                const { iterations } = merge(defaultOptions, options);\n                modifier.on('afterBenchmarkIteration', () => {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                const times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', () => {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', () => {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            }\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifier = this;\n                return new Promise((resolve, reject) => {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        reject(e);\n                    }\n                });\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         * @private\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        class DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            constructor(options = {}) {\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            /**\n             * Poll timer ID, if active.\n             */\n            get polling() {\n                return !!this.polling;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            describeColumn(name, columnMeta) {\n                const connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            }\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            describeColumns(columns) {\n                const connector = this, columnNames = Object.keys(columns);\n                let columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            }\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            getColumnOrder(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort((a, b) => (pick(columns[a].index, 0) - pick(columns[b].index, 0)));\n                }\n            }\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            getSortedColumns(usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            }\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            load() {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            }\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            save() {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            }\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            setColumnOrder(columnNames) {\n                const connector = this;\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            }\n            setModifierOptions(modifierOptions) {\n                const ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(() => this);\n            }\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            startPolling(refreshTime = 1000) {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(() => connector\n                    .load()['catch']((error) => connector.emit({\n                    type: 'loadError',\n                    error,\n                    table: connector.table\n                }))\n                    .then(() => {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }), refreshTime);\n            }\n            /**\n             * Stops polling data.\n             */\n            stopPolling() {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            }\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            whatIs(name) {\n                return this.metadata.columns[name];\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        class CSVConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new CSVConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { csv, csvURL, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    csv,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then((response) => response.text()) :\n                    csv || '')\n                    .then((csv) => {\n                    if (csv) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(() => csv);\n                })\n                    .then((csv) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CSVConnector.defaultOptions = {\n            csv: '',\n            csvURL: '',\n            enablePolling: false,\n            dataRefreshRate: 1,\n            firstRowAsNames: true\n        };\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        class GoogleSheetsConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.header = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, parseOptions = merge(converter.options, options), columns = ((parseOptions.json &&\n                    parseOptions.json.values) || []).map((column) => column.slice());\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                converter.columns = columns;\n                let column;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        `${column.shift()}` :\n                        uniqueKey());\n                    for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            let cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        GoogleSheetsConverter.defaultOptions = {\n            ...DataConverter.defaultOptions\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        class GoogleSheetsConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new GoogleSheetsConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, dataRefreshRate, enablePolling, firstRowAsNames, googleAPIKey, googleSpreadsheetKey } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    url\n                });\n                return fetch(url)\n                    .then((response) => (response.json()))\n                    .then((json) => {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames,\n                        json\n                    });\n                    // If already loaded, clear the current table\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GoogleSheetsConnector.defaultOptions = {\n            googleAPIKey: '',\n            googleSpreadsheetKey: '',\n            worksheet: 1,\n            enablePolling: false,\n            dataRefreshRate: 2,\n            firstRowAsNames: true\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options = {}) {\n                return (`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/` +\n                    (options.onlyColumnNames ?\n                        'A1:Z1' :\n                        buildQueryRange(options)) +\n                    '?alt=json' +\n                    (options.onlyColumnNames ?\n                        '' :\n                        '&dateTimeRenderOption=FORMATTED_STRING' +\n                            '&majorDimension=COLUMNS' +\n                            '&valueRenderOption=UNFORMATTED_VALUE') +\n                    '&prettyPrint=false' +\n                    `&key=${apiKey}`);\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options = {}) {\n                const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            let i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        class HTMLTableConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    this.tableElement = mergedOptions.tableElement;\n                    this.tableElementID = mergedOptions.tableElement.id;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            export(connector, options = this.options) {\n                const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                let tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    const subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (const name of columnNames) {\n                            const subhead = (columns[name].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                let caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            }\n            /**\n             * Get table cell markup from row data.\n             */\n            getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n                let val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            }\n            /**\n             * Get table header markup from row data.\n             */\n            getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n                const { useMultiLevelHeaders, useRowspanHeaders } = options;\n                let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            }\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            parse(options, eventDetail) {\n                const converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns,\n                        detail: eventDetail,\n                        headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                let rowIndex = 0, item, { startRow } = parseOptions;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    const items = rows[0].children, itemsLength = items.length;\n                    for (let i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        let columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                let cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                let i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns,\n                    detail: eventDetail,\n                    headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        HTMLTableConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            useRowspanHeaders: true,\n            useMultiLevelHeaders: true\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { win } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        class HTMLTableConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new HTMLTableConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    tableElement: connector.tableElement\n                });\n                let tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    const error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HTMLTableConnector.defaultOptions = {\n            table: ''\n        };\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { error, isArray, merge, objectEach } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        class JSONConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                this.table = new DataTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this;\n                options = merge(converter.options, options);\n                const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n                let data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                        const item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(`${item.shift()}`);\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        let row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            const columnNames = converter.headers;\n                            if (columnNames && !(columnNames instanceof Array)) {\n                                const newRow = {};\n                                objectEach(columnNames, (arrayWithPath, name) => {\n                                    newRow[name] = arrayWithPath.reduce((acc, key) => acc[key], row);\n                                });\n                                row = newRow;\n                            }\n                            this.table.setRows([row], rowIndex);\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return this.table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        JSONConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            data: [],\n            orientation: 'rows'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        class JSONConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new JSONConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { data, dataUrl, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    data,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then((json) => json.json()) :\n                    data || [])\n                    .then((data) => {\n                    if (data) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ data });\n                        table.setColumns(converter.getTable().getColumns());\n                        table.setRowKeysColumn(data.length);\n                    }\n                    return connector.setModifierOptions(dataModifier).then(() => data);\n                })\n                    .then((data) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        JSONConnector.defaultOptions = {\n            data: [],\n            enablePolling: false,\n            dataRefreshRate: 0,\n            firstRowAsNames: true,\n            orientation: 'rows'\n        };\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         * @private\n         */\n        class ChainModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            constructor(options, ...chain) {\n                super();\n                this.chain = chain;\n                this.options = merge(ChainModifier.defaultOptions, options);\n                const optionsChain = this.options.chain || [];\n                for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            add(modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            clear(eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                let promiseChain = Promise.resolve(table);\n                for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    const modifier = modifiers[i];\n                    promiseChain = promiseChain.then((chainTable) => modifier.modify(chainTable.modified, eventDetail));\n                }\n                promiseChain = promiseChain.then((chainTable) => {\n                    table.modified.deleteColumns();\n                    table.modified.setColumns(chainTable.modified.getColumns());\n                    return table;\n                });\n                promiseChain = promiseChain['catch']((error) => {\n                    this.emit({\n                        type: 'error',\n                        detail: eventDetail,\n                        table\n                    });\n                    throw error;\n                });\n                return promiseChain;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            modifyTable(table, eventDetail) {\n                const chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table\n                });\n                const modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                let modified = table.modified;\n                for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table\n                });\n                return table;\n            }\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            remove(modifier, eventDetail) {\n                const modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default option for the ordered modifier chain.\n         */\n        ChainModifier.defaultOptions = {\n            type: 'Chain'\n        };\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        class InvertModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(InvertModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(`${i2}`, row);\n                    }\n                    else {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            }\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    const columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map((column) => `${column}`), columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    const columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[`${i}`] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the invert modifier.\n         */\n        InvertModifier.defaultOptions = {\n            type: 'Invert'\n        };\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         * @private\n         */\n        class RangeModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(RangeModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const { additive, ranges, strict } = modifier.options;\n                if (ranges.length) {\n                    const modified = table.modified;\n                    let columns = table.getColumns(), rows = [];\n                    for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            columns = modified.getColumns();\n                            rows = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (let j = 0, jEnd = rangeColumn.length, cell, row; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                row = (additive ?\n                                    table.getRow(j) :\n                                    modified.getRow(j));\n                                if (row) {\n                                    rows.push(row);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the range modifier.\n         */\n        RangeModifier.defaultOptions = {\n            type: 'Range',\n            ranges: []\n        };\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         * @private\n         */\n        class SortModifier extends DataModifier {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static ascending(a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            }\n            static descending(a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(SortModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            getRowReferences(table) {\n                const rows = table.getRows(), rowReferences = [];\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n                }\n                if (orderInColumn) {\n                    const column = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns({ [orderInColumn]: column });\n                }\n                else {\n                    const rows = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        rows.push(rowReferences[i].row);\n                    }\n                    modified.setRows(rows, 0);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options to group table rows.\n         */\n        SortModifier.defaultOptions = {\n            type: 'Sort',\n            direction: 'desc',\n            orderByColumn: 'y'\n        };\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'Dashboards/Accessibility/DashboardsAccessibility.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class DashboardsAccessibility {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(board) {\n                this.board = board;\n                this.addTabIndexToCells();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            addTabIndexToCells() {\n                const components = this.board.mountedComponents;\n                let cell;\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    cell = components[i].cell;\n                    if (cell && cell.container) {\n                        cell.container.setAttribute('tabindex', -1);\n                    }\n                }\n            }\n        }\n        /// namespace DashboardsAccessibility { }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DashboardsAccessibility;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        class DataCursor {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(stateMap = {}) {\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            addListener(tableId, state, listener) {\n                const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                const listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            }\n            /**\n             * @private\n             */\n            buildEmittingTag(e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            }\n            /**\n             * This function emits a state cursor related to a table. It will provide\n             * lasting state cursors of the table to listeners.\n             *\n             * @example\n             * ```ts\n             * dataCursor.emit(myTable, {\n             *     type: 'position',\n             *     column: 'city',\n             *     row: 4,\n             *     state: 'hover',\n             * });\n             * ```\n             *\n             * @param {Data.DataTable} table\n             * The related table of the cursor.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * The state cursor to emit.\n             *\n             * @param {Event} [event]\n             * Optional event information from a related source.\n             *\n             * @param {boolean} [lasting]\n             * Whether this state cursor should be kept until it is cleared with\n             * {@link DataCursor#remitCursor}.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            emitCursor(table, cursor, event, lasting) {\n                const tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ?? {});\n                    const cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    const e = {\n                        cursor,\n                        cursors,\n                        table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        const index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            }\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            remitCursor(tableId, cursor) {\n                const cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    const index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            removeListener(tableId, state, listener) {\n                const listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataCursor class.\n         * @internal\n         */\n        DataCursor.version = '1.0.0';\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    const columnNeedle = JSON.stringify(needle.columns);\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                const needleColumns = needle.columns;\n                const rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                const columns = (cursor.columns || []);\n                const positions = [];\n                const state = cursor.state;\n                for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row,\n                            state\n                        });\n                        continue;\n                    }\n                    for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row,\n                            state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                const range = {\n                    type: 'range',\n                    firstRow: (cursor.row ??\n                        (defaultRange && defaultRange.firstRow) ??\n                        0),\n                    lastRow: (cursor.row ??\n                        (defaultRange && defaultRange.lastRow) ??\n                        Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Dashboards/Serializable.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Contains the toolset to serialize class instance to JSON and deserialize JSON\n         * to class instances.\n         * @internal\n         * @private\n         */\n        var Serializable;\n        (function (Serializable) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry of serializable classes.\n             */\n            const classRegistry = {};\n            /**\n             * Registry of function sets.\n             */\n            const helperRegistry = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a class instance from the given JSON, if a suitable serializer\n             * has been found.\n             *\n             * @function Serializable.fromJSON\n             *\n             * @param {Serializable.JSON} json\n             * JSON to create a class instance or object from.\n             *\n             * @return {Globals.AnyRecord}\n             * Returns the class instance or object, or throws an exception.\n             */\n            function fromJSON(json) {\n                const $class = json.$class;\n                if (typeof $class !== 'string') {\n                    throw new Error('JSON has no $class property.');\n                }\n                const classs = classRegistry[$class];\n                if (classs) {\n                    return classs.fromJSON(json);\n                }\n                const helper = helperRegistry[$class];\n                if (helper) {\n                    return helper.fromJSON(json);\n                }\n                throw new Error(`'${$class}' unknown.`);\n            }\n            Serializable.fromJSON = fromJSON;\n            /**\n             * Registers a class prototype for the given JSON $class.\n             *\n             * @function Serializable.registerClassPrototype\n             *\n             * @param {string} $class\n             * JSON $class to register for.\n             *\n             * @param {Serializable} classPrototype\n             * Class to register.\n             */\n            function registerClassPrototype($class, classPrototype) {\n                if (classRegistry[$class]) {\n                    throw new Error('A serializer for \\'' + $class + '\\' is already registered.');\n                }\n                classRegistry[$class] = classPrototype;\n            }\n            Serializable.registerClassPrototype = registerClassPrototype;\n            /**\n             * Registers helper functions for the given JSON $class.\n             *\n             * @function Serializable.registerHelper\n             *\n             * @param {Helper} helperFunctions\n             * Helper functions to register.\n             */\n            function registerHelper(helperFunctions) {\n                if (helperRegistry[helperFunctions.$class]) {\n                    throw new Error('A serializer for \\'' + helperFunctions.$class +\n                        '\\' is already registered.');\n                }\n                helperRegistry[helperFunctions.$class] = helperFunctions;\n            }\n            Serializable.registerHelper = registerHelper;\n            /**\n             * Creates JSON from a class instance.\n             *\n             * @function Serializable.toJSON\n             *\n             * @param {Globals.AnyRecord} obj\n             * Class instance or object to serialize as JSON.\n             *\n             * @return {Serializable.JSON}\n             * JSON of the class instance.\n             */\n            function toJSON(obj) {\n                if (typeof obj.fromJSON === 'function' &&\n                    typeof obj.toJSON === 'function') {\n                    return obj.toJSON();\n                }\n                const classes = Object.keys(helperRegistry), numberOfHelpers = classes.length;\n                let $class, serializer;\n                for (let i = 0; i < numberOfHelpers; ++i) {\n                    $class = classes[i];\n                    serializer = helperRegistry[$class];\n                    if (serializer.jsonSupportFor(obj)) {\n                        return serializer.toJSON(obj);\n                    }\n                }\n                throw new Error('Object is not supported.');\n            }\n            Serializable.toJSON = toJSON;\n        })(Serializable || (Serializable = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Serializable;\n    });\n    _registerModule(_modules, 'Dashboards/SerializeHelper/DataCursorHelper.js', [_modules['Data/DataCursor.js'], _modules['Dashboards/Serializable.js']], function (DataCursor, Serializable) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts the given JSON to a class instance.\n         *\n         * @param {DataCursorHelper.JSON} json\n         * JSON to deserialize as a class instance or object.\n         *\n         * @return {DataCursor}\n         * Returns the class instance or object, or throws an exception.\n         */\n        function fromJSON(json) {\n            return new DataCursor(json.stateMap);\n        }\n        /**\n         * Validates the given class instance for JSON support.\n         *\n         * @param {Globals.AnyRecord} obj\n         * Class instance or object to validate.\n         *\n         * @return {boolean}\n         * Returns true, if the function set can convert the given object, otherwise\n         * false.\n         */\n        function jsonSupportFor(obj) {\n            return obj instanceof DataCursor;\n        }\n        /**\n         * Converts the given class instance to JSON.\n         *\n         * @param {DataTable} obj\n         * Class instance or object to serialize as JSON.\n         *\n         * @return {DataTableHelper.JSON}\n         * Returns the JSON of the class instance or object.\n         */\n        function toJSON(obj) {\n            const stateMap = obj.stateMap, stateMapJSON = {}, tableIds = Object.keys(obj.stateMap);\n            let cursors, cursorsJSON, tableId, state, states;\n            for (let i = 0, iEnd = tableIds.length; i < iEnd; ++i) {\n                tableId = tableIds[i];\n                states = Object.keys(stateMap[tableId]);\n                stateMapJSON[tableId] = {};\n                for (let j = 0, jEnd = states.length; j < jEnd; ++j) {\n                    state = states[j];\n                    cursors = stateMap[tableId][state];\n                    stateMapJSON[tableId][state] = cursorsJSON = [];\n                    for (let k = 0, kEnd = cursors.length; k < kEnd; ++k) {\n                        cursorsJSON.push({ ...cursors[k] });\n                    }\n                }\n            }\n            return {\n                $class: 'Data.DataCursor',\n                stateMap: stateMapJSON\n            };\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        const DataCursorHelper = {\n            $class: 'Data.DataCursor',\n            fromJSON,\n            jsonSupportFor,\n            toJSON\n        };\n        Serializable.registerHelper(DataCursorHelper);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursorHelper;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        class DataPool {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = DataPoolDefaults) {\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                U.fireEvent(this, e.type, e);\n            }\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            getConnector(connectorId) {\n                const connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                let waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    const connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(`Connector '${connectorId}' not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then((connector) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch']((error) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise((resolve, reject) => {\n                    waitingList.push([resolve, reject]);\n                });\n            }\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            getConnectorIds() {\n                const connectors = this.options.connectors, connectorIds = [];\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            }\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            getConnectorOptions(connectorId) {\n                const connectors = this.options.connectors;\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            }\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            getConnectorTable(connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then((connector) => connector.table);\n            }\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            isNewConnector(connectorId) {\n                return !this.connectors[connectorId];\n            }\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            loadConnector(options) {\n                return new Promise((resolve, reject) => {\n                    this.emit({\n                        type: 'load',\n                        options\n                    });\n                    const ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(`Connector type not found. (${options.type})`);\n                    }\n                    const connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then((connector) => {\n                        this.connectors[options.id] = connector;\n                        this.emit({\n                            type: 'afterLoad',\n                            options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return U.addEvent(this, type, callback);\n            }\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            setConnectorOptions(options) {\n                const connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options\n                });\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataPool class.\n         * @internal\n         */\n        DataPool.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Row.js', [_modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js']], function (Globals, Cell, GUIElement, U, EditGlobals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { pick, defined, merge, objectEach, fireEvent } = U;\n        /**\n         * @internal\n         **/\n        class Row extends GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /** @internal */\n            static fromJSON(json, layout) {\n                if (layout) {\n                    const options = json.options;\n                    let id = options.containerId || '';\n                    if (id && layout.copyId) {\n                        id = id + '_' + layout.copyId;\n                    }\n                    return new Row(layout, {\n                        id: id,\n                        parentContainerId: (layout.container && layout.container.id) ||\n                            options.parentContainerId,\n                        cellsJSON: options.cells,\n                        style: options.style\n                    });\n                }\n                return void 0;\n            }\n            static setContainerHeight(rowContainer, height) {\n                if (height) {\n                    rowContainer.style.height = height + 'px';\n                }\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Row class.\n             *\n             * @param {Layout} layout\n             * Reference to the layout instance.\n             *\n             * @param {Row.Options} options\n             * Options for the row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container of the row HTML element.\n             */\n            constructor(layout, options, rowElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.row;\n                this.layout = layout;\n                this.cells = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    layout.container;\n                const layoutOptions = (layout.options || {}), rowClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.row + ' ' +\n                            rowClassName\n                    },\n                    element: rowElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, options.style)\n                });\n                // Init rows from options.\n                if (this.options.cells) {\n                    this.setCells();\n                }\n                // Init rows from JSON.\n                if (options.cellsJSON && !this.cells.length) {\n                    this.setCellsFromJSON(options.cellsJSON);\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the row cells using cell options or cellClassName.\n             */\n            setCells() {\n                const row = this, cellClassName = (row.layout.options || {}).cellClassName || '', cellsElements = pick(row.options.cells, row.container && row.container.getElementsByClassName(cellClassName)) || [];\n                let cellElement, i, iEnd;\n                for (i = 0, iEnd = cellsElements.length; i < iEnd; ++i) {\n                    cellElement = cellsElements[i];\n                    row.addCell(row.layout.board.guiEnabled ? cellElement : { id: '' }, cellElement instanceof HTMLElement ? cellElement : void 0);\n                }\n            }\n            /** @internal */\n            setCellsFromJSON(json) {\n                const row = this, componentsToMount = [];\n                let cell, cellJSON;\n                // Set cells.\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    cellJSON = json[i];\n                    cell = Cell.fromJSON({\n                        $class: cellJSON.$class,\n                        options: {\n                            containerId: cellJSON.options.containerId,\n                            parentContainerId: cellJSON.options.parentContainerId,\n                            width: cellJSON.options.width,\n                            height: cellJSON.options.height,\n                            style: cellJSON.options.style,\n                            layoutJSON: cellJSON.options.layoutJSON,\n                            mountedComponentJSON: void 0 // Will be mounted later.\n                        }\n                    }, row);\n                    if (cell) {\n                        row.cells.push(cell);\n                        if (cellJSON.options.mountedComponentJSON) {\n                            componentsToMount.push({\n                                cell: cell,\n                                // eslint-disable-next-line\n                                mountedComponentJSON: cellJSON.options.mountedComponentJSON\n                            });\n                        }\n                    }\n                }\n                // Mount components.\n                for (let i = 0, iEnd = componentsToMount.length; i < iEnd; ++i) {\n                    componentsToMount[i].cell.mountComponentFromJSON(componentsToMount[i].mountedComponentJSON);\n                }\n            }\n            /**\n             * Add a new Cell instance to the row cells array.\n             *\n             * @param {Cell.Options} [options]\n             * Options for the row cell.\n             *\n             * @param {HTMLElement} [cellElement]\n             * The container for a new cell HTML element.\n             *\n             * @return {Cell}\n             * Returns the Cell object.\n             */\n            addCell(options, cellElement, index) {\n                const row = this, cell = new Cell(row, options, cellElement);\n                if (!defined(index)) {\n                    row.cells.push(cell);\n                }\n                else {\n                    row.mountCell(cell, index);\n                }\n                // Set editMode events.\n                if (row.layout.board.editMode) {\n                    row.layout.board.editMode.setCellEvents(cell);\n                }\n                return cell;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner cells.\n             */\n            destroy() {\n                const row = this;\n                const { layout } = row;\n                // Copy to avoid problem with index when shifting array of cells during\n                // the destroy.\n                const rowCells = [...row.cells];\n                // Destroy cells.\n                for (let i = 0, iEnd = rowCells?.length; i < iEnd; ++i) {\n                    if (rowCells[i]) {\n                        rowCells[i].destroy();\n                    }\n                }\n                if (row.layout) {\n                    row.layout.unmountRow(row);\n                    super.destroy();\n                    if (layout.rows?.length === 0) {\n                        layout.destroy();\n                    }\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Row.JSON}\n             * Class JSON of this Row instance.\n             */\n            toJSON() {\n                const row = this, layoutContainerId = (row.layout.container || {}).id || '', cells = [];\n                // Get cells JSON.\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    cells.push(row.cells[i].toJSON());\n                }\n                return {\n                    $class: 'Dashboards.Layout.Row',\n                    options: {\n                        containerId: row.container.id,\n                        parentContainerId: layoutContainerId,\n                        cells: cells,\n                        style: row.options.style\n                    }\n                };\n            }\n            /**\n             * Get the row's options.\n             * @returns\n             * The JSON of row's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const row = this, cells = [];\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    cells.push(row.cells[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    style: this.options.style,\n                    cells\n                };\n            }\n            setSize(height) {\n                Row.setContainerHeight(this.container, height);\n            }\n            // Get cell index from the row.cells array.\n            getCellIndex(cell) {\n                for (let i = 0, iEnd = this.cells?.length; i < iEnd; ++i) {\n                    if (this.cells[i].id === cell.id) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the row.cells array and move cell container.\n            mountCell(cell, index = 0) {\n                const row = this, nextCell = row.cells[index], prevCell = row.cells[index - 1];\n                if (cell.container) {\n                    if (nextCell && nextCell.container) {\n                        nextCell.container.parentNode.insertBefore(cell.container, nextCell.container);\n                    }\n                    else if (prevCell && prevCell.container) {\n                        prevCell.container.parentNode.insertBefore(cell.container, prevCell.container.nextSibling);\n                    }\n                    else if (!prevCell && !nextCell && row.container) {\n                        row.container.appendChild(cell.container);\n                    }\n                    row.cells.splice(index, 0, cell);\n                    cell.row = row;\n                    setTimeout(() => {\n                        fireEvent(row, 'cellChange', { row, cell });\n                    }, 0);\n                }\n            }\n            // Remove cell from the row.cells array.\n            unmountCell(cell) {\n                const cellIndex = this.getCellIndex(cell);\n                if (defined(cellIndex)) {\n                    this.cells.splice(cellIndex, 1);\n                }\n                setTimeout(() => {\n                    fireEvent(this, 'cellChange', { row: this, cell });\n                }, 0);\n            }\n            getVisibleCells() {\n                const cells = [];\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    if (this.cells[i].isVisible) {\n                        cells.push(this.cells[i]);\n                    }\n                }\n                return cells;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const row = this;\n                super.changeVisibility(setVisible, displayStyle);\n                // Change layout visibility if needed.\n                if (!row.layout.getVisibleRows().length) {\n                    row.layout.hide();\n                }\n                else if (row.isVisible && !row.layout.isVisible) {\n                    row.layout.show();\n                }\n            }\n            show() {\n                this.changeVisibility(true, 'flex');\n            }\n            setHighlight() {\n                const container = this.container;\n                container.classList.toggle(EditGlobals.classNames.rowContextHighlight);\n            }\n            // Row can have cells below each others.\n            // This method returns cells split into levels.\n            getRowLevels() {\n                const row = this, rowLevels = {}, rowLevelsArray = [];\n                let cell, cellOffsets;\n                for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                    cell = row.cells[k];\n                    if (cell.isVisible) {\n                        cellOffsets = GUIElement.getOffsets(cell);\n                        if (!rowLevels[cellOffsets.top]) {\n                            rowLevels[cellOffsets.top] = {\n                                top: cellOffsets.top,\n                                bottom: cellOffsets.bottom,\n                                cells: []\n                            };\n                        }\n                        if (rowLevels[cellOffsets.top].bottom < cellOffsets.bottom) {\n                            rowLevels[cellOffsets.top].bottom = cellOffsets.bottom;\n                        }\n                        rowLevels[cellOffsets.top].cells.push(cell);\n                    }\n                }\n                objectEach(rowLevels, (value) => {\n                    rowLevelsArray.push(value);\n                });\n                return rowLevelsArray;\n            }\n            // Get row level with additional info\n            // on a specific Y position.\n            getRowLevelInfo(posY) {\n                const rowLevels = this.getRowLevels();\n                let rowLevelInfo;\n                for (let i = 0, iEnd = rowLevels.length; i < iEnd; ++i) {\n                    if (rowLevels[i].top <= posY && rowLevels[i].bottom > posY) {\n                        rowLevelInfo = {\n                            index: i,\n                            rowLevels: rowLevels,\n                            rowLevel: rowLevels[i]\n                        };\n                    }\n                }\n                return rowLevelInfo;\n            }\n        }\n\n        return Row;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Layout.js', [_modules['Dashboards/Utilities.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Layout/Row.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Globals.js']], function (DU, U, Row, GUIElement, Globals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { uniqueKey } = DU;\n        const { pick, defined } = U;\n        /**\n         * @internal\n         **/\n        class Layout extends GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /** @internal */\n            static fromJSON(json, board, parentCell) {\n                const options = json.options, \n                // Check if layout container exists.\n                container = document.getElementById(json.options.containerId), layout = new Layout(board, {\n                    id: options.containerId,\n                    copyId: container ? uniqueKey() : '',\n                    parentContainerId: options.parentContainerId || board.container.id,\n                    rowsJSON: options.rows,\n                    style: options.style\n                }, parentCell);\n                // Save layout in the dashboard.\n                if (layout && !parentCell) {\n                    board.layouts.push(layout);\n                }\n                return layout;\n            }\n            /** @internal */\n            static importLocal(id, board) {\n                const layoutOptions = localStorage.getItem(Globals.classNamePrefix + id);\n                let layout;\n                if (layoutOptions) {\n                    layout = Layout.fromJSON(JSON.parse(layoutOptions), board);\n                }\n                return layout;\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Layout class.\n             *\n             * @param {Dashboard} board\n             * Reference to the dashboard instance.\n             *\n             * @param {Layout.Options} options\n             * Options for the layout.\n             */\n            constructor(board, options, parentCell) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.layout;\n                this.board = board;\n                this.rows = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = parentCell ? parentCell.container :\n                    document.getElementById(options.parentContainerId || '') || board.layoutsWrapper;\n                // Set layout level.\n                if (parentCell) {\n                    this.parentCell = parentCell;\n                    this.level = parentCell.row.layout.level + 1;\n                }\n                else {\n                    this.level = 0;\n                }\n                // GUI structure\n                if (options.copyId) {\n                    this.copyId = options.copyId;\n                }\n                const layoutOptions = (this.options || {}), layoutClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: (options.id || '') + (this.copyId ? '_' + this.copyId : ''),\n                        className: Globals.classNames.layout + ' ' +\n                            layoutClassName\n                    },\n                    elementId: options.id,\n                    style: this.options.style\n                });\n                // Init rows from options.\n                if (this.options.rows) {\n                    this.setRows();\n                }\n                // Init rows from JSON.\n                if (options.rowsJSON && !this.rows.length) {\n                    this.setRowsFromJSON(options.rowsJSON);\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the layout rows using rows options or rowClassName.\n             */\n            setRows() {\n                const layout = this, rowsElements = pick(layout.options.rows, layout.container && layout.container.getElementsByClassName(layout.options.rowClassName || '')) || [];\n                let rowElement, i, iEnd;\n                for (i = 0, iEnd = rowsElements.length; i < iEnd; ++i) {\n                    rowElement = rowsElements[i];\n                    layout.addRow(layout.board.guiEnabled ? rowElement : {}, rowElement instanceof HTMLElement ? rowElement : void 0);\n                }\n            }\n            /** @internal */\n            setRowsFromJSON(json) {\n                const layout = this;\n                let row;\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    row = Row.fromJSON(json[i], layout);\n                    if (row) {\n                        layout.rows.push(row);\n                    }\n                }\n            }\n            /**\n             * Add a new Row instance to the layout rows array.\n             *\n             * @param {Row.Options} options\n             * Options of a row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container for a new row HTML element.\n             *\n             * @return {Row}\n             * Returns the Row object.\n             */\n            addRow(options, rowElement, index) {\n                const layout = this, row = new Row(layout, options, rowElement);\n                if (!defined(index)) {\n                    layout.rows.push(row);\n                }\n                else {\n                    layout.mountRow(row, index);\n                }\n                // Set editMode events.\n                if (layout.board.editMode) {\n                    layout.board.editMode.setRowEvents(row);\n                }\n                return row;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner rows.\n             */\n            destroy() {\n                const layout = this;\n                for (let i = layout.board.layouts.length - 1; i >= 0; i--) {\n                    if (layout.board.layouts[i] === layout) {\n                        layout.board.layouts.splice(i, 1);\n                    }\n                }\n                if (layout.parentCell) {\n                    delete layout.parentCell.nestedLayout;\n                }\n                // Destroy rows.\n                for (let i = layout.rows.length - 1; i >= 0; i--) {\n                    layout.rows[i].destroy();\n                }\n                if (layout.parentCell) {\n                    layout.parentCell.destroy();\n                }\n                super.destroy();\n            }\n            /**\n             * Export layout's options and save in the local storage\n             * @internal\n             */\n            exportLocal() {\n                localStorage.setItem(Globals.classNamePrefix + this.options.id, JSON.stringify(this.toJSON()));\n            }\n            // Get row index from the layout.rows array.\n            getRowIndex(row) {\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i] === row) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the layout.rows array and move row container.\n            mountRow(row, index) {\n                const nextRow = this.rows[index], prevRow = this.rows[index - 1];\n                if (row.container) {\n                    if (nextRow && nextRow.container) {\n                        nextRow.container.parentNode.insertBefore(row.container, nextRow.container);\n                    }\n                    else if (prevRow && prevRow.container) {\n                        prevRow.container.parentNode.insertBefore(row.container, prevRow.container.nextSibling);\n                    }\n                    this.rows.splice(index, 0, row);\n                    row.layout = this;\n                }\n            }\n            // Remove row from the layout.rows array.\n            unmountRow(row) {\n                const rowIndex = this.getRowIndex(row);\n                if (defined(rowIndex)) {\n                    this.rows.splice(rowIndex, 1);\n                }\n            }\n            getVisibleRows() {\n                const rows = [];\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i].isVisible) {\n                        rows.push(this.rows[i]);\n                    }\n                }\n                return rows;\n            }\n            changeVisibility(setVisible = true) {\n                const layout = this;\n                super.changeVisibility(setVisible);\n                // Change parentCell visibility.\n                if (layout.parentCell) {\n                    if (layout.isVisible && !layout.parentCell.isVisible) {\n                        layout.parentCell.show();\n                    }\n                    else if (!layout.isVisible && layout.parentCell.isVisible) {\n                        layout.parentCell.hide();\n                    }\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Layout.JSON}\n             * Class JSON of this Layout instance.\n             */\n            toJSON() {\n                const layout = this, dashboardContainerId = (layout.board.container || {}).id || '', rows = [];\n                // Get rows JSON.\n                for (let i = 0, iEnd = layout.rows.length; i < iEnd; ++i) {\n                    rows.push(layout.rows[i].toJSON());\n                }\n                return {\n                    $class: 'Dashboards.Layout',\n                    options: {\n                        containerId: layout.container.id,\n                        parentContainerId: dashboardContainerId,\n                        rows: rows,\n                        style: layout.options.style\n                    }\n                };\n            }\n            /**\n             * Get the layout's options.\n             * @returns\n             * The JSON of layout's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const layout = this, rows = [];\n                // Get rows JSON.\n                for (let i = 0, iEnd = layout.rows.length; i < iEnd; ++i) {\n                    rows.push(layout.rows[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    layoutClassName: this.options.layoutClassName,\n                    rowClassName: this.options.rowClassName,\n                    cellClassName: this.options.cellClassName,\n                    style: this.options.style,\n                    rows\n                };\n            }\n        }\n\n        return Layout;\n    });\n    _registerModule(_modules, 'Dashboards/Board.js', [_modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Accessibility/DashboardsAccessibility.js'], _modules['Data/DataCursor.js'], _modules['Dashboards/SerializeHelper/DataCursorHelper.js'], _modules['Data/DataPool.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Dashboards/Serializable.js'], _modules['Dashboards/Components/HTMLComponent/HTMLComponent.js'], _modules['Core/Utilities.js']], function (Bindings, ComponentRegistry, DashboardsAccessibility, DataCursor, DataCursorHelper, DataPool, Globals, Layout, Serializable, HTMLComponent, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        const { merge, addEvent, error, objectEach, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that represents a dashboard.\n         *\n         * @example\n         * const dashboard = Dashboards.board('container', {\n         *      gui: {\n         *          layouts: [{\n         *              id: 'layout-1',\n         *              rows: [{\n         *                  cells: [{\n         *                      id: 'dashboard-col-0'\n         *                  }]\n         *              }]\n         *          }]\n         *      },\n         *      components: [{\n         *          cell: 'dashboard-col-0',\n         *          type: 'Highcharts',\n         *          chartOptions: {\n         *              series: [{\n         *                  data: [1, 2, 3, 4]\n         *              }]\n         *          }\n         *      }]\n         * });\n         */\n        class Board {\n            // Implementation:\n            static board(renderTo, options, async) {\n                return new Board(renderTo, options).init(async);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a dashboard with components like charts, tables, and HTML\n             * elements.\n             *\n             * @internal\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             *\n             * @param options\n             * The options for the dashboard.\n             */\n            constructor(renderTo, options) {\n                /**\n                 * All types of components available in the dashboard.\n                 * @internal\n                 */\n                this.componentTypes = ComponentRegistry.types;\n                this.options = merge(Board.defaultOptions, options);\n                this.dataPool = new DataPool(options.dataPool);\n                this.id = uniqueKey();\n                this.guiEnabled = !options.gui ?\n                    false : this.options?.gui?.enabled;\n                this.editModeEnabled = !options.editMode ?\n                    false : this.options?.editMode?.enabled;\n                this.layouts = [];\n                this.mountedComponents = [];\n                this.initContainer(renderTo);\n                this.initEditMode();\n                // Add table cursors support.\n                this.dataCursor = new DataCursor();\n                this.index = Globals.boards.length;\n                Globals.boards.push(this);\n                // A11y module\n                this.a11y = new DashboardsAccessibility(this);\n            }\n            // Implementation:\n            init(async) {\n                const options = this.options;\n                const componentPromises = (options.components) ?\n                    this.setComponents(options.components) : [];\n                // Init events.\n                this.initEvents();\n                if (async) {\n                    return Promise.all(componentPromises).then(() => this);\n                }\n                return this;\n            }\n            /**\n             * Initializes the events.\n             * @internal\n             */\n            initEvents() {\n                const board = this, runReflow = () => {\n                    board.reflow();\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(runReflow);\n                    this.resizeObserver.observe(board.container);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', runReflow);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * Initialize the container for the dashboard.\n             * @internal\n             *\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             */\n            initContainer(renderTo) {\n                const board = this;\n                if (typeof renderTo === 'string') {\n                    renderTo = window.document.getElementById(renderTo);\n                }\n                // Display an error if the renderTo doesn't exist.\n                if (!renderTo) {\n                    error(13, true);\n                }\n                board.container = renderTo;\n            }\n            /**\n             * Inits creating a layouts and setup the EditMode tools.\n             * @internal\n             *\n             */\n            initEditMode() {\n                if (Dashboards.EditMode) {\n                    this.editMode = new Dashboards.EditMode(this, this.options.editMode);\n                }\n                else if (this.editModeEnabled) {\n                    throw new Error('Missing layout.js module');\n                }\n            }\n            /**\n             * Set the components from options.\n             * @internal\n             *\n             * @param components\n             * An array of component options.\n             *\n             */\n            setComponents(components) {\n                const promises = [];\n                const board = this;\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    promises.push(Bindings.addComponent(components[i], board));\n                }\n                return promises;\n            }\n            /**\n             * Destroy the whole dashboard, its layouts and elements.\n             */\n            destroy() {\n                const board = this;\n                // Destroy layouts.\n                for (let i = 0, iEnd = board.layouts?.length; i < iEnd; ++i) {\n                    board.layouts[i].destroy();\n                }\n                // Remove resizeObserver from the board\n                this.resizeObserver?.unobserve(board.container);\n                // Destroy container.\n                board.container?.remove();\n                // @ToDo Destroy bindings.\n                // Delete all properties.\n                objectEach(board, function (val, key) {\n                    delete board[key];\n                });\n                Globals.boards[this.index] = void 0;\n                return;\n            }\n            /**\n             * Export layouts to the local storage.\n             */\n            exportLocal() {\n                localStorage.setItem(\n                // Dashboard.prefix + this.id,\n                Globals.classNamePrefix + '1', // Temporary for demo test\n                JSON.stringify(this.toJSON()));\n            }\n            /**\n             * Import the dashboard's layouts from the local storage.\n             *\n             * @param id\n             * The id of the layout to import.\n             *\n             * @returns Returns the imported layout.\n             */\n            importLayoutLocal(id) {\n                return Layout.importLocal(id, this);\n            }\n            /**\n             * Reflow the dashboard. Hide the toolbars and context pointer. Reflow the\n             * layouts and its cells.\n             */\n            reflow() {\n                const board = this;\n                if (board.editMode) {\n                    const editModeTools = board.editMode.tools;\n                    board.editMode.hideToolbars(['cell', 'row']);\n                    board.editMode.hideContextPointer();\n                    // Update expanded context menu container\n                    if (editModeTools.contextMenu) {\n                        editModeTools.contextMenu\n                            .updatePosition(editModeTools.contextButtonElement);\n                    }\n                }\n            }\n            /**\n             * Converts the given JSON to a class instance.\n             *\n             * @param json\n             * JSON to deserialize as a class instance or object.\n             *\n             * @returns Returns the class instance or object.\n             */\n            fromJSON(json) {\n                const options = json.options, board = new Board(options.containerId, {\n                    componentOptions: options.componentOptions,\n                    dataPool: options.dataPool,\n                    layoutsJSON: options.layouts\n                });\n                board.dataCursor = DataCursorHelper.fromJSON(json.dataCursor);\n                return board;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns Class JSON of this Dashboard instance.\n             */\n            toJSON() {\n                const board = this, layouts = [];\n                // Get layouts JSON.\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    layouts.push(board.layouts[i].toJSON());\n                }\n                return {\n                    $class: 'Board',\n                    dataCursor: DataCursorHelper.toJSON(board.dataCursor),\n                    options: {\n                        containerId: board.container.id,\n                        dataPool: board.options.dataPool,\n                        guiEnabled: board.guiEnabled,\n                        layouts: layouts,\n                        componentOptions: board.options.componentOptions\n                    }\n                };\n            }\n            /**\n             * Convert the current state of board's options into JSON. The function does\n             * not support converting functions or events into JSON object.\n             *\n             * @returns\n             * The JSON of boards's options.\n             */\n            getOptions() {\n                const board = this, options = {\n                    ...this.options,\n                    components: []\n                };\n                for (let i = 0, iEnd = board.mountedComponents.length; i < iEnd; ++i) {\n                    if (board.mountedComponents[i].cell &&\n                        board.mountedComponents[i].cell.mountedComponent) {\n                        options.components?.push(board.mountedComponents[i].component.getOptions());\n                    }\n                }\n                if (this.guiEnabled) {\n                    options.gui = {\n                        layouts: []\n                    };\n                    for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                        options.gui.layouts?.push(board.layouts[i].getOptions());\n                    }\n                }\n                else {\n                    delete options.gui;\n                }\n                return options;\n            }\n            /**\n             * Get a Dashboards component by its identifier.\n             *\n             * @param id\n             * The identifier of the requested component.\n             *\n             * @returns\n             * The component with the given identifier.\n             */\n            getComponentById(id) {\n                return this.mountedComponents.find((c) => c.component.id === id)?.component;\n            }\n            /**\n             * Get a Dashboards component by its cell identifier.\n             *\n             * @param id\n             * The identifier of the cell that contains the requested component.\n             *\n             * @returns\n             * The component with the given cell identifier.\n             */\n            getComponentByCellId(id) {\n                return this.mountedComponents.find((c) => c.cell.id === id)?.component;\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (Board) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Global dashboard settings.\n             * @internal\n             *\n             */\n            Board.defaultOptions = {\n                gui: {\n                    enabled: true,\n                    layoutOptions: {\n                        rowClassName: void 0,\n                        cellClassName: void 0\n                    },\n                    layouts: []\n                },\n                components: []\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Import layouts from the local storage.\n             *\n             * @returns Returns the Dashboard instance or undefined.\n             */\n            function importLocal() {\n                const dashboardJSON = localStorage.getItem(\n                // Dashboard.prefix + this.id,\n                Globals.classNamePrefix + '1' // Temporary for demo test\n                );\n                if (dashboardJSON) {\n                    try {\n                        return Serializable\n                            .fromJSON(JSON.parse(dashboardJSON));\n                    }\n                    catch (e) {\n                        throw new Error('' + e);\n                    }\n                }\n            }\n            Board.importLocal = importLocal;\n        })(Board || (Board = {}));\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        Serializable.registerClassPrototype('Board', Board.prototype);\n        ComponentRegistry.registerComponent('HTML', HTMLComponent);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Board;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridExtremesSync.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: void 0,\n            handler: function () {\n                if (this.type !== 'DataGrid') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { board } = component;\n                const handleChangeExtremes = (e) => {\n                    const cursor = e.cursor;\n                    if (cursor.type === 'position' &&\n                        component.dataGrid &&\n                        typeof cursor?.row === 'number') {\n                        const { row } = cursor;\n                        component.dataGrid.scrollToRow(row);\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'xAxis.extremes.min' + groupKey, handleChangeExtremes);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    const { dataCursor: cursor } = board;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'xAxis.extremes.min' + groupKey, handleChangeExtremes);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridHighlightSync.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {\n            autoScroll: false\n        };\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'DataGrid') {\n                    return;\n                }\n                const component = this;\n                const { dataGrid, board } = component;\n                const highlightOptions = this.sync.syncConfig.highlight;\n                const groupKey = highlightOptions.group ?\n                    ':' + highlightOptions.group : '';\n                if (!board || !dataGrid || !highlightOptions?.enabled) {\n                    return;\n                }\n                const { dataCursor: cursor } = board;\n                const onDataGridHover = (e) => {\n                    const table = this.getFirstConnector()?.table;\n                    if (table) {\n                        const row = e.row;\n                        cursor.emitCursor(table, {\n                            type: 'position',\n                            row: parseInt(row.dataset.rowIndex, 10),\n                            column: e.columnName,\n                            state: 'dataGrid.hoverRow' + groupKey\n                        });\n                    }\n                };\n                const onDataGridMouseOut = () => {\n                    const table = this.getFirstConnector()?.table;\n                    if (table) {\n                        cursor.emitCursor(table, {\n                            type: 'position',\n                            state: 'dataGrid.hoverOut' + groupKey\n                        });\n                    }\n                };\n                addEvent(dataGrid.container, 'dataGridHover', onDataGridHover);\n                addEvent(dataGrid.container, 'mouseout', onDataGridMouseOut);\n                // Return a function that calls the callbacks\n                return function () {\n                    removeEvent(dataGrid.container, 'dataGridHover', onDataGridHover);\n                    removeEvent(dataGrid.container, 'mouseout', onDataGridMouseOut);\n                };\n            },\n            handler: function () {\n                if (this.type !== 'DataGrid') {\n                    return;\n                }\n                const component = this;\n                const { board } = component;\n                const highlightOptions = component.sync.syncConfig.highlight;\n                const groupKey = highlightOptions.group ?\n                    ':' + highlightOptions.group : '';\n                if (!highlightOptions?.enabled) {\n                    return;\n                }\n                let highlightTimeout;\n                const handleCursor = (e) => {\n                    const cursor = e.cursor;\n                    if (cursor.type !== 'position') {\n                        return;\n                    }\n                    const { row } = cursor;\n                    const { dataGrid } = component;\n                    if (row === void 0 || !dataGrid) {\n                        return;\n                    }\n                    if (highlightOptions.autoScroll) {\n                        dataGrid.scrollToRow(row - Math.round(dataGrid.rowElements.length / 2) + 1);\n                    }\n                    if (highlightTimeout) {\n                        clearTimeout(highlightTimeout);\n                    }\n                    highlightTimeout = setTimeout(() => {\n                        const highlightedDataRow = dataGrid.container\n                            .querySelector(`.highcharts-datagrid-row[data-row-index=\"${row}\"]`);\n                        if (highlightedDataRow) {\n                            dataGrid.toggleRowHighlight(highlightedDataRow);\n                            dataGrid.hoveredRow = highlightedDataRow;\n                        }\n                    }, highlightOptions.autoScroll ? 10 : 0);\n                };\n                const handleCursorOut = () => {\n                    const { dataGrid } = component;\n                    if (dataGrid) {\n                        dataGrid.toggleRowHighlight(void 0);\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                    cursor.addListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                };\n                const unregisterCursorListeners = () => {\n                    const cursor = board.dataCursor;\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                    cursor.removeListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridVisibilitySync.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: void 0,\n            handler: function () {\n                if (this.type !== 'DataGrid') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.visibility;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { board } = component;\n                const handleVisibilityChange = (e) => {\n                    const cursor = e.cursor, dataGrid = component.dataGrid;\n                    if (!(dataGrid && cursor.type === 'position' && cursor.column)) {\n                        return;\n                    }\n                    const columnName = cursor.column;\n                    dataGrid.update({\n                        columns: {\n                            [columnName]: {\n                                show: cursor.state !== 'series.hide' + groupKey\n                            }\n                        }\n                    });\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'series.show' + groupKey, handleVisibilityChange);\n                    cursor.addListener(table.id, 'series.hide' + groupKey, handleVisibilityChange);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    const { dataCursor: cursor } = board;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'series.show' + groupKey, handleVisibilityChange);\n                    cursor.removeListener(table.id, 'series.hide' + groupKey, handleVisibilityChange);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridSyncs.js', [_modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridExtremesSync.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridHighlightSync.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridVisibilitySync.js']], function (DataGridExtremesSync, DataGridHighlightSync, DataGridVisibilitySync) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Namespace\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                extremes: DataGridExtremesSync.syncPair,\n                highlight: DataGridHighlightSync.syncPair,\n                visibility: DataGridVisibilitySync.syncPair\n            },\n            defaultSyncOptions: {\n                extremes: DataGridExtremesSync.defaultOptions,\n                highlight: DataGridHighlightSync.defaultOptions,\n                visibility: DataGridVisibilitySync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridComponentDefaults.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { uniqueKey } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const DataGridComponentDefaults = {\n            dataGridClassName: 'dataGrid-container',\n            dataGridID: 'dataGrid-' + uniqueKey(),\n            dataGridOptions: {},\n            editableOptions: [{\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                }],\n            onUpdate: (e, connector) => {\n                const inputElement = e.target;\n                if (inputElement) {\n                    const parentRow = inputElement\n                        .closest('.highcharts-datagrid-row');\n                    const cell = inputElement.closest('.highcharts-datagrid-cell');\n                    if (parentRow &&\n                        parentRow instanceof HTMLElement &&\n                        cell &&\n                        cell instanceof HTMLElement) {\n                        const dataTableRowIndex = parentRow.dataset.rowIndex;\n                        const { columnName } = cell.dataset;\n                        if (dataTableRowIndex !== void 0 &&\n                            columnName !== void 0) {\n                            const table = connector.table;\n                            if (table) {\n                                const converter = new DataConverter();\n                                let valueToSet = converter\n                                    .asGuessedType(inputElement.value);\n                                if (valueToSet instanceof Date) {\n                                    valueToSet = valueToSet.toString();\n                                }\n                                table.setCell(columnName, Number(dataTableRowIndex), valueToSet);\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridSyncs.js'], _modules['Dashboards/Components/DataGridComponent/DataGridComponentDefaults.js'], _modules['Core/Utilities.js']], function (Component, DataGridSyncs, DataGridComponentDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { diffObjects, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * DataGrid component for Highcharts Dashboards.\n         * @private\n         */\n        class DataGridComponent extends Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /** @private */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const dataGridOptions = JSON.parse(json.options.dataGridOptions || '');\n                const component = new DataGridComponent(cell, merge(options, { dataGridOptions }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options, board) {\n                options = merge(DataGridComponent.defaultOptions, options);\n                super(cell, options, board);\n                this.connectorListeners = [];\n                this.options = options;\n                this.type = 'DataGrid';\n                if (this.options.dataGridClassName) {\n                    this.contentElement.classList.add(this.options.dataGridClassName);\n                }\n                if (this.options.dataGridID) {\n                    this.contentElement.id = this.options.dataGridID;\n                }\n                this.dataGridOptions = (this.options.dataGridOptions ||\n                    {});\n                this.innerResizeTimeouts = [];\n                this.on('afterSetConnectors', (e) => {\n                    const connector = e.connectorHandlers?.[0]?.connector;\n                    if (connector) {\n                        this.disableEditingModifiedColumns(connector);\n                    }\n                });\n            }\n            onTableChanged() {\n                if (this.dataGrid && !this.dataGrid?.cellInputEl) {\n                    this.dataGrid.update({ dataTable: this.filterColumns() });\n                }\n            }\n            /**\n             * Disable editing of the columns that are modified by the data modifier.\n             * @internal\n             *\n             * @param connector\n             * Attached connector\n             */\n            disableEditingModifiedColumns(connector) {\n                const options = this.getColumnOptions(connector);\n                this.dataGrid?.update({ columns: options });\n            }\n            /**\n             * Get the column options for the data grid.\n             * @internal\n             */\n            getColumnOptions(connector) {\n                const modifierOptions = connector.options.dataModifier;\n                if (!modifierOptions || modifierOptions.type !== 'Math') {\n                    return {};\n                }\n                const modifierColumns = modifierOptions.columnFormulas;\n                if (!modifierColumns) {\n                    return {};\n                }\n                const options = {};\n                for (let i = 0, iEnd = modifierColumns.length; i < iEnd; ++i) {\n                    const columnName = modifierColumns[i].column;\n                    options[columnName] = {\n                        editable: false\n                    };\n                }\n                return options;\n            }\n            /* *\n             *\n             *  Class methods\n             *\n             * */\n            /**\n             * Triggered on component initialization.\n             * @private\n             */\n            async load() {\n                this.emit({ type: 'load' });\n                await super.load();\n                const connector = this.getFirstConnector();\n                if (connector &&\n                    !this.connectorListeners.length) {\n                    const connectorListeners = this.connectorListeners;\n                    // Reload the store when polling.\n                    connectorListeners.push(connector.on('afterLoad', (e) => {\n                        if (e.table && connector) {\n                            connector.table.setColumns(e.table.getColumns());\n                        }\n                    }));\n                    // Update the DataGrid when connector changed.\n                    connectorListeners.push(connector.table.on('afterSetCell', (e) => {\n                        const dataGrid = this.dataGrid;\n                        let shouldUpdateTheGrid = true;\n                        if (dataGrid) {\n                            const row = dataGrid.rowElements[e.rowIndex];\n                            let cells = [];\n                            if (row) {\n                                cells = Array.prototype.slice.call(row.childNodes);\n                            }\n                            cells.forEach((cell) => {\n                                if (cell.childElementCount > 0) {\n                                    const input = cell.childNodes[0], convertedInputValue = typeof e.cellValue === 'string' ?\n                                        input.value :\n                                        +input.value;\n                                    if (cell.dataset.columnName ===\n                                        e.columnName &&\n                                        convertedInputValue === e.cellValue) {\n                                        shouldUpdateTheGrid = false;\n                                    }\n                                }\n                            });\n                        }\n                        shouldUpdateTheGrid ? this.update({}) : void 0;\n                    }));\n                }\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            /** @private */\n            render() {\n                super.render();\n                if (!this.dataGrid) {\n                    this.dataGrid = this.constructDataGrid();\n                }\n                const connector = this.getFirstConnector();\n                if (connector &&\n                    this.dataGrid &&\n                    this.dataGrid.dataTable.modified !== connector.table.modified) {\n                    this.dataGrid.update({ dataTable: this.filterColumns() });\n                }\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                this.setupConnectorUpdate();\n                return this;\n            }\n            /** @private */\n            resize(width, height) {\n                if (this.dataGrid) {\n                    super.resize(width, height);\n                }\n            }\n            async update(options) {\n                const connectorOptions = Array.isArray(options.connector) ?\n                    options.connector[0] : options.connector;\n                if (this.connectorHandlers[0] &&\n                    connectorOptions?.id !== this.connectorHandlers[0]?.connectorId) {\n                    const connectorListeners = this.connectorListeners;\n                    for (let i = 0, iEnd = connectorListeners.length; i < iEnd; ++i) {\n                        connectorListeners[i]();\n                    }\n                    connectorListeners.length = 0;\n                }\n                await super.update(options);\n                if (this.dataGrid) {\n                    this.dataGrid.update(this.options.dataGridOptions || {});\n                }\n                this.emit({ type: 'afterUpdate' });\n            }\n            /** @private */\n            constructDataGrid() {\n                if (DataGridComponent.DataGridNamespace) {\n                    const DataGrid = DataGridComponent.DataGridNamespace.DataGrid;\n                    const connector = this.getFirstConnector();\n                    const columnOptions = connector ?\n                        this.getColumnOptions(connector) :\n                        {};\n                    this.dataGrid = new DataGrid(this.contentElement, {\n                        ...this.options.dataGridOptions,\n                        dataTable: this.options.dataGridOptions?.dataTable ||\n                            this.filterColumns(),\n                        columns: merge(columnOptions, this.options.dataGridOptions?.columns)\n                    });\n                    return this.dataGrid;\n                }\n                throw new Error('DataGrid not connected.');\n            }\n            setupConnectorUpdate() {\n                const { dataGrid } = this;\n                const connector = this.getFirstConnector();\n                if (connector && dataGrid) {\n                    dataGrid.on('cellClick', (e) => {\n                        if ('input' in e) {\n                            e.input.addEventListener('keyup', (keyEvent) => this.options.onUpdate(keyEvent, connector));\n                        }\n                    });\n                }\n            }\n            /**\n             * Based on the `visibleColumns` option, filter the columns of the table.\n             *\n             * @internal\n             */\n            filterColumns() {\n                const table = this.getFirstConnector()?.table.modified, visibleColumns = this.options.visibleColumns;\n                if (table) {\n                    // Show all columns if no visibleColumns is provided.\n                    if (!visibleColumns?.length) {\n                        return table;\n                    }\n                    const columnsToDelete = table\n                        .getColumnNames()\n                        .filter((columnName) => (visibleColumns?.length > 0 &&\n                        // Don't add columns that are not listed.\n                        !visibleColumns.includes(columnName)\n                    // Else show the other columns.\n                    ));\n                    // On a fresh table clone remove the columns that are not mapped.\n                    const filteredTable = table.clone();\n                    filteredTable.deleteColumns(columnsToDelete);\n                    return filteredTable;\n                }\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'DataGrid'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /** @private */\n            toJSON() {\n                const dataGridOptions = JSON.stringify(this.options.dataGridOptions);\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    options: {\n                        ...base.options,\n                        dataGridOptions\n                    }\n                };\n                this.emit({ type: 'toJSON', json });\n                return json;\n            }\n            /**\n             * Get the DataGrid component's options.\n             * @returns\n             * The JSON of DataGrid component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, DataGridComponent.defaultOptions),\n                    type: 'DataGrid'\n                };\n            }\n            /**\n             * Destroys the data grid component.\n             */\n            destroy() {\n                this.dataGrid?.containerResizeObserver.disconnect();\n                super.destroy();\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Predefined sync config for the DataGrid component.\n         */\n        DataGridComponent.predefinedSyncConfig = DataGridSyncs;\n        /** @private */\n        DataGridComponent.defaultOptions = merge(Component.defaultOptions, DataGridComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/DataGridPlugin.js', [_modules['Dashboards/Components/DataGridComponent/DataGridComponent.js']], function (DataGridComponent) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects DataGrid with the Dashboard plugin.\n         *\n         * @param {Dashboards.DataGrid} dataGrid DataGrid core to connect.\n         */\n        function connectDataGrid(DataGridNS) {\n            DataGridComponent.DataGridNamespace = DataGridNS;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('DataGrid', DataGridComponent);\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e Plugin context provided by the Dashboard.\n         */\n        function onUnregister(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        e) { }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGridCustom = {\n            connectDataGrid\n        };\n        const DataGridPlugin = {\n            custom: DataGridCustom,\n            name: 'DataGrid.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return DataGridPlugin;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsExtremesSync.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, isString } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const cleanupCallbacks = [];\n                const { chart, board } = component;\n                const connector = component.connectorHandlers?.[0]?.connector;\n                const table = connector && connector.table;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { dataCursor: cursor } = board;\n                if (table && chart) {\n                    const extremesEventHandler = (e) => {\n                        const reset = !!e.resetSelection;\n                        if ((!e.trigger || (e.trigger && e.trigger !== 'dashboards-sync')) && !reset) {\n                            // TODO: investigate this type?\n                            const axis = e.target;\n                            const seriesFromConnectorArray = Object.keys(component.seriesFromConnector);\n                            // Prefer a series that's in a related table,\n                            // but allow for other data\n                            const series = seriesFromConnectorArray.length > 0 ?\n                                chart.get(seriesFromConnectorArray[0]) :\n                                axis.series[0];\n                            if (series) {\n                                // Get the indexes of the first and last drawn points\n                                const visiblePoints = series.points.filter((point) => point.isInside || false);\n                                const minCursorData = {\n                                    type: 'position',\n                                    state: `${axis.coll}.extremes.min${groupKey}`\n                                };\n                                const maxCursorData = {\n                                    type: 'position',\n                                    state: `${axis.coll}.extremes.max${groupKey}`\n                                };\n                                if (seriesFromConnectorArray.length > 0 &&\n                                    axis.coll === 'xAxis' &&\n                                    visiblePoints.length) {\n                                    let columnName;\n                                    const columnAssignment = (component.connectorHandlers[0]\n                                        ?.options).columnAssignment;\n                                    if (columnAssignment) {\n                                        const assignment = columnAssignment.find((assignment) => (assignment.seriesId ===\n                                            series.options.id));\n                                        if (assignment) {\n                                            const data = assignment.data;\n                                            if (isString(data)) {\n                                                columnName = data;\n                                            }\n                                            else if (Array.isArray(data)) {\n                                                columnName = data[data.length - 1];\n                                            }\n                                            else {\n                                                columnName = data.y;\n                                            }\n                                        }\n                                    }\n                                    if (!columnName) {\n                                        columnName = axis.dateTime && (table.hasColumns(['x']) ? 'x' :\n                                            series.options.id ?? series.name);\n                                    }\n                                    minCursorData.row = visiblePoints[0].index;\n                                    minCursorData.column = columnName;\n                                    maxCursorData.row =\n                                        visiblePoints[visiblePoints.length - 1].index;\n                                    maxCursorData.column = columnName;\n                                }\n                                // Emit as lasting cursors\n                                cursor.emitCursor(table, minCursorData, e, true).emitCursor(table, maxCursorData, e, true);\n                            }\n                        }\n                    };\n                    const addExtremesEvent = () => chart.axes.map((axis) => addEvent(axis, 'afterSetExtremes', extremesEventHandler));\n                    let addExtremesEventCallbacks = addExtremesEvent();\n                    const resetExtremesEvent = () => {\n                        addExtremesEventCallbacks.forEach((callback) => {\n                            callback();\n                        });\n                        addExtremesEventCallbacks = [];\n                    };\n                    const handleChartResetSelection = (e) => {\n                        if (e.resetSelection) {\n                            resetExtremesEvent();\n                            cursor.emitCursor(table, {\n                                type: 'position',\n                                state: 'chart.zoomOut' + groupKey\n                            }, e);\n                            addExtremesEventCallbacks.push(...addExtremesEvent());\n                        }\n                    };\n                    cleanupCallbacks.push(addEvent(chart, 'selection', handleChartResetSelection));\n                    cleanupCallbacks.push(() => {\n                        cursor.remitCursor(table.id, {\n                            type: 'position',\n                            state: 'xAxis.extremes.min' + groupKey\n                        });\n                        cursor.remitCursor(table.id, {\n                            type: 'position',\n                            state: 'xAxis.extremes.max' + groupKey\n                        });\n                        resetExtremesEvent();\n                    });\n                }\n                // Return cleanup\n                return function () {\n                    // Call back the cleanup callbacks\n                    cleanupCallbacks.forEach((callback) => {\n                        callback();\n                    });\n                };\n            },\n            handler: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { chart, board } = component;\n                if (chart && board && chart.zooming?.type) {\n                    const dimensions = chart.zooming.type.split('')\n                        .map((c) => c + 'Axis');\n                    const unregisterCallbacks = [];\n                    dimensions.forEach((dimension) => {\n                        const handleUpdateExtremes = (e) => {\n                            const { cursor, event } = e;\n                            if (cursor.type === 'position') {\n                                const eventTarget = event?.target;\n                                if (eventTarget && chart) {\n                                    const axes = chart[dimension];\n                                    let didZoom = false;\n                                    axes.forEach((axis) => {\n                                        if (eventTarget.coll === axis.coll &&\n                                            eventTarget !== axis &&\n                                            eventTarget.min !== null &&\n                                            eventTarget.max !== null && (axis.max !== eventTarget.max ||\n                                            axis.min !== eventTarget.min)) {\n                                            axis.setExtremes(eventTarget.min, eventTarget.max, false, void 0, {\n                                                trigger: 'dashboards-sync'\n                                            });\n                                            didZoom = true;\n                                        }\n                                    });\n                                    if (didZoom && !chart.resetZoomButton) {\n                                        chart.showResetZoom();\n                                    }\n                                    chart.redraw();\n                                }\n                            }\n                        };\n                        const addCursorListeners = () => {\n                            const { dataCursor: cursor } = board;\n                            const connector = component.connectorHandlers?.[0]?.connector;\n                            if (connector) {\n                                const { table } = connector;\n                                cursor.addListener(table.id, `${dimension}.extremes.min${groupKey}`, handleUpdateExtremes);\n                                cursor.addListener(table.id, `${dimension}.extremes.max${groupKey}`, handleUpdateExtremes);\n                                const handleChartZoomOut = () => {\n                                    chart.zoomOut();\n                                    setTimeout(() => {\n                                        // Workaround for zoom button not being removed\n                                        const resetZoomButtons = component.element\n                                            .querySelectorAll('.highcharts-reset-zoom');\n                                        resetZoomButtons.forEach((button) => {\n                                            button.remove();\n                                        });\n                                    });\n                                };\n                                cursor.addListener(table.id, 'chart.zoomOut', handleChartZoomOut);\n                                unregisterCallbacks.push(() => {\n                                    cursor.removeListener(table.id, `${dimension}.extremes.min${groupKey}`, handleUpdateExtremes);\n                                    cursor.removeListener(table.id, `${dimension}.extremes.max${groupKey}`, handleUpdateExtremes);\n                                    cursor.removeListener(table.id, 'chart.zoomOut' + groupKey, handleChartZoomOut);\n                                });\n                            }\n                        };\n                        if (board) {\n                            addCursorListeners();\n                        }\n                    });\n                    return function () {\n                        unregisterCallbacks.forEach((callback) => {\n                            callback();\n                        });\n                    };\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsHighlightSync.js', [_modules['Dashboards/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { error } = U;\n        /* *\n        *\n        *  Utility Functions\n        *\n        * */\n        /**\n         * Utility function that returns the first row index\n         * if the table has been modified by a range modifier\n         *\n         * @param {DataTable} table\n         * The table to get the offset from.\n         *\n         * @param {RangeModifierOptions} modifierOptions\n         * The modifier options to use\n         *\n         * @return {number}\n         * The row offset of the modified table.\n         */\n        function getModifiedTableOffset(table, modifierOptions) {\n            const { ranges } = modifierOptions;\n            if (ranges) {\n                const minRange = ranges.reduce((minRange, currentRange) => {\n                    if (currentRange.minValue > minRange.minValue) {\n                        minRange = currentRange;\n                    }\n                    return minRange;\n                }, ranges[0]);\n                const tableRowIndex = table.getRowIndexBy(minRange.column, minRange.minValue);\n                if (tableRowIndex) {\n                    return tableRowIndex;\n                }\n            }\n            return 0;\n        }\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {\n            affectedSeriesId: null,\n            highlightPoint: true,\n            showTooltip: true,\n            showCrosshair: true\n        };\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const { chart, board } = component;\n                const highlightOptions = this.sync.syncConfig.highlight;\n                const groupKey = highlightOptions.group ?\n                    ':' + highlightOptions.group : '';\n                if (!highlightOptions.enabled || !chart) {\n                    return;\n                }\n                const { dataCursor: cursor } = board;\n                for (let i = 0, iEnd = chart.series?.length ?? 0; i < iEnd; ++i) {\n                    const series = chart.series[i];\n                    const seriesId = series.options.id ?? '';\n                    const connectorHandler = component.seriesFromConnector[seriesId];\n                    const table = connectorHandler?.connector?.table;\n                    let columnName;\n                    if (!table) {\n                        continue;\n                    }\n                    const colAssignment = connectorHandler.columnAssignment?.find((s) => s.seriesId === seriesId);\n                    // TODO: Better way to recognize the column name.\n                    if (colAssignment) {\n                        const { data } = colAssignment;\n                        if (typeof data === 'string') {\n                            columnName = data;\n                        }\n                        else if (Array.isArray(data)) {\n                            columnName = data[1];\n                        }\n                        else {\n                            columnName = data.y ?? data.value;\n                        }\n                    }\n                    if (!columnName) {\n                        columnName = series.name;\n                    }\n                    series.update({\n                        point: {\n                            events: {\n                                // Emit table cursor\n                                mouseOver: function () {\n                                    let offset = 0;\n                                    const modifier = table.getModifier();\n                                    if (modifier?.options.type === 'Range') {\n                                        offset = getModifiedTableOffset(table, modifier.options);\n                                    }\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        row: offset + this.index,\n                                        column: columnName,\n                                        state: 'point.mouseOver' + groupKey\n                                    });\n                                },\n                                mouseOut: function () {\n                                    let offset = 0;\n                                    const modifier = table.getModifier();\n                                    if (modifier?.options.type === 'Range') {\n                                        offset = getModifiedTableOffset(table, modifier.options);\n                                    }\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        row: offset + this.index,\n                                        column: columnName,\n                                        state: 'point.mouseOut' + groupKey\n                                    });\n                                }\n                            }\n                        }\n                    }, false);\n                }\n                chart.redraw();\n                // Return function that handles cleanup\n                return function () {\n                    if (chart && chart.series) {\n                        chart.series.forEach((series) => {\n                            series.update({\n                                point: {\n                                    events: {\n                                        mouseOver: void 0,\n                                        mouseOut: void 0\n                                    }\n                                }\n                            }, false);\n                        });\n                        chart.redraw();\n                    }\n                };\n            },\n            handler: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const groupKey = this.sync.syncConfig.highlight.group ?\n                    ':' + this.sync.syncConfig.highlight.group : '';\n                const { chart, board } = component;\n                const getHoveredPoint = (e) => {\n                    const { table, cursor } = e;\n                    const highlightOptions = this.sync\n                        .syncConfig.highlight;\n                    const modifier = table.getModifier();\n                    let offset = 0;\n                    if (modifier && modifier.options.type === 'Range') {\n                        offset = getModifiedTableOffset(table, modifier.options);\n                    }\n                    if (chart && chart.series?.length && cursor.type === 'position') {\n                        let series;\n                        const seriesId = highlightOptions.affectedSeriesId;\n                        if (highlightOptions.affectedSeriesId) {\n                            const foundSeries = chart.get(highlightOptions.affectedSeriesId);\n                            if (foundSeries?.points) {\n                                series = foundSeries;\n                            }\n                            else {\n                                error('No series with ID \\'' + seriesId + '\\' found in ' +\n                                    'the chart. Affected series will be selected ' +\n                                    'according to the column assignment.');\n                            }\n                        }\n                        if (!series) {\n                            const seriesIds = Object.keys(component.seriesFromConnector);\n                            for (let i = 0, iEnd = seriesIds.length; i < iEnd; ++i) {\n                                const seriesId = seriesIds[i];\n                                const connectorHandler = component.seriesFromConnector[seriesId];\n                                if (connectorHandler?.connector?.table !== table) {\n                                    continue;\n                                }\n                                const colAssignment = connectorHandler.columnAssignment;\n                                series = chart.get(seriesId);\n                                if (!colAssignment) {\n                                    break;\n                                }\n                                const { data } = colAssignment.find((s) => s.seriesId === seriesId) ?? {};\n                                if (!data || !cursor.column) {\n                                    break;\n                                }\n                                if (typeof data === 'string') {\n                                    if (data === cursor.column) {\n                                        break;\n                                    }\n                                }\n                                else if (Array.isArray(data)) {\n                                    if (data.includes(cursor.column)) {\n                                        break;\n                                    }\n                                }\n                                else {\n                                    if (Object.keys(data)\n                                        .map((key) => data[key])\n                                        .includes(cursor.column)) {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        if (series?.visible && cursor.row !== void 0) {\n                            const point = series.data[cursor.row - offset];\n                            if (point?.visible) {\n                                return point;\n                            }\n                        }\n                    }\n                };\n                const handleCursor = (e) => {\n                    const highlightOptions = this.sync\n                        .syncConfig.highlight;\n                    if (!highlightOptions.enabled) {\n                        return;\n                    }\n                    const point = getHoveredPoint(e);\n                    if (!point || !chart ||\n                        // Non-cartesian points do not use 'isInside'\n                        (!point.isInside && point.series.isCartesian) ||\n                        // Abort if the affected chart is the same as the one\n                        // that is currently affected manually.\n                        point === chart.hoverPoint) {\n                        return;\n                    }\n                    const tooltip = chart.tooltip;\n                    if (tooltip && highlightOptions.showTooltip) {\n                        const useSharedTooltip = tooltip.shared;\n                        const hoverPoint = chart.hoverPoint;\n                        const hoverSeries = hoverPoint?.series ||\n                            chart.hoverSeries;\n                        const points = chart.pointer?.getHoverData(point, hoverSeries, chart.series, true, true);\n                        if (chart.tooltip && points) {\n                            tooltip.refresh(useSharedTooltip ? points.hoverPoints : point);\n                        }\n                    }\n                    if (highlightOptions.highlightPoint && (\n                    // If the tooltip is shared, the hover state is\n                    // already set on the point.\n                    (!tooltip?.shared && highlightOptions.showTooltip) ||\n                        !highlightOptions.showTooltip)) {\n                        point.setState('hover');\n                    }\n                    if (highlightOptions.showCrosshair) {\n                        point.series.xAxis?.drawCrosshair(void 0, point);\n                        point.series.yAxis?.drawCrosshair(void 0, point);\n                    }\n                };\n                const handleCursorOut = (e) => {\n                    const highlightOptions = this.sync\n                        .syncConfig.highlight;\n                    if (!chart || !chart.series.length ||\n                        !highlightOptions.enabled) {\n                        return;\n                    }\n                    const point = getHoveredPoint(e);\n                    // Abort if the affected chart is the same as the one\n                    // that is currently affected manually.\n                    if (point && (!point.isInside && point.series.isCartesian ||\n                        point === chart.hoverPoint)) {\n                        return;\n                    }\n                    let unhovered = false;\n                    const unhoverAllPoints = () => {\n                        // If the 'row' parameter is missing in the event\n                        // object, the unhovered point cannot be identified.\n                        const series = chart.series;\n                        const seriesLength = series.length;\n                        for (let i = 0; i < seriesLength; i++) {\n                            const points = chart.series[i].points;\n                            const pointsLength = points.length;\n                            for (let j = 0; j < pointsLength; j++) {\n                                points[j].setState();\n                            }\n                        }\n                    };\n                    const tooltip = chart.tooltip;\n                    if (tooltip && highlightOptions.showTooltip) {\n                        tooltip.hide();\n                        // Shared tooltip refresh always hovers points, so it's\n                        // important to unhover all points on cursor out.\n                        if (tooltip.shared) {\n                            unhoverAllPoints();\n                            unhovered = true;\n                        }\n                    }\n                    if (highlightOptions.highlightPoint && !unhovered) {\n                        if (point) {\n                            point.setState();\n                        }\n                        else {\n                            unhoverAllPoints();\n                        }\n                    }\n                    if (highlightOptions.showCrosshair) {\n                        if (point) {\n                            point.series.xAxis?.drawCrosshair();\n                            point.series.yAxis?.drawCrosshair();\n                        }\n                        else {\n                            // If the 'row' parameter is missing in the event\n                            // object, the unhovered point cannot be identified.\n                            const xAxes = chart.xAxis;\n                            const yAxes = chart.yAxis;\n                            for (let i = 0, l = xAxes.length; i < l; i++) {\n                                xAxes[i].drawCrosshair();\n                            }\n                            for (let i = 0, l = yAxes.length; i < l; i++) {\n                                yAxes[i].drawCrosshair();\n                            }\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    const { connectorHandlers } = this;\n                    if (!cursor) {\n                        return;\n                    }\n                    for (let i = 0, iEnd = connectorHandlers.length; i < iEnd; ++i) {\n                        const table = connectorHandlers[i]?.connector?.table;\n                        if (!table) {\n                            continue;\n                        }\n                        cursor.addListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                        cursor.addListener(table.id, 'dataGrid.hoverRow' + groupKey, handleCursor);\n                        cursor.addListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                        cursor.addListener(table.id, 'dataGrid.hoverOut' + groupKey, handleCursorOut);\n                    }\n                };\n                const unregisterCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    const { connectorHandlers } = this;\n                    if (!cursor) {\n                        return;\n                    }\n                    for (let i = 0, iEnd = connectorHandlers.length; i < iEnd; ++i) {\n                        const table = connectorHandlers[i]?.connector?.table;\n                        if (!table) {\n                            continue;\n                        }\n                        cursor.removeListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                        cursor.removeListener(table.id, 'dataGrid.hoverRow' + groupKey, handleCursor);\n                        cursor.removeListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                        cursor.removeListener(table.id, 'dataGrid.hoverOut' + groupKey, handleCursorOut);\n                    }\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsVisibilitySync.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.visibility;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const { chart, board } = component;\n                const connector = this.getFirstConnector();\n                if (!board || !chart) {\n                    return;\n                }\n                const table = connector?.table;\n                if (table) { // Has a connector\n                    const { dataCursor: cursor } = board;\n                    const { series } = chart;\n                    series.forEach((series) => {\n                        series.update({\n                            events: {\n                                show: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        state: 'series.show' + groupKey,\n                                        column: this.name\n                                    });\n                                },\n                                hide: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        state: 'series.hide' + groupKey,\n                                        column: this.name\n                                    });\n                                }\n                            }\n                        }, false);\n                    });\n                    chart.redraw();\n                }\n                return function () {\n                    if (!chart || !chart.series?.length) {\n                        return;\n                    }\n                    chart.series.forEach((series) => {\n                        series.update({\n                            events: {\n                                show: void 0,\n                                hide: void 0\n                            }\n                        }, false);\n                    });\n                    chart.redraw();\n                };\n            },\n            handler: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.visibility;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const { board } = component;\n                const findSeries = (seriesArray, name) => {\n                    for (const series of seriesArray) {\n                        if (series.name === name) {\n                            return series;\n                        }\n                    }\n                };\n                const handleShow = (e) => {\n                    const chart = component.chart;\n                    if (!chart || !chart.series?.length) {\n                        return;\n                    }\n                    if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                        const series = findSeries(chart.series, e.cursor.column);\n                        if (series) {\n                            series.setVisible(true, true);\n                        }\n                    }\n                };\n                const handleHide = (e) => {\n                    const chart = component.chart;\n                    if (!chart || !chart.series?.length) {\n                        return;\n                    }\n                    if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                        const series = findSeries(chart.series, e.cursor.column);\n                        if (series) {\n                            series.setVisible(false, true);\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor } = board;\n                    if (!dataCursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    dataCursor.addListener(table.id, 'series.show' + groupKey, handleShow);\n                    dataCursor.addListener(table.id, 'series.hide' + groupKey, handleHide);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (table) {\n                        board.dataCursor.removeListener(table.id, 'series.show' + groupKey, handleShow);\n                        board.dataCursor.removeListener(table.id, 'series.hide' + groupKey, handleHide);\n                    }\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsSyncs.js', [_modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsExtremesSync.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsHighlightSync.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsVisibilitySync.js']], function (HighchartsExtremesSync, HighchartsHighlightSync, HighchartsVisibilitySync) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                extremes: HighchartsExtremesSync.syncPair,\n                highlight: HighchartsHighlightSync.syncPair,\n                visibility: HighchartsVisibilitySync.syncPair\n            },\n            defaultSyncOptions: {\n                extremes: HighchartsExtremesSync.defaultOptions,\n                highlight: HighchartsHighlightSync.defaultOptions,\n                visibility: HighchartsVisibilitySync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsComponentDefaults.js', [_modules['Dashboards/Components/Component.js'], _modules['Core/Utilities.js']], function (Component, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const HighchartsComponentDefaults = {\n            allowConnectorUpdate: true,\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-highcharts`\n            ].join(' '),\n            chartClassName: 'chart-container',\n            chartID: 'chart-' + uniqueKey(),\n            chartOptions: {\n                chart: {\n                    styledMode: true\n                },\n                series: []\n            },\n            chartConstructor: 'chart',\n            editableOptions: [\n                {\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                },\n                ...Component.defaultOptions.editableOptions || [],\n                {\n                    name: 'chartOptions',\n                    type: 'nested',\n                    nestedOptions: [{\n                            name: 'chart',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'subtitle',\n                                    propertyPath: ['chartOptions', 'subtitle', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'chart', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'column',\n                                            iconURL: 'series-types/icon-column.svg'\n                                        }, {\n                                            name: 'line',\n                                            iconURL: 'series-types/icon-line.svg'\n                                        }, {\n                                            name: 'scatter',\n                                            iconURL: 'series-types/icon-scatter.svg'\n                                        }, {\n                                            name: 'pie',\n                                            iconURL: 'series-types/icon-pie.svg'\n                                        }]\n                                }]\n                        }, {\n                            name: 'xAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'xAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'xAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'yAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'yAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'yAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'legend',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'legend', 'enabled'],\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: ['chartOptions', 'legend', 'align'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'tooltip',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'tooltip', 'enabled'],\n                            options: [{\n                                    name: 'split',\n                                    propertyPath: ['chartOptions', 'tooltip', 'split'],\n                                    type: 'toggle'\n                                }]\n                        }, {\n                            name: 'dataLabels',\n                            propertyPath: [\n                                'chartOptions',\n                                'plotOptions',\n                                'series',\n                                'dataLabels',\n                                'enabled'\n                            ],\n                            showToggle: true,\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'plotOptions',\n                                        'series',\n                                        'dataLabels',\n                                        'align'\n                                    ],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'credits',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'credits', 'enabled'],\n                            options: [{\n                                    name: 'name',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'text'\n                                    ],\n                                    type: 'input'\n                                }, {\n                                    name: 'url',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'href'\n                                    ],\n                                    type: 'input'\n                                }]\n                        }]\n                }, {\n                    name: 'chartConfig',\n                    propertyPath: ['chartOptions'],\n                    type: 'textarea'\n                }, {\n                    name: 'chartClassName',\n                    propertyPath: ['chartClassName'],\n                    type: 'input'\n                }, {\n                    name: 'chartID',\n                    propertyPath: ['chartID'],\n                    type: 'input'\n                }\n            ],\n            editableOptionsBindings: merge(Component.defaultOptions.editableOptionsBindings, {\n                skipRedraw: [\n                    'chartOptions',\n                    'chartConfig'\n                ]\n            })\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HighchartsComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsSyncs.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsComponentDefaults.js'], _modules['Core/Utilities.js']], function (Component, DataConverter, DataTable, Globals, HighchartsSyncs, HighchartsComponentDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sebastian Bochan\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, diffObjects, isString, merge, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a Highcharts component.\n         *\n         */\n        class HighchartsComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the Highcharts component.\n             *\n             * @returns\n             * Highcharts component based on config from JSON.\n             *\n             * @private\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const chartOptions = JSON.parse(json.options.chartOptions || '{}');\n                /// const store = json.store ? DataJSON.fromJSON(json.store) : void 0;\n                const component = new HighchartsComponent(cell, merge(options, {\n                    chartOptions\n                    // Highcharts, // TODO: Find a solution\n                    // store: store instanceof DataConnector ? store : void 0\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a Highcharts component in the cell.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                options = merge(HighchartsComponent.defaultOptions, options);\n                super(cell, options, board);\n                /**\n                 * An object of series IDs and their connector handlers.\n                 */\n                this.seriesFromConnector = {};\n                this.options = options;\n                this.chartConstructor = this.options.chartConstructor || 'chart';\n                this.type = 'Highcharts';\n                this.chartContainer = createElement('figure', void 0, void 0, this.contentElement, true);\n                this.setOptions();\n                this.chartOptions = merge((this.options.chartOptions ||\n                    { chart: {} }), {\n                    tooltip: {} // Temporary fix for #18876\n                });\n                for (const connectorHandler of this.connectorHandlers) {\n                    const connector = connectorHandler.connector;\n                    if (connector) {\n                        connector.on('afterLoad', (e) => {\n                            if (e.table) {\n                                connector.table.setColumns(e.table.getColumns());\n                            }\n                        });\n                    }\n                }\n                this.innerResizeTimeouts = [];\n            }\n            onTableChanged() {\n                this.updateSeries();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            async load() {\n                this.emit({ type: 'load' });\n                await super.load();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            render() {\n                const hcComponent = this;\n                super.render();\n                hcComponent.chart = hcComponent.getChart();\n                hcComponent.updateSeries();\n                hcComponent.emit({ type: 'afterRender' });\n                hcComponent.setupConnectorUpdate();\n                this.sync.start();\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                while (this.innerResizeTimeouts.length) {\n                    const timeoutID = this.innerResizeTimeouts.pop();\n                    if (timeoutID) {\n                        clearTimeout(timeoutID);\n                    }\n                }\n                this.innerResizeTimeouts.push(setTimeout(() => {\n                    if (this.chart && this.chart.container) {\n                        const heightOffset = this.contentElement.offsetHeight -\n                            this.chart?.container.offsetHeight;\n                        this.chart.setSize(null, (Math.abs(heightOffset) > 1) ?\n                            this.contentElement.offsetHeight : null, false);\n                    }\n                }, 33));\n                return this;\n            }\n            /**\n             * Adds call update value in store, when chart's point is updated.\n             *\n             * @private\n             * */\n            setupConnectorUpdate() {\n                const { connectorHandlers, chart } = this;\n                if (!chart || !this.options.allowConnectorUpdate) {\n                    return;\n                }\n                const seriesLength = chart.series.length;\n                for (let i = 0, iEnd = connectorHandlers.length; i < iEnd; i++) {\n                    const connectorHandler = connectorHandlers[i];\n                    for (let j = 0; j < seriesLength; j++) {\n                        const series = chart.series[j];\n                        series.update({\n                            point: {\n                                events: {\n                                    update: (e) => {\n                                        this.onChartUpdate(e.target, connectorHandler);\n                                    }\n                                }\n                            }\n                        }, false);\n                    }\n                }\n            }\n            /**\n             * Update the store, when the point is being dragged.\n             * @param point Dragged point.\n             * @param connectorHandler Connector handler with data to update.\n             */\n            onChartUpdate(point, connectorHandler) {\n                const table = connectorHandler.connector?.table;\n                const columnAssignment = connectorHandler.columnAssignment;\n                const seriesId = point.series.options.id;\n                const converter = new DataConverter();\n                const valueToSet = converter.asNumber(point.y);\n                if (!table) {\n                    return;\n                }\n                let columnName;\n                if (columnAssignment && seriesId) {\n                    const data = columnAssignment.find((s) => s.seriesId === seriesId)?.data;\n                    if (isString(data)) {\n                        columnName = data;\n                    }\n                    else if (Array.isArray(data)) {\n                        columnName = data[1];\n                    }\n                    else if (data) {\n                        columnName = data.y ?? data.value;\n                    }\n                }\n                if (!columnName) {\n                    columnName = seriesId ?? point.series.name;\n                }\n                table.setCell(columnName, point.index, valueToSet);\n            }\n            /**\n             * Internal method for handling option updates.\n             *\n             * @internal\n             */\n            setOptions() {\n                if (this.options.chartClassName) {\n                    this.chartContainer.classList.add(this.options.chartClassName);\n                }\n                if (this.options.chartID) {\n                    this.chartContainer.id = this.options.chartID;\n                }\n            }\n            /**\n             * Handles updating via options.\n             * @param options\n             * The options to apply.\n             *\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options, false);\n                this.setOptions();\n                if (this.chart) {\n                    this.chart.update(merge(this.options.chartOptions) || {});\n                }\n                this.emit({ type: 'afterUpdate' });\n                shouldRerender && this.render();\n            }\n            /**\n             * Updates chart's series when the data table is changed.\n             * @private\n             */\n            updateSeries() {\n                const { chart } = this;\n                const connectorHandlers = this.connectorHandlers;\n                if (!chart) {\n                    return;\n                }\n                const newSeriesIds = [];\n                for (const connectorHandler of connectorHandlers) {\n                    const options = connectorHandler.options;\n                    let columnAssignment = options.columnAssignment;\n                    if (!columnAssignment && connectorHandler.presentationTable) {\n                        columnAssignment = this.getDefaultColumnAssignment(connectorHandler.presentationTable.getColumnNames(), connectorHandler.presentationTable);\n                    }\n                    if (columnAssignment) {\n                        connectorHandler.columnAssignment = columnAssignment;\n                        for (const { seriesId } of columnAssignment) {\n                            if (seriesId) {\n                                newSeriesIds.push(seriesId);\n                            }\n                        }\n                    }\n                }\n                const seriesArray = Object.keys(this.seriesFromConnector);\n                // Remove series that were added in the previous update and are not\n                // present in the new columnAssignment.\n                for (let i = 0, iEnd = seriesArray.length; i < iEnd; ++i) {\n                    const oldSeriesId = seriesArray[i];\n                    if (newSeriesIds.some((newSeriesId) => newSeriesId === oldSeriesId)) {\n                        continue;\n                    }\n                    const series = chart.get(oldSeriesId);\n                    if (series) {\n                        series.destroy();\n                    }\n                }\n                this.seriesFromConnector = {};\n                for (const connectorHandler of connectorHandlers) {\n                    this.updateSeriesFromConnector(connectorHandler);\n                }\n                chart.redraw();\n            }\n            /**\n             * Updates the series based on the connector from each connector handler.\n             * @param connectorHandler The connector handler.\n             * @private\n             */\n            updateSeriesFromConnector(connectorHandler) {\n                const chart = this.chart;\n                if (!connectorHandler.connector ||\n                    !chart ||\n                    !connectorHandler.presentationTable) {\n                    return;\n                }\n                const table = connectorHandler.presentationTable.modified;\n                const modifierOptions = connectorHandler.presentationTable.getModifier()?.options;\n                const columnAssignment = connectorHandler.columnAssignment ?? [];\n                // Create the series or update the existing ones.\n                for (let i = 0, iEnd = columnAssignment.length; i < iEnd; ++i) {\n                    const assignment = columnAssignment[i];\n                    const dataStructure = assignment.data;\n                    const series = chart.get(assignment.seriesId);\n                    const seriesOptions = {};\n                    // Prevent dragging on series, which were created out of a\n                    // columns which are created by MathModifier.\n                    const adjustDraggableOptions = (compare) => {\n                        if (modifierOptions?.type === 'Math' &&\n                            modifierOptions\n                                .columnFormulas?.some((formula) => compare(formula.column))) {\n                            seriesOptions.dragDrop = {\n                                draggableY: false\n                            };\n                        }\n                    };\n                    // Set the series data based on the column assignment data structure\n                    // type.\n                    if (isString(dataStructure)) {\n                        const column = table.getColumn(dataStructure);\n                        if (column) {\n                            seriesOptions.data = column.slice();\n                        }\n                        adjustDraggableOptions((columnName) => (columnName === dataStructure));\n                    }\n                    else if (Array.isArray(dataStructure)) {\n                        const seriesTable = new DataTable({\n                            columns: table.getColumns(dataStructure)\n                        });\n                        seriesOptions.data = seriesTable.getRows();\n                        adjustDraggableOptions((columnName) => (dataStructure.some((name) => name === columnName)));\n                    }\n                    else {\n                        const keys = Object.keys(dataStructure);\n                        const columnNames = [];\n                        for (let j = 0, jEnd = keys.length; j < jEnd; ++j) {\n                            columnNames.push(dataStructure[keys[j]]);\n                        }\n                        const seriesTable = new DataTable({\n                            columns: table.getColumns(columnNames)\n                        });\n                        seriesOptions.keys = keys;\n                        seriesOptions.data = seriesTable.getRows();\n                        adjustDraggableOptions((columnName) => (columnNames.some((name) => name === columnName)));\n                    }\n                    if (!series) {\n                        chart.addSeries({\n                            name: assignment.seriesId,\n                            id: assignment.seriesId,\n                            ...seriesOptions\n                        }, false);\n                    }\n                    else {\n                        series.update(seriesOptions, false);\n                    }\n                    this.seriesFromConnector[assignment.seriesId] = connectorHandler;\n                }\n            }\n            /**\n             * Destroy chart and create a new one.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            getChart() {\n                return this.chart || this.createChart();\n            }\n            /**\n             * Destroys the highcharts component.\n             */\n            destroy() {\n                // Cleanup references in the global Highcharts scope\n                this.chart?.destroy();\n                super.destroy();\n            }\n            /**\n             * Creates default mapping when columnAssignment is not declared.\n             * @param  { Array<string>} columnNames all columns returned from dataTable.\n             *\n             * @returns\n             * The record of mapping\n             *\n             * @private\n             *\n             */\n            getDefaultColumnAssignment(columnNames = [], presentationTable) {\n                const result = [];\n                const firstColumn = presentationTable.getColumn(columnNames[0]);\n                if (firstColumn && isString(firstColumn[0])) {\n                    for (let i = 1, iEnd = columnNames.length; i < iEnd; ++i) {\n                        result.push({\n                            seriesId: columnNames[i],\n                            data: [columnNames[0], columnNames[i]]\n                        });\n                    }\n                    return result;\n                }\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    result.push({\n                        seriesId: columnNames[i],\n                        data: columnNames[i]\n                    });\n                }\n                return result;\n            }\n            /**\n             * Creates chart.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            createChart() {\n                const charter = HighchartsComponent.charter || Globals.win.Highcharts;\n                if (!this.chartConstructor) {\n                    this.chartConstructor = 'chart';\n                }\n                const Factory = charter[this.chartConstructor];\n                if (Factory) {\n                    try {\n                        if (this.chartConstructor === 'chart') {\n                            return charter.Chart.chart(this.chartContainer, this.chartOptions);\n                        }\n                        return new Factory(this.chartContainer, this.chartOptions);\n                    }\n                    catch (e) {\n                        throw new Error(`The Highcharts component in cell '${this.cell.id}' is misconfigured. \\n____________\\n${e}`);\n                    }\n                }\n                if (typeof charter.chart !== 'function') {\n                    throw new Error('Chart constructor not found');\n                }\n                return this.chart;\n            }\n            /**\n             * Registers events from the chart options to the callback register.\n             *\n             * @private\n             */\n            registerChartEvents() {\n                if (this.chart && this.chart.options) {\n                    const options = this.chart.options;\n                    const allEvents = [\n                        'chart',\n                        'series',\n                        'yAxis',\n                        'xAxis',\n                        'colorAxis',\n                        'annotations',\n                        'navigation'\n                    ].map((optionKey) => {\n                        let seriesOrAxisOptions = options[optionKey] || {};\n                        if (!Array.isArray(seriesOrAxisOptions) &&\n                            seriesOrAxisOptions.events) {\n                            seriesOrAxisOptions = [seriesOrAxisOptions];\n                        }\n                        if (seriesOrAxisOptions &&\n                            typeof seriesOrAxisOptions === 'object' &&\n                            Array.isArray(seriesOrAxisOptions)) {\n                            return seriesOrAxisOptions.reduce((acc, seriesOrAxis, i) => {\n                                if (seriesOrAxis && seriesOrAxis.events) {\n                                    acc[seriesOrAxis.id || `${optionKey}-${i}`] = seriesOrAxis.events;\n                                }\n                                return acc;\n                            }, {}) || {};\n                        }\n                        return {};\n                    });\n                    allEvents.forEach((options) => {\n                        Object.keys(options).forEach((key) => {\n                            const events = options[key];\n                            Object.keys(events).forEach((callbackKey) => {\n                                this.callbackRegistry.addCallback(`${key}-${callbackKey}`, {\n                                    type: 'seriesEvent',\n                                    func: events[callbackKey]\n                                });\n                            });\n                        });\n                    });\n                }\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'Highcharts',\n                    chartOptions: {\n                        chart: {\n                            animation: false,\n                            type: 'column',\n                            zooming: {}\n                        }\n                    }\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @private\n             */\n            toJSON() {\n                const chartOptions = JSON.stringify(this.options.chartOptions), chartConstructor = this.options.chartConstructor || 'chart';\n                this.registerChartEvents();\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    type: 'Highcharts',\n                    options: {\n                        ...base.options,\n                        chartOptions,\n                        chartConstructor,\n                        // TODO: may need to handle callback functions\n                        // Maybe have a sync.toJSON()\n                        type: 'Highcharts',\n                        sync: {}\n                    }\n                };\n                this.emit({ type: 'toJSON', json });\n                return json;\n            }\n            /**\n             * Get the HighchartsComponent component's options.\n             * @returns\n             * The JSON of HighchartsComponent component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HighchartsComponent.defaultOptions),\n                    type: 'Highcharts'\n                };\n            }\n            /**\n             * Retrieves editable options for the chart.\n             *\n             * @returns\n             * The editable options for the chart and its values.\n             */\n            getEditableOptions() {\n                const component = this;\n                const componentOptions = component.options;\n                const chart = component.chart;\n                const chartOptions = chart && chart.options;\n                const chartType = chartOptions?.chart?.type || 'line';\n                return merge({\n                    chartOptions\n                }, {\n                    chartOptions: {\n                        yAxis: splat(chart && chart.yAxis[0].options),\n                        xAxis: splat(chart && chart.xAxis[0].options),\n                        plotOptions: {\n                            series: ((chartOptions && chartOptions.plotOptions) ||\n                                {})[chartType]\n                        }\n                    }\n                }, componentOptions);\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                if (propertyPath.length === 1 && propertyPath[0] === 'chartOptions') {\n                    return JSON.stringify(component.options.chartOptions, null, 2);\n                }\n                return super.getEditableOptionValue.call(this, propertyPath);\n            }\n        }\n        /**\n         * Predefined sync config for Highcharts component.\n         */\n        HighchartsComponent.predefinedSyncConfig = HighchartsSyncs;\n        /**\n         * Default options of the Highcharts component.\n         */\n        HighchartsComponent.defaultOptions = merge(Component.defaultOptions, HighchartsComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HighchartsComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPISyncs/KPIExtremesSync.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: void 0,\n            handler: function () {\n                if (this.type !== 'KPI') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const { board } = this;\n                const handleChangeExtremes = (e) => {\n                    const cursor = e.cursor;\n                    if (cursor.type === 'position' &&\n                        typeof cursor?.row === 'number' &&\n                        defined(cursor.column) &&\n                        component.connectorHandlers?.[0]?.connector &&\n                        !defined(component.options.value)) {\n                        const value = component.connectorHandlers[0].connector\n                            .table.modified.getCellAsString(cursor.column, cursor.row);\n                        component.setValue(value);\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = this.getFirstConnector()?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'xAxis.extremes.max' + groupKey, handleChangeExtremes);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = this.getFirstConnector()?.table;\n                    const { dataCursor: cursor } = board;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'xAxis.extremes.max' + groupKey, handleChangeExtremes);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPISyncs/KPISyncs.js', [_modules['Dashboards/Components/KPIComponent/KPISyncs/KPIExtremesSync.js']], function (KPIExtremesSync) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                extremes: KPIExtremesSync.syncPair\n            },\n            defaultSyncOptions: {\n                extremes: KPIExtremesSync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPIComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const KPIComponentDefaults = {\n            type: 'KPI',\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-kpi`\n            ].join(' '),\n            minFontSize: 20,\n            thresholdColors: ['#f45b5b', '#90ed7d'],\n            editableOptions: [\n                {\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                },\n                ...Component.defaultOptions.editableOptions || [],\n                {\n                    name: 'Value',\n                    type: 'input',\n                    propertyPath: ['value']\n                }, {\n                    name: 'Column name',\n                    type: 'input',\n                    propertyPath: ['columnName']\n                }, {\n                    name: 'Value format',\n                    type: 'input',\n                    propertyPath: ['valueFormat']\n                }\n            ],\n            linkedValueTo: {\n                enabled: true,\n                seriesIndex: 0,\n                pointIndex: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return KPIComponentDefaults;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * General options for the chart.\n         *\n         * @optionparent chart\n         */\n        const ChartDefaults = {\n            /**\n             * Default `mapData` for all series, in terms of a GeoJSON or TopoJSON\n             * object. If set to a string, it functions as an index into the\n             * `Highcharts.maps` array.\n             *\n             * For picking out individual shapes and geometries to use for each series\n             * of the map, see [series.mapData](#series.map.mapData).\n             *\n             * @sample    maps/demo/geojson\n             *            Loading GeoJSON data\n             * @sample    maps/chart/topojson\n             *            Loading TopoJSON data\n             *\n             * @type      {string|Array<*>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.map\n             */\n            /**\n             * Set lat/lon transformation definitions for the chart. If not defined,\n             * these are extracted from the map data.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.mapTransforms\n             */\n            /**\n             * When using multiple axes, the ticks of two or more opposite axes\n             * will automatically be aligned by adding ticks to the axis or axes\n             * with the least ticks, as if `tickAmount` were specified.\n             *\n             * This can be prevented by setting `alignTicks` to false. If the grid\n             * lines look messy, it's a good idea to hide them for the secondary\n             * axis by setting `gridLineWidth` to 0.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false,\n             * then the `alignTicks ` will be disabled for the axis.\n             *\n             * Disabled for logarithmic axes.\n             *\n             * @sample {highcharts} highcharts/chart/alignticks-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/alignticks-false/\n             *         False\n             * @sample {highstock} stock/chart/alignticks-true/\n             *         True by default\n             * @sample {highstock} stock/chart/alignticks-false/\n             *         False\n             *\n             * @type      {boolean}\n             * @default   true\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignTicks\n             */\n            /**\n             * When using multiple axes, align the thresholds. When this is true, other\n             * ticks will also be aligned.\n             *\n             * Note that for line series and some other series types, the `threshold`\n             * option is set to `null` by default. This will in turn cause their y-axis\n             * to not have a threshold. In order to avoid that, set the series\n             * `threshold` to 0 or another number.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false, or\n             * if the axis is logarithmic, the threshold will not be aligned.\n             *\n             * @sample {highcharts} highcharts/chart/alignthresholds/ Set to true\n             *\n             * @since 10.0.0\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignThresholds\n             */\n            alignThresholds: false,\n            /**\n             * Set the overall animation for all chart updating. Animation can be\n             * disabled throughout the chart by setting it to false here. It can\n             * be overridden for each individual API method as a function parameter.\n             * The only animation not affected by this option is the initial series\n             * animation, see [plotOptions.series.animation](\n             * #plotOptions.series.animation).\n             *\n             * The animation can either be set as a boolean or a configuration\n             * object. If `true`, it will use the 'swing' jQuery easing and a\n             * duration of 500 ms. If used as a configuration object, the following\n             * properties are supported:\n             *\n             * - `defer`: The animation delay time in milliseconds.\n             *\n             * - `duration`: The duration of the animation in milliseconds.\n             *\n             * - `easing`: A string reference to an easing function set on the\n             *   `Math` object. See\n             *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n             *\n             * When zooming on a series with less than 100 points, the chart redraw\n             * will be done with animation, but in case of more data points, it is\n             * necessary to set this option to ensure animation on zoom.\n             *\n             * @sample {highcharts} highcharts/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highcharts} highcharts/chart/animation-duration/\n             *         With a longer duration\n             * @sample {highcharts} highcharts/chart/animation-easing/\n             *         With a jQuery UI easing\n             * @sample {highmaps} maps/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highmaps} maps/chart/animation-duration/\n             *         With a longer duration\n             *\n             * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @default   true\n             * @apioption chart.animation\n             */\n            /**\n             * A CSS class name to apply to the charts container `div`, allowing\n             * unique CSS styling for each chart.\n             *\n             * @type      {string}\n             * @apioption chart.className\n             */\n            /**\n             * Event listeners for the chart.\n             *\n             * @apioption chart.events\n             */\n            /**\n             * Fires when a series is added to the chart after load time, using the\n             * `addSeries` method. One parameter, `event`, is passed to the\n             * function, containing common event information. Through\n             * `event.options` you can access the series options that were passed to\n             * the `addSeries` method. Returning false prevents the series from\n             * being added.\n             *\n             * @sample {highcharts} highcharts/chart/events-addseries/\n             *         Alert on add series\n             * @sample {highstock} stock/chart/events-addseries/\n             *         Alert on add series\n             *\n             * @type      {Highcharts.ChartAddSeriesCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.addSeries\n             */\n            /**\n             * Fires when clicking on the plot background. One parameter, `event`,\n             * is passed to the function, containing common event information.\n             *\n             * Information on the clicked spot can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' value at the clicked spot. The primary axes\n             * are `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * click: function(e) {\n             *     console.log(\n             *         Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n             *         e.yAxis[0].value\n             *     )\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highcharts} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highstock} stock/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highstock} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highmaps} maps/chart/events-click/\n             *         Record coordinates on click\n             * @sample {highmaps} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             *\n             * @type      {Highcharts.ChartClickCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.click\n             */\n            /**\n             * Fires when the chart is finished loading. Since v4.2.2, it also waits\n             * for images to be loaded, for example from point markers. One\n             * parameter, `event`, is passed to the function, containing common\n             * event information.\n             *\n             * There is also a second parameter to the chart constructor where a\n             * callback function can be passed to be executed on chart.load.\n             *\n             * @sample {highcharts} highcharts/chart/events-load/\n             *         Alert on chart load\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-load/\n             *         Alert on chart load\n             * @sample {highmaps} maps/chart/events-load/\n             *         Add series on chart load\n             *\n             * @type      {Highcharts.ChartLoadCallbackFunction}\n             * @context   Highcharts.Chart\n             * @apioption chart.events.load\n             */\n            /**\n             * Fires when the chart is redrawn, either after a call to\n             * `chart.redraw()` or after an axis, series or point is modified with\n             * the `redraw` option set to `true`. One parameter, `event`, is passed\n             * to the function, containing common event information.\n             *\n             * @sample {highcharts} highcharts/chart/events-redraw/\n             *         Alert on chart redraw\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-redraw/\n             *         Alert on chart redraw when adding a series or moving the\n             *         zoomed range\n             * @sample {highmaps} maps/chart/events-redraw/\n             *         Set subtitle on chart redraw\n             *\n             * @type      {Highcharts.ChartRedrawCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.redraw\n             */\n            /**\n             * Fires after initial load of the chart (directly after the `load`\n             * event), and after each redraw (directly after the `redraw` event).\n             *\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             *\n             * @type      {Highcharts.ChartRenderCallbackFunction}\n             * @since     5.0.7\n             * @context   Highcharts.Chart\n             * @apioption chart.events.render\n             */\n            /**\n             * Fires when an area of the chart has been selected. Selection is\n             * enabled by setting the chart's zoomType. One parameter, `event`, is\n             * passed to the function, containing common event information. The\n             * default action for the selection event is to zoom the chart to the\n             * selected area. It can be prevented by calling\n             * `event.preventDefault()` or return false.\n             *\n             * Information on the selected area can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' min and max values. The primary axes are\n             * `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * selection: function(event) {\n             *     // log the min and max of the primary, datetime x-axis\n             *     console.log(\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].min\n             *         ),\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].max\n             *         )\n             *     );\n             *     // log the min and max of the y axis\n             *     console.log(event.yAxis[0].min, event.yAxis[0].max);\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highcharts} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample {highstock} stock/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highstock} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             *         (Highcharts)\n             *\n             * @type      {Highcharts.ChartSelectionCallbackFunction}\n             * @apioption chart.events.selection\n             */\n            /**\n             * The margin between the outer edge of the chart and the plot area.\n             * The numbers in the array designate top, right, bottom and left\n             * respectively. Use the options `marginTop`, `marginRight`,\n             * `marginBottom` and `marginLeft` for shorthand setting of one option.\n             *\n             * By default there is no margin. The actual space is dynamically\n             * calculated from the offset of axis labels, axis title, title,\n             * subtitle and legend in addition to the `spacingTop`, `spacingRight`,\n             * `spacingBottom` and `spacingLeft` options.\n             *\n             * @sample {highcharts} highcharts/chart/margins-zero/\n             *         Zero margins\n             * @sample {highstock} stock/chart/margin-zero/\n             *         Zero margins\n             *\n             * @type      {number|Array<number>}\n             * @apioption chart.margin\n             */\n            /**\n             * The margin between the bottom outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingBottom`.\n             *\n             * @sample {highcharts} highcharts/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highstock} stock/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginBottom\n             */\n            /**\n             * The margin between the left outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingLeft`.\n             *\n             * @sample {highcharts} highcharts/chart/marginleft/\n             *         150px left margin\n             * @sample {highstock} stock/chart/marginleft/\n             *         150px left margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginLeft\n             */\n            /**\n             * The margin between the right outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingRight`.\n             *\n             * @sample {highcharts} highcharts/chart/marginright/\n             *         100px right margin\n             * @sample {highstock} stock/chart/marginright/\n             *         100px right margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginRight\n             */\n            /**\n             * The margin between the top outer edge of the chart and the plot area.\n             * Use this to set a fixed pixel value for the margin as opposed to\n             * the default dynamic margin. See also `spacingTop`.\n             *\n             * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n             * @sample {highstock} stock/chart/margintop/\n             *         100px top margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginTop\n             */\n            /**\n             * Callback function to override the default function that formats all\n             * the numbers in the chart. Returns a string with the formatted number.\n             *\n             * @sample highcharts/members/highcharts-numberformat\n             *      Arabic digits in Highcharts\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             * @since 8.0.0\n             * @apioption chart.numberFormatter\n             */\n            /**\n             * When a chart with an x and a y-axis is rendered, we first pre-render the\n             * labels of both in order to measure them. Then, if either of the axis\n             * labels take up so much space that it significantly affects the length of\n             * the other axis, we repeat the process.\n             *\n             * By default we stop at two axis layout runs, but it may be that the second\n             * run also alter the space required by either axis, for example if it\n             * causes the labels to rotate. In this situation, a subsequent redraw of\n             * the chart may cause the tick and label placement to change for apparently\n             * no reason.\n             *\n             * Use the `axisLayoutRuns` option to set the maximum allowed number of\n             * repetitions. But keep in mind that the default value of 2 is set because\n             * every run costs performance time.\n             *\n             * **Note:** Changing that option to higher than the default might decrease\n             * performance significantly, especially with bigger sets of data.\n             *\n             * @type      {number}\n             * @default   2\n             * @since     11.3.0\n             * @apioption chart.axisLayoutRuns\n             */\n            /**\n             * Allows setting a key to switch between zooming and panning. Can be\n             * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n             * key on Windows) or `shift`. The keys are mapped directly to the key\n             * properties of the click event argument (`event.altKey`,\n             * `event.ctrlKey`, `event.metaKey` and `event.shiftKey`).\n             *\n             * @type       {string}\n             * @since      4.0.3\n             * @product    highcharts gantt\n             * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n             * @apioption  chart.panKey\n             */\n            /**\n             * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n             * to combine zooming and panning.\n             *\n             * On touch devices, when the [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) option is `true` (default), panning\n             * requires two fingers. To allow panning with one finger, set\n             * `followTouchMove` to `false`.\n             *\n             * @sample  {highcharts} highcharts/chart/pankey/ Zooming and panning\n             * @sample  {highstock} stock/chart/panning/ Zooming and xy panning\n             */\n            panning: {\n                /**\n                 * Enable or disable chart panning.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock|highmaps} true\n                 */\n                enabled: false,\n                /**\n                 * Decides in what dimensions the user can pan the chart. Can be\n                 * one of `x`, `y`, or `xy`.\n                 *\n                 * When this option is set to `y` or `xy`, [yAxis.startOnTick](#yAxis.startOnTick)\n                 * and [yAxis.endOnTick](#yAxis.endOnTick) are overwritten to `false`.\n                 *\n                 * @sample {highcharts} highcharts/chart/panning-type\n                 *         Zooming and xy panning\n                 *\n                 * @declare    Highcharts.OptionsChartPanningTypeValue\n                 * @type       {string}\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @default    {highcharts|highstock} x\n                 * @product    highcharts highstock gantt\n                 */\n                type: 'x'\n            },\n            /**\n             * Equivalent to [zoomType](#chart.zoomType), but for multitouch\n             * gestures only. By default, the `pinchType` is the same as the\n             * `zoomType` setting. However, pinching can be enabled separately in\n             * some cases, for example in stock charts where a mouse drag pans the\n             * chart, while pinching is enabled. When [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) is true, pinchType only applies to\n             * two-finger touches.\n             *\n             * @type       {string}\n             * @default    {highcharts} undefined\n             * @default    {highstock} undefined\n             * @since      3.0\n             * @product    highcharts highstock gantt\n             * @deprecated\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @apioption  chart.pinchType\n             */\n            /**\n             * Whether to apply styled mode. When in styled mode, no presentational\n             * attributes or CSS are applied to the chart SVG. Instead, CSS rules\n             * are required to style the chart. The default style sheet is\n             * available from `https://code.highcharts.com/css/highcharts.css`.\n             *\n             * [Read more in the docs](https://www.highcharts.com/docs/chart-design-and-style/style-by-css)\n             * on what classes and variables are available.\n             *\n             * @sample highcharts/css/colors\n             *         Color theming with CSS\n             * @sample highcharts/css/prefers-color-scheme\n             *         Dynamic theme based on system settings\n             * @type       {boolean}\n             * @default    false\n             * @since      7.0\n             * @apioption  chart.styledMode\n             */\n            styledMode: false,\n            /**\n             * The corner radius of the outer chart border.\n             *\n             * @sample {highcharts} highcharts/chart/borderradius/\n             *         20px radius\n             * @sample {highstock} stock/chart/border/\n             *         10px radius\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             */\n            borderRadius: 0,\n            /**\n             * In styled mode, this sets how many colors the class names\n             * should rotate between. With ten colors, series (or points) are\n             * given class names like `highcharts-color-0`, `highcharts-color-1`\n             * [...] `highcharts-color-9`. The equivalent in non-styled mode\n             * is to set colors using the [colors](#colors) setting.\n             *\n             * @since      5.0.0\n             */\n            colorCount: 10,\n            /**\n             * By default, (because of memory and performance reasons) the chart does\n             * not copy the data but keeps it as a reference. In some cases, this might\n             * result in mutating the original data source. In order to prevent that,\n             * set that property to false. Please note that changing that might decrease\n             * performance, especially with bigger sets of data.\n             *\n             * @type       {boolean}\n             * @since 10.1.0\n             */\n            allowMutatingData: true,\n            /**\n             * If true, the axes will scale to the remaining visible series once\n             * one series is hidden. If false, hiding and showing a series will\n             * not affect the axes or the other series. For stacks, once one series\n             * within the stack is hidden, the rest of the stack will close in\n             * around it even if the axis is not affected.\n             *\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n             *         False\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n             *         True with stack\n             * @sample {highstock} stock/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highstock} stock/chart/ignorehiddenseries-false/\n             *         False\n             *\n             * @since   1.2.0\n             * @product highcharts highstock gantt\n             */\n            ignoreHiddenSeries: true,\n            /**\n             * Whether to invert the axes so that the x axis is vertical and y axis\n             * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n             * by default.\n             *\n             * @productdesc {highcharts}\n             * If a bar series is present in the chart, it will be inverted\n             * automatically. Inverting the chart doesn't have an effect if there\n             * are no cartesian series in the chart.\n             *\n             * @sample {highcharts} highcharts/chart/inverted/\n             *         Inverted line\n             * @sample {highstock} stock/navigator/inverted/\n             *         Inverted stock chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @product   highcharts highstock gantt\n             * @apioption chart.inverted\n             */\n            /**\n             * The distance between the outer edge of the chart and the content,\n             * like title or legend, or axis title and labels if present. The\n             * numbers in the array designate top, right, bottom and left\n             * respectively. Use the options spacingTop, spacingRight, spacingBottom\n             * and spacingLeft options for shorthand setting of one option.\n             *\n             * @type    {Array<number>}\n             * @see     [chart.margin](#chart.margin)\n             * @default [10, 10, 15, 10]\n             * @since   3.0.6\n             */\n            spacing: [10, 10, 15, 10],\n            /**\n             * The button that appears after a selection zoom, allowing the user\n             * to reset zoom. This option is deprecated in favor of\n             * [zooming](#chart.zooming).\n             *\n             * @since      2.2\n             * @deprecated 10.2.1\n             */\n            resetZoomButton: {\n                /**\n                 * What frame the button placement should be related to. Can be\n                 * either `plotBox` or `spacingBox`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 *\n                 * @type      {Highcharts.ButtonRelativeToValue}\n                 * @apioption chart.resetZoomButton.relativeTo\n                 */\n                /**\n                 * A collection of attributes for the button. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                 * border radius. The theme also supports `style`, a collection of\n                 * CSS properties for the text. Equivalent attributes for the hover\n                 * state are given in `theme.states.hover`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                theme: {\n                /**\n                 * The z-index of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.theme.zIndex\n                 */\n                },\n                /**\n                 * The position of the button.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 *\n                 * @type {Highcharts.AlignObject}\n                 */\n                position: {\n                /**\n                 * The horizontal alignment of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.align\n                 */\n                /**\n                 * The horizontal offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.x\n                 */\n                /**\n                 * The vertical alignment of the button.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @apioption chart.resetZoomButton.position.verticalAlign\n                 */\n                /**\n                 * The vertical offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.y\n                 */\n                }\n            },\n            /**\n             * The pixel width of the plot area border.\n             *\n             * @sample {highcharts} highcharts/chart/plotborderwidth/\n             *         1px border\n             * @sample {highstock} stock/chart/plotborder/\n             *         2px border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.plotBorderWidth\n             */\n            /**\n             * Whether to apply a drop shadow to the plot area. Requires that\n             * plotBackgroundColor be set. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample {highcharts} highcharts/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highstock} stock/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.plotShadow\n             */\n            /**\n             * When true, cartesian charts like line, spline, area and column are\n             * transformed into the polar coordinate system. This produces _polar\n             * charts_, also known as _radar charts_.\n             *\n             * @sample {highcharts} highcharts/demo/polar/\n             *         Polar chart\n             * @sample {highcharts} highcharts/demo/polar-wind-rose/\n             *         Wind rose, stacked polar column chart\n             * @sample {highcharts} highcharts/demo/polar-spider/\n             *         Spider web chart\n             * @sample {highcharts} highcharts/parallel-coordinates/polar/\n             *         Star plot, multivariate data in a polar chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     2.3.0\n             * @product   highcharts\n             * @requires  highcharts-more\n             * @apioption chart.polar\n             */\n            /**\n             * Whether to reflow the chart to fit the width of the container div\n             * on resizing the window.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/reflow-false/\n             *         False\n             * @sample {highstock} stock/chart/reflow-true/\n             *         True by default\n             * @sample {highstock} stock/chart/reflow-false/\n             *         False\n             * @sample {highmaps} maps/chart/reflow-true/\n             *         True by default\n             * @sample {highmaps} maps/chart/reflow-false/\n             *         False\n             *\n             * @since     2.1\n             */\n            reflow: true,\n            /**\n             * The HTML element where the chart will be rendered. If it is a string,\n             * the element by that id is used. The HTML element can also be passed\n             * by direct reference, or as the first argument of the chart\n             * constructor, in which case the option is not needed.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         String\n             * @sample {highcharts} highcharts/chart/renderto-object/\n             *         Object reference\n             * @sample {highstock} stock/chart/renderto-string/\n             *         String\n             * @sample {highstock} stock/chart/renderto-object/\n             *         Object reference\n             *\n             * @type      {string|Highcharts.HTMLDOMElement}\n             * @apioption chart.renderTo\n             */\n            /**\n             * The background color of the marker square when selecting (zooming\n             * in on) an area of the chart.\n             *\n             * @see In styled mode, the selection marker fill is set with the\n             *      `.highcharts-selection-marker` class.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   rgba(51,92,173,0.25)\n             * @since     2.1.7\n             * @apioption chart.selectionMarkerFill\n             */\n            /**\n             * Whether to apply a drop shadow to the global series group. This causes\n             * all the series to have the same shadow. Contrary to the `series.shadow`\n             * option, this prevents items from casting shadows on each other, like for\n             * others series in a stack. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample highcharts/chart/seriesgroupshadow/ Shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to apply a drop shadow to the outer chart area. Requires\n             * that backgroundColor be set. The shadow can be an object\n             * configuration containing `color`, `offsetX`, `offsetY`, `opacity` and\n             * `width`.\n             *\n             * @sample {highcharts} highcharts/chart/shadow/\n             *         Shadow\n             * @sample {highstock} stock/chart/shadow/\n             *         Shadow\n             * @sample {highmaps} maps/chart/border/\n             *         Chart border and shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to show the axes initially. This only applies to empty charts\n             * where series are added dynamically, as axes are automatically added\n             * to cartesian series.\n             *\n             * @sample {highcharts} highcharts/chart/showaxes-false/\n             *         False by default\n             * @sample {highcharts} highcharts/chart/showaxes-true/\n             *         True\n             *\n             * @type      {boolean}\n             * @since     1.2.5\n             * @product   highcharts gantt\n             * @apioption chart.showAxes\n             */\n            /**\n             * The space between the bottom edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highstock} stock/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   15\n             * @since     2.1\n             * @apioption chart.spacingBottom\n             */\n            /**\n             * The space between the left edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highstock} stock/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingLeft\n             */\n            /**\n             * The space between the right edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingright-100/\n             *         Spacing set to 100\n             * @sample {highcharts} highcharts/chart/spacingright-legend/\n             *         Legend in right position with default spacing\n             * @sample {highstock} stock/chart/spacingright/\n             *         Spacing set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingRight\n             */\n            /**\n             * The space between the top edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingtop-100/\n             *         A top spacing of 100\n             * @sample {highcharts} highcharts/chart/spacingtop-10/\n             *         Floating chart title makes the plot area align to the default\n             *         spacingTop of 10.\n             * @sample {highstock} stock/chart/spacingtop/\n             *         A top spacing of 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingTop\n             */\n            /**\n             * Additional CSS styles to apply inline to the container `div` and the root\n             * SVG.\n             *\n             * According to the CSS syntax documentation, it is recommended to quote\n             * font family names that contain white space, digits, or punctuation\n             * characters other than hyphens. In such cases, wrap the fontFamily\n             * name as follows: `fontFamily: '\"Font name\"'`.\n             *\n             * Since v11, the root font size is 1rem by default, and all child element\n             * are given a relative `em` font size by default. This allows implementers\n             * to control all the chart's font sizes by only setting the root level.\n             *\n             * @see    In styled mode, general chart styles can be set with the\n             *         `.highcharts-root` class.\n             * @sample {highcharts} highcharts/chart/style-serif-font/\n             *         Using a serif type font\n             * @sample {highcharts} highcharts/chart/style-special-font/\n             *         Using a font with special character in name\n             * @sample {highcharts} highcharts/members/relative-font-size/\n             *         Relative font sizes\n             * @sample {highcharts} highcharts/css/em/\n             *         Styled mode with relative font sizes\n             * @sample {highstock} stock/chart/style/\n             *         Using a serif type font\n             * @sample {highmaps} maps/chart/style-serif-font/\n             *         Using a serif type font\n             *\n             * @type      {Highcharts.CSSObject}\n             * @default   {\"fontFamily\": Helvetica, Arial, sans-serif\",\"fontSize\":\"1rem\"}\n             * @apioption chart.style\n             */\n            /**\n             * The default series type for the chart. Can be any of the chart types\n             * listed under [plotOptions](#plotOptions) and [series](#series) or can\n             * be a series provided by an additional module.\n             *\n             * In TypeScript this option has no effect in sense of typing and\n             * instead the `type` option must always be set in the series.\n             *\n             * @sample {highcharts} highcharts/chart/type-bar/\n             *         Bar\n             * @sample {highstock} stock/chart/type/\n             *         Areaspline\n             * @sample {highmaps} maps/chart/type-mapline/\n             *         Mapline\n             *\n             * @type       {string}\n             * @default    {highcharts} line\n             * @default    {highstock} line\n             * @default    {highmaps} map\n             * @since      2.1.0\n             * @apioption  chart.type\n             */\n            type: 'line',\n            /**\n             * Decides in what dimensions the user can zoom by dragging the mouse.\n             * Can be one of `x`, `y` or `xy`.\n             *\n             * @see [panKey](#chart.panKey)\n             *\n             * @sample {highcharts} highcharts/chart/zoomtype-none/\n             *         None by default\n             * @sample {highcharts} highcharts/chart/zoomtype-x/\n             *         X\n             * @sample {highcharts} highcharts/chart/zoomtype-y/\n             *         Y\n             * @sample {highcharts} highcharts/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highcharts} highcharts/chart/zoomtype-polar/\n             *         Zoom on polar chart\n             * @sample {highstock} stock/demo/basic-line/\n             *         None by default\n             * @sample {highstock} stock/chart/zoomtype-x/\n             *         X\n             * @sample {highstock} stock/chart/zoomtype-y/\n             *         Y\n             * @sample {highstock} stock/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highmaps} maps/chart/zoomtype-xy/\n             *         Map with selection zoom\n             *\n             * @type       {string}\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @deprecated\n             * @apioption  chart.zoomType\n             */\n            /**\n             * Enables zooming by a single touch, in combination with\n             * [chart.zoomType](#chart.zoomType). When enabled, two-finger pinch\n             * will still work as set up by [chart.pinchType](#chart.pinchType).\n             * However, `zoomBySingleTouch` will interfere with touch-dragging the\n             * chart to read the tooltip. And especially when vertical zooming is\n             * enabled, it will make it hard to scroll vertically on the page.\n             * @since      9.0.0\n             * @sample     highcharts/chart/zoombysingletouch\n             *             Zoom by single touch enabled, with buttons to toggle\n             * @product    highcharts highstock gantt\n             * @deprecated\n             */\n            /**\n             * Chart zooming options.\n             * @since 10.2.1\n             */\n            zooming: {\n                /**\n                 * Equivalent to [type](#chart.zooming.type), but for multitouch\n                 * gestures only. By default, the `pinchType` is the same as the\n                 * `type` setting. However, pinching can be enabled separately in\n                 * some cases, for example in stock charts where a mouse drag pans the\n                 * chart, while pinching is enabled. When [tooltip.followTouchMove](\n                 * #tooltip.followTouchMove) is true, pinchType only applies to\n                 * two-finger touches.\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @default    {highstock} x\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.pinchType\n                 */\n                /**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * @declare    Highcharts.OptionsChartZoomingTypeValue\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.type\n                 */\n                /**\n                 * Set a key to hold when dragging to zoom the chart. This is useful to\n                 * avoid zooming while moving points. Should be set different than\n                 * [chart.panKey](#chart.panKey).\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @requires   modules/draggable-points\n                 * @apioption  chart.zooming.key\n                 */\n                /**\n                 * Enables zooming by a single touch, in combination with\n                 * [chart.zooming.type](#chart.zooming.type). When enabled, two-finger\n                 * pinch will still work as set up by [chart.zooming.pinchType]\n                 * (#chart.zooming.pinchType). However, `singleTouch` will interfere\n                 * with touch-dragging the chart to read the tooltip. And especially\n                 * when vertical zooming is enabled, it will make it hard to scroll\n                 * vertically on the page.\n                 *\n                 * @sample  highcharts/chart/zoombysingletouch\n                 *          Zoom by single touch enabled, with buttons to toggle\n                 *\n                 * @product highcharts highstock gantt\n                 */\n                singleTouch: false,\n                /**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 */\n                resetButton: {\n                    /**\n                     * What frame the button placement should be related to. Can be\n                     * either `plotBox` or `spacingBox`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     *\n                     * @type      {Highcharts.ButtonRelativeToValue}\n                     * @default   plot\n                     * @apioption chart.zooming.resetButton.relativeTo\n                     */\n                    /**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                     * border radius. The theme also supports `style`, a collection of\n                     * CSS properties for the text. Equivalent attributes for the hover\n                     * state are given in `theme.states.hover`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     *\n                     * @type  {Highcharts.SVGAttributes}\n                     * @since 10.2.1\n                     */\n                    theme: {\n                        /** @internal */\n                        zIndex: 6\n                    },\n                    /**\n                     * The position of the button.\n                     *\n                     * Note: Adjusting position values might cause overlap with chart\n                     * elements. Ensure coordinates do not obstruct other components or\n                     * data visibility.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     *\n                     * @type  {Highcharts.AlignObject}\n                     * @since 10.2.1\n                     */\n                    position: {\n                        /**\n                         * The horizontal alignment of the button.\n                         */\n                        align: 'right',\n                        /**\n                         * The horizontal offset of the button.\n                         */\n                        x: -10,\n                        /**\n                         * The vertical alignment of the button.\n                         *\n                         * @type       {Highcharts.VerticalAlignValue}\n                         * @default    top\n                         * @apioption  chart.zooming.resetButton.position.verticalAlign\n                         */\n                        /**\n                         * The vertical offset of the button.\n                         */\n                        y: 10\n                    }\n                }\n            },\n            /**\n             * An explicit width for the chart. By default (when `null`) the width\n             * is calculated from the offset width of the containing element.\n             *\n             * @sample {highcharts} highcharts/chart/width/\n             *         800px wide\n             * @sample {highstock} stock/chart/width/\n             *         800px wide\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             *\n             * @type {null|number|string}\n             */\n            width: null,\n            /**\n             * An explicit height for the chart. If a _number_, the height is\n             * given in pixels. If given a _percentage string_ (for example\n             * `'56%'`), the height is given as the percentage of the actual chart\n             * width. This allows for preserving the aspect ratio across responsive\n             * sizes.\n             *\n             * By default (when `null`) the height is calculated from the offset\n             * height of the containing element, or 400 pixels if the containing\n             * element's height is 0.\n             *\n             * @sample {highcharts} highcharts/chart/height/\n             *         Forced 200px height\n             * @sample {highstock} stock/chart/height/\n             *         300px height\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             * @sample highcharts/chart/height-percent/\n             *         Highcharts with percentage height\n             * @sample highcharts/chart/height-inherited/\n             *         Chart with inherited height\n             *\n             * @type {null|number|string}\n             */\n            height: null,\n            /**\n             * The color of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/bordercolor/\n             *         Brown border\n             * @sample {highstock} stock/chart/border/\n             *         Brown border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: \"#334eff\" /* Palette.highlightColor80 */,\n            /**\n             * The pixel width of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/borderwidth/\n             *         5px border\n             * @sample {highstock} stock/chart/border/\n             *         2px border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.borderWidth\n             */\n            /**\n             * The background color or gradient for the outer chart area.\n             *\n             * @see In styled mode, the background is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The background color or gradient for the plot area.\n             *\n             * @see In styled mode, the plot background is set with the\n             *      `.highcharts-plot-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption chart.plotBackgroundColor\n             */\n            /**\n             * The URL for an image to use as the plot background. To set an image\n             * as the background for the entire chart, set a CSS background image\n             * to the container element. Note that for the image to be applied to\n             * exported charts, its URL needs to be accessible by the export server.\n             *\n             * @see In styled mode, a plot background image can be set with the\n             *      `.highcharts-plot-background` class and a [custom pattern](\n             *      https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundimage/\n             *         Skies\n             * @sample {highstock} stock/chart/plotbackgroundimage/\n             *         Skies\n             *\n             * @type      {string}\n             * @apioption chart.plotBackgroundImage\n             */\n            /**\n             * The color of the inner chart or plot area border.\n             *\n             * @see In styled mode, a plot border stroke can be set with the\n             *      `.highcharts-plot-border` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbordercolor/\n             *         Blue border\n             * @sample {highstock} stock/chart/plotborder/\n             *         Blue border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            plotBorderColor: \"#cccccc\" /* Palette.neutralColor20 */\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartDefaults;\n    });\n    _registerModule(_modules, 'Core/Color/Palettes.js', [], function () {\n        /*\n         * Series palettes for Highcharts. Series colors are defined in highcharts.css.\n         * **Do not edit this file!** This file is generated using the 'gulp palette' task.\n         */\n        const SeriesPalettes = {\n            /**\n             * Colors for data series and points\n             */\n            colors: [\n                '#2caffe',\n                '#544fc5',\n                '#00e272',\n                '#fe6a35',\n                '#6b8abc',\n                '#d568fb',\n                '#2ee0ca',\n                '#fa4b42',\n                '#feb56a',\n                '#91e8e1'\n            ]\n        };\n\n        return SeriesPalettes;\n    });\n    _registerModule(_modules, 'Core/Time.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { defined, error, extend, isNumber, isObject, merge, objectEach, pad, pick, splat, timeUnits } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const hasNewSafariBug = H.isSafari &&\n            win.Intl &&\n            win.Intl.DateTimeFormat.prototype.formatRange;\n        // To do: Remove this when we no longer need support for Safari < v14.1\n        const hasOldSafariBug = H.isSafari &&\n            win.Intl &&\n            !win.Intl.DateTimeFormat.prototype.formatRange;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The Time class. Time settings are applied in general for each page using\n         * `Highcharts.setOptions`, or individually for each Chart item through the\n         * [time](https://api.highcharts.com/highcharts/time) options set.\n         *\n         * The Time object is available from {@link Highcharts.Chart#time},\n         * which refers to  `Highcharts.time` if no individual time settings are\n         * applied.\n         *\n         * @example\n         * // Apply time settings globally\n         * Highcharts.setOptions({\n         *     time: {\n         *         timezone: 'Europe/London'\n         *     }\n         * });\n         *\n         * // Apply time settings by instance\n         * let chart = Highcharts.chart('container', {\n         *     time: {\n         *         timezone: 'America/New_York'\n         *     },\n         *     series: [{\n         *         data: [1, 4, 3, 5]\n         *     }]\n         * });\n         *\n         * // Use the Time object\n         * console.log(\n         *        'Current time in New York',\n         *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n         * );\n         *\n         * @since 6.0.5\n         *\n         * @class\n         * @name Highcharts.Time\n         *\n         * @param {Highcharts.TimeOptions} [options]\n         * Time options as defined in [chart.options.time](/highcharts/time).\n         */\n        class Time {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = {};\n                this.useUTC = false;\n                this.variableTimezone = false;\n                this.Date = win.Date;\n                /**\n                 * Get the time zone offset based on the current timezone information as\n                 * set in the global options.\n                 *\n                 * @function Highcharts.Time#getTimezoneOffset\n                 *\n                 * @param {number} timestamp\n                 *        The JavaScript timestamp to inspect.\n                 *\n                 * @return {number}\n                 *         The timezone offset in minutes compared to UTC.\n                 */\n                this.getTimezoneOffset = this.timezoneOffsetFunction();\n                this.update(options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Time units used in `Time.get` and `Time.set`\n             *\n             * @typedef {\"Date\"|\"Day\"|\"FullYear\"|\"Hours\"|\"Milliseconds\"|\"Minutes\"|\"Month\"|\"Seconds\"} Highcharts.TimeUnitValue\n             */\n            /**\n             * Get the value of a date object in given units, and subject to the Time\n             * object's current timezone settings. This function corresponds directly to\n             * JavaScripts `Date.getXXX / Date.getUTCXXX`, so instead of calling\n             * `date.getHours()` or `date.getUTCHours()` we will call\n             * `time.get('Hours')`.\n             *\n             * @function Highcharts.Time#get\n             *\n             * @param {Highcharts.TimeUnitValue} unit\n             * @param {Date} date\n             *\n             * @return {number}\n             *        The given time unit\n             */\n            get(unit, date) {\n                if (this.variableTimezone || this.timezoneOffset) {\n                    const realMs = date.getTime();\n                    const ms = realMs - this.getTimezoneOffset(date);\n                    date.setTime(ms); // Temporary adjust to timezone\n                    const ret = date['getUTC' + unit]();\n                    date.setTime(realMs); // Reset\n                    return ret;\n                }\n                // UTC time with no timezone handling\n                if (this.useUTC) {\n                    return date['getUTC' + unit]();\n                }\n                // Else, local time\n                return date['get' + unit]();\n            }\n            /**\n             * Set the value of a date object in given units, and subject to the Time\n             * object's current timezone settings. This function corresponds directly to\n             * JavaScripts `Date.setXXX / Date.setUTCXXX`, so instead of calling\n             * `date.setHours(0)` or `date.setUTCHours(0)` we will call\n             * `time.set('Hours', 0)`.\n             *\n             * @function Highcharts.Time#set\n             *\n             * @param {Highcharts.TimeUnitValue} unit\n             * @param {Date} date\n             * @param {number} value\n             *\n             * @return {number}\n             *        The epoch milliseconds of the updated date\n             */\n            set(unit, date, value) {\n                // UTC time with timezone handling\n                if (this.variableTimezone || this.timezoneOffset) {\n                    // For lower order time units, just set it directly using UTC\n                    // time\n                    if (unit === 'Milliseconds' ||\n                        unit === 'Seconds' ||\n                        (unit === 'Minutes' &&\n                            this.getTimezoneOffset(date) % 3600000 === 0) // #13961\n                    ) {\n                        return date['setUTC' + unit](value);\n                    }\n                    // Higher order time units need to take the time zone into\n                    // account\n                    // Adjust by timezone\n                    const offset = this.getTimezoneOffset(date);\n                    let ms = date.getTime() - offset;\n                    date.setTime(ms);\n                    date['setUTC' + unit](value);\n                    const newOffset = this.getTimezoneOffset(date);\n                    ms = date.getTime() + newOffset;\n                    return date.setTime(ms);\n                }\n                // UTC time with no timezone handling\n                if (this.useUTC ||\n                    // Leap calculation in UTC only\n                    (hasNewSafariBug && unit === 'FullYear')) {\n                    return date['setUTC' + unit](value);\n                }\n                // Else, local time\n                return date['set' + unit](value);\n            }\n            /**\n             * Update the Time object with current options. It is called internally on\n             * initializing Highcharts, after running `Highcharts.setOptions` and on\n             * `Chart.update`.\n             *\n             * @private\n             * @function Highcharts.Time#update\n             *\n             * @param {Highcharts.TimeOptions} [options]\n             *\n             */\n            update(options = {}) {\n                const useUTC = pick(options.useUTC, true);\n                this.options = options = merge(true, this.options, options);\n                // Allow using a different Date class\n                this.Date = options.Date || win.Date || Date;\n                this.useUTC = useUTC;\n                this.timezoneOffset = (useUTC && options.timezoneOffset) || void 0;\n                this.getTimezoneOffset = this.timezoneOffsetFunction();\n                /*\n                 * The time object has options allowing for variable time zones, meaning\n                 * the axis ticks or series data needs to consider this.\n                 */\n                this.variableTimezone = useUTC && !!(options.getTimezoneOffset ||\n                    options.timezone);\n            }\n            /**\n             * Make a time and returns milliseconds. Interprets the inputs as UTC time,\n             * local time or a specific timezone time depending on the current time\n             * settings.\n             *\n             * @function Highcharts.Time#makeTime\n             *\n             * @param {number} year\n             *        The year\n             *\n             * @param {number} month\n             *        The month. Zero-based, so January is 0.\n             *\n             * @param {number} [date=1]\n             *        The day of the month\n             *\n             * @param {number} [hours=0]\n             *        The hour of the day, 0-23.\n             *\n             * @param {number} [minutes=0]\n             *        The minutes\n             *\n             * @param {number} [seconds=0]\n             *        The seconds\n             *\n             * @return {number}\n             *         The time in milliseconds since January 1st 1970.\n             */\n            makeTime(year, month, date, hours, minutes, seconds) {\n                let d, offset, newOffset;\n                if (this.useUTC) {\n                    d = this.Date.UTC.apply(0, arguments);\n                    offset = this.getTimezoneOffset(d);\n                    d += offset;\n                    newOffset = this.getTimezoneOffset(d);\n                    if (offset !== newOffset) {\n                        d += newOffset - offset;\n                        // A special case for transitioning from summer time to winter time.\n                        // When the clock is set back, the same time is repeated twice, i.e.\n                        // 02:30 am is repeated since the clock is set back from 3 am to\n                        // 2 am. We need to make the same time as local Date does.\n                    }\n                    else if (offset - 36e5 === this.getTimezoneOffset(d - 36e5) &&\n                        !hasOldSafariBug) {\n                        d -= 36e5;\n                    }\n                }\n                else {\n                    d = new this.Date(year, month, pick(date, 1), pick(hours, 0), pick(minutes, 0), pick(seconds, 0)).getTime();\n                }\n                return d;\n            }\n            /**\n             * Sets the getTimezoneOffset function. If the `timezone` option is set, a\n             * default getTimezoneOffset function with that timezone is returned. If\n             * a `getTimezoneOffset` option is defined, it is returned. If neither are\n             * specified, the function using the `timezoneOffset` option or 0 offset is\n             * returned.\n             *\n             * @private\n             * @function Highcharts.Time#timezoneOffsetFunction\n             *\n             * @return {Function}\n             *         A getTimezoneOffset function\n             */\n            timezoneOffsetFunction() {\n                const time = this, options = this.options, getTimezoneOffset = options.getTimezoneOffset;\n                if (!this.useUTC) {\n                    return (timestamp) => new Date(timestamp.toString()).getTimezoneOffset() * 60000;\n                }\n                if (options.timezone) {\n                    return (timestamp) => {\n                        try {\n                            // Cache the DateTimeFormat instances for performance\n                            // (#20720)\n                            const cacheKey = `shortOffset,${options.timezone || ''}`, dateTimeFormat = Time.formatCache[cacheKey] = (Time.formatCache[cacheKey] ||\n                                // eslint-disable-next-line new-cap\n                                Intl.DateTimeFormat('en', {\n                                    timeZone: options.timezone,\n                                    timeZoneName: 'shortOffset'\n                                }));\n                            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                            const [date, gmt, hours, colon, minutes = 0] = dateTimeFormat\n                                .format(timestamp)\n                                .split(/(GMT|:)/)\n                                .map(Number), offset = -(hours + minutes / 60) * 60 * 60000;\n                            // Possible future NaNs stop here\n                            if (isNumber(offset)) {\n                                return offset;\n                            }\n                        }\n                        catch (e) {\n                            error(34);\n                        }\n                        return 0;\n                    };\n                }\n                // If not timezone is set, look for the getTimezoneOffset callback\n                if (this.useUTC && getTimezoneOffset) {\n                    return (timestamp) => getTimezoneOffset(timestamp.valueOf()) * 60000;\n                }\n                // Last, use the `timezoneOffset` option if set\n                return () => (time.timezoneOffset || 0) * 60000;\n            }\n            /**\n             * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970)\n             * into a human readable date string. The available format keys are listed\n             * below. Additional formats can be given in the\n             * {@link Highcharts.dateFormats} hook.\n             *\n             * Supported format keys:\n             * - `%a`: Short weekday, like 'Mon'\n             * - `%A`: Long weekday, like 'Monday'\n             * - `%d`: Two digit day of the month, 01 to 31\n             * - `%e`: Day of the month, 1 through 31\n             * - `%w`: Day of the week, 0 through 6\n             * - `%b`: Short month, like 'Jan'\n             * - `%B`: Long month, like 'January'\n             * - `%m`: Two digit month number, 01 through 12\n             * - `%y`: Two digits year, like 09 for 2009\n             * - `%Y`: Four digits year, like 2009\n             * - `%H`: Two digits hours in 24h format, 00 through 23\n             * - `%k`: Hours in 24h format, 0 through 23\n             * - `%I`: Two digits hours in 12h format, 00 through 11\n             * - `%l`: Hours in 12h format, 1 through 12\n             * - `%M`: Two digits minutes, 00 through 59\n             * - `%p`: Upper case AM or PM\n             * - `%P`: Lower case AM or PM\n             * - `%S`: Two digits seconds, 00 through 59\n             * - `%L`: Milliseconds (naming from Ruby)\n             *\n             * @example\n             * const time = new Highcharts.Time();\n             * const s = time.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2020, 0, 1));\n             * console.log(s); // => 2020-01-01 00:00:00\n             *\n             * @function Highcharts.Time#dateFormat\n             *\n             * @param {string} format\n             *        The desired format where various time representations are\n             *        prefixed with %.\n             *\n             * @param {number} [timestamp]\n             *        The JavaScript timestamp.\n             *\n             * @param {boolean} [capitalize=false]\n             *        Upper case first letter in the return.\n             *\n             * @return {string}\n             *         The formatted date.\n             */\n            dateFormat(format, timestamp, capitalize) {\n                if (!defined(timestamp) || isNaN(timestamp)) {\n                    return (H.defaultOptions.lang &&\n                        H.defaultOptions.lang.invalidDate ||\n                        '');\n                }\n                format = pick(format, '%Y-%m-%d %H:%M:%S');\n                const time = this, date = new this.Date(timestamp), \n                // Get the basic time values\n                hours = this.get('Hours', date), day = this.get('Day', date), dayOfMonth = this.get('Date', date), month = this.get('Month', date), fullYear = this.get('FullYear', date), lang = H.defaultOptions.lang, langWeekdays = (lang && lang.weekdays), shortWeekdays = (lang && lang.shortWeekdays), \n                // List all format keys. Custom formats can be added from the\n                // outside.\n                replacements = extend({\n                    // Day\n                    // Short weekday, like 'Mon'\n                    a: shortWeekdays ?\n                        shortWeekdays[day] :\n                        langWeekdays[day].substr(0, 3),\n                    // Long weekday, like 'Monday'\n                    A: langWeekdays[day],\n                    // Two digit day of the month, 01 to 31\n                    d: pad(dayOfMonth),\n                    // Day of the month, 1 through 31\n                    e: pad(dayOfMonth, 2, ' '),\n                    // Day of the week, 0 through 6\n                    w: day,\n                    // Week (none implemented)\n                    // 'W': weekNumber(),\n                    // Month\n                    // Short month, like 'Jan'\n                    b: lang.shortMonths[month],\n                    // Long month, like 'January'\n                    B: lang.months[month],\n                    // Two digit month number, 01 through 12\n                    m: pad(month + 1),\n                    // Month number, 1 through 12 (#8150)\n                    o: month + 1,\n                    // Year\n                    // Two digits year, like 09 for 2009\n                    y: fullYear.toString().substr(2, 2),\n                    // Four digits year, like 2009\n                    Y: fullYear,\n                    // Time\n                    // Two digits hours in 24h format, 00 through 23\n                    H: pad(hours),\n                    // Hours in 24h format, 0 through 23\n                    k: hours,\n                    // Two digits hours in 12h format, 00 through 11\n                    I: pad((hours % 12) || 12),\n                    // Hours in 12h format, 1 through 12\n                    l: (hours % 12) || 12,\n                    // Two digits minutes, 00 through 59\n                    M: pad(this.get('Minutes', date)),\n                    // Upper case AM or PM\n                    p: hours < 12 ? 'AM' : 'PM',\n                    // Lower case AM or PM\n                    P: hours < 12 ? 'am' : 'pm',\n                    // Two digits seconds, 00 through 59\n                    S: pad(this.get('Seconds', date)),\n                    // Milliseconds (naming from Ruby)\n                    L: pad(Math.floor(timestamp % 1000), 3)\n                }, H.dateFormats);\n                // Do the replaces\n                objectEach(replacements, function (val, key) {\n                    // Regex would do it in one line, but this is faster\n                    while (format.indexOf('%' + key) !== -1) {\n                        format = format.replace('%' + key, typeof val === 'function' ? val.call(time, timestamp) : val);\n                    }\n                });\n                // Optionally capitalize the string and return\n                return capitalize ?\n                    (format.substr(0, 1).toUpperCase() +\n                        format.substr(1)) :\n                    format;\n            }\n            /**\n             * Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\n             * an object.\n             * @private\n             * @param {string|Array<T>|Highcharts.Dictionary<T>} f\n             * General format description\n             * @return {Highcharts.Dictionary<T>}\n             * The object definition\n             */\n            resolveDTLFormat(f) {\n                if (!isObject(f, true)) { // Check for string or array\n                    f = splat(f);\n                    return {\n                        main: f[0],\n                        from: f[1],\n                        to: f[2]\n                    };\n                }\n                return f;\n            }\n            /**\n             * Return an array with time positions distributed on round time values\n             * right and right after min and max. Used in datetime axes as well as for\n             * grouping data on a datetime axis.\n             *\n             * @function Highcharts.Time#getTimeTicks\n             *\n             * @param {Highcharts.TimeNormalizedObject} normalizedInterval\n             *        The interval in axis values (ms) and the count\n             *\n             * @param {number} [min]\n             *        The minimum in axis values\n             *\n             * @param {number} [max]\n             *        The maximum in axis values\n             *\n             * @param {number} [startOfWeek=1]\n             *\n             * @return {Highcharts.AxisTickPositionsArray}\n             * Time positions\n             */\n            getTimeTicks(normalizedInterval, min, max, startOfWeek) {\n                const time = this, Date = time.Date, tickPositions = [], higherRanks = {}, \n                // When crossing DST, use the max. Resolves #6278.\n                minDate = new Date(min), interval = normalizedInterval.unitRange, count = normalizedInterval.count || 1;\n                let i, minYear, // Used in months and years as a basis for Date.UTC()\n                variableDayLength, minDay;\n                startOfWeek = pick(startOfWeek, 1);\n                if (defined(min)) { // #1300\n                    time.set('Milliseconds', minDate, interval >= timeUnits.second ?\n                        0 : // #3935\n                        count * Math.floor(time.get('Milliseconds', minDate) / count)); // #3652, #3654\n                    if (interval >= timeUnits.second) { // Second\n                        time.set('Seconds', minDate, interval >= timeUnits.minute ?\n                            0 : // #3935\n                            count * Math.floor(time.get('Seconds', minDate) / count));\n                    }\n                    if (interval >= timeUnits.minute) { // Minute\n                        time.set('Minutes', minDate, interval >= timeUnits.hour ?\n                            0 :\n                            count * Math.floor(time.get('Minutes', minDate) / count));\n                    }\n                    if (interval >= timeUnits.hour) { // Hour\n                        time.set('Hours', minDate, interval >= timeUnits.day ?\n                            0 :\n                            count * Math.floor(time.get('Hours', minDate) / count));\n                    }\n                    if (interval >= timeUnits.day) { // Day\n                        time.set('Date', minDate, interval >= timeUnits.month ?\n                            1 :\n                            Math.max(1, count * Math.floor(time.get('Date', minDate) / count)));\n                    }\n                    if (interval >= timeUnits.month) { // Month\n                        time.set('Month', minDate, interval >= timeUnits.year ? 0 :\n                            count * Math.floor(time.get('Month', minDate) / count));\n                        minYear = time.get('FullYear', minDate);\n                    }\n                    if (interval >= timeUnits.year) { // Year\n                        minYear -= minYear % count;\n                        time.set('FullYear', minDate, minYear);\n                    }\n                    // Week is a special case that runs outside the hierarchy\n                    if (interval === timeUnits.week) {\n                        // Get start of current week, independent of count\n                        minDay = time.get('Day', minDate);\n                        time.set('Date', minDate, (time.get('Date', minDate) -\n                            minDay + startOfWeek +\n                            // We don't want to skip days that are before\n                            // startOfWeek (#7051)\n                            (minDay < startOfWeek ? -7 : 0)));\n                    }\n                    // Get basics for variable time spans\n                    minYear = time.get('FullYear', minDate);\n                    const minMonth = time.get('Month', minDate), minDateDate = time.get('Date', minDate), minHours = time.get('Hours', minDate);\n                    // Redefine min to the floored/rounded minimum time (#7432)\n                    min = minDate.getTime();\n                    // Handle local timezone offset\n                    if ((time.variableTimezone || !time.useUTC) && defined(max)) {\n                        // Detect whether we need to take the DST crossover into\n                        // consideration. If we're crossing over DST, the day length may\n                        // be 23h or 25h and we need to compute the exact clock time for\n                        // each tick instead of just adding hours. This comes at a cost,\n                        // so first we find out if it is needed (#4951).\n                        variableDayLength = (\n                        // Long range, assume we're crossing over.\n                        max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time\n                            // zones.\n                            time.getTimezoneOffset(min) !==\n                                time.getTimezoneOffset(max));\n                    }\n                    // Iterate and add tick positions at appropriate values\n                    let t = minDate.getTime();\n                    i = 1;\n                    while (t < max) {\n                        tickPositions.push(t);\n                        // If the interval is years, use Date.UTC to increase years\n                        if (interval === timeUnits.year) {\n                            t = time.makeTime(minYear + i * count, 0);\n                            // If the interval is months, use Date.UTC to increase months\n                        }\n                        else if (interval === timeUnits.month) {\n                            t = time.makeTime(minYear, minMonth + i * count);\n                            // If we're using global time, the interval is not fixed as it\n                            // jumps one hour at the DST crossover\n                        }\n                        else if (variableDayLength &&\n                            (interval === timeUnits.day || interval === timeUnits.week)) {\n                            t = time.makeTime(minYear, minMonth, minDateDate +\n                                i * count * (interval === timeUnits.day ? 1 : 7));\n                        }\n                        else if (variableDayLength &&\n                            interval === timeUnits.hour &&\n                            count > 1) {\n                            // Make sure higher ranks are preserved across DST (#6797,\n                            // #7621)\n                            t = time.makeTime(minYear, minMonth, minDateDate, minHours + i * count);\n                            // Else, the interval is fixed and we use simple addition\n                        }\n                        else {\n                            t += interval * count;\n                        }\n                        i++;\n                    }\n                    // Push the last time\n                    tickPositions.push(t);\n                    // Handle higher ranks. Mark new days if the time is on midnight\n                    // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold\n                    // to prevent looping over dense data grouping (#6156).\n                    if (interval <= timeUnits.hour && tickPositions.length < 10000) {\n                        tickPositions.forEach(function (t) {\n                            if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            t % 1800000 === 0 &&\n                                // Check for local or global midnight\n                                time.dateFormat('%H%M%S%L', t) === '000000000') {\n                                higherRanks[t] = 'day';\n                            }\n                        });\n                    }\n                }\n                // Record information on the chosen unit - for dynamic label formatter\n                tickPositions.info = extend(normalizedInterval, {\n                    higherRanks,\n                    totalRange: interval * count\n                });\n                return tickPositions;\n            }\n            /**\n             * Get the optimal date format for a point, based on a range.\n             *\n             * @private\n             * @function Highcharts.Time#getDateFormat\n             *\n             * @param {number} range\n             *        The time range\n             *\n             * @param {number} timestamp\n             *        The timestamp of the date\n             *\n             * @param {number} startOfWeek\n             *        An integer representing the first day of the week, where 0 is\n             *        Sunday.\n             *\n             * @param {Highcharts.Dictionary<string>} dateTimeLabelFormats\n             *        A map of time units to formats.\n             *\n             * @return {string}\n             *         The optimal date format for a point.\n             */\n            getDateFormat(range, timestamp, startOfWeek, dateTimeLabelFormats) {\n                const dateStr = this.dateFormat('%m-%d %H:%M:%S.%L', timestamp), blank = '01-01 00:00:00.000', strpos = {\n                    millisecond: 15,\n                    second: 12,\n                    minute: 9,\n                    hour: 6,\n                    day: 3\n                };\n                let n = 'millisecond', \n                // For sub-millisecond data, #4223\n                lastN = n;\n                for (n in timeUnits) { // eslint-disable-line guard-for-in\n                    // If the range is exactly one week and we're looking at a\n                    // Sunday/Monday, go for the week format\n                    if (range === timeUnits.week &&\n                        +this.dateFormat('%w', timestamp) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n                    // The first format that is too great for the range\n                    if (timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] &&\n                        dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n                    // Weeks are outside the hierarchy, only apply them on\n                    // Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n                return this.resolveDTLFormat(dateTimeLabelFormats[n]).main;\n            }\n        }\n        Time.formatCache = {};\n        /* *\n         *\n         * Default export\n         *\n         * */\n        /* *\n         *\n         * API Declarations\n         *\n         * */\n        /**\n         * Normalized interval.\n         *\n         * @interface Highcharts.TimeNormalizedObject\n         */ /**\n        * The count.\n        *\n        * @name Highcharts.TimeNormalizedObject#count\n        * @type {number|undefined}\n        */ /**\n        * The interval in axis values (ms).\n        *\n        * @name Highcharts.TimeNormalizedObject#unitRange\n        * @type {number}\n        */\n        /**\n         * Function of an additional date format specifier.\n         *\n         * @callback Highcharts.TimeFormatCallbackFunction\n         *\n         * @param {number} timestamp\n         *        The time to format.\n         *\n         * @return {string}\n         *         The formatted portion of the date.\n         */\n        /**\n         * Time ticks.\n         *\n         * @interface Highcharts.AxisTickPositionsArray\n         * @extends global.Array<number>\n         */ /**\n        * @name Highcharts.AxisTickPositionsArray#info\n        * @type {Highcharts.TimeTicksInfoObject|undefined}\n        */\n        /**\n         * A callback to return the time zone offset for a given datetime. It\n         * takes the timestamp in terms of milliseconds since January 1 1970,\n         * and returns the timezone offset in minutes. This provides a hook\n         * for drawing time based charts in specific time zones using their\n         * local DST crossover dates, with the help of external libraries.\n         *\n         * @callback Highcharts.TimezoneOffsetCallbackFunction\n         *\n         * @param {number} timestamp\n         * Timestamp in terms of milliseconds since January 1 1970.\n         *\n         * @return {number}\n         * Timezone offset in minutes.\n         */\n        ''; // Keeps doclets above in JS file\n\n        return Time;\n    });\n    _registerModule(_modules, 'Core/Defaults.js', [_modules['Core/Chart/ChartDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Time.js'], _modules['Core/Utilities.js']], function (ChartDefaults, H, Palettes, Time, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { fireEvent, merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Global default settings.\n         *\n         * @name Highcharts.defaultOptions\n         * @type {Highcharts.Options}\n         */ /**\n        * @optionparent\n        * @private\n        */\n        const defaultOptions = {\n            /**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors),\n             * [pie.colors](#plotOptions.pie.colors).\n             *\n             * In styled mode, the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             * @sample {highcharts} highcharts/chart/colors/\n             *         Assign a global color theme\n             * @sample highcharts/members/theme-v10/\n             *         Latest release styled like version 10\n             *\n             * @type    {Array<(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)>}\n             * @default [\n             *     \"#2caffe\",\n             *     \"#544fc5\",\n             *     \"#00e272\",\n             *     \"#fe6a35\",\n             *     \"#6b8abc\",\n             *     \"#d568fb\",\n             *     \"#2ee0ca\",\n             *     \"#fa4b42\",\n             *     \"#feb56a\",\n             *     \"#91e8e1\"\n             * ]\n             */\n            colors: Palettes.colors,\n            /**\n             * Styled mode only. Configuration object for adding SVG definitions for\n             * reusable elements. See [gradients, shadows and\n             * patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\n             * for more information and code examples.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @apioption defs\n             */\n            /**\n             * @ignore-option\n             */\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            /**\n             * The language object is global and it can't be set on each chart\n             * initialization. Instead, use `Highcharts.setOptions` to set it before any\n             * chart is initialized.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     lang: {\n             *         months: [\n             *             'Janvier', 'Février', 'Mars', 'Avril',\n             *             'Mai', 'Juin', 'Juillet', 'Août',\n             *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n             *         ],\n             *         weekdays: [\n             *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n             *             'Jeudi', 'Vendredi', 'Samedi'\n             *         ]\n             *     }\n             * });\n             * ```\n             */\n            lang: {\n                /**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 */\n                loading: 'Loading...',\n                /**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                 *          \"July\", \"August\", \"September\", \"October\", \"November\",\n                 *          \"December\"]\n                 */\n                months: [\n                    'January', 'February', 'March', 'April', 'May', 'June', 'July',\n                    'August', 'September', 'October', 'November', 'December'\n                ],\n                /**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 *          \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n                 */\n                shortMonths: [\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n                    'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n                ],\n                /**\n                 * An array containing the weekday names.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n                 *          \"Friday\", \"Saturday\"]\n                 */\n                weekdays: [\n                    'Sunday', 'Monday', 'Tuesday', 'Wednesday',\n                    'Thursday', 'Friday', 'Saturday'\n                ],\n                /**\n                 * Short week days, starting Sunday. If not specified, Highcharts uses\n                 * the first three letters of the `lang.weekdays` option.\n                 *\n                 * @sample highcharts/lang/shortweekdays/\n                 *         Finnish two-letter abbreviations\n                 *\n                 * @type      {Array<string>}\n                 * @since     4.2.4\n                 * @apioption lang.shortWeekdays\n                 */\n                /**\n                 * What to show in a date field for invalid dates. Defaults to an empty\n                 * string.\n                 *\n                 * @type      {string}\n                 * @since     4.1.8\n                 * @product   highcharts highstock\n                 * @apioption lang.invalidDate\n                 */\n                /**\n                 * The title appearing on hovering the zoom in button. The text itself\n                 * defaults to \"+\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom in\n                 * @product   highmaps\n                 * @apioption lang.zoomIn\n                 */\n                /**\n                 * The title appearing on hovering the zoom out button. The text itself\n                 * defaults to \"-\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom out\n                 * @product   highmaps\n                 * @apioption lang.zoomOut\n                 */\n                /**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments.\n                 *\n                 * @since 1.2.2\n                 */\n                decimalPoint: '.',\n                /**\n                 * [Metric prefixes](https://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the\n                 * positions with `null` causes the full number to be written. Setting\n                 * `numericSymbols` to `undefined` disables shortening altogether.\n                 *\n                 * @sample {highcharts} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n                 * @since   2.3.0\n                 */\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'],\n                /**\n                 * The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\n                 * Use 10000 for Japanese, Korean and various Chinese locales, which\n                 * use symbols for 10^4, 10^8 and 10^12.\n                 *\n                 * @sample highcharts/lang/numericsymbolmagnitude/\n                 *         10000 magnitude for Japanese\n                 *\n                 * @type      {number}\n                 * @default   1000\n                 * @since     5.0.3\n                 * @apioption lang.numericSymbolMagnitude\n                 */\n                /**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoom: 'Reset zoom',\n                /**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoomTitle: 'Reset zoom level 1:1',\n                /**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to a single space character, which is recommended in\n                 * [ISO 31-0](https://en.wikipedia.org/wiki/ISO_31-0#Numbers) and works\n                 * across Anglo-American and continental European languages.\n                 *\n                 * @default \\u0020\n                 * @since   1.2.2\n                 */\n                thousandsSep: ' '\n            },\n            /**\n             * Global options that don't apply to each chart. These options, like\n             * the `lang` options, must be set using the `Highcharts.setOptions`\n             * method.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     global: {\n             *         buttonTheme: {\n             *             fill: '#d0d0d0'\n             *         }\n             *     }\n             * });\n             * ```\n             */\n            global: {\n                /**\n                 * _Canvg rendering for Android 2.x is removed as of Highcharts 5.0\\.\n                 * Use the [libURL](#exporting.libURL) option to configure exporting._\n                 *\n                 * The URL to the additional file to lazy load for Android 2.x devices.\n                 * These devices don't support SVG, so we download a helper file that\n                 * contains [canvg](https://github.com/canvg/canvg), its dependency\n                 * rbcolor, and our own CanVG Renderer class. To avoid hotlinking to\n                 * our site, you can install canvas-tools.js on your own server and\n                 * change this option accordingly.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {string}\n                 * @default   https://code.highcharts.com/{version}/modules/canvas-tools.js\n                 * @product   highcharts highmaps\n                 * @apioption global.canvasToolsURL\n                 */\n                /**\n                 * This option is deprecated since v6.0.5. Instead, use\n                 * [time.useUTC](#time.useUTC) that supports individual time settings\n                 * per chart.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {boolean}\n                 * @apioption global.useUTC\n                 */\n                /**\n                 * This option is deprecated since v6.0.5. Instead, use\n                 * [time.Date](#time.Date) that supports individual time settings\n                 * per chart.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Function}\n                 * @product   highcharts highstock\n                 * @apioption global.Date\n                 */\n                /**\n                 * This option is deprecated since v6.0.5. Instead, use\n                 * [time.getTimezoneOffset](#time.getTimezoneOffset) that supports\n                 * individual time settings per chart.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Function}\n                 * @product   highcharts highstock\n                 * @apioption global.getTimezoneOffset\n                 */\n                /**\n                 * This option is deprecated since v6.0.5. Instead, use\n                 * [time.timezone](#time.timezone) that supports individual time\n                 * settings per chart.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {string}\n                 * @product   highcharts highstock\n                 * @apioption global.timezone\n                 */\n                /**\n                 * This option is deprecated since v6.0.5. Instead, use\n                 * [time.timezoneOffset](#time.timezoneOffset) that supports individual\n                 * time settings per chart.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {number}\n                 * @product   highcharts highstock\n                 * @apioption global.timezoneOffset\n                 */\n                /**\n                 * General theme for buttons. This applies to the zoom button, exporting\n                 * context menu, map navigation, range selector buttons and custom\n                 * buttons generated using the `SVGRenderer.button` function. However,\n                 * each of these may be overridden with more specific options.\n                 *\n                 * @sample highcharts/global/buttontheme\n                 *         General button theme\n                 * @since 11.4.2\n                 */\n                buttonTheme: {\n                    /**\n                     * The fill color for buttons\n                     */\n                    fill: \"#f7f7f7\" /* Palette.neutralColor3 */,\n                    /**\n                     * The padding of buttons\n                     */\n                    padding: 8,\n                    /**\n                     * The border radius for buttons\n                     */\n                    r: 2,\n                    /**\n                     * The stroke color for buttons\n                     */\n                    stroke: \"#cccccc\" /* Palette.neutralColor20 */,\n                    /**\n                     * The stroke width for buttons\n                     */\n                    'stroke-width': 1,\n                    /**\n                     * CSS styling for the buttons' text\n                     */\n                    style: {\n                        color: \"#333333\" /* Palette.neutralColor80 */,\n                        cursor: 'pointer',\n                        fontSize: '0.8em',\n                        fontWeight: 'normal'\n                    },\n                    /**\n                     * State overrides for the buttons\n                     */\n                    states: {\n                        /**\n                         * Hover state overrides for the buttons are applied in addition\n                         * to the normal state options\n                         */\n                        hover: {\n                            fill: \"#e6e6e6\" /* Palette.neutralColor10 */\n                        },\n                        /**\n                         * Select state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        select: {\n                            fill: \"#e6e9ff\" /* Palette.highlightColor10 */,\n                            style: {\n                                color: \"#000000\" /* Palette.neutralColor100 */,\n                                fontWeight: 'bold'\n                            }\n                        },\n                        /**\n                         * Disabled state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        disabled: {\n                            /**\n                             * Disabled state CSS style overrides for the buttons' text\n                             */\n                            style: {\n                                color: \"#cccccc\" /* Palette.neutralColor20 */\n                            }\n                        }\n                    }\n                }\n            },\n            /**\n             * Time options that can apply globally or to individual charts. These\n             * settings affect how `datetime` axes are laid out, how tooltips are\n             * formatted, how series\n             * [pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\n             * the Highcharts Stock range selector handles time.\n             *\n             * The common use case is that all charts in the same Highcharts object\n             * share the same time settings, in which case the global settings are set\n             * using `setOptions`.\n             *\n             * ```js\n             * // Apply time settings globally\n             * Highcharts.setOptions({\n             *     time: {\n             *         timezone: 'Europe/London'\n             *     }\n             * });\n             * // Apply time settings by instance\n             * let chart = Highcharts.chart('container', {\n             *     time: {\n             *         timezone: 'America/New_York'\n             *     },\n             *     series: [{\n             *         data: [1, 4, 3, 5]\n             *     }]\n             * });\n             *\n             * // Use the Time object\n             * console.log(\n             *        'Current time in New York',\n             *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n             * );\n             * ```\n             *\n             * Since v6.0.5, the time options were moved from the `global` object to the\n             * `time` object, and time options can be set on each individual chart.\n             *\n             * @sample {highcharts|highstock}\n             *         highcharts/time/timezone/\n             *         Set the timezone globally\n             * @sample {highcharts}\n             *         highcharts/time/individual/\n             *         Set the timezone per chart instance\n             * @sample {highstock}\n             *         stock/time/individual/\n             *         Set the timezone per chart instance\n             *\n             * @since     6.0.5\n             * @optionparent time\n             */\n            time: {\n                /**\n                 * A custom `Date` class for advanced date handling. For example,\n                 * [JDate](https://github.com/tahajahangir/jdate) can be hooked in to\n                 * handle Jalali dates.\n                 *\n                 * @type      {*}\n                 * @since     4.0.4\n                 * @product   highcharts highstock gantt\n                 */\n                Date: void 0,\n                /**\n                 * A callback to return the time zone offset for a given datetime. It\n                 * takes the timestamp in terms of milliseconds since January 1 1970,\n                 * and returns the timezone offset in minutes. This provides a hook\n                 * for drawing time based charts in specific time zones using their\n                 * local DST crossover dates, with the help of external libraries.\n                 *\n                 * This option is deprecated as of v11.4.1 and will be removed in a\n                 * future release. Use the [time.timezone](#time.timezone) option\n                 * instead.\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/gettimezoneoffset/\n                 *         Use moment.js to draw Oslo time regardless of browser locale\n                 *\n                 * @type      {Highcharts.TimezoneOffsetCallbackFunction}\n                 * @since     4.1.0\n                 * @deprecated 11.4.2\n                 * @product   highcharts highstock gantt\n                 */\n                getTimezoneOffset: void 0,\n                /**\n                 * A named time zone. Supported time zone names rely on the browser\n                 * implementations, as described in the [mdn\n                 * docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#timezone).\n                 * If the given time zone is not recognized by the browser, Highcharts\n                 * provides a warning and falls back to returning a 0 offset,\n                 * corresponding to the UTC time zone.\n                 *\n                 * Until v11.2.0, this option depended on moment.js.\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezone/ Europe/Oslo\n                 *\n                 * @type      {string}\n                 * @since     5.0.7\n                 * @product   highcharts highstock gantt\n                 */\n                timezone: void 0,\n                /**\n                 * The timezone offset in minutes. Positive values are west, negative\n                 * values are east of UTC, as in the ECMAScript\n                 * [getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n                 * method. Use this to display UTC based data in a predefined time zone.\n                 *\n                 * This option is deprecated as of v11.4.1 and will be removed in a\n                 * future release. Use the [time.timezone](#time.timezone) option\n                 * instead.\n                 *\n                 * @see [time.getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezoneoffset/\n                 *         Timezone offset\n                 *\n                 * @since     3.0.8\n                 * @deprecated 11.4.2\n                 * @product   highcharts highstock gantt\n                 */\n                timezoneOffset: 0,\n                /**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * @sample {highcharts} highcharts/time/useutc-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/time/useutc-false/\n                 *         False\n                 */\n                useUTC: true\n            },\n            chart: ChartDefaults,\n            /**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/\n             *         Title options demonstrated\n             */\n            title: {\n                /**\n                 * When the title is floating, the plot area will not move to make space\n                 * for it.\n                 *\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/\n                 *         False by default\n                 * @sample {highcharts} highcharts/title/floating/\n                 *         True - title on top of the plot area\n                 * @sample {highstock} stock/chart/title-floating/\n                 *         True - title on top of the plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption title.floating\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption title.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\n                 * as if [floating](#title.floating) were `true`.\n                 *\n                 * @sample {highcharts} highcharts/title/verticalalign/\n                 *         Chart title in bottom right corner\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption title.verticalAlign\n                 */\n                /**\n                 * The x position of the title relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption title.x\n                 */\n                /**\n                 * The y position of the title relative to the alignment within\n                 * [chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](\n                 * #chart.spacingBottom). By default it depends on the font size.\n                 *\n                 * @sample {highcharts} highcharts/title/y/\n                 *         Title inside the plot area\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption title.y\n                 */\n                /**\n                 * CSS styles for the title. Use this for font styling, but use `align`,\n                 * `x` and `y` for text alignment.\n                 *\n                 * In styled mode, the title style is given in the `.highcharts-title`\n                 * class.\n                 *\n                 * @sample {highcharts} highcharts/title/style/\n                 *         Custom color and weight\n                 * @sample {highstock} stock/chart/title-style/\n                 *         Custom color and weight\n                 * @sample highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {highcharts|highmaps} { \"color\": \"#333333\", \"fontSize\": \"18px\" }\n                 * @default   {highstock} { \"color\": \"#333333\", \"fontSize\": \"16px\" }\n                 */\n                style: {\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    fontWeight: 'bold'\n                },\n                /**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `undefined`.\n                 *\n                 * @sample {highcharts} highcharts/title/text/\n                 *         Custom title\n                 * @sample {highstock} stock/chart/title-text/\n                 *         Custom title\n                 *\n                 * @default {highcharts|highmaps} Chart title\n                 * @default {highstock} undefined\n                 */\n                text: 'Chart title',\n                /**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @sample {highcharts} highcharts/title/margin-50/\n                 *         A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/\n                 *         The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/\n                 *         A chart title margin of 50\n                 *\n                 * @since 2.1\n                 */\n                margin: 15,\n                /**\n                 * Adjustment made to the title width, normally to reserve space for\n                 * the exporting burger menu.\n                 *\n                 * @sample highcharts/title/widthadjust/\n                 *         Wider menu, greater padding\n                 *\n                 * @since 4.2.5\n                 */\n                widthAdjust: -44\n            },\n            /**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highmaps} maps/title/subtitle/\n             *         Subtitle options demonstrated\n             */\n            subtitle: {\n                /**\n                 * When the subtitle is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/floating/\n                 *         Floating title and subtitle\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote floating at bottom right of plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption subtitle.floating\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 * @apioption subtitle.style\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption subtitle.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\n                 * floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption subtitle.verticalAlign\n                 */\n                /**\n                 * The x position of the subtitle relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption subtitle.x\n                 */\n                /**\n                 * The y position of the subtitle relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\n                 * is laid out below the title unless the title is floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption subtitle.y\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The subtitle of the chart.\n                 *\n                 * @sample {highcharts|highstock} highcharts/subtitle/text/\n                 *         Custom subtitle\n                 * @sample {highcharts|highstock} highcharts/subtitle/text-formatted/\n                 *         Formatted and linked text.\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at bottom right of plot area\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * Adjustment made to the subtitle width, normally to reserve space\n                 * for the exporting burger menu.\n                 *\n                 * @see [title.widthAdjust](#title.widthAdjust)\n                 *\n                 * @sample highcharts/title/widthadjust/\n                 *         Wider menu, greater padding\n                 *\n                 * @since 4.2.5\n                 */\n                widthAdjust: -44\n            },\n            /**\n             * The chart's caption, which will render below the chart and will be part\n             * of exported charts. The caption can be updated after chart initialization\n             * through the `Chart.update` or `Chart.caption.update` methods.\n             *\n             * @sample highcharts/caption/text/\n             *         A chart with a caption\n             * @since  7.2.0\n             */\n            caption: {\n                /**\n                 * When the caption is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.floating\n                 */\n                /**\n                 * The margin between the caption and the plot area.\n                 */\n                margin: 15,\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.useHTML\n                 */\n                /**\n                 * The x position of the caption relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption caption.x\n                 */\n                /**\n                 * The y position of the caption relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`.\n                 *\n                 * @type      {number}\n                 * @apioption caption.y\n                 */\n                /**\n                 * CSS styles for the caption.\n                 *\n                 * In styled mode, the caption style is given in the\n                 * `.highcharts-caption` class.\n                 *\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The caption text of the chart.\n                 *\n                 * @sample {highcharts} highcharts/caption/text/\n                 *         Custom caption\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the caption. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * The vertical alignment of the caption. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\n                 * floating.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'bottom'\n            },\n            /**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](\n             * #plotOptions.series) object. Then options for all series of a specific\n             * type are given in the plotOptions of that type, for example\n             * `plotOptions.line`. Next, options for one single series are given in\n             * [the series array](#series).\n             */\n            plotOptions: {},\n            /**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and create\n             * [custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */\n            legend: {\n                /**\n                 * The background color of the legend.\n                 *\n                 * @see In styled mode, the legend background fill can be applied with\n                 *      the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/backgroundcolor/\n                 *         Yellowish background\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption legend.backgroundColor\n                 */\n                /**\n                 * The width of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke width can be applied\n                 *      with the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderwidth/\n                 *         2px border width\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption legend.borderWidth\n                 */\n                /**\n                 * Enable or disable the legend. There is also a series-specific option,\n                 * [showInLegend](#plotOptions.series.showInLegend), that can hide the\n                 * series from the legend. In some series types this is `false` by\n                 * default, so it must set to `true` in order to show the legend for the\n                 * series.\n                 *\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 *\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @default {gantt} false\n                 */\n                enabled: true,\n                /**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/align/\n                 *         Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * If the [layout](legend.layout) is `horizontal` and the legend items\n                 * span over two lines or more, whether to align the items into vertical\n                 * columns. Setting this to `false` makes room for more items, but will\n                 * look more messy.\n                 *\n                 * @since 6.1.0\n                 */\n                alignColumns: true,\n                /**\n                 * A CSS class name to apply to the legend group.\n                 */\n                className: 'highcharts-no-tooltip',\n                /**\n                 * General event handlers for the legend. These event hooks can\n                 * also be attached to the legend at run time using the\n                 * `Highcharts.addEvent` function.\n                 *\n                 * @declare Highcharts.LegendEventsOptionsObject\n                 *\n                 * @private\n                 */\n                events: {},\n                /**\n                 * Fires when the legend item belonging to the series is clicked. One\n                 * parameter, `event`, is passed to the function. The default action\n                 * is to toggle the visibility of the series, point or data class. This\n                 * can be prevented by returning `false` or calling\n                 * `event.preventDefault()`.\n                 *\n                 * @sample {highcharts} highcharts/legend/series-legend-itemclick/\n                 *         Confirm hiding and showing\n                 * @sample {highcharts} highcharts/legend/pie-legend-itemclick/\n                 *         Confirm toggle visibility of pie slices\n                 *\n                 * @type      {Highcharts.LegendItemClickCallbackFunction}\n                 * @context   Highcharts.Legend\n                 * @apioption legend.events.itemClick\n                 */\n                /**\n                 * When the legend is floating, the plot area ignores it and is allowed\n                 * to be placed below it.\n                 *\n                 * @sample {highcharts} highcharts/legend/floating-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/legend/floating-true/\n                 *         True\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Floating legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption legend.floating\n                 */\n                /**\n                 * The layout of the legend items. Can be one of `horizontal` or\n                 * `vertical` or `proximate`. When `proximate`, the legend items will be\n                 * placed as close as possible to the graphs they're representing,\n                 * except in inverted charts or when the legend position doesn't allow\n                 * it.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/\n                 *         Vertical\n                 * @sample highcharts/legend/layout-proximate\n                 *         Labels proximate to the data\n                 * @sample {highstock} stock/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/\n                 *         Vertical with color axis gradient\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\", \"proximate\"]\n                 */\n                layout: 'horizontal',\n                /**\n                 * In a legend with horizontal layout, the itemDistance defines the\n                 * pixel distance between each item.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 * @sample {highstock} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 *\n                 * @type      {number}\n                 * @default   {highcharts} 20\n                 * @default   {highstock} 20\n                 * @default   {highmaps} 8\n                 * @since     3.0.3\n                 * @apioption legend.itemDistance\n                 */\n                /**\n                 * The pixel bottom margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginBottom: 2,\n                /**\n                 * The pixel top margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginTop: 2,\n                /**\n                 * The width for each legend item. By default the items are laid out\n                 * successively. In a [horizontal layout](legend.layout), if the items\n                 * are laid out across two rows or more, they will be vertically aligned\n                 * depending on the [legend.alignColumns](legend.alignColumns) option.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemwidth-default/\n                 *         Undefined by default\n                 * @sample {highcharts} highcharts/legend/itemwidth-80/\n                 *         80 for aligned legend items\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption legend.itemWidth\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for each legend label. Available variables relates to properties on\n                 * the series, or the point in case of pies.\n                 *\n                 * @type      {string}\n                 * @default   {name}\n                 * @since     1.3\n                 * @apioption legend.labelFormat\n                 */\n                /* eslint-disable valid-jsdoc */\n                /**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case of\n                 * pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps the context can also be a data class in case of a\n                 * `colorAxis`.\n                 *\n                 * @sample {highcharts} highcharts/legend/labelformatter/\n                 *         Add text\n                 * @sample {highmaps} maps/legend/labelformatter/\n                 *         Data classes with label formatter\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Point|Series>}\n                 */\n                labelFormatter: function () {\n                    // eslint-enable valid-jsdoc\n                    return this.name;\n                },\n                /**\n                 * Line height for the legend items. Deprecated as of 2.1\\. Instead,\n                 * the line height for each item can be set using\n                 * `itemStyle.lineHeight`, and the padding between items using\n                 * `itemMarginTop` and `itemMarginBottom`.\n                 *\n                 * @sample {highcharts} highcharts/legend/lineheight/\n                 *         Setting padding\n                 *\n                 * @deprecated\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @since     2.0\n                 * @product   highcharts gantt\n                 * @apioption legend.lineHeight\n                 */\n                /**\n                 * If the plot area sized is calculated automatically and the legend is\n                 * not floating, the legend margin is the space between the legend and\n                 * the axis labels or plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/margin-default/\n                 *         12 pixels by default\n                 * @sample {highcharts} highcharts/legend/margin-30/\n                 *         30 pixels\n                 *\n                 * @type      {number}\n                 * @default   12\n                 * @since     2.1\n                 * @apioption legend.margin\n                 */\n                /**\n                 * Maximum pixel height for the legend. When the maximum height is\n                 * extended, navigation will show.\n                 *\n                 * @type      {number}\n                 * @since     2.3.0\n                 * @apioption legend.maxHeight\n                 */\n                /**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke can be applied with the\n                 *      `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/bordercolor/\n                 *         Brown border\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                /**\n                 * The border corner radius of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderradius-default/\n                 *         Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/\n                 *         5px rounded\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 */\n                borderRadius: 0,\n                /**\n                 * Options for the paging or navigation appearing when the legend is\n                 * overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to\n                 * [increase the chart height in\n                 * export](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/).\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 */\n                navigation: {\n                    /**\n                     * How to animate the pages when navigating up or down. A value of\n                     * `true` applies the default navigation given in the\n                     * `chart.animation` option. Additional options can be given as an\n                     * object containing values for easing and duration.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @default   true\n                     * @since     2.2.4\n                     * @apioption legend.navigation.animation\n                     */\n                    /**\n                     * The pixel size of the up and down arrows in the legend paging\n                     * navigation.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {number}\n                     * @default   12\n                     * @since     2.2.4\n                     * @apioption legend.navigation.arrowSize\n                     */\n                    /**\n                     * Whether to enable the legend navigation. In most cases, disabling\n                     * the navigation results in an unwanted overflow.\n                     *\n                     * See also the\n                     * [adapt chart to legend](https://github.com/highcharts/adapt-chart-to-legend)\n                     * plugin for a solution to extend the chart height to make room for\n                     * the legend, optionally in exported charts only.\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     4.2.4\n                     * @apioption legend.navigation.enabled\n                     */\n                    /**\n                     * Text styles for the legend page navigation.\n                     *\n                     * @see In styled mode, the navigation items are styled with the\n                     *      `.highcharts-legend-navigation` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {Highcharts.CSSObject}\n                     * @since     2.2.4\n                     * @apioption legend.navigation.style\n                     */\n                    style: {\n                        fontSize: '0.8em'\n                    },\n                    /**\n                     * The color for the active up or down arrow in the legend page\n                     * navigation.\n                     *\n                     * @see In styled mode, the active arrow be styled with the\n                     *      `.highcharts-legend-nav-active` class.\n                     *\n                     * @sample  {highcharts} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     * @sample  {highstock} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    activeColor: \"#0022ff\" /* Palette.highlightColor100 */,\n                    /**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @see In styled mode, the inactive arrow be styled with the\n                     *      `.highcharts-legend-nav-inactive` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    inactiveColor: \"#cccccc\" /* Palette.neutralColor20 */\n                },\n                /**\n                 * The inner padding of the legend box.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @type      {number}\n                 * @default   8\n                 * @since     2.2.0\n                 * @apioption legend.padding\n                 */\n                /**\n                 * Whether to reverse the order of the legend items compared to the\n                 * order of the series or points as defined in the configuration object.\n                 *\n                 * @see [yAxis.reversedStacks](#yAxis.reversedStacks),\n                 *      [series.legendIndex](#series.legendIndex)\n                 *\n                 * @sample {highcharts} highcharts/legend/reversed/\n                 *         Stacked bar with reversed legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.2.5\n                 * @apioption legend.reversed\n                 */\n                /**\n                 * Whether to show the symbol on the right side of the text rather than\n                 * the left side. This is common in Arabic and Hebrew.\n                 *\n                 * @sample {highcharts} highcharts/legend/rtl/\n                 *         Symbol to the right\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption legend.rtl\n                 */\n                /**\n                 * CSS styles for the legend area. In the 1.x versions the position\n                 * of the legend area was determined by CSS. In 2.x, the position is\n                 * determined by properties like `align`, `verticalAlign`, `x` and `y`,\n                 * but the styles are still parsed for backwards compatibility.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @product   highcharts highstock\n                 * @apioption legend.style\n                 */\n                /**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `undefined` to wrap\n                 * text instead. A `width` property can be added to control the text\n                 * width.\n                 *\n                 * @see In styled mode, the legend items can be styled with the\n                 *      `.highcharts-legend-item` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemstyle/\n                 *         Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"0.8em\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}\n                 */\n                itemStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /**\n                     * @ignore\n                     */\n                    cursor: 'pointer',\n                    /**\n                     * @ignore\n                     */\n                    fontSize: '0.8em',\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'none',\n                    /**\n                     * @ignore\n                     */\n                    textOverflow: 'ellipsis'\n                },\n                /**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @see In styled mode, the hovered legend items can be styled with\n                 *      the `.highcharts-legend-item:hover` pseudo-class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/\n                 *         Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#000000\"}\n                 */\n                itemHoverStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @see In styled mode, the hidden legend items can be styled with\n                 *      the `.highcharts-legend-item-hidden` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/\n                 *         Darker gray color\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#cccccc\"}\n                 */\n                itemHiddenStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'line-through'\n                },\n                /**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {boolean|Highcharts.CSSObject}\n                 */\n                shadow: false,\n                /**\n                 * Default styling for the checkbox next to a legend item when\n                 * `showCheckbox` is true.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 * @default {\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}\n                 */\n                itemCheckboxStyle: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    width: '13px', // For IE precision\n                    /**\n                     * @ignore\n                     */\n                    height: '13px'\n                },\n                /// itemWidth: undefined,\n                /**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @since 5.0.0\n                 */\n                squareSymbol: true,\n                /**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * Note: This option is a default source of color axis height, if the\n                 * [colorAxis.height](https://api.highcharts.com/highcharts/colorAxis.height)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolHeight\n                 */\n                /**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`, effectively\n                 * creating a circle.\n                 *\n                 * For color axis scales, it defaults to 3.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolRadius\n                 */\n                /**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * Note: This option is a default source of color axis width, if the\n                 * [colorAxis.width](https://api.highcharts.com/highcharts/colorAxis.width)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 *\n                 * @type      {number}\n                 * @apioption legend.symbolWidth\n                 */\n                /**\n                 * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the legend item texts.\n                 *\n                 * Prior to 4.1.7, when using HTML, [legend.navigation](\n                 * #legend.navigation) was disabled.\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption legend.useHTML\n                 */\n                /**\n                 * For a color axis with data classes, how many decimals to render in\n                 * the legend. The default preserves the decimals of the range numbers.\n                 *\n                 * @type      {number}\n                 * @default   -1\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueDecimals\n                 */\n                /**\n                 * For a color axis with data classes, a suffix for the range numbers in\n                 * the legend.\n                 *\n                 * @type      {string}\n                 * @default   ''\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueSuffix\n                 */\n                /**\n                 * The width of the legend box. If a number is set, it translates to\n                 * pixels. Since v7.0.2 it allows setting a percent string of the full\n                 * chart width, for example `40%`.\n                 *\n                 * Defaults to the full chart width for legends below or above the\n                 * chart, half the chart width for legends to the left and right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 * @sample {highcharts} highcharts/legend/width-percent/\n                 *         A percent of the chart width\n                 *\n                 * @type      {number|string}\n                 * @since     2.0\n                 * @apioption legend.width\n                 */\n                /**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolpadding/\n                 *         Greater symbol width and padding\n                 */\n                symbolPadding: 5,\n                /**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * When the [layout](#legend.layout) option is `proximate`, the\n                 * `verticalAlign` option doesn't apply.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'bottom',\n                // Width: undefined,\n                /**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 *\n                 * @since 2.0\n                 */\n                x: 0,\n                /**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @since 2.0\n                 */\n                y: 0,\n                /**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/\n                 *         Legend title\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend with title\n                 *\n                 * @since 3.0\n                 */\n                title: {\n                    /**\n                     * A text or HTML string for the title.\n                     *\n                     * @type      {string}\n                     * @since     3.0\n                     * @apioption legend.title.text\n                     */\n                    /**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @see In styled mode, the legend title is styled with the\n                     *      `.highcharts-legend-title` class.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"fontSize\": \"0.8em\", \"fontWeight\": \"bold\"}\n                     * @since   3.0\n                     */\n                    style: {\n                        /**\n                         * @ignore\n                         */\n                        fontSize: '0.8em',\n                        /**\n                         * @ignore\n                         */\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            /**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             */\n            loading: {\n                /**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.hideDuration\n                 */\n                /**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.showDuration\n                 */\n                /**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @see In styled mode, the loading label is styled with the\n                 *      `.highcharts-loading-inner` class.\n                 *\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/\n                 *         Vertically centered\n                 * @sample {highstock} stock/loading/general/\n                 *         Label styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}\n                 * @since   1.2.0\n                 */\n                labelStyle: {\n                    /**\n                     * @ignore\n                     */\n                    fontWeight: 'bold',\n                    /**\n                     * @ignore\n                     */\n                    position: 'relative',\n                    /**\n                     * @ignore\n                     */\n                    top: '45%'\n                },\n                /**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * In styled mode, the loading label is styled with the\n                 * `.highcharts-loading` class.\n                 *\n                 * @sample  {highcharts|highmaps} highcharts/loading/style/\n                 *          Gray plot area, white text\n                 * @sample  {highstock} stock/loading/general/\n                 *          Gray plot area, white text\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}\n                 * @since   1.2.0\n                 */\n                style: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                    /**\n                     * @ignore\n                     */\n                    opacity: 0.5,\n                    /**\n                     * @ignore\n                     */\n                    textAlign: 'center'\n                }\n            },\n            /**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @declare Highcharts.TooltipOptions\n             */\n            tooltip: {\n                /**\n                 * The color of the tooltip border. When `undefined`, the border takes\n                 * the color of the corresponding series or point.\n                 *\n                 * Note that the [borderWidth](#tooltip.borderWidth) is usually 0 by\n                 * default, so the border color may not be visible until a border width\n                 * is set.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ Follow\n                 *         series by default\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-black/ Black\n                 *         border\n                 * @sample {highstock} stock/tooltip/general/ Styled tooltip\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and\n                 *         border demo\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption tooltip.borderColor\n                 */\n                /**\n                 * A CSS class name to apply to the tooltip's container div,\n                 * allowing unique CSS styling for each chart.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.className\n                 */\n                /**\n                 * Since 4.1, the crosshair definitions are moved to the Axis object\n                 * in order for a better separation from the tooltip. See\n                 * [xAxis.crosshair](#xAxis.crosshair).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/crosshairs-x/\n                 *         Enable a crosshair for the x value\n                 *\n                 * @deprecated\n                 *\n                 * @type      {*}\n                 * @default   true\n                 * @apioption tooltip.crosshairs\n                 */\n                /**\n                 * Distance from point to tooltip in pixels.\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @apioption tooltip.distance\n                 */\n                /**\n                 * Whether the tooltip should follow the mouse as it moves across\n                 * columns, pie slices and other point types with an extent.\n                 * By default it behaves this way for pie, polygon, map, sankey\n                 * and wordcloud series by override in the `plotOptions`\n                 * for those series types.\n                 *\n                 * Does not apply if [split](#tooltip.split) is `true`.\n                 *\n                 * For touch moves to behave the same way, [followTouchMove](\n                 * #tooltip.followTouchMove) must be `true` also.\n                 *\n                 * @sample highcharts/tooltip/followpointer/\n                 *         Tooltip follow pointer comparison\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} false\n                 * @default   {highmaps} true\n                 * @since     3.0\n                 * @apioption tooltip.followPointer\n                 */\n                /**\n                 * Whether the tooltip should update as the finger moves on a touch\n                 * device. If this is `true` and [chart.panning](#chart.panning) is\n                 * set,`followTouchMove` will take over one-finger touches, so the user\n                 * needs to use two fingers for zooming and panning.\n                 *\n                 * Note the difference to [followPointer](#tooltip.followPointer) that\n                 * only defines the _position_ of the tooltip. If `followPointer` is\n                 * false in for example a column series, the tooltip will show above or\n                 * below the column, but as `followTouchMove` is true, the tooltip will\n                 * jump from column to column as the user swipes across the plot area.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} true\n                 * @default   {highstock} true\n                 * @default   {highmaps} false\n                 * @since     3.0.1\n                 * @apioption tooltip.followTouchMove\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for the whole shared tooltip. When format strings are a requirement,\n                 * it is usually more convenient to use `headerFormat`, `pointFormat`\n                 * and `footerFormat`, but the `format` option allows combining them\n                 * into one setting.\n                 *\n                 * The context of the format string is the same as that of the\n                 * `tooltip.formatter` callback.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/format-shared/\n                 *         Format for shared tooltip\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     11.1.0\n                 * @apioption tooltip.format\n                 */\n                /**\n                 * Callback function to format the text of the tooltip from scratch. In\n                 * case of single or [shared](#tooltip.shared) tooltips, a string should\n                 * be returned. In case of [split](#tooltip.split) tooltips, it should\n                 * return an array where the first item is the header, and subsequent\n                 * items are mapped to the points. Return `false` to disable tooltip for\n                 * a specific point on series.\n                 *\n                 * A subset of HTML is supported. Unless `useHTML` is true, the HTML of\n                 * the tooltip is parsed and converted to SVG, therefore this isn't a\n                 * complete HTML renderer. The following HTML tags are supported: `b`,\n                 * `br`, `em`, `i`, `span`, `strong`. Spans can be styled with a `style`\n                 * attribute, but only text-related CSS, that is shared with SVG, is\n                 * handled.\n                 *\n                 * The available data in the formatter differ a bit depending on whether\n                 * the tooltip is shared or split, or belongs to a single point. In a\n                 * shared/split tooltip, all properties except `x`, which is common for\n                 * all points, are kept in an array, `this.points`.\n                 *\n                 * Available data are:\n                 *\n                 * - **this.percentage (not shared) /**\n                 *   **this.points[i].percentage (shared)**:\n                 *   Stacked series and pies only. The point's percentage of the total.\n                 *\n                 * - **this.point (not shared) / this.points[i].point (shared)**:\n                 *   The point object. The point name, if defined, is available through\n                 *   `this.point.name`.\n                 *\n                 * - **this.points**:\n                 *   In a shared tooltip, this is an array containing all other\n                 *   properties for each point.\n                 *\n                 * - **this.series (not shared) / this.points[i].series (shared)**:\n                 *   The series object. The series name is available through\n                 *   `this.series.name`.\n                 *\n                 * - **this.total (not shared) / this.points[i].total (shared)**:\n                 *   Stacked series only. The total value at this point's x value.\n                 *\n                 * - **this.x**:\n                 *   The x value. This property is the same regardless of the tooltip\n                 *   being shared or not.\n                 *\n                 * - **this.y (not shared) / this.points[i].y (shared)**:\n                 *   The y value.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/formatter-simple/\n                 *         Simple string formatting\n                 * @sample {highcharts} highcharts/tooltip/formatter-shared/\n                 *         Formatting with shared tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Formatting with split tooltip\n                 * @sample highcharts/tooltip/formatter-conditional-default/\n                 *         Extending default formatter\n                 * @sample {highstock} stock/tooltip/formatter/\n                 *         Formatting with shared tooltip\n                 * @sample {highmaps} maps/tooltip/formatter/\n                 *         String formatting\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.formatter\n                 */\n                /**\n                 * Callback function to format the text of the tooltip for\n                 * visible null points.\n                 * Works analogously to [formatter](#tooltip.formatter).\n                 *\n                 * @sample highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.nullFormatter\n                 */\n                /**\n                 * Whether to allow the tooltip to render outside the chart's SVG\n                 * element box. By default (`false`), the tooltip is rendered within the\n                 * chart's SVG element, which results in the tooltip being aligned\n                 * inside the chart area. For small charts, this may result in clipping\n                 * or overlapping. When `true`, a separate SVG element is created and\n                 * overlaid on the page, allowing the tooltip to be aligned inside the\n                 * page itself.\n                 *\n                 * Defaults to `true` if `chart.scrollablePlotArea` is activated,\n                 * otherwise `false`.\n                 *\n                 * @sample highcharts/tooltip/outside\n                 *         Small charts with tooltips outside\n                 *\n                 * @type      {boolean|undefined}\n                 * @default   undefined\n                 * @since     6.1.1\n                 * @apioption tooltip.outside\n                 */\n                /**\n                 * A callback function for formatting the HTML output for a single point\n                 * in the tooltip. Like the `pointFormat` string, but with more\n                 * flexibility.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n                 * @since     4.1.0\n                 * @context   Highcharts.Point\n                 * @apioption tooltip.pointFormatter\n                 */\n                /**\n                 * A callback function to place the tooltip in a custom position. The\n                 * callback receives three parameters: `labelWidth`, `labelHeight` and\n                 * `point`, where point contains values for `plotX` and `plotY` telling\n                 * where the reference point is in the plot area. Add `chart.plotLeft`\n                 * and `chart.plotTop` to get the full coordinates.\n                 *\n                 * To find the actual hovered `Point` instance, use\n                 * `this.chart.hoverPoint`. For shared or split tooltips, all the hover\n                 * points are available in `this.chart.hoverPoints`.\n                 *\n                 * Since v7, when [tooltip.split](#tooltip.split) option is enabled,\n                 * positioner is called for each of the boxes separately, including\n                 * xAxis header. xAxis header is not a point, instead `point` argument\n                 * contains info: `{ plotX: Number, plotY: Number, isHeader: Boolean }`\n                 *\n                 * The return should be an object containing x and y values, for example\n                 * `{ x: 100, y: 100 }`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/positioner/\n                 *         A fixed tooltip position on top of the chart\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Split tooltip with fixed positions\n                 * @sample {highstock} stock/tooltip/positioner-scrollable-plotarea/\n                 *         Scrollable plot area combined with tooltip positioner\n                 *\n                 * @type      {Highcharts.TooltipPositionerCallbackFunction}\n                 * @since     2.2.4\n                 * @apioption tooltip.positioner\n                 */\n                /**\n                 * Split the tooltip into one label per series, with the header close\n                 * to the axis. This is recommended over [shared](#tooltip.shared)\n                 * tooltips for charts with multiple line series, generally making them\n                 * easier to read. This option takes precedence over `tooltip.shared`.\n                 *\n                 * Not supported for [polar](#chart.polar) and [inverted](#chart.inverted) charts.\n                 *\n                 * @productdesc {highstock} In Highcharts Stock, tooltips are split\n                 * by default since v6.0.0. Stock charts typically contain\n                 * multi-dimension points and multiple panes, making split tooltips\n                 * the preferred layout over\n                 * the previous `shared` tooltip.\n                 *\n                 * @sample highcharts/tooltip/split/\n                 *         Split tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Split tooltip and custom formatter callback\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} true\n                 * @since     5.0.0\n                 * @product   highcharts highstock\n                 * @apioption tooltip.split\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing, when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @type      {boolean}\n                 * @since     8.0.1\n                 * @apioption tooltip.stickOnContact\n                 */\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption tooltip.useHTML\n                 */\n                /**\n                 * How many decimals to show in each series' y value. This is\n                 * overridable in each series' tooltip options object. The default is to\n                 * preserve all decimals.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {number|undefined}\n                 * @since     2.2\n                 * @apioption tooltip.valueDecimals\n                 */\n                /**\n                 * A string to prepend to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valuePrefix\n                 */\n                /**\n                 * A string to append to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valueSuffix\n                 */\n                /**\n                 * The format for the date in the tooltip header if the X axis is a\n                 * datetime axis. The default is a best guess based on the smallest\n                 * distance between points in the chart.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/xdateformat/\n                 *         A different format\n                 *\n                 * @type      {string}\n                 * @product   highcharts highstock gantt\n                 * @apioption tooltip.xDateFormat\n                 */\n                /**\n                 * How many decimals to show for the `point.change`\n                 * or the `point.cumulativeSum` value when the `series.compare`\n                 * or the `series.cumulative` option is set.\n                 * This is overridable in each series' tooltip options object.\n                 *\n                 * @type      {number}\n                 * @default   2\n                 * @since     1.0.1\n                 * @product   highstock\n                 * @apioption tooltip.changeDecimals\n                 */\n                /**\n                 * Enable or disable the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/enabled/\n                 *         Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n                 *         Disable tooltip and show values on chart instead\n                 */\n                enabled: true,\n                /**\n                 * Enable or disable animation of the tooltip.\n                 *\n                 * @type       {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                 * @since      2.3.0\n                 */\n                animation: {\n                    duration: 300,\n                    // EaseOutCirc\n                    easing: (x) => Math.sqrt(1 - Math.pow(x - 1, 2))\n                },\n                /**\n                 * The radius of the rounded border corners.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         Default border radius\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/\n                 *         Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 */\n                borderRadius: 3,\n                /**\n                 * For series on datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the replacement codes, see\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat).\n                 *\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 *\n                 * @type    {Highcharts.Dictionary<string>}\n                 * @product highcharts highstock gantt\n                 */\n                dateTimeLabelFormats: {\n                    /** @internal */\n                    millisecond: '%A, %e %b, %H:%M:%S.%L',\n                    /** @internal */\n                    second: '%A, %e %b, %H:%M:%S',\n                    /** @internal */\n                    minute: '%A, %e %b, %H:%M',\n                    /** @internal */\n                    hour: '%A, %e %b, %H:%M',\n                    /** @internal */\n                    day: '%A, %e %b %Y',\n                    /** @internal */\n                    week: 'Week from %A, %e %b %Y',\n                    /** @internal */\n                    month: '%B %Y',\n                    /** @internal */\n                    year: '%Y'\n                },\n                /**\n                 * A string to append to the tooltip format.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @since 2.2\n                 */\n                footerFormat: '',\n                /**\n                 * The name of a symbol to use for the border around the tooltip\n                 * header. Applies only when [tooltip.split](#tooltip.split) is\n                 * enabled.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @see [tooltip.shape](#tooltip.shape)\n                 *\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Different shapes for header and split boxes\n                 *\n                 * @type       {Highcharts.TooltipShapeValue}\n                 * @validvalue [\"callout\", \"rect\"]\n                 * @since      7.0\n                 */\n                headerShape: 'callout',\n                /**\n                 * The number of milliseconds to wait until the tooltip is hidden when\n                 * mouse out from a point or chart.\n                 *\n                 * @since 3.0\n                 */\n                hideDelay: 500,\n                /**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @since 5.0.0\n                 */\n                padding: 8,\n                /**\n                 * The name of a symbol to use for the border around the tooltip. Can\n                 * be one of: `\"callout\"`, `\"circle\"` or `\"rect\"`. When\n                 * [tooltip.split](#tooltip.split)\n                 * option is enabled, shape is applied to all boxes except header, which\n                 * is controlled by\n                 * [tooltip.headerShape](#tooltip.headerShape).\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @type  {Highcharts.TooltipShapeValue}\n                 * @since 4.0\n                 */\n                shape: 'callout',\n                /**\n                 * When the tooltip is shared, the entire plot area will capture mouse\n                 * movement or touch events. Tooltip texts for series types with ordered\n                 * data (not pie, scatter, flags etc) will be shown in a single bubble.\n                 * This is recommended for single series charts and for tablet/mobile\n                 * optimized charts.\n                 *\n                 * See also [tooltip.split](#tooltip.split), that is better suited for\n                 * charts with many series, especially line-type series. The\n                 * `tooltip.split` option takes precedence over `tooltip.shared`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/shared-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/tooltip/shared-true/\n                 *         True\n                 * @sample {highcharts} highcharts/tooltip/shared-x-crosshair/\n                 *         True with x axis crosshair\n                 * @sample {highcharts} highcharts/tooltip/shared-true-mixed-types/\n                 *         True with mixed series types\n                 *\n                 * @since   2.1\n                 * @product highcharts highstock\n                 */\n                shared: false,\n                /**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense. This\n                 * applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/\n                 *         50 px on graph\n                 *\n                 * @type    {number}\n                 * @default 10/25\n                 * @since   1.2.0\n                 * @product highcharts highstock\n                 */\n                snap: isTouchDevice ? 25 : 10,\n                /**\n                 * The HTML of the tooltip header line. Variables are enclosed by\n                 * curly brackets. Available variables are `point.key`, `series.name`,\n                 * `series.color` and other members from the `point` and `series`\n                 * objects. The `point.key` variable contains the category name, x\n                 * value or datetime string depending on the type of axis. For datetime\n                 * axes, the `point.key` date format can be set using\n                 * `tooltip.xDateFormat`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.headerFormat\n                 */\n                headerFormat: '<span style=\"font-size: 0.8em\">{point.key}</span><br/>',\n                /**\n                 * The HTML of the null point's line in the tooltip. Works analogously\n                 * to [pointFormat](#tooltip.pointFormat).\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.nullFormat\n                 */\n                /**\n                 * The HTML of the point's line in the tooltip. Variables are enclosed\n                 * by curly brackets. Available variables are `point.x`, `point.y`,\n                 * `series.name` and `series.color` and other properties on the same\n                 * form. Furthermore, `point.y` can be extended by the\n                 * `tooltip.valuePrefix` and `tooltip.valueSuffix` variables. This can\n                 * also be overridden for each series, which makes it a good hook for\n                 * displaying units.\n                 *\n                 * In styled mode, the dot is colored by a class name rather\n                 * than the point color.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/pointformat/\n                 *         A different point format with value suffix\n                 * @sample {highcharts|highstock} highcharts/tooltip/pointformat-extra-information/\n                 *         Show extra information about points in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type       {string}\n                 * @since      2.2\n                 * @apioption  tooltip.pointFormat\n                 */\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n                /**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/\n                 *         Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                /**\n                 * The pixel width of the tooltip border. Defaults to 0 for single\n                 * tooltips and 1 for split tooltips.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         2 pixels\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/\n                 *         No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {number}\n                 */\n                borderWidth: void 0,\n                /**\n                 * Whether to apply a drop shadow to the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/\n                 *         False\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         Fixed tooltip position, border and shadow disabled\n                 *\n                 * @type {boolean|Highcharts.ShadowOptionsObject}\n                 */\n                shadow: true,\n                /**\n                 * Prevents the tooltip from switching or closing when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @since 8.0.1\n                 */\n                stickOnContact: false,\n                /**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * Note that the default `pointerEvents` style makes the tooltip ignore\n                 * mouse events, so in order to use clickable tooltips, this value must\n                 * be set to `auto`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/style/\n                 *         Greater padding, bold text\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @internal */\n                    cursor: 'default',\n                    /** @internal */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @since 2.2\n                 */\n                useHTML: false\n            },\n            /**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             */\n            credits: {\n                /**\n                 * Credits for map source to be concatenated with conventional credit\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapTextFull](#credits.mapTextFull)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   \\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapText\n                 */\n                /**\n                 * Detailed credits for map source to be displayed on hover of credits\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapText](#credits.mapText)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   {geojson.copyright}\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapTextFull\n                 */\n                /**\n                 * Whether to show the credits text.\n                 *\n                 * @sample {highcharts} highcharts/credits/enabled-false/\n                 *         Credits disabled\n                 * @sample {highstock} stock/credits/enabled/\n                 *         Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/\n                 *         Credits disabled\n                 */\n                enabled: true,\n                /**\n                 * The URL for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                href: 'https://www.highcharts.com?credits',\n                /**\n                 * Position configuration for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 *\n                 * @type    {Highcharts.AlignObject}\n                 * @since   2.1\n                 */\n                position: {\n                    /** @internal */\n                    align: 'right',\n                    /** @internal */\n                    x: -10,\n                    /** @internal */\n                    verticalAlign: 'bottom',\n                    /** @internal */\n                    y: -5\n                },\n                /**\n                 * CSS styles for the credits label.\n                 *\n                 * @see In styled mode, credits styles can be set with the\n                 *      `.highcharts-credits` class.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    cursor: 'pointer',\n                    /** @internal */\n                    color: \"#999999\" /* Palette.neutralColor40 */,\n                    /** @internal */\n                    fontSize: '0.6em'\n                },\n                /**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to\n                 * `Highcharts @ {map-credits}`. Otherwise, it defaults to\n                 * `Highcharts.com`.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                text: 'Highcharts.com'\n            }\n        };\n        /* eslint-disable spaced-comment */\n\n        defaultOptions.chart.styledMode = false;\n\n        '';\n        const defaultTime = new Time(defaultOptions.time);\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions\n         * for outside modules wasn't enough because the setOptions method created a new\n         * object.\n         *\n         * @function Highcharts.getOptions\n         *\n         * @return {Highcharts.Options}\n         * Default options.\n         */\n        function getOptions() {\n            return defaultOptions;\n        }\n        /**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @sample highcharts/global/useutc-false Setting a global option\n         * @sample highcharts/members/setoptions Applying a global theme\n         *\n         * @function Highcharts.setOptions\n         *\n         * @param {Highcharts.Options} options\n         * The new custom chart options.\n         *\n         * @return {Highcharts.Options}\n         * Updated options.\n         */\n        function setOptions(options) {\n            fireEvent(H, 'setOptions', { options });\n            // Copy in the default options\n            merge(true, defaultOptions, options);\n            // Update the time object\n            if (options.time || options.global) {\n                if (H.time) {\n                    H.time.update(merge(defaultOptions.global, defaultOptions.time, options.global, options.time));\n                }\n                else {\n                    /**\n                     * Global `Time` object with default options. Since v6.0.5, time\n                     * settings can be applied individually for each chart. If no\n                     * individual settings apply, this `Time` object is shared by all\n                     * instances.\n                     *\n                     * @name Highcharts.time\n                     * @type {Highcharts.Time}\n                     */\n                    H.time = defaultTime;\n                }\n            }\n            return defaultOptions;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DefaultOptions = {\n            defaultOptions,\n            defaultTime,\n            getOptions,\n            setOptions\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"plotBox\"|\"spacingBox\"} Highcharts.ButtonRelativeToValue\n         */\n        /**\n         * Gets fired when a series is added to the chart after load time, using the\n         * `addSeries` method. Returning `false` prevents the series from being added.\n         *\n         * @callback Highcharts.ChartAddSeriesCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.ChartAddSeriesEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains common event information. Through the `options` property you can\n         * access the series options that were passed to the `addSeries` method.\n         *\n         * @interface Highcharts.ChartAddSeriesEventObject\n         */ /**\n        * The series options that were passed to the `addSeries` method.\n        * @name Highcharts.ChartAddSeriesEventObject#options\n        * @type {Highcharts.SeriesOptionsType}\n        */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.ChartAddSeriesEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The event target.\n        * @name Highcharts.ChartAddSeriesEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.ChartAddSeriesEventObject#type\n        * @type {\"addSeries\"}\n        */\n        /**\n         * Gets fired when clicking on the plot background.\n         *\n         * @callback Highcharts.ChartClickCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.PointerEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains an axes of the clicked spot.\n         *\n         * @interface Highcharts.ChartClickEventAxisObject\n         */ /**\n        * Axis at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#axis\n        * @type {Highcharts.Axis}\n        */ /**\n        * Axis value at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#value\n        * @type {number}\n        */\n        /**\n         * Contains information about the clicked spot on the chart. Remember the unit\n         * of a datetime axis is milliseconds since 1970-01-01 00:00:00.\n         *\n         * @interface Highcharts.ChartClickEventObject\n         * @extends Highcharts.PointerEventObject\n         */ /**\n        * Information about the x-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#xAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the y-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#yAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the z-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#zAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>|undefined}\n        */\n        /**\n         * Gets fired when the chart is finished loading.\n         *\n         * @callback Highcharts.ChartLoadCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Fires when the chart is redrawn, either after a call to `chart.redraw()` or\n         * after an axis, series or point is modified with the `redraw` option set to\n         * `true`.\n         *\n         * @callback Highcharts.ChartRedrawCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired after initial load of the chart (directly after the `load` event),\n         * and after each redraw (directly after the `redraw` event).\n         *\n         * @callback Highcharts.ChartRenderCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired when an area of the chart has been selected. The default action\n         * for the selection event is to zoom the chart to the selected area. It can be\n         * prevented by calling `event.preventDefault()` or return false.\n         *\n         * @callback Highcharts.ChartSelectionCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.SelectEventObject} event\n         *        Event informations\n         *\n         * @return {boolean|undefined}\n         *         Return false to prevent the default action, usually zoom.\n         */\n        (''); // Detach doclets above\n\n        return DefaultOptions;\n    });\n    _registerModule(_modules, 'Core/Templating.js', [_modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (D, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, defaultTime } = D;\n        const { extend, getNestedProperty, isArray, isNumber, isObject, pick, pInt } = U;\n        const helpers = {\n            // Built-in helpers\n            add: (a, b) => a + b,\n            divide: (a, b) => (b !== 0 ? a / b : ''),\n            // eslint-disable-next-line eqeqeq\n            eq: (a, b) => a == b,\n            each: function (arr) {\n                const match = arguments[arguments.length - 1];\n                return isArray(arr) ?\n                    arr.map((item, i) => format(match.body, extend(isObject(item) ? item : { '@this': item }, {\n                        '@index': i,\n                        '@first': i === 0,\n                        '@last': i === arr.length - 1\n                    }))).join('') :\n                    false;\n            },\n            ge: (a, b) => a >= b,\n            gt: (a, b) => a > b,\n            'if': (condition) => !!condition,\n            le: (a, b) => a <= b,\n            lt: (a, b) => a < b,\n            multiply: (a, b) => a * b,\n            // eslint-disable-next-line eqeqeq\n            ne: (a, b) => a != b,\n            subtract: (a, b) => a - b,\n            unless: (condition) => !condition\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime](https://www.php.net/manual/en/function.strftime.php) function.\n         * Additional formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * Since v6.0.5, all internal dates are formatted through the\n         * {@link Highcharts.Chart#time} instance to respect chart-level time settings.\n         * The `Highcharts.dateFormat` function only reflects global time settings set\n         * with `setOptions`.\n         *\n         * Supported format keys:\n         * - `%a`: Short weekday, like 'Mon'\n         * - `%A`: Long weekday, like 'Monday'\n         * - `%d`: Two digit day of the month, 01 to 31\n         * - `%e`: Day of the month, 1 through 31\n         * - `%w`: Day of the week, 0 through 6\n         * - `%b`: Short month, like 'Jan'\n         * - `%B`: Long month, like 'January'\n         * - `%m`: Two digit month number, 01 through 12\n         * - `%y`: Two digits year, like 09 for 2009\n         * - `%Y`: Four digits year, like 2009\n         * - `%H`: Two digits hours in 24h format, 00 through 23\n         * - `%k`: Hours in 24h format, 0 through 23\n         * - `%I`: Two digits hours in 12h format, 00 through 11\n         * - `%l`: Hours in 12h format, 1 through 12\n         * - `%M`: Two digits minutes, 00 through 59\n         * - `%p`: Upper case AM or PM\n         * - `%P`: Lower case AM or PM\n         * - `%S`: Two digits seconds, 00 through 59\n         * - `%L`: Milliseconds (naming from Ruby)\n         *\n         * @function Highcharts.dateFormat\n         *\n         * @param {string} format\n         *        The desired format where various time representations are prefixed\n         *        with `%`.\n         *\n         * @param {number} timestamp\n         *        The JavaScript timestamp.\n         *\n         * @param {boolean} [capitalize=false]\n         *        Upper case first letter in the return.\n         *\n         * @return {string}\n         *         The formatted date.\n         */\n        function dateFormat(format, timestamp, capitalize) {\n            return defaultTime.dateFormat(format, timestamp, capitalize);\n        }\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @example\n         * let s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         *\n         * @function Highcharts.format\n         *\n         * @param {string} str\n         *        The string to format.\n         *\n         * @param {Record<string, *>} ctx\n         *        The context, a collection of key-value pairs where each key is\n         *        replaced by its value.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        A `Chart` instance used to get numberFormatter and time.\n         *\n         * @return {string}\n         *         The formatted string.\n         */\n        function format(str = '', ctx, chart) {\n            const regex = /\\{([\\w\\:\\.\\,;\\-\\/<>%@\"'’= #\\(\\)]+)\\}/g, \n            // The sub expression regex is the same as the top expression regex,\n            // but except parens and block helpers (#), and surrounded by parens\n            // instead of curly brackets.\n            subRegex = /\\(([\\w\\:\\.\\,;\\-\\/<>%@\"'= ]+)\\)/g, matches = [], floatRegex = /f$/, decRegex = /\\.(\\d)/, lang = defaultOptions.lang, time = chart && chart.time || defaultTime, numberFormatter = chart && chart.numberFormatter || numberFormat;\n            /*\n             * Get a literal or variable value inside a template expression. May be\n             * extended with other types like string or null if needed, but keep it\n             * small for now.\n             */\n            const resolveProperty = (key = '') => {\n                let n;\n                // Literals\n                if (key === 'true') {\n                    return true;\n                }\n                if (key === 'false') {\n                    return false;\n                }\n                if ((n = Number(key)).toString() === key) {\n                    return n;\n                }\n                // Variables and constants\n                return getNestedProperty(key, ctx);\n            };\n            let match, currentMatch, depth = 0, hasSub;\n            // Parse and create tree\n            while ((match = regex.exec(str)) !== null) {\n                // When a sub expression is found, it is evaluated first, and the\n                // results recursively evaluated until no subexpression exists.\n                const subMatch = subRegex.exec(match[1]);\n                if (subMatch) {\n                    match = subMatch;\n                    hasSub = true;\n                }\n                if (!currentMatch || !currentMatch.isBlock) {\n                    currentMatch = {\n                        ctx,\n                        expression: match[1],\n                        find: match[0],\n                        isBlock: match[1].charAt(0) === '#',\n                        start: match.index,\n                        startInner: match.index + match[0].length,\n                        length: match[0].length\n                    };\n                }\n                // Identify helpers\n                const fn = match[1].split(' ')[0].replace('#', '');\n                if (helpers[fn]) {\n                    // Block helper, only 0 level is handled\n                    if (currentMatch.isBlock && fn === currentMatch.fn) {\n                        depth++;\n                    }\n                    if (!currentMatch.fn) {\n                        currentMatch.fn = fn;\n                    }\n                }\n                // Closing a block helper\n                const startingElseSection = match[1] === 'else';\n                if (currentMatch.isBlock &&\n                    currentMatch.fn && (match[1] === `/${currentMatch.fn}` ||\n                    startingElseSection)) {\n                    if (!depth) { // === 0\n                        const start = currentMatch.startInner, body = str.substr(start, match.index - start);\n                        // Either closing without an else section, or when encountering\n                        // an else section\n                        if (currentMatch.body === void 0) {\n                            currentMatch.body = body;\n                            currentMatch.startInner = match.index + match[0].length;\n                            // The body exists already, so this is the else section\n                        }\n                        else {\n                            currentMatch.elseBody = body;\n                        }\n                        currentMatch.find += body + match[0];\n                        if (!startingElseSection) {\n                            matches.push(currentMatch);\n                            currentMatch = void 0;\n                        }\n                    }\n                    else if (!startingElseSection) {\n                        depth--;\n                    }\n                    // Common expression\n                }\n                else if (!currentMatch.isBlock) {\n                    matches.push(currentMatch);\n                }\n                // Evaluate sub-matches one by one to prevent orphaned block closers\n                if (subMatch && !currentMatch?.isBlock) {\n                    break;\n                }\n            }\n            // Execute\n            matches.forEach((match) => {\n                const { body, elseBody, expression, fn } = match;\n                let replacement, i;\n                // Helper function\n                if (fn) {\n                    // Pass the helpers the amount of arguments defined by the function,\n                    // then the match as the last argument.\n                    const args = [match], parts = expression.split(' ');\n                    i = helpers[fn].length;\n                    while (i--) {\n                        args.unshift(resolveProperty(parts[i + 1]));\n                    }\n                    replacement = helpers[fn].apply(ctx, args);\n                    // Block helpers may return true or false. They may also return a\n                    // string, like the `each` helper.\n                    if (match.isBlock && typeof replacement === 'boolean') {\n                        replacement = format(replacement ? body : elseBody, ctx, chart);\n                    }\n                    // Simple variable replacement\n                }\n                else {\n                    const valueAndFormat = expression.split(':');\n                    replacement = resolveProperty(valueAndFormat.shift() || '');\n                    // Format the replacement\n                    if (valueAndFormat.length && typeof replacement === 'number') {\n                        const segment = valueAndFormat.join(':');\n                        if (floatRegex.test(segment)) { // Float\n                            const decimals = parseInt((segment.match(decRegex) || ['', '-1'])[1], 10);\n                            if (replacement !== null) {\n                                replacement = numberFormatter(replacement, decimals, lang.decimalPoint, segment.indexOf(',') > -1 ? lang.thousandsSep : '');\n                            }\n                        }\n                        else {\n                            replacement = time.dateFormat(segment, replacement);\n                        }\n                    }\n                }\n                str = str.replace(match.find, pick(replacement, ''));\n            });\n            return hasSub ? format(str, ctx, chart) : str;\n        }\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @sample highcharts/members/highcharts-numberformat/\n         *         Custom number format\n         *\n         * @function Highcharts.numberFormat\n         *\n         * @param {number} number\n         *        The input number to format.\n         *\n         * @param {number} decimals\n         *        The amount of decimals. A value of -1 preserves the amount in the\n         *        input number.\n         *\n         * @param {string} [decimalPoint]\n         *        The decimal point, defaults to the one given in the lang options, or\n         *        a dot.\n         *\n         * @param {string} [thousandsSep]\n         *        The thousands separator, defaults to the one given in the lang\n         *        options, or a space character.\n         *\n         * @return {string}\n         *         The formatted number.\n         */\n        function numberFormat(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n            let ret, fractionDigits;\n            const lang = defaultOptions.lang, origDec = (number.toString().split('.')[1] || '').split('e')[0].length, exponent = number.toString().split('e'), firstDecimals = decimals;\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            }\n            else if (!isNumber(decimals)) {\n                decimals = 2;\n            }\n            else if (decimals && exponent[1] && exponent[1] < 0) {\n                // Expose decimals from exponential notation (#7042)\n                fractionDigits = decimals + +exponent[1];\n                if (fractionDigits >= 0) {\n                    // Remove too small part of the number while keeping the notation\n                    exponent[0] = (+exponent[0]).toExponential(fractionDigits)\n                        .split('e')[0];\n                    decimals = fractionDigits;\n                }\n                else {\n                    // `fractionDigits < 0`\n                    exponent[0] = exponent[0].split('.')[0] || 0;\n                    if (decimals < 20) {\n                        // Use number instead of exponential notation (#7405)\n                        number = (exponent[0] * Math.pow(10, exponent[1]))\n                            .toFixed(decimals);\n                    }\n                    else {\n                        // Or zero\n                        number = 0;\n                    }\n                    exponent[1] = 0;\n                }\n            }\n            // Add another decimal to avoid rounding errors of float numbers. (#4573)\n            // Then use toFixed to handle rounding.\n            const roundedNumber = (Math.abs(exponent[1] ? exponent[0] : number) +\n                Math.pow(10, -Math.max(decimals, origDec) - 1)).toFixed(decimals);\n            // A string containing the positive integer component of the number\n            const strinteger = String(pInt(roundedNumber));\n            // Leftover after grouping into thousands. Can be 0, 1 or 2.\n            const thousands = strinteger.length > 3 ? strinteger.length % 3 : 0;\n            // Language\n            decimalPoint = pick(decimalPoint, lang.decimalPoint);\n            thousandsSep = pick(thousandsSep, lang.thousandsSep);\n            // Start building the return\n            ret = number < 0 ? '-' : '';\n            // Add the leftover after grouping into thousands. For example, in the\n            // number 42 000 000, this line adds 42.\n            ret += thousands ? strinteger.substr(0, thousands) + thousandsSep : '';\n            if (+exponent[1] < 0 && !firstDecimals) {\n                ret = '0';\n            }\n            else {\n                // Add the remaining thousands groups, joined by the thousands separator\n                ret += strinteger\n                    .substr(thousands)\n                    .replace(/(\\d{3})(?=\\d)/g, '$1' + thousandsSep);\n            }\n            // Add the decimal point and the decimal component\n            if (decimals) {\n                // Get the decimal component\n                ret += decimalPoint + roundedNumber.slice(-decimals);\n            }\n            else if (+ret === 0) { // Remove signed minus #20564\n                ret = '0';\n            }\n            if (exponent[1] && +ret !== 0) {\n                ret += 'e' + exponent[1];\n            }\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Templating = {\n            dateFormat,\n            format,\n            helpers,\n            numberFormat\n        };\n\n        return Templating;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPIComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/KPIComponent/KPISyncs/KPISyncs.js'], _modules['Dashboards/Components/KPIComponent/KPIComponentDefaults.js'], _modules['Core/Templating.js'], _modules['Core/Utilities.js']], function (AST, Component, KPISyncs, KPIComponentDefaults, Templating, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { format } = Templating;\n        const { createElement, css, defined, diffObjects, isArray, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a KPI component.\n         *\n         */\n        class KPIComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the KPI component.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @returns\n             * KPI component based on config from JSON.\n             *\n             * @internal\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const chartOptions = options.chartOptions && JSON.parse(options.chartOptions);\n                const subtitle = JSON.parse(options.subtitle || '{}');\n                const title = options.title && JSON.parse(options.title);\n                return new KPIComponent(cell, merge(options, {\n                    chartOptions,\n                    title,\n                    subtitle\n                }));\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a KPI component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                options = merge(KPIComponent.defaultOptions, options);\n                super(cell, options, board);\n                this.options = options;\n                this.type = 'KPI';\n                this.value = createElement('span', {\n                    className: `${options.className}-value`\n                }, {}, this.contentElement);\n                this.subtitle = createElement('span', {\n                    className: this.getSubtitleClassName()\n                }, {}, this.contentElement);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                await super.load();\n                this.linkValueToChart();\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                // Animate\n                if (this.chart && this.chart.container) {\n                    this.chart.reflow();\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.updateElements();\n                const charter = KPIComponent.charter?.Chart;\n                if (charter &&\n                    this.options.chartOptions &&\n                    !this.chart) {\n                    if (!this.chartContainer) {\n                        this.chartContainer = createElement('div', {\n                            className: `${this.options.className}-chart-container`\n                        }, {\n                            // Fix inner height, when using flex box\n                            padding: '0.1px'\n                        }, this.contentElement);\n                    }\n                    this.chart = charter.chart(this.chartContainer, merge(KPIComponent.defaultChartOptions, this.options.chartOptions));\n                }\n                else if (this.chart &&\n                    !this.options.chartOptions &&\n                    'chartOptions' in this.options) {\n                    this.chart.destroy();\n                    this.chart = void 0;\n                }\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options);\n                if (options.chartOptions && this.chart) {\n                    this.chart.update(options.chartOptions);\n                }\n                shouldRerender && this.render();\n            }\n            /**\n             * @internal\n             */\n            onTableChanged() {\n                this.setValue();\n            }\n            /**\n             * Destroys the highcharts component.\n             */\n            destroy() {\n                // Cleanup references in the global Highcharts scope\n                this.chart?.destroy();\n                super.destroy();\n            }\n            /**\n             * Gets the default value that should be displayed in the KPI.\n             *\n             * @returns\n             * The value that should be displayed in the KPI.\n             */\n            getValue() {\n                if (defined(this.options.value)) {\n                    return this.options.value;\n                }\n                const connector = this.getFirstConnector();\n                if (connector && this.options.columnName) {\n                    const table = connector.table.modified, column = table.getColumn(this.options.columnName), length = column?.length || 0;\n                    return table.getCellAsString(this.options.columnName, length - 1);\n                }\n            }\n            /**\n             * Sets the value that should be displayed in the KPI.\n             *\n             * @param value\n             * The value to display in the KPI.\n             */\n            setValue(value = this.getValue()) {\n                const { valueFormat, valueFormatter } = this.options;\n                if (defined(value)) {\n                    let prevValue;\n                    if (isNumber(+value)) {\n                        prevValue = +value;\n                    }\n                    if (valueFormatter) {\n                        value = valueFormatter.call(this, value);\n                    }\n                    else if (valueFormat) {\n                        value = format(valueFormat, { value });\n                    }\n                    else if (isNumber(value)) {\n                        value = value.toLocaleString();\n                    }\n                    AST.setElementHTML(this.value, '' + value);\n                    this.linkValueToChart(prevValue);\n                    this.prevValue = prevValue;\n                }\n            }\n            /**\n             * Handles updating chart point value.\n             *\n             * @internal\n             */\n            linkValueToChart(value = this.getValue()) {\n                const chart = this.chart;\n                const linkedValueTo = this.options.linkedValueTo;\n                if (!chart || !linkedValueTo.enabled ||\n                    !defined(value) || !isNumber(+value)) {\n                    return;\n                }\n                value = +value;\n                const targetSeries = chart.series[linkedValueTo.seriesIndex ?? 0], targetPoint = targetSeries?.points[linkedValueTo.pointIndex ?? 0];\n                if (targetSeries) {\n                    if (targetPoint) {\n                        targetPoint.update({\n                            y: value\n                        });\n                        return;\n                    }\n                    targetSeries.addPoint({\n                        y: value\n                    });\n                    return;\n                }\n                chart.addSeries({\n                    data: [{\n                            y: value\n                        }]\n                });\n            }\n            /**\n             * Handles updating elements via options\n             *\n             * @internal\n             */\n            updateElements() {\n                const { style, subtitle } = this.options;\n                this.setValue();\n                AST.setElementHTML(this.subtitle, this.getSubtitle());\n                if (style) {\n                    css(this.element, style);\n                }\n                if (typeof subtitle === 'object') {\n                    if (subtitle.style) {\n                        css(this.subtitle, subtitle.style);\n                    }\n                    this.subtitle.className = this.getSubtitleClassName();\n                }\n                if (this.chartContainer) {\n                    this.chartContainer.style.flex =\n                        this.options.chartOptions ? '1' : '0';\n                }\n                if (this.chart) {\n                    this.chart.reflow();\n                }\n                this.value.style.color = this.getValueColor();\n            }\n            /**\n             * Gets KPI subtitle text.\n             *\n             * @returns\n             * The subtitle's text.\n             *\n             * @internal\n             */\n            getSubtitle() {\n                const { subtitle, value } = this.options;\n                if (typeof subtitle === 'string') {\n                    return subtitle;\n                }\n                if (subtitle) {\n                    if (isNumber(this.prevValue) && isNumber(value)) {\n                        const diff = value - this.prevValue;\n                        let prefix = '';\n                        if (diff > 0) {\n                            prefix = '<span style=\"color:green\">&#9650;</span> +';\n                        }\n                        else if (diff < 0) {\n                            prefix = '<span style=\"color:red\">&#9660;</span> ';\n                        }\n                        else {\n                            return this.subtitle.innerHTML;\n                        }\n                        if (subtitle.type === 'diff') {\n                            return prefix + diff.toLocaleString();\n                        }\n                        if (subtitle.type === 'diffpercent') {\n                            return prefix + format('{v:,.2f}%', {\n                                v: diff / this.prevValue * 100\n                            });\n                        }\n                    }\n                    return subtitle.text || '';\n                }\n                return '';\n            }\n            /**\n             * Gets CSS class name of the KPI subtitle.\n             *\n             * @returns\n             * The name of class.\n             *\n             * @internal\n             */\n            getSubtitleClassName() {\n                const { subtitle } = this.options;\n                return `${Component.defaultOptions.className}-subtitle` +\n                    ((typeof subtitle === 'object' && subtitle.className) || '');\n            }\n            /**\n             * Applies title's color according to the threshold.\n             *\n             * @returns\n             * Hex of color.\n             *\n             * @internal\n             */\n            getValueColor() {\n                const { threshold, thresholdColors, value } = this.options;\n                if (thresholdColors && threshold && isNumber(value)) {\n                    if (isArray(threshold)) {\n                        for (let i = threshold.length - 1; i >= 0; i--) {\n                            if (value >= threshold[i]) {\n                                if (i + 1 < thresholdColors.length) {\n                                    return thresholdColors[i + 1];\n                                }\n                                return thresholdColors[thresholdColors.length - 1];\n                            }\n                        }\n                    }\n                    else if (value >= threshold) {\n                        return thresholdColors[1];\n                    }\n                    return thresholdColors[0];\n                }\n                return '';\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'KPI'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    type: 'KPI',\n                    options: {\n                        ...base.options,\n                        type: 'KPI',\n                        value: this.options.value,\n                        subtitle: JSON.stringify(this.options.subtitle),\n                        title: JSON.stringify(this.options.title),\n                        threshold: this.options.threshold,\n                        thresholdColors: this.options.thresholdColors,\n                        chartOptions: JSON.stringify(this.options.chartOptions),\n                        valueFormat: this.options.valueFormat\n                    }\n                };\n                this.emit({ type: 'toJSON', json: base });\n                return json;\n            }\n            /**\n             * Get the KPI component's options.\n             * @returns\n             * The JSON of KPI component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, KPIComponent.defaultOptions),\n                    type: 'KPI'\n                };\n            }\n        }\n        /**\n         * Default options of the KPI component.\n         */\n        KPIComponent.defaultOptions = merge(Component.defaultOptions, KPIComponentDefaults);\n        /**\n         * Predefined sync config for the KPI component.\n         */\n        KPIComponent.predefinedSyncConfig = KPISyncs;\n        /**\n         * Default options of the KPI component.\n         *\n         * @default {\n            chart: {\n                type: 'spline',\n                styledMode: true,\n                zooming: {\n                    mouseWheel: {\n                        enabled: false\n                    }\n                }\n            },\n            title: {\n                text: void 0\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false,\n                title: {\n                    text: null\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            tooltip: {\n                outside: true\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            }\n        }\n         */\n        KPIComponent.defaultChartOptions = {\n            chart: {\n                type: 'spline',\n                styledMode: true,\n                zooming: {\n                    mouseWheel: {\n                        enabled: false\n                    }\n                }\n            },\n            title: {\n                text: void 0\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false,\n                title: {\n                    text: null\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            tooltip: {\n                outside: true\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return KPIComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const NavigatorComponentDefaults = {\n            type: 'Navigator',\n            chartOptions: {\n                chart: {\n                    animation: false,\n                    height: 200,\n                    styledMode: true,\n                    type: 'column',\n                    zooming: {\n                        mouseWheel: {\n                            enabled: false\n                        }\n                    }\n                },\n                credits: {\n                    enabled: false\n                },\n                legend: {\n                    enabled: false\n                },\n                navigator: {\n                    enabled: true,\n                    outlineWidth: 0,\n                    series: {\n                        animation: false,\n                        lineWidth: 0,\n                        colorIndex: 0\n                    },\n                    xAxis: {\n                        endOnTick: true,\n                        gridZIndex: 4,\n                        labels: {\n                            x: 1,\n                            y: 22\n                        },\n                        opposite: true,\n                        showFirstLabel: true,\n                        showLastLabel: true,\n                        startOnTick: true,\n                        tickPosition: 'inside'\n                    },\n                    yAxis: {\n                        maxPadding: 0.5\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        borderRadius: 0,\n                        marker: {\n                            enabled: false\n                        },\n                        states: {\n                            hover: {\n                                enabled: false\n                            }\n                        }\n                    }\n                },\n                scrollbar: {\n                    enabled: true\n                },\n                title: {\n                    text: ''\n                },\n                tooltip: {\n                    enabled: false\n                },\n                xAxis: {\n                    visible: false,\n                    minRange: Number.MIN_VALUE\n                },\n                yAxis: {\n                    visible: false\n                }\n            },\n            editableOptions: (Component.defaultOptions.editableOptions || []).concat()\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncUtils.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Namespace\n        *\n        * */\n        var NavigatorSyncUtils;\n        (function (NavigatorSyncUtils) {\n            /* *\n            *\n            *  Utility Functions\n            *\n            * */\n            /**\n             * Adds or updates range options for a specific column.\n             * @param ranges Array of range options (will be modified).\n             * @param column Column name.\n             * @param minValue Minimum value.\n             * @param maxValue Maximum value.\n             * @internal\n             */\n            function setRangeOptions(ranges, column, minValue, maxValue) {\n                let changed = false;\n                for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                    if (ranges[i].column === column) {\n                        ranges[i].maxValue = maxValue;\n                        ranges[i].minValue = minValue;\n                        changed = true;\n                        break;\n                    }\n                }\n                if (!changed) {\n                    ranges.push({ column, maxValue, minValue });\n                }\n            }\n            NavigatorSyncUtils.setRangeOptions = setRangeOptions;\n            /**\n             * Removes range options for a specific column.\n             * @param ranges Array of range options (will be modified).\n             * @param column Column name.\n             * @internal\n             */\n            function unsetRangeOptions(ranges, column) {\n                for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                    if (ranges[i].column === column) {\n                        return ranges.splice(i, 1)[0];\n                    }\n                }\n            }\n            NavigatorSyncUtils.unsetRangeOptions = unsetRangeOptions;\n        })(NavigatorSyncUtils || (NavigatorSyncUtils = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorSyncUtils;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorCrossfilterSync.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncUtils.js'], _modules['Core/Utilities.js']], function (DataModifier, NavigatorSyncUtils, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { Range: RangeModifier } = DataModifier.types;\n        const { addEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {\n            affectNavigator: false\n        };\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Navigator') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.crossfilter;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const afterSetExtremes = async (extremes) => {\n                    if (component.connectorHandlers?.[0]?.connector) {\n                        const table = component.connectorHandlers[0].connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = component.getAxisExtremes();\n                        let modifier = table.getModifier();\n                        if (modifier instanceof RangeModifier) {\n                            NavigatorSyncUtils.setRangeOptions(modifier.options.ranges, filterColumn, min, max);\n                        }\n                        else {\n                            modifier = new RangeModifier({\n                                ranges: [{\n                                        column: filterColumn,\n                                        maxValue: max,\n                                        minValue: min\n                                    }]\n                            });\n                        }\n                        await table.setModifier(modifier);\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, min),\n                            state: 'crossfilter' + groupKey\n                        }, extremes);\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, max),\n                            state: 'crossfilter' + groupKey\n                        }, extremes);\n                    }\n                };\n                let delay;\n                return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                    clearTimeout(delay);\n                    delay = setTimeout(afterSetExtremes, 50, this, extremes);\n                });\n            },\n            handler: void 0\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorExtremesSync.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncUtils.js'], _modules['Core/Utilities.js']], function (DataModifier, NavigatorSyncUtils, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { Range: RangeModifier } = DataModifier.types;\n        const { addEvent, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Navigator') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const afterSetExtremes = (extremes) => {\n                    if (component.connectorHandlers?.[0]?.connector) {\n                        const table = component.connectorHandlers[0].connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = component.getAxisExtremes();\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, min),\n                            state: 'xAxis.extremes.min' + groupKey\n                        }, extremes);\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, max),\n                            state: 'xAxis.extremes.max' + groupKey\n                        }, extremes);\n                    }\n                };\n                let delay;\n                return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                    clearTimeout(delay);\n                    delay = setTimeout(afterSetExtremes, 50, this, extremes);\n                });\n            },\n            handler: function () {\n                if (this.type !== 'Navigator') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const dataCursor = component.board.dataCursor;\n                const extremesListener = (e) => {\n                    const cursor = e.cursor;\n                    if (!component.connectorHandlers?.[0]?.connector) {\n                        return;\n                    }\n                    const table = component.connectorHandlers[0].connector.table;\n                    // Assume first column with unique keys as fallback\n                    let extremesColumn = table.getColumnNames()[0], maxIndex = table.getRowCount(), minIndex = 0;\n                    if (cursor.type === 'range') {\n                        maxIndex = cursor.lastRow;\n                        minIndex = cursor.firstRow;\n                        if (cursor.columns) {\n                            extremesColumn = pick(cursor.columns[0], extremesColumn);\n                        }\n                    }\n                    else if (cursor.state === 'xAxis.extremes.max' + groupKey) {\n                        extremesColumn = pick(cursor.column, extremesColumn);\n                        maxIndex = pick(cursor.row, maxIndex);\n                    }\n                    else {\n                        extremesColumn = pick(cursor.column, extremesColumn);\n                        minIndex = pick(cursor.row, minIndex);\n                    }\n                    const modifier = table.getModifier();\n                    if (typeof extremesColumn === 'string' &&\n                        modifier instanceof RangeModifier) {\n                        const ranges = modifier.options.ranges, min = table.getCell(extremesColumn, minIndex), max = table.getCell(extremesColumn, maxIndex);\n                        if (max !== null && typeof max !== 'undefined' &&\n                            min !== null && typeof min !== 'undefined') {\n                            NavigatorSyncUtils.unsetRangeOptions(ranges, extremesColumn);\n                            ranges.unshift({\n                                column: extremesColumn,\n                                maxValue: max,\n                                minValue: min\n                            });\n                            table.setModifier(modifier);\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (table) {\n                        dataCursor.addListener(table.id, 'xAxis.extremes' + groupKey, extremesListener);\n                        dataCursor.addListener(table.id, 'xAxis.extremes.max' + groupKey, extremesListener);\n                        dataCursor.addListener(table.id, 'xAxis.extremes.min' + groupKey, extremesListener);\n                    }\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (table) {\n                        dataCursor.removeListener(table.id, 'xAxis.extremes' + groupKey, extremesListener);\n                        dataCursor.removeListener(table.id, 'xAxis.extremes.max' + groupKey, extremesListener);\n                        dataCursor.removeListener(table.id, 'xAxis.extremes.min' + groupKey, extremesListener);\n                    }\n                };\n                registerCursorListeners();\n                return unregisterCursorListeners;\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncs.js', [_modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorCrossfilterSync.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorExtremesSync.js']], function (NavigatorCrossfilterSync, NavigatorExtremesSync) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                crossfilter: NavigatorCrossfilterSync.syncPair,\n                extremes: NavigatorExtremesSync.syncPair\n            },\n            defaultSyncOptions: {\n                crossfilter: NavigatorCrossfilterSync.defaultOptions,\n                extremes: NavigatorExtremesSync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorComponentDefaults.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncs.js'], _modules['Core/Utilities.js']], function (Component, Globals, NavigatorComponentDefaults, NavigatorSyncs, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { diffObjects, isNumber, isString, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Setup a component with data navigation.\n         */\n        class NavigatorComponent extends Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the Highcharts component.\n             *\n             * @returns\n             * Highcharts component based on config from JSON.\n             *\n             * @private\n             */\n            static fromJSON(json, cell) {\n                const options = json.options, component = new NavigatorComponent(cell, options);\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options) {\n                super(cell, options);\n                this.type = 'Navigator';\n                this.options = merge(NavigatorComponent.defaultOptions, options);\n                const charter = (NavigatorComponent.charter.Chart ||\n                    Globals.win.Highcharts);\n                this.chartContainer = Globals.win.document.createElement('div');\n                this.chart = charter\n                    .chart(this.chartContainer, (this.options.chartOptions || {}));\n                this.chartContainer.classList\n                    .add(Globals.classNamePrefix + 'navigator');\n                if (this.sync.syncConfig.crossfilter?.enabled) {\n                    this.chart.update(merge({ navigator: { xAxis: { labels: { format: '{value}' } } } }, this.options.chartOptions || {}), false);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            adjustNavigator() {\n                const chart = this.chart, height = pick(chart.chartHeight, this.contentElement.clientHeight), width = this.contentElement.clientWidth, chartUpdates = {};\n                if (chart.chartHeight !== height ||\n                    chart.chartWidth !== width) {\n                    chartUpdates.chart = {\n                        height,\n                        width\n                    };\n                }\n                if (chart.navigator) {\n                    const navigator = chart.navigator, navigatorHeight = (navigator.top - chart.plotTop + navigator.height);\n                    if (navigator.height !== navigatorHeight) {\n                        chartUpdates.navigator = {\n                            handles: {\n                                height: Math.round(height / 4)\n                            },\n                            height: navigatorHeight\n                        };\n                    }\n                    if (Object.keys(chartUpdates).length) {\n                        chart.update(chartUpdates, false);\n                    }\n                    if (navigator.series && navigator.series[0]) {\n                        navigator.series[0].update({\n                            type: chart.series[0].type\n                        }, false);\n                    }\n                }\n                else if (Object.keys(chartUpdates).length) {\n                    chart.update(chartUpdates, false);\n                }\n            }\n            /**\n             * Returns the first column of columnAssignment to use for navigator data.\n             * @private\n             *\n             * @return\n             * Navigator column assignment.\n             */\n            getColumnAssignment() {\n                const columnAssignment = this.options.columnAssignment ??\n                    this.options.columnAssignments ?? {};\n                let columnsAssignment;\n                for (const column of Object.keys(columnAssignment)) {\n                    columnsAssignment = columnAssignment[column];\n                    if (columnsAssignment !== null) {\n                        return [column, columnsAssignment];\n                    }\n                }\n                const connector = this.getFirstConnector();\n                if (connector) {\n                    const columns = connector.table.getColumnNames();\n                    if (columns.length) {\n                        return [columns[0], 'y'];\n                    }\n                }\n                return ['', 'y'];\n            }\n            /**\n             * Gets the component's options.\n             * @internal\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, NavigatorComponentDefaults),\n                    type: 'Navigator'\n                };\n            }\n            /**\n             * Gets the extremes of the navigator's x-axis.\n             */\n            getAxisExtremes() {\n                const axis = this.chart.xAxis[0], extremes = axis.getExtremes(), min = isNumber(extremes.min) ? extremes.min : extremes.dataMin, max = isNumber(extremes.max) ? extremes.max : extremes.dataMax;\n                if (this.categories) {\n                    return [\n                        this.categories[Math.max(0, Math.ceil(min))],\n                        this.categories[Math.min(this.categories.length - 1, Math.floor(max))]\n                    ];\n                }\n                if (axis.hasNames) {\n                    return [\n                        axis.names[Math.ceil(min)],\n                        axis.names[Math.floor(max)]\n                    ];\n                }\n                return [min, max];\n            }\n            /** @private */\n            async load() {\n                await super.load();\n                this.contentElement.appendChild(this.chartContainer);\n                this.parentElement.appendChild(this.element);\n                this.adjustNavigator();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            onTableChanged() {\n                this.renderNavigator();\n            }\n            /** @private */\n            redrawNavigator() {\n                const timeouts = this.resizeTimeouts;\n                for (let i = 0, iEnd = timeouts.length; i < iEnd; ++i) {\n                    clearTimeout(timeouts[i]);\n                }\n                timeouts.length = 0;\n                timeouts.push(setTimeout(() => {\n                    this.adjustNavigator();\n                    this.chart.redraw();\n                }, 33));\n            }\n            /** @private */\n            render() {\n                const component = this;\n                super.render();\n                component.renderNavigator();\n                component.sync.start();\n                component.emit({ type: 'afterRender' });\n                return component;\n            }\n            /** @private */\n            renderNavigator() {\n                const chart = this.chart;\n                const connector = this.getFirstConnector();\n                if (connector) {\n                    const table = connector.table, column = this.getColumnAssignment(), columnValues = table.getColumn(column[0], true) || [];\n                    let data;\n                    if (this.sync.syncConfig.crossfilter?.enabled) {\n                        data = this.generateCrossfilterData();\n                    }\n                    else {\n                        data = columnValues.slice();\n                    }\n                    if (!chart.series[0]) {\n                        chart.addSeries({ id: table.id, data }, false);\n                    }\n                    else {\n                        chart.series[0].setData(data, false);\n                    }\n                }\n                this.redrawNavigator();\n            }\n            /**\n             * Generates the data for the crossfilter navigator.\n             */\n            generateCrossfilterData() {\n                const crossfilterOptions = this.sync.syncConfig.crossfilter;\n                const table = this.getFirstConnector()?.table;\n                const columnValues = table?.getColumn(this.getColumnAssignment()[0], true) || [];\n                if (!table || columnValues.length < 1 || !crossfilterOptions) {\n                    return [];\n                }\n                const values = [];\n                const uniqueXValues = [];\n                for (let i = 0, iEnd = columnValues.length; i < iEnd; i++) {\n                    let value = columnValues[i];\n                    if (value === null) {\n                        continue;\n                    }\n                    else if (!isNumber(value)) {\n                        value = `${value}`;\n                    }\n                    // Check if the x-axis data is not of mixed type.\n                    if (this.stringData === void 0) {\n                        this.stringData = isString(value);\n                    }\n                    else if (this.stringData !== isString(value)) {\n                        throw new Error('Mixed data types in crossfilter navigator are ' +\n                            'not supported.');\n                    }\n                    values.push(value);\n                    if (uniqueXValues.indexOf(value) === -1) {\n                        uniqueXValues.push(value);\n                    }\n                }\n                uniqueXValues.sort((a, b) => (pick(a, NaN) < pick(b, NaN) ? -1 : a === b ? 0 : 1));\n                let filteredValues;\n                const modifierOptions = table.getModifier()?.options;\n                if (crossfilterOptions.affectNavigator && modifierOptions) {\n                    const appliedRanges = [], rangedColumns = [], { ranges } = modifierOptions;\n                    for (let i = 0, iEnd = ranges.length; i < iEnd; i++) {\n                        if (ranges[i].column !== this.getColumnAssignment()[0]) {\n                            appliedRanges.push(ranges[i]);\n                            rangedColumns.push(table.getColumn(ranges[i].column, true) || []);\n                        }\n                    }\n                    filteredValues = [];\n                    const appliedRagesLength = appliedRanges.length;\n                    for (let i = 0, iEnd = values.length; i < iEnd; i++) {\n                        const value = values[i];\n                        let allConditionsMet = true;\n                        for (let j = 0; j < appliedRagesLength; j++) {\n                            const range = appliedRanges[j];\n                            if (!(rangedColumns[j][i] >=\n                                (range.minValue ?? -Infinity) &&\n                                rangedColumns[j][i] <=\n                                    (range.maxValue ?? Infinity))) {\n                                allConditionsMet = false;\n                                break;\n                            }\n                        }\n                        if (allConditionsMet) {\n                            filteredValues.push(value);\n                        }\n                    }\n                }\n                else {\n                    filteredValues = values;\n                }\n                const seriesData = [];\n                if (this.stringData) {\n                    this.categories = uniqueXValues;\n                    for (let i = 0, iEnd = uniqueXValues.length; i < iEnd; i++) {\n                        seriesData.push([i, null]);\n                    }\n                }\n                else {\n                    for (let i = 0, iEnd = uniqueXValues.length; i < iEnd; i++) {\n                        seriesData.push([uniqueXValues[i], null]);\n                    }\n                }\n                for (let i = 0, iEnd = filteredValues.length; i < iEnd; i++) {\n                    const index = uniqueXValues.indexOf(filteredValues[i]);\n                    seriesData[index][1] = (seriesData[index][1] || 0) + 1;\n                }\n                return seriesData;\n            }\n            /** @private */\n            resize(width, height) {\n                super.resize(width, height);\n                this.redrawNavigator();\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                const chart = this.chart;\n                await super.update(options, false);\n                if (options.chartOptions) {\n                    chart.update(merge(this.sync.syncConfig.crossfilter?.enabled ? ({ navigator: { xAxis: { labels: { format: '{value}' } } } }) : {}, options.chartOptions), false);\n                }\n                this.emit({ type: 'afterUpdate' });\n                if (shouldRerender) {\n                    this.render();\n                }\n            }\n            getOptionsOnDrop() {\n                return {};\n            }\n        }\n        /**\n         * Default options of the Navigator component.\n         */\n        NavigatorComponent.defaultOptions = merge(Component.defaultOptions, NavigatorComponentDefaults);\n        /**\n         * Predefined sync configuration for the Navigator component.\n         */\n        NavigatorComponent.predefinedSyncConfig = NavigatorSyncs;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/HighchartsPlugin.js', [_modules['Dashboards/Components/HighchartsComponent/HighchartsComponent.js'], _modules['Dashboards/Components/KPIComponent/KPIComponent.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorComponent.js']], function (HighchartsComponent, KPIComponent, NavigatorComponent) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects Highcharts core with the Dashboard plugin.\n         *\n         * @param {Highcharts} highcharts\n         * Highcharts core to connect.\n         */\n        function connectHighcharts(highcharts) {\n            HighchartsComponent.charter = highcharts;\n            KPIComponent.charter = highcharts;\n            NavigatorComponent.charter = highcharts;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('Highcharts', HighchartsComponent);\n            ComponentRegistry.registerComponent('KPI', KPIComponent);\n            ComponentRegistry.registerComponent('Navigator', NavigatorComponent);\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        function onUnregister(e) {\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const HighchartsCustom = {\n            connectHighcharts\n        };\n        const HighchartsPlugin = {\n            custom: HighchartsCustom,\n            name: 'Highcharts.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return HighchartsPlugin;\n    });\n    _registerModule(_modules, 'Dashboards/PluginHandler.js', [_modules['Dashboards/Board.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Components/ComponentRegistry.js']], function (Board, Sync, ComponentRegistry) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var PluginHandler;\n        (function (PluginHandler) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /** @internal */\n            PluginHandler.registry = {};\n            /**\n             * Revision of the Dashboard plugin API.\n             *\n             * @internal\n             */\n            PluginHandler.revision = 0;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a dashboard plugin.\n             *\n             * @param {Dashboards.Plugin} plugin\n             * Dashboard plugin to register.\n             *\n             * @param {string} [key]\n             * Plugin key for the registry. (Default: `plugin.name`)\n             */\n            function addPlugin(plugin, key = plugin.name) {\n                const { maxRevision, minRevision, onRegister } = plugin;\n                if (PluginHandler.registry[key]) {\n                    // Only throw error with custom key\n                    if (key !== plugin.name) {\n                        throw new Error(`Plugin '${key}' already registered.`);\n                    }\n                    return;\n                }\n                if ((typeof minRevision === 'number' && minRevision > PluginHandler.revision) ||\n                    (typeof maxRevision === 'number' && maxRevision < PluginHandler.revision)) {\n                    throw new Error(`Plugin '${key}' does not support revision ${PluginHandler.revision}.`);\n                }\n                onRegister({\n                    Board,\n                    ComponentRegistry,\n                    Sync,\n                    revision: PluginHandler.revision\n                });\n                PluginHandler.registry[key] = plugin;\n            }\n            PluginHandler.addPlugin = addPlugin;\n            /**\n             * Removes a dashboard plugin.\n             *\n             * @param {string} key\n             * Plugin key in the registry.\n             */\n            function removePlugin(key) {\n                if (PluginHandler.registry[key]) {\n                    PluginHandler.registry[key].onUnregister({\n                        ComponentRegistry: ComponentRegistry,\n                        Board,\n                        Sync,\n                        revision: PluginHandler.revision\n                    });\n                    delete PluginHandler.registry[key];\n                }\n            }\n            PluginHandler.removePlugin = removePlugin;\n        })(PluginHandler || (PluginHandler = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PluginHandler;\n    });\n    _registerModule(_modules, 'masters/dashboards.src.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Dashboards/Board.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Data/DataPool.js'], _modules['Data/DataCursor.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Plugins/DataGridPlugin.js'], _modules['Dashboards/Plugins/HighchartsPlugin.js'], _modules['Dashboards/PluginHandler.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Utilities.js']], function (AST, DataConnector, Board, Component, ComponentRegistry, DataPool, DataCursor, DataModifier, DataTable, Globals, DataGridPlugin, HighchartsPlugin, PluginHandler, Sync, Utilities) {\n\n        // Fill registries\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.board = Board.board;\n        G.error = Utilities.error;\n        G.merge = Utilities.merge;\n        G.uniqueKey = Utilities.uniqueKey;\n        G.AST = AST;\n        G.Board = Board;\n        G.Component = Component;\n        G.ComponentRegistry = ComponentRegistry;\n        G.DataConnector = DataConnector;\n        G.DataCursor = DataCursor;\n        G.DataModifier = DataModifier;\n        G.DataPool = DataPool;\n        G.DataTable = DataTable;\n        G.DataGridPlugin = DataGridPlugin;\n        G.HighchartsPlugin = HighchartsPlugin;\n        G.PluginHandler = PluginHandler;\n        G.Sync = Sync;\n        /* *\n         *\n         *  Classic Export\n         *\n         * */\n        if (!G.win.Dashboards) {\n            G.win.Dashboards = G;\n        }\n        if (G.win.DataGrid) {\n            DataGridPlugin.custom.connectDataGrid(G.win.DataGrid);\n            G.PluginHandler.addPlugin(DataGridPlugin);\n        }\n        if (G.win.Highcharts) {\n            HighchartsPlugin.custom.connectHighcharts(G.win.Highcharts);\n            G.PluginHandler.addPlugin(HighchartsPlugin);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n    _modules['masters/dashboards.src.js']._modules = _modules;\n    return _modules['masters/dashboards.src.js'];\n}));"],"names":["root","factory","module","exports","document","define","amd","Dashboards","error","window","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","dispatchEvent","detail","Globals","SVG_NS","product","version","win","doc","svg","createElementNS","createSVGRect","userAgent","navigator","isChrome","chrome","isFirefox","indexOf","isMS","test","opera","isSafari","isTouchDevice","isWebKit","deg2rad","Math","PI","hasBidiBug","parseInt","split","marginNames","noop","supportsPassiveEvents","supportsPassive","opts","Object","defineProperty","get","addEventListener","removeEventListener","charts","composed","dateFormats","seriesTypes","symbolSizes","chartCount","H","serialMode","code","stop","chart","params","severity","isCode","isNumber","message","toString","additionalMessages","objectEach","value","key","encodeURI","fireEvent","Error","console","messages","warn","push","pInt","s","mag","isString","isArray","str","prototype","call","isObject","strict","isDOMElement","nodeType","isClass","c","constructor","name","n","isNaN","Infinity","defined","attr","elem","keyOrAttribs","ret","isGetter","attrSingle","setAttribute","getAttribute","removeAttribute","splat","extend","a","b","pick","arguments","length","i","arg","css","el","styles","style","getMagnitude","num","pow","floor","log","LN10","correctFloat","prec","parseFloat","toPrecision","easeInOutSine","pos","cos","find","Array","arr","callback","ctx","removeEvent","type","removeOneEvent","removeAllEvents","eventCollection","types","len","nodeName","_val","owner","events","hcEvents","typeEvents","filter","eventArguments","defaultFunction","createEvent","e","initEvent","target","preventDefault","defaultPrevented","object","multilevel","unshift","getPrototypeOf","sort","order","forEach","map","each","grep","reduce","some","val","slice","uniqueKey","hash","random","substring","id","jQuery","highcharts","shift","addEvent","options","Point","series","runTrackerClick","passive","capture","eventObject","arrayMax","data","max","arrayMin","min","clamp","clearTimeout","createElement","tag","attribs","parent","nopad","padding","border","margin","appendChild","crisp","lineWidth","inverted","mod","inverter","round","destroyObjectProperties","except","destructablesOnly","destroy","diffObjects","newer","older","keepOlder","collectionsWithUpdate","diff","depth","keeper","newerVal","keys","discardElement","element","parentElement","removeChild","erase","item","splice","extendClass","members","getClosestDistance","arrays","onError","closest","loopLength","distance","allowNegative","xData","getNestedProperty","pathElements","pathElement","thisProp","child","getStyle","prop","toInt","offsetWidth","scrollWidth","boundingClientRectWidth","getBoundingClientRect","width","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","inArray","fromIndex","insertItem","collection","indexOption","index","isInternal","_i","isFunction","merge","doCopy","copy","original","normalizeTickInterval","interval","multiples","magnitude","allowDecimals","hasTickAmount","retInterval","normalized","offset","docElem","documentElement","box","parentNode","top","left","height","pageYOffset","scrollTop","clientTop","pageXOffset","scrollLeft","clientLeft","pad","number","padder","String","replace","join","pushUnique","array","relativeLength","base","replaceNested","text","replacements","previous","replacement","stableSort","sortFunction","sortValue","safeI","syncTimeout","delay","context","setTimeout","timeUnits","millisecond","second","minute","hour","day","week","month","year","useSerialIds","mode","wrap","method","func","proceed","outerArgs","scope","concat","U","trustedTypes","trustedTypesPolicy","createPolicy","createHTML","emptyHTML","hasValidDOMParser","Boolean","DOMParser","parseFromString","AST","filterUserAttributes","attributes","valid","allowedAttributes","allowedReferences","ref","parseStyle","line","pair","trim","g","toUpperCase","setElementHTML","html","innerHTML","ast","addToDOM","source","nodes","parseMarkup","recurse","subtree","subParent","node","tagName","textNode","textContent","createTextNode","bypassHTMLFiltering","allowedTags","NS","namespaceURI","children","markup","body","appendChildNodes","addTo","toLowerCase","astNode","parsedAttributes","attrib","childNodes","childNode","ComponentRegistry","registerComponent","ComponentClass","classNamePrefix","classNames","layout","cell","cellHover","cellActive","cellLoading","row","layoutsWrapper","boardContainer","guiElementType","boards","DG","PREFIX","resizeSnap","resizeSnapX","resizeSnapY","separator","contextMenuBtn","contextMenuBtnText","contextMenu","contextMenuItem","editModeEnabled","editToolbar","editToolbarCellOutline","editToolbarRowOutline","editToolbarItem","editToolbarRow","editToolbarCell","editSidebar","editSidebarShow","editSidebarHide","editSidebarTitle","editSidebarMenuItem","rowContextHighlight","cellEditHighlight","dashboardCellEditHighlightActive","dragMock","dropPointer","contextDetectionPointer","resizePointer","currentEditedElement","maskElement","menuItem","menu","menuVerticalSeparator","menuHorizontalSeparator","menuDestroy","editSidebarWrapper","customSelect","customSelectButton","toggleContainer","toggleWrapper","toggleSlider","toggleWrapperColored","toggleLabels","button","sidebarNavButton","labelText","editSidebarTabBtn","editToolsBtn","editTools","editGridItems","confirmationPopup","popupButtonContainer","popupContentContainer","popupCancelBtn","popupConfirmBtn","popupCloseButton","editOverlay","editOverlayActive","resizerMenuBtnActive","sidebarCloseButton","editSidebarTabBtnWrapper","editSidebarRight","editSidebarRightShow","viewFullscreen","accordionMenu","accordionContainer","accordionHeader","accordionHeaderBtn","accordionHeaderIcon","accordionContent","accordionNestedWrapper","accordionMenuButtonsContainer","accordionMenuButton","hiddenElement","collapsableContentHeader","standaloneElement","collapsedElement","dropdown","dropdownContent","dropdownButton","dropdownButtonContent","dropdownIcon","icon","lang","accessibility","editMode","addComponent","cancelButton","caption","chartClassName","chartConfig","chartID","chartOptions","chartType","connectorName","confirmButton","confirmDestroyCell","confirmDestroyRow","confirmDiscardChanges","dataLabels","errorMessage","exitFullscreen","off","on","pointFormat","settings","title","sidebar","HTML","Highcharts","DataGrid","KPI","getOffsets","guiElement","referenceElement","right","bottom","container","guiElementClientRect","referenceClientRect","getDimFromOffsets","offsets","getElementId","elementType","getPercentageWidth","result","fractionRegEx","match","getElementContainer","render","elementId","div","getElementById","HTMLElement","parentContainer","removeBindedEventFn","stopImmediatePropagation","getType","changeVisibility","setVisible","displayStyle","visibilityChanged","isVisible","display","hide","show","EditGlobals","GUIElement","mountedComponent","setHighlight","classList","toggle","board","setActiveState","add","CellHTML","Bindings","getGUIElement","idOrElement","querySelectorAll","querySelector","optionsStates","states","optionsEvents","renderTo","mountedComponents","getCell","componentContainer","className","component","promise","load","update","connector","setCell","click","active","hover","componentFromJSON","json","componentClass","$class","fromJSON","getRow","getLayout","Cell","containerId","copyId","parentContainerId","mountedComponentJSON","layoutJSON","cellElement","cellHeight","layoutOptions","rowOptions","cellClassName","guiEnabled","mountComponentFromJSON","setNestedLayout","layoutFromJSON","nestedLayout","Layout","optionsGui","gui","unmountCell","destroyRow","cells","toJSON","rowContainerId","getOptions","getVisibleCells","getParentCell","level","parentCell","getOverlappingLevels","align","levelMaxGap","levels","cellOffset","parentCellOffset","abs","setSize","flex","cellWidth","convertWidthToValue","hideContextPointer","cellToolbar","showToolbar","remove","cnt","isSet","contains","isHighlighted","setLoadingState","enabled","registry","addCallback","getCallback","tableEvents","initConnector","connectorId","dataPool","isNewConnector","getConnector","setConnector","eventCallback","pop","clearTableListeners","setupTableListeners","table","modified","emit","presentationModifier","presentationTable","modifyTable","clone","event","tableEventTimeout","targetConnector","updateOptions","newOptions","clearEvent","EditableOptions","bindings","defaultBindings","editableOptions","iEnd","option","selectOptions","getConnectorIds","keyMap","color","typeMap","skipRedraw","defaultTypeMap","SyncEmitter","register","emitter","emitterID","create","SyncHandler","handler","handlerID","Sync","predefinedSyncConfig","syncConfig","prepareSyncConfig","sync","registeredSyncHandlers","registeredSyncEmitters","isSyncing","listeners","predefinedConfig","componentSyncOptions","defaultSyncPairs","defaultPairs","defaultSyncOptions","defaultOptionsList","acc","syncName","defaultPair","defaultOptions","entry","preparedOptions","registerSyncEmitter","isRegisteredEmitter","registerSyncHandler","isRegisteredHandler","start","syncOptions","emitterConfig","handlerConfig","defaultHandlers","ComponentUtilities","getStyles","elementStyles","sumPixels","accumulator","getMargins","includeBorders","borders","x","y","getPaddings","coreError","coreUniqueKey","copyDepth","copyDepthError","CallbackRegistry","ConnectorHandler","CU","DU","Component","createTextElement","elementName","textOptions","connectorHandlers","callbackRegistry","cellListeners","resizeTimeouts","innerResizeTimeouts","connectorOptions","editableOptionsBindings","dimensions","Number","contentElement","setupEventListeners","attachCellListeners","onTableChanged","getOptionsOnDrop","getFirstConnector","resizeTo","getCellIndex","resize","initConnectors","connectorHandler","getContentHeight","titleHeight","titleElement","clientHeight","captionElement","removeProperty","timeout","cancelAnimationFrame","timeoutID","requestAnimationFrame","margins","shouldRerender","shouldForceRerender","connectorsHaveChanged","oldConnectorId","eventType","resizeObserverCallback","ResizeObserver","resizeObserver","observe","unbind","setTitle","titleOptions","newTitle","replaceWith","insertBefore","firstChild","setCaption","captionOptions","newCaption","getEditableOptions","getEditableOptionValue","propertyPath","end","elements","HTMLComponentDefaults","HTMLSyncs","HTMLComponent","JSON","parse","isError","getElementsFromString","constructTree","src","parser","htmlString","stringify","sender","DataTable","isNull","NULL","columnNames","aliases","autoId","columns","rowCount","versionTag","rowKeysId","thisColumns","column","columnName","aliasKeys","thisAliases","alias","setRowKeysColumn","skipColumns","eventDetail","tableOptions","tableClone","deleteColumnAlias","deletedAlias","modifier","modifyColumns","deleteColumns","deletedColumns","modifiedColumns","nColumns","deleteRows","rowIndex","deletedRows","modifiedRows","deletedCells","j","jEnd","modifyRows","rows","columnNameOrAlias","getCellAsBoolean","getCellAsNumber","useNaN","cellValue","getCellAsString","getColumn","asReference","getColumns","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","removeRowKeysColumn","columnNamesOrAliases","tableAliasMap","tableColumns","getModifier","getRows","getRowCount","getRowIndexBy","rowIndexOffset","getRowObject","getRowObjects","i2","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","moveRowKeysColumnToLast","modifyCell","setColumn","setColumns","tableModifier","reset","tableColumn","tableColumnNames","nRows","keysArray","getRowKeysColumn","getRowIndexOriginal","idx","idxOrig","rowKeyCol","setModifier","modify","Promise","resolve","then","setRow","setRows","rowColumnNames","rowColumnName","indexRowCount","includes","rowKeyColumn","DataConverter","regex","Date","UTC","NaN","alternative","d","getFullYear","mergedOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","converter","guessType","decimalRegex","getDate","deduceDateFormat","limit","save","stable","format","thing","guessedFormat","madeDeduction","dateFormat","export","headers","getTable","trimedValue","innerTrimedValue","floatValue","dateFormatProp","getTime","getTimezoneOffset","inside","alternativeFormat","startColumn","endColumn","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","getSortedColumns","usePresentationOrder","csvRows","columnsCount","rowArray","columnIndex","columnDataType","columnMeta","whatIs","dataType","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","token","actualColumn","read","pushType","isFinite","initialValue","points","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","DataModifier","benchmark","dataTable","results","execute","iterations","times","startTime","endTime","performance","now","reject","registerType","DataModifierClass","DataConnector","metadata","polling","describeColumn","describeColumns","getColumnOrder","usePresentationState","names","setColumnOrder","setModifierOptions","modifierOptions","ModifierClass","startPolling","refreshTime","_polling","stopPolling","DataConnectorClass","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","GoogleSheetsConverter","header","parseOptions","values","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","status","worksheet","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","tableCaption","classes","attrs","topheaders","subheaders","useRowspanHeaders","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","getElementsByTagName","rowsCount","items","itemsLength","columnsInRow","columnsInRowLength","relativeColumnIndex","HTMLTableConnector","tableID","JSONConverter","orientation","newRow","arrayWithPath","JSONConnector","dataUrl","ChainModifier","chain","optionsChain","clear","modifiers","reverse","promiseChain","chainTable","InvertModifier","modifiedRowIndex","modifiedColumnNames","j2","RangeModifier","additive","ranges","range","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","addTabIndexToCells","components","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","needle","columnNeedle","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","Serializable","classRegistry","helperRegistry","classs","helper","registerClassPrototype","classPrototype","registerHelper","helperFunctions","serializer","numberOfHelpers","jsonSupportFor","DataCursorHelper","cursorsJSON","stateMapJSON","tableIds","k","kEnd","connectors","DataPoolDefaults","DataPool","waiting","waitingList","getConnectorOptions","loadConnector","connectorIds","getConnectorTable","ConnectorClass","setConnectorOptions","instances","Row","cellsJSON","setContainerHeight","rowContainer","rowElement","rowClassName","setCells","setCellsFromJSON","cellsElements","getElementsByClassName","addCell","cellJSON","componentsToMount","mountCell","setCellEvents","rowCells","unmountRow","layoutContainerId","nextCell","prevCell","nextSibling","cellIndex","getVisibleRows","getRowLevels","cellOffsets","rowLevels","rowLevelsArray","getRowLevelInfo","posY","rowLevelInfo","rowLevel","rowsJSON","layouts","importLocal","localStorage","getItem","layoutClassName","setRowsFromJSON","rowsElements","addRow","mountRow","setRowEvents","exportLocal","setItem","getRowIndex","nextRow","prevRow","dashboardContainerId","DashboardsAccessibility","Board","async","init","componentTypes","initContainer","initEditMode","dataCursor","a11y","componentPromises","setComponents","initEvents","all","runReflow","reflow","EditMode","promises","unobserve","importLayoutLocal","editModeTools","tools","hideToolbars","updatePosition","contextButtonElement","componentOptions","layoutsJSON","getComponentById","getComponentByCellId","dashboardJSON","syncPair","extremes","groupKey","group","handleChangeExtremes","dataGrid","scrollToRow","registerCursorListeners","autoScroll","highlightOptions","highlight","onDataGridHover","dataset","onDataGridMouseOut","highlightTimeout","handleCursor","rowElements","highlightedDataRow","toggleRowHighlight","hoveredRow","handleCursorOut","visibility","handleVisibilityChange","DataGridExtremesSync","DataGridHighlightSync","DataGridVisibilitySync","dataGridClassName","dataGridID","dataGridOptions","onUpdate","inputElement","parentRow","dataTableRowIndex","valueToSet","DataGridSyncs","DataGridComponentDefaults","DataGridComponent","connectorListeners","disableEditingModifiedColumns","cellInputEl","filterColumns","getColumnOptions","modifierColumns","columnFormulas","editable","shouldUpdateTheGrid","childElementCount","input","convertedInputValue","constructDataGrid","setupConnectorUpdate","DataGridNamespace","columnOptions","keyEvent","visibleColumns","columnsToDelete","filteredTable","connectorsIds","containerResizeObserver","disconnect","custom","connectDataGrid","DataGridNS","onRegister","onUnregister","cleanupCallbacks","extremesEventHandler","resetSelection","trigger","axis","seriesFromConnectorArray","seriesFromConnector","visiblePoints","point","isInside","minCursorData","coll","maxCursorData","columnAssignment","assignment","seriesId","dateTime","addExtremesEvent","axes","addExtremesEventCallbacks","resetExtremesEvent","zooming","unregisterCallbacks","dimension","handleUpdateExtremes","eventTarget","didZoom","setExtremes","resetZoomButton","showResetZoom","redraw","addCursorListeners","handleChartZoomOut","zoomOut","resetZoomButtons","getModifiedTableOffset","minRange","currentRange","tableRowIndex","affectedSeriesId","highlightPoint","showTooltip","showCrosshair","colAssignment","mouseOver","mouseOut","getHoveredPoint","foundSeries","seriesIds","visible","isCartesian","hoverPoint","tooltip","useSharedTooltip","shared","hoverSeries","pointer","getHoverData","refresh","hoverPoints","setState","xAxis","drawCrosshair","yAxis","unhovered","unhoverAllPoints","seriesLength","pointsLength","xAxes","yAxes","l","findSeries","seriesArray","handleShow","handleHide","HighchartsExtremesSync","HighchartsHighlightSync","HighchartsVisibilitySync","allowConnectorUpdate","styledMode","chartConstructor","nestedOptions","iconURL","showToggle","HighchartsSyncs","HighchartsComponentDefaults","HighchartsComponent","chartContainer","setOptions","updateSeries","hcComponent","getChart","heightOffset","onChartUpdate","newSeriesIds","getDefaultColumnAssignment","oldSeriesId","newSeriesId","updateSeriesFromConnector","dataStructure","seriesOptions","adjustDraggableOptions","formula","dragDrop","draggableY","seriesTable","addSeries","createChart","firstColumn","charter","Factory","Chart","registerChartEvents","allEvents","optionKey","seriesOrAxisOptions","seriesOrAxis","callbackKey","animation","plotOptions","setValue","KPIExtremesSync","minFontSize","thresholdColors","linkedValueTo","seriesIndex","pointIndex","alignThresholds","panning","borderRadius","colorCount","allowMutatingData","ignoreHiddenSeries","spacing","theme","position","singleTouch","resetButton","zIndex","borderColor","backgroundColor","plotBorderColor","colors","hasNewSafariBug","Intl","DateTimeFormat","formatRange","hasOldSafariBug","Time","useUTC","variableTimezone","timezoneOffsetFunction","unit","date","timezoneOffset","realMs","ms","setTime","set","newOffset","timezone","makeTime","hours","minutes","seconds","time","cacheKey","gmt","colon","dateTimeFormat","formatCache","timeZone","timeZoneName","valueOf","capitalize","invalidDate","dayOfMonth","fullYear","langWeekdays","weekdays","shortWeekdays","substr","A","w","shortMonths","B","months","m","o","Y","I","M","p","P","S","L","resolveDTLFormat","f","main","from","to","getTimeTicks","normalizedInterval","startOfWeek","minYear","variableDayLength","minDay","tickPositions","higherRanks","minDate","unitRange","count","minMonth","minDateDate","minHours","t","info","totalRange","getDateFormat","dateTimeLabelFormats","dateStr","blank","strpos","lastN","ChartDefaults","Palettes","symbols","loading","numericSymbols","resetZoom","resetZoomTitle","thousandsSep","global","buttonTheme","fill","r","stroke","fontSize","fontWeight","select","disabled","widthAdjust","subtitle","verticalAlign","legend","alignColumns","itemMarginBottom","itemMarginTop","labelFormatter","navigation","activeColor","inactiveColor","itemStyle","textDecoration","textOverflow","itemHoverStyle","itemHiddenStyle","shadow","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","opacity","textAlign","duration","easing","sqrt","footerFormat","headerShape","hideDelay","shape","snap","headerFormat","borderWidth","stickOnContact","useHTML","credits","href","defaultTime","D","helpers","divide","eq","ge","gt","condition","le","lt","multiply","ne","subtract","unless","subRegex","matches","floatRegex","decRegex","numberFormatter","numberFormat","resolveProperty","currentMatch","hasSub","exec","subMatch","isBlock","expression","charAt","startInner","startingElseSection","elseBody","parts","valueAndFormat","segment","decimals","fractionDigits","origDec","exponent","firstDecimals","toExponential","toFixed","roundedNumber","strinteger","thousands","KPISyncs","KPIComponentDefaults","Templating","KPIComponent","getSubtitleClassName","linkValueToChart","updateElements","defaultChartOptions","getValue","valueFormat","valueFormatter","prevValue","targetSeries","targetPoint","addPoint","getSubtitle","getValueColor","prefix","v","threshold","mouseWheel","outside","marker","outlineWidth","colorIndex","endOnTick","gridZIndex","labels","opposite","showFirstLabel","showLastLabel","startOnTick","tickPosition","maxPadding","scrollbar","MIN_VALUE","NavigatorSyncUtils","setRangeOptions","changed","unsetRangeOptions","Range","affectNavigator","crossfilter","afterSetExtremes","filterColumn","getColumnAssignment","getAxisExtremes","extremesListener","extremesColumn","maxIndex","minIndex","NavigatorCrossfilterSync","NavigatorExtremesSync","NavigatorComponentDefaults","NavigatorSyncs","NavigatorComponent","adjustNavigator","chartHeight","clientWidth","chartUpdates","chartWidth","navigatorHeight","plotTop","handles","columnsAssignment","columnAssignments","getExtremes","dataMin","dataMax","categories","ceil","hasNames","renderNavigator","redrawNavigator","timeouts","columnValues","generateCrossfilterData","setData","filteredValues","crossfilterOptions","uniqueXValues","stringData","appliedRanges","rangedColumns","appliedRagesLength","allConditionsMet","seriesData","connectHighcharts","PluginHandler","revision","addPlugin","plugin","maxRevision","minRevision","removePlugin","DataGridPlugin","HighchartsPlugin","Utilities","G"],"rangeMappings":";;;;;;;;;;","mappings":"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E/C,IAAMa,EAAmBhB,EAAKtB,UAAU,CAExC,GAAIsC,EAAkB,CAClB,IAAMtC,EAAa,CAAC,EACpB,EAAE,CAACtL,OAAO,CAACjF,IAAI,CAAC6S,EAAkB,AAACC,IAC3BA,AAAgB,eAAhBA,EAAOtS,IAAI,CACXoS,EAAQ1Q,KAAK,CAAGmO,EAAIO,UAAU,CAACkC,EAAO9T,KAAK,EAG3CuR,CAAU,CAACuC,EAAOtS,IAAI,CAAC,CAAGsS,EAAO9T,KAAK,AAE9C,GACA4T,EAAQrC,UAAU,CAAGA,CACzB,CAEA,GAAIsB,EAAKkB,UAAU,CAACnR,MAAM,CAAE,CACxB,IAAM0Q,EAAW,EAAE,CACnB,EAAE,CAACrN,OAAO,CAACjF,IAAI,CAAC6R,EAAKkB,UAAU,CAAE,AAACC,IAC9BP,EAAiBO,EAAWV,EAChC,GACIA,EAAS1Q,MAAM,EACfgR,CAAAA,EAAQN,QAAQ,CAAGA,CAAO,CAElC,CACAI,EAAMlT,IAAI,CAACoT,EACf,EAEA,MADA,EAAE,CAAC3N,OAAO,CAACjF,IAAI,CAACnE,EAAI2W,IAAI,CAACO,UAAU,CAAE,AAACC,GAAcP,EAAiBO,EAAWxB,IACzEA,CACX,CACJ,CA2QA,OAtPAnB,EAAII,iBAAiB,CAAG,CACpB,MACA,gBACA,mBACA,gBACA,gBACA,cACA,aACA,kBACA,YACA,eACA,gBACA,uBACA,gBACA,QACA,YACA,QACA,UACA,KACA,KACA,IACA,KACA,KACA,WACA,OACA,cACA,cACA,gBACA,SACA,OACA,KACA,KACA,MACA,eACA,cACA,SACA,UACA,WACA,SACA,UACA,cACA,eACA,eACA,IACA,SACA,OACA,OACA,OACA,QACA,QACA,MACA,cACA,eACA,SACA,iBACA,eACA,QACA,cACA,SACA,UACA,UACA,SACA,WACA,aACA,cACA,aACA,aACA,QACA,OACA,SACA,QACA,IACA,KACA,KACA,aACA,IACA,KACA,KACA,SACH,CAgBDJ,EAAIK,iBAAiB,CAAG,CACpB,WACA,UACA,UACA,IACA,MACA,KACA,IACH,CAeDL,EAAI8B,WAAW,CAAG,CACd,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"}