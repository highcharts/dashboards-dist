{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards v2.0.0 (2024-03-13)\n *\n * (c) 2009-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = (root && root.document) ?\n            factory(root) :\n            factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/dashboards', function () {\n            return factory(root);\n        });\n    } else {\n        if (root.Dashboards) {\n            root.Dashboards.error(16, true);\n        }\n        root.Dashboards = factory(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function (window) {\n    'use strict';\n    var _modules = {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Shared Highcharts properties.\n         * @private\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.SVG_NS = 'http://www.w3.org/2000/svg', Globals.product = 'Highcharts', Globals.version = '2.0.0', Globals.win = (typeof window !== 'undefined' ?\n                window :\n                {}), // eslint-disable-line node/no-unsupported-features/es-builtins\n            Globals.doc = Globals.win.document, Globals.svg = (Globals.doc &&\n                Globals.doc.createElementNS &&\n                !!Globals.doc.createElementNS(Globals.SVG_NS, 'svg').createSVGRect), Globals.userAgent = (Globals.win.navigator && Globals.win.navigator.userAgent) || '', Globals.isChrome = Globals.userAgent.indexOf('Chrome') !== -1, Globals.isFirefox = Globals.userAgent.indexOf('Firefox') !== -1, Globals.isMS = /(edge|msie|trident)/i.test(Globals.userAgent) && !Globals.win.opera, Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1, Globals.isTouchDevice = /(Mobile|Android|Windows Phone)/.test(Globals.userAgent), Globals.isWebKit = Globals.userAgent.indexOf('AppleWebKit') !== -1, Globals.deg2rad = Math.PI * 2 / 360, Globals.hasBidiBug = (Globals.isFirefox &&\n                parseInt(Globals.userAgent.split('Firefox/')[1], 10) < 4 // Issue #38\n            ), Globals.marginNames = [\n                'plotTop',\n                'marginRight',\n                'marginBottom',\n                'plotLeft'\n            ], Globals.noop = function () { }, Globals.supportsPassiveEvents = (function () {\n                // Checks whether the browser supports passive events, (#11353).\n                let supportsPassive = false;\n                // Object.defineProperty doesn't work on IE as well as passive\n                // events - instead of using polyfill, we can exclude IE totally.\n                if (!Globals.isMS) {\n                    const opts = Object.defineProperty({}, 'passive', {\n                        get: function () {\n                            supportsPassive = true;\n                        }\n                    });\n                    if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                        Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                        Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n                    }\n                }\n                return supportsPassive;\n            }());\n            /**\n             * An array containing the current chart objects in the page. A chart's\n             * position in the array is preserved throughout the page's lifetime. When\n             * a chart is destroyed, the array item becomes `undefined`.\n             *\n             * @name Highcharts.charts\n             * @type {Array<Highcharts.Chart|undefined>}\n             */\n            Globals.charts = [];\n            /**\n             * A shared registry between all bundles to keep track of applied\n             * compositions.\n             * @private\n             */\n            Globals.composed = [];\n            /**\n             * A hook for defining additional date format specifiers. New\n             * specifiers are defined as key-value pairs by using the\n             * specifier as key, and a function which takes the timestamp as\n             * value. This function returns the formatted portion of the\n             * date.\n             *\n             * @sample highcharts/global/dateformats/\n             *         Adding support for week number\n             *\n             * @name Highcharts.dateFormats\n             * @type {Record<string, Highcharts.TimeFormatCallbackFunction>}\n             */\n            Globals.dateFormats = {};\n            /**\n             * @private\n             * @deprecated\n             * @todo Use only `Core/Series/SeriesRegistry.seriesTypes`\n             */\n            Globals.seriesTypes = {};\n            /**\n             * @private\n             */\n            Globals.symbolSizes = {};\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            // eslint-disable-next-line prefer-const\n            Globals.chartCount = 0;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Theme options that should get applied to the chart. In module mode it\n         * might not be possible to change this property because of read-only\n         * restrictions, instead use {@link Highcharts.setOptions}.\n         *\n         * @deprecated\n         * @name Highcharts.theme\n         * @type {Highcharts.Options}\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Core/Utilities.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { charts, doc, win } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Highcharts.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        Reference to the chart that causes the error. Used in 'debugger'\n         *        module to display errors directly on the chart.\n         *        Important note: This argument is undefined for errors that lack\n         *        access to the Chart instance. In such case, the error will be\n         *        displayed on the last created chart.\n         *\n         * @param {Highcharts.Dictionary<string>} [params]\n         *        Additional parameters for the generated message.\n         *\n         * @return {void}\n         */\n        function error(code, stop, chart, params) {\n            const severity = stop ? 'Highcharts error' : 'Highcharts warning';\n            if (code === 32) {\n                code = `${severity}: Deprecated member`;\n            }\n            const isCode = isNumber(code);\n            let message = isCode ?\n                `${severity} #${code}: www.highcharts.com/errors/${code}/` :\n                code.toString();\n            const defaultHandler = function () {\n                if (stop) {\n                    throw new Error(message);\n                }\n                // Else ...\n                if (win.console &&\n                    error.messages.indexOf(message) === -1 // Prevent console flooting\n                ) {\n                    console.warn(message); // eslint-disable-line no-console\n                }\n            };\n            if (typeof params !== 'undefined') {\n                let additionalMessages = '';\n                if (isCode) {\n                    message += '?';\n                }\n                objectEach(params, function (value, key) {\n                    additionalMessages += `\\n - ${key}: ${value}`;\n                    if (isCode) {\n                        message += encodeURI(key) + '=' + encodeURI(value);\n                    }\n                });\n                message += additionalMessages;\n            }\n            fireEvent(H, 'displayError', { chart, code, message, params }, defaultHandler);\n            error.messages.push(message);\n        }\n        (function (error) {\n            error.messages = [];\n        })(error || (error = {}));\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {boolean} extend\n         *        Whether to extend the left-side object (a) or return a whole new\n         *        object.\n         *\n         * @param {T|undefined} a\n         *        The first object to extend. When only this is given, the function\n         *        returns a deep copy.\n         *\n         * @param {...Array<object|undefined>} [n]\n         *        An object to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */ /**\n        * Utility function to deep merge two or more objects and return a third object.\n        * The merge function can also be used with a single object argument to create a\n        * deep copy of an object.\n        *\n        * @function Highcharts.merge<T>\n        *\n        * @param {T|undefined} a\n        *        The first object to extend. When only this is given, the function\n        *        returns a deep copy.\n        *\n        * @param {...Array<object|undefined>} [n]\n        *        An object to merge into the previous one.\n        *\n        * @return {T}\n        *         The merged object. If the first argument is true, the return is the\n        *         same as the second argument.\n        */\n        function merge() {\n            /* eslint-enable valid-jsdoc */\n            let i, args = arguments, ret = {};\n            const doCopy = function (copy, original) {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                objectEach(original, function (value, key) {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (args[0] === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Constrain a value to within a lower and upper threshold.\n         *\n         * @private\n         * @param {number} value The initial value\n         * @param {number} min The lower threshold\n         * @param {number} max The upper threshold\n         * @return {number} Returns a number value within min and max.\n         */\n        function clamp(value, min, max) {\n            return value > min ? value < max ? value : max : min;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Return the deep difference between two objects. It can either return the new\n         * properties, or optionally return the old values of new properties.\n         * @private\n         */\n        function diffObjects(newer, older, keepOlder, collectionsWithUpdate) {\n            const ret = {};\n            /**\n             * Recurse over a set of options and its current values, and store the\n             * current values in the ret object.\n             */\n            function diff(newer, older, ret, depth) {\n                const keeper = keepOlder ? older : newer;\n                objectEach(newer, function (newerVal, key) {\n                    if (!depth &&\n                        collectionsWithUpdate &&\n                        collectionsWithUpdate.indexOf(key) > -1 &&\n                        older[key]) {\n                        newerVal = splat(newerVal);\n                        ret[key] = [];\n                        // Iterate over collections like series, xAxis or yAxis and map\n                        // the items by index.\n                        for (let i = 0; i < Math.max(newerVal.length, older[key].length); i++) {\n                            // Item exists in current data (#6347)\n                            if (older[key][i]) {\n                                // If the item is missing from the new data, we need to\n                                // save the whole config structure. Like when\n                                // responsively updating from a dual axis layout to a\n                                // single axis and back (#13544).\n                                if (newerVal[i] === void 0) {\n                                    ret[key][i] = older[key][i];\n                                    // Otherwise, proceed\n                                }\n                                else {\n                                    ret[key][i] = {};\n                                    diff(newerVal[i], older[key][i], ret[key][i], depth + 1);\n                                }\n                            }\n                        }\n                    }\n                    else if (isObject(newerVal, true) &&\n                        !newerVal.nodeType // #10044\n                    ) {\n                        ret[key] = isArray(newerVal) ? [] : {};\n                        diff(newerVal, older[key] || {}, ret[key], depth + 1);\n                        // Delete empty nested objects\n                        if (Object.keys(ret[key]).length === 0 &&\n                            // Except colorAxis which is a special case where the empty\n                            // object means it is enabled. Which is unfortunate and we\n                            // should try to find a better way.\n                            !(key === 'colorAxis' && depth === 0)) {\n                            delete ret[key];\n                        }\n                    }\n                    else if (newer[key] !== older[key] ||\n                        // If the newer key is explicitly undefined, keep it (#10525)\n                        (key in newer && !(key in older))) {\n                        if (key !== '__proto__' && key !== 'constructor') {\n                            ret[key] = keeper[key];\n                        }\n                    }\n                });\n            }\n            diff(newer, older, ret, 0);\n            return ret;\n        }\n        /**\n         * Shortcut for parseInt\n         *\n         * @private\n         * @function Highcharts.pInt\n         *\n         * @param {*} s\n         *        any\n         *\n         * @param {number} [mag]\n         *        Magnitude\n         *\n         * @return {number}\n         *         number\n         */\n        function pInt(s, mag) {\n            return parseInt(s, mag || 10);\n        }\n        /**\n         * Utility function to check for string type.\n         *\n         * @function Highcharts.isString\n         *\n         * @param {*} s\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a string.\n         */\n        function isString(s) {\n            return typeof s === 'string';\n        }\n        /**\n         * Utility function to check if an item is an array.\n         *\n         * @function Highcharts.isArray\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is an array.\n         */\n        function isArray(obj) {\n            const str = Object.prototype.toString.call(obj);\n            return str === '[object Array]' || str === '[object Array Iterator]';\n        }\n        /**\n         * Utility function to check if an item is of type object.\n         *\n         * @function Highcharts.isObject\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @param {boolean} [strict=false]\n         *        Also checks that the object is not an array.\n         *\n         * @return {boolean}\n         *         True if the argument is an object.\n         */\n        function isObject(obj, strict) {\n            return (!!obj &&\n                typeof obj === 'object' &&\n                (!strict || !isArray(obj))); // eslint-disable-line @typescript-eslint/no-explicit-any\n        }\n        /**\n         * Utility function to check if an Object is a HTML Element.\n         *\n         * @function Highcharts.isDOMElement\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a HTML Element.\n         */\n        function isDOMElement(obj) {\n            return isObject(obj) && typeof obj.nodeType === 'number';\n        }\n        /**\n         * Utility function to check if an Object is a class.\n         *\n         * @function Highcharts.isClass\n         *\n         * @param {object|undefined} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a class.\n         */\n        function isClass(obj) {\n            const c = obj && obj.constructor;\n            return !!(isObject(obj, true) &&\n                !isDOMElement(obj) &&\n                (c && c.name && c.name !== 'Object'));\n        }\n        /**\n         * Utility function to check if an item is a number and it is finite (not NaN,\n         * Infinity or -Infinity).\n         *\n         * @function Highcharts.isNumber\n         *\n         * @param {*} n\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the item is a finite number\n         */\n        function isNumber(n) {\n            return typeof n === 'number' && !isNaN(n) && n < Infinity && n > -Infinity;\n        }\n        /**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function Highcharts.erase\n         *\n         * @param {Array<*>} arr\n         *        The array.\n         *\n         * @param {*} item\n         *        The item to remove.\n         *\n         * @return {void}\n         */\n        function erase(arr, item) {\n            let i = arr.length;\n            while (i--) {\n                if (arr[i] === item) {\n                    arr.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        /**\n         * Insert a series or an axis in a collection with other items, either the\n         * chart series or yAxis series or axis collections, in the correct order\n         * according to the index option and whether it is internal. Used internally\n         * when adding series and axes.\n         *\n         * @private\n         * @function Highcharts.Chart#insertItem\n         * @param  {Highcharts.Series|Highcharts.Axis} item\n         *         The item to insert\n         * @param  {Array<Highcharts.Series>|Array<Highcharts.Axis>} collection\n         *         A collection of items, like `chart.series` or `xAxis.series`.\n         * @return {number} The index of the series in the collection.\n         */\n        function insertItem(item, collection) {\n            const indexOption = item.options.index, length = collection.length;\n            let i;\n            for (\n            // Internal item (navigator) should always be pushed to the end\n            i = item.options.isInternal ? length : 0; i < length + 1; i++) {\n                if (\n                // No index option, reached the end of the collection,\n                // equivalent to pushing\n                !collection[i] ||\n                    // Handle index option, the element to insert has lower index\n                    (isNumber(indexOption) &&\n                        indexOption < pick(collection[i].options.index, collection[i]._i)) ||\n                    // Insert the new item before other internal items\n                    // (navigator)\n                    collection[i].options.isInternal) {\n                    collection.splice(i, 0, item);\n                    break;\n                }\n            }\n            return i;\n        }\n        /**\n         * Adds an item to an array, if it is not present in the array.\n         *\n         * @function Highcharts.pushUnique\n         *\n         * @param {Array<unknown>} array\n         * The array to add the item to.\n         *\n         * @param {unknown} item\n         * The item to add.\n         *\n         * @return {boolean}\n         * Returns true, if the item was not present and has been added.\n         */\n        function pushUnique(array, item) {\n            return array.indexOf(item) < 0 && !!array.push(item);\n        }\n        /**\n         * Check if an object is null or undefined.\n         *\n         * @function Highcharts.defined\n         *\n         * @param {*} obj\n         *        The object to check.\n         *\n         * @return {boolean}\n         *         False if the object is null or undefined, otherwise true.\n         */\n        function defined(obj) {\n            return typeof obj !== 'undefined' && obj !== null;\n        }\n        /**\n         * Set or get an attribute or an object of attributes.\n         *\n         * To use as a setter, pass a key and a value, or let the second argument be a\n         * collection of keys and values. When using a collection, passing a value of\n         * `null` or `undefined` will remove the attribute.\n         *\n         * To use as a getter, pass only a string as the second argument.\n         *\n         * @function Highcharts.attr\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} elem\n         *        The DOM element to receive the attribute(s).\n         *\n         * @param {string|Highcharts.HTMLAttributes|Highcharts.SVGAttributes} [keyOrAttribs]\n         *        The property or an object of key-value pairs.\n         *\n         * @param {number|string} [value]\n         *        The value if a single property is set.\n         *\n         * @return {string|null|undefined}\n         *         When used as a getter, return the value.\n         */\n        function attr(elem, keyOrAttribs, value) {\n            const isGetter = isString(keyOrAttribs) && !defined(value);\n            let ret;\n            const attrSingle = (value, key) => {\n                // Set the value\n                if (defined(value)) {\n                    elem.setAttribute(key, value);\n                    // Get the value\n                }\n                else if (isGetter) {\n                    ret = elem.getAttribute(key);\n                    // IE7 and below cannot get class through getAttribute (#7850)\n                    if (!ret && key === 'class') {\n                        ret = elem.getAttribute(key + 'Name');\n                    }\n                    // Remove the value\n                }\n                else {\n                    elem.removeAttribute(key);\n                }\n            };\n            // If keyOrAttribs is a string\n            if (isString(keyOrAttribs)) {\n                attrSingle(value, keyOrAttribs);\n                // Else if keyOrAttribs is defined, it is a hash of key/value pairs\n            }\n            else {\n                objectEach(keyOrAttribs, attrSingle);\n            }\n            return ret;\n        }\n        /**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function Highcharts.splat\n         *\n         * @param {*} obj\n         *        The object to splat.\n         *\n         * @return {Array}\n         *         The produced or original array.\n         */\n        function splat(obj) {\n            return isArray(obj) ? obj : [obj];\n        }\n        /**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function Highcharts.syncTimeout\n         *\n         * @param {Function} fn\n         *        The function callback.\n         *\n         * @param {number} delay\n         *        Delay in milliseconds.\n         *\n         * @param {*} [context]\n         *        An optional context to send to the function callback.\n         *\n         * @return {number}\n         *         An identifier for the timeout that can later be cleared with\n         *         Highcharts.clearTimeout. Returns -1 if there is no timeout.\n         */\n        function syncTimeout(fn, delay, context) {\n            if (delay > 0) {\n                return setTimeout(fn, delay, context);\n            }\n            fn.call(0, context);\n            return -1;\n        }\n        /**\n         * Internal clear timeout. The function checks that the `id` was not removed\n         * (e.g. by `chart.destroy()`). For the details see\n         * [issue #7901](https://github.com/highcharts/highcharts/issues/7901).\n         *\n         * @function Highcharts.clearTimeout\n         *\n         * @param {number|undefined} id\n         * Id of a timeout.\n         */\n        function internalClearTimeout(id) {\n            if (defined(id)) {\n                clearTimeout(id);\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function Highcharts.extend<T>\n         *\n         * @param {T|undefined} a\n         *        The object to be extended.\n         *\n         * @param {Partial<T>} b\n         *        The object to add to the first one.\n         *\n         * @return {T}\n         *         Object a, the original object.\n         */\n        function extend(a, b) {\n            /* eslint-enable valid-jsdoc */\n            let n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) { // eslint-disable-line guard-for-in\n                a[n] = b[n];\n            }\n            return a;\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Return the first value that is not null or undefined.\n         *\n         * @function Highcharts.pick<T>\n         *\n         * @param {...Array<T|null|undefined>} items\n         *        Variable number of arguments to inspect.\n         *\n         * @return {T}\n         *         The value of the first argument that is not null or undefined.\n         */\n        function pick() {\n            const args = arguments;\n            const length = args.length;\n            for (let i = 0; i < length; i++) {\n                const arg = args[i];\n                if (typeof arg !== 'undefined' && arg !== null) {\n                    return arg;\n                }\n            }\n        }\n        /**\n         * Set CSS on a given element.\n         *\n         * @function Highcharts.css\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} el\n         *        An HTML DOM element.\n         *\n         * @param {Highcharts.CSSObject} styles\n         *        Style object with camel case property names.\n         *\n         * @return {void}\n         */\n        function css(el, styles) {\n            extend(el.style, styles);\n        }\n        /**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function Highcharts.createElement\n         *\n         * @param {string} tag\n         *        The HTML tag.\n         *\n         * @param {Highcharts.HTMLAttributes} [attribs]\n         *        Attributes as an object of key-value pairs.\n         *\n         * @param {Highcharts.CSSObject} [styles]\n         *        Styles as an object of key-value pairs.\n         *\n         * @param {Highcharts.HTMLDOMElement} [parent]\n         *        The parent HTML object.\n         *\n         * @param {boolean} [nopad=false]\n         *        If true, remove all padding, border and margin.\n         *\n         * @return {Highcharts.HTMLDOMElement}\n         *         The created DOM element.\n         */\n        function createElement(tag, attribs, styles, parent, nopad) {\n            const el = doc.createElement(tag);\n            if (attribs) {\n                extend(el, attribs);\n            }\n            if (nopad) {\n                css(el, { padding: '0', border: 'none', margin: '0' });\n            }\n            if (styles) {\n                css(el, styles);\n            }\n            if (parent) {\n                parent.appendChild(el);\n            }\n            return el;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Extend a prototyped class by new members.\n         *\n         * @deprecated\n         * @function Highcharts.extendClass<T>\n         *\n         * @param {Highcharts.Class<T>} parent\n         *        The parent prototype to inherit.\n         *\n         * @param {Highcharts.Dictionary<*>} members\n         *        A collection of prototype members to add or override compared to the\n         *        parent prototype.\n         *\n         * @return {Highcharts.Class<T>}\n         *         A new prototype.\n         */\n        function extendClass(parent, members) {\n            const obj = (function () { });\n            obj.prototype = new parent(); // eslint-disable-line new-cap\n            extend(obj.prototype, members);\n            return obj;\n        }\n        /**\n         * Left-pad a string to a given length by adding a character repetitively.\n         *\n         * @function Highcharts.pad\n         *\n         * @param {number} number\n         *        The input string or number.\n         *\n         * @param {number} [length]\n         *        The desired string length.\n         *\n         * @param {string} [padder=0]\n         *        The character to pad with.\n         *\n         * @return {string}\n         *         The padded string.\n         */\n        function pad(number, length, padder) {\n            return new Array((length || 2) +\n                1 -\n                String(number)\n                    .replace('-', '')\n                    .length).join(padder || '0') + number;\n        }\n        /**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function Highcharts.relativeLength\n         *\n         * @param {Highcharts.RelativeSize} value\n         *        A percentage string or a number.\n         *\n         * @param {number} base\n         *        The full length that represents 100%.\n         *\n         * @param {number} [offset=0]\n         *        A pixel offset to apply for percentage values. Used internally in\n         *        axis positioning.\n         *\n         * @return {number}\n         *         The computed length.\n         */\n        function relativeLength(value, base, offset) {\n            return (/%$/).test(value) ?\n                (base * parseFloat(value) / 100) + (offset || 0) :\n                parseFloat(value);\n        }\n        /**\n         * Replaces text in a string with a given replacement in a loop to catch nested\n         * matches after previous replacements.\n         *\n         * @function Highcharts.replaceNested\n         *\n         * @param {string} text\n         * Text to search and modify.\n         *\n         * @param {...Array<(RegExp|string)>} replacements\n         * One or multiple tuples with search pattern (`[0]: (string|RegExp)`) and\n         * replacement (`[1]: string`) for matching text.\n         *\n         * @return {string}\n         * Text with replacements.\n         */\n        function replaceNested(text, ...replacements) {\n            let previous, replacement;\n            do {\n                previous = text;\n                for (replacement of replacements) {\n                    text = text.replace(replacement[0], replacement[1]);\n                }\n            } while (text !== previous);\n            return text;\n        }\n        /**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function Highcharts.wrap\n         *\n         * @param {*} obj\n         *        The context object that the method belongs to. In real cases, this is\n         *        often a prototype.\n         *\n         * @param {string} method\n         *        The name of the method to extend.\n         *\n         * @param {Highcharts.WrapProceedFunction} func\n         *        A wrapper function callback. This function is called with the same\n         *        arguments as the original function, except that the original function\n         *        is unshifted and passed as the first argument.\n         */\n        function wrap(obj, method, func) {\n            const proceed = obj[method];\n            obj[method] = function () {\n                const outerArgs = arguments, scope = this;\n                return func.apply(this, [\n                    function () {\n                        return proceed.apply(scope, arguments.length ? arguments : outerArgs);\n                    }\n                ].concat([].slice.call(arguments)));\n            };\n        }\n        /**\n         * Get the magnitude of a number.\n         *\n         * @function Highcharts.getMagnitude\n         *\n         * @param {number} num\n         *        The number.\n         *\n         * @return {number}\n         *         The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc.\n         */\n        function getMagnitude(num) {\n            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n        }\n        /**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @deprecated\n         * @function Highcharts.normalizeTickInterval\n         *\n         * @param {number} interval\n         *        The raw, un-rounded interval.\n         *\n         * @param {Array<*>} [multiples]\n         *        Allowed multiples.\n         *\n         * @param {number} [magnitude]\n         *        The magnitude of the number.\n         *\n         * @param {boolean} [allowDecimals]\n         *        Whether to allow decimals.\n         *\n         * @param {boolean} [hasTickAmount]\n         *        If it has tickAmount, avoid landing on tick intervals lower than\n         *        original.\n         *\n         * @return {number}\n         *         The normalized interval.\n         *\n         * @todo\n         * Move this function to the Axis prototype. It is here only for historical\n         * reasons.\n         */\n        function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, hasTickAmount) {\n            let i, retInterval = interval;\n            // Round to a tenfold of 1, 2, 2.5 or 5\n            magnitude = pick(magnitude, getMagnitude(interval));\n            const normalized = interval / magnitude;\n            // Multiples for a linear scale\n            if (!multiples) {\n                multiples = hasTickAmount ?\n                    // Finer grained ticks when the tick amount is hard set, including\n                    // when alignTicks is true on multiple axes (#4580).\n                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n                    // Else, let ticks fall on rounder numbers\n                    [1, 2, 2.5, 5, 10];\n                // The allowDecimals option\n                if (allowDecimals === false) {\n                    if (magnitude === 1) {\n                        multiples = multiples.filter(function (num) {\n                            return num % 1 === 0;\n                        });\n                    }\n                    else if (magnitude <= 0.1) {\n                        multiples = [1 / magnitude];\n                    }\n                }\n            }\n            // Normalize the interval to the nearest multiple\n            for (i = 0; i < multiples.length; i++) {\n                retInterval = multiples[i];\n                // Only allow tick amounts smaller than natural\n                if ((hasTickAmount &&\n                    retInterval * magnitude >= interval) ||\n                    (!hasTickAmount &&\n                        (normalized <=\n                            (multiples[i] +\n                                (multiples[i + 1] || multiples[i])) / 2))) {\n                    break;\n                }\n            }\n            // Multiply back to the correct magnitude. Correct floats to appropriate\n            // precision (#6085).\n            retInterval = correctFloat(retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10));\n            return retInterval;\n        }\n        /**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function Highcharts.stableSort\n         *\n         * @param {Array<*>} arr\n         *        The array to sort.\n         *\n         * @param {Function} sortFunction\n         *        The function to sort it with, like with regular Array.prototype.sort.\n         */\n        function stableSort(arr, sortFunction) {\n            // @todo It seems like Chrome since v70 sorts in a stable way internally,\n            // plus all other browsers do it, so over time we may be able to remove this\n            // function\n            const length = arr.length;\n            let sortValue, i;\n            // Add index to each item\n            for (i = 0; i < length; i++) {\n                arr[i].safeI = i; // Stable sort index\n            }\n            arr.sort(function (a, b) {\n                sortValue = sortFunction(a, b);\n                return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n            });\n            // Remove index from items\n            for (i = 0; i < length; i++) {\n                delete arr[i].safeI; // Stable sort index\n            }\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMin\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The lowest number.\n         */\n        function arrayMin(data) {\n            let i = data.length, min = data[0];\n            while (i--) {\n                if (data[i] < min) {\n                    min = data[i];\n                }\n            }\n            return min;\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMax\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The highest number.\n         */\n        function arrayMax(data) {\n            let i = data.length, max = data[0];\n            while (i--) {\n                if (data[i] > max) {\n                    max = data[i];\n                }\n            }\n            return max;\n        }\n        /**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function Highcharts.destroyObjectProperties\n         *\n         * @param {*} obj\n         *        The object to destroy properties on.\n         *\n         * @param {*} [except]\n         *        Exception, do not destroy this property, only delete it.\n         */\n        function destroyObjectProperties(obj, except, destructablesOnly) {\n            objectEach(obj, function (val, n) {\n                // If the object is non-null and destroy is defined\n                if (val !== except && val?.destroy) {\n                    // Invoke the destroy\n                    val.destroy();\n                }\n                // Delete the property from the object\n                if (val?.destroy || !destructablesOnly) {\n                    delete obj[n];\n                }\n            });\n        }\n        /**\n         * Discard a HTML element\n         *\n         * @function Highcharts.discardElement\n         *\n         * @param {Highcharts.HTMLDOMElement} element\n         *        The HTML node to discard.\n         */\n        function discardElement(element) {\n            if (element && element.parentElement) {\n                element.parentElement.removeChild(element);\n            }\n        }\n        /**\n         * Fix JS round off float errors.\n         *\n         * @function Highcharts.correctFloat\n         *\n         * @param {number} num\n         *        A float number to fix.\n         *\n         * @param {number} [prec=14]\n         *        The precision.\n         *\n         * @return {number}\n         *         The corrected float number.\n         */\n        function correctFloat(num, prec) {\n            // When the number is higher than 1e14 use the number (#16275)\n            return num > 1e14 ? num : parseFloat(num.toPrecision(prec || 14));\n        }\n        /**\n         * The time unit lookup\n         *\n         * @ignore\n         */\n        const timeUnits = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 24 * 3600000,\n            week: 7 * 24 * 3600000,\n            month: 28 * 24 * 3600000,\n            year: 364 * 24 * 3600000\n        };\n        /**\n         * Easing definition\n         *\n         * @private\n         * @function Math.easeInOutSine\n         *\n         * @param {number} pos\n         *        Current position, ranging from 0 to 1.\n         *\n         * @return {number}\n         *         Ease result\n         */\n        Math.easeInOutSine = function (pos) {\n            return -0.5 * (Math.cos(Math.PI * pos) - 1);\n        };\n        /**\n         * Find the closest distance between two values of a two-dimensional array\n         * @private\n         * @function Highcharts.getClosestDistance\n         *\n         * @param {Array<Array<number>>} arrays\n         *          An array of arrays of numbers\n         *\n         * @return {number | undefined}\n         *          The closest distance between values\n         */\n        function getClosestDistance(arrays, onError) {\n            const allowNegative = !onError;\n            let closest, loopLength, distance, i;\n            arrays.forEach((xData) => {\n                if (xData.length > 1) {\n                    loopLength = xData.length - 1;\n                    for (i = loopLength; i > 0; i--) {\n                        distance = xData[i] - xData[i - 1];\n                        if (distance < 0 && !allowNegative) {\n                            onError?.();\n                            // Only one call\n                            onError = void 0;\n                        }\n                        else if (distance && (typeof closest === 'undefined' || distance < closest)) {\n                            closest = distance;\n                        }\n                    }\n                }\n            });\n            return closest;\n        }\n        /**\n         * Returns the value of a property path on a given object.\n         *\n         * @private\n         * @function getNestedProperty\n         *\n         * @param {string} path\n         * Path to the property, for example `custom.myValue`.\n         *\n         * @param {unknown} obj\n         * Instance containing the property on the specific path.\n         *\n         * @return {unknown}\n         * The unknown property value.\n         */\n        function getNestedProperty(path, parent) {\n            const pathElements = path.split('.');\n            while (pathElements.length && defined(parent)) {\n                const pathElement = pathElements.shift();\n                // Filter on the key\n                if (typeof pathElement === 'undefined' ||\n                    pathElement === '__proto__') {\n                    return; // Undefined\n                }\n                if (pathElement === 'this') {\n                    let thisProp;\n                    if (isObject(parent)) {\n                        thisProp = parent['@this'];\n                    }\n                    return thisProp ?? parent;\n                }\n                const child = parent[pathElement];\n                // Filter on the child\n                if (!defined(child) ||\n                    typeof child === 'function' ||\n                    typeof child.nodeType === 'number' ||\n                    child === win) {\n                    return; // Undefined\n                }\n                // Else, proceed\n                parent = child;\n            }\n            return parent;\n        }\n        /**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function Highcharts.getStyle\n         *\n         * @param {Highcharts.HTMLDOMElement} el\n         * An HTML element.\n         *\n         * @param {string} prop\n         * The property name.\n         *\n         * @param {boolean} [toInt=true]\n         * Parse to integer.\n         *\n         * @return {number|string|undefined}\n         * The style value.\n         */\n        function getStyle(el, prop, toInt) {\n            let style;\n            // For width and height, return the actual inner pixel size (#4913)\n            if (prop === 'width') {\n                let offsetWidth = Math.min(el.offsetWidth, el.scrollWidth);\n                // In flex boxes, we need to use getBoundingClientRect and floor it,\n                // because scrollWidth doesn't support subpixel precision (#6427) ...\n                const boundingClientRectWidth = el.getBoundingClientRect &&\n                    el.getBoundingClientRect().width;\n                // ...unless if the containing div or its parents are transform-scaled\n                // down, in which case the boundingClientRect can't be used as it is\n                // also scaled down (#9871, #10498).\n                if (boundingClientRectWidth < offsetWidth &&\n                    boundingClientRectWidth >= offsetWidth - 1) {\n                    offsetWidth = Math.floor(boundingClientRectWidth);\n                }\n                return Math.max(0, // #8377\n                (offsetWidth -\n                    (getStyle(el, 'padding-left', true) || 0) -\n                    (getStyle(el, 'padding-right', true) || 0)));\n            }\n            if (prop === 'height') {\n                return Math.max(0, // #8377\n                (Math.min(el.offsetHeight, el.scrollHeight) -\n                    (getStyle(el, 'padding-top', true) || 0) -\n                    (getStyle(el, 'padding-bottom', true) || 0)));\n            }\n            // Otherwise, get the computed style\n            const css = win.getComputedStyle(el, void 0); // eslint-disable-line no-undefined\n            if (css) {\n                style = css.getPropertyValue(prop);\n                if (pick(toInt, prop !== 'opacity')) {\n                    style = pInt(style);\n                }\n            }\n            return style;\n        }\n        /**\n         * Search for an item in an array.\n         *\n         * @function Highcharts.inArray\n         *\n         * @deprecated\n         *\n         * @param {*} item\n         *        The item to search for.\n         *\n         * @param {Array<*>} arr\n         *        The array or node collection to search in.\n         *\n         * @param {number} [fromIndex=0]\n         *        The index to start searching from.\n         *\n         * @return {number}\n         *         The index within the array, or -1 if not found.\n         */\n        function inArray(item, arr, fromIndex) {\n            error(32, false, void 0, { 'Highcharts.inArray': 'use Array.indexOf' });\n            return arr.indexOf(item, fromIndex);\n        }\n        /**\n         * Return the value of the first element in the array that satisfies the\n         * provided testing function.\n         *\n         * @function Highcharts.find<T>\n         *\n         * @param {Array<T>} arr\n         *        The array to test.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if this item satisfies the condition.\n         *\n         * @return {T|undefined}\n         *         The value of the element.\n         */\n        const find = Array.prototype.find ?\n            function (arr, callback) {\n                return arr.find(callback);\n            } :\n            // Legacy implementation. PhantomJS, IE <= 11 etc. #7223.\n            function (arr, callback) {\n                let i;\n                const length = arr.length;\n                for (i = 0; i < length; i++) {\n                    if (callback(arr[i], i)) { // eslint-disable-line node/callback-return\n                        return arr[i];\n                    }\n                }\n            };\n        /**\n         * Returns an array of a given object's own properties.\n         *\n         * @function Highcharts.keys\n         * @deprecated\n         *\n         * @param {*} obj\n         *        The object of which the properties are to be returned.\n         *\n         * @return {Array<string>}\n         *         An array of strings that represents all the properties.\n         */\n        function keys(obj) {\n            error(32, false, void 0, { 'Highcharts.keys': 'use Object.keys' });\n            return Object.keys(obj);\n        }\n        /**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function Highcharts.offset\n         *\n         * @param {global.Element} el\n         *        The DOM element.\n         *\n         * @return {Highcharts.OffsetObject}\n         *         An object containing `left` and `top` properties for the position in\n         *         the page.\n         */\n        function offset(el) {\n            const docElem = doc.documentElement, box = (el.parentElement || el.parentNode) ?\n                el.getBoundingClientRect() :\n                { top: 0, left: 0, width: 0, height: 0 };\n            return {\n                top: box.top + (win.pageYOffset || docElem.scrollTop) -\n                    (docElem.clientTop || 0),\n                left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n                    (docElem.clientLeft || 0),\n                width: box.width,\n                height: box.height\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Iterate over object key pairs in an object.\n         *\n         * @function Highcharts.objectEach<T>\n         *\n         * @param {*} obj\n         *        The object to iterate over.\n         *\n         * @param {Highcharts.ObjectEachCallbackFunction<T>} fn\n         *        The iterator callback. It passes three arguments:\n         *        * value - The property value.\n         *        * key - The property key.\n         *        * obj - The object that objectEach is being applied to.\n         *\n         * @param {T} [ctx]\n         *        The context.\n         */\n        function objectEach(obj, fn, ctx) {\n            /* eslint-enable valid-jsdoc */\n            for (const key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    fn.call(ctx || obj[key], obj[key], key, obj);\n                }\n            }\n        }\n        /**\n         * Iterate over an array.\n         *\n         * @deprecated\n         * @function Highcharts.each\n         *\n         * @param {Array<*>} arr\n         *        The array to iterate over.\n         *\n         * @param {Function} fn\n         *        The iterator callback. It passes three arguments:\n         *        - `item`: The array item.\n         *        - `index`: The item's index in the array.\n         *        - `arr`: The array that each is being applied to.\n         *\n         * @param {*} [ctx]\n         *        The context.\n         *\n         * @return {void}\n         */\n        /**\n         * Filter an array by a callback.\n         *\n         * @deprecated\n         * @function Highcharts.grep\n         *\n         * @param {Array<*>} arr\n         *        The array to filter.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if the item is to be preserved.\n         *\n         * @return {Array<*>}\n         *         A new, filtered array.\n         */\n        /**\n         * Map an array by a callback.\n         *\n         * @deprecated\n         * @function Highcharts.map\n         *\n         * @param {Array<*>} arr\n         *        The array to map.\n         *\n         * @param {Function} fn\n         *        The callback function. Return the new value for the new array.\n         *\n         * @return {Array<*>}\n         *         A new array item with modified items.\n         */\n        /**\n         * Reduce an array to a single value.\n         *\n         * @deprecated\n         * @function Highcharts.reduce\n         *\n         * @param {Array<*>} arr\n         *        The array to reduce.\n         *\n         * @param {Function} fn\n         *        The callback function. Return the reduced value. Receives 4\n         *        arguments: Accumulated/reduced value, current value, current array\n         *        index, and the array.\n         *\n         * @param {*} initialValue\n         *        The initial value of the accumulator.\n         *\n         * @return {*}\n         *         The reduced value.\n         */\n        /**\n         * Test whether at least one element in the array passes the test implemented by\n         * the provided function.\n         *\n         * @deprecated\n         * @function Highcharts.some\n         *\n         * @param {Array<*>} arr\n         *        The array to test\n         *\n         * @param {Function} fn\n         *        The function to run on each item. Return truthy to pass the test.\n         *        Receives arguments `currentValue`, `index` and `array`.\n         *\n         * @param {*} ctx\n         *        The context.\n         *\n         * @return {boolean}\n         */\n        objectEach({\n            map: 'map',\n            each: 'forEach',\n            grep: 'filter',\n            reduce: 'reduce',\n            some: 'some'\n        }, function (val, key) {\n            H[key] = function (arr) {\n                error(32, false, void 0, { [`Highcharts.${key}`]: `use Array.${val}` });\n                return Array.prototype[val].apply(arr, [].slice.call(arguments, 1));\n            };\n        });\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Add an event listener.\n         *\n         * @function Highcharts.addEvent<T>\n         *\n         * @param  {Highcharts.Class<T>|T} el\n         *         The element or object to add a listener to. It can be a\n         *         {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         *\n         * @param  {string} type\n         *         The event type.\n         *\n         * @param  {Highcharts.EventCallbackFunction<T>|Function} fn\n         *         The function callback to execute when the event is fired.\n         *\n         * @param  {Highcharts.EventOptionsObject} [options]\n         *         Options for adding the event.\n         *\n         * @sample highcharts/members/addevent\n         *         Use a general `render` event to draw shapes on a chart\n         *\n         * @return {Function}\n         *         A callback function to remove the added event.\n         */\n        function addEvent(el, type, fn, options = {}) {\n            /* eslint-enable valid-jsdoc */\n            // Add hcEvents to either the prototype (in case we're running addEvent on a\n            // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n            // inherited down the prototype chain, in which case we need to set the\n            // property on this instance (which may itself be a prototype).\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                owner.hcEvents = {};\n            }\n            const events = owner.hcEvents;\n            // Allow click events added to points, otherwise they will be prevented by\n            // the TouchPointer.pinch function after a pinch zoom operation (#7091).\n            if (H.Point && // Without H a dependency loop occurs\n                el instanceof H.Point &&\n                el.series &&\n                el.series.chart) {\n                el.series.chart.runTrackerClick = true;\n            }\n            // Handle DOM events\n            // If the browser supports passive events, add it to improve performance\n            // on touch events (#11353).\n            const addEventListener = el.addEventListener;\n            if (addEventListener) {\n                addEventListener.call(el, type, fn, H.supportsPassiveEvents ? {\n                    passive: options.passive === void 0 ?\n                        type.indexOf('touch') !== -1 : options.passive,\n                    capture: false\n                } : false);\n            }\n            if (!events[type]) {\n                events[type] = [];\n            }\n            const eventObject = {\n                fn,\n                order: typeof options.order === 'number' ? options.order : Infinity\n            };\n            events[type].push(eventObject);\n            // Order the calls\n            events[type].sort((a, b) => a.order - b.order);\n            // Return a function that can be called to remove this event.\n            return function () {\n                removeEvent(el, type, fn);\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.removeEvent<T>\n         *\n         * @param {Highcharts.Class<T>|T} el\n         *        The element to remove events on.\n         *\n         * @param {string} [type]\n         *        The type of events to remove. If undefined, all events are removed\n         *        from the element.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>} [fn]\n         *        The specific callback to remove. If undefined, all events that match\n         *        the element and optionally the type are removed.\n         *\n         * @return {void}\n         */\n        function removeEvent(el, type, fn) {\n            /* eslint-enable valid-jsdoc */\n            /**\n             * @private\n             */\n            function removeOneEvent(type, fn) {\n                const removeEventListener = el.removeEventListener;\n                if (removeEventListener) {\n                    removeEventListener.call(el, type, fn, false);\n                }\n            }\n            /**\n             * @private\n             */\n            function removeAllEvents(eventCollection) {\n                let types, len;\n                if (!el.nodeName) {\n                    return; // Break on non-DOM events\n                }\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                }\n                else {\n                    types = eventCollection;\n                }\n                objectEach(types, function (_val, n) {\n                    if (eventCollection[n]) {\n                        len = eventCollection[n].length;\n                        while (len--) {\n                            removeOneEvent(n, eventCollection[n][len].fn);\n                        }\n                    }\n                });\n            }\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                const events = owner.hcEvents;\n                if (type) {\n                    const typeEvents = (events[type] || []);\n                    if (fn) {\n                        events[type] = typeEvents.filter(function (obj) {\n                            return fn !== obj.fn;\n                        });\n                        removeOneEvent(type, fn);\n                    }\n                    else {\n                        removeAllEvents(events);\n                        events[type] = [];\n                    }\n                }\n                else {\n                    removeAllEvents(events);\n                    delete owner.hcEvents;\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.fireEvent<T>\n         *\n         * @param {T} el\n         *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n         *        an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The type of event.\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Custom event arguments that are passed on as an argument to the event\n         *        handler.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>|Function} [defaultFunction]\n         *        The default function to execute if the other listeners haven't\n         *        returned false.\n         *\n         * @return {void}\n         */\n        function fireEvent(el, type, eventArguments, defaultFunction) {\n            /* eslint-enable valid-jsdoc */\n            eventArguments = eventArguments || {};\n            if (doc.createEvent &&\n                (el.dispatchEvent ||\n                    (el.fireEvent &&\n                        // Enable firing events on Highcharts instance.\n                        el !== H))) {\n                const e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                eventArguments = extend(e, eventArguments);\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(eventArguments);\n                }\n                else {\n                    el.fireEvent(type, eventArguments);\n                }\n            }\n            else if (el.hcEvents) {\n                if (!eventArguments.target) {\n                    // We're running a custom event\n                    extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip\n                        // default handler if called. The built-in\n                        // defaultPrevented property is not overwritable (#5112)\n                        preventDefault: function () {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking\n                        // the zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event\n                        // (#2297). If it is set, we're running a browser event.\n                        type: type\n                    });\n                }\n                const events = [];\n                let object = el;\n                let multilevel = false;\n                // Recurse up the inheritance chain and collect hcEvents set as own\n                // objects on the prototypes.\n                while (object.hcEvents) {\n                    if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                        object.hcEvents[type]) {\n                        if (events.length) {\n                            multilevel = true;\n                        }\n                        events.unshift.apply(events, object.hcEvents[type]);\n                    }\n                    object = Object.getPrototypeOf(object);\n                }\n                // For performance reasons, only sort the event handlers in case we are\n                // dealing with multiple levels in the prototype chain. Otherwise, the\n                // events are already sorted in the addEvent function.\n                if (multilevel) {\n                    // Order the calls\n                    events.sort((a, b) => a.order - b.order);\n                }\n                // Call the collected event handlers\n                events.forEach((obj) => {\n                    // If the event handler returns false, prevent the default handler\n                    // from executing\n                    if (obj.fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                });\n            }\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction.call(el, eventArguments);\n            }\n        }\n        let serialMode;\n        /**\n         * Get a unique key for using in internal element id's and pointers. The key is\n         * composed of a random hash specific to this Highcharts instance, and a\n         * counter.\n         *\n         * @example\n         * let id = uniqueKey(); // => 'highcharts-x45f6hp-0'\n         *\n         * @function Highcharts.uniqueKey\n         *\n         * @return {string}\n         * A unique key.\n         */\n        const uniqueKey = (function () {\n            const hash = Math.random().toString(36).substring(2, 9) + '-';\n            let id = 0;\n            return function () {\n                return 'highcharts-' + (serialMode ? '' : hash) + id++;\n            };\n        }());\n        /**\n         * Activates a serial mode for element IDs provided by\n         * {@link Highcharts.uniqueKey}. This mode can be used in automated tests, where\n         * a simple comparison of two rendered SVG graphics is needed.\n         *\n         * **Note:** This is only for testing purposes and will break functionality in\n         * webpages with multiple charts.\n         *\n         * @example\n         * if (\n         *   process &&\n         *   process.env.NODE_ENV === 'development'\n         * ) {\n         *   Highcharts.useSerialIds(true);\n         * }\n         *\n         * @function Highcharts.useSerialIds\n         *\n         * @param {boolean} [mode]\n         * Changes the state of serial mode.\n         *\n         * @return {boolean|undefined}\n         * State of the serial mode.\n         */\n        function useSerialIds(mode) {\n            return (serialMode = pick(mode, serialMode));\n        }\n        function isFunction(obj) {\n            return typeof obj === 'function';\n        }\n        // Register Highcharts as a plugin in jQuery\n        if (win.jQuery) {\n            /**\n             * Highcharts-extended JQuery.\n             *\n             * @external JQuery\n             */\n            /**\n             * Helper function to return the chart of the current JQuery selector\n             * element.\n             *\n             * @function external:JQuery#highcharts\n             *\n             * @return {Highcharts.Chart}\n             *         The chart that is linked to the JQuery selector element.\n             */ /**\n            * Factory function to create a chart in the current JQuery selector\n            * element.\n            *\n            * @function external:JQuery#highcharts\n            *\n            * @param {'Chart'|'Map'|'StockChart'|string} [className]\n            *        Name of the factory class in the Highcharts namespace.\n            *\n            * @param {Highcharts.Options} [options]\n            *        The chart options structure.\n            *\n            * @param {Highcharts.ChartCallbackFunction} [callback]\n            *        Function to run when the chart has loaded and all external\n            *        images are loaded. Defining a\n            *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n            *        handler is equivalent.\n            *\n            * @return {JQuery}\n            *         The current JQuery selector.\n            */\n            win.jQuery.fn.highcharts = function () {\n                const args = [].slice.call(arguments);\n                if (this[0]) { // `this[0]` is the renderTo div\n                    // Create the chart\n                    if (args[0]) {\n                        new H[ // eslint-disable-line computed-property-spacing, no-new\n                        // Constructor defaults to Chart\n                        isString(args[0]) ? args.shift() : 'Chart'](this[0], args[0], args[1]);\n                        return this;\n                    }\n                    // When called without parameters or with the return argument,\n                    // return an existing chart\n                    return charts[attr(this[0], 'data-highcharts-chart')];\n                }\n            };\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // TODO use named exports when supported.\n        const Utilities = {\n            addEvent,\n            arrayMax,\n            arrayMin,\n            attr,\n            clamp,\n            clearTimeout: internalClearTimeout,\n            correctFloat,\n            createElement,\n            css,\n            defined,\n            destroyObjectProperties,\n            diffObjects,\n            discardElement,\n            erase,\n            error,\n            extend,\n            extendClass,\n            find,\n            fireEvent,\n            getClosestDistance,\n            getMagnitude,\n            getNestedProperty,\n            getStyle,\n            inArray,\n            insertItem,\n            isArray,\n            isClass,\n            isDOMElement,\n            isFunction,\n            isNumber,\n            isObject,\n            isString,\n            keys,\n            merge,\n            normalizeTickInterval,\n            objectEach,\n            offset,\n            pad,\n            pick,\n            pInt,\n            pushUnique,\n            relativeLength,\n            removeEvent,\n            replaceNested,\n            splat,\n            stableSort,\n            syncTimeout,\n            timeUnits,\n            uniqueKey,\n            useSerialIds,\n            wrap\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms and defer of 0ms.\n         *\n         * @interface Highcharts.AnimationOptionsObject\n         */ /**\n        * A callback function to execute when the animation finishes.\n        * @name Highcharts.AnimationOptionsObject#complete\n        * @type {Function|undefined}\n        */ /**\n        * The animation defer in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#defer\n        * @type {number|undefined}\n        */ /**\n        * The animation duration in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#duration\n        * @type {number|undefined}\n        */ /**\n        * The name of an easing function as defined on the `Math` object.\n        * @name Highcharts.AnimationOptionsObject#easing\n        * @type {string|Function|undefined}\n        */ /**\n        * A callback function to execute on each step of each attribute or CSS property\n        * that's being animated. The first argument contains information about the\n        * animation and progress.\n        * @name Highcharts.AnimationOptionsObject#step\n        * @type {Function|undefined}\n        */\n        /**\n         * Creates a frame for the animated SVG element.\n         *\n         * @callback Highcharts.AnimationStepCallbackFunction\n         *\n         * @param {Highcharts.SVGElement} this\n         *        The SVG element to animate.\n         *\n         * @return {void}\n         */\n        /**\n         * Interface description for a class.\n         *\n         * @interface Highcharts.Class<T>\n         * @extends Function\n         */ /**\n        * Class constructor.\n        * @function Highcharts.Class<T>#new\n        * @param {...Array<*>} args\n        *        Constructor arguments.\n        * @return {T}\n        *         Class instance.\n        */\n        /**\n         * A style object with camel case property names to define visual appearance of\n         * a SVG element or HTML element. The properties can be whatever styles are\n         * supported on the given SVG or HTML element.\n         *\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         *\n         * @interface Highcharts.CSSObject\n         */ /**\n        * @name Highcharts.CSSObject#[key:string]\n        * @type {boolean|number|string|undefined}\n        */ /**\n        * Background style for the element.\n        * @name Highcharts.CSSObject#background\n        * @type {string|undefined}\n        */ /**\n        * Background color of the element.\n        * @name Highcharts.CSSObject#backgroundColor\n        * @type {Highcharts.ColorString|undefined}\n        */ /**\n        * Border style for the element.\n        * @name Highcharts.CSSObject#border\n        * @type {string|undefined}\n        */ /**\n        * Radius of the element border.\n        * @name Highcharts.CSSObject#borderRadius\n        * @type {number|undefined}\n        */ /**\n        * Color used in the element. The 'contrast' option is a Highcharts custom\n        * property that results in black or white, depending on the background of the\n        * element.\n        * @name Highcharts.CSSObject#color\n        * @type {'contrast'|Highcharts.ColorString|undefined}\n        */ /**\n        * Style of the mouse cursor when resting over the element.\n        * @name Highcharts.CSSObject#cursor\n        * @type {Highcharts.CursorValue|undefined}\n        */ /**\n        * Font family of the element text. Multiple values have to be in decreasing\n        * preference order and separated by comma.\n        * @name Highcharts.CSSObject#fontFamily\n        * @type {string|undefined}\n        */ /**\n        * Font size of the element text.\n        * @name Highcharts.CSSObject#fontSize\n        * @type {string|undefined}\n        */ /**\n        * Font weight of the element text.\n        * @name Highcharts.CSSObject#fontWeight\n        * @type {string|undefined}\n        */ /**\n        * Height of the element.\n        * @name Highcharts.CSSObject#height\n        * @type {number|undefined}\n        */ /**\n        * Width of the element border.\n        * @name Highcharts.CSSObject#lineWidth\n        * @type {number|undefined}\n        */ /**\n        * Opacity of the element.\n        * @name Highcharts.CSSObject#opacity\n        * @type {number|undefined}\n        */ /**\n        * Space around the element content.\n        * @name Highcharts.CSSObject#padding\n        * @type {string|undefined}\n        */ /**\n        * Behaviour of the element when the mouse cursor rests over it.\n        * @name Highcharts.CSSObject#pointerEvents\n        * @type {string|undefined}\n        */ /**\n        * Positioning of the element.\n        * @name Highcharts.CSSObject#position\n        * @type {string|undefined}\n        */ /**\n        * Alignment of the element text.\n        * @name Highcharts.CSSObject#textAlign\n        * @type {string|undefined}\n        */ /**\n        * Additional decoration of the element text.\n        * @name Highcharts.CSSObject#textDecoration\n        * @type {string|undefined}\n        */ /**\n        * Outline style of the element text.\n        * @name Highcharts.CSSObject#textOutline\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text. Highcharts SVG elements support\n        * `ellipsis` when a `width` is set.\n        * @name Highcharts.CSSObject#textOverflow\n        * @type {string|undefined}\n        */ /**\n        * Top spacing of the element relative to the parent element.\n        * @name Highcharts.CSSObject#top\n        * @type {string|undefined}\n        */ /**\n        * Animated transition of selected element properties.\n        * @name Highcharts.CSSObject#transition\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text.\n        * @name Highcharts.CSSObject#whiteSpace\n        * @type {string|undefined}\n        */ /**\n        * Width of the element.\n        * @name Highcharts.CSSObject#width\n        * @type {number|undefined}\n        */\n        /**\n         * All possible cursor styles.\n         *\n         * @typedef {'alias'|'all-scroll'|'auto'|'cell'|'col-resize'|'context-menu'|'copy'|'crosshair'|'default'|'e-resize'|'ew-resize'|'grab'|'grabbing'|'help'|'move'|'n-resize'|'ne-resize'|'nesw-resize'|'no-drop'|'none'|'not-allowed'|'ns-resize'|'nw-resize'|'nwse-resize'|'pointer'|'progress'|'row-resize'|'s-resize'|'se-resize'|'sw-resize'|'text'|'vertical-text'|'w-resize'|'wait'|'zoom-in'|'zoom-out'} Highcharts.CursorValue\n         */\n        /**\n         * All possible dash styles.\n         *\n         * @typedef {'Dash'|'DashDot'|'Dot'|'LongDash'|'LongDashDot'|'LongDashDotDot'|'ShortDash'|'ShortDashDot'|'ShortDashDotDot'|'ShortDot'|'Solid'} Highcharts.DashStyleValue\n         */\n        /**\n         * Generic dictionary in TypeScript notation.\n         * Use the native `AnyRecord` instead.\n         *\n         * @deprecated\n         * @interface Highcharts.Dictionary<T>\n         */ /**\n        * @name Highcharts.Dictionary<T>#[key:string]\n        * @type {T}\n        */\n        /**\n         * The function callback to execute when the event is fired. The `this` context\n         * contains the instance, that fired the event.\n         *\n         * @callback Highcharts.EventCallbackFunction<T>\n         *\n         * @param {T} this\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Event arguments.\n         *\n         * @return {boolean|void}\n         */\n        /**\n         * The event options for adding function callback.\n         *\n         * @interface Highcharts.EventOptionsObject\n         */ /**\n        * The order the event handler should be called. This opens for having one\n        * handler be called before another, independent of in which order they were\n        * added.\n        * @name Highcharts.EventOptionsObject#order\n        * @type {number}\n        */ /**\n        * Whether an event should be passive or not.\n        * When set to `true`, the function specified by listener will never call\n        * `preventDefault()`.\n        * @name Highcharts.EventOptionsObject#passive\n        * @type boolean\n        */\n        /**\n         * Formats data as a string. Usually the data is accessible through the `this`\n         * keyword.\n         *\n         * @callback Highcharts.FormatterCallbackFunction<T>\n         *\n         * @param {T} this\n         *        Context to format\n         *\n         * @return {string}\n         *         Formatted text\n         */\n        /**\n         * An object of key-value pairs for HTML attributes.\n         *\n         * @typedef {Highcharts.Dictionary<boolean|number|string|Function>} Highcharts.HTMLAttributes\n         */\n        /**\n         * An HTML DOM element. The type is a reference to the regular HTMLElement in\n         * the global scope.\n         *\n         * @typedef {global.HTMLElement} Highcharts.HTMLDOMElement\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\n         */\n        /**\n         * The iterator callback.\n         *\n         * @callback Highcharts.ObjectEachCallbackFunction<T>\n         *\n         * @param {T} this\n         *        The context.\n         *\n         * @param {*} value\n         *        The property value.\n         *\n         * @param {string} key\n         *        The property key.\n         *\n         * @param {*} obj\n         *        The object that objectEach is being applied to.\n         */\n        /**\n         * An object containing `left` and `top` properties for the position in the\n         * page.\n         *\n         * @interface Highcharts.OffsetObject\n         */ /**\n        * Left distance to the page border.\n        * @name Highcharts.OffsetObject#left\n        * @type {number}\n        */ /**\n        * Top distance to the page border.\n        * @name Highcharts.OffsetObject#top\n        * @type {number}\n        */\n        /**\n         * Describes a range.\n         *\n         * @interface Highcharts.RangeObject\n         */ /**\n        * Maximum number of the range.\n        * @name Highcharts.RangeObject#max\n        * @type {number}\n        */ /**\n        * Minimum number of the range.\n        * @name Highcharts.RangeObject#min\n        * @type {number}\n        */\n        /**\n         * If a number is given, it defines the pixel length. If a percentage string is\n         * given, like for example `'50%'`, the setting defines a length relative to a\n         * base size, for example the size of a container.\n         *\n         * @typedef {number|string} Highcharts.RelativeSize\n         */\n        /**\n         * Proceed function to call original (wrapped) function.\n         *\n         * @callback Highcharts.WrapProceedFunction\n         *\n         * @param {*} [arg1]\n         *        Optional argument. Without any arguments defaults to first argument of\n         *        the wrapping function.\n         *\n         * @param {*} [arg2]\n         *        Optional argument. Without any arguments defaults to second argument\n         *        of the wrapping function.\n         *\n         * @param {*} [arg3]\n         *        Optional argument. Without any arguments defaults to third argument of\n         *        the wrapping function.\n         *\n         * @return {*}\n         *         Return value of the original function.\n         */\n        /**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions. The most important member of the namespace would be the\n         * chart constructor.\n         *\n         * @example\n         * let chart = Highcharts.chart('container', { ... });\n         *\n         * @namespace Highcharts\n         */\n        ''; // Detach doclets above\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Core/Renderer/HTML/AST.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { SVG_NS, win } = H;\n        const { attr, createElement, css, error, isFunction, isString, objectEach, splat } = U;\n        const { trustedTypes } = win;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // Create the trusted type policy. This should not be exposed.\n        const trustedTypesPolicy = (trustedTypes &&\n            isFunction(trustedTypes.createPolicy) &&\n            trustedTypes.createPolicy('highcharts', {\n                createHTML: (s) => s\n            }));\n        const emptyHTML = trustedTypesPolicy ?\n            trustedTypesPolicy.createHTML('') :\n            '';\n        // IE9 and PhantomJS are only able to parse XML.\n        const hasValidDOMParser = (function () {\n            try {\n                return Boolean(new DOMParser().parseFromString(emptyHTML, 'text/html'));\n            }\n            catch (e) {\n                return false;\n            }\n        }());\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AST class represents an abstract syntax tree of HTML or SVG content. It\n         * can take HTML as an argument, parse it, optionally transform it to SVG, then\n         * perform sanitation before inserting it into the DOM.\n         *\n         * @class\n         * @name Highcharts.AST\n         *\n         * @param {string|Array<Highcharts.ASTNode>} source\n         * Either an HTML string or an ASTNode list to populate the tree.\n         */\n        class AST {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Filter an object of SVG or HTML attributes against the allow list.\n             *\n             * @static\n             *\n             * @function Highcharts.AST#filterUserAttributes\n             *\n             * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The filtered attributes\n             */\n            static filterUserAttributes(attributes) {\n                objectEach(attributes, (val, key) => {\n                    let valid = true;\n                    if (AST.allowedAttributes.indexOf(key) === -1) {\n                        valid = false;\n                    }\n                    if (['background', 'dynsrc', 'href', 'lowsrc', 'src']\n                        .indexOf(key) !== -1) {\n                        valid = isString(val) && AST.allowedReferences.some((ref) => val.indexOf(ref) === 0);\n                    }\n                    if (!valid) {\n                        error(33, false, void 0, {\n                            'Invalid attribute in config': `${key}`\n                        });\n                        delete attributes[key];\n                    }\n                    // #17753, < is not allowed in SVG attributes\n                    if (isString(val) && attributes[key]) {\n                        attributes[key] = val.replace(/</g, '&lt;');\n                    }\n                });\n                return attributes;\n            }\n            static parseStyle(style) {\n                return style\n                    .split(';')\n                    .reduce((styles, line) => {\n                    const pair = line.split(':').map((s) => s.trim()), key = pair.shift();\n                    if (key && pair.length) {\n                        styles[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = pair.join(':'); // #17146\n                    }\n                    return styles;\n                }, {});\n            }\n            /**\n             * Utility function to set html content for an element by passing in a\n             * markup string. The markup is safely parsed by the AST class to avoid\n             * XSS vulnerabilities. This function should be used instead of setting\n             * `innerHTML` in all cases where the content is not fully trusted.\n             *\n             * @static\n             * @function Highcharts.AST#setElementHTML\n             *\n             * @param {SVGDOMElement|HTMLDOMElement} el\n             * Node to set content of.\n             *\n             * @param {string} html\n             * Markup string\n             */\n            static setElementHTML(el, html) {\n                el.innerHTML = AST.emptyHTML; // Clear previous\n                if (html) {\n                    const ast = new AST(html);\n                    ast.addToDOM(el);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n            constructor(source) {\n                this.nodes = typeof source === 'string' ?\n                    this.parseMarkup(source) : source;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add the tree defined as a hierarchical JS structure to the DOM\n             *\n             * @function Highcharts.AST#addToDOM\n             *\n             * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n             * The node where it should be added\n             *\n             * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n             * The inserted node.\n             */\n            addToDOM(parent) {\n                /**\n                 * @private\n                 * @param {Highcharts.ASTNode} subtree\n                 * HTML/SVG definition\n                 * @param {Element} [subParent]\n                 * parent node\n                 * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n                 * The inserted node.\n                 */\n                function recurse(subtree, subParent) {\n                    let ret;\n                    splat(subtree).forEach(function (item) {\n                        const tagName = item.tagName;\n                        const textNode = item.textContent ?\n                            H.doc.createTextNode(item.textContent) :\n                            void 0;\n                        // Whether to ignore the AST filtering totally, #15345\n                        const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n                        let node;\n                        if (tagName) {\n                            if (tagName === '#text') {\n                                node = textNode;\n                            }\n                            else if (AST.allowedTags.indexOf(tagName) !== -1 ||\n                                bypassHTMLFiltering) {\n                                const NS = tagName === 'svg' ?\n                                    SVG_NS :\n                                    (subParent.namespaceURI || SVG_NS);\n                                const element = H.doc.createElementNS(NS, tagName);\n                                const attributes = item.attributes || {};\n                                // Apply attributes from root of AST node, legacy from\n                                // from before TextBuilder\n                                objectEach(item, function (val, key) {\n                                    if (key !== 'tagName' &&\n                                        key !== 'attributes' &&\n                                        key !== 'children' &&\n                                        key !== 'style' &&\n                                        key !== 'textContent') {\n                                        attributes[key] = val;\n                                    }\n                                });\n                                attr(element, bypassHTMLFiltering ?\n                                    attributes :\n                                    AST.filterUserAttributes(attributes));\n                                if (item.style) {\n                                    css(element, item.style);\n                                }\n                                // Add text content\n                                if (textNode) {\n                                    element.appendChild(textNode);\n                                }\n                                // Recurse\n                                recurse(item.children || [], element);\n                                node = element;\n                            }\n                            else {\n                                error(33, false, void 0, {\n                                    'Invalid tagName in config': tagName\n                                });\n                            }\n                        }\n                        // Add to the tree\n                        if (node) {\n                            subParent.appendChild(node);\n                        }\n                        ret = node;\n                    });\n                    // Return last node added (on top level it's the only one)\n                    return ret;\n                }\n                return recurse(this.nodes, parent);\n            }\n            /**\n             * Parse HTML/SVG markup into AST Node objects. Used internally from the\n             * constructor.\n             *\n             * @private\n             *\n             * @function Highcharts.AST#getNodesFromMarkup\n             *\n             * @param {string} markup The markup string.\n             *\n             * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n             */\n            parseMarkup(markup) {\n                const nodes = [];\n                markup = markup\n                    .trim()\n                    // The style attribute throws a warning when parsing when CSP is\n                    // enabled (#6884), so use an alias and pick it up below\n                    // Make all quotation marks parse correctly to DOM (#17627)\n                    .replace(/ style=([\"'])/g, ' data-style=$1');\n                let doc;\n                if (hasValidDOMParser) {\n                    doc = new DOMParser().parseFromString(trustedTypesPolicy ?\n                        trustedTypesPolicy.createHTML(markup) :\n                        markup, 'text/html');\n                }\n                else {\n                    const body = createElement('div');\n                    body.innerHTML = markup;\n                    doc = { body };\n                }\n                const appendChildNodes = (node, addTo) => {\n                    const tagName = node.nodeName.toLowerCase();\n                    // Add allowed tags\n                    const astNode = {\n                        tagName\n                    };\n                    if (tagName === '#text') {\n                        astNode.textContent = node.textContent || '';\n                    }\n                    const parsedAttributes = node.attributes;\n                    // Add attributes\n                    if (parsedAttributes) {\n                        const attributes = {};\n                        [].forEach.call(parsedAttributes, (attrib) => {\n                            if (attrib.name === 'data-style') {\n                                astNode.style = AST.parseStyle(attrib.value);\n                            }\n                            else {\n                                attributes[attrib.name] = attrib.value;\n                            }\n                        });\n                        astNode.attributes = attributes;\n                    }\n                    // Handle children\n                    if (node.childNodes.length) {\n                        const children = [];\n                        [].forEach.call(node.childNodes, (childNode) => {\n                            appendChildNodes(childNode, children);\n                        });\n                        if (children.length) {\n                            astNode.children = children;\n                        }\n                    }\n                    addTo.push(astNode);\n                };\n                [].forEach.call(doc.body.childNodes, (childNode) => appendChildNodes(childNode, nodes));\n                return nodes;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * The list of allowed SVG or HTML attributes, used for sanitizing\n         * potentially harmful content from the chart configuration before adding to\n         * the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n         *\n         * @example\n         * // Allow a custom, trusted attribute\n         * Highcharts.AST.allowedAttributes.push('data-value');\n         *\n         * @name Highcharts.AST.allowedAttributes\n         * @type {Array<string>}\n         */\n        AST.allowedAttributes = [\n            'alt',\n            'aria-controls',\n            'aria-describedby',\n            'aria-expanded',\n            'aria-haspopup',\n            'aria-hidden',\n            'aria-label',\n            'aria-labelledby',\n            'aria-live',\n            'aria-pressed',\n            'aria-readonly',\n            'aria-roledescription',\n            'aria-selected',\n            'class',\n            'clip-path',\n            'color',\n            'colspan',\n            'cx',\n            'cy',\n            'd',\n            'dx',\n            'dy',\n            'disabled',\n            'fill',\n            'filterUnits',\n            'flood-color',\n            'flood-opacity',\n            'height',\n            'href',\n            'id',\n            'in',\n            'markerHeight',\n            'markerWidth',\n            'offset',\n            'opacity',\n            'orient',\n            'padding',\n            'paddingLeft',\n            'paddingRight',\n            'patternUnits',\n            'r',\n            'refX',\n            'refY',\n            'role',\n            'scope',\n            'slope',\n            'src',\n            'startOffset',\n            'stdDeviation',\n            'stroke',\n            'stroke-linecap',\n            'stroke-width',\n            'style',\n            'tableValues',\n            'result',\n            'rowspan',\n            'summary',\n            'target',\n            'tabindex',\n            'text-align',\n            'text-anchor',\n            'textAnchor',\n            'textLength',\n            'title',\n            'type',\n            'valign',\n            'width',\n            'x',\n            'x1',\n            'x2',\n            'xlink:href',\n            'y',\n            'y1',\n            'y2',\n            'zIndex'\n        ];\n        /**\n         * The list of allowed references for referring attributes like `href` and\n         * `src`. Attribute values will only be allowed if they start with one of\n         * these strings.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n         *\n         * @example\n         * // Allow tel:\n         * Highcharts.AST.allowedReferences.push('tel:');\n         *\n         * @name    Highcharts.AST.allowedReferences\n         * @type    {Array<string>}\n         */\n        AST.allowedReferences = [\n            'https://',\n            'http://',\n            'mailto:',\n            '/',\n            '../',\n            './',\n            '#'\n        ];\n        /**\n         * The list of allowed SVG or HTML tags, used for sanitizing potentially\n         * harmful content from the chart configuration before adding to the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n         *\n         * @example\n         * // Allow a custom, trusted tag\n         * Highcharts.AST.allowedTags.push('blink'); // ;)\n         *\n         * @name    Highcharts.AST.allowedTags\n         * @type    {Array<string>}\n         */\n        AST.allowedTags = [\n            'a',\n            'abbr',\n            'b',\n            'br',\n            'button',\n            'caption',\n            'circle',\n            'clipPath',\n            'code',\n            'dd',\n            'defs',\n            'div',\n            'dl',\n            'dt',\n            'em',\n            'feComponentTransfer',\n            'feDropShadow',\n            'feFuncA',\n            'feFuncB',\n            'feFuncG',\n            'feFuncR',\n            'feGaussianBlur',\n            'feOffset',\n            'feMerge',\n            'feMergeNode',\n            'filter',\n            'h1',\n            'h2',\n            'h3',\n            'h4',\n            'h5',\n            'h6',\n            'hr',\n            'i',\n            'img',\n            'li',\n            'linearGradient',\n            'marker',\n            'ol',\n            'p',\n            'path',\n            'pattern',\n            'pre',\n            'rect',\n            'small',\n            'span',\n            'stop',\n            'strong',\n            'style',\n            'sub',\n            'sup',\n            'svg',\n            'table',\n            'text',\n            'textPath',\n            'thead',\n            'title',\n            'tbody',\n            'tspan',\n            'td',\n            'th',\n            'tr',\n            'u',\n            'ul',\n            '#text'\n        ];\n        AST.emptyHTML = emptyHTML;\n        /**\n         * Allow all custom SVG and HTML attributes, references and tags (together\n         * with potentially harmful ones) to be added to the DOM from the chart\n         * configuration. In other words, disable the allow-listing which is the\n         * primary functionality of the AST.\n         *\n         * WARNING: Setting this property to `true` while allowing untrusted user\n         * data in the chart configuration will expose your application to XSS\n         * security risks!\n         *\n         * Note that in case you want to allow a known set of tags or attributes,\n         * you should allow-list them instead of disabling the filtering totally.\n         * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n         * [allowedReferences](Highcharts.AST#.allowedReferences) and\n         * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n         * setting is intended only for those cases where allow-listing is not\n         * practical, and the chart configuration already comes from a secure\n         * source.\n         *\n         * @example\n         * // Allow all custom attributes, references and tags (disable DOM XSS\n         * // filtering)\n         * Highcharts.AST.bypassHTMLFiltering = true;\n         *\n         * @name Highcharts.AST.bypassHTMLFiltering\n         * @static\n         */\n        AST.bypassHTMLFiltering = false;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Serialized form of an SVG/HTML definition, including children.\n         *\n         * @interface Highcharts.ASTNode\n         */ /**\n        * @name Highcharts.ASTNode#attributes\n        * @type {Highcharts.SVGAttributes|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#children\n        * @type {Array<Highcharts.ASTNode>|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#tagName\n        * @type {string|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#textContent\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in file\n\n        return AST;\n    });\n    _registerModule(_modules, 'Dashboards/CallbackRegistry.js', [], function () {\n        class CallbackRegistry {\n            constructor() {\n                this.registry = {};\n            }\n            addCallback(id, callback) {\n                this.registry[id] = callback;\n            }\n            getCallback(id) {\n                return this.registry[id];\n            }\n            /** @internal */\n            toJSON() {\n                const json = {};\n                Object.keys(this.registry).forEach((key) => {\n                    const entry = this.getCallback(key);\n                    const { func, type } = entry;\n                    json[key] = {\n                        func: func.toString(),\n                        type\n                    };\n                });\n                return json;\n            }\n        }\n\n        return CallbackRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Serializable.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Contains the toolset to serialize class instance to JSON and deserialize JSON\n         * to class instances.\n         * @internal\n         * @private\n         */\n        var Serializable;\n        (function (Serializable) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry of serializable classes.\n             */\n            const classRegistry = {};\n            /**\n             * Registry of function sets.\n             */\n            const helperRegistry = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a class instance from the given JSON, if a suitable serializer\n             * has been found.\n             *\n             * @function Serializable.fromJSON\n             *\n             * @param {Serializable.JSON} json\n             * JSON to create a class instance or object from.\n             *\n             * @return {Globals.AnyRecord}\n             * Returns the class instance or object, or throws an exception.\n             */\n            function fromJSON(json) {\n                const $class = json.$class;\n                if (typeof $class !== 'string') {\n                    throw new Error('JSON has no $class property.');\n                }\n                const classs = classRegistry[$class];\n                if (classs) {\n                    return classs.fromJSON(json);\n                }\n                const helper = helperRegistry[$class];\n                if (helper) {\n                    return helper.fromJSON(json);\n                }\n                throw new Error(`'${$class}' unknown.`);\n            }\n            Serializable.fromJSON = fromJSON;\n            /**\n             * Registers a class prototype for the given JSON $class.\n             *\n             * @function Serializable.registerClassPrototype\n             *\n             * @param {string} $class\n             * JSON $class to register for.\n             *\n             * @param {Serializable} classPrototype\n             * Class to register.\n             */\n            function registerClassPrototype($class, classPrototype) {\n                if (classRegistry[$class]) {\n                    throw new Error('A serializer for \\'' + $class + '\\' is already registered.');\n                }\n                classRegistry[$class] = classPrototype;\n            }\n            Serializable.registerClassPrototype = registerClassPrototype;\n            /**\n             * Registers helper functions for the given JSON $class.\n             *\n             * @function Serializable.registerHelper\n             *\n             * @param {Helper} helperFunctions\n             * Helper functions to register.\n             */\n            function registerHelper(helperFunctions) {\n                if (helperRegistry[helperFunctions.$class]) {\n                    throw new Error('A serializer for \\'' + helperFunctions.$class +\n                        '\\' is already registered.');\n                }\n                helperRegistry[helperFunctions.$class] = helperFunctions;\n            }\n            Serializable.registerHelper = registerHelper;\n            /**\n             * Creates JSON from a class instance.\n             *\n             * @function Serializable.toJSON\n             *\n             * @param {Globals.AnyRecord} obj\n             * Class instance or object to serialize as JSON.\n             *\n             * @return {Serializable.JSON}\n             * JSON of the class instance.\n             */\n            function toJSON(obj) {\n                if (typeof obj.fromJSON === 'function' &&\n                    typeof obj.toJSON === 'function') {\n                    return obj.toJSON();\n                }\n                const classes = Object.keys(helperRegistry), numberOfHelpers = classes.length;\n                let $class, serializer;\n                for (let i = 0; i < numberOfHelpers; ++i) {\n                    $class = classes[i];\n                    serializer = helperRegistry[$class];\n                    if (serializer.jsonSupportFor(obj)) {\n                        return serializer.toJSON(obj);\n                    }\n                }\n                throw new Error('Object is not supported.');\n            }\n            Serializable.toJSON = toJSON;\n        })(Serializable || (Serializable = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Serializable;\n    });\n    _registerModule(_modules, 'Dashboards/Components/SharedComponentState.js', [_modules['Dashboards/Serializable.js'], _modules['Core/Utilities.js']], function (Serializable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Contains presentation information like column order, usually in relation to a\n         * table instance.\n         */\n        class SharedComponentState {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columnVisibilityMap = {};\n                this.hiddenRowIndexes = [];\n                this.selection = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             *\n             * @param {DataPresentationState.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns an ordered array of column names.\n             *\n             * @return {Array<string>}\n             * Array of column names in order.\n             */\n            getColumnOrder() {\n                return (this.columnOrder || []).slice();\n            }\n            getColumnVisibility(columnName) {\n                return this.columnVisibilityMap[columnName];\n            }\n            /**\n             * Returns a function for `Array.sort` to change the order of an array of\n             * column names. Unknown column names come last.\n             *\n             * @return {DataPresentationState.ColumnOrderCallback}\n             * Sort function to change the order.\n             */\n            getColumnSorter() {\n                const columnOrder = (this.columnOrder || []).slice();\n                if (!columnOrder.length) {\n                    return () => 0;\n                }\n                return (a, b) => {\n                    const aIndex = columnOrder.indexOf(a), bIndex = columnOrder.indexOf(b);\n                    if (aIndex > -1 && bIndex > -1) {\n                        return aIndex - bIndex;\n                    }\n                    if (bIndex > -1) {\n                        return 1;\n                    }\n                    if (aIndex > -1) {\n                        return -1;\n                    }\n                    return 0;\n                };\n            }\n            /**\n             * @return {boolean}\n             * Returns true, if the state was changed since initialization.\n             */\n            isSet() {\n                return this.isModified === true;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Sets the order of the columns in place.\n             *\n             * @param {Array<string>} columnOrder\n             * Array of column names in order.\n             *\n             * @param {DataEventEmitter.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            setColumnOrder(columnOrder, eventDetail) {\n                const presentationState = this, oldColumnOrder = (presentationState.columnOrder || []).slice(), newColumnOrder = columnOrder.slice();\n                presentationState.emit({\n                    type: 'columnOrderChange',\n                    detail: eventDetail,\n                    newColumnOrder,\n                    oldColumnOrder\n                });\n                presentationState.columnOrder = newColumnOrder;\n                presentationState.isModified = true;\n                presentationState.emit({\n                    type: 'afterColumnOrderChange',\n                    detail: eventDetail,\n                    newColumnOrder,\n                    oldColumnOrder\n                });\n            }\n            setColumnVisibility(columnVisibility, eventDetail) {\n                this.columnVisibilityMap = merge(this.columnVisibilityMap, columnVisibility);\n                this.emit({\n                    type: 'afterColumnVisibilityChange',\n                    visibilityMap: this.columnVisibilityMap,\n                    detail: eventDetail\n                });\n            }\n            setHiddenRows(rowIndexes, hidden = true) {\n                rowIndexes.forEach((rowIndex) => {\n                    if (this.hiddenRowIndexes.indexOf(rowIndex) === -1 && hidden) {\n                        this.hiddenRowIndexes.push(rowIndex);\n                    }\n                    if (this.hiddenRowIndexes.indexOf(rowIndex) > -1 && !hidden) {\n                        this.hiddenRowIndexes\n                            .splice(this.hiddenRowIndexes.indexOf(rowIndex), 1);\n                    }\n                });\n                this.emit({\n                    type: 'afterSetHiddenRows',\n                    hiddenRows: this.hiddenRowIndexes\n                });\n            }\n            getHiddenRows() {\n                return this.hiddenRowIndexes;\n            }\n            setHoverPoint(point, eventDetail) {\n                const isDataGrid = eventDetail && eventDetail.isDataGrid;\n                this.hoverPoint = isDataGrid ? void 0 : point;\n                if (point instanceof HTMLElement) {\n                    this.hoverRow = isDataGrid ? point : void 0;\n                }\n                this.emit({\n                    type: 'afterHoverPointChange',\n                    hoverPoint: isDataGrid ? void 0 : this.hoverPoint,\n                    hoverRow: isDataGrid ? this.hoverRow : void 0,\n                    detail: eventDetail\n                });\n            }\n            getHoverPoint() {\n                return this.hoverPoint;\n            }\n            getSelection() {\n                return this.selection;\n            }\n            setSelection(selection, reset = false, eventDetail) {\n                const axes = Object.keys(selection);\n                axes.forEach((axisID) => {\n                    this.selection[axisID] = selection[axisID];\n                });\n                this.emit({\n                    type: 'afterSelectionChange',\n                    selection: this.selection,\n                    reset,\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Converts JSON to a presentation state.\n             * @internal\n             *\n             * @param {DataPresentationState.ClassJSON} json\n             * JSON (usually with a $class property) to convert.\n             *\n             * @return {DataPresentationState}\n             * Class instance from the JSON.\n             */\n            fromJSON(json) {\n                const presentationState = new SharedComponentState();\n                const { columnOrder, visibilityMap, selection, hoverpoint } = json;\n                if (columnOrder) {\n                    presentationState.setColumnOrder(columnOrder);\n                }\n                if (visibilityMap) {\n                    presentationState.setColumnVisibility(visibilityMap);\n                }\n                if (selection) {\n                    presentationState.setSelection(selection);\n                }\n                if (hoverpoint) {\n                    presentationState.setHoverPoint(hoverpoint);\n                }\n                return presentationState;\n            }\n            /**\n             * Converts the presentation state to JSON.\n             * @internal\n             *\n             * @return {SharedComponentState.JSON}\n             * JSON of this class instance.\n             */\n            toJSON() {\n                const json = {\n                    $class: 'Dashboards.SharedComponentState'\n                };\n                if (this.columnOrder) {\n                    json.columnOrder = this.columnOrder.slice();\n                }\n                if (this.hoverPoint) {\n                    const { x, y, id } = this.hoverPoint;\n                    json.hoverPoint = { x, y, id };\n                }\n                if (this.selection) {\n                    json.selection = this.selection;\n                }\n                if (this.columnVisibilityMap) {\n                    json.columnVisibility = this.columnVisibilityMap;\n                }\n                return json;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        Serializable.registerClassPrototype('Dashboards.SharedComponentState', SharedComponentState.prototype);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SharedComponentState;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentGroup.js', [_modules['Dashboards/Components/SharedComponentState.js']], function (SharedState) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        class ComponentGroup {\n            static getComponentGroup(groupID) {\n                if (this.componentGroups[groupID]) {\n                    return this.componentGroups[groupID];\n                }\n            }\n            static addComponentGroup(group) {\n                const { id } = group;\n                if (!this.componentGroups[id]) {\n                    this.componentGroups[id] = group;\n                }\n            }\n            static getGroupsFromComponent(componentID) {\n                const groups = Object.keys(this.componentGroups);\n                return groups.reduce((arr, groupKey) => {\n                    const group = this.getComponentGroup(groupKey);\n                    if (group && group.components.indexOf(componentID) > -1) {\n                        arr.push(group);\n                    }\n                    return arr;\n                }, []);\n            }\n            constructor(id) {\n                this.state = new SharedState();\n                this.components = [];\n                this.id = id;\n                ComponentGroup.addComponentGroup(this);\n            }\n            addComponents(components) {\n                while (components.length) {\n                    const id = components.pop();\n                    if (!id) {\n                        break;\n                    }\n                    if (this.components.indexOf(id) === -1) {\n                        this.components.push(id);\n                    }\n                }\n            }\n            removeComponents(components) {\n                while (components.length) {\n                    const id = components.pop();\n                    if (!id) {\n                        break;\n                    }\n                    const index = this.components.indexOf(id);\n                    if (index > -1) {\n                        this.components.splice(index, 1);\n                    }\n                }\n            }\n            getSharedState() {\n                return this.state;\n            }\n            on() {\n                throw new Error('Method not implemented.');\n            }\n            emit() {\n                throw new Error('Method not implemented.');\n            }\n        }\n        ComponentGroup.componentGroups = {};\n\n        return ComponentGroup;\n    });\n    _registerModule(_modules, 'Dashboards/Components/EditableOptions.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        class EditableOptions {\n            constructor(component, bindings = EditableOptions.defaultBindings) {\n                this.component = component;\n                this.bindings = bindings;\n            }\n            getOptions() {\n                const options = this.component.options.editableOptions;\n                if (!options) {\n                    return [];\n                }\n                for (let i = 0, iEnd = options.length; i < iEnd; i++) {\n                    const option = options[i];\n                    if (option.name === 'connectorName') {\n                        const board = this.component.board;\n                        const selectOptions = !board ?\n                            [] :\n                            board.dataPool\n                                .getConnectorIds()\n                                .map((name) => ({ name }));\n                        option.selectOptions = selectOptions;\n                    }\n                }\n                return options;\n            }\n        }\n        EditableOptions.defaultBindings = {\n            keyMap: {\n                color: 'colorPicker',\n                title: 'text',\n                caption: 'text',\n                style: 'textarea'\n            },\n            typeMap: {\n                'string': 'text',\n                'number': 'input',\n                'boolean': 'toggle'\n            },\n            skipRedraw: []\n        };\n        // Bindings of basic types to \"editor components\"\n        EditableOptions.defaultTypeMap = {\n            'string': 'text',\n            'number': 'input',\n            'boolean': 'toggle'\n        };\n\n        return EditableOptions;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Emitter.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /**\n         *  Class responsible for adding event listeners on a component\n         *  @internal\n         */\n        class SyncEmitter {\n            /**\n             * Adds an emitter to the emitter registry.\n             *\n             * @param emitter the emitter to add to the registry.\n             */\n            static register(emitter) {\n                const { id } = emitter;\n                this.registry[id] = emitter;\n            }\n            /**\n             * Gets an emitter from emitter registry.\n             *\n             * @param emitterID The ID of the emitter to get.\n             */\n            static get(emitterID) {\n                return this.registry[emitterID];\n            }\n            /**\n             * Creates a new emitter instance.\n             *\n             * @param id An unique ID for the emitter.\n             *\n             * @param func\n             * The function to be called when the emitter is activated.\n             */\n            constructor(id, func) {\n                this.id = id;\n                this.func = func;\n                SyncEmitter.register(this);\n            }\n            /**\n             * Attaches the emitter to a component.\n             *\n             * @param component The component to attach to.\n             */\n            create(component) {\n                this.callback = this.func.call(component);\n            }\n            /**\n             * To be used when removing the emitter from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable emitter.\n         * The emitter is stored by ID.\n         */\n        SyncEmitter.registry = {};\n\n        return SyncEmitter;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Handler.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class responsible for storing handler callbacks used in component sync.\n         * @internal\n         */\n        class SyncHandler {\n            /**\n             * Adds a handler to the handler registry.\n             *\n             * @param handler\n             * The handler to add to the registry.\n             */\n            static register(handler) {\n                const { id } = handler;\n                this.registry[id] = handler;\n            }\n            /**\n             * Gets a handler from handler registry.\n             *\n             * @param handlerID\n             * The ID of the handler to get.\n             */\n            static get(handlerID) {\n                return this.registry[handlerID];\n            }\n            /**\n             * Creates a new handler instance.\n             *\n             * @param id\n             * An unique ID for the handler.\n             *\n             * @param func\n             * The function to be called when the handler is activated.\n             */\n            constructor(id, func) {\n                this.id = id;\n                this.func = func;\n                SyncHandler.register(this);\n            }\n            /**\n             * Calls the activation function on the component and sets the callback to\n             * the return function.\n             *\n             * @param component\n             * The component to register on.\n             */\n            register(component) {\n                const { func } = this;\n                this.callback = func.call(component);\n            }\n            /**\n             * To be used when removing the handler from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable handlers.\n         * The handler is stored by ID.\n         */\n        SyncHandler.registry = {};\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SyncHandler;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Sync.js', [_modules['Dashboards/Components/Sync/Emitter.js'], _modules['Dashboards/Components/Sync/Handler.js']], function (SyncEmitter, SyncHandler) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         * Class\n         *\n         * */\n        /** @internal */\n        class Sync {\n            /* *\n             *\n             * Constructor\n             *\n             * */\n            /**\n             * Creates an instance of the sync class.\n             *\n             * @param component\n             * The component to which the emitters and handlers are attached.\n             *\n             * @param syncHandlers\n             * The emitters and handlers to use for each event.\n             */\n            constructor(component, syncHandlers = Sync.defaultHandlers) {\n                this.component = component;\n                this.syncConfig = syncHandlers;\n                this.registeredSyncHandlers = {};\n                this.registeredSyncEmitters = {};\n                this.isSyncing = false;\n                this.listeners = [];\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add new emitter to the registered emitters.\n             *\n             * @param emitter\n             * The emitter to register.\n             */\n            registerSyncEmitter(emitter) {\n                const { id } = emitter;\n                this.registeredSyncEmitters[id] = emitter;\n            }\n            /**\n             * Method that checks if the emitter is registered.\n             *\n             * @param id\n             * The id of the emitter to check.\n             *\n             * @returns\n             * Whether the emitter is registered.\n             */\n            isRegisteredEmitter(id) {\n                return Boolean(this.registeredSyncEmitters[id]);\n            }\n            /**\n             * Register new handler to the registered handlers.\n             *\n             * @param handler\n             * The handler to register.\n             */\n            registerSyncHandler(handler) {\n                const { id } = handler;\n                this.registeredSyncHandlers[id] = handler;\n            }\n            /**\n             * Method that checks if the handler is registered.\n             *\n             * @param handlerID\n             * The id of the handler to check.\n             *\n             * @returns\n             * Whether the handler is registered.\n             */\n            isRegisteredHandler(handlerID) {\n                return Boolean(this.registeredSyncHandlers[handlerID]);\n            }\n            /**\n             * Registers the handlers and emitters on the component\n             */\n            start() {\n                const { syncConfig, component } = this;\n                for (const id of Object.keys(syncConfig)) {\n                    const syncOptions = syncConfig[id];\n                    if (!syncOptions) {\n                        continue;\n                    }\n                    let { emitter: emitterConfig, handler: handlerConfig } = syncOptions;\n                    if (handlerConfig) {\n                        // Avoid registering the same handler multiple times\n                        // i.e. panning and selection uses the same handler\n                        if (typeof handlerConfig === 'boolean') {\n                            handlerConfig =\n                                Sync.defaultHandlers[id]\n                                    .handler;\n                        }\n                        const handler = new SyncHandler(id, handlerConfig);\n                        if (!this.isRegisteredHandler(handler.id)) {\n                            this.registerSyncHandler(handler);\n                            handler.register(component);\n                        }\n                    }\n                    if (emitterConfig) {\n                        if (typeof emitterConfig === 'boolean') {\n                            emitterConfig =\n                                Sync.defaultHandlers[id]\n                                    .emitter;\n                        }\n                        const emitter = new SyncEmitter(id, emitterConfig);\n                        if (!this.isRegisteredEmitter(emitter.id)) {\n                            this.registerSyncEmitter(emitter);\n                            emitter.create(component);\n                        }\n                    }\n                }\n                this.isSyncing = true;\n                this.listeners.push(component.on('update', () => this.stop()));\n            }\n            /**\n             * Removes the handlers and emitters from the component.\n             */\n            stop() {\n                const { component, listeners, registeredSyncHandlers, registeredSyncEmitters } = this;\n                Object.keys(registeredSyncHandlers).forEach((id) => {\n                    registeredSyncHandlers[id].remove();\n                    delete registeredSyncHandlers[id];\n                });\n                Object.keys(registeredSyncEmitters).forEach((id) => {\n                    registeredSyncEmitters[id].remove();\n                    delete registeredSyncEmitters[id];\n                });\n                this.isSyncing = false;\n                for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                    listeners[i]();\n                }\n                this.listeners.length = 0;\n                this.listeners.push(component.on('afterUpdate', () => {\n                    this.start();\n                }));\n            }\n        }\n        /**\n         * Default handlers for the sync class. This property is extended by\n         * different Components, where default syncs are added. Allows overwriting\n         * the configuration before creating the dashboard.\n         */\n        Sync.defaultHandlers = {};\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (Sync) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Sync.defaultSyncOptions = {\n                crossfilter: {\n                    affectNavigator: false\n                },\n                highlight: {\n                    highlightPoint: true,\n                    showTooltip: true,\n                    showCrosshair: true\n                }\n            };\n        })(Sync || (Sync = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Sync;\n    });\n    _registerModule(_modules, 'Dashboards/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Global Dashboards namespace in classic `<scripts>`-based implementations.\n         *\n         * @namespace Dashboards\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Prefix of a GUIElement HTML class name.\n             */\n            Globals.classNamePrefix = 'highcharts-dashboards-';\n            /** @internal */\n            Globals.classNames = {\n                layout: Globals.classNamePrefix + 'layout',\n                cell: Globals.classNamePrefix + 'cell',\n                cellHover: Globals.classNamePrefix + 'cell-state-hover',\n                cellActive: Globals.classNamePrefix + 'cell-state-active',\n                cellLoading: Globals.classNamePrefix + 'cell-state-loading',\n                row: Globals.classNamePrefix + 'row',\n                layoutsWrapper: Globals.classNamePrefix + 'layouts-wrapper',\n                boardContainer: Globals.classNamePrefix + 'wrapper'\n            };\n            /** @internal */\n            Globals.guiElementType = {\n                row: 'row',\n                cell: 'cell',\n                layout: 'layout'\n            };\n            /**\n             * Contains all Board instances of this window.\n             */\n            Globals.boards = [];\n            /**\n             * Reference to the window used by Dashboards.\n             */\n            Globals.win = window;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentUtilities;\n        (function (ComponentUtilities) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getMargins(element, includeBorders = true) {\n                const borders = {\n                    x: ['borderLeft', 'borderRight'],\n                    y: ['borderTop', 'borderBottom']\n                };\n                return {\n                    y: getStyles(element, [\n                        'marginTop',\n                        'marginBottom',\n                        ...(includeBorders ? borders.y : [])\n                    ]).reduce(sumPixels, 0),\n                    x: getStyles(element, [\n                        'marginLeft',\n                        'marginTop',\n                        ...(includeBorders ? borders.x : [])\n                    ]).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getMargins = getMargins;\n            function getPaddings(element) {\n                return {\n                    x: getStyles(element, ['paddingLeft', 'paddingRight']).reduce(sumPixels, 0),\n                    y: getStyles(element, ['paddingTop', 'paddingBottom']).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getPaddings = getPaddings;\n            function getStyles(element, styles) {\n                const elementStyles = window.getComputedStyle(element);\n                return styles.map((style) => elementStyles[style]); // Cannot use getPropertyValue?\n            }\n            ComponentUtilities.getStyles = getStyles;\n            function sumPixels(accumulator, value) {\n                if (value) {\n                    accumulator += (typeof value === 'number' ? value : parseFloat(value));\n                }\n                return accumulator;\n            }\n            ComponentUtilities.sumPixels = sumPixels;\n        })(ComponentUtilities || (ComponentUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentUtilities;\n    });\n    _registerModule(_modules, 'Dashboards/Utilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { error: coreError, isClass, isDOMElement, isObject, objectEach, uniqueKey: coreUniqueKey } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {boolean} extend\n         *        Whether to extend the left-side object (a) or return a whole new\n         *        object.\n         *\n         * @param {T|undefined} a\n         *        The first object to extend. When only this is given, the function\n         *        returns a deep copy.\n         *\n         * @param {...Array<object|undefined>} [n]\n         *        An object to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */ /**\n        * Utility function to deep merge two or more objects and return a third object.\n        * The merge function can also be used with a single object argument to create a\n        * deep copy of an object.\n        *\n        * @function Highcharts.merge<T>\n        *\n        * @param {T|undefined} a\n        *        The first object to extend. When only this is given, the function\n        *        returns a deep copy.\n        *\n        * @param {...Array<object|undefined>} [n]\n        *        An object to merge into the previous one.\n        *\n        * @return {T}\n        *         The merged object. If the first argument is true, the return is the\n        *         same as the second argument.\n        */\n        function merge() {\n            /* eslint-enable valid-jsdoc */\n            let i, args = arguments, copyDepth = 0, ret = {};\n            // Descriptive error stack:\n            const copyDepthError = new Error('Recursive copy depth > 100'), doCopy = (copy, original) => {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                if (++copyDepth > 100) {\n                    throw copyDepthError;\n                }\n                objectEach(original, (value, key) => {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                --copyDepth;\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (args[0] === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Creates a session-dependent unique key string for reference purposes.\n         *\n         * @function Dashboards.uniqueKey\n         *\n         * @return {string}\n         * Unique key string\n         */\n        function uniqueKey() {\n            return `dashboard-${coreUniqueKey().replace('highcharts-', '')}`;\n        }\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Dashboards.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @return {void}\n         */\n        function error(code, stop) {\n            // TODO- replace with proper error handling\n            if (code === 16) {\n                console.warn(// eslint-disable-line no-console\n                'Dashboard error: Dashboards library loaded more than once.' +\n                    'This may cause undefined behavior.');\n                return;\n            }\n            coreError(code, stop);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Utilities = {\n            error,\n            merge,\n            uniqueKey\n        };\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Component.js', [_modules['Dashboards/CallbackRegistry.js'], _modules['Dashboards/Components/ComponentGroup.js'], _modules['Dashboards/Components/EditableOptions.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Components/ComponentUtilities.js'], _modules['Dashboards/Utilities.js']], function (CallbackRegistry, ComponentGroup, EditableOptions, Sync, Globals, U, CU, DU) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { classNamePrefix } = Globals;\n        const { createElement, isArray, merge, fireEvent, addEvent, objectEach, isFunction, isObject, getStyle, diffObjects } = U;\n        const { getMargins, getPaddings } = CU;\n        const { uniqueKey } = DU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Abstract Class of component.\n         *\n         * @internal\n         *\n         */\n        /**\n         * Abstract Class of component.\n         * @internal\n         */\n        class Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             *\n             * Creates HTML text element like header or title\n             *\n             * @param tagName\n             * HTML tag name used as wrapper of text like `h2` or `p`.\n             * @param elementName\n             * Name of element\n             * @param textOptions\n             * The options for the component\n             * @returns\n             * HTML object when title is created, otherwise undefined\n             *\n             * @internal\n             */\n            static createTextElement(tagName, elementName, textOptions) {\n                if (typeof textOptions === 'object') {\n                    const { className, text, style } = textOptions;\n                    return createElement(tagName, {\n                        className: className || `${classNamePrefix}component-${elementName}`,\n                        textContent: text\n                    }, style);\n                }\n                if (typeof textOptions === 'string') {\n                    return createElement(tagName, {\n                        className: `${classNamePrefix}component-${elementName}`,\n                        textContent: textOptions\n                    }, {});\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                /**\n                 * Registry of callbacks registered on the component. Used in the Highcharts\n                 * component to keep track of chart events.\n                 *\n                 * @internal\n                 */\n                this.callbackRegistry = new CallbackRegistry();\n                /**\n                 * Event listeners tied to the current DataTable. Used for rerendering the\n                 * component on data changes.\n                 *\n                 * @internal\n                 */\n                this.tableEvents = [];\n                /**\n                 * Event listeners tied to the parent cell. Used for rendering/resizing the\n                 * component on interactions.\n                 *\n                 * @internal\n                 */\n                this.cellListeners = [];\n                /**\n                 * Timeouts for calls to `Component.resizeTo()`.\n                 *\n                 * @internal\n                /* *\n                 */\n                this.resizeTimeouts = [];\n                /**\n                 * Timeouts for resizing the content. I.e. `chart.setSize()`.\n                 *\n                 * @internal\n                 * */\n                this.innerResizeTimeouts = [];\n                const renderTo = options.renderTo || options.cell;\n                this.board = board || cell?.row?.layout?.board || {};\n                this.parentElement =\n                    cell?.container || document.querySelector('#' + renderTo);\n                this.cell = cell;\n                this.options = merge(Component.defaultOptions, options);\n                this.id = this.options.id && this.options.id.length ?\n                    this.options.id :\n                    uniqueKey();\n                this.editableOptions =\n                    new EditableOptions(this, options.editableOptionsBindings);\n                this.presentationModifier = this.options.presentationModifier;\n                this.dimensions = {\n                    width: null,\n                    height: null\n                };\n                this.element = createElement('div', {\n                    className: this.options.className\n                }, {}, this.parentElement);\n                if (!Number(getStyle(this.element, 'padding'))) {\n                    // Fix flex problem, because of wrong height in internal elements\n                    this.element.style.padding = '0.1px';\n                }\n                this.contentElement = createElement('div', {\n                    className: `${this.options.className}-content`\n                }, {}, this.element, true);\n                this.filterAndAssignSyncOptions();\n                this.setupEventListeners();\n                if (cell) {\n                    this.attachCellListeners();\n                    this.on('tableChanged', () => {\n                        this.onTableChanged();\n                    });\n                    this.on('update', () => {\n                        this.cell.setLoadingState();\n                    });\n                    this.on('afterRender', () => {\n                        this.cell.setLoadingState(false);\n                    });\n                }\n            }\n            /**\n             * Returns the component's options when it is dropped from the sidebar.\n             *\n             * @param sidebar\n             * The sidebar popup.\n             */\n            getOptionsOnDrop(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            sidebar) {\n                return {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Inits connectors for the component and rerenders it.\n             *\n             * @returns\n             * Promise resolving to the component.\n             */\n            async initConnector() {\n                const connectorId = this.options.connector?.id, dataPool = this.board.dataPool;\n                if (connectorId &&\n                    (this.connectorId !== connectorId ||\n                        dataPool.isNewConnector(connectorId))) {\n                    this.cell?.setLoadingState();\n                    const connector = await dataPool.getConnector(connectorId);\n                    this.setConnector(connector);\n                }\n                return this;\n            }\n            /**\n            * Filter the sync options that are declared in the component options.\n            * Assigns the sync options to the component and to the sync instance.\n            *\n            * @param defaultHandlers\n            * Sync handlers on component.\n            *\n            * @internal\n            */\n            filterAndAssignSyncOptions(defaultHandlers = this.constructor.syncHandlers) {\n                const sync = this.options.sync || {};\n                const syncHandlers = Object.keys(sync).reduce((carry, handlerName) => {\n                    if (handlerName) {\n                        const defaultHandler = defaultHandlers[handlerName];\n                        const defaultOptions = Sync.defaultSyncOptions[handlerName];\n                        const handler = sync[handlerName];\n                        // Make it always an object\n                        carry[handlerName] = merge(defaultOptions || {}, { enabled: isObject(handler) ? handler.enabled : handler }, isObject(handler) ? handler : {});\n                        // Set emitter and handler default functions\n                        if (defaultHandler && carry[handlerName].enabled) {\n                            const keys = [\n                                'emitter', 'handler'\n                            ];\n                            for (const key of keys) {\n                                if (carry[handlerName][key] === true ||\n                                    carry[handlerName][key] === void 0) {\n                                    carry[handlerName][key] =\n                                        defaultHandler[key];\n                                }\n                            }\n                        }\n                    }\n                    return carry;\n                }, {});\n                this.sync ? this.sync.syncConfig = syncHandlers : void 0;\n                this.syncHandlers = syncHandlers;\n            }\n            /**\n             * Setup listeners on cell/other things up the chain\n             *\n             * @internal\n             */\n            attachCellListeners() {\n                // Remove old listeners\n                while (this.cellListeners.length) {\n                    const destroy = this.cellListeners.pop();\n                    if (destroy) {\n                        destroy();\n                    }\n                }\n                if (this.cell && Object.keys(this.cell).length) {\n                    const board = this.cell.row.layout.board;\n                    this.cellListeners.push(\n                    // Listen for resize on dashboard\n                    addEvent(board, 'cellResize', () => {\n                        this.resizeTo(this.parentElement);\n                    }), \n                    // Listen for changed parent\n                    addEvent(this.cell.row, 'cellChange', (e) => {\n                        const { row } = e;\n                        if (row && this.cell) {\n                            const hasLeftTheRow = row.getCellIndex(this.cell) === void 0;\n                            if (hasLeftTheRow) {\n                                if (this.cell) {\n                                    this.setCell(this.cell);\n                                }\n                            }\n                        }\n                    }));\n                }\n            }\n            /**\n             * Set a parent cell.\n             * @param cell\n             * Instance of a cell.\n             * @param resize\n             * Flag that allow to resize the component.\n             *\n             * @internal\n             */\n            setCell(cell, resize = false) {\n                this.cell = cell;\n                if (cell.container) {\n                    this.parentElement = cell.container;\n                }\n                this.attachCellListeners();\n                if (resize) {\n                    this.resizeTo(this.parentElement);\n                }\n            }\n            /**\n             * Adds event listeners to data table.\n             * @param table\n             * Data table that is source of data.\n             * @internal\n             */\n            setupTableListeners(table) {\n                const connector = this.connector;\n                if (connector) {\n                    if (table) {\n                        [\n                            'afterDeleteColumns',\n                            'afterDeleteRows',\n                            'afterSetCell',\n                            'afterSetConnector',\n                            'afterSetColumns',\n                            'afterSetRows'\n                        ].forEach((event) => {\n                            this.tableEvents.push((table)\n                                .on(event, (e) => {\n                                clearTimeout(this.tableEventTimeout);\n                                this.tableEventTimeout = Globals.win.setTimeout(() => {\n                                    this.emit({\n                                        ...e,\n                                        type: 'tableChanged'\n                                    });\n                                    this.tableEventTimeout = void 0;\n                                });\n                            }));\n                        });\n                    }\n                    this.tableEvents.push(connector.on('afterLoad', () => {\n                        clearTimeout(this.tableEventTimeout);\n                        this.tableEventTimeout = Globals.win.setTimeout(() => {\n                            this.emit({\n                                target: this,\n                                type: 'tableChanged'\n                            });\n                            this.tableEventTimeout = void 0;\n                        });\n                    }));\n                }\n            }\n            /**\n             * Remove event listeners in data table.\n             * @internal\n             */\n            clearTableListeners() {\n                const connector = this.connector, tableEvents = this.tableEvents;\n                if (tableEvents.length) {\n                    tableEvents.forEach((removeEventCallback) => removeEventCallback());\n                }\n                if (connector) {\n                    tableEvents.push(connector.table.on('afterSetModifier', (e) => {\n                        if (e.type === 'afterSetModifier') {\n                            clearTimeout(this.tableEventTimeout);\n                            this.tableEventTimeout = Globals.win.setTimeout(() => {\n                                this.emit({\n                                    ...e,\n                                    type: 'tableChanged'\n                                });\n                                this.tableEventTimeout = void 0;\n                            });\n                        }\n                    }));\n                }\n            }\n            /**\n             * Attaches data store to the component.\n             * @param connector\n             * Connector of data.\n             *\n             * @returns\n             * Component which can be used in chaining.\n             *\n             * @internal\n             */\n            setConnector(connector) {\n                fireEvent(this, 'setConnector', { connector });\n                // Clean up old event listeners\n                while (this.tableEvents.length) {\n                    const eventCallback = this.tableEvents.pop();\n                    if (typeof eventCallback === 'function') {\n                        eventCallback();\n                    }\n                }\n                this.connector = connector;\n                if (connector) {\n                    // Set up event listeners\n                    this.clearTableListeners();\n                    this.setupTableListeners(connector.table);\n                    // Re-setup if modifier changes\n                    connector.table.on('setModifier', () => this.clearTableListeners());\n                    connector.table.on('afterSetModifier', (e) => {\n                        if (e.type === 'afterSetModifier' && e.modified) {\n                            this.setupTableListeners(e.modified);\n                        }\n                    });\n                    // Add the component to a group based on the\n                    // connector table id by default\n                    // TODO: make this configurable\n                    const tableID = connector.table.id;\n                    if (!ComponentGroup.getComponentGroup(tableID)) {\n                        ComponentGroup.addComponentGroup(new ComponentGroup(tableID));\n                    }\n                    const group = ComponentGroup.getComponentGroup(tableID);\n                    if (group) {\n                        group.addComponents([this.id]);\n                        this.activeGroup = group;\n                    }\n                }\n                fireEvent(this, 'afterSetConnector', { connector });\n                return this;\n            }\n            /** @internal */\n            setActiveGroup(group) {\n                if (typeof group === 'string') {\n                    group = ComponentGroup.getComponentGroup(group) || null;\n                }\n                if (group instanceof ComponentGroup) {\n                    this.activeGroup = group;\n                }\n                if (group === null) {\n                    this.activeGroup = void 0;\n                }\n                if (this.activeGroup) {\n                    this.activeGroup.addComponents([this.id]);\n                }\n            }\n            /**\n             * Gets height of the component's content.\n             *\n             * @returns\n             * Current height as number.\n             * @internal\n             */\n            getContentHeight() {\n                const titleHeight = this.titleElement ?\n                    this.titleElement.clientHeight + getMargins(this.titleElement).y :\n                    0;\n                const captionHeight = this.captionElement ?\n                    this.captionElement.clientHeight +\n                        getMargins(this.captionElement).y :\n                    0;\n                return titleHeight + captionHeight;\n            }\n            /**\n             * Resize the component\n             * @param width\n             * The width to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style\n             * @param height\n             * The height to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style.\n             */\n            resize(width, height) {\n                if (height) {\n                    // Get offset for border, padding\n                    const pad = getPaddings(this.element).y + getMargins(this.element).y;\n                    this.element.style.height = 'calc(100% - ' + pad + 'px)';\n                    this.contentElement.style.height =\n                        'calc(100% - ' + this.getContentHeight() + 'px)';\n                }\n                else if (height === null) {\n                    this.dimensions.height = null;\n                    this.element.style.removeProperty('height');\n                }\n                fireEvent(this, 'resize', {\n                    width,\n                    height\n                });\n            }\n            /**\n             * Adjusts size of component to parent's cell size when animation is done.\n             * @param element\n             * HTML element that is resized.\n             */\n            resizeTo(element) {\n                while (this.resizeTimeouts.length) {\n                    const timeout = this.resizeTimeouts.pop();\n                    if (timeout) {\n                        cancelAnimationFrame(timeout);\n                    }\n                }\n                const timeoutID = requestAnimationFrame(() => {\n                    const { width, height } = element.getBoundingClientRect();\n                    const padding = getPaddings(element);\n                    const margins = getMargins(element);\n                    this.resize(width - padding.x - margins.x, height - padding.y - margins.y);\n                });\n                this.resizeTimeouts.push(timeoutID);\n            }\n            /**\n             * Handles updating via options.\n             * @param newOptions\n             * The options to apply.\n             *\n             * @param shouldRerender\n             * Set to true if the update should rerender the component.\n             */\n            async update(newOptions, shouldRerender = true) {\n                const eventObject = {\n                    options: newOptions,\n                    shouldForceRerender: false\n                };\n                // Update options\n                fireEvent(this, 'update', eventObject);\n                this.options = merge(this.options, newOptions);\n                if (this.options.connector?.id &&\n                    this.connectorId !== this.options.connector.id) {\n                    const connector = await this.board.dataPool\n                        .getConnector(this.options.connector.id);\n                    this.setConnector(connector);\n                }\n                this.options = merge(this.options, newOptions);\n                if (shouldRerender || eventObject.shouldForceRerender) {\n                    this.render();\n                }\n            }\n            /**\n             * Private method which sets up event listeners for the component.\n             *\n             * @internal\n             */\n            setupEventListeners() {\n                const events = this.options.events;\n                if (events) {\n                    Object.keys(events).forEach((key) => {\n                        const eventCallback = events[key];\n                        if (eventCallback) {\n                            this.callbackRegistry.addCallback(key, {\n                                type: 'component',\n                                func: eventCallback\n                            });\n                        }\n                    });\n                    objectEach(events, (eventCallback, eventType) => {\n                        if (isFunction(eventCallback)) {\n                            this.on(eventType, eventCallback);\n                        }\n                    });\n                }\n                const resizeObserverCallback = () => {\n                    this.resizeTo(this.parentElement);\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(resizeObserverCallback);\n                    this.resizeObserver.observe(this.element);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', resizeObserverCallback);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * Adds title at the top of component's container.\n             *\n             * @param titleOptions\n             * The options for the title.\n             */\n            setTitle(titleOptions) {\n                const titleElement = this.titleElement, shouldExist = titleOptions &&\n                    (typeof titleOptions === 'string' || titleOptions.text);\n                if (shouldExist) {\n                    const newTitle = Component.createTextElement('h2', 'title', titleOptions);\n                    if (newTitle) {\n                        if (!titleElement) {\n                            this.element.insertBefore(newTitle, this.element.firstChild);\n                        }\n                        else {\n                            titleElement.replaceWith(newTitle);\n                        }\n                        this.titleElement = newTitle;\n                    }\n                }\n                else {\n                    if (titleElement) {\n                        titleElement.remove();\n                        delete this.titleElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Adds caption at the bottom of component's container.\n             *\n             * @param captionOptions\n             * The options for the caption.\n             */\n            setCaption(captionOptions) {\n                const captionElement = this.captionElement, shouldExist = captionOptions &&\n                    (typeof captionOptions === 'string' || captionOptions.text);\n                if (shouldExist) {\n                    const newCaption = Component.createTextElement('div', 'caption', captionOptions);\n                    if (newCaption) {\n                        if (!captionElement) {\n                            this.element.appendChild(newCaption);\n                        }\n                        else {\n                            captionElement.replaceWith(newCaption);\n                        }\n                        this.captionElement = newCaption;\n                    }\n                }\n                else {\n                    if (captionElement) {\n                        captionElement.remove();\n                        delete this.captionElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Handles setting things up on initial render.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            async load() {\n                await this.initConnector();\n                this.render();\n                return this;\n            }\n            /**\n             * Renders the component.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            render() {\n                this.emit({ type: 'render' });\n                this.setTitle(this.options.title);\n                this.setCaption(this.options.caption);\n                this.resizeTo(this.parentElement);\n                return this;\n            }\n            /**\n             * Destroys the component.\n             */\n            destroy() {\n                /**\n                 * TODO: Should perhaps set an `isActive` flag to false.\n                 */\n                this.sync.stop();\n                while (this.element.firstChild) {\n                    this.element.firstChild.remove();\n                }\n                // Call unmount\n                fireEvent(this, 'unmount');\n                // Unregister events\n                this.tableEvents.forEach((eventCallback) => eventCallback());\n                this.element.remove();\n            }\n            /** @internal */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /** @internal */\n            emit(e) {\n                if (!e.target) {\n                    e.target = this;\n                }\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const dimensions = {\n                    width: 0,\n                    height: 0\n                };\n                objectEach(this.dimensions, function (value, key) {\n                    if (value === null) {\n                        return;\n                    }\n                    dimensions[key] = value;\n                });\n                const json = {\n                    $class: this.options.type,\n                    options: {\n                        renderTo: this.options.renderTo,\n                        parentElement: this.parentElement.id,\n                        dimensions,\n                        id: this.id,\n                        type: this.type\n                    }\n                };\n                return json;\n            }\n            /**\n             * Get the component's options.\n             * @returns\n             * The JSON of component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return diffObjects(this.options, Component.defaultOptions);\n            }\n            getEditableOptions() {\n                const component = this;\n                return merge(component.options);\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                let result = component.getEditableOptions();\n                for (let i = 0, end = propertyPath.length; i < end; i++) {\n                    if (isArray(result)) {\n                        result = result[0];\n                    }\n                    if (!result) {\n                        return;\n                    }\n                    result = result[propertyPath[i]];\n                }\n                return result;\n            }\n        }\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        /** @internal */\n        Component.Sync = Sync;\n        /**\n         * Default options of the component.\n         */\n        Component.defaultOptions = {\n            className: `${classNamePrefix}component`,\n            id: '',\n            title: false,\n            caption: false,\n            sync: Sync.defaultHandlers,\n            editableOptions: [{\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                }, {\n                    name: 'title',\n                    propertyPath: ['title'],\n                    type: 'input'\n                }, {\n                    name: 'caption',\n                    propertyPath: ['caption'],\n                    type: 'input'\n                }]\n        };\n        /**\n         * Default sync Handlers.\n         */\n        Component.syncHandlers = {};\n\n        return Component;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLComponentDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const HTMLComponentDefaults = {\n            type: 'HTML',\n            elements: []\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/HTMLComponent/HTMLComponentDefaults.js'], _modules['Core/Utilities.js']], function (AST, Component, HTMLComponentDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, diffObjects } = U;\n        // TODO: This may affect the AST parsing in Highcharts\n        // should look into adding these as options if possible\n        // Needs to go in a composition in the Highcharts plugin\n        AST.allowedTags = [\n            ...AST.allowedTags,\n            'option',\n            'select',\n            'label',\n            'input',\n            'textarea'\n        ];\n        AST.allowedAttributes = [\n            ...AST.allowedAttributes,\n            'for',\n            'value',\n            'checked',\n            'src',\n            'name',\n            'selected'\n        ];\n        AST.allowedReferences = [\n            ...AST.allowedReferences,\n            'data:image/'\n        ];\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a HTML component.\n         *\n         */\n        class HTMLComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the HTML component.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @returns\n             * HTML component based on config from JSON.\n             *\n             * @internal\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const elements = (json.elements ?\n                    json.elements.map((el) => JSON.parse(el)) :\n                    []);\n                /// const connector = (\n                //     json.connector ? DataJSON.fromJSON(json.connector) : void 0\n                // );\n                const component = new HTMLComponent(cell, merge(options, {\n                    elements\n                    /// connector: (\n                    //   connector instanceof DataConnector ? connector : void 0\n                    // )\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a HTML component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options) {\n                options = merge(HTMLComponent.defaultOptions, options);\n                super(cell, options);\n                this.options = options;\n                this.type = 'HTML';\n                this.elements = [];\n                this.sync = new Component.Sync(this, this.syncHandlers);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                this.emit({\n                    type: 'load'\n                });\n                await super.load();\n                const options = this.options;\n                let isError = false;\n                if (options.elements?.length) {\n                    this.elements = options.elements.map(function (element) {\n                        if (typeof element === 'string') {\n                            return new AST(element).nodes[0];\n                        }\n                        if (!element.textContent &&\n                            !element.tagName &&\n                            element.attributes) {\n                            isError = true;\n                        }\n                        return element;\n                    });\n                }\n                else if (options.html) {\n                    this.elements = this.getElementsFromString(options.html);\n                }\n                this.constructTree();\n                this.emit({ type: 'afterLoad' });\n                if (isError) {\n                    throw new Error('Missing tagName param in component: ' +\n                        options.cell);\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.constructTree();\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             * @param options\n             * The options to apply.\n             */\n            async update(options) {\n                await super.update(options);\n                this.emit({ type: 'afterUpdate' });\n            }\n            getOptionsOnDrop() {\n                return {\n                    cell: '',\n                    type: 'HTML',\n                    elements: [{\n                            tagName: 'img',\n                            attributes: {\n                                src: 'https://www.highcharts.com/samples/graphics/stock-dark.svg'\n                            }\n                        }]\n                };\n            }\n            /**\n             * @internal\n             */\n            constructTree() {\n                // Remove old tree if rerendering.\n                while (this.contentElement.firstChild) {\n                    this.contentElement.firstChild.remove();\n                }\n                const parser = new AST(this.elements);\n                parser.addToDOM(this.contentElement);\n            }\n            /**\n             * When HTML definition is a string, it needs to be parsed to AST.\n             *\n             * @internal\n             */\n            getElementsFromString(htmlString) {\n                return new AST(htmlString).nodes;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const elements = (this.options.elements || [])\n                    .map((el) => JSON.stringify(el));\n                const json = merge(super.toJSON(), {\n                    elements,\n                    options: this.options\n                });\n                this.emit({\n                    type: 'toJSON',\n                    json\n                });\n                return json;\n            }\n            /**\n             * Get the HTML component's options.\n             * @returns\n             * The JSON of HTML component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HTMLComponent.defaultOptions),\n                    type: 'HTML'\n                };\n            }\n            /**\n             * @internal\n             */\n            onTableChanged(e) {\n                if (e.detail?.sender !== this.id) {\n                    this.render();\n                }\n            }\n        }\n        /* *\n         *\n         *  Static properties\n         *\n         * */\n        /**\n         * Default options of the HTML component.\n         */\n        HTMLComponent.defaultOptions = merge(Component.defaultOptions, HTMLComponentDefaults);\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return HTMLComponent;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTable {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            static isNull(row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    const columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            constructor(options = {}) {\n                /**\n                 * Dictionary of all column aliases and their mapped column. If a column\n                 * for one of the get-methods matches an column alias, this column will\n                 * be replaced with the mapped column by the column alias.\n                 *\n                 * @name Highcharts.DataTable#aliases\n                 * @type {Highcharts.Dictionary<string>}\n                 */\n                this.aliases = (options.aliases ?\n                    JSON.parse(JSON.stringify(options.aliases)) :\n                    {});\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for indentification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                const columns = options.columns || {}, columnNames = Object.keys(columns), thisColumns = this.columns;\n                let rowCount = 0;\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName].slice();\n                    thisColumns[columnName] = column;\n                    rowCount = Math.max(rowCount, column.length);\n                }\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    thisColumns[columnNames[i]].length = rowCount;\n                }\n                this.rowCount = rowCount;\n                const aliases = options.aliases || {}, aliasKeys = Object.keys(aliases), thisAliases = this.aliases;\n                for (let i = 0, iEnd = aliasKeys.length, alias; i < iEnd; ++i) {\n                    alias = aliasKeys[i];\n                    thisAliases[alias] = aliases[alias];\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            clone(skipColumns, eventDetail) {\n                const table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.aliases = table.aliases;\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                const tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone\n                });\n                return tableClone;\n            }\n            /**\n             * Deletes a column alias and returns the original column name. If the alias\n             * is not found, the method returns `undefined`. Deleting an alias does not\n             * affect the data in the table, only the way columns are accessed.\n             *\n             * @function Highcharts.DataTable#deleteColumnAlias\n             *\n             * @param {string} alias\n             * The alias to delete.\n             *\n             * @return {string|undefined}\n             * Returns the original column name, if found.\n             */\n            deleteColumnAlias(alias) {\n                const table = this, aliases = table.aliases, deletedAlias = aliases[alias], modifier = table.modifier;\n                if (deletedAlias) {\n                    delete table.aliases[alias];\n                    if (modifier) {\n                        modifier.modifyColumns(table, { [deletedAlias]: new Array(table.rowCount) }, 0);\n                    }\n                }\n                return deletedAlias;\n            }\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names (no alias) of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            deleteColumns(columnNames, eventDetail) {\n                const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            }\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1, eventDetail) {\n                const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    const columns = table.columns, columnNames = Object.keys(columns);\n                    for (let i = 0, iEnd = columnNames.length, column, deletedCells; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            }\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                const table = this;\n                switch (e.type) {\n                    case 'afterDeleteColumns':\n                    case 'afterDeleteRows':\n                    case 'afterSetCell':\n                    case 'afterSetColumns':\n                    case 'afterSetRows':\n                        table.versionTag = uniqueKey();\n                        break;\n                    default:\n                }\n                fireEvent(table, e.type, e);\n            }\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            getCell(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return column[rowIndex];\n                }\n            }\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            getCellAsBoolean(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                return !!(column && column[rowIndex]);\n            }\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            getCellAsNumber(columnNameOrAlias, rowIndex, useNaN) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                let cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(`${cellValue}`);\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            }\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            getCellAsString(columnNameOrAlias, rowIndex) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                return `${(column && column[rowIndex])}`;\n            }\n            /**\n             * Fetches the given column by the canonical column name or by an alias.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnNameOrAlias, asReference) {\n                return this.getColumns([columnNameOrAlias], asReference)[columnNameOrAlias];\n            }\n            /**\n             * Fetches the given column by the canonical column name or by an alias, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnNameOrAlias\n             * Name or alias of the column to get, alias takes precedence.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            getColumnAsNumbers(columnNameOrAlias, useNaN) {\n                const table = this, columns = table.columns;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = columns[columnNameOrAlias], columnAsNumber = [];\n                if (column) {\n                    const columnLength = column.length;\n                    if (useNaN) {\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i, true));\n                        }\n                    }\n                    else {\n                        for (let i = 0, cellValue; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnNameOrAlias, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            }\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            getColumnNames() {\n                const table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            }\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases to retrieve. Aliases taking precedence.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNamesOrAliases, asReference) {\n                const table = this, tableAliasMap = table.aliases, tableColumns = table.columns, columns = {};\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(tableColumns));\n                for (let i = 0, iEnd = columnNamesOrAliases.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    column = tableColumns[(tableAliasMap[columnName] || columnName)];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            getModifier() {\n                return this.modifier;\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNamesOrAliases) {\n                return this.getRows(rowIndex, 1, columnNamesOrAliases)[0];\n            }\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            getRowCount() {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            }\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            getRowIndexBy(columnNameOrAlias, cellValue, rowIndexOffset) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    const rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRowObject(rowIndex, columnNamesOrAliases) {\n                return this.getRowObjects(rowIndex, 1, columnNamesOrAliases)[0];\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (const columnName of columnNamesOrAliases) {\n                        column = columns[(aliases[columnName] || columnName)];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNamesOrAliases]\n             * Column names or aliases and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns, rows = new Array(rowCount);\n                columnNamesOrAliases = (columnNamesOrAliases || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (const columnName of columnNamesOrAliases) {\n                        column = columns[(aliases[columnName] || columnName)];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            getVersionTag() {\n                return this.versionTag;\n            }\n            /**\n             * Checks for given column names or aliases.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNamesOrAliases\n             * Column names of aliases to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            hasColumns(columnNamesOrAliases) {\n                const table = this, aliases = table.aliases, columns = table.columns;\n                for (let i = 0, iEnd = columnNamesOrAliases.length, columnName; i < iEnd; ++i) {\n                    columnName = columnNamesOrAliases[i];\n                    if (!columns[columnName] && !aliases[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnNameOrAlias\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            hasRowWith(columnNameOrAlias, cellValue) {\n                const table = this;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                const column = table.columns[columnNameOrAlias];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            renameColumn(columnName, newColumnName) {\n                const table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        const aliases = table.aliases;\n                        if (aliases[newColumnName]) {\n                            delete aliases[newColumnName];\n                        }\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Sets a cell value based on the row index and column name or alias.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            setCell(columnNameOrAlias, rowIndex, cellValue, eventDetail) {\n                const table = this, columns = table.columns, modifier = table.modifier;\n                columnNameOrAlias = (table.aliases[columnNameOrAlias] ||\n                    columnNameOrAlias);\n                let column = columns[columnNameOrAlias];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!column) {\n                    column = columns[columnNameOrAlias] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnNameOrAlias, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue,\n                    columnName: columnNameOrAlias,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setColumn\n             *\n             * @param {string} columnNameOrAlias\n             * Column name or alias to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumn(columnNameOrAlias, column = [], rowIndex = 0, eventDetail) {\n                this.setColumns({ [columnNameOrAlias]: column }, rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names or aliases.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                const table = this, tableColumns = table.columns, tableModifier = table.modifier, reset = (typeof rowIndex === 'undefined'), columnNames = Object.keys(columns);\n                table.emit({\n                    type: 'setColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    columnName = (table.aliases[columnName] ||\n                        columnName);\n                    if (reset) {\n                        tableColumns[columnName] = column.slice();\n                        table.rowCount = column.length;\n                    }\n                    else {\n                        const tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                            tableColumn[i] = column[i];\n                        }\n                        table.rowCount = Math.max(table.rowCount, tableColumn.length);\n                    }\n                }\n                const tableColumnNames = Object.keys(tableColumns);\n                for (let i = 0, iEnd = tableColumnNames.length; i < iEnd; ++i) {\n                    tableColumns[tableColumnNames[i]].length = table.rowCount;\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, (rowIndex || 0));\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets or unsets the modifier for the table.\n             * @private\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successfull, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            setModifier(modifier, eventDetail) {\n                const table = this;\n                let promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then((table) => {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch']((error) => {\n                    table.emit({\n                        type: 'setModifierError',\n                        error,\n                        modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex, eventDetail) {\n                this.setRows([row], rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefind` to add as new rows.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRows(rows, rowIndex = this.rowCount, eventDetail) {\n                const table = this, aliases = table.aliases, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n                for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = null;\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        const rowColumnNames = Object.keys(row);\n                        for (let j = 0, jEnd = rowColumnNames.length, rowColumnName; j < jEnd; ++j) {\n                            rowColumnName = rowColumnNames[j];\n                            rowColumnName = (aliases[rowColumnName] || rowColumnName);\n                            if (!columns[rowColumnName]) {\n                                columns[rowColumnName] = new Array(i2 + 1);\n                            }\n                            columns[rowColumnName][i2] = row[rowColumnName];\n                        }\n                    }\n                }\n                const indexRowCount = (rowIndex + rowCount);\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Null state for a row record. In some cases, a row in a table may not\n         * contain any data or may be invalid. In these cases, a null state can be\n         * used to indicate that the row record is empty or invalid.\n         *\n         * @name Highcharts.DataTable.NULL\n         * @type {Highcharts.DataTableRowObject}\n         *\n         * @see {@link Highcharts.DataTable.isNull} for a null test.\n         *\n         * @example\n         * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n         */\n        DataTable.NULL = {};\n        /**\n         * Semantic version string of the DataTable class.\n         * @internal\n         */\n        DataTable.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        const { addEvent, fireEvent, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        class DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^([0-9]{4})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{2})$/,\n                        parser: function (match) {\n                            const d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            let year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^([0-9]{1,2})([\\-\\.\\/])([0-9]{1,2})\\2([0-9]{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                const mergedOptions = merge(DataConverter.defaultOptions, options);\n                let regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            asBoolean(value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            }\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            asDate(value) {\n                let timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            }\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            asGuessedType(value) {\n                const converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            }\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            asNumber(value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    const decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            }\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            asString(value) {\n                return '' + value;\n            }\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            deduceDateFormat(data, limit, save) {\n                const parser = this, stable = [], max = [];\n                let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            }\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            export(\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            getTable() {\n                throw new Error('Not implemented');\n            }\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            guessType(value) {\n                const converter = this;\n                let result = 'string';\n                if (typeof value === 'string') {\n                    const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n                    let innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    const floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        const dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            parse(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @function Highcharts.Data#parseDate\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            parseDate(value, dateFormatProp) {\n                const converter = this, options = converter.options;\n                let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            trim(str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[0-9\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        DataConverter.defaultOptions = {\n            dateFormat: '',\n            alternativeFormat: '',\n            startColumn: 0,\n            endColumn: Number.MAX_VALUE,\n            startRow: 0,\n            endRow: Number.MAX_VALUE,\n            firstRowAsNames: true,\n            switchRowsAndColumns: false\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns = [], headers = []) {\n                const table = new DataTable();\n                for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || `${i}`, columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        class CSVConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            export(connector, options = this.options) {\n                const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n                let { decimalPoint, itemDelimiter } = options;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    const columnMeta = connector.whatIs(columnName);\n                    let columnDataType;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = `\"${cellValue}\"`;\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            let i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                const cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            }\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n                let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (let i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    let offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                let cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Internal method that parses a single CSV row\n             */\n            parseCSVRow(columnStr, rowNumber) {\n                const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                let { decimalPoint } = converter.options;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                let i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                const read = (j) => {\n                    c = columnStr[j];\n                };\n                const pushType = (type) => {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                const push = () => {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        const initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[0-F]{3,3}|[0-F]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            }\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            guessDelimiter(lines) {\n                let points = 0, commas = 0, guessed;\n                const potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (let i = 0; i < linesCount; i++) {\n                    let inStr = false, c, cn, cl, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    const columnStr = lines[i];\n                    for (let j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        CSVConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            lineDelimiter: '\\n'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         * @private\n         */\n        class DataModifier {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            benchmark(dataTable, options) {\n                const results = [];\n                const modifier = this;\n                const execute = () => {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                const defaultOptions = {\n                    iterations: 1\n                };\n                const { iterations } = merge(defaultOptions, options);\n                modifier.on('afterBenchmarkIteration', () => {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                const times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', () => {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', () => {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            }\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifier = this;\n                return new Promise((resolve, reject) => {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        reject(e);\n                    }\n                });\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         * @private\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        class DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            constructor(options = {}) {\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            /**\n             * Poll timer ID, if active.\n             */\n            get polling() {\n                return !!this.polling;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            describeColumn(name, columnMeta) {\n                const connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            }\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            describeColumns(columns) {\n                const connector = this, columnNames = Object.keys(columns);\n                let columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            }\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            getColumnOrder(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort((a, b) => (pick(columns[a].index, 0) - pick(columns[b].index, 0)));\n                }\n            }\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            getSortedColumns(usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            }\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            load() {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            }\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            save() {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            }\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            setColumnOrder(columnNames) {\n                const connector = this;\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            }\n            setModifierOptions(modifierOptions) {\n                const ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(() => this);\n            }\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            startPolling(refreshTime = 1000) {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(() => connector\n                    .load()['catch']((error) => connector.emit({\n                    type: 'loadError',\n                    error,\n                    table: connector.table\n                }))\n                    .then(() => {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }), refreshTime);\n            }\n            /**\n             * Stops polling data.\n             */\n            stopPolling() {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            }\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            whatIs(name) {\n                return this.metadata.columns[name];\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        class CSVConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new CSVConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { csv, csvURL, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    csv,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then((response) => response.text()) :\n                    csv || '')\n                    .then((csv) => {\n                    if (csv) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(() => csv);\n                })\n                    .then((csv) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CSVConnector.defaultOptions = {\n            csv: '',\n            csvURL: '',\n            enablePolling: false,\n            dataRefreshRate: 1,\n            firstRowAsNames: true\n        };\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        class GoogleSheetsConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.header = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, parseOptions = merge(converter.options, options), columns = ((parseOptions.json &&\n                    parseOptions.json.values) || []).map((column) => column.slice());\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                converter.columns = columns;\n                let column;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        `${column.shift()}` :\n                        uniqueKey());\n                    for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            let cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        GoogleSheetsConverter.defaultOptions = {\n            ...DataConverter.defaultOptions\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        class GoogleSheetsConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new GoogleSheetsConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, dataRefreshRate, enablePolling, firstRowAsNames, googleAPIKey, googleSpreadsheetKey } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    url\n                });\n                return fetch(url)\n                    .then((response) => (response.json()))\n                    .then((json) => {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames,\n                        json\n                    });\n                    // If already loaded, clear the current table\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GoogleSheetsConnector.defaultOptions = {\n            googleAPIKey: '',\n            googleSpreadsheetKey: '',\n            worksheet: 1,\n            enablePolling: false,\n            dataRefreshRate: 2,\n            firstRowAsNames: true\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options = {}) {\n                return (`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/` +\n                    (options.onlyColumnNames ?\n                        'A1:Z1' :\n                        buildQueryRange(options)) +\n                    '?alt=json' +\n                    (options.onlyColumnNames ?\n                        '' :\n                        '&dateTimeRenderOption=FORMATTED_STRING' +\n                            '&majorDimension=COLUMNS' +\n                            '&valueRenderOption=UNFORMATTED_VALUE') +\n                    '&prettyPrint=false' +\n                    `&key=${apiKey}`);\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options = {}) {\n                const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            let i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        class HTMLTableConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    this.tableElement = mergedOptions.tableElement;\n                    this.tableElementID = mergedOptions.tableElement.id;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            export(connector, options = this.options) {\n                const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                let tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    const subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (const name of columnNames) {\n                            const subhead = (columns[name].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                let caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            }\n            /**\n             * Get table cell markup from row data.\n             */\n            getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n                let val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            }\n            /**\n             * Get table header markup from row data.\n             */\n            getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n                const { useMultiLevelHeaders, useRowspanHeaders } = options;\n                let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            }\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            parse(options, eventDetail) {\n                const converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns,\n                        detail: eventDetail,\n                        headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                let rowIndex = 0, item, { startRow } = parseOptions;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    const items = rows[0].children, itemsLength = items.length;\n                    for (let i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        let columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                let cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                let i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns,\n                    detail: eventDetail,\n                    headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        HTMLTableConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            useRowspanHeaders: true,\n            useMultiLevelHeaders: true\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { win } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        class HTMLTableConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new HTMLTableConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    tableElement: connector.tableElement\n                });\n                let tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    const error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HTMLTableConnector.defaultOptions = {\n            table: ''\n        };\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { error, isArray, merge, objectEach } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        class JSONConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                this.table = new DataTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this;\n                options = merge(converter.options, options);\n                const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n                let data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                        const item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(`${item.shift()}`);\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        let row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            const columnNames = converter.headers;\n                            if (columnNames && !(columnNames instanceof Array)) {\n                                const newRow = {};\n                                objectEach(columnNames, (arrayWithPath, name) => {\n                                    newRow[name] = arrayWithPath.reduce((acc, key) => acc[key], row);\n                                });\n                                row = newRow;\n                            }\n                            this.table.setRows([row], rowIndex);\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return this.table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        JSONConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            data: [],\n            orientation: 'rows'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        class JSONConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new JSONConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { data, dataUrl, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    data,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then((json) => json.json()) :\n                    data || [])\n                    .then((data) => {\n                    if (data) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ data });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector.setModifierOptions(dataModifier).then(() => data);\n                })\n                    .then((data) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        JSONConnector.defaultOptions = {\n            data: [],\n            enablePolling: false,\n            dataRefreshRate: 0,\n            firstRowAsNames: true,\n            orientation: 'rows'\n        };\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         * @private\n         */\n        class ChainModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            constructor(options, ...chain) {\n                super();\n                this.chain = chain;\n                this.options = merge(ChainModifier.defaultOptions, options);\n                const optionsChain = this.options.chain || [];\n                for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            add(modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            clear(eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                let promiseChain = Promise.resolve(table);\n                for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    const modifier = modifiers[i];\n                    promiseChain = promiseChain.then((chainTable) => modifier.modify(chainTable.modified, eventDetail));\n                }\n                promiseChain = promiseChain.then((chainTable) => {\n                    table.modified.deleteColumns();\n                    table.modified.setColumns(chainTable.modified.getColumns());\n                    return table;\n                });\n                promiseChain = promiseChain['catch']((error) => {\n                    this.emit({\n                        type: 'error',\n                        detail: eventDetail,\n                        table\n                    });\n                    throw error;\n                });\n                return promiseChain;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            modifyTable(table, eventDetail) {\n                const chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table\n                });\n                const modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                let modified = table.modified;\n                for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table\n                });\n                return table;\n            }\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            remove(modifier, eventDetail) {\n                const modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default option for the ordered modifier chain.\n         */\n        ChainModifier.defaultOptions = {\n            type: 'Chain'\n        };\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        class InvertModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(InvertModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(`${i2}`, row);\n                    }\n                    else {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            }\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    const columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map((column) => `${column}`), columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    const columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[`${i}`] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the invert modifier.\n         */\n        InvertModifier.defaultOptions = {\n            type: 'Invert'\n        };\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         * @private\n         */\n        class RangeModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(RangeModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const { additive, ranges, strict } = modifier.options;\n                if (ranges.length) {\n                    const modified = table.modified;\n                    let columns = table.getColumns(), rows = [];\n                    for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            columns = modified.getColumns();\n                            rows = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (let j = 0, jEnd = rangeColumn.length, cell, row; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                row = (additive ?\n                                    table.getRow(j) :\n                                    modified.getRow(j));\n                                if (row) {\n                                    rows.push(row);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the range modifier.\n         */\n        RangeModifier.defaultOptions = {\n            type: 'Range',\n            ranges: []\n        };\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         * @private\n         */\n        class SortModifier extends DataModifier {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static ascending(a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            }\n            static descending(a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(SortModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            getRowReferences(table) {\n                const rows = table.getRows(), rowReferences = [];\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n                }\n                if (orderInColumn) {\n                    const column = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns({ [orderInColumn]: column });\n                }\n                else {\n                    const rows = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        rows.push(rowReferences[i].row);\n                    }\n                    modified.setRows(rows, 0);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options to group table rows.\n         */\n        SortModifier.defaultOptions = {\n            type: 'Sort',\n            direction: 'desc',\n            orderByColumn: 'y'\n        };\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentRegistry;\n        (function (ComponentRegistry) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             *\n             * Record of component classes\n             * @todo\n             *\n             */\n            ComponentRegistry.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method used to register new component classes.\n             *\n             * @param {string} key\n             * Registry key of the component class.\n             *\n             * @param {ComponentType} DataConnectorClass\n             * Component class (aka class constructor) to register.\n             */\n            function registerComponent(key, ComponentClass) {\n                return (!!key &&\n                    !ComponentRegistry.types[key] &&\n                    !!(ComponentRegistry.types[key] = ComponentClass));\n            }\n            ComponentRegistry.registerComponent = registerComponent;\n        })(ComponentRegistry || (ComponentRegistry = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/Bindings.js', [_modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (ComponentRegistry, Globals, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, fireEvent, error } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var Bindings;\n        (function (Bindings) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getGUIElement(idOrElement) {\n                const container = typeof idOrElement === 'string' ?\n                    document.getElementById(idOrElement) : idOrElement;\n                let guiElement;\n                if (container !== null) {\n                    fireEvent(container, 'bindedGUIElement', {}, function (e) {\n                        guiElement = e.guiElement;\n                    });\n                }\n                return guiElement;\n            }\n            async function addComponent(options, board, cell) {\n                const optionsStates = options.states;\n                const optionsEvents = options.events;\n                const renderTo = options.renderTo || options.cell;\n                if (!renderTo) {\n                    error('The `renderTo` option is required to render the component.');\n                    return;\n                }\n                cell = cell || Bindings.getCell(renderTo);\n                const componentContainer = cell?.container || document.querySelector('#' + renderTo);\n                if (!componentContainer || !options.type) {\n                    error('The component is misconfigured and is unable to find the' +\n                        'HTML cell element ${renderTo} to render the content.');\n                    return;\n                }\n                let ComponentClass = ComponentRegistry.types[options.type];\n                if (!ComponentClass) {\n                    error(`The component's type ${options.type} does not exist.`);\n                    if (cell) {\n                        ComponentClass =\n                            ComponentRegistry.types['HTML'];\n                        options.title = {\n                            text: board.editMode?.lang.errorMessage ||\n                                'Something went wrong',\n                            className: Globals.classNamePrefix + 'component-title-error ' +\n                                Globals.classNamePrefix + 'component-title'\n                        };\n                    }\n                }\n                const component = new ComponentClass(cell, options, board);\n                const promise = component.load()['catch']((e) => {\n                    // eslint-disable-next-line no-console\n                    console.error(e);\n                    component.update({\n                        connector: {\n                            id: ''\n                        },\n                        title: {\n                            text: board.editMode?.lang.errorMessage ||\n                                'Something went wrong',\n                            className: Globals.classNamePrefix + 'component-title-error ' +\n                                Globals.classNamePrefix + 'component-title'\n                        }\n                    });\n                });\n                if (cell) {\n                    component.setCell(cell);\n                    cell.mountedComponent = component;\n                }\n                board.mountedComponents.push({\n                    options: options,\n                    component: component,\n                    cell: cell || {\n                        id: renderTo,\n                        container: componentContainer,\n                        mountedComponent: component\n                    }\n                });\n                fireEvent(component, 'mount');\n                // Events\n                if (optionsEvents && optionsEvents.click) {\n                    addEvent(componentContainer, 'click', () => {\n                        optionsEvents.click();\n                        if (cell &&\n                            component &&\n                            componentContainer &&\n                            optionsStates &&\n                            optionsStates.active) {\n                            cell.setActiveState();\n                        }\n                    });\n                }\n                // States\n                if (optionsStates?.hover) {\n                    componentContainer.classList.add(Globals.classNames.cellHover);\n                }\n                fireEvent(component, 'afterLoad');\n                return promise;\n            }\n            Bindings.addComponent = addComponent;\n            /** @internal */\n            function componentFromJSON(json) {\n                let componentClass = ComponentRegistry.types[json.$class];\n                if (!componentClass) {\n                    return;\n                }\n                const cell = Bindings.getCell(json.options.renderTo || '');\n                if (!cell) {\n                    return;\n                }\n                const component = componentClass.fromJSON(json, cell);\n                if (component) {\n                    component.render();\n                }\n                return component;\n            }\n            Bindings.componentFromJSON = componentFromJSON;\n            function getCell(idOrElement) {\n                const cell = getGUIElement(idOrElement);\n                if (!(cell && cell.getType() === 'cell')) {\n                    return;\n                }\n                return cell;\n            }\n            Bindings.getCell = getCell;\n            function getRow(idOrElement) {\n                const row = getGUIElement(idOrElement);\n                if (!(row && row.getType() === 'row')) {\n                    return;\n                }\n                return row;\n            }\n            Bindings.getRow = getRow;\n            function getLayout(idOrElement) {\n                const layout = getGUIElement(idOrElement);\n                if (!(layout && layout.getType() === 'layout')) {\n                    return;\n                }\n                return layout;\n            }\n            Bindings.getLayout = getLayout;\n        })(Bindings || (Bindings = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Bindings;\n    });\n    _registerModule(_modules, 'Dashboards/Accessibility/DashboardsAccessibility.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class DashboardsAccessibility {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(board) {\n                this.board = board;\n                this.addTabIndexToCells();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            addTabIndexToCells() {\n                const components = this.board.mountedComponents;\n                let cell;\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    cell = components[i].cell;\n                    if (cell && cell.container) {\n                        cell.container.setAttribute('tabindex', -1);\n                    }\n                }\n            }\n        }\n        /// namespace DashboardsAccessibility { }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DashboardsAccessibility;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        class DataCursor {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(stateMap = {}) {\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            addListener(tableId, state, listener) {\n                const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                const listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            }\n            /**\n             * @private\n             */\n            buildEmittingTag(e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            }\n            // Implementation\n            emitCursor(table, groupOrCursor, cursorOrEvent, eventOrLasting, lasting) {\n                const cursor = (typeof groupOrCursor === 'object' ?\n                    groupOrCursor :\n                    cursorOrEvent), event = (typeof eventOrLasting === 'object' ?\n                    eventOrLasting :\n                    cursorOrEvent), group = (typeof groupOrCursor === 'string' ?\n                    groupOrCursor :\n                    void 0), tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                lasting = (lasting || eventOrLasting === true);\n                if (listeners) {\n                    const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ||\n                        {});\n                    const cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    const e = {\n                        cursor,\n                        cursors,\n                        table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    if (group) {\n                        e.group = group;\n                    }\n                    const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        const index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            }\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            remitCursor(tableId, cursor) {\n                const cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    const index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            removeListener(tableId, state, listener) {\n                const listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const index = listeners.indexOf(listener);\n                    if (index) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataCursor class.\n         * @internal\n         */\n        DataCursor.version = '1.0.0';\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    const columnNeedle = JSON.stringify(needle.columns);\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                const needleColumns = needle.columns;\n                const rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                const columns = (cursor.columns || []);\n                const positions = [];\n                const state = cursor.state;\n                for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row,\n                            state\n                        });\n                        continue;\n                    }\n                    for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row,\n                            state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                const range = {\n                    type: 'range',\n                    firstRow: (cursor.row ??\n                        (defaultRange && defaultRange.firstRow) ??\n                        0),\n                    lastRow: (cursor.row ??\n                        (defaultRange && defaultRange.lastRow) ??\n                        Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Dashboards/SerializeHelper/DataCursorHelper.js', [_modules['Data/DataCursor.js'], _modules['Dashboards/Serializable.js']], function (DataCursor, Serializable) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts the given JSON to a class instance.\n         *\n         * @param {DataCursorHelper.JSON} json\n         * JSON to deserialize as a class instance or object.\n         *\n         * @return {DataCursor}\n         * Returns the class instance or object, or throws an exception.\n         */\n        function fromJSON(json) {\n            return new DataCursor(json.stateMap);\n        }\n        /**\n         * Validates the given class instance for JSON support.\n         *\n         * @param {Globals.AnyRecord} obj\n         * Class instance or object to validate.\n         *\n         * @return {boolean}\n         * Returns true, if the function set can convert the given object, otherwise\n         * false.\n         */\n        function jsonSupportFor(obj) {\n            return obj instanceof DataCursor;\n        }\n        /**\n         * Converts the given class instance to JSON.\n         *\n         * @param {DataTable} obj\n         * Class instance or object to serialize as JSON.\n         *\n         * @return {DataTableHelper.JSON}\n         * Returns the JSON of the class instance or object.\n         */\n        function toJSON(obj) {\n            const stateMap = obj.stateMap, stateMapJSON = {}, tableIds = Object.keys(obj.stateMap);\n            let cursors, cursorsJSON, tableId, state, states;\n            for (let i = 0, iEnd = tableIds.length; i < iEnd; ++i) {\n                tableId = tableIds[i];\n                states = Object.keys(stateMap[tableId]);\n                stateMapJSON[tableId] = {};\n                for (let j = 0, jEnd = states.length; j < jEnd; ++j) {\n                    state = states[j];\n                    cursors = stateMap[tableId][state];\n                    stateMapJSON[tableId][state] = cursorsJSON = [];\n                    for (let k = 0, kEnd = cursors.length; k < kEnd; ++k) {\n                        cursorsJSON.push({ ...cursors[k] });\n                    }\n                }\n            }\n            return {\n                $class: 'Data.DataCursor',\n                stateMap: stateMapJSON\n            };\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        const DataCursorHelper = {\n            $class: 'Data.DataCursor',\n            fromJSON,\n            jsonSupportFor,\n            toJSON\n        };\n        Serializable.registerHelper(DataCursorHelper);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursorHelper;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        class DataPool {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = DataPoolDefaults) {\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                U.fireEvent(this, e.type, e);\n            }\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            getConnector(connectorId) {\n                const connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                let waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    const connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(`Connector not found. (${connectorId})`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then((connector) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch']((error) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise((resolve, reject) => {\n                    waitingList.push([resolve, reject]);\n                });\n            }\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            getConnectorIds() {\n                const connectors = this.options.connectors, connectorIds = [];\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            }\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            getConnectorOptions(connectorId) {\n                const connectors = this.options.connectors;\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            }\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            getConnectorTable(connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then((connector) => connector.table);\n            }\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            isNewConnector(connectorId) {\n                return !this.connectors[connectorId];\n            }\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            loadConnector(options) {\n                return new Promise((resolve, reject) => {\n                    this.emit({\n                        type: 'load',\n                        options\n                    });\n                    const ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(`Connector type not found. (${options.type})`);\n                    }\n                    const connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then((connector) => {\n                        this.connectors[options.id] = connector;\n                        this.emit({\n                            type: 'afterLoad',\n                            options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return U.addEvent(this, type, callback);\n            }\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            setConnectorOptions(options) {\n                const connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options\n                });\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataPool class.\n         * @internal\n         */\n        DataPool.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditGlobals.js', [_modules['Dashboards/Globals.js']], function (DG) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const PREFIX = DG.classNamePrefix + 'edit-';\n        /**\n         * @internal\n         */\n        const EditGlobals = {\n            classNames: {\n                resizeSnap: PREFIX + 'resize-snap',\n                resizeSnapX: PREFIX + 'resize-snap-x',\n                resizeSnapY: PREFIX + 'resize-snap-y',\n                separator: PREFIX + 'separator',\n                contextMenuBtn: PREFIX + 'context-menu-btn',\n                contextMenuBtnText: PREFIX + 'context-menu-btn-text',\n                contextMenu: PREFIX + 'context-menu',\n                contextMenuItem: PREFIX + 'context-menu-item',\n                editModeEnabled: PREFIX + 'enabled',\n                editToolbar: PREFIX + 'toolbar',\n                editToolbarCellOutline: PREFIX + 'toolbar-cell-outline',\n                editToolbarRowOutline: PREFIX + 'toolbar-row-outline',\n                editToolbarItem: PREFIX + 'toolbar-item',\n                editToolbarRow: PREFIX + 'toolbar-row',\n                editToolbarCell: PREFIX + 'toolbar-cell',\n                editSidebar: PREFIX + 'sidebar',\n                editSidebarShow: PREFIX + 'sidebar-show',\n                editSidebarHide: PREFIX + 'sidebar-hide',\n                editSidebarTitle: PREFIX + 'sidebar-title',\n                editSidebarMenuItem: PREFIX + 'sidebar-item',\n                rowContextHighlight: PREFIX + 'row-context-highlight',\n                cellEditHighlight: PREFIX + 'cell-highlight',\n                dashboardCellEditHighlightActive: PREFIX + 'cell-highlight-active',\n                dragMock: PREFIX + 'drag-mock',\n                dropPointer: PREFIX + 'drop-pointer',\n                contextDetectionPointer: PREFIX + 'ctx-detection-pointer',\n                resizePointer: PREFIX + 'resize-pointer',\n                currentEditedElement: PREFIX + 'unmask',\n                maskElement: PREFIX + 'mask',\n                menuItem: PREFIX + 'menu-item',\n                menu: PREFIX + 'menu',\n                menuVerticalSeparator: PREFIX + 'menu-vertical-separator',\n                menuHorizontalSeparator: PREFIX + 'menu-horizontal-separator',\n                menuDestroy: PREFIX + 'menu-destroy',\n                editSidebarWrapper: PREFIX + 'sidebar-wrapper',\n                customSelect: PREFIX + 'custom-select',\n                customSelectButton: PREFIX + 'custom-option-button',\n                toggleContainer: PREFIX + 'toggle-container',\n                toggleWrapper: PREFIX + 'toggle-wrapper',\n                toggleSlider: PREFIX + 'toggle-slider',\n                toggleWrapperColored: PREFIX + 'toggle-wrapper-colored',\n                toggleLabels: PREFIX + 'toggle-labels',\n                button: PREFIX + 'button',\n                sidebarNavButton: PREFIX + 'sidebar-button-nav',\n                labelText: PREFIX + 'label-text',\n                editSidebarTabBtn: PREFIX + 'sidebar-tab-btn',\n                editToolsBtn: PREFIX + 'tools-btn',\n                editTools: PREFIX + 'tools',\n                editGridItems: PREFIX + 'grid-items',\n                // Confirmation popup\n                confirmationPopup: PREFIX + 'confirmation-popup',\n                popupButtonContainer: PREFIX + 'confirmation-popup-button-container',\n                popupContentContainer: PREFIX + 'confirmation-popup-content',\n                popupCancelBtn: PREFIX + 'confirmation-popup-cancel-btn',\n                popupConfirmBtn: PREFIX + 'confirmation-popup-confirm-btn',\n                popupCloseButton: PREFIX + 'popup-close',\n                editOverlay: PREFIX + 'overlay',\n                editOverlayActive: PREFIX + 'overlay-active',\n                resizerMenuBtnActive: PREFIX + 'resizer-menu-btn-active',\n                sidebarCloseButton: PREFIX + 'close-btn',\n                editSidebarTabBtnWrapper: PREFIX + 'tabs-buttons-wrapper',\n                editSidebarRight: PREFIX + 'sidebar-right',\n                editSidebarRightShow: PREFIX + 'sidebar-right-show',\n                viewFullscreen: PREFIX + 'view-fullscreen',\n                // Accordion\n                accordionMenu: PREFIX + 'accordion-menu',\n                accordionContainer: PREFIX + 'accordion',\n                accordionHeader: PREFIX + 'accordion-header',\n                accordionHeaderBtn: PREFIX + 'accordion-header-btn',\n                accordionHeaderIcon: PREFIX + 'accordion-header-icon',\n                accordionContent: PREFIX + 'accordion-content',\n                accordionNestedWrapper: PREFIX + 'accordion-nested',\n                accordionMenuButtonsContainer: PREFIX + 'accordion-menu-buttons-container',\n                accordionMenuButton: PREFIX + 'accordion-menu-button',\n                hiddenElement: PREFIX + 'hidden-element',\n                collapsableContentHeader: PREFIX + 'collapsable-content-header',\n                // Custom dropdown with icons\n                collapsedElement: PREFIX + 'collapsed-element',\n                dropdown: PREFIX + 'dropdown',\n                dropdownContent: PREFIX + 'dropdown-content',\n                dropdownButton: PREFIX + 'dropdown-button',\n                dropdownButtonContent: PREFIX + 'dropdown-button-content',\n                dropdownIcon: PREFIX + 'pointer',\n                icon: PREFIX + 'icon'\n            },\n            lang: {\n                accessibility: {\n                    contextMenu: {\n                        button: 'Context menu'\n                    },\n                    editMode: {\n                        editMode: 'Edit mode toggle button'\n                    }\n                },\n                addComponent: 'Add component',\n                cancelButton: 'Cancel',\n                caption: 'Caption',\n                chartClassName: 'Chart class name',\n                chartConfig: 'Chart configuration',\n                chartID: 'Chart ID',\n                chartOptions: 'Chart options',\n                chartType: 'Chart type',\n                connectorName: 'Connector name',\n                confirmButton: 'Confirm',\n                confirmDestroyCell: 'Do you really want to destroy the cell?',\n                confirmDestroyRow: 'Do you really want to destroy the row?',\n                dataLabels: 'Data labels',\n                editMode: 'Edit mode',\n                errorMessage: 'Something went wrong',\n                exitFullscreen: 'Exit full screen',\n                id: 'Id',\n                off: 'off',\n                on: 'on',\n                pointFormat: 'Point format',\n                settings: 'Settings',\n                style: 'Styles',\n                title: 'Title',\n                viewFullscreen: 'View in full screen',\n                sidebar: {\n                    HTML: 'HTML',\n                    layout: 'Layout',\n                    Highcharts: 'Highcharts',\n                    DataGrid: 'DataGrid',\n                    KPI: 'KPI'\n                }\n            }\n        };\n\n        return EditGlobals;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/GUIElement.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js']], function (U, Globals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, uniqueKey, objectEach, error } = U;\n        class GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            // Get offsets of the guiElement relative to\n            // the referenceElement or the Viewport.\n            static getOffsets(guiElement, referenceElement) {\n                const offset = { left: 0, top: 0, right: 0, bottom: 0 };\n                if (guiElement.container) {\n                    const guiElementClientRect = guiElement.container.getBoundingClientRect();\n                    const referenceClientRect = referenceElement ?\n                        referenceElement.getBoundingClientRect() : { left: 0, top: 0 };\n                    offset.left = guiElementClientRect.left - referenceClientRect.left;\n                    offset.top = guiElementClientRect.top - referenceClientRect.top;\n                    offset.right =\n                        guiElementClientRect.right - referenceClientRect.left;\n                    offset.bottom =\n                        guiElementClientRect.bottom - referenceClientRect.top;\n                }\n                return offset;\n            }\n            // Get dimensions of the guiElement container from offsets.\n            static getDimFromOffsets(offsets) {\n                return {\n                    width: offsets.right - offsets.left,\n                    height: offsets.bottom - offsets.top\n                };\n            }\n            // Method for element id generation.\n            static createElementId(elementType // 'col', 'row', 'layout'\n            ) {\n                return (Globals.classNamePrefix + elementType + '-' +\n                    uniqueKey().slice(11));\n            }\n            // Get width in percentages (0% - 100%).\n            static getPercentageWidth(width // Supported formats '50%' or '1/2'\n            ) {\n                const fractionRegEx = /^([0-9]{1})[\\-\\/\\.]([0-9]{1,2})$/;\n                let result;\n                if (fractionRegEx.test(width)) {\n                    const match = width.match(fractionRegEx) || [], multiplier = +match[1], divider = +match[2];\n                    result = 100 * multiplier / divider;\n                    result = (result <= 100 ? result : 100) + '%';\n                }\n                else if (width.indexOf('%') !== -1) {\n                    const value = parseFloat(width);\n                    result = (value <= 100 ?\n                        (value >= 0 ? value : 0) : 100) + '%';\n                }\n                return result;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Create or get existing HTML element as a GUIElement container.\n             *\n             * @param {GUIElement.ContainerOptions} options\n             * Options.\n             */\n            getElementContainer(options) {\n                const guiElement = this;\n                let elem;\n                if (options.render) {\n                    if (options.attribs && !options.attribs.id) {\n                        delete options.attribs.id;\n                    }\n                }\n                else if (typeof options.elementId === 'string') {\n                    const div = document.getElementById(options.elementId);\n                    if (div) {\n                        guiElement.container = div;\n                    }\n                    else {\n                        error('Element ' + options.elementId + ' does not exist');\n                    }\n                }\n                if (options.element instanceof HTMLElement) {\n                    elem = options.element;\n                }\n                else {\n                    elem = createElement('div', options.attribs || {}, options.style || {}, options.parentContainer);\n                }\n                // Set bindedGUIElement event on GUIElement container.\n                guiElement.removeBindedEventFn = addEvent(elem, 'bindedGUIElement', function (e) {\n                    e.guiElement = guiElement;\n                    e.stopImmediatePropagation();\n                });\n                return elem;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and all properties.\n             */\n            destroy() {\n                const guiElement = this;\n                // Remove bindedGUIElement event.\n                if (guiElement.removeBindedEventFn) {\n                    guiElement.removeBindedEventFn();\n                }\n                // Remove HTML container.\n                if (guiElement.container && guiElement.container.parentNode) {\n                    guiElement.container.parentNode.removeChild(guiElement.container);\n                }\n                // Delete all properties.\n                objectEach(guiElement, function (val, key) {\n                    delete guiElement[key];\n                });\n            }\n            /**\n             * Return the GUIElement instance type.\n             * @return {GUIElement.GUIElementType|undefined}\n             * The GUIElement instance type\n             */\n            getType() {\n                return this.type;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const visibilityChanged = (this.isVisible && !setVisible ||\n                    !this.isVisible && setVisible);\n                if (this.container && visibilityChanged) {\n                    this.container.style.display = (setVisible ?\n                        (displayStyle || 'block') :\n                        'none');\n                    this.isVisible = setVisible;\n                }\n            }\n            hide() {\n                this.changeVisibility(false);\n            }\n            show() {\n                this.changeVisibility();\n            }\n        }\n\n        return GUIElement;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Cell.js', [_modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (Bindings, EditGlobals, Globals, GUIElement, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { componentFromJSON } = Bindings;\n        const { merge, fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @internal\n         **/\n        class Cell extends GUIElement {\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /** @internal */\n            static fromJSON(json, row) {\n                if (row) {\n                    const options = json.options;\n                    let id = options.containerId;\n                    if (row.layout.copyId) {\n                        id = id + '_' + row.layout.copyId;\n                    }\n                    return new Cell(row, {\n                        id: id,\n                        parentContainerId: (row.container && row.container.id) ||\n                            options.parentContainerId,\n                        mountedComponentJSON: options.mountedComponentJSON,\n                        style: options.style,\n                        layoutJSON: options.layoutJSON,\n                        width: options.width,\n                        height: options.height\n                    });\n                }\n                return void 0;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the Cell class.\n             *\n             * @param {Row} row\n             * Reference to the row instance.\n             *\n             * @param {Cell.Options} options\n             * Options for the cell.\n             *\n             * @param {HTMLElement} cellElement\n             * The container of the cell HTML element.\n             */\n            constructor(row, options, cellElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.cell;\n                this.id = options.id;\n                this.options = options;\n                this.row = row;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    row.container;\n                const layoutOptions = row.layout.options || {}, rowOptions = row.options || {}, cellClassName = layoutOptions.cellClassName || '';\n                let cellHeight;\n                if (options.height) {\n                    if (typeof options.height === 'number') {\n                        cellHeight = options.height + 'px';\n                    }\n                    else {\n                        cellHeight = options.height;\n                    }\n                }\n                this.container = this.getElementContainer({\n                    render: row.layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.cell + ' ' +\n                            cellClassName\n                    },\n                    element: cellElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, rowOptions.style, options.style, {\n                        height: cellHeight\n                    })\n                });\n                // Mount component from JSON.\n                if (this.options.mountedComponentJSON) {\n                    this.mountComponentFromJSON(this.options.mountedComponentJSON);\n                }\n                // Nested layout\n                if (this.options.layout) {\n                    this.setNestedLayout();\n                }\n                if (this.options.layoutJSON) {\n                    const layout = this.row.layout, board = layout.board, layoutFromJSON = layout.constructor.fromJSON;\n                    this.nestedLayout = layoutFromJSON(merge(this.options.layoutJSON, {\n                        parentContainerId: this.options.id\n                    }), board, this);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create a nested layout in the cell and assign it to the nestedCell\n             * property.\n             * @internal\n             */\n            setNestedLayout() {\n                const board = this.row.layout.board, Layout = this.row.layout.constructor;\n                const optionsGui = board.options.gui;\n                this.nestedLayout = new Layout(board, merge({}, optionsGui && optionsGui.layoutOptions, this.options.layout, {\n                    parentContainerId: this.options.id\n                }), this);\n            }\n            /**\n             * Mount component from JSON.\n             * @internal\n             *\n             * @param {Component.JSON} [json]\n             * Component JSON.\n             *\n             * @return {boolean}\n             * Returns true, if the component created from JSON is mounted,\n             * otherwise false.\n             */\n            mountComponentFromJSON(json) {\n                const cell = this;\n                if (cell.id !== json.options.parentElement) {\n                    json.options.parentElement = cell.id;\n                }\n                const component = componentFromJSON(json);\n                if (component) {\n                    cell.mountedComponent = component;\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and mounted component.\n             */\n            destroy() {\n                const cell = this;\n                const { row } = cell;\n                // Destroy mounted component.\n                cell.mountedComponent?.destroy();\n                // If layout exists in the cell - destroy it\n                cell.nestedLayout?.destroy();\n                row.unmountCell(cell);\n                const destroyRow = row.cells?.length === 0;\n                super.destroy();\n                if (destroyRow) {\n                    row.destroy();\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Cell.JSON}\n             * Class JSON of this Cell instance.\n             */\n            toJSON() {\n                const cell = this, rowContainerId = (cell.row.container || {}).id || '';\n                return {\n                    $class: 'Dashboards.Layout.Cell',\n                    options: {\n                        containerId: cell.container.id,\n                        parentContainerId: rowContainerId,\n                        width: cell.options.width,\n                        height: cell.options.height,\n                        mountedComponentJSON: cell.mountedComponent && cell.mountedComponent.toJSON(),\n                        style: cell.options.style,\n                        layoutJSON: cell.nestedLayout && cell.nestedLayout.toJSON()\n                    }\n                };\n            }\n            /**\n             * Get the cell's options.\n             * @returns\n             * The JSON of cell's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return this.options;\n            }\n            changeVisibility(setVisible = true) {\n                super.changeVisibility(setVisible);\n                const cell = this, row = cell.row;\n                // Change row visibility if needed.\n                if (!cell.row.getVisibleCells().length) {\n                    cell.row.hide();\n                }\n                else if (cell.isVisible && !row.isVisible) {\n                    cell.row.show();\n                }\n                setTimeout(() => {\n                    fireEvent(row, 'cellChange', { row, cell });\n                }, 0);\n            }\n            getParentCell(level) {\n                const cell = this;\n                let parentCell;\n                if (level <= cell.row.layout.level) {\n                    if (cell.row.layout.level === level) {\n                        return cell;\n                    }\n                    if (cell.row.layout.level - 1 >= 0) {\n                        parentCell = cell.row.layout.parentCell;\n                        if (parentCell) {\n                            return parentCell.getParentCell(level);\n                        }\n                    }\n                }\n            }\n            // Method to get array of overlapping levels.\n            getOverlappingLevels(align, // 'left', 'right', 'top', 'bottom'\n            levelMaxGap, // Max distance between levels\n            offset // Analyzed cell offset\n            ) {\n                const cell = this, parentCell = cell.row.layout.parentCell;\n                let levels = [cell.row.layout.level];\n                if (parentCell) {\n                    const cellOffset = offset || GUIElement.getOffsets(cell)[align];\n                    const parentCellOffset = GUIElement.getOffsets(parentCell)[align];\n                    if (Math.abs(cellOffset - parentCellOffset) < levelMaxGap) {\n                        levels = [\n                            ...levels,\n                            ...parentCell.getOverlappingLevels(align, levelMaxGap, parentCellOffset)\n                        ];\n                    }\n                }\n                return levels;\n            }\n            /**\n             * Set cell size.\n             *\n             * @param width\n             * % value or 'auto' or px\n             *\n             * @param height\n             * value in px\n             */\n            setSize(width, height) {\n                const cell = this, editMode = cell.row.layout.board.editMode;\n                if (cell.container) {\n                    if (width) {\n                        if (width === 'auto' &&\n                            cell.container.style.flex !== '1 1 0%') {\n                            cell.container.style.flex = '1 1 0%';\n                        }\n                        else {\n                            const cellWidth = cell.convertWidthToValue(width);\n                            if (cellWidth &&\n                                cell.container.style.flex !== '0 0 ' + cellWidth) {\n                                cell.container.style.flex = '0 0 ' + cellWidth;\n                            }\n                            cell.options.width = cellWidth;\n                        }\n                    }\n                    if (height) {\n                        cell.options.height = cell.container.style.height =\n                            height + 'px';\n                    }\n                    if (editMode) {\n                        editMode.hideContextPointer();\n                        if (editMode.cellToolbar &&\n                            editMode.cellToolbar.isVisible) {\n                            if (editMode.cellToolbar.cell === cell) {\n                                editMode.cellToolbar.showToolbar(cell);\n                            }\n                            else {\n                                editMode.cellToolbar.hide();\n                            }\n                        }\n                    }\n                    // Call cellResize board event.\n                    fireEvent(cell.row.layout.board, 'cellResize', { cell: cell });\n                    fireEvent(cell.row, 'cellChange', { cell: cell, row: cell.row });\n                }\n            }\n            setHighlight(remove) {\n                const cell = this, editMode = cell.row.layout.board.editMode;\n                if (cell.container && editMode) {\n                    const cnt = cell.container, isSet = cnt.classList.contains(EditGlobals.classNames.cellEditHighlight);\n                    if (!remove && !isSet) {\n                        cnt.classList.add(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.add(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = true;\n                    }\n                    else if (remove && isSet) {\n                        cnt.classList.remove(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.remove(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = false;\n                    }\n                }\n            }\n            setActiveState() {\n                // Reset other boxes\n                const cell = this;\n                cell.row.layout.board.mountedComponents.forEach((mountedComponent) => {\n                    if (mountedComponent.cell.container) {\n                        mountedComponent.cell.container.classList.remove(Globals.classNames.cellActive);\n                    }\n                });\n                // Apply class\n                if (cell.container) {\n                    cell.container.classList.add(Globals.classNames.cellActive);\n                }\n            }\n            /**\n             * Enables or disables the loading indicator in the cell.\n             *\n             * @internal\n             */\n            setLoadingState(enabled = true) {\n                this.container?.classList?.toggle(Globals.classNames.cellLoading, enabled);\n            }\n            convertWidthToValue(width) {\n                if (typeof width === 'number') {\n                    return width + 'px';\n                }\n                if (/px/.test(width)) {\n                    return width;\n                }\n                return GUIElement.getPercentageWidth(width) || '';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Cell;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Row.js', [_modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js']], function (Globals, Cell, GUIElement, U, EditGlobals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { pick, defined, merge, objectEach, fireEvent } = U;\n        /**\n         * @internal\n         **/\n        class Row extends GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /** @internal */\n            static fromJSON(json, layout) {\n                if (layout) {\n                    const options = json.options;\n                    let id = options.containerId || '';\n                    if (id && layout.copyId) {\n                        id = id + '_' + layout.copyId;\n                    }\n                    return new Row(layout, {\n                        id: id,\n                        parentContainerId: (layout.container && layout.container.id) ||\n                            options.parentContainerId,\n                        cellsJSON: options.cells,\n                        style: options.style\n                    });\n                }\n                return void 0;\n            }\n            static setContainerHeight(rowContainer, height) {\n                if (height) {\n                    rowContainer.style.height = height + 'px';\n                }\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Row class.\n             *\n             * @param {Layout} layout\n             * Reference to the layout instance.\n             *\n             * @param {Row.Options} options\n             * Options for the row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container of the row HTML element.\n             */\n            constructor(layout, options, rowElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.row;\n                this.layout = layout;\n                this.cells = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    layout.container;\n                const layoutOptions = (layout.options || {}), rowClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.row + ' ' +\n                            rowClassName\n                    },\n                    element: rowElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, options.style)\n                });\n                // Init rows from options.\n                if (this.options.cells) {\n                    this.setCells();\n                }\n                // Init rows from JSON.\n                if (options.cellsJSON && !this.cells.length) {\n                    this.setCellsFromJSON(options.cellsJSON);\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the row cells using cell options or cellClassName.\n             */\n            setCells() {\n                const row = this, cellClassName = (row.layout.options || {}).cellClassName || '', cellsElements = pick(row.options.cells, row.container && row.container.getElementsByClassName(cellClassName)) || [];\n                let cellElement, i, iEnd;\n                for (i = 0, iEnd = cellsElements.length; i < iEnd; ++i) {\n                    cellElement = cellsElements[i];\n                    row.addCell(row.layout.board.guiEnabled ? cellElement : { id: '' }, cellElement instanceof HTMLElement ? cellElement : void 0);\n                }\n            }\n            /** @internal */\n            setCellsFromJSON(json) {\n                const row = this, componentsToMount = [];\n                let cell, cellJSON;\n                // Set cells.\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    cellJSON = json[i];\n                    cell = Cell.fromJSON({\n                        $class: cellJSON.$class,\n                        options: {\n                            containerId: cellJSON.options.containerId,\n                            parentContainerId: cellJSON.options.parentContainerId,\n                            width: cellJSON.options.width,\n                            height: cellJSON.options.height,\n                            style: cellJSON.options.style,\n                            layoutJSON: cellJSON.options.layoutJSON,\n                            mountedComponentJSON: void 0 // Will be mounted later.\n                        }\n                    }, row);\n                    if (cell) {\n                        row.cells.push(cell);\n                        if (cellJSON.options.mountedComponentJSON) {\n                            componentsToMount.push({\n                                cell: cell,\n                                // eslint-disable-next-line\n                                mountedComponentJSON: cellJSON.options.mountedComponentJSON\n                            });\n                        }\n                    }\n                }\n                // Mount components.\n                for (let i = 0, iEnd = componentsToMount.length; i < iEnd; ++i) {\n                    componentsToMount[i].cell.mountComponentFromJSON(componentsToMount[i].mountedComponentJSON);\n                }\n            }\n            /**\n             * Add a new Cell instance to the row cells array.\n             *\n             * @param {Cell.Options} [options]\n             * Options for the row cell.\n             *\n             * @param {HTMLElement} [cellElement]\n             * The container for a new cell HTML element.\n             *\n             * @return {Cell}\n             * Returns the Cell object.\n             */\n            addCell(options, cellElement, index) {\n                const row = this, cell = new Cell(row, options, cellElement);\n                if (!defined(index)) {\n                    row.cells.push(cell);\n                }\n                else {\n                    row.mountCell(cell, index);\n                }\n                // Set editMode events.\n                if (row.layout.board.editMode) {\n                    row.layout.board.editMode.setCellEvents(cell);\n                }\n                return cell;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner cells.\n             */\n            destroy() {\n                const row = this;\n                const { layout } = row;\n                // Copy to avoid problem with index when shifting array of cells during\n                // the destroy.\n                const rowCells = [...row.cells];\n                // Destroy cells.\n                for (let i = 0, iEnd = rowCells?.length; i < iEnd; ++i) {\n                    if (rowCells[i]) {\n                        rowCells[i].destroy();\n                    }\n                }\n                if (row.layout) {\n                    row.layout.unmountRow(row);\n                    super.destroy();\n                    if (layout.rows?.length === 0) {\n                        layout.destroy();\n                    }\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Row.JSON}\n             * Class JSON of this Row instance.\n             */\n            toJSON() {\n                const row = this, layoutContainerId = (row.layout.container || {}).id || '', cells = [];\n                // Get cells JSON.\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    cells.push(row.cells[i].toJSON());\n                }\n                return {\n                    $class: 'Dashboards.Layout.Row',\n                    options: {\n                        containerId: row.container.id,\n                        parentContainerId: layoutContainerId,\n                        cells: cells,\n                        style: row.options.style\n                    }\n                };\n            }\n            /**\n             * Get the row's options.\n             * @returns\n             * The JSON of row's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const row = this, cells = [];\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    cells.push(row.cells[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    style: this.options.style,\n                    cells\n                };\n            }\n            setSize(height) {\n                Row.setContainerHeight(this.container, height);\n            }\n            // Get cell index from the row.cells array.\n            getCellIndex(cell) {\n                for (let i = 0, iEnd = this.cells?.length; i < iEnd; ++i) {\n                    if (this.cells[i].id === cell.id) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the row.cells array and move cell container.\n            mountCell(cell, index = 0) {\n                const row = this, nextCell = row.cells[index], prevCell = row.cells[index - 1];\n                if (cell.container) {\n                    if (nextCell && nextCell.container) {\n                        nextCell.container.parentNode.insertBefore(cell.container, nextCell.container);\n                    }\n                    else if (prevCell && prevCell.container) {\n                        prevCell.container.parentNode.insertBefore(cell.container, prevCell.container.nextSibling);\n                    }\n                    else if (!prevCell && !nextCell && row.container) {\n                        row.container.appendChild(cell.container);\n                    }\n                    row.cells.splice(index, 0, cell);\n                    cell.row = row;\n                    setTimeout(() => {\n                        fireEvent(row, 'cellChange', { row, cell });\n                    }, 0);\n                }\n            }\n            // Remove cell from the row.cells array.\n            unmountCell(cell) {\n                const cellIndex = this.getCellIndex(cell);\n                if (defined(cellIndex)) {\n                    this.cells.splice(cellIndex, 1);\n                }\n                setTimeout(() => {\n                    fireEvent(this, 'cellChange', { row: this, cell });\n                }, 0);\n            }\n            getVisibleCells() {\n                const cells = [];\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    if (this.cells[i].isVisible) {\n                        cells.push(this.cells[i]);\n                    }\n                }\n                return cells;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const row = this;\n                super.changeVisibility(setVisible, displayStyle);\n                // Change layout visibility if needed.\n                if (!row.layout.getVisibleRows().length) {\n                    row.layout.hide();\n                }\n                else if (row.isVisible && !row.layout.isVisible) {\n                    row.layout.show();\n                }\n            }\n            show() {\n                this.changeVisibility(true, 'flex');\n            }\n            setHighlight(remove) {\n                if (this.container) {\n                    const cnt = this.container, isSet = cnt.classList.contains(EditGlobals.classNames.rowContextHighlight);\n                    if (!remove && !isSet) {\n                        cnt.classList.add(EditGlobals.classNames.rowContextHighlight);\n                    }\n                    else if (remove && isSet) {\n                        cnt.classList.remove(EditGlobals.classNames.rowContextHighlight);\n                    }\n                }\n            }\n            // Row can have cells below each others.\n            // This method returns cells split into levels.\n            getRowLevels() {\n                const row = this, rowLevels = {}, rowLevelsArray = [];\n                let cell, cellOffsets;\n                for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                    cell = row.cells[k];\n                    if (cell.isVisible) {\n                        cellOffsets = GUIElement.getOffsets(cell);\n                        if (!rowLevels[cellOffsets.top]) {\n                            rowLevels[cellOffsets.top] = {\n                                top: cellOffsets.top,\n                                bottom: cellOffsets.bottom,\n                                cells: []\n                            };\n                        }\n                        if (rowLevels[cellOffsets.top].bottom < cellOffsets.bottom) {\n                            rowLevels[cellOffsets.top].bottom = cellOffsets.bottom;\n                        }\n                        rowLevels[cellOffsets.top].cells.push(cell);\n                    }\n                }\n                objectEach(rowLevels, (value) => {\n                    rowLevelsArray.push(value);\n                });\n                return rowLevelsArray;\n            }\n            // Get row level with additional info\n            // on a specific Y position.\n            getRowLevelInfo(posY) {\n                const rowLevels = this.getRowLevels();\n                let rowLevelInfo;\n                for (let i = 0, iEnd = rowLevels.length; i < iEnd; ++i) {\n                    if (rowLevels[i].top <= posY && rowLevels[i].bottom > posY) {\n                        rowLevelInfo = {\n                            index: i,\n                            rowLevels: rowLevels,\n                            rowLevel: rowLevels[i]\n                        };\n                    }\n                }\n                return rowLevelInfo;\n            }\n        }\n\n        return Row;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Layout.js', [_modules['Dashboards/Utilities.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Layout/Row.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Globals.js']], function (DU, U, Row, GUIElement, Globals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { uniqueKey } = DU;\n        const { pick, defined } = U;\n        /**\n         * @internal\n         **/\n        class Layout extends GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /** @internal */\n            static fromJSON(json, board, parentCell) {\n                const options = json.options, \n                // Check if layout container exists.\n                container = document.getElementById(json.options.containerId), layout = new Layout(board, {\n                    id: options.containerId,\n                    copyId: container ? uniqueKey() : '',\n                    parentContainerId: options.parentContainerId || board.container.id,\n                    rowsJSON: options.rows,\n                    style: options.style\n                }, parentCell);\n                // Save layout in the dashboard.\n                if (layout && !parentCell) {\n                    board.layouts.push(layout);\n                }\n                return layout;\n            }\n            /** @internal */\n            static importLocal(id, board) {\n                const layoutOptions = localStorage.getItem(Globals.classNamePrefix + id);\n                let layout;\n                if (layoutOptions) {\n                    layout = Layout.fromJSON(JSON.parse(layoutOptions), board);\n                }\n                return layout;\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Layout class.\n             *\n             * @param {Dashboard} board\n             * Reference to the dashboard instance.\n             *\n             * @param {Layout.Options} options\n             * Options for the layout.\n             */\n            constructor(board, options, parentCell) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.layout;\n                this.board = board;\n                this.rows = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = parentCell ? parentCell.container :\n                    document.getElementById(options.parentContainerId || '') || board.layoutsWrapper;\n                // Set layout level.\n                if (parentCell) {\n                    this.parentCell = parentCell;\n                    this.level = parentCell.row.layout.level + 1;\n                }\n                else {\n                    this.level = 0;\n                }\n                // GUI structure\n                if (options.copyId) {\n                    this.copyId = options.copyId;\n                }\n                const layoutOptions = (this.options || {}), layoutClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: (options.id || '') + (this.copyId ? '_' + this.copyId : ''),\n                        className: Globals.classNames.layout + ' ' +\n                            layoutClassName\n                    },\n                    elementId: options.id,\n                    style: this.options.style\n                });\n                // Init rows from options.\n                if (this.options.rows) {\n                    this.setRows();\n                }\n                // Init rows from JSON.\n                if (options.rowsJSON && !this.rows.length) {\n                    this.setRowsFromJSON(options.rowsJSON);\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the layout rows using rows options or rowClassName.\n             */\n            setRows() {\n                const layout = this, rowsElements = pick(layout.options.rows, layout.container && layout.container.getElementsByClassName(layout.options.rowClassName || '')) || [];\n                let rowElement, i, iEnd;\n                for (i = 0, iEnd = rowsElements.length; i < iEnd; ++i) {\n                    rowElement = rowsElements[i];\n                    layout.addRow(layout.board.guiEnabled ? rowElement : {}, rowElement instanceof HTMLElement ? rowElement : void 0);\n                }\n            }\n            /** @internal */\n            setRowsFromJSON(json) {\n                const layout = this;\n                let row;\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    row = Row.fromJSON(json[i], layout);\n                    if (row) {\n                        layout.rows.push(row);\n                    }\n                }\n            }\n            /**\n             * Add a new Row instance to the layout rows array.\n             *\n             * @param {Row.Options} options\n             * Options of a row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container for a new row HTML element.\n             *\n             * @return {Row}\n             * Returns the Row object.\n             */\n            addRow(options, rowElement, index) {\n                const layout = this, row = new Row(layout, options, rowElement);\n                if (!defined(index)) {\n                    layout.rows.push(row);\n                }\n                else {\n                    layout.mountRow(row, index);\n                }\n                // Set editMode events.\n                if (layout.board.editMode) {\n                    layout.board.editMode.setRowEvents(row);\n                }\n                return row;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner rows.\n             */\n            destroy() {\n                const layout = this;\n                for (let i = layout.board.layouts.length - 1; i >= 0; i--) {\n                    if (layout.board.layouts[i] === layout) {\n                        layout.board.layouts.splice(i, 1);\n                    }\n                }\n                if (layout.parentCell) {\n                    delete layout.parentCell.nestedLayout;\n                }\n                // Destroy rows.\n                for (let i = layout.rows.length - 1; i >= 0; i--) {\n                    layout.rows[i].destroy();\n                }\n                if (layout.parentCell) {\n                    layout.parentCell.destroy();\n                }\n                super.destroy();\n            }\n            /**\n             * Export layout's options and save in the local storage\n             * @internal\n             */\n            exportLocal() {\n                localStorage.setItem(Globals.classNamePrefix + this.options.id, JSON.stringify(this.toJSON()));\n            }\n            // Get row index from the layout.rows array.\n            getRowIndex(row) {\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i] === row) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the layout.rows array and move row container.\n            mountRow(row, index) {\n                const nextRow = this.rows[index], prevRow = this.rows[index - 1];\n                if (row.container) {\n                    if (nextRow && nextRow.container) {\n                        nextRow.container.parentNode.insertBefore(row.container, nextRow.container);\n                    }\n                    else if (prevRow && prevRow.container) {\n                        prevRow.container.parentNode.insertBefore(row.container, prevRow.container.nextSibling);\n                    }\n                    this.rows.splice(index, 0, row);\n                    row.layout = this;\n                }\n            }\n            // Remove row from the layout.rows array.\n            unmountRow(row) {\n                const rowIndex = this.getRowIndex(row);\n                if (defined(rowIndex)) {\n                    this.rows.splice(rowIndex, 1);\n                }\n            }\n            getVisibleRows() {\n                const rows = [];\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i].isVisible) {\n                        rows.push(this.rows[i]);\n                    }\n                }\n                return rows;\n            }\n            changeVisibility(setVisible = true) {\n                const layout = this;\n                super.changeVisibility(setVisible);\n                // Change parentCell visibility.\n                if (layout.parentCell) {\n                    if (layout.isVisible && !layout.parentCell.isVisible) {\n                        layout.parentCell.show();\n                    }\n                    else if (!layout.isVisible && layout.parentCell.isVisible) {\n                        layout.parentCell.hide();\n                    }\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Layout.JSON}\n             * Class JSON of this Layout instance.\n             */\n            toJSON() {\n                const layout = this, dashboardContainerId = (layout.board.container || {}).id || '', rows = [];\n                // Get rows JSON.\n                for (let i = 0, iEnd = layout.rows.length; i < iEnd; ++i) {\n                    rows.push(layout.rows[i].toJSON());\n                }\n                return {\n                    $class: 'Dashboards.Layout',\n                    options: {\n                        containerId: layout.container.id,\n                        parentContainerId: dashboardContainerId,\n                        rows: rows,\n                        style: layout.options.style\n                    }\n                };\n            }\n            /**\n             * Get the layout's options.\n             * @returns\n             * The JSON of layout's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const layout = this, rows = [];\n                // Get rows JSON.\n                for (let i = 0, iEnd = layout.rows.length; i < iEnd; ++i) {\n                    rows.push(layout.rows[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    layoutClassName: this.options.layoutClassName,\n                    rowClassName: this.options.rowClassName,\n                    cellClassName: this.options.cellClassName,\n                    style: this.options.style,\n                    rows\n                };\n            }\n        }\n\n        return Layout;\n    });\n    _registerModule(_modules, 'Dashboards/Board.js', [_modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Accessibility/DashboardsAccessibility.js'], _modules['Data/DataCursor.js'], _modules['Dashboards/SerializeHelper/DataCursorHelper.js'], _modules['Data/DataPool.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Dashboards/Serializable.js'], _modules['Dashboards/Components/HTMLComponent/HTMLComponent.js'], _modules['Core/Utilities.js']], function (Bindings, ComponentRegistry, DashboardsAccessibility, DataCursor, DataCursorHelper, DataPool, Globals, Layout, Serializable, HTMLComponent, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        const { merge, addEvent, error, objectEach, uniqueKey, createElement } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that represents a dashboard.\n         *\n         * @example\n         * const dashboard = Dashboards.board('container', {\n         *      gui: {\n         *          layouts: [{\n         *              id: 'layout-1',\n         *              rows: [{\n         *                  cells: [{\n         *                      id: 'dashboard-col-0'\n         *                  }]\n         *              }]\n         *          }]\n         *      },\n         *      components: [{\n         *          cell: 'dashboard-col-0',\n         *          type: 'Highcharts',\n         *          chartOptions: {\n         *              series: [{\n         *                  data: [1, 2, 3, 4]\n         *              }]\n         *          }\n         *      }]\n         * });\n         */\n        class Board {\n            // Implementation:\n            static board(renderTo, options, async) {\n                return new Board(renderTo, options).init(async);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a dashboard with components like charts, tables, and HTML\n             * elements.\n             *\n             * @internal\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             *\n             * @param options\n             * The options for the dashboard.\n             */\n            constructor(renderTo, options) {\n                /**\n                 * All types of components available in the dashboard.\n                 * @internal\n                 */\n                this.componentTypes = ComponentRegistry.types;\n                this.options = merge(Board.defaultOptions, options);\n                this.dataPool = new DataPool(options.dataPool);\n                this.id = uniqueKey();\n                this.guiEnabled = !options.gui ?\n                    false : this.options?.gui?.enabled;\n                this.editModeEnabled = !options.editMode ?\n                    false : this.options?.editMode?.enabled;\n                this.layouts = [];\n                this.mountedComponents = [];\n                this.initContainer(renderTo);\n                // Init edit mode.\n                if (this.guiEnabled) {\n                    this.initLayout();\n                }\n                // Add table cursors support.\n                this.dataCursor = new DataCursor();\n                this.index = Globals.boards.length;\n                Globals.boards.push(this);\n                // A11y module\n                this.a11y = new DashboardsAccessibility(this);\n            }\n            // Implementation:\n            init(async) {\n                const options = this.options;\n                let componentPromises = (options.components) ?\n                    this.setComponents(options.components) : [];\n                // Init events.\n                this.initEvents();\n                if (async) {\n                    return Promise.all(componentPromises).then(() => this);\n                }\n                return this;\n            }\n            /**\n             * Initializes the events.\n             * @internal\n             */\n            initEvents() {\n                const board = this, runReflow = () => {\n                    board.reflow();\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(runReflow);\n                    this.resizeObserver.observe(board.container);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', runReflow);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * Initialize the container for the dashboard.\n             * @internal\n             *\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             */\n            initContainer(renderTo) {\n                const board = this;\n                if (typeof renderTo === 'string') {\n                    renderTo = window.document.getElementById(renderTo);\n                }\n                // Display an error if the renderTo doesn't exist.\n                if (!renderTo) {\n                    error(13, true);\n                }\n                // Clear the container from any content.\n                if (this.guiEnabled) {\n                    renderTo.innerHTML = '';\n                    // Set the main wrapper container.\n                    board.boardWrapper = renderTo;\n                    // Add container for the board.\n                    board.container = createElement('div', {\n                        className: Globals.classNames.boardContainer\n                    }, {}, this.boardWrapper);\n                }\n                else {\n                    board.container = renderTo;\n                }\n            }\n            /**\n             * Inits creating a layouts and setup the EditMode tools.\n             * @internal\n             *\n             */\n            initLayout() {\n                const options = this.options;\n                if (!Dashboards.EditMode) {\n                    throw new Error('Missing layout.js module');\n                }\n                else {\n                    // Create layouts wrapper.\n                    this.layoutsWrapper = createElement('div', {\n                        className: Globals.classNames.layoutsWrapper\n                    }, {}, this.container);\n                    if (options.gui) {\n                        this.setLayouts(options.gui);\n                    }\n                    // Init layouts from JSON.\n                    if (options.layoutsJSON && !this.layouts.length) {\n                        this.setLayoutsFromJSON(options.layoutsJSON);\n                    }\n                    if (this.editModeEnabled) {\n                        this.editMode = new Dashboards.EditMode(this, this.options.editMode);\n                        // Add fullscreen support.\n                        this.fullscreen = new Dashboards.FullScreen(this);\n                    }\n                }\n            }\n            /**\n             * Creates a new layouts and adds it to the dashboard based on the options.\n             * @internal\n             *\n             * @param guiOptions\n             * The GUI options for the layout.\n             *\n             */\n            setLayouts(guiOptions) {\n                const board = this, layoutsOptions = guiOptions.layouts;\n                for (let i = 0, iEnd = layoutsOptions.length; i < iEnd; ++i) {\n                    board.layouts.push(new Layout(board, merge({}, guiOptions.layoutOptions, layoutsOptions[i])));\n                }\n            }\n            /**\n             * Set the layouts from JSON.\n             * @internal\n             *\n             * @param json\n             * An array of layout JSON objects.\n             *\n             */\n            setLayoutsFromJSON(json) {\n                const board = this;\n                let layout;\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    layout = Layout.fromJSON(json[i], board);\n                    if (layout) {\n                        board.layouts.push(layout);\n                    }\n                }\n            }\n            /**\n             * Set the components from options.\n             * @internal\n             *\n             * @param components\n             * An array of component options.\n             *\n             */\n            setComponents(components) {\n                const promises = [];\n                const board = this;\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    promises.push(Bindings.addComponent(components[i], board));\n                }\n                return promises;\n            }\n            /**\n             * Destroy the whole dashboard, its layouts and elements.\n             */\n            destroy() {\n                const board = this;\n                // Destroy layouts.\n                for (let i = 0, iEnd = board.layouts?.length; i < iEnd; ++i) {\n                    board.layouts[i].destroy();\n                }\n                // Remove resizeObserver from the board\n                this.resizeObserver?.unobserve(board.container);\n                // Destroy container.\n                board.container?.remove();\n                // @ToDo Destroy bindings.\n                // Delete all properties.\n                objectEach(board, function (val, key) {\n                    delete board[key];\n                });\n                Globals.boards[this.index] = void 0;\n                return;\n            }\n            /**\n             * Export layouts to the local storage.\n             */\n            exportLocal() {\n                localStorage.setItem(\n                // Dashboard.prefix + this.id,\n                Globals.classNamePrefix + '1', // Temporary for demo test\n                JSON.stringify(this.toJSON()));\n            }\n            /**\n             * Import the dashboard's layouts from the local storage.\n             *\n             * @param id\n             * The id of the layout to import.\n             *\n             * @returns Returns the imported layout.\n             */\n            importLayoutLocal(id) {\n                return Layout.importLocal(id, this);\n            }\n            /**\n             * Reflow the dashboard. Hide the toolbars and context pointer. Reflow the\n             * layouts and its cells.\n             */\n            reflow() {\n                const board = this;\n                if (board.editMode) {\n                    const editModeTools = board.editMode.tools;\n                    board.editMode.hideToolbars(['cell', 'row']);\n                    board.editMode.hideContextPointer();\n                    // Update expanded context menu container\n                    if (editModeTools.contextMenu) {\n                        editModeTools.contextMenu\n                            .updatePosition(editModeTools.contextButtonElement);\n                    }\n                }\n            }\n            /**\n             * Converts the given JSON to a class instance.\n             *\n             * @param json\n             * JSON to deserialize as a class instance or object.\n             *\n             * @returns Returns the class instance or object.\n             */\n            fromJSON(json) {\n                const options = json.options, board = new Board(options.containerId, {\n                    componentOptions: options.componentOptions,\n                    dataPool: options.dataPool,\n                    layoutsJSON: options.layouts\n                });\n                board.dataCursor = DataCursorHelper.fromJSON(json.dataCursor);\n                return board;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns Class JSON of this Dashboard instance.\n             */\n            toJSON() {\n                const board = this, layouts = [];\n                // Get layouts JSON.\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    layouts.push(board.layouts[i].toJSON());\n                }\n                return {\n                    $class: 'Board',\n                    dataCursor: DataCursorHelper.toJSON(board.dataCursor),\n                    options: {\n                        containerId: board.container.id,\n                        dataPool: board.options.dataPool,\n                        guiEnabled: board.guiEnabled,\n                        layouts: layouts,\n                        componentOptions: board.options.componentOptions\n                    }\n                };\n            }\n            /**\n             * Convert the current state of board's options into JSON. The function does\n             * not support converting functions or events into JSON object.\n             *\n             * @returns\n             * The JSON of boards's options.\n             */\n            getOptions() {\n                const board = this, layouts = [], components = [];\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    layouts.push(board.layouts[i].getOptions());\n                }\n                for (let i = 0, iEnd = board.mountedComponents.length; i < iEnd; ++i) {\n                    if (board.mountedComponents[i].cell &&\n                        board.mountedComponents[i].cell.mountedComponent) {\n                        components.push(board.mountedComponents[i].component.getOptions());\n                    }\n                }\n                return {\n                    ...this.options,\n                    gui: {\n                        layouts\n                    },\n                    components: components\n                };\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (Board) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Global dashboard settings.\n             * @internal\n             *\n             */\n            Board.defaultOptions = {\n                gui: {\n                    enabled: true,\n                    layoutOptions: {\n                        rowClassName: void 0,\n                        cellClassName: void 0\n                    },\n                    layouts: []\n                },\n                components: []\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Import layouts from the local storage.\n             *\n             * @returns Returns the Dashboard instance or undefined.\n             */\n            function importLocal() {\n                const dashboardJSON = localStorage.getItem(\n                // Dashboard.prefix + this.id,\n                Globals.classNamePrefix + '1' // Temporary for demo test\n                );\n                if (dashboardJSON) {\n                    try {\n                        return Serializable\n                            .fromJSON(JSON.parse(dashboardJSON));\n                    }\n                    catch (e) {\n                        // Nothing to do\n                    }\n                }\n            }\n            Board.importLocal = importLocal;\n        })(Board || (Board = {}));\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        Serializable.registerClassPrototype('Board', Board.prototype);\n        ComponentRegistry.registerComponent('HTML', HTMLComponent);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Board;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncHandlers.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* eslint-disable require-jsdoc, max-len */\n        const { addEvent, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const configs = {\n            emitters: {\n                highlightEmitter: function () {\n                    if (this.type !== 'DataGrid') {\n                        return;\n                    }\n                    const { dataGrid, board } = this;\n                    const highlightOptions = this.sync.syncConfig.highlight;\n                    if (!board || !dataGrid || !highlightOptions.enabled) {\n                        return;\n                    }\n                    const { dataCursor: cursor } = board;\n                    const onDataGridHover = (e) => {\n                        const table = this.connector && this.connector.table;\n                        if (table) {\n                            const row = e.row;\n                            const cell = row.querySelector(`.highcharts-datagrid-cell[data-original-data=\"${row.dataset.rowXIndex}\"]`);\n                            cursor.emitCursor(table, {\n                                type: 'position',\n                                row: parseInt(row.dataset.rowIndex, 10),\n                                column: cell ? cell.dataset.columnName : void 0,\n                                state: 'dataGrid.hoverRow'\n                            });\n                        }\n                    };\n                    const onDataGridMouseOut = () => {\n                        const table = this.connector && this.connector.table;\n                        if (table) {\n                            cursor.emitCursor(table, {\n                                type: 'position',\n                                state: 'dataGrid.hoverOut'\n                            });\n                        }\n                    };\n                    addEvent(dataGrid.container, 'dataGridHover', onDataGridHover);\n                    addEvent(dataGrid.container, 'mouseout', onDataGridMouseOut);\n                    // Return a function that calls the callbacks\n                    return function () {\n                        removeEvent(dataGrid.container, 'dataGridHover', onDataGridHover);\n                        removeEvent(dataGrid.container, 'mouseout', onDataGridMouseOut);\n                    };\n                }\n            },\n            handlers: {\n                highlightHandler: function () {\n                    const { board } = this;\n                    const highlightOptions = this.sync.syncConfig.highlight;\n                    if (!highlightOptions.enabled) {\n                        return;\n                    }\n                    const handleCursor = (e) => {\n                        const cursor = e.cursor;\n                        if (cursor.type === 'position') {\n                            const { row } = cursor;\n                            const { dataGrid } = this;\n                            if (row !== void 0 && dataGrid) {\n                                const highlightedDataRow = dataGrid.container\n                                    .querySelector(`.highcharts-datagrid-row[data-row-index=\"${row}\"]`);\n                                if (highlightedDataRow) {\n                                    dataGrid.toggleRowHighlight(highlightedDataRow);\n                                    dataGrid.hoveredRow = highlightedDataRow;\n                                }\n                            }\n                        }\n                    };\n                    const handleCursorOut = () => {\n                        const { dataGrid } = this;\n                        if (dataGrid) {\n                            dataGrid.toggleRowHighlight(void 0);\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor: cursor } = board;\n                        if (!cursor) {\n                            return;\n                        }\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.addListener(table.id, 'point.mouseOver', handleCursor);\n                        cursor.addListener(table.id, 'point.mouseOut', handleCursorOut);\n                    };\n                    const unregisterCursorListeners = () => {\n                        const cursor = board.dataCursor;\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.removeListener(table.id, 'point.mouseOver', handleCursor);\n                        cursor.removeListener(table.id, 'point.mouseOut', handleCursorOut);\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        return unregisterCursorListeners;\n                    }\n                },\n                extremesHandler: function () {\n                    const { board } = this;\n                    const handleChangeExtremes = (e) => {\n                        const cursor = e.cursor;\n                        if (cursor.type === 'position' &&\n                            this.dataGrid &&\n                            typeof cursor?.row === 'number') {\n                            const { row } = cursor;\n                            this.dataGrid.scrollToRow(row);\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor: cursor } = board;\n                        if (!cursor) {\n                            return;\n                        }\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.addListener(table.id, 'xAxis.extremes.min', handleChangeExtremes);\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        const { dataCursor: cursor } = board;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.removeListener(table.id, 'xAxis.extremes.min', handleChangeExtremes);\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        return unregisterCursorListeners;\n                    }\n                },\n                visibilityHandler: function () {\n                    const component = this, { board } = component;\n                    const handleVisibilityChange = (e) => {\n                        const cursor = e.cursor, dataGrid = component.dataGrid;\n                        if (!(dataGrid && cursor.type === 'position' && cursor.column)) {\n                            return;\n                        }\n                        const columnName = cursor.column;\n                        dataGrid.update({\n                            columns: {\n                                [columnName]: {\n                                    show: cursor.state !== 'series.hide'\n                                }\n                            }\n                        });\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor: cursor } = board;\n                        if (!cursor) {\n                            return;\n                        }\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.addListener(table.id, 'series.show', handleVisibilityChange);\n                        cursor.addListener(table.id, 'series.hide', handleVisibilityChange);\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        const { dataCursor: cursor } = board;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.removeListener(table.id, 'series.show', handleVisibilityChange);\n                        cursor.removeListener(table.id, 'series.hide', handleVisibilityChange);\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        return unregisterCursorListeners;\n                    }\n                }\n            }\n        };\n        const defaults = {\n            highlight: { emitter: configs.emitters.highlightEmitter, handler: configs.handlers.highlightHandler },\n            extremes: { handler: configs.handlers.extremesHandler },\n            visibility: { handler: configs.handlers.visibilityHandler }\n        };\n\n        return defaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridComponentDefaults.js', [_modules['Data/Converters/DataConverter.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncHandlers.js'], _modules['Core/Utilities.js']], function (DataConverter, DataGridSyncHandlers, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { uniqueKey } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const DataGridComponentDefaults = {\n            dataGridClassName: 'dataGrid-container',\n            dataGridID: 'dataGrid-' + uniqueKey(),\n            dataGridOptions: {},\n            editableOptions: [{\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                }],\n            syncHandlers: DataGridSyncHandlers,\n            onUpdate: (e, connector) => {\n                const inputElement = e.target;\n                if (inputElement) {\n                    const parentRow = inputElement\n                        .closest('.highcharts-datagrid-row');\n                    const cell = inputElement.closest('.highcharts-datagrid-cell');\n                    const converter = new DataConverter();\n                    if (parentRow &&\n                        parentRow instanceof HTMLElement &&\n                        cell &&\n                        cell instanceof HTMLElement) {\n                        const dataTableRowIndex = parentRow\n                            .dataset.rowIndex;\n                        const { columnName } = cell.dataset;\n                        if (dataTableRowIndex !== void 0 &&\n                            columnName !== void 0) {\n                            const table = connector.table;\n                            if (table) {\n                                let valueToSet = converter\n                                    .asGuessedType(inputElement.value);\n                                if (valueToSet instanceof Date) {\n                                    valueToSet = valueToSet.toString();\n                                }\n                                table.setCell(columnName, parseInt(dataTableRowIndex, 10), valueToSet);\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncHandlers.js'], _modules['Dashboards/Components/DataGridComponent/DataGridComponentDefaults.js'], _modules['Core/Utilities.js']], function (Component, DataGridSyncHandlers, DataGridComponentDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { diffObjects, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * DataGrid component for Highcharts Dashboards.\n         * @private\n         */\n        class DataGridComponent extends Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /** @private */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const dataGridOptions = JSON.parse(json.options.dataGridOptions || '');\n                const component = new DataGridComponent(cell, merge(options, {\n                    dataGridOptions,\n                    syncHandlers: DataGridComponent.syncHandlers\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options, board) {\n                options = merge(DataGridComponent.defaultOptions, options);\n                super(cell, options, board);\n                this.connectorListeners = [];\n                this.options = options;\n                this.type = 'DataGrid';\n                if (this.options.dataGridClassName) {\n                    this.contentElement.classList.add(this.options.dataGridClassName);\n                }\n                if (this.options.dataGridID) {\n                    this.contentElement.id = this.options.dataGridID;\n                }\n                this.sync = new DataGridComponent.Sync(this, this.syncHandlers);\n                this.dataGridOptions = (this.options.dataGridOptions ||\n                    {});\n                this.innerResizeTimeouts = [];\n                this.on('afterSetConnector', (e) => {\n                    this.disableEditingModifiedColumns(e.connector);\n                });\n            }\n            onTableChanged() {\n                if (this.dataGrid && !this.dataGrid?.cellInputEl) {\n                    this.dataGrid.update({ dataTable: this.filterColumns() });\n                }\n            }\n            /**\n             * Disable editing of the columns that are modified by the data modifier.\n             * @internal\n             *\n             * @param connector\n             * Attached connector\n             */\n            disableEditingModifiedColumns(connector) {\n                const options = this.getColumnOptions(connector);\n                this.dataGrid?.update({ columns: options });\n            }\n            /**\n             * Get the column options for the data grid.\n             * @internal\n             */\n            getColumnOptions(connector) {\n                const modifierOptions = connector.options.dataModifier;\n                if (!modifierOptions || modifierOptions.type !== 'Math') {\n                    return {};\n                }\n                const modifierColumns = modifierOptions.columnFormulas;\n                if (!modifierColumns) {\n                    return {};\n                }\n                const options = {};\n                for (let i = 0, iEnd = modifierColumns.length; i < iEnd; ++i) {\n                    const columnName = modifierColumns[i].column;\n                    options[columnName] = {\n                        editable: false\n                    };\n                }\n                return options;\n            }\n            /* *\n             *\n             *  Class methods\n             *\n             * */\n            /**\n             * Triggered on component initialization.\n             * @private\n             */\n            async load() {\n                this.emit({ type: 'load' });\n                await super.load();\n                if (this.connector &&\n                    !this.connectorListeners.length) {\n                    const connectorListeners = this.connectorListeners;\n                    // Reload the store when polling.\n                    connectorListeners.push(this.connector\n                        .on('afterLoad', (e) => {\n                        if (e.table && this.connector) {\n                            this.connector.table.setColumns(e.table.getColumns());\n                        }\n                    }));\n                    // Update the DataGrid when connector changed.\n                    connectorListeners.push(this.connector.table\n                        .on('afterSetCell', (e) => {\n                        const dataGrid = this.dataGrid;\n                        let shouldUpdateTheGrid = true;\n                        if (dataGrid) {\n                            const row = dataGrid.rowElements[e.rowIndex];\n                            let cells = [];\n                            if (row) {\n                                cells = Array.prototype.slice.call(row.childNodes);\n                            }\n                            cells.forEach((cell) => {\n                                if (cell.childElementCount > 0) {\n                                    const input = cell.childNodes[0], convertedInputValue = typeof e.cellValue === 'string' ?\n                                        input.value :\n                                        +input.value;\n                                    if (cell.dataset.columnName === e.columnName &&\n                                        convertedInputValue === e.cellValue) {\n                                        shouldUpdateTheGrid = false;\n                                    }\n                                }\n                            });\n                        }\n                        shouldUpdateTheGrid ? this.update({}) : void 0;\n                    }));\n                }\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            /** @private */\n            render() {\n                super.render();\n                if (!this.dataGrid) {\n                    this.dataGrid = this.constructDataGrid();\n                }\n                if (this.connector &&\n                    this.dataGrid &&\n                    this.dataGrid.dataTable.modified !== this.connector.table.modified) {\n                    this.dataGrid.update({ dataTable: this.filterColumns() });\n                }\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                this.setupConnectorUpdate();\n                return this;\n            }\n            /** @private */\n            resize(width, height) {\n                if (this.dataGrid) {\n                    super.resize(width, height);\n                }\n            }\n            async update(options) {\n                if (options.connector?.id !== this.connectorId) {\n                    const connectorListeners = this.connectorListeners;\n                    for (let i = 0, iEnd = connectorListeners.length; i < iEnd; ++i) {\n                        connectorListeners[i]();\n                    }\n                    connectorListeners.length = 0;\n                }\n                await super.update(options);\n                if (this.dataGrid) {\n                    this.filterAndAssignSyncOptions(DataGridSyncHandlers);\n                    this.dataGrid.update(this.options.dataGridOptions || {});\n                }\n                this.emit({ type: 'afterUpdate' });\n            }\n            /** @private */\n            constructDataGrid() {\n                if (DataGridComponent.DataGridNamespace) {\n                    const DataGrid = DataGridComponent.DataGridNamespace.DataGrid;\n                    const columnOptions = this.connector ?\n                        this.getColumnOptions(this.connector) :\n                        {};\n                    this.dataGrid = new DataGrid(this.contentElement, {\n                        ...this.options.dataGridOptions,\n                        dataTable: this.options.dataGridOptions?.dataTable ||\n                            this.filterColumns(),\n                        columns: merge(columnOptions, this.options.dataGridOptions?.columns)\n                    });\n                    return this.dataGrid;\n                }\n                throw new Error('DataGrid not connected.');\n            }\n            setupConnectorUpdate() {\n                const { connector, dataGrid } = this;\n                if (connector && dataGrid) {\n                    dataGrid.on('cellClick', (e) => {\n                        if ('input' in e) {\n                            e.input.addEventListener('keyup', (keyEvent) => this.options.onUpdate(keyEvent, connector));\n                        }\n                    });\n                }\n            }\n            /**\n             * Based on the `visibleColumns` option, filter the columns of the table.\n             *\n             * @internal\n             */\n            filterColumns() {\n                const table = this.connector?.table.modified, visibleColumns = this.options.visibleColumns;\n                if (table) {\n                    // Show all columns if no visibleColumns is provided.\n                    if (!visibleColumns?.length) {\n                        return table;\n                    }\n                    const columnsToDelete = table\n                        .getColumnNames()\n                        .filter((columnName) => (visibleColumns?.length > 0 &&\n                        // Don't add columns that are not listed.\n                        !visibleColumns.includes(columnName)\n                    // Else show the other columns.\n                    ));\n                    // On a fresh table clone remove the columns that are not mapped.\n                    const filteredTable = table.clone();\n                    filteredTable.deleteColumns(columnsToDelete);\n                    return filteredTable;\n                }\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'DataGrid'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /** @private */\n            toJSON() {\n                const dataGridOptions = JSON.stringify(this.options.dataGridOptions);\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    options: {\n                        ...base.options,\n                        dataGridOptions\n                    }\n                };\n                this.emit({ type: 'toJSON', json });\n                return json;\n            }\n            /**\n             * Get the DataGrid component's options.\n             * @returns\n             * The JSON of DataGrid component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, DataGridComponent.defaultOptions),\n                    type: 'DataGrid'\n                };\n            }\n            /**\n             * Destroys the data grid component.\n             */\n            destroy() {\n                this.dataGrid?.containerResizeObserver.disconnect();\n                super.destroy();\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /** @private */\n        DataGridComponent.syncHandlers = DataGridSyncHandlers;\n        /** @private */\n        DataGridComponent.defaultOptions = merge(Component.defaultOptions, DataGridComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/DataGridPlugin.js', [_modules['Dashboards/Components/DataGridComponent/DataGridComponent.js']], function (DataGridComponent) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects DataGrid with the Dashboard plugin.\n         *\n         * @param {Dashboards.DataGrid} dataGrid DataGrid core to connect.\n         */\n        function connectDataGrid(DataGridNS) {\n            DataGridComponent.DataGridNamespace = DataGridNS;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('DataGrid', DataGridComponent);\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e Plugin context provided by the Dashboard.\n         */\n        function onUnregister(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        e) { }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGridCustom = {\n            connectDataGrid\n        };\n        const DataGridPlugin = {\n            custom: DataGridCustom,\n            name: 'DataGrid.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return DataGridPlugin;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncHandlers.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* eslint-disable require-jsdoc, max-len */\n        const { addEvent, isString } = U;\n        /**\n         * Utility function that returns the first row index\n         * if the table has been modified by a range modifier\n         *\n         * @param {DataTable} table\n         * The table to get the offset from.\n             *\n         * @param {RangeModifierOptions} modifierOptions\n         * The modifier options to use\n         *\n         * @return {number}\n         * The row offset of the modified table.\n         */\n        function getModifiedTableOffset(table, modifierOptions) {\n            const { ranges } = modifierOptions;\n            if (ranges) {\n                const minRange = ranges.reduce((minRange, currentRange) => {\n                    if (currentRange.minValue > minRange.minValue) {\n                        minRange = currentRange;\n                    }\n                    return minRange;\n                }, ranges[0]);\n                const tableRowIndex = table.getRowIndexBy(minRange.column, minRange.minValue);\n                if (tableRowIndex) {\n                    return tableRowIndex;\n                }\n            }\n            return 0;\n        }\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const configs = {\n            emitters: {\n                highlightEmitter: function () {\n                    if (this.type !== 'Highcharts') {\n                        return;\n                    }\n                    const { chart, board } = this;\n                    const highlightOptions = this.sync.syncConfig.highlight;\n                    if (!highlightOptions.enabled) {\n                        return;\n                    }\n                    const { dataCursor: cursor } = board;\n                    const table = this.connector && this.connector.table;\n                    if (chart?.series && table) {\n                        chart.series.forEach((series) => {\n                            series.update({\n                                point: {\n                                    events: {\n                                        // Emit table cursor\n                                        mouseOver: function () {\n                                            let offset = 0;\n                                            const modifier = table.getModifier();\n                                            if (modifier?.options.type === 'Range') {\n                                                offset = getModifiedTableOffset(table, modifier.options);\n                                            }\n                                            cursor.emitCursor(table, {\n                                                type: 'position',\n                                                row: offset + this.index,\n                                                column: series.name,\n                                                state: 'point.mouseOver'\n                                            });\n                                        },\n                                        mouseOut: function () {\n                                            let offset = 0;\n                                            const modifier = table.getModifier();\n                                            if (modifier?.options.type === 'Range') {\n                                                offset = getModifiedTableOffset(table, modifier.options);\n                                            }\n                                            cursor.emitCursor(table, {\n                                                type: 'position',\n                                                row: offset + this.index,\n                                                column: series.name,\n                                                state: 'point.mouseOut'\n                                            });\n                                        }\n                                    }\n                                }\n                            }, false);\n                            chart.redraw();\n                        });\n                    }\n                    // Return function that handles cleanup\n                    return function () {\n                        if (chart && chart.series) {\n                            chart.series.forEach((series) => {\n                                series.update({\n                                    point: {\n                                        events: {\n                                            mouseOver: void 0,\n                                            mouseOut: void 0\n                                        }\n                                    }\n                                }, false);\n                            });\n                            chart.redraw();\n                        }\n                    };\n                },\n                seriesVisibilityEmitter: function () {\n                    if (this.type !== 'Highcharts') {\n                        return;\n                    }\n                    const component = this;\n                    const { chart, connector, board } = component;\n                    if (!board || !chart) {\n                        return;\n                    }\n                    const table = connector?.table;\n                    if (table) { // Has a connector\n                        const { dataCursor: cursor } = board;\n                        const { series } = chart;\n                        series.forEach((series) => {\n                            series.update({\n                                events: {\n                                    show: function () {\n                                        cursor.emitCursor(table, {\n                                            type: 'position',\n                                            state: 'series.show',\n                                            column: this.name\n                                        });\n                                    },\n                                    hide: function () {\n                                        cursor.emitCursor(table, {\n                                            type: 'position',\n                                            state: 'series.hide',\n                                            column: this.name\n                                        });\n                                    }\n                                }\n                            }, false);\n                        });\n                        chart.redraw();\n                    }\n                    return function () {\n                        if (!chart || !chart.series?.length) {\n                            return;\n                        }\n                        chart.series.forEach((series) => {\n                            series.update({\n                                events: {\n                                    show: void 0,\n                                    hide: void 0\n                                }\n                            }, false);\n                        });\n                        chart.redraw();\n                    };\n                },\n                extremesEmitter: function () {\n                    if (this.type === 'Highcharts') {\n                        const component = this;\n                        const cleanupCallbacks = [];\n                        const { chart, connector, board } = component;\n                        const table = connector && connector.table;\n                        const { dataCursor: cursor } = board;\n                        if (table && chart) {\n                            const extremesEventHandler = (e) => {\n                                const reset = !!e.resetSelection;\n                                if ((!e.trigger || (e.trigger && e.trigger !== 'dashboards-sync')) && !reset) {\n                                    // TODO: investigate this type?\n                                    const axis = e.target;\n                                    // Prefer a series that's in a related table,\n                                    // but allow for other data\n                                    const series = component.seriesFromConnector.length > 0 ?\n                                        chart.get(component.seriesFromConnector[0]) :\n                                        axis.series[0];\n                                    if (series) {\n                                        // Get the indexes of the first and last drawn points\n                                        const visiblePoints = series.points\n                                            .filter((point) => point.isInside || false);\n                                        const minCursorData = {\n                                            type: 'position',\n                                            state: `${axis.coll}.extremes.min`\n                                        };\n                                        const maxCursorData = {\n                                            type: 'position',\n                                            state: `${axis.coll}.extremes.max`\n                                        };\n                                        if (component.seriesFromConnector.length > 0 &&\n                                            axis.coll === 'xAxis' &&\n                                            visiblePoints.length) {\n                                            let columnName;\n                                            const columnAssignment = component.options.connector?.columnAssignment;\n                                            if (columnAssignment) {\n                                                const assignment = columnAssignment.find((assignment) => assignment.seriesId === series.options.id);\n                                                if (assignment) {\n                                                    const data = assignment.data;\n                                                    if (isString(data)) {\n                                                        columnName = data;\n                                                    }\n                                                    else if (Array.isArray(data)) {\n                                                        columnName = data[data.length - 1];\n                                                    }\n                                                    else {\n                                                        columnName = data.y;\n                                                    }\n                                                }\n                                            }\n                                            if (!columnName) {\n                                                columnName = axis.dateTime && table.hasColumns(['x']) ?\n                                                    'x' :\n                                                    series.options.id ?? series.name;\n                                            }\n                                            minCursorData.row = visiblePoints[0].index;\n                                            minCursorData.column = columnName;\n                                            maxCursorData.row = visiblePoints[visiblePoints.length - 1].index;\n                                            maxCursorData.column = columnName;\n                                        }\n                                        // Emit as lasting cursors\n                                        cursor.emitCursor(table, minCursorData, e, true).emitCursor(table, maxCursorData, e, true);\n                                    }\n                                }\n                            };\n                            const addExtremesEvent = () => chart.axes.map((axis) => addEvent(axis, 'afterSetExtremes', extremesEventHandler));\n                            let addExtremesEventCallbacks = addExtremesEvent();\n                            const resetExtremesEvent = () => {\n                                addExtremesEventCallbacks.forEach((callback) => {\n                                    callback();\n                                });\n                                addExtremesEventCallbacks = [];\n                            };\n                            const handleChartResetSelection = (e) => {\n                                if (e.resetSelection) {\n                                    resetExtremesEvent();\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        state: 'chart.zoomOut'\n                                    }, e);\n                                    addExtremesEventCallbacks.push(...addExtremesEvent());\n                                }\n                            };\n                            cleanupCallbacks.push(addEvent(chart, 'selection', handleChartResetSelection));\n                            cleanupCallbacks.push(() => {\n                                cursor.remitCursor(table.id, {\n                                    type: 'position',\n                                    state: 'xAxis.extremes.min'\n                                });\n                                cursor.remitCursor(table.id, {\n                                    type: 'position',\n                                    state: 'xAxis.extremes.max'\n                                });\n                                resetExtremesEvent();\n                            });\n                        }\n                        // Return cleanup\n                        return function () {\n                            // Call back the cleanup callbacks\n                            cleanupCallbacks.forEach((callback) => {\n                                callback();\n                            });\n                        };\n                    }\n                }\n            },\n            handlers: {\n                seriesVisibilityHandler: function () {\n                    const component = this;\n                    const { board } = this;\n                    const findSeries = (seriesArray, name) => {\n                        for (const series of seriesArray) {\n                            if (series.name === name) {\n                                return series;\n                            }\n                        }\n                    };\n                    const handleShow = (e) => {\n                        const chart = component.chart;\n                        if (!chart || !chart.series?.length) {\n                            return;\n                        }\n                        if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                            const series = findSeries(chart.series, e.cursor.column);\n                            if (series) {\n                                series.setVisible(true, true);\n                            }\n                        }\n                    };\n                    const handleHide = (e) => {\n                        const chart = component.chart;\n                        if (!chart || !chart.series?.length) {\n                            return;\n                        }\n                        if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                            const series = findSeries(chart.series, e.cursor.column);\n                            if (series) {\n                                series.setVisible(false, true);\n                            }\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor } = board;\n                        if (!dataCursor) {\n                            return;\n                        }\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        dataCursor.addListener(table.id, 'series.show', handleShow);\n                        dataCursor.addListener(table.id, 'series.hide', handleHide);\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        if (table) {\n                            board.dataCursor.removeListener(table.id, 'series.show', handleShow);\n                            board.dataCursor.removeListener(table.id, 'series.hide', handleHide);\n                        }\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        return unregisterCursorListeners;\n                    }\n                },\n                highlightHandler: function () {\n                    const { chart, board } = this;\n                    const getHoveredPoint = (e) => {\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        let offset = 0;\n                        const modifier = table.getModifier();\n                        if (modifier && modifier.options.type === 'Range') {\n                            offset = getModifiedTableOffset(table, modifier.options);\n                        }\n                        if (chart && chart.series?.length) {\n                            const cursor = e.cursor;\n                            if (cursor.type === 'position') {\n                                let [series] = chart.series;\n                                // #20133 - Highcharts dashboards don't sync\n                                // tooltips when charts have multiple series\n                                if (chart.series.length > 1 && cursor.column) {\n                                    const relatedSeries = chart.series.filter((series) => (series.name === cursor.column));\n                                    if (relatedSeries.length > 0) {\n                                        [series] = relatedSeries;\n                                    }\n                                }\n                                if (series?.visible && cursor.row !== void 0) {\n                                    const point = series.data[cursor.row - offset];\n                                    if (point?.graphic) {\n                                        return point;\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    const handleCursor = (e) => {\n                        const highlightOptions = this.sync.syncConfig.highlight;\n                        if (!highlightOptions.enabled) {\n                            return;\n                        }\n                        const point = getHoveredPoint(e);\n                        if (!point || !chart ||\n                            // Non-cartesian points do not use 'isInside'\n                            (!point.isInside && point.series.isCartesian) ||\n                            // Abort if the affected chart is the same as the one\n                            // that is currently affected manually.\n                            point === chart.hoverPoint) {\n                            return;\n                        }\n                        const tooltip = chart.tooltip;\n                        if (tooltip && highlightOptions.showTooltip) {\n                            const useSharedTooltip = tooltip.shared;\n                            const hoverPoint = chart.hoverPoint;\n                            const hoverSeries = hoverPoint?.series ||\n                                chart.hoverSeries;\n                            const points = chart.pointer?.getHoverData(point, hoverSeries, chart.series, true, true);\n                            if (chart.tooltip && points) {\n                                tooltip.refresh(useSharedTooltip ? points.hoverPoints : point);\n                            }\n                        }\n                        if (highlightOptions.highlightPoint && (\n                        // If the tooltip is shared, the hover state is\n                        // already set on the point.\n                        (!tooltip?.shared && highlightOptions.showTooltip) ||\n                            !highlightOptions.showTooltip)) {\n                            point.setState('hover');\n                        }\n                        if (highlightOptions.showCrosshair) {\n                            point.series.xAxis?.drawCrosshair(void 0, point);\n                            point.series.yAxis?.drawCrosshair(void 0, point);\n                        }\n                    };\n                    const handleCursorOut = (e) => {\n                        const highlightOptions = this.sync.syncConfig.highlight;\n                        if (!chart || !chart.series.length ||\n                            !highlightOptions.enabled) {\n                            return;\n                        }\n                        const point = getHoveredPoint(e);\n                        // Abort if the affected chart is the same as the one\n                        // that is currently affected manually.\n                        if (point && (!point.isInside && point.series.isCartesian ||\n                            point === chart.hoverPoint)) {\n                            return;\n                        }\n                        let unhovered = false;\n                        const unhoverAllPoints = () => {\n                            // If the 'row' parameter is missing in the event\n                            // object, the unhovered point cannot be identified.\n                            const series = chart.series;\n                            const seriesLength = series.length;\n                            for (let i = 0; i < seriesLength; i++) {\n                                const points = chart.series[i].points;\n                                const pointsLength = points.length;\n                                for (let j = 0; j < pointsLength; j++) {\n                                    points[j].setState();\n                                }\n                            }\n                        };\n                        const tooltip = chart.tooltip;\n                        if (tooltip && highlightOptions.showTooltip) {\n                            tooltip.hide();\n                            // Shared tooltip refresh always hovers points, so it's\n                            // important to unhover all points on cursor out.\n                            if (tooltip.shared) {\n                                unhoverAllPoints();\n                                unhovered = true;\n                            }\n                        }\n                        if (highlightOptions.highlightPoint && !unhovered) {\n                            if (point) {\n                                point.setState();\n                            }\n                            else {\n                                unhoverAllPoints();\n                            }\n                        }\n                        if (highlightOptions.showCrosshair) {\n                            if (point) {\n                                point.series.xAxis?.drawCrosshair();\n                                point.series.yAxis?.drawCrosshair();\n                            }\n                            else {\n                                // If the 'row' parameter is missing in the event\n                                // object, the unhovered point cannot be identified.\n                                const xAxes = chart.xAxis;\n                                const yAxes = chart.yAxis;\n                                for (let i = 0, l = xAxes.length; i < l; i++) {\n                                    xAxes[i].drawCrosshair();\n                                }\n                                for (let i = 0, l = yAxes.length; i < l; i++) {\n                                    yAxes[i].drawCrosshair();\n                                }\n                            }\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor: cursor } = board;\n                        if (cursor) {\n                            const table = this.connector && this.connector.table;\n                            if (table) {\n                                cursor.addListener(table.id, 'point.mouseOver', handleCursor);\n                                cursor.addListener(table.id, 'dataGrid.hoverRow', handleCursor);\n                                cursor.addListener(table.id, 'point.mouseOut', handleCursorOut);\n                                cursor.addListener(table.id, 'dataGrid.hoverOut', handleCursorOut);\n                            }\n                        }\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        if (table) {\n                            board.dataCursor.removeListener(table.id, 'point.mouseOver', handleCursor);\n                            board.dataCursor.removeListener(table.id, 'dataGrid.hoverRow', handleCursor);\n                            board.dataCursor.removeListener(table.id, 'point.mouseOut', handleCursorOut);\n                            board.dataCursor.removeListener(table.id, 'dataGrid.hoverOut', handleCursorOut);\n                        }\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        return unregisterCursorListeners;\n                    }\n                },\n                extremesHandler: function () {\n                    const { chart, board } = this;\n                    if (chart && board && chart.zooming?.type) {\n                        const dimensions = chart.zooming.type.split('')\n                            .map((c) => c + 'Axis');\n                        const unregisterCallbacks = [];\n                        dimensions.forEach((dimension) => {\n                            const handleUpdateExtremes = (e) => {\n                                const { cursor, event } = e;\n                                if (cursor.type === 'position') {\n                                    const eventTarget = event && event.target;\n                                    if (eventTarget && chart) {\n                                        const axes = chart[dimension];\n                                        let didZoom = false;\n                                        axes.forEach((axis) => {\n                                            if (eventTarget.coll === axis.coll &&\n                                                eventTarget !== axis &&\n                                                eventTarget.min !== null &&\n                                                eventTarget.max !== null && (axis.max !== eventTarget.max ||\n                                                axis.min !== eventTarget.min)) {\n                                                axis.setExtremes(eventTarget.min, eventTarget.max, false, void 0, {\n                                                    trigger: 'dashboards-sync'\n                                                });\n                                                didZoom = true;\n                                            }\n                                        });\n                                        if (didZoom && !chart.resetZoomButton) {\n                                            chart.showResetZoom();\n                                        }\n                                        chart.redraw();\n                                    }\n                                }\n                            };\n                            const addCursorListeners = () => {\n                                const { dataCursor: cursor } = board;\n                                const { connector } = this;\n                                if (connector) {\n                                    const { table } = connector;\n                                    cursor.addListener(table.id, `${dimension}.extremes.min`, handleUpdateExtremes);\n                                    cursor.addListener(table.id, `${dimension}.extremes.max`, handleUpdateExtremes);\n                                    const handleChartZoomOut = () => {\n                                        chart.zoomOut();\n                                        setTimeout(() => {\n                                            // Workaround for zoom button not being removed\n                                            const resetZoomButtons = this.element\n                                                .querySelectorAll('.highcharts-reset-zoom');\n                                            resetZoomButtons.forEach((button) => {\n                                                button.remove();\n                                            });\n                                        });\n                                    };\n                                    cursor.addListener(table.id, 'chart.zoomOut', handleChartZoomOut);\n                                    unregisterCallbacks.push(() => {\n                                        cursor.removeListener(table.id, `${dimension}.extremes.min`, handleUpdateExtremes);\n                                        cursor.removeListener(table.id, `${dimension}.extremes.max`, handleUpdateExtremes);\n                                        cursor.removeListener(table.id, 'chart.zoomOut', handleChartZoomOut);\n                                    });\n                                }\n                            };\n                            if (board) {\n                                addCursorListeners();\n                            }\n                        });\n                        return function () {\n                            unregisterCallbacks.forEach((callback) => {\n                                callback();\n                            });\n                        };\n                    }\n                }\n            }\n        };\n        const defaults = {\n            extremes: { emitter: configs.emitters.extremesEmitter, handler: configs.handlers.extremesHandler },\n            highlight: { emitter: configs.emitters.highlightEmitter, handler: configs.handlers.highlightHandler },\n            visibility: { emitter: configs.emitters.seriesVisibilityEmitter, handler: configs.handlers.seriesVisibilityHandler }\n        };\n\n        return defaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsComponentDefaults.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncHandlers.js'], _modules['Core/Utilities.js']], function (Component, HighchartsSyncHandlers, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const HighchartsComponentDefaults = {\n            allowConnectorUpdate: true,\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-highcharts`\n            ].join(' '),\n            chartClassName: 'chart-container',\n            chartID: 'chart-' + uniqueKey(),\n            chartOptions: {\n                chart: {\n                    styledMode: true\n                },\n                series: []\n            },\n            chartConstructor: 'chart',\n            editableOptions: (Component.defaultOptions.editableOptions || []).concat([\n                {\n                    name: 'chartOptions',\n                    type: 'nested',\n                    nestedOptions: [{\n                            name: 'chart',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'subtitle',\n                                    propertyPath: ['chartOptions', 'subtitle', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'chart', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'column',\n                                            iconURL: 'series-types/icon-column.svg'\n                                        }, {\n                                            name: 'line',\n                                            iconURL: 'series-types/icon-line.svg'\n                                        }, {\n                                            name: 'scatter',\n                                            iconURL: 'series-types/icon-scatter.svg'\n                                        }, {\n                                            name: 'pie',\n                                            iconURL: 'series-types/icon-pie.svg'\n                                        }]\n                                }]\n                        }, {\n                            name: 'xAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'xAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'xAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'yAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'yAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'yAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'legend',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'legend', 'enabled'],\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: ['chartOptions', 'legend', 'align'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'tooltip',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'tooltip', 'enabled'],\n                            options: [{\n                                    name: 'split',\n                                    propertyPath: ['chartOptions', 'tooltip', 'split'],\n                                    type: 'toggle'\n                                }]\n                        }, {\n                            name: 'dataLabels',\n                            propertyPath: [\n                                'chartOptions',\n                                'plotOptions',\n                                'series',\n                                'dataLabels',\n                                'enabled'\n                            ],\n                            showToggle: true,\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'plotOptions',\n                                        'series',\n                                        'dataLabels',\n                                        'align'\n                                    ],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'credits',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'credits', 'enabled'],\n                            options: [{\n                                    name: 'name',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'text'\n                                    ],\n                                    type: 'input'\n                                }, {\n                                    name: 'url',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'href'\n                                    ],\n                                    type: 'input'\n                                }]\n                        }]\n                }, {\n                    name: 'chartConfig',\n                    propertyPath: ['chartOptions'],\n                    type: 'textarea'\n                }, {\n                    name: 'chartClassName',\n                    propertyPath: ['chartClassName'],\n                    type: 'input'\n                }, {\n                    name: 'chartID',\n                    propertyPath: ['chartID'],\n                    type: 'input'\n                }\n            ]),\n            syncHandlers: HighchartsSyncHandlers,\n            editableOptionsBindings: merge(Component.defaultOptions.editableOptionsBindings, {\n                skipRedraw: [\n                    'chartOptions',\n                    'chartConfig'\n                ]\n            })\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HighchartsComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncHandlers.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsComponentDefaults.js'], _modules['Core/Utilities.js']], function (Component, DataConverter, DataTable, Globals, HighchartsSyncHandlers, HighchartsComponentDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sebastian Bochan\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, diffObjects, isString, merge, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a Highcharts component.\n         *\n         */\n        class HighchartsComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the Highcharts component.\n             *\n             * @returns\n             * Highcharts component based on config from JSON.\n             *\n             * @private\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const chartOptions = JSON.parse(json.options.chartOptions || '{}');\n                /// const store = json.store ? DataJSON.fromJSON(json.store) : void 0;\n                const component = new HighchartsComponent(cell, merge(options, {\n                    chartOptions,\n                    // Highcharts, // TODO: Find a solution\n                    // store: store instanceof DataConnector ? store : void 0,\n                    // Get from static registry:\n                    syncHandlers: HighchartsComponent.syncHandlers\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a Highcharts component in the cell.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                options = merge(HighchartsComponent.defaultOptions, options);\n                super(cell, options, board);\n                /**\n                 * List of series IDs created from the connector using `columnAssignment`.\n                 */\n                this.seriesFromConnector = [];\n                this.options = options;\n                this.chartConstructor = this.options.chartConstructor || 'chart';\n                this.type = 'Highcharts';\n                this.chartContainer = createElement('figure', void 0, void 0, this.contentElement, true);\n                this.setOptions();\n                this.sync = new HighchartsComponent.Sync(this, this.syncHandlers);\n                this.chartOptions = merge((this.options.chartOptions ||\n                    { chart: {} }), {\n                    tooltip: {} // Temporary fix for #18876\n                });\n                if (this.connector) {\n                    // Reload the store when polling\n                    this.connector.on('afterLoad', (e) => {\n                        if (e.table && this.connector) {\n                            this.connector.table.setColumns(e.table.getColumns());\n                        }\n                    });\n                }\n                this.innerResizeTimeouts = [];\n            }\n            onTableChanged() {\n                this.updateSeries();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            async load() {\n                this.emit({ type: 'load' });\n                await super.load();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            render() {\n                const hcComponent = this;\n                super.render();\n                hcComponent.chart = hcComponent.getChart();\n                hcComponent.updateSeries();\n                this.sync.start();\n                hcComponent.emit({ type: 'afterRender' });\n                hcComponent.setupConnectorUpdate();\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                while (this.innerResizeTimeouts.length) {\n                    const timeoutID = this.innerResizeTimeouts.pop();\n                    if (timeoutID) {\n                        clearTimeout(timeoutID);\n                    }\n                }\n                this.innerResizeTimeouts.push(setTimeout(() => {\n                    if (this.chart && this.chart.container) {\n                        const heightOffset = this.contentElement.offsetHeight -\n                            this.chart?.container.offsetHeight;\n                        this.chart.setSize(null, (Math.abs(heightOffset) > 1) ?\n                            this.contentElement.offsetHeight : null, false);\n                    }\n                }, 33));\n                return this;\n            }\n            /**\n             * Adds call update value in store, when chart's point is updated.\n             *\n             * @private\n             * */\n            setupConnectorUpdate() {\n                const { connector: store, chart } = this;\n                if (store && chart && this.options.allowConnectorUpdate) {\n                    for (let i = 0, iEnd = chart.series.length; i < iEnd; ++i) {\n                        const series = chart.series[i];\n                        series.update({\n                            point: {\n                                events: {\n                                    drag: (e) => {\n                                        this.onChartUpdate(e.target, store);\n                                    }\n                                }\n                            }\n                        }, false);\n                    }\n                    chart.redraw();\n                }\n            }\n            /**\n             * Internal method for handling option updates.\n             *\n             * @internal\n             */\n            setOptions() {\n                if (this.options.chartClassName) {\n                    this.chartContainer.classList.add(this.options.chartClassName);\n                }\n                if (this.options.chartID) {\n                    this.chartContainer.id = this.options.chartID;\n                }\n            }\n            /**\n             * Update the store, when the point is being dragged.\n             * @param  {Point} point Dragged point.\n             * @param  {Component.ConnectorTypes} store Connector to update.\n             */\n            onChartUpdate(point, store) {\n                const table = store.table, columnName = point.series.name, rowNumber = point.index, converter = new DataConverter(), valueToSet = converter.asNumber(point.y);\n                table.setCell(columnName, rowNumber, valueToSet);\n            }\n            /**\n             * Handles updating via options.\n             * @param options\n             * The options to apply.\n             *\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options, false);\n                this.setOptions();\n                this.filterAndAssignSyncOptions(HighchartsSyncHandlers);\n                if (this.chart) {\n                    this.chart.update(merge(this.options.chartOptions) || {});\n                }\n                this.emit({ type: 'afterUpdate' });\n                shouldRerender && this.render();\n            }\n            /**\n             * Updates chart's series when the data table is changed.\n             *\n             * @private\n             */\n            updateSeries() {\n                const { chart, connector } = this;\n                if (!chart || !connector) {\n                    return;\n                }\n                if (this.presentationModifier) {\n                    this.presentationTable = this.presentationModifier\n                        .modifyTable(connector.table.modified.clone()).modified;\n                }\n                else {\n                    this.presentationTable = connector.table;\n                }\n                const table = this.presentationTable.modified;\n                const modifierOptions = this.presentationTable.getModifier()?.options;\n                this.emit({ type: 'afterPresentationModifier', table: table });\n                const columnNames = table.getColumnNames();\n                const columnAssignment = this.options.connector?.columnAssignment ??\n                    this.getDefaultColumnAssignment(columnNames);\n                // Remove series that were added in the previous update and are not\n                // present in the new columnAssignment.\n                for (let i = 0, iEnd = this.seriesFromConnector.length; i < iEnd; ++i) {\n                    const oldSeriesId = this.seriesFromConnector[i];\n                    if (columnAssignment.some((seriesId) => seriesId.seriesId === oldSeriesId)) {\n                        continue;\n                    }\n                    const series = chart.get(oldSeriesId);\n                    if (series) {\n                        series.destroy();\n                    }\n                }\n                this.seriesFromConnector.length = 0;\n                // Create the series or update the existing ones.\n                for (let i = 0, iEnd = columnAssignment.length; i < iEnd; ++i) {\n                    const assignment = columnAssignment[i];\n                    const dataStructure = assignment.data;\n                    const series = chart.get(assignment.seriesId);\n                    const seriesOptions = {};\n                    // Prevent dragging on series, which were created out of a\n                    // columns which are created by MathModifier.\n                    const adjustDraggableOptions = (compare) => {\n                        if (modifierOptions?.type === 'Math' &&\n                            modifierOptions\n                                .columnFormulas?.some((formula) => compare(formula.column))) {\n                            seriesOptions.dragDrop = {\n                                draggableY: false\n                            };\n                        }\n                    };\n                    // Set the series data based on the column assignment data structure\n                    // type.\n                    if (isString(dataStructure)) {\n                        const column = table.getColumn(dataStructure);\n                        if (column) {\n                            seriesOptions.data = column.slice();\n                        }\n                        adjustDraggableOptions((columnName) => (columnName === dataStructure));\n                    }\n                    else if (Array.isArray(dataStructure)) {\n                        const seriesTable = new DataTable({\n                            columns: table.getColumns(dataStructure)\n                        });\n                        seriesOptions.data = seriesTable.getRows();\n                        adjustDraggableOptions((columnName) => (dataStructure.some((name) => name === columnName)));\n                    }\n                    else {\n                        const keys = Object.keys(dataStructure);\n                        const columnNames = [];\n                        for (let j = 0, jEnd = keys.length; j < jEnd; ++j) {\n                            columnNames.push(dataStructure[keys[j]]);\n                        }\n                        const seriesTable = new DataTable({\n                            columns: table.getColumns(columnNames)\n                        });\n                        seriesOptions.keys = keys;\n                        seriesOptions.data = seriesTable.getRows();\n                        adjustDraggableOptions((columnName) => (columnNames.some((name) => name === columnName)));\n                    }\n                    if (!series) {\n                        chart.addSeries({\n                            name: assignment.seriesId,\n                            id: assignment.seriesId,\n                            ...seriesOptions\n                        }, false);\n                    }\n                    else {\n                        series.update(seriesOptions, false);\n                    }\n                    this.seriesFromConnector.push(assignment.seriesId);\n                }\n                chart.redraw();\n            }\n            /**\n             * Destroy chart and create a new one.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            getChart() {\n                return this.chart || this.createChart();\n            }\n            /**\n             * Destroys the highcharts component.\n             */\n            destroy() {\n                // Cleanup references in the global Highcharts scope\n                this.chart?.destroy();\n                super.destroy();\n            }\n            /**\n             * Creates default mapping when columnAssignment is not declared.\n             * @param  { Array<string>} columnNames all columns returned from dataTable.\n             *\n             * @returns\n             * The record of mapping\n             *\n             * @private\n             *\n             */\n            getDefaultColumnAssignment(columnNames = []) {\n                const result = [];\n                const firstColumn = this.presentationTable?.getColumn(columnNames[0]);\n                if (firstColumn && isString(firstColumn[0])) {\n                    for (let i = 1, iEnd = columnNames.length; i < iEnd; ++i) {\n                        result.push({\n                            seriesId: columnNames[i],\n                            data: [columnNames[0], columnNames[i]]\n                        });\n                    }\n                    return result;\n                }\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    result.push({\n                        seriesId: columnNames[i],\n                        data: columnNames[i]\n                    });\n                }\n                return result;\n            }\n            /**\n             * Creates chart.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            createChart() {\n                const charter = HighchartsComponent.charter || Globals.win.Highcharts;\n                if (!this.chartConstructor) {\n                    this.chartConstructor = 'chart';\n                }\n                const Factory = charter[this.chartConstructor];\n                if (Factory) {\n                    try {\n                        if (this.chartConstructor === 'chart') {\n                            return charter.Chart.chart(this.chartContainer, this.chartOptions);\n                        }\n                        return new Factory(this.chartContainer, this.chartOptions);\n                    }\n                    catch {\n                        throw new Error('The Highcharts component is misconfigured: `' +\n                            this.cell.id + '`');\n                    }\n                }\n                if (typeof charter.chart !== 'function') {\n                    throw new Error('Chart constructor not found');\n                }\n                return this.chart;\n            }\n            /**\n             * Registers events from the chart options to the callback register.\n             *\n             * @private\n             */\n            registerChartEvents() {\n                if (this.chart && this.chart.options) {\n                    const options = this.chart.options;\n                    const allEvents = [\n                        'chart',\n                        'series',\n                        'yAxis',\n                        'xAxis',\n                        'colorAxis',\n                        'annotations',\n                        'navigation'\n                    ].map((optionKey) => {\n                        let seriesOrAxisOptions = options[optionKey] || {};\n                        if (!Array.isArray(seriesOrAxisOptions) &&\n                            seriesOrAxisOptions.events) {\n                            seriesOrAxisOptions = [seriesOrAxisOptions];\n                        }\n                        if (seriesOrAxisOptions &&\n                            typeof seriesOrAxisOptions === 'object' &&\n                            Array.isArray(seriesOrAxisOptions)) {\n                            return seriesOrAxisOptions.reduce((acc, seriesOrAxis, i) => {\n                                if (seriesOrAxis && seriesOrAxis.events) {\n                                    acc[seriesOrAxis.id || `${optionKey}-${i}`] = seriesOrAxis.events;\n                                }\n                                return acc;\n                            }, {}) || {};\n                        }\n                        return {};\n                    });\n                    allEvents.forEach((options) => {\n                        Object.keys(options).forEach((key) => {\n                            const events = options[key];\n                            Object.keys(events).forEach((callbackKey) => {\n                                this.callbackRegistry.addCallback(`${key}-${callbackKey}`, {\n                                    type: 'seriesEvent',\n                                    func: events[callbackKey]\n                                });\n                            });\n                        });\n                    });\n                }\n            }\n            setConnector(connector) {\n                const chart = this.chart;\n                if (this.connector &&\n                    chart &&\n                    chart.series &&\n                    this.connector.table.id !== connector?.table.id) {\n                    const storeTableID = this.connector.table.id;\n                    for (let i = chart.series.length - 1; i >= 0; i--) {\n                        const series = chart.series[i];\n                        if (series.options.id?.indexOf(storeTableID) !== -1) {\n                            series.remove(false);\n                        }\n                    }\n                }\n                super.setConnector(connector);\n                return this;\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'Highcharts',\n                    chartOptions: {\n                        chart: {\n                            animation: false,\n                            type: 'column',\n                            zooming: {}\n                        }\n                    }\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @private\n             */\n            toJSON() {\n                const chartOptions = JSON.stringify(this.options.chartOptions), chartConstructor = this.options.chartConstructor || 'chart';\n                this.registerChartEvents();\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    type: 'Highcharts',\n                    options: {\n                        ...base.options,\n                        chartOptions,\n                        chartConstructor,\n                        // TODO: may need to handle callback functions\n                        // Maybe have a sync.toJSON()\n                        type: 'Highcharts',\n                        sync: {}\n                    }\n                };\n                this.emit({ type: 'toJSON', json });\n                return json;\n            }\n            /**\n             * Get the HighchartsComponent component's options.\n             * @returns\n             * The JSON of HighchartsComponent component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HighchartsComponent.defaultOptions),\n                    type: 'Highcharts'\n                };\n            }\n            getEditableOptions() {\n                const component = this;\n                const componentOptions = component.options;\n                const chart = component.chart;\n                const chartOptions = chart && chart.options;\n                const chartType = chartOptions && chartOptions.chart?.type || 'line';\n                return merge(componentOptions, {\n                    chartOptions\n                }, {\n                    chartOptions: {\n                        yAxis: splat(chart && chart.yAxis[0].options),\n                        xAxis: splat(chart && chart.xAxis[0].options),\n                        plotOptions: {\n                            series: ((chartOptions && chartOptions.plotOptions) ||\n                                {})[chartType]\n                        }\n                    }\n                });\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                if (propertyPath.length === 1 && propertyPath[0] === 'chartOptions') {\n                    return JSON.stringify(component.options.chartOptions, null, 2);\n                }\n                return super.getEditableOptionValue.call(this, propertyPath);\n            }\n        }\n        /** @private */\n        HighchartsComponent.syncHandlers = HighchartsSyncHandlers;\n        /**\n         * Default options of the Highcharts component.\n         */\n        HighchartsComponent.defaultOptions = merge(Component.defaultOptions, HighchartsComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HighchartsComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPISyncHandlers.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const configs = {\n            emitters: {},\n            handlers: {\n                extremesHandler: function () {\n                    const { board } = this;\n                    const handleChangeExtremes = (e) => {\n                        const cursor = e.cursor;\n                        if (cursor.type === 'position' &&\n                            typeof cursor?.row === 'number' &&\n                            defined(cursor.column) &&\n                            this.connector &&\n                            !defined(this.options.value)) {\n                            const value = this.connector.table.modified.getCellAsString(cursor.column, cursor.row);\n                            this.setValue(value);\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor: cursor } = board;\n                        if (!cursor) {\n                            return;\n                        }\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.addListener(table.id, 'xAxis.extremes.max', handleChangeExtremes);\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        const { dataCursor: cursor } = board;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.removeListener(table.id, 'xAxis.extremes.max', handleChangeExtremes);\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        return unregisterCursorListeners;\n                    }\n                }\n            }\n        };\n        const defaults = {\n            extremes: { handler: configs.handlers.extremesHandler }\n        };\n\n        return defaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPIComponentDefaults.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/KPIComponent/KPISyncHandlers.js']], function (Component, KPISyncHandlers) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const KPIComponentDefaults = {\n            type: 'KPI',\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-kpi`\n            ].join(' '),\n            minFontSize: 20,\n            syncHandlers: KPISyncHandlers,\n            thresholdColors: ['#f45b5b', '#90ed7d'],\n            editableOptions: (Component.defaultOptions.editableOptions || []).concat([{\n                    name: 'Value',\n                    type: 'input',\n                    propertyPath: ['value']\n                }, {\n                    name: 'Column name',\n                    type: 'input',\n                    propertyPath: ['columnName']\n                }, {\n                    name: 'Value format',\n                    type: 'input',\n                    propertyPath: ['valueFormat']\n                }]),\n            linkedValueTo: {\n                enabled: true,\n                seriesIndex: 0,\n                pointIndex: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return KPIComponentDefaults;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * General options for the chart.\n         *\n         * @optionparent chart\n         */\n        const ChartDefaults = {\n            /**\n             * Default `mapData` for all series, in terms of a GeoJSON or TopoJSON\n             * object. If set to a string, it functions as an index into the\n             * `Highcharts.maps` array.\n             *\n             * For picking out individual shapes and geometries to use for each series\n             * of the map, see [series.mapData](#series.map.mapData).\n             *\n             * @sample    maps/demo/geojson\n             *            Loading GeoJSON data\n             * @sample    maps/chart/topojson\n             *            Loading TopoJSON data\n             *\n             * @type      {string|Array<*>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.map\n             */\n            /**\n             * Set lat/lon transformation definitions for the chart. If not defined,\n             * these are extracted from the map data.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.mapTransforms\n             */\n            /**\n             * When using multiple axes, the ticks of two or more opposite axes\n             * will automatically be aligned by adding ticks to the axis or axes\n             * with the least ticks, as if `tickAmount` were specified.\n             *\n             * This can be prevented by setting `alignTicks` to false. If the grid\n             * lines look messy, it's a good idea to hide them for the secondary\n             * axis by setting `gridLineWidth` to 0.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false,\n             * then the `alignTicks ` will be disabled for the axis.\n             *\n             * Disabled for logarithmic axes.\n             *\n             * @sample {highcharts} highcharts/chart/alignticks-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/alignticks-false/\n             *         False\n             * @sample {highstock} stock/chart/alignticks-true/\n             *         True by default\n             * @sample {highstock} stock/chart/alignticks-false/\n             *         False\n             *\n             * @type      {boolean}\n             * @default   true\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignTicks\n             */\n            /**\n             * When using multiple axes, align the thresholds. When this is true, other\n             * ticks will also be aligned.\n             *\n             * Note that for line series and some other series types, the `threshold`\n             * option is set to `null` by default. This will in turn cause their y-axis\n             * to not have a threshold. In order to avoid that, set the series\n             * `threshold` to 0 or another number.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false, or\n             * if the axis is logarithmic, the threshold will not be aligned.\n             *\n             * @sample {highcharts} highcharts/chart/alignthresholds/ Set to true\n             *\n             * @since 10.0.0\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignThresholds\n             */\n            alignThresholds: false,\n            /**\n             * Set the overall animation for all chart updating. Animation can be\n             * disabled throughout the chart by setting it to false here. It can\n             * be overridden for each individual API method as a function parameter.\n             * The only animation not affected by this option is the initial series\n             * animation, see [plotOptions.series.animation](\n             * #plotOptions.series.animation).\n             *\n             * The animation can either be set as a boolean or a configuration\n             * object. If `true`, it will use the 'swing' jQuery easing and a\n             * duration of 500 ms. If used as a configuration object, the following\n             * properties are supported:\n             *\n             * - `defer`: The animation delay time in milliseconds.\n             *\n             * - `duration`: The duration of the animation in milliseconds.\n             *\n             * - `easing`: A string reference to an easing function set on the\n             *   `Math` object. See\n             *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n             *\n             * When zooming on a series with less than 100 points, the chart redraw\n             * will be done with animation, but in case of more data points, it is\n             * necessary to set this option to ensure animation on zoom.\n             *\n             * @sample {highcharts} highcharts/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highcharts} highcharts/chart/animation-duration/\n             *         With a longer duration\n             * @sample {highcharts} highcharts/chart/animation-easing/\n             *         With a jQuery UI easing\n             * @sample {highmaps} maps/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highmaps} maps/chart/animation-duration/\n             *         With a longer duration\n             *\n             * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @default   true\n             * @apioption chart.animation\n             */\n            /**\n             * A CSS class name to apply to the charts container `div`, allowing\n             * unique CSS styling for each chart.\n             *\n             * @type      {string}\n             * @apioption chart.className\n             */\n            /**\n             * Event listeners for the chart.\n             *\n             * @apioption chart.events\n             */\n            /**\n             * Fires when a series is added to the chart after load time, using the\n             * `addSeries` method. One parameter, `event`, is passed to the\n             * function, containing common event information. Through\n             * `event.options` you can access the series options that were passed to\n             * the `addSeries` method. Returning false prevents the series from\n             * being added.\n             *\n             * @sample {highcharts} highcharts/chart/events-addseries/\n             *         Alert on add series\n             * @sample {highstock} stock/chart/events-addseries/\n             *         Alert on add series\n             *\n             * @type      {Highcharts.ChartAddSeriesCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.addSeries\n             */\n            /**\n             * Fires when clicking on the plot background. One parameter, `event`,\n             * is passed to the function, containing common event information.\n             *\n             * Information on the clicked spot can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' value at the clicked spot. The primary axes\n             * are `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * click: function(e) {\n             *     console.log(\n             *         Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n             *         e.yAxis[0].value\n             *     )\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highcharts} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highstock} stock/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highstock} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highmaps} maps/chart/events-click/\n             *         Record coordinates on click\n             * @sample {highmaps} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             *\n             * @type      {Highcharts.ChartClickCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.click\n             */\n            /**\n             * Fires when the chart is finished loading. Since v4.2.2, it also waits\n             * for images to be loaded, for example from point markers. One\n             * parameter, `event`, is passed to the function, containing common\n             * event information.\n             *\n             * There is also a second parameter to the chart constructor where a\n             * callback function can be passed to be executed on chart.load.\n             *\n             * @sample {highcharts} highcharts/chart/events-load/\n             *         Alert on chart load\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-load/\n             *         Alert on chart load\n             * @sample {highmaps} maps/chart/events-load/\n             *         Add series on chart load\n             *\n             * @type      {Highcharts.ChartLoadCallbackFunction}\n             * @context   Highcharts.Chart\n             * @apioption chart.events.load\n             */\n            /**\n             * Fires when the chart is redrawn, either after a call to\n             * `chart.redraw()` or after an axis, series or point is modified with\n             * the `redraw` option set to `true`. One parameter, `event`, is passed\n             * to the function, containing common event information.\n             *\n             * @sample {highcharts} highcharts/chart/events-redraw/\n             *         Alert on chart redraw\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-redraw/\n             *         Alert on chart redraw when adding a series or moving the\n             *         zoomed range\n             * @sample {highmaps} maps/chart/events-redraw/\n             *         Set subtitle on chart redraw\n             *\n             * @type      {Highcharts.ChartRedrawCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.redraw\n             */\n            /**\n             * Fires after initial load of the chart (directly after the `load`\n             * event), and after each redraw (directly after the `redraw` event).\n             *\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             *\n             * @type      {Highcharts.ChartRenderCallbackFunction}\n             * @since     5.0.7\n             * @context   Highcharts.Chart\n             * @apioption chart.events.render\n             */\n            /**\n             * Fires when an area of the chart has been selected. Selection is\n             * enabled by setting the chart's zoomType. One parameter, `event`, is\n             * passed to the function, containing common event information. The\n             * default action for the selection event is to zoom the chart to the\n             * selected area. It can be prevented by calling\n             * `event.preventDefault()` or return false.\n             *\n             * Information on the selected area can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' min and max values. The primary axes are\n             * `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * selection: function(event) {\n             *     // log the min and max of the primary, datetime x-axis\n             *     console.log(\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].min\n             *         ),\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].max\n             *         )\n             *     );\n             *     // log the min and max of the y axis\n             *     console.log(event.yAxis[0].min, event.yAxis[0].max);\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highcharts} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample {highstock} stock/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highstock} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             *         (Highcharts)\n             *\n             * @type      {Highcharts.ChartSelectionCallbackFunction}\n             * @apioption chart.events.selection\n             */\n            /**\n             * The margin between the outer edge of the chart and the plot area.\n             * The numbers in the array designate top, right, bottom and left\n             * respectively. Use the options `marginTop`, `marginRight`,\n             * `marginBottom` and `marginLeft` for shorthand setting of one option.\n             *\n             * By default there is no margin. The actual space is dynamically\n             * calculated from the offset of axis labels, axis title, title,\n             * subtitle and legend in addition to the `spacingTop`, `spacingRight`,\n             * `spacingBottom` and `spacingLeft` options.\n             *\n             * @sample {highcharts} highcharts/chart/margins-zero/\n             *         Zero margins\n             * @sample {highstock} stock/chart/margin-zero/\n             *         Zero margins\n             *\n             * @type      {number|Array<number>}\n             * @apioption chart.margin\n             */\n            /**\n             * The margin between the bottom outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingBottom`.\n             *\n             * @sample {highcharts} highcharts/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highstock} stock/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginBottom\n             */\n            /**\n             * The margin between the left outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingLeft`.\n             *\n             * @sample {highcharts} highcharts/chart/marginleft/\n             *         150px left margin\n             * @sample {highstock} stock/chart/marginleft/\n             *         150px left margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginLeft\n             */\n            /**\n             * The margin between the right outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingRight`.\n             *\n             * @sample {highcharts} highcharts/chart/marginright/\n             *         100px right margin\n             * @sample {highstock} stock/chart/marginright/\n             *         100px right margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginRight\n             */\n            /**\n             * The margin between the top outer edge of the chart and the plot area.\n             * Use this to set a fixed pixel value for the margin as opposed to\n             * the default dynamic margin. See also `spacingTop`.\n             *\n             * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n             * @sample {highstock} stock/chart/margintop/\n             *         100px top margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginTop\n             */\n            /**\n             * Callback function to override the default function that formats all\n             * the numbers in the chart. Returns a string with the formatted number.\n             *\n             * @sample highcharts/members/highcharts-numberformat\n             *      Arabic digits in Highcharts\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             * @since 8.0.0\n             * @apioption chart.numberFormatter\n             */\n            /**\n             * When a chart with an x and a y-axis is rendered, we first pre-render the\n             * labels of both in order to measure them. Then, if either of the axis\n             * labels take up so much space that it significantly affects the length of\n             * the other axis, we repeat the process.\n             *\n             * By default we stop at two axis layout runs, but it may be that the second\n             * run also alter the space required by either axis, for example if it\n             * causes the labels to rotate. In this situation, a subsequent redraw of\n             * the chart may cause the tick and label placement to change for apparently\n             * no reason.\n             *\n             * Use the `axisLayoutRuns` option to set the maximum allowed number of\n             * repetitions. But keep in mind that the default value of 2 is set because\n             * every run costs performance time.\n             *\n             * **Note:** Changing that option to higher than the default might decrease\n             * performance significantly, especially with bigger sets of data.\n             *\n             * @type      {number}\n             * @default   2\n             * @since     @next\n             * @apioption chart.axisLayoutRuns\n             */\n            /**\n             * Allows setting a key to switch between zooming and panning. Can be\n             * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n             * key on Windows) or `shift`. The keys are mapped directly to the key\n             * properties of the click event argument (`event.altKey`,\n             * `event.ctrlKey`, `event.metaKey` and `event.shiftKey`).\n             *\n             * @type       {string}\n             * @since      4.0.3\n             * @product    highcharts gantt\n             * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n             * @apioption  chart.panKey\n             */\n            /**\n             * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n             * to combine zooming and panning.\n             *\n             * On touch devices, when the [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) option is `true` (default), panning\n             * requires two fingers. To allow panning with one finger, set\n             * `followTouchMove` to `false`.\n             *\n             * @sample  {highcharts} highcharts/chart/pankey/ Zooming and panning\n             * @sample  {highstock} stock/chart/panning/ Zooming and xy panning\n             */\n            panning: {\n                /**\n                 * Enable or disable chart panning.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock|highmaps} true\n                 */\n                enabled: false,\n                /**\n                 * Decides in what dimensions the user can pan the chart. Can be\n                 * one of `x`, `y`, or `xy`.\n                 *\n                 * When this option is set to `y` or `xy`, [yAxis.startOnTick](#yAxis.startOnTick)\n                 * and [yAxis.endOnTick](#yAxis.endOnTick) are overwritten to `false`.\n                 *\n                 * @sample {highcharts} highcharts/chart/panning-type\n                 *         Zooming and xy panning\n                 *\n                 * @declare    Highcharts.OptionsChartPanningTypeValue\n                 * @type       {string}\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @default    {highcharts|highstock} x\n                 * @product    highcharts highstock gantt\n                 */\n                type: 'x'\n            },\n            /**\n             * Equivalent to [zoomType](#chart.zoomType), but for multitouch\n             * gestures only. By default, the `pinchType` is the same as the\n             * `zoomType` setting. However, pinching can be enabled separately in\n             * some cases, for example in stock charts where a mouse drag pans the\n             * chart, while pinching is enabled. When [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) is true, pinchType only applies to\n             * two-finger touches.\n             *\n             * @type       {string}\n             * @default    {highcharts} undefined\n             * @default    {highstock} undefined\n             * @since      3.0\n             * @product    highcharts highstock gantt\n             * @deprecated\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @apioption  chart.pinchType\n             */\n            /**\n             * Whether to apply styled mode. When in styled mode, no presentational\n             * attributes or CSS are applied to the chart SVG. Instead, CSS rules\n             * are required to style the chart. The default style sheet is\n             * available from `https://code.highcharts.com/css/highcharts.css`.\n             *\n             * [Read more in the docs](https://www.highcharts.com/docs/chart-design-and-style/style-by-css)\n             * on what classes and variables are available.\n             *\n             * @sample highcharts/css/colors\n             *         Color theming with CSS\n             * @sample highcharts/css/prefers-color-scheme\n             *         Dynamic theme based on system settings\n             * @type       {boolean}\n             * @default    false\n             * @since      7.0\n             * @apioption  chart.styledMode\n             */\n            styledMode: false,\n            /**\n             * The corner radius of the outer chart border.\n             *\n             * @sample {highcharts} highcharts/chart/borderradius/\n             *         20px radius\n             * @sample {highstock} stock/chart/border/\n             *         10px radius\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             */\n            borderRadius: 0,\n            /**\n             * In styled mode, this sets how many colors the class names\n             * should rotate between. With ten colors, series (or points) are\n             * given class names like `highcharts-color-0`, `highcharts-color-1`\n             * [...] `highcharts-color-9`. The equivalent in non-styled mode\n             * is to set colors using the [colors](#colors) setting.\n             *\n             * @since      5.0.0\n             */\n            colorCount: 10,\n            /**\n             * By default, (because of memory and performance reasons) the chart does\n             * not copy the data but keeps it as a reference. In some cases, this might\n             * result in mutating the original data source. In order to prevent that,\n             * set that property to false. Please note that changing that might decrease\n             * performance, especially with bigger sets of data.\n             *\n             * @type       {boolean}\n             * @since 10.1.0\n             */\n            allowMutatingData: true,\n            /**\n             * If true, the axes will scale to the remaining visible series once\n             * one series is hidden. If false, hiding and showing a series will\n             * not affect the axes or the other series. For stacks, once one series\n             * within the stack is hidden, the rest of the stack will close in\n             * around it even if the axis is not affected.\n             *\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n             *         False\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n             *         True with stack\n             * @sample {highstock} stock/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highstock} stock/chart/ignorehiddenseries-false/\n             *         False\n             *\n             * @since   1.2.0\n             * @product highcharts highstock gantt\n             */\n            ignoreHiddenSeries: true,\n            /**\n             * Whether to invert the axes so that the x axis is vertical and y axis\n             * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n             * by default.\n             *\n             * @productdesc {highcharts}\n             * If a bar series is present in the chart, it will be inverted\n             * automatically. Inverting the chart doesn't have an effect if there\n             * are no cartesian series in the chart.\n             *\n             * @sample {highcharts} highcharts/chart/inverted/\n             *         Inverted line\n             * @sample {highstock} stock/navigator/inverted/\n             *         Inverted stock chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @product   highcharts highstock gantt\n             * @apioption chart.inverted\n             */\n            /**\n             * The distance between the outer edge of the chart and the content,\n             * like title or legend, or axis title and labels if present. The\n             * numbers in the array designate top, right, bottom and left\n             * respectively. Use the options spacingTop, spacingRight, spacingBottom\n             * and spacingLeft options for shorthand setting of one option.\n             *\n             * @type    {Array<number>}\n             * @see     [chart.margin](#chart.margin)\n             * @default [10, 10, 15, 10]\n             * @since   3.0.6\n             */\n            spacing: [10, 10, 15, 10],\n            /**\n             * The button that appears after a selection zoom, allowing the user\n             * to reset zoom. This option is deprecated in favor of\n             * [zooming](#chart.zooming).\n             *\n             * @since      2.2\n             * @deprecated 10.2.1\n             */\n            resetZoomButton: {\n                /**\n                 * What frame the button placement should be related to. Can be\n                 * either `plotBox` or `spacingBox`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 *\n                 * @type      {Highcharts.ButtonRelativeToValue}\n                 * @apioption chart.resetZoomButton.relativeTo\n                 */\n                /**\n                 * A collection of attributes for the button. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                 * border radius. The theme also supports `style`, a collection of\n                 * CSS properties for the text. Equivalent attributes for the hover\n                 * state are given in `theme.states.hover`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                theme: {\n                /**\n                 * The z-index of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.theme.zIndex\n                 */\n                },\n                /**\n                 * The position of the button.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 *\n                 * @type {Highcharts.AlignObject}\n                 */\n                position: {\n                /**\n                 * The horizontal alignment of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.align\n                 */\n                /**\n                 * The horizontal offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.x\n                 */\n                /**\n                 * The vertical alignment of the button.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @apioption chart.resetZoomButton.position.verticalAlign\n                 */\n                /**\n                 * The vertical offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.y\n                 */\n                }\n            },\n            /**\n             * The pixel width of the plot area border.\n             *\n             * @sample {highcharts} highcharts/chart/plotborderwidth/\n             *         1px border\n             * @sample {highstock} stock/chart/plotborder/\n             *         2px border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.plotBorderWidth\n             */\n            /**\n             * Whether to apply a drop shadow to the plot area. Requires that\n             * plotBackgroundColor be set. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample {highcharts} highcharts/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highstock} stock/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.plotShadow\n             */\n            /**\n             * When true, cartesian charts like line, spline, area and column are\n             * transformed into the polar coordinate system. This produces _polar\n             * charts_, also known as _radar charts_.\n             *\n             * @sample {highcharts} highcharts/demo/polar/\n             *         Polar chart\n             * @sample {highcharts} highcharts/demo/polar-wind-rose/\n             *         Wind rose, stacked polar column chart\n             * @sample {highcharts} highcharts/demo/polar-spider/\n             *         Spider web chart\n             * @sample {highcharts} highcharts/parallel-coordinates/polar/\n             *         Star plot, multivariate data in a polar chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     2.3.0\n             * @product   highcharts\n             * @requires  highcharts-more\n             * @apioption chart.polar\n             */\n            /**\n             * Whether to reflow the chart to fit the width of the container div\n             * on resizing the window.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/reflow-false/\n             *         False\n             * @sample {highstock} stock/chart/reflow-true/\n             *         True by default\n             * @sample {highstock} stock/chart/reflow-false/\n             *         False\n             * @sample {highmaps} maps/chart/reflow-true/\n             *         True by default\n             * @sample {highmaps} maps/chart/reflow-false/\n             *         False\n             *\n             * @since     2.1\n             */\n            reflow: true,\n            /**\n             * The HTML element where the chart will be rendered. If it is a string,\n             * the element by that id is used. The HTML element can also be passed\n             * by direct reference, or as the first argument of the chart\n             * constructor, in which case the option is not needed.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         String\n             * @sample {highcharts} highcharts/chart/renderto-object/\n             *         Object reference\n             * @sample {highstock} stock/chart/renderto-string/\n             *         String\n             * @sample {highstock} stock/chart/renderto-object/\n             *         Object reference\n             *\n             * @type      {string|Highcharts.HTMLDOMElement}\n             * @apioption chart.renderTo\n             */\n            /**\n             * The background color of the marker square when selecting (zooming\n             * in on) an area of the chart.\n             *\n             * @see In styled mode, the selection marker fill is set with the\n             *      `.highcharts-selection-marker` class.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   rgba(51,92,173,0.25)\n             * @since     2.1.7\n             * @apioption chart.selectionMarkerFill\n             */\n            /**\n             * Whether to apply a drop shadow to the global series group. This causes\n             * all the series to have the same shadow. Contrary to the `series.shadow`\n             * option, this prevents items from casting shadows on each other, like for\n             * others series in a stack. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample highcharts/chart/seriesgroupshadow/ Shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to apply a drop shadow to the outer chart area. Requires\n             * that backgroundColor be set. The shadow can be an object\n             * configuration containing `color`, `offsetX`, `offsetY`, `opacity` and\n             * `width`.\n             *\n             * @sample {highcharts} highcharts/chart/shadow/\n             *         Shadow\n             * @sample {highstock} stock/chart/shadow/\n             *         Shadow\n             * @sample {highmaps} maps/chart/border/\n             *         Chart border and shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to show the axes initially. This only applies to empty charts\n             * where series are added dynamically, as axes are automatically added\n             * to cartesian series.\n             *\n             * @sample {highcharts} highcharts/chart/showaxes-false/\n             *         False by default\n             * @sample {highcharts} highcharts/chart/showaxes-true/\n             *         True\n             *\n             * @type      {boolean}\n             * @since     1.2.5\n             * @product   highcharts gantt\n             * @apioption chart.showAxes\n             */\n            /**\n             * The space between the bottom edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highstock} stock/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   15\n             * @since     2.1\n             * @apioption chart.spacingBottom\n             */\n            /**\n             * The space between the left edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highstock} stock/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingLeft\n             */\n            /**\n             * The space between the right edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingright-100/\n             *         Spacing set to 100\n             * @sample {highcharts} highcharts/chart/spacingright-legend/\n             *         Legend in right position with default spacing\n             * @sample {highstock} stock/chart/spacingright/\n             *         Spacing set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingRight\n             */\n            /**\n             * The space between the top edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingtop-100/\n             *         A top spacing of 100\n             * @sample {highcharts} highcharts/chart/spacingtop-10/\n             *         Floating chart title makes the plot area align to the default\n             *         spacingTop of 10.\n             * @sample {highstock} stock/chart/spacingtop/\n             *         A top spacing of 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingTop\n             */\n            /**\n             * Additional CSS styles to apply inline to the container `div` and the root\n             * SVG.\n             *\n             * According to the CSS syntax documentation, it is recommended to quote\n             * font family names that contain white space, digits, or punctuation\n             * characters other than hyphens. In such cases, wrap the fontFamily\n             * name as follows: `fontFamily: '\"Font name\"'`.\n             *\n             * Since v11, the root font size is 1rem by default, and all child element\n             * are given a relative `em` font size by default. This allows implementers\n             * to control all the chart's font sizes by only setting the root level.\n             *\n             * @see    In styled mode, general chart styles can be set with the\n             *         `.highcharts-root` class.\n             * @sample {highcharts} highcharts/chart/style-serif-font/\n             *         Using a serif type font\n             * @sample {highcharts} highcharts/chart/style-special-font/\n             *         Using a font with special character in name\n             * @sample {highcharts} highcharts/members/relative-font-size/\n             *         Relative font sizes\n             * @sample {highcharts} highcharts/css/em/\n             *         Styled mode with relative font sizes\n             * @sample {highstock} stock/chart/style/\n             *         Using a serif type font\n             * @sample {highmaps} maps/chart/style-serif-font/\n             *         Using a serif type font\n             *\n             * @type      {Highcharts.CSSObject}\n             * @default   {\"fontFamily\": Helvetica, Arial, sans-serif\",\"fontSize\":\"1rem\"}\n             * @apioption chart.style\n             */\n            /**\n             * The default series type for the chart. Can be any of the chart types\n             * listed under [plotOptions](#plotOptions) and [series](#series) or can\n             * be a series provided by an additional module.\n             *\n             * In TypeScript this option has no effect in sense of typing and\n             * instead the `type` option must always be set in the series.\n             *\n             * @sample {highcharts} highcharts/chart/type-bar/\n             *         Bar\n             * @sample {highstock} stock/chart/type/\n             *         Areaspline\n             * @sample {highmaps} maps/chart/type-mapline/\n             *         Mapline\n             *\n             * @type       {string}\n             * @default    {highcharts} line\n             * @default    {highstock} line\n             * @default    {highmaps} map\n             * @since      2.1.0\n             * @apioption  chart.type\n             */\n            type: 'line',\n            /**\n             * Decides in what dimensions the user can zoom by dragging the mouse.\n             * Can be one of `x`, `y` or `xy`.\n             *\n             * @see [panKey](#chart.panKey)\n             *\n             * @sample {highcharts} highcharts/chart/zoomtype-none/\n             *         None by default\n             * @sample {highcharts} highcharts/chart/zoomtype-x/\n             *         X\n             * @sample {highcharts} highcharts/chart/zoomtype-y/\n             *         Y\n             * @sample {highcharts} highcharts/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highcharts} highcharts/chart/zoomtype-polar/\n             *         Zoom on polar chart\n             * @sample {highstock} stock/demo/basic-line/\n             *         None by default\n             * @sample {highstock} stock/chart/zoomtype-x/\n             *         X\n             * @sample {highstock} stock/chart/zoomtype-y/\n             *         Y\n             * @sample {highstock} stock/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highmaps} maps/chart/zoomtype-xy/\n             *         Map with selection zoom\n             *\n             * @type       {string}\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @deprecated\n             * @apioption  chart.zoomType\n             */\n            /**\n             * Enables zooming by a single touch, in combination with\n             * [chart.zoomType](#chart.zoomType). When enabled, two-finger pinch\n             * will still work as set up by [chart.pinchType](#chart.pinchType).\n             * However, `zoomBySingleTouch` will interfere with touch-dragging the\n             * chart to read the tooltip. And especially when vertical zooming is\n             * enabled, it will make it hard to scroll vertically on the page.\n             * @since      9.0.0\n             * @sample     highcharts/chart/zoombysingletouch\n             *             Zoom by single touch enabled, with buttons to toggle\n             * @product    highcharts highstock gantt\n             * @deprecated\n             */\n            /**\n             * Chart zooming options.\n             * @since 10.2.1\n             */\n            zooming: {\n                /**\n                 * Equivalent to [type](#chart.zooming.type), but for multitouch\n                 * gestures only. By default, the `pinchType` is the same as the\n                 * `type` setting. However, pinching can be enabled separately in\n                 * some cases, for example in stock charts where a mouse drag pans the\n                 * chart, while pinching is enabled. When [tooltip.followTouchMove](\n                 * #tooltip.followTouchMove) is true, pinchType only applies to\n                 * two-finger touches.\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @default    {highstock} x\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.pinchType\n                 */\n                /**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * @declare    Highcharts.OptionsChartZoomingTypeValue\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.type\n                 */\n                /**\n                 * Set a key to hold when dragging to zoom the chart. This is useful to\n                 * avoid zooming while moving points. Should be set different than\n                 * [chart.panKey](#chart.panKey).\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @requires   modules/draggable-points\n                 * @apioption  chart.zooming.key\n                 */\n                /**\n                 * Enables zooming by a single touch, in combination with\n                 * [chart.zooming.type](#chart.zooming.type). When enabled, two-finger\n                 * pinch will still work as set up by [chart.zooming.pinchType]\n                 * (#chart.zooming.pinchType). However, `singleTouch` will interfere\n                 * with touch-dragging the chart to read the tooltip. And especially\n                 * when vertical zooming is enabled, it will make it hard to scroll\n                 * vertically on the page.\n                 *\n                 * @sample  highcharts/chart/zoombysingletouch\n                 *          Zoom by single touch enabled, with buttons to toggle\n                 *\n                 * @product highcharts highstock gantt\n                 */\n                singleTouch: false,\n                /**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 */\n                resetButton: {\n                    /**\n                     * What frame the button placement should be related to. Can be\n                     * either `plotBox` or `spacingBox`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     *\n                     * @type      {Highcharts.ButtonRelativeToValue}\n                     * @default   plot\n                     * @apioption chart.zooming.resetButton.relativeTo\n                     */\n                    /**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                     * border radius. The theme also supports `style`, a collection of\n                     * CSS properties for the text. Equivalent attributes for the hover\n                     * state are given in `theme.states.hover`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     *\n                     * @type  {Highcharts.SVGAttributes}\n                     * @since 10.2.1\n                     */\n                    theme: {\n                        /** @internal */\n                        zIndex: 6\n                    },\n                    /**\n                     * The position of the button.\n                     *\n                     * Note: Adjusting position values might cause overlap with chart\n                     * elements. Ensure coordinates do not obstruct other components or\n                     * data visibility.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     *\n                     * @type  {Highcharts.AlignObject}\n                     * @since 10.2.1\n                     */\n                    position: {\n                        /**\n                         * The horizontal alignment of the button.\n                         */\n                        align: 'right',\n                        /**\n                         * The horizontal offset of the button.\n                         */\n                        x: -10,\n                        /**\n                         * The vertical alignment of the button.\n                         *\n                         * @type       {Highcharts.VerticalAlignValue}\n                         * @default    top\n                         * @apioption  chart.zooming.resetButton.position.verticalAlign\n                         */\n                        /**\n                         * The vertical offset of the button.\n                         */\n                        y: 10\n                    }\n                }\n            },\n            /**\n             * An explicit width for the chart. By default (when `null`) the width\n             * is calculated from the offset width of the containing element.\n             *\n             * @sample {highcharts} highcharts/chart/width/\n             *         800px wide\n             * @sample {highstock} stock/chart/width/\n             *         800px wide\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             *\n             * @type {null|number|string}\n             */\n            width: null,\n            /**\n             * An explicit height for the chart. If a _number_, the height is\n             * given in pixels. If given a _percentage string_ (for example\n             * `'56%'`), the height is given as the percentage of the actual chart\n             * width. This allows for preserving the aspect ratio across responsive\n             * sizes.\n             *\n             * By default (when `null`) the height is calculated from the offset\n             * height of the containing element, or 400 pixels if the containing\n             * element's height is 0.\n             *\n             * @sample {highcharts} highcharts/chart/height/\n             *         500px height\n             * @sample {highstock} stock/chart/height/\n             *         300px height\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             * @sample highcharts/chart/height-percent/\n             *         Highcharts with percentage height\n             *\n             * @type {null|number|string}\n             */\n            height: null,\n            /**\n             * The color of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/bordercolor/\n             *         Brown border\n             * @sample {highstock} stock/chart/border/\n             *         Brown border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: \"#334eff\" /* Palette.highlightColor80 */,\n            /**\n             * The pixel width of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/borderwidth/\n             *         5px border\n             * @sample {highstock} stock/chart/border/\n             *         2px border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.borderWidth\n             */\n            /**\n             * The background color or gradient for the outer chart area.\n             *\n             * @see In styled mode, the background is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The background color or gradient for the plot area.\n             *\n             * @see In styled mode, the plot background is set with the\n             *      `.highcharts-plot-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption chart.plotBackgroundColor\n             */\n            /**\n             * The URL for an image to use as the plot background. To set an image\n             * as the background for the entire chart, set a CSS background image\n             * to the container element. Note that for the image to be applied to\n             * exported charts, its URL needs to be accessible by the export server.\n             *\n             * @see In styled mode, a plot background image can be set with the\n             *      `.highcharts-plot-background` class and a [custom pattern](\n             *      https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundimage/\n             *         Skies\n             * @sample {highstock} stock/chart/plotbackgroundimage/\n             *         Skies\n             *\n             * @type      {string}\n             * @apioption chart.plotBackgroundImage\n             */\n            /**\n             * The color of the inner chart or plot area border.\n             *\n             * @see In styled mode, a plot border stroke can be set with the\n             *      `.highcharts-plot-border` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbordercolor/\n             *         Blue border\n             * @sample {highstock} stock/chart/plotborder/\n             *         Blue border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            plotBorderColor: \"#cccccc\" /* Palette.neutralColor20 */\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartDefaults;\n    });\n    _registerModule(_modules, 'Core/Color/Palettes.js', [], function () {\n        /*\n         * Series palettes for Highcharts. Series colors are defined in highcharts.css.\n         * **Do not edit this file!** This file is generated using the 'gulp palette' task.\n         */\n        const SeriesPalettes = {\n            /**\n             * Colors for data series and points\n             */\n            colors: [\n                '#2caffe',\n                '#544fc5',\n                '#00e272',\n                '#fe6a35',\n                '#6b8abc',\n                '#d568fb',\n                '#2ee0ca',\n                '#fa4b42',\n                '#feb56a',\n                '#91e8e1'\n            ]\n        };\n\n        return SeriesPalettes;\n    });\n    _registerModule(_modules, 'Core/Time.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { defined, error, extend, isNumber, isObject, merge, objectEach, pad, pick, splat, timeUnits } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const hasNewSafariBug = H.isSafari &&\n            win.Intl &&\n            win.Intl.DateTimeFormat.prototype.formatRange;\n        // To do: Remove this when we no longer need support for Safari < v14.1\n        const hasOldSafariBug = H.isSafari &&\n            win.Intl &&\n            !win.Intl.DateTimeFormat.prototype.formatRange;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The Time class. Time settings are applied in general for each page using\n         * `Highcharts.setOptions`, or individually for each Chart item through the\n         * [time](https://api.highcharts.com/highcharts/time) options set.\n         *\n         * The Time object is available from {@link Highcharts.Chart#time},\n         * which refers to  `Highcharts.time` if no individual time settings are\n         * applied.\n         *\n         * @example\n         * // Apply time settings globally\n         * Highcharts.setOptions({\n         *     time: {\n         *         timezone: 'Europe/London'\n         *     }\n         * });\n         *\n         * // Apply time settings by instance\n         * let chart = Highcharts.chart('container', {\n         *     time: {\n         *         timezone: 'America/New_York'\n         *     },\n         *     series: [{\n         *         data: [1, 4, 3, 5]\n         *     }]\n         * });\n         *\n         * // Use the Time object\n         * console.log(\n         *        'Current time in New York',\n         *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n         * );\n         *\n         * @since 6.0.5\n         *\n         * @class\n         * @name Highcharts.Time\n         *\n         * @param {Highcharts.TimeOptions} [options]\n         * Time options as defined in [chart.options.time](/highcharts/time).\n         */\n        class Time {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = {};\n                this.useUTC = false;\n                this.variableTimezone = false;\n                this.Date = win.Date;\n                /**\n                 * Get the time zone offset based on the current timezone information as\n                 * set in the global options.\n                 *\n                 * @function Highcharts.Time#getTimezoneOffset\n                 *\n                 * @param {number} timestamp\n                 *        The JavaScript timestamp to inspect.\n                 *\n                 * @return {number}\n                 *         The timezone offset in minutes compared to UTC.\n                 */\n                this.getTimezoneOffset = this.timezoneOffsetFunction();\n                this.update(options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Time units used in `Time.get` and `Time.set`\n             *\n             * @typedef {\"Date\"|\"Day\"|\"FullYear\"|\"Hours\"|\"Milliseconds\"|\"Minutes\"|\"Month\"|\"Seconds\"} Highcharts.TimeUnitValue\n             */\n            /**\n             * Get the value of a date object in given units, and subject to the Time\n             * object's current timezone settings. This function corresponds directly to\n             * JavaScripts `Date.getXXX / Date.getUTCXXX`, so instead of calling\n             * `date.getHours()` or `date.getUTCHours()` we will call\n             * `time.get('Hours')`.\n             *\n             * @function Highcharts.Time#get\n             *\n             * @param {Highcharts.TimeUnitValue} unit\n             * @param {Date} date\n             *\n             * @return {number}\n             *        The given time unit\n             */\n            get(unit, date) {\n                if (this.variableTimezone || this.timezoneOffset) {\n                    const realMs = date.getTime();\n                    const ms = realMs - this.getTimezoneOffset(date);\n                    date.setTime(ms); // Temporary adjust to timezone\n                    const ret = date['getUTC' + unit]();\n                    date.setTime(realMs); // Reset\n                    return ret;\n                }\n                // UTC time with no timezone handling\n                if (this.useUTC) {\n                    return date['getUTC' + unit]();\n                }\n                // Else, local time\n                return date['get' + unit]();\n            }\n            /**\n             * Set the value of a date object in given units, and subject to the Time\n             * object's current timezone settings. This function corresponds directly to\n             * JavaScripts `Date.setXXX / Date.setUTCXXX`, so instead of calling\n             * `date.setHours(0)` or `date.setUTCHours(0)` we will call\n             * `time.set('Hours', 0)`.\n             *\n             * @function Highcharts.Time#set\n             *\n             * @param {Highcharts.TimeUnitValue} unit\n             * @param {Date} date\n             * @param {number} value\n             *\n             * @return {number}\n             *        The epoch milliseconds of the updated date\n             */\n            set(unit, date, value) {\n                // UTC time with timezone handling\n                if (this.variableTimezone || this.timezoneOffset) {\n                    // For lower order time units, just set it directly using UTC\n                    // time\n                    if (unit === 'Milliseconds' ||\n                        unit === 'Seconds' ||\n                        (unit === 'Minutes' &&\n                            this.getTimezoneOffset(date) % 3600000 === 0) // #13961\n                    ) {\n                        return date['setUTC' + unit](value);\n                    }\n                    // Higher order time units need to take the time zone into\n                    // account\n                    // Adjust by timezone\n                    const offset = this.getTimezoneOffset(date);\n                    let ms = date.getTime() - offset;\n                    date.setTime(ms);\n                    date['setUTC' + unit](value);\n                    const newOffset = this.getTimezoneOffset(date);\n                    ms = date.getTime() + newOffset;\n                    return date.setTime(ms);\n                }\n                // UTC time with no timezone handling\n                if (this.useUTC ||\n                    // Leap calculation in UTC only\n                    (hasNewSafariBug && unit === 'FullYear')) {\n                    return date['setUTC' + unit](value);\n                }\n                // Else, local time\n                return date['set' + unit](value);\n            }\n            /**\n             * Update the Time object with current options. It is called internally on\n             * initializing Highcharts, after running `Highcharts.setOptions` and on\n             * `Chart.update`.\n             *\n             * @private\n             * @function Highcharts.Time#update\n             *\n             * @param {Highcharts.TimeOptions} [options]\n             *\n             */\n            update(options = {}) {\n                const useUTC = pick(options.useUTC, true);\n                this.options = options = merge(true, this.options, options);\n                // Allow using a different Date class\n                this.Date = options.Date || win.Date || Date;\n                this.useUTC = useUTC;\n                this.timezoneOffset = (useUTC && options.timezoneOffset) || void 0;\n                this.getTimezoneOffset = this.timezoneOffsetFunction();\n                /*\n                 * The time object has options allowing for variable time zones, meaning\n                 * the axis ticks or series data needs to consider this.\n                 */\n                this.variableTimezone = useUTC && !!(options.getTimezoneOffset ||\n                    options.timezone);\n            }\n            /**\n             * Make a time and returns milliseconds. Interprets the inputs as UTC time,\n             * local time or a specific timezone time depending on the current time\n             * settings.\n             *\n             * @function Highcharts.Time#makeTime\n             *\n             * @param {number} year\n             *        The year\n             *\n             * @param {number} month\n             *        The month. Zero-based, so January is 0.\n             *\n             * @param {number} [date=1]\n             *        The day of the month\n             *\n             * @param {number} [hours=0]\n             *        The hour of the day, 0-23.\n             *\n             * @param {number} [minutes=0]\n             *        The minutes\n             *\n             * @param {number} [seconds=0]\n             *        The seconds\n             *\n             * @return {number}\n             *         The time in milliseconds since January 1st 1970.\n             */\n            makeTime(year, month, date, hours, minutes, seconds) {\n                let d, offset, newOffset;\n                if (this.useUTC) {\n                    d = this.Date.UTC.apply(0, arguments);\n                    offset = this.getTimezoneOffset(d);\n                    d += offset;\n                    newOffset = this.getTimezoneOffset(d);\n                    if (offset !== newOffset) {\n                        d += newOffset - offset;\n                        // A special case for transitioning from summer time to winter time.\n                        // When the clock is set back, the same time is repeated twice, i.e.\n                        // 02:30 am is repeated since the clock is set back from 3 am to\n                        // 2 am. We need to make the same time as local Date does.\n                    }\n                    else if (offset - 36e5 === this.getTimezoneOffset(d - 36e5) &&\n                        !hasOldSafariBug) {\n                        d -= 36e5;\n                    }\n                }\n                else {\n                    d = new this.Date(year, month, pick(date, 1), pick(hours, 0), pick(minutes, 0), pick(seconds, 0)).getTime();\n                }\n                return d;\n            }\n            /**\n             * Sets the getTimezoneOffset function. If the `timezone` option is set, a\n             * default getTimezoneOffset function with that timezone is returned. If\n             * a `getTimezoneOffset` option is defined, it is returned. If neither are\n             * specified, the function using the `timezoneOffset` option or 0 offset is\n             * returned.\n             *\n             * @private\n             * @function Highcharts.Time#timezoneOffsetFunction\n             *\n             * @return {Function}\n             *         A getTimezoneOffset function\n             */\n            timezoneOffsetFunction() {\n                const time = this, options = this.options, getTimezoneOffset = options.getTimezoneOffset;\n                if (!this.useUTC) {\n                    return (timestamp) => new Date(timestamp.toString()).getTimezoneOffset() * 60000;\n                }\n                if (options.timezone) {\n                    return (timestamp) => {\n                        try {\n                            // Cache the DateTimeFormat instances for performance\n                            // (#20720)\n                            const cacheKey = `shortOffset,${options.timezone || ''}`, dateTimeFormat = Time.formatCache[cacheKey] = (Time.formatCache[cacheKey] ||\n                                // eslint-disable-next-line new-cap\n                                Intl.DateTimeFormat('en', {\n                                    timeZone: options.timezone,\n                                    timeZoneName: 'shortOffset'\n                                }));\n                            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                            const [date, gmt, hours, colon, minutes = 0] = dateTimeFormat\n                                .format(timestamp)\n                                .split(/(GMT|:)/)\n                                .map(Number), offset = -(hours + minutes / 60) * 60 * 60000;\n                            // Possible future NaNs stop here\n                            if (isNumber(offset)) {\n                                return offset;\n                            }\n                        }\n                        catch (e) {\n                            error(34);\n                        }\n                        return 0;\n                    };\n                }\n                // If not timezone is set, look for the getTimezoneOffset callback\n                if (this.useUTC && getTimezoneOffset) {\n                    return (timestamp) => getTimezoneOffset(timestamp.valueOf()) * 60000;\n                }\n                // Last, use the `timezoneOffset` option if set\n                return () => (time.timezoneOffset || 0) * 60000;\n            }\n            /**\n             * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970)\n             * into a human readable date string. The available format keys are listed\n             * below. Additional formats can be given in the\n             * {@link Highcharts.dateFormats} hook.\n             *\n             * Supported format keys:\n             * - `%a`: Short weekday, like 'Mon'\n             * - `%A`: Long weekday, like 'Monday'\n             * - `%d`: Two digit day of the month, 01 to 31\n             * - `%e`: Day of the month, 1 through 31\n             * - `%w`: Day of the week, 0 through 6\n             * - `%b`: Short month, like 'Jan'\n             * - `%B`: Long month, like 'January'\n             * - `%m`: Two digit month number, 01 through 12\n             * - `%y`: Two digits year, like 09 for 2009\n             * - `%Y`: Four digits year, like 2009\n             * - `%H`: Two digits hours in 24h format, 00 through 23\n             * - `%k`: Hours in 24h format, 0 through 23\n             * - `%I`: Two digits hours in 12h format, 00 through 11\n             * - `%l`: Hours in 12h format, 1 through 12\n             * - `%M`: Two digits minutes, 00 through 59\n             * - `%p`: Upper case AM or PM\n             * - `%P`: Lower case AM or PM\n             * - `%S`: Two digits seconds, 00 through 59\n             * - `%L`: Milliseconds (naming from Ruby)\n             *\n             * @example\n             * const time = new Highcharts.Time();\n             * const s = time.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2020, 0, 1));\n             * console.log(s); // => 2020-01-01 00:00:00\n             *\n             * @function Highcharts.Time#dateFormat\n             *\n             * @param {string} format\n             *        The desired format where various time representations are\n             *        prefixed with %.\n             *\n             * @param {number} [timestamp]\n             *        The JavaScript timestamp.\n             *\n             * @param {boolean} [capitalize=false]\n             *        Upper case first letter in the return.\n             *\n             * @return {string}\n             *         The formatted date.\n             */\n            dateFormat(format, timestamp, capitalize) {\n                if (!defined(timestamp) || isNaN(timestamp)) {\n                    return (H.defaultOptions.lang &&\n                        H.defaultOptions.lang.invalidDate ||\n                        '');\n                }\n                format = pick(format, '%Y-%m-%d %H:%M:%S');\n                const time = this, date = new this.Date(timestamp), \n                // Get the basic time values\n                hours = this.get('Hours', date), day = this.get('Day', date), dayOfMonth = this.get('Date', date), month = this.get('Month', date), fullYear = this.get('FullYear', date), lang = H.defaultOptions.lang, langWeekdays = (lang && lang.weekdays), shortWeekdays = (lang && lang.shortWeekdays), \n                // List all format keys. Custom formats can be added from the\n                // outside.\n                replacements = extend({\n                    // Day\n                    // Short weekday, like 'Mon'\n                    a: shortWeekdays ?\n                        shortWeekdays[day] :\n                        langWeekdays[day].substr(0, 3),\n                    // Long weekday, like 'Monday'\n                    A: langWeekdays[day],\n                    // Two digit day of the month, 01 to 31\n                    d: pad(dayOfMonth),\n                    // Day of the month, 1 through 31\n                    e: pad(dayOfMonth, 2, ' '),\n                    // Day of the week, 0 through 6\n                    w: day,\n                    // Week (none implemented)\n                    // 'W': weekNumber(),\n                    // Month\n                    // Short month, like 'Jan'\n                    b: lang.shortMonths[month],\n                    // Long month, like 'January'\n                    B: lang.months[month],\n                    // Two digit month number, 01 through 12\n                    m: pad(month + 1),\n                    // Month number, 1 through 12 (#8150)\n                    o: month + 1,\n                    // Year\n                    // Two digits year, like 09 for 2009\n                    y: fullYear.toString().substr(2, 2),\n                    // Four digits year, like 2009\n                    Y: fullYear,\n                    // Time\n                    // Two digits hours in 24h format, 00 through 23\n                    H: pad(hours),\n                    // Hours in 24h format, 0 through 23\n                    k: hours,\n                    // Two digits hours in 12h format, 00 through 11\n                    I: pad((hours % 12) || 12),\n                    // Hours in 12h format, 1 through 12\n                    l: (hours % 12) || 12,\n                    // Two digits minutes, 00 through 59\n                    M: pad(this.get('Minutes', date)),\n                    // Upper case AM or PM\n                    p: hours < 12 ? 'AM' : 'PM',\n                    // Lower case AM or PM\n                    P: hours < 12 ? 'am' : 'pm',\n                    // Two digits seconds, 00 through 59\n                    S: pad(this.get('Seconds', date)),\n                    // Milliseconds (naming from Ruby)\n                    L: pad(Math.floor(timestamp % 1000), 3)\n                }, H.dateFormats);\n                // Do the replaces\n                objectEach(replacements, function (val, key) {\n                    // Regex would do it in one line, but this is faster\n                    while (format.indexOf('%' + key) !== -1) {\n                        format = format.replace('%' + key, typeof val === 'function' ? val.call(time, timestamp) : val);\n                    }\n                });\n                // Optionally capitalize the string and return\n                return capitalize ?\n                    (format.substr(0, 1).toUpperCase() +\n                        format.substr(1)) :\n                    format;\n            }\n            /**\n             * Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\n             * an object.\n             * @private\n             * @param {string|Array<T>|Highcharts.Dictionary<T>} f\n             * General format description\n             * @return {Highcharts.Dictionary<T>}\n             * The object definition\n             */\n            resolveDTLFormat(f) {\n                if (!isObject(f, true)) { // Check for string or array\n                    f = splat(f);\n                    return {\n                        main: f[0],\n                        from: f[1],\n                        to: f[2]\n                    };\n                }\n                return f;\n            }\n            /**\n             * Return an array with time positions distributed on round time values\n             * right and right after min and max. Used in datetime axes as well as for\n             * grouping data on a datetime axis.\n             *\n             * @function Highcharts.Time#getTimeTicks\n             *\n             * @param {Highcharts.TimeNormalizedObject} normalizedInterval\n             *        The interval in axis values (ms) and the count\n             *\n             * @param {number} [min]\n             *        The minimum in axis values\n             *\n             * @param {number} [max]\n             *        The maximum in axis values\n             *\n             * @param {number} [startOfWeek=1]\n             *\n             * @return {Highcharts.AxisTickPositionsArray}\n             * Time positions\n             */\n            getTimeTicks(normalizedInterval, min, max, startOfWeek) {\n                const time = this, Date = time.Date, tickPositions = [], higherRanks = {}, \n                // When crossing DST, use the max. Resolves #6278.\n                minDate = new Date(min), interval = normalizedInterval.unitRange, count = normalizedInterval.count || 1;\n                let i, minYear, // Used in months and years as a basis for Date.UTC()\n                variableDayLength, minDay;\n                startOfWeek = pick(startOfWeek, 1);\n                if (defined(min)) { // #1300\n                    time.set('Milliseconds', minDate, interval >= timeUnits.second ?\n                        0 : // #3935\n                        count * Math.floor(time.get('Milliseconds', minDate) / count)); // #3652, #3654\n                    if (interval >= timeUnits.second) { // Second\n                        time.set('Seconds', minDate, interval >= timeUnits.minute ?\n                            0 : // #3935\n                            count * Math.floor(time.get('Seconds', minDate) / count));\n                    }\n                    if (interval >= timeUnits.minute) { // Minute\n                        time.set('Minutes', minDate, interval >= timeUnits.hour ?\n                            0 :\n                            count * Math.floor(time.get('Minutes', minDate) / count));\n                    }\n                    if (interval >= timeUnits.hour) { // Hour\n                        time.set('Hours', minDate, interval >= timeUnits.day ?\n                            0 :\n                            count * Math.floor(time.get('Hours', minDate) / count));\n                    }\n                    if (interval >= timeUnits.day) { // Day\n                        time.set('Date', minDate, interval >= timeUnits.month ?\n                            1 :\n                            Math.max(1, count * Math.floor(time.get('Date', minDate) / count)));\n                    }\n                    if (interval >= timeUnits.month) { // Month\n                        time.set('Month', minDate, interval >= timeUnits.year ? 0 :\n                            count * Math.floor(time.get('Month', minDate) / count));\n                        minYear = time.get('FullYear', minDate);\n                    }\n                    if (interval >= timeUnits.year) { // Year\n                        minYear -= minYear % count;\n                        time.set('FullYear', minDate, minYear);\n                    }\n                    // Week is a special case that runs outside the hierarchy\n                    if (interval === timeUnits.week) {\n                        // Get start of current week, independent of count\n                        minDay = time.get('Day', minDate);\n                        time.set('Date', minDate, (time.get('Date', minDate) -\n                            minDay + startOfWeek +\n                            // We don't want to skip days that are before\n                            // startOfWeek (#7051)\n                            (minDay < startOfWeek ? -7 : 0)));\n                    }\n                    // Get basics for variable time spans\n                    minYear = time.get('FullYear', minDate);\n                    const minMonth = time.get('Month', minDate), minDateDate = time.get('Date', minDate), minHours = time.get('Hours', minDate);\n                    // Redefine min to the floored/rounded minimum time (#7432)\n                    min = minDate.getTime();\n                    // Handle local timezone offset\n                    if ((time.variableTimezone || !time.useUTC) && defined(max)) {\n                        // Detect whether we need to take the DST crossover into\n                        // consideration. If we're crossing over DST, the day length may\n                        // be 23h or 25h and we need to compute the exact clock time for\n                        // each tick instead of just adding hours. This comes at a cost,\n                        // so first we find out if it is needed (#4951).\n                        variableDayLength = (\n                        // Long range, assume we're crossing over.\n                        max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time\n                            // zones.\n                            time.getTimezoneOffset(min) !==\n                                time.getTimezoneOffset(max));\n                    }\n                    // Iterate and add tick positions at appropriate values\n                    let t = minDate.getTime();\n                    i = 1;\n                    while (t < max) {\n                        tickPositions.push(t);\n                        // If the interval is years, use Date.UTC to increase years\n                        if (interval === timeUnits.year) {\n                            t = time.makeTime(minYear + i * count, 0);\n                            // If the interval is months, use Date.UTC to increase months\n                        }\n                        else if (interval === timeUnits.month) {\n                            t = time.makeTime(minYear, minMonth + i * count);\n                            // If we're using global time, the interval is not fixed as it\n                            // jumps one hour at the DST crossover\n                        }\n                        else if (variableDayLength &&\n                            (interval === timeUnits.day || interval === timeUnits.week)) {\n                            t = time.makeTime(minYear, minMonth, minDateDate +\n                                i * count * (interval === timeUnits.day ? 1 : 7));\n                        }\n                        else if (variableDayLength &&\n                            interval === timeUnits.hour &&\n                            count > 1) {\n                            // Make sure higher ranks are preserved across DST (#6797,\n                            // #7621)\n                            t = time.makeTime(minYear, minMonth, minDateDate, minHours + i * count);\n                            // Else, the interval is fixed and we use simple addition\n                        }\n                        else {\n                            t += interval * count;\n                        }\n                        i++;\n                    }\n                    // Push the last time\n                    tickPositions.push(t);\n                    // Handle higher ranks. Mark new days if the time is on midnight\n                    // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold\n                    // to prevent looping over dense data grouping (#6156).\n                    if (interval <= timeUnits.hour && tickPositions.length < 10000) {\n                        tickPositions.forEach(function (t) {\n                            if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            t % 1800000 === 0 &&\n                                // Check for local or global midnight\n                                time.dateFormat('%H%M%S%L', t) === '000000000') {\n                                higherRanks[t] = 'day';\n                            }\n                        });\n                    }\n                }\n                // Record information on the chosen unit - for dynamic label formatter\n                tickPositions.info = extend(normalizedInterval, {\n                    higherRanks,\n                    totalRange: interval * count\n                });\n                return tickPositions;\n            }\n            /**\n             * Get the optimal date format for a point, based on a range.\n             *\n             * @private\n             * @function Highcharts.Time#getDateFormat\n             *\n             * @param {number} range\n             *        The time range\n             *\n             * @param {number} timestamp\n             *        The timestamp of the date\n             *\n             * @param {number} startOfWeek\n             *        An integer representing the first day of the week, where 0 is\n             *        Sunday.\n             *\n             * @param {Highcharts.Dictionary<string>} dateTimeLabelFormats\n             *        A map of time units to formats.\n             *\n             * @return {string}\n             *         The optimal date format for a point.\n             */\n            getDateFormat(range, timestamp, startOfWeek, dateTimeLabelFormats) {\n                const dateStr = this.dateFormat('%m-%d %H:%M:%S.%L', timestamp), blank = '01-01 00:00:00.000', strpos = {\n                    millisecond: 15,\n                    second: 12,\n                    minute: 9,\n                    hour: 6,\n                    day: 3\n                };\n                let n = 'millisecond', \n                // For sub-millisecond data, #4223\n                lastN = n;\n                for (n in timeUnits) { // eslint-disable-line guard-for-in\n                    // If the range is exactly one week and we're looking at a\n                    // Sunday/Monday, go for the week format\n                    if (range === timeUnits.week &&\n                        +this.dateFormat('%w', timestamp) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n                    // The first format that is too great for the range\n                    if (timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] &&\n                        dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n                    // Weeks are outside the hierarchy, only apply them on\n                    // Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n                return this.resolveDTLFormat(dateTimeLabelFormats[n]).main;\n            }\n        }\n        Time.formatCache = {};\n        /* *\n         *\n         * Default export\n         *\n         * */\n        /* *\n         *\n         * API Declarations\n         *\n         * */\n        /**\n         * Normalized interval.\n         *\n         * @interface Highcharts.TimeNormalizedObject\n         */ /**\n        * The count.\n        *\n        * @name Highcharts.TimeNormalizedObject#count\n        * @type {number|undefined}\n        */ /**\n        * The interval in axis values (ms).\n        *\n        * @name Highcharts.TimeNormalizedObject#unitRange\n        * @type {number}\n        */\n        /**\n         * Function of an additional date format specifier.\n         *\n         * @callback Highcharts.TimeFormatCallbackFunction\n         *\n         * @param {number} timestamp\n         *        The time to format.\n         *\n         * @return {string}\n         *         The formatted portion of the date.\n         */\n        /**\n         * Time ticks.\n         *\n         * @interface Highcharts.AxisTickPositionsArray\n         * @extends global.Array<number>\n         */ /**\n        * @name Highcharts.AxisTickPositionsArray#info\n        * @type {Highcharts.TimeTicksInfoObject|undefined}\n        */\n        /**\n         * A callback to return the time zone offset for a given datetime. It\n         * takes the timestamp in terms of milliseconds since January 1 1970,\n         * and returns the timezone offset in minutes. This provides a hook\n         * for drawing time based charts in specific time zones using their\n         * local DST crossover dates, with the help of external libraries.\n         *\n         * @callback Highcharts.TimezoneOffsetCallbackFunction\n         *\n         * @param {number} timestamp\n         * Timestamp in terms of milliseconds since January 1 1970.\n         *\n         * @return {number}\n         * Timezone offset in minutes.\n         */\n        ''; // Keeps doclets above in JS file\n\n        return Time;\n    });\n    _registerModule(_modules, 'Core/Defaults.js', [_modules['Core/Chart/ChartDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Time.js'], _modules['Core/Utilities.js']], function (ChartDefaults, H, Palettes, Time, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice, svg } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Global default settings.\n         *\n         * @name Highcharts.defaultOptions\n         * @type {Highcharts.Options}\n         */ /**\n        * @optionparent\n        * @private\n        */\n        const defaultOptions = {\n            /**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors),\n             * [pie.colors](#plotOptions.pie.colors).\n             *\n             * In styled mode, the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             * @sample {highcharts} highcharts/chart/colors/\n             *         Assign a global color theme\n             * @sample highcharts/members/theme-v10/\n             *         Latest release styled like version 10\n             *\n             * @type    {Array<(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)>}\n             * @default [\n             *     \"#2caffe\",\n             *     \"#544fc5\",\n             *     \"#00e272\",\n             *     \"#fe6a35\",\n             *     \"#6b8abc\",\n             *     \"#d568fb\",\n             *     \"#2ee0ca\",\n             *     \"#fa4b42\",\n             *     \"#feb56a\",\n             *     \"#91e8e1\"\n             * ]\n             */\n            colors: Palettes.colors,\n            /**\n             * Styled mode only. Configuration object for adding SVG definitions for\n             * reusable elements. See [gradients, shadows and\n             * patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\n             * for more information and code examples.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @apioption defs\n             */\n            /**\n             * @ignore-option\n             */\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            /**\n             * The language object is global and it can't be set on each chart\n             * initialization. Instead, use `Highcharts.setOptions` to set it before any\n             * chart is initialized.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     lang: {\n             *         months: [\n             *             'Janvier', 'Février', 'Mars', 'Avril',\n             *             'Mai', 'Juin', 'Juillet', 'Août',\n             *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n             *         ],\n             *         weekdays: [\n             *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n             *             'Jeudi', 'Vendredi', 'Samedi'\n             *         ]\n             *     }\n             * });\n             * ```\n             */\n            lang: {\n                /**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 */\n                loading: 'Loading...',\n                /**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                 *          \"July\", \"August\", \"September\", \"October\", \"November\",\n                 *          \"December\"]\n                 */\n                months: [\n                    'January', 'February', 'March', 'April', 'May', 'June', 'July',\n                    'August', 'September', 'October', 'November', 'December'\n                ],\n                /**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 *          \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n                 */\n                shortMonths: [\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n                    'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n                ],\n                /**\n                 * An array containing the weekday names.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n                 *          \"Friday\", \"Saturday\"]\n                 */\n                weekdays: [\n                    'Sunday', 'Monday', 'Tuesday', 'Wednesday',\n                    'Thursday', 'Friday', 'Saturday'\n                ],\n                /**\n                 * Short week days, starting Sunday. If not specified, Highcharts uses\n                 * the first three letters of the `lang.weekdays` option.\n                 *\n                 * @sample highcharts/lang/shortweekdays/\n                 *         Finnish two-letter abbreviations\n                 *\n                 * @type      {Array<string>}\n                 * @since     4.2.4\n                 * @apioption lang.shortWeekdays\n                 */\n                /**\n                 * What to show in a date field for invalid dates. Defaults to an empty\n                 * string.\n                 *\n                 * @type      {string}\n                 * @since     4.1.8\n                 * @product   highcharts highstock\n                 * @apioption lang.invalidDate\n                 */\n                /**\n                 * The title appearing on hovering the zoom in button. The text itself\n                 * defaults to \"+\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom in\n                 * @product   highmaps\n                 * @apioption lang.zoomIn\n                 */\n                /**\n                 * The title appearing on hovering the zoom out button. The text itself\n                 * defaults to \"-\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom out\n                 * @product   highmaps\n                 * @apioption lang.zoomOut\n                 */\n                /**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments.\n                 *\n                 * @since 1.2.2\n                 */\n                decimalPoint: '.',\n                /**\n                 * [Metric prefixes](https://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the\n                 * positions with `null` causes the full number to be written. Setting\n                 * `numericSymbols` to `undefined` disables shortening altogether.\n                 *\n                 * @sample {highcharts} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n                 * @since   2.3.0\n                 */\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'],\n                /**\n                 * The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\n                 * Use 10000 for Japanese, Korean and various Chinese locales, which\n                 * use symbols for 10^4, 10^8 and 10^12.\n                 *\n                 * @sample highcharts/lang/numericsymbolmagnitude/\n                 *         10000 magnitude for Japanese\n                 *\n                 * @type      {number}\n                 * @default   1000\n                 * @since     5.0.3\n                 * @apioption lang.numericSymbolMagnitude\n                 */\n                /**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoom: 'Reset zoom',\n                /**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoomTitle: 'Reset zoom level 1:1',\n                /**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to a single space character, which is recommended in\n                 * [ISO 31-0](https://en.wikipedia.org/wiki/ISO_31-0#Numbers) and works\n                 * across Anglo-American and continental European languages.\n                 *\n                 * @default \\u0020\n                 * @since   1.2.2\n                 */\n                thousandsSep: ' '\n            },\n            /**\n             * Global options that don't apply to each chart. These options, like\n             * the `lang` options, must be set using the `Highcharts.setOptions`\n             * method.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     global: {\n             *         useUTC: false\n             *     }\n             * });\n             * ```\n             */\n            /**\n             * _Canvg rendering for Android 2.x is removed as of Highcharts 5.0\\.\n             * Use the [libURL](#exporting.libURL) option to configure exporting._\n             *\n             * The URL to the additional file to lazy load for Android 2.x devices.\n             * These devices don't support SVG, so we download a helper file that\n             * contains [canvg](https://github.com/canvg/canvg), its dependency\n             * rbcolor, and our own CanVG Renderer class. To avoid hotlinking to\n             * our site, you can install canvas-tools.js on your own server and\n             * change this option accordingly.\n             *\n             * @deprecated\n             *\n             * @type      {string}\n             * @default   https://code.highcharts.com/{version}/modules/canvas-tools.js\n             * @product   highcharts highmaps\n             * @apioption global.canvasToolsURL\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.useUTC](#time.useUTC) that supports individual time settings\n             * per chart.\n             *\n             * @deprecated\n             *\n             * @type      {boolean}\n             * @apioption global.useUTC\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.Date](#time.Date) that supports individual time settings\n             * per chart.\n             *\n             * @deprecated\n             *\n             * @type      {Function}\n             * @product   highcharts highstock\n             * @apioption global.Date\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.getTimezoneOffset](#time.getTimezoneOffset) that supports\n             * individual time settings per chart.\n             *\n             * @deprecated\n             *\n             * @type      {Function}\n             * @product   highcharts highstock\n             * @apioption global.getTimezoneOffset\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.timezone](#time.timezone) that supports individual time\n             * settings per chart.\n             *\n             * @deprecated\n             *\n             * @type      {string}\n             * @product   highcharts highstock\n             * @apioption global.timezone\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.timezoneOffset](#time.timezoneOffset) that supports individual\n             * time settings per chart.\n             *\n             * @deprecated\n             *\n             * @type      {number}\n             * @product   highcharts highstock\n             * @apioption global.timezoneOffset\n             */\n            global: {},\n            /**\n             * Time options that can apply globally or to individual charts. These\n             * settings affect how `datetime` axes are laid out, how tooltips are\n             * formatted, how series\n             * [pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\n             * the Highcharts Stock range selector handles time.\n             *\n             * The common use case is that all charts in the same Highcharts object\n             * share the same time settings, in which case the global settings are set\n             * using `setOptions`.\n             *\n             * ```js\n             * // Apply time settings globally\n             * Highcharts.setOptions({\n             *     time: {\n             *         timezone: 'Europe/London'\n             *     }\n             * });\n             * // Apply time settings by instance\n             * let chart = Highcharts.chart('container', {\n             *     time: {\n             *         timezone: 'America/New_York'\n             *     },\n             *     series: [{\n             *         data: [1, 4, 3, 5]\n             *     }]\n             * });\n             *\n             * // Use the Time object\n             * console.log(\n             *        'Current time in New York',\n             *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n             * );\n             * ```\n             *\n             * Since v6.0.5, the time options were moved from the `global` object to the\n             * `time` object, and time options can be set on each individual chart.\n             *\n             * @sample {highcharts|highstock}\n             *         highcharts/time/timezone/\n             *         Set the timezone globally\n             * @sample {highcharts}\n             *         highcharts/time/individual/\n             *         Set the timezone per chart instance\n             * @sample {highstock}\n             *         stock/time/individual/\n             *         Set the timezone per chart instance\n             *\n             * @since     6.0.5\n             * @optionparent time\n             */\n            time: {\n                /**\n                 * A custom `Date` class for advanced date handling. For example,\n                 * [JDate](https://github.com/tahajahangir/jdate) can be hooked in to\n                 * handle Jalali dates.\n                 *\n                 * @type      {*}\n                 * @since     4.0.4\n                 * @product   highcharts highstock gantt\n                 */\n                Date: void 0,\n                /**\n                 * A callback to return the time zone offset for a given datetime. It\n                 * takes the timestamp in terms of milliseconds since January 1 1970,\n                 * and returns the timezone offset in minutes. This provides a hook\n                 * for drawing time based charts in specific time zones using their\n                 * local DST crossover dates, with the help of external libraries.\n                 *\n                 * @see [global.timezoneOffset](#global.timezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/gettimezoneoffset/\n                 *         Use moment.js to draw Oslo time regardless of browser locale\n                 *\n                 * @type      {Highcharts.TimezoneOffsetCallbackFunction}\n                 * @since     4.1.0\n                 * @product   highcharts highstock gantt\n                 */\n                getTimezoneOffset: void 0,\n                /**\n                 * A named time zone. Supported time zone names rely on the browser\n                 * implementations, as described in the [mdn\n                 * docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#timezone).\n                 * If the given time zone is not recognized by the browser, Highcharts\n                 * provides a warning and falls back to returning a 0 offset,\n                 * corresponding to the UCT time zone.\n                 *\n                 * Until v11.2.0, this option depended on moment.js.\n                 *\n                 * @see [getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezone/ Europe/Oslo\n                 *\n                 * @type      {string}\n                 * @since     5.0.7\n                 * @product   highcharts highstock gantt\n                 */\n                timezone: void 0,\n                /**\n                 * The timezone offset in minutes. Positive values are west, negative\n                 * values are east of UTC, as in the ECMAScript\n                 * [getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n                 * method. Use this to display UTC based data in a predefined time zone.\n                 *\n                 * @see [time.getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezoneoffset/\n                 *         Timezone offset\n                 *\n                 * @since     3.0.8\n                 * @product   highcharts highstock gantt\n                 */\n                timezoneOffset: 0,\n                /**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * @sample {highcharts} highcharts/time/useutc-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/time/useutc-false/\n                 *         False\n                 */\n                useUTC: true\n            },\n            chart: ChartDefaults,\n            /**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/\n             *         Title options demonstrated\n             */\n            title: {\n                /**\n                 * When the title is floating, the plot area will not move to make space\n                 * for it.\n                 *\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/\n                 *         False by default\n                 * @sample {highcharts} highcharts/title/floating/\n                 *         True - title on top of the plot area\n                 * @sample {highstock} stock/chart/title-floating/\n                 *         True - title on top of the plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption title.floating\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption title.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\n                 * as if [floating](#title.floating) were `true`.\n                 *\n                 * @sample {highcharts} highcharts/title/verticalalign/\n                 *         Chart title in bottom right corner\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption title.verticalAlign\n                 */\n                /**\n                 * The x position of the title relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption title.x\n                 */\n                /**\n                 * The y position of the title relative to the alignment within\n                 * [chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](\n                 * #chart.spacingBottom). By default it depends on the font size.\n                 *\n                 * @sample {highcharts} highcharts/title/y/\n                 *         Title inside the plot area\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption title.y\n                 */\n                /**\n                 * CSS styles for the title. Use this for font styling, but use `align`,\n                 * `x` and `y` for text alignment.\n                 *\n                 * In styled mode, the title style is given in the `.highcharts-title`\n                 * class.\n                 *\n                 * @sample {highcharts} highcharts/title/style/\n                 *         Custom color and weight\n                 * @sample {highstock} stock/chart/title-style/\n                 *         Custom color and weight\n                 * @sample highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {highcharts|highmaps} { \"color\": \"#333333\", \"fontSize\": \"18px\" }\n                 * @default   {highstock} { \"color\": \"#333333\", \"fontSize\": \"16px\" }\n                 */\n                style: {\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    fontWeight: 'bold'\n                },\n                /**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `undefined`.\n                 *\n                 * @sample {highcharts} highcharts/title/text/\n                 *         Custom title\n                 * @sample {highstock} stock/chart/title-text/\n                 *         Custom title\n                 *\n                 * @default {highcharts|highmaps} Chart title\n                 * @default {highstock} undefined\n                 */\n                text: 'Chart title',\n                /**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @sample {highcharts} highcharts/title/margin-50/\n                 *         A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/\n                 *         The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/\n                 *         A chart title margin of 50\n                 *\n                 * @since 2.1\n                 */\n                margin: 15,\n                /**\n                 * Adjustment made to the title width, normally to reserve space for\n                 * the exporting burger menu.\n                 *\n                 * @sample highcharts/title/widthadjust/\n                 *         Wider menu, greater padding\n                 *\n                 * @since 4.2.5\n                 */\n                widthAdjust: -44\n            },\n            /**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highmaps} maps/title/subtitle/\n             *         Subtitle options demonstrated\n             */\n            subtitle: {\n                /**\n                 * When the subtitle is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/floating/\n                 *         Floating title and subtitle\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote floating at bottom right of plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption subtitle.floating\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 * @apioption subtitle.style\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption subtitle.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\n                 * floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption subtitle.verticalAlign\n                 */\n                /**\n                 * The x position of the subtitle relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption subtitle.x\n                 */\n                /**\n                 * The y position of the subtitle relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\n                 * is laid out below the title unless the title is floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption subtitle.y\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The subtitle of the chart.\n                 *\n                 * @sample {highcharts|highstock} highcharts/subtitle/text/\n                 *         Custom subtitle\n                 * @sample {highcharts|highstock} highcharts/subtitle/text-formatted/\n                 *         Formatted and linked text.\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at bottom right of plot area\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * Adjustment made to the subtitle width, normally to reserve space\n                 * for the exporting burger menu.\n                 *\n                 * @see [title.widthAdjust](#title.widthAdjust)\n                 *\n                 * @sample highcharts/title/widthadjust/\n                 *         Wider menu, greater padding\n                 *\n                 * @since 4.2.5\n                 */\n                widthAdjust: -44\n            },\n            /**\n             * The chart's caption, which will render below the chart and will be part\n             * of exported charts. The caption can be updated after chart initialization\n             * through the `Chart.update` or `Chart.caption.update` methods.\n             *\n             * @sample highcharts/caption/text/\n             *         A chart with a caption\n             * @since  7.2.0\n             */\n            caption: {\n                /**\n                 * When the caption is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.floating\n                 */\n                /**\n                 * The margin between the caption and the plot area.\n                 */\n                margin: 15,\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.useHTML\n                 */\n                /**\n                 * The x position of the caption relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption caption.x\n                 */\n                /**\n                 * The y position of the caption relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`.\n                 *\n                 * @type      {number}\n                 * @apioption caption.y\n                 */\n                /**\n                 * CSS styles for the caption.\n                 *\n                 * In styled mode, the caption style is given in the\n                 * `.highcharts-caption` class.\n                 *\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The caption text of the chart.\n                 *\n                 * @sample {highcharts} highcharts/caption/text/\n                 *         Custom caption\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the caption. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * The vertical alignment of the caption. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\n                 * floating.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'bottom'\n            },\n            /**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](\n             * #plotOptions.series) object. Then options for all series of a specific\n             * type are given in the plotOptions of that type, for example\n             * `plotOptions.line`. Next, options for one single series are given in\n             * [the series array](#series).\n             */\n            plotOptions: {},\n            /**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and create\n             * [custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */\n            legend: {\n                /**\n                 * The background color of the legend.\n                 *\n                 * @see In styled mode, the legend background fill can be applied with\n                 *      the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/backgroundcolor/\n                 *         Yellowish background\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption legend.backgroundColor\n                 */\n                /**\n                 * The width of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke width can be applied\n                 *      with the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderwidth/\n                 *         2px border width\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption legend.borderWidth\n                 */\n                /**\n                 * Enable or disable the legend. There is also a series-specific option,\n                 * [showInLegend](#plotOptions.series.showInLegend), that can hide the\n                 * series from the legend. In some series types this is `false` by\n                 * default, so it must set to `true` in order to show the legend for the\n                 * series.\n                 *\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 *\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @default {gantt} false\n                 */\n                enabled: true,\n                /**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/align/\n                 *         Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * If the [layout](legend.layout) is `horizontal` and the legend items\n                 * span over two lines or more, whether to align the items into vertical\n                 * columns. Setting this to `false` makes room for more items, but will\n                 * look more messy.\n                 *\n                 * @since 6.1.0\n                 */\n                alignColumns: true,\n                /**\n                 * A CSS class name to apply to the legend group.\n                 */\n                className: 'highcharts-no-tooltip',\n                /**\n                 * When the legend is floating, the plot area ignores it and is allowed\n                 * to be placed below it.\n                 *\n                 * @sample {highcharts} highcharts/legend/floating-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/legend/floating-true/\n                 *         True\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Floating legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption legend.floating\n                 */\n                /**\n                 * The layout of the legend items. Can be one of `horizontal` or\n                 * `vertical` or `proximate`. When `proximate`, the legend items will be\n                 * placed as close as possible to the graphs they're representing,\n                 * except in inverted charts or when the legend position doesn't allow\n                 * it.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/\n                 *         Vertical\n                 * @sample highcharts/legend/layout-proximate\n                 *         Labels proximate to the data\n                 * @sample {highstock} stock/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/\n                 *         Vertical with color axis gradient\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\", \"proximate\"]\n                 */\n                layout: 'horizontal',\n                /**\n                 * In a legend with horizontal layout, the itemDistance defines the\n                 * pixel distance between each item.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 * @sample {highstock} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 *\n                 * @type      {number}\n                 * @default   {highcharts} 20\n                 * @default   {highstock} 20\n                 * @default   {highmaps} 8\n                 * @since     3.0.3\n                 * @apioption legend.itemDistance\n                 */\n                /**\n                 * The pixel bottom margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginBottom: 2,\n                /**\n                 * The pixel top margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginTop: 2,\n                /**\n                 * The width for each legend item. By default the items are laid out\n                 * successively. In a [horizontal layout](legend.layout), if the items\n                 * are laid out across two rows or more, they will be vertically aligned\n                 * depending on the [legend.alignColumns](legend.alignColumns) option.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemwidth-default/\n                 *         Undefined by default\n                 * @sample {highcharts} highcharts/legend/itemwidth-80/\n                 *         80 for aligned legend items\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption legend.itemWidth\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for each legend label. Available variables relates to properties on\n                 * the series, or the point in case of pies.\n                 *\n                 * @type      {string}\n                 * @default   {name}\n                 * @since     1.3\n                 * @apioption legend.labelFormat\n                 */\n                /* eslint-disable valid-jsdoc */\n                /**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case of\n                 * pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps the context can also be a data class in case of a\n                 * `colorAxis`.\n                 *\n                 * @sample {highcharts} highcharts/legend/labelformatter/\n                 *         Add text\n                 * @sample {highmaps} maps/legend/labelformatter/\n                 *         Data classes with label formatter\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Point|Series>}\n                 */\n                labelFormatter: function () {\n                    // eslint-enable valid-jsdoc\n                    return this.name;\n                },\n                /**\n                 * Line height for the legend items. Deprecated as of 2.1\\. Instead,\n                 * the line height for each item can be set using\n                 * `itemStyle.lineHeight`, and the padding between items using\n                 * `itemMarginTop` and `itemMarginBottom`.\n                 *\n                 * @sample {highcharts} highcharts/legend/lineheight/\n                 *         Setting padding\n                 *\n                 * @deprecated\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @since     2.0\n                 * @product   highcharts gantt\n                 * @apioption legend.lineHeight\n                 */\n                /**\n                 * If the plot area sized is calculated automatically and the legend is\n                 * not floating, the legend margin is the space between the legend and\n                 * the axis labels or plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/margin-default/\n                 *         12 pixels by default\n                 * @sample {highcharts} highcharts/legend/margin-30/\n                 *         30 pixels\n                 *\n                 * @type      {number}\n                 * @default   12\n                 * @since     2.1\n                 * @apioption legend.margin\n                 */\n                /**\n                 * Maximum pixel height for the legend. When the maximum height is\n                 * extended, navigation will show.\n                 *\n                 * @type      {number}\n                 * @since     2.3.0\n                 * @apioption legend.maxHeight\n                 */\n                /**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke can be applied with the\n                 *      `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/bordercolor/\n                 *         Brown border\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                /**\n                 * The border corner radius of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderradius-default/\n                 *         Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/\n                 *         5px rounded\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 */\n                borderRadius: 0,\n                /**\n                 * Options for the paging or navigation appearing when the legend is\n                 * overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to\n                 * [increase the chart height in\n                 * export](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/).\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 */\n                navigation: {\n                    /**\n                     * How to animate the pages when navigating up or down. A value of\n                     * `true` applies the default navigation given in the\n                     * `chart.animation` option. Additional options can be given as an\n                     * object containing values for easing and duration.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @default   true\n                     * @since     2.2.4\n                     * @apioption legend.navigation.animation\n                     */\n                    /**\n                     * The pixel size of the up and down arrows in the legend paging\n                     * navigation.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {number}\n                     * @default   12\n                     * @since     2.2.4\n                     * @apioption legend.navigation.arrowSize\n                     */\n                    /**\n                     * Whether to enable the legend navigation. In most cases, disabling\n                     * the navigation results in an unwanted overflow.\n                     *\n                     * See also the\n                     * [adapt chart to legend](https://github.com/highcharts/adapt-chart-to-legend)\n                     * plugin for a solution to extend the chart height to make room for\n                     * the legend, optionally in exported charts only.\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     4.2.4\n                     * @apioption legend.navigation.enabled\n                     */\n                    /**\n                     * Text styles for the legend page navigation.\n                     *\n                     * @see In styled mode, the navigation items are styled with the\n                     *      `.highcharts-legend-navigation` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {Highcharts.CSSObject}\n                     * @since     2.2.4\n                     * @apioption legend.navigation.style\n                     */\n                    style: {\n                        fontSize: '0.8em'\n                    },\n                    /**\n                     * The color for the active up or down arrow in the legend page\n                     * navigation.\n                     *\n                     * @see In styled mode, the active arrow be styled with the\n                     *      `.highcharts-legend-nav-active` class.\n                     *\n                     * @sample  {highcharts} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     * @sample  {highstock} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    activeColor: \"#0022ff\" /* Palette.highlightColor100 */,\n                    /**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @see In styled mode, the inactive arrow be styled with the\n                     *      `.highcharts-legend-nav-inactive` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    inactiveColor: \"#cccccc\" /* Palette.neutralColor20 */\n                },\n                /**\n                 * The inner padding of the legend box.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @type      {number}\n                 * @default   8\n                 * @since     2.2.0\n                 * @apioption legend.padding\n                 */\n                /**\n                 * Whether to reverse the order of the legend items compared to the\n                 * order of the series or points as defined in the configuration object.\n                 *\n                 * @see [yAxis.reversedStacks](#yAxis.reversedStacks),\n                 *      [series.legendIndex](#series.legendIndex)\n                 *\n                 * @sample {highcharts} highcharts/legend/reversed/\n                 *         Stacked bar with reversed legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.2.5\n                 * @apioption legend.reversed\n                 */\n                /**\n                 * Whether to show the symbol on the right side of the text rather than\n                 * the left side. This is common in Arabic and Hebrew.\n                 *\n                 * @sample {highcharts} highcharts/legend/rtl/\n                 *         Symbol to the right\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption legend.rtl\n                 */\n                /**\n                 * CSS styles for the legend area. In the 1.x versions the position\n                 * of the legend area was determined by CSS. In 2.x, the position is\n                 * determined by properties like `align`, `verticalAlign`, `x` and `y`,\n                 * but the styles are still parsed for backwards compatibility.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @product   highcharts highstock\n                 * @apioption legend.style\n                 */\n                /**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `undefined` to wrap\n                 * text instead. A `width` property can be added to control the text\n                 * width.\n                 *\n                 * @see In styled mode, the legend items can be styled with the\n                 *      `.highcharts-legend-item` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemstyle/\n                 *         Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"0.75em\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}\n                 */\n                itemStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /**\n                     * @ignore\n                     */\n                    cursor: 'pointer',\n                    /**\n                     * @ignore\n                     */\n                    fontSize: '0.8em',\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'none',\n                    /**\n                     * @ignore\n                     */\n                    textOverflow: 'ellipsis'\n                },\n                /**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @see In styled mode, the hovered legend items can be styled with\n                 *      the `.highcharts-legend-item:hover` pseudo-class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/\n                 *         Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#000000\"}\n                 */\n                itemHoverStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @see In styled mode, the hidden legend items can be styled with\n                 *      the `.highcharts-legend-item-hidden` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/\n                 *         Darker gray color\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#cccccc\"}\n                 */\n                itemHiddenStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'line-through'\n                },\n                /**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {boolean|Highcharts.CSSObject}\n                 */\n                shadow: false,\n                /**\n                 * Default styling for the checkbox next to a legend item when\n                 * `showCheckbox` is true.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 * @default {\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}\n                 */\n                itemCheckboxStyle: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    width: '13px',\n                    /**\n                     * @ignore\n                     */\n                    height: '13px'\n                },\n                /// itemWidth: undefined,\n                /**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @since 5.0.0\n                 */\n                squareSymbol: true,\n                /**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * Note: This option is a default source of color axis height, if the\n                 * [colorAxis.height](https://api.highcharts.com/highcharts/colorAxis.height)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolHeight\n                 */\n                /**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`, effectively\n                 * creating a circle.\n                 *\n                 * For color axis scales, it defaults to 3.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolRadius\n                 */\n                /**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * Note: This option is a default source of color axis width, if the\n                 * [colorAxis.width](https://api.highcharts.com/highcharts/colorAxis.width)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 *\n                 * @type      {number}\n                 * @apioption legend.symbolWidth\n                 */\n                /**\n                 * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the legend item texts.\n                 *\n                 * Prior to 4.1.7, when using HTML, [legend.navigation](\n                 * #legend.navigation) was disabled.\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption legend.useHTML\n                 */\n                /**\n                 * For a color axis with data classes, how many decimals to render in\n                 * the legend. The default preserves the decimals of the range numbers.\n                 *\n                 * @type      {number}\n                 * @default   -1\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueDecimals\n                 */\n                /**\n                 * For a color axis with data classes, a suffix for the range numbers in\n                 * the legend.\n                 *\n                 * @type      {string}\n                 * @default   ''\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueSuffix\n                 */\n                /**\n                 * The width of the legend box. If a number is set, it translates to\n                 * pixels. Since v7.0.2 it allows setting a percent string of the full\n                 * chart width, for example `40%`.\n                 *\n                 * Defaults to the full chart width for legends below or above the\n                 * chart, half the chart width for legends to the left and right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 * @sample {highcharts} highcharts/legend/width-percent/\n                 *         A percent of the chart width\n                 *\n                 * @type      {number|string}\n                 * @since     2.0\n                 * @apioption legend.width\n                 */\n                /**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolpadding/\n                 *         Greater symbol width and padding\n                 */\n                symbolPadding: 5,\n                /**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * When the [layout](#legend.layout) option is `proximate`, the\n                 * `verticalAlign` option doesn't apply.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'bottom',\n                // Width: undefined,\n                /**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 *\n                 * @since 2.0\n                 */\n                x: 0,\n                /**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @since 2.0\n                 */\n                y: 0,\n                /**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/\n                 *         Legend title\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend with title\n                 *\n                 * @since 3.0\n                 */\n                title: {\n                    /**\n                     * A text or HTML string for the title.\n                     *\n                     * @type      {string}\n                     * @since     3.0\n                     * @apioption legend.title.text\n                     */\n                    /**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @see In styled mode, the legend title is styled with the\n                     *      `.highcharts-legend-title` class.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"fontSize\": \"0.75em\", \"fontWeight\": \"bold\"}\n                     * @since   3.0\n                     */\n                    style: {\n                        /**\n                         * @ignore\n                         */\n                        fontSize: '0.8em',\n                        /**\n                         * @ignore\n                         */\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            /**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             */\n            loading: {\n                /**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.hideDuration\n                 */\n                /**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.showDuration\n                 */\n                /**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @see In styled mode, the loading label is styled with the\n                 *      `.highcharts-loading-inner` class.\n                 *\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/\n                 *         Vertically centered\n                 * @sample {highstock} stock/loading/general/\n                 *         Label styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}\n                 * @since   1.2.0\n                 */\n                labelStyle: {\n                    /**\n                     * @ignore\n                     */\n                    fontWeight: 'bold',\n                    /**\n                     * @ignore\n                     */\n                    position: 'relative',\n                    /**\n                     * @ignore\n                     */\n                    top: '45%'\n                },\n                /**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * In styled mode, the loading label is styled with the\n                 * `.highcharts-loading` class.\n                 *\n                 * @sample  {highcharts|highmaps} highcharts/loading/style/\n                 *          Gray plot area, white text\n                 * @sample  {highstock} stock/loading/general/\n                 *          Gray plot area, white text\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}\n                 * @since   1.2.0\n                 */\n                style: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                    /**\n                     * @ignore\n                     */\n                    opacity: 0.5,\n                    /**\n                     * @ignore\n                     */\n                    textAlign: 'center'\n                }\n            },\n            /**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @declare Highcharts.TooltipOptions\n             */\n            tooltip: {\n                /**\n                 * The color of the tooltip border. When `undefined`, the border takes\n                 * the color of the corresponding series or point.\n                 *\n                 * Note that the [borderWidth](#tooltip.borderWidth) is usually 0 by\n                 * default, so the border color may not be visible until a border width\n                 * is set.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ Follow\n                 *         series by default\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-black/ Black\n                 *         border\n                 * @sample {highstock} stock/tooltip/general/ Styled tooltip\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and\n                 *         border demo\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption tooltip.borderColor\n                 */\n                /**\n                 * A CSS class name to apply to the tooltip's container div,\n                 * allowing unique CSS styling for each chart.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.className\n                 */\n                /**\n                 * Since 4.1, the crosshair definitions are moved to the Axis object\n                 * in order for a better separation from the tooltip. See\n                 * [xAxis.crosshair](#xAxis.crosshair).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/crosshairs-x/\n                 *         Enable a crosshair for the x value\n                 *\n                 * @deprecated\n                 *\n                 * @type      {*}\n                 * @default   true\n                 * @apioption tooltip.crosshairs\n                 */\n                /**\n                 * Distance from point to tooltip in pixels.\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @apioption tooltip.distance\n                 */\n                /**\n                 * Whether the tooltip should follow the mouse as it moves across\n                 * columns, pie slices and other point types with an extent.\n                 * By default it behaves this way for pie, polygon, map, sankey\n                 * and wordcloud series by override in the `plotOptions`\n                 * for those series types.\n                 *\n                 * Does not apply if [split](#tooltip.split) is `true`.\n                 *\n                 * For touch moves to behave the same way, [followTouchMove](\n                 * #tooltip.followTouchMove) must be `true` also.\n                 *\n                 * @sample highcharts/tooltip/followpointer/\n                 *         Tooltip follow pointer comparison\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} false\n                 * @default   {highmaps} true\n                 * @since     3.0\n                 * @apioption tooltip.followPointer\n                 */\n                /**\n                 * Whether the tooltip should update as the finger moves on a touch\n                 * device. If this is `true` and [chart.panning](#chart.panning) is\n                 * set,`followTouchMove` will take over one-finger touches, so the user\n                 * needs to use two fingers for zooming and panning.\n                 *\n                 * Note the difference to [followPointer](#tooltip.followPointer) that\n                 * only defines the _position_ of the tooltip. If `followPointer` is\n                 * false in for example a column series, the tooltip will show above or\n                 * below the column, but as `followTouchMove` is true, the tooltip will\n                 * jump from column to column as the user swipes across the plot area.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} true\n                 * @default   {highstock} true\n                 * @default   {highmaps} false\n                 * @since     3.0.1\n                 * @apioption tooltip.followTouchMove\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for the whole tooltip. When format strings are a requirement, it is\n                 * usually more convenient to use `headerFormat`, `pointFormat` and\n                 * `footerFormat`, but the `format` option allows combining them into\n                 * one setting.\n                 *\n                 * The context of the format string is the same as that of the\n                 * `formatter` callback.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/format-shared/\n                 *         Format for shared tooltip\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since 11.1.0\n                 * @apioption tooltip.format\n                 */\n                /**\n                 * Callback function to format the text of the tooltip from scratch. In\n                 * case of single or [shared](#tooltip.shared) tooltips, a string should\n                 * be returned. In case of [split](#tooltip.split) tooltips, it should\n                 * return an array where the first item is the header, and subsequent\n                 * items are mapped to the points. Return `false` to disable tooltip for\n                 * a specific point on series.\n                 *\n                 * A subset of HTML is supported. Unless `useHTML` is true, the HTML of\n                 * the tooltip is parsed and converted to SVG, therefore this isn't a\n                 * complete HTML renderer. The following HTML tags are supported: `b`,\n                 * `br`, `em`, `i`, `span`, `strong`. Spans can be styled with a `style`\n                 * attribute, but only text-related CSS, that is shared with SVG, is\n                 * handled.\n                 *\n                 * The available data in the formatter differ a bit depending on whether\n                 * the tooltip is shared or split, or belongs to a single point. In a\n                 * shared/split tooltip, all properties except `x`, which is common for\n                 * all points, are kept in an array, `this.points`.\n                 *\n                 * Available data are:\n                 *\n                 * - **this.percentage (not shared) /**\n                 *   **this.points[i].percentage (shared)**:\n                 *   Stacked series and pies only. The point's percentage of the total.\n                 *\n                 * - **this.point (not shared) / this.points[i].point (shared)**:\n                 *   The point object. The point name, if defined, is available through\n                 *   `this.point.name`.\n                 *\n                 * - **this.points**:\n                 *   In a shared tooltip, this is an array containing all other\n                 *   properties for each point.\n                 *\n                 * - **this.series (not shared) / this.points[i].series (shared)**:\n                 *   The series object. The series name is available through\n                 *   `this.series.name`.\n                 *\n                 * - **this.total (not shared) / this.points[i].total (shared)**:\n                 *   Stacked series only. The total value at this point's x value.\n                 *\n                 * - **this.x**:\n                 *   The x value. This property is the same regardless of the tooltip\n                 *   being shared or not.\n                 *\n                 * - **this.y (not shared) / this.points[i].y (shared)**:\n                 *   The y value.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/formatter-simple/\n                 *         Simple string formatting\n                 * @sample {highcharts} highcharts/tooltip/formatter-shared/\n                 *         Formatting with shared tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Formatting with split tooltip\n                 * @sample highcharts/tooltip/formatter-conditional-default/\n                 *         Extending default formatter\n                 * @sample {highstock} stock/tooltip/formatter/\n                 *         Formatting with shared tooltip\n                 * @sample {highmaps} maps/tooltip/formatter/\n                 *         String formatting\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.formatter\n                 */\n                /**\n                 * Callback function to format the text of the tooltip for\n                 * visible null points.\n                 * Works analogously to [formatter](#tooltip.formatter).\n                 *\n                 * @sample highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.nullFormatter\n                 */\n                /**\n                 * Whether to allow the tooltip to render outside the chart's SVG\n                 * element box. By default (`false`), the tooltip is rendered within the\n                 * chart's SVG element, which results in the tooltip being aligned\n                 * inside the chart area. For small charts, this may result in clipping\n                 * or overlapping. When `true`, a separate SVG element is created and\n                 * overlaid on the page, allowing the tooltip to be aligned inside the\n                 * page itself.\n                 *\n                 * Defaults to `true` if `chart.scrollablePlotArea` is activated,\n                 * otherwise `false`.\n                 *\n                 * @sample highcharts/tooltip/outside\n                 *         Small charts with tooltips outside\n                 *\n                 * @type      {boolean|undefined}\n                 * @default   undefined\n                 * @since     6.1.1\n                 * @apioption tooltip.outside\n                 */\n                /**\n                 * A callback function for formatting the HTML output for a single point\n                 * in the tooltip. Like the `pointFormat` string, but with more\n                 * flexibility.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n                 * @since     4.1.0\n                 * @context   Highcharts.Point\n                 * @apioption tooltip.pointFormatter\n                 */\n                /**\n                 * A callback function to place the tooltip in a custom position. The\n                 * callback receives three parameters: `labelWidth`, `labelHeight` and\n                 * `point`, where point contains values for `plotX` and `plotY` telling\n                 * where the reference point is in the plot area. Add `chart.plotLeft`\n                 * and `chart.plotTop` to get the full coordinates.\n                 *\n                 * To find the actual hovered `Point` instance, use\n                 * `this.chart.hoverPoint`. For shared or split tooltips, all the hover\n                 * points are available in `this.chart.hoverPoints`.\n                 *\n                 * Since v7, when [tooltip.split](#tooltip.split) option is enabled,\n                 * positioner is called for each of the boxes separately, including\n                 * xAxis header. xAxis header is not a point, instead `point` argument\n                 * contains info: `{ plotX: Number, plotY: Number, isHeader: Boolean }`\n                 *\n                 * The return should be an object containing x and y values, for example\n                 * `{ x: 100, y: 100 }`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/positioner/\n                 *         A fixed tooltip position on top of the chart\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Split tooltip with fixed positions\n                 * @sample {highstock} stock/tooltip/positioner-scrollable-plotarea/\n                 *         Scrollable plot area combined with tooltip positioner\n                 *\n                 * @type      {Highcharts.TooltipPositionerCallbackFunction}\n                 * @since     2.2.4\n                 * @apioption tooltip.positioner\n                 */\n                /**\n                 * Split the tooltip into one label per series, with the header close\n                 * to the axis. This is recommended over [shared](#tooltip.shared)\n                 * tooltips for charts with multiple line series, generally making them\n                 * easier to read. This option takes precedence over `tooltip.shared`.\n                 *\n                 * Not supported for [polar](#chart.polar) and [inverted](#chart.inverted) charts.\n                 *\n                 * @productdesc {highstock} In Highcharts Stock, tooltips are split\n                 * by default since v6.0.0. Stock charts typically contain\n                 * multi-dimension points and multiple panes, making split tooltips\n                 * the preferred layout over\n                 * the previous `shared` tooltip.\n                 *\n                 * @sample highcharts/tooltip/split/\n                 *         Split tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Split tooltip and custom formatter callback\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} true\n                 * @since     5.0.0\n                 * @product   highcharts highstock\n                 * @apioption tooltip.split\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing, when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @type      {boolean}\n                 * @since     8.0.1\n                 * @apioption tooltip.stickOnContact\n                 */\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption tooltip.useHTML\n                 */\n                /**\n                 * How many decimals to show in each series' y value. This is\n                 * overridable in each series' tooltip options object. The default is to\n                 * preserve all decimals.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {number|undefined}\n                 * @since     2.2\n                 * @apioption tooltip.valueDecimals\n                 */\n                /**\n                 * A string to prepend to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valuePrefix\n                 */\n                /**\n                 * A string to append to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valueSuffix\n                 */\n                /**\n                 * The format for the date in the tooltip header if the X axis is a\n                 * datetime axis. The default is a best guess based on the smallest\n                 * distance between points in the chart.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/xdateformat/\n                 *         A different format\n                 *\n                 * @type      {string}\n                 * @product   highcharts highstock gantt\n                 * @apioption tooltip.xDateFormat\n                 */\n                /**\n                 * How many decimals to show for the `point.change`\n                 * or the `point.cumulativeSum` value when the `series.compare`\n                 * or the `series.cumulative` option is set.\n                 * This is overridable in each series' tooltip options object.\n                 *\n                 * @type      {number}\n                 * @default   2\n                 * @since     1.0.1\n                 * @product   highstock\n                 * @apioption tooltip.changeDecimals\n                 */\n                /**\n                 * Enable or disable the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/enabled/\n                 *         Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n                 *         Disable tooltip and show values on chart instead\n                 */\n                enabled: true,\n                /**\n                 * Enable or disable animation of the tooltip.\n                 *\n                 * @type       {boolean}\n                 * @default    true\n                 * @since      2.3.0\n                 */\n                animation: svg,\n                /**\n                 * The radius of the rounded border corners.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         Default border radius\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/\n                 *         Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 */\n                borderRadius: 3,\n                /**\n                 * For series on datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the replacement codes, see\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat).\n                 *\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 *\n                 * @type    {Highcharts.Dictionary<string>}\n                 * @product highcharts highstock gantt\n                 */\n                dateTimeLabelFormats: {\n                    /** @internal */\n                    millisecond: '%A, %e %b, %H:%M:%S.%L',\n                    /** @internal */\n                    second: '%A, %e %b, %H:%M:%S',\n                    /** @internal */\n                    minute: '%A, %e %b, %H:%M',\n                    /** @internal */\n                    hour: '%A, %e %b, %H:%M',\n                    /** @internal */\n                    day: '%A, %e %b %Y',\n                    /** @internal */\n                    week: 'Week from %A, %e %b %Y',\n                    /** @internal */\n                    month: '%B %Y',\n                    /** @internal */\n                    year: '%Y'\n                },\n                /**\n                 * A string to append to the tooltip format.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @since 2.2\n                 */\n                footerFormat: '',\n                /**\n                 * The name of a symbol to use for the border around the tooltip\n                 * header. Applies only when [tooltip.split](#tooltip.split) is\n                 * enabled.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @see [tooltip.shape](#tooltip.shape)\n                 *\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Different shapes for header and split boxes\n                 *\n                 * @type       {Highcharts.TooltipShapeValue}\n                 * @validvalue [\"callout\", \"rect\"]\n                 * @since      7.0\n                 */\n                headerShape: 'callout',\n                /**\n                 * The number of milliseconds to wait until the tooltip is hidden when\n                 * mouse out from a point or chart.\n                 *\n                 * @since 3.0\n                 */\n                hideDelay: 500,\n                /**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @since 5.0.0\n                 */\n                padding: 8,\n                /**\n                 * The name of a symbol to use for the border around the tooltip. Can\n                 * be one of: `\"callout\"`, `\"circle\"` or `\"rect\"`. When\n                 * [tooltip.split](#tooltip.split)\n                 * option is enabled, shape is applied to all boxes except header, which\n                 * is controlled by\n                 * [tooltip.headerShape](#tooltip.headerShape).\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @type  {Highcharts.TooltipShapeValue}\n                 * @since 4.0\n                 */\n                shape: 'callout',\n                /**\n                 * When the tooltip is shared, the entire plot area will capture mouse\n                 * movement or touch events. Tooltip texts for series types with ordered\n                 * data (not pie, scatter, flags etc) will be shown in a single bubble.\n                 * This is recommended for single series charts and for tablet/mobile\n                 * optimized charts.\n                 *\n                 * See also [tooltip.split](#tooltip.split), that is better suited for\n                 * charts with many series, especially line-type series. The\n                 * `tooltip.split` option takes precedence over `tooltip.shared`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/shared-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/tooltip/shared-true/\n                 *         True\n                 * @sample {highcharts} highcharts/tooltip/shared-x-crosshair/\n                 *         True with x axis crosshair\n                 * @sample {highcharts} highcharts/tooltip/shared-true-mixed-types/\n                 *         True with mixed series types\n                 *\n                 * @since   2.1\n                 * @product highcharts highstock\n                 */\n                shared: false,\n                /**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense. This\n                 * applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/\n                 *         50 px on graph\n                 *\n                 * @type    {number}\n                 * @default 10/25\n                 * @since   1.2.0\n                 * @product highcharts highstock\n                 */\n                snap: isTouchDevice ? 25 : 10,\n                /**\n                 * The HTML of the tooltip header line. Variables are enclosed by\n                 * curly brackets. Available variables are `point.key`, `series.name`,\n                 * `series.color` and other members from the `point` and `series`\n                 * objects. The `point.key` variable contains the category name, x\n                 * value or datetime string depending on the type of axis. For datetime\n                 * axes, the `point.key` date format can be set using\n                 * `tooltip.xDateFormat`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.headerFormat\n                 */\n                headerFormat: '<span style=\"font-size: 0.8em\">{point.key}</span><br/>',\n                /**\n                 * The HTML of the null point's line in the tooltip. Works analogously\n                 * to [pointFormat](#tooltip.pointFormat).\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.nullFormat\n                 */\n                /**\n                 * The HTML of the point's line in the tooltip. Variables are enclosed\n                 * by curly brackets. Available variables are `point.x`, `point.y`,\n                 * `series.name` and `series.color` and other properties on the same\n                 * form. Furthermore, `point.y` can be extended by the\n                 * `tooltip.valuePrefix` and `tooltip.valueSuffix` variables. This can\n                 * also be overridden for each series, which makes it a good hook for\n                 * displaying units.\n                 *\n                 * In styled mode, the dot is colored by a class name rather\n                 * than the point color.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/pointformat/\n                 *         A different point format with value suffix\n                 * @sample {highcharts|highstock} highcharts/tooltip/pointformat-extra-information/\n                 *         Show extra information about points in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type       {string}\n                 * @since      2.2\n                 * @apioption  tooltip.pointFormat\n                 */\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n                /**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/\n                 *         Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                /**\n                 * The pixel width of the tooltip border. Defaults to 0 for single\n                 * tooltips and 1 for split tooltips.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         2 pixels\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/\n                 *         No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {number}\n                 */\n                borderWidth: void 0,\n                /**\n                 * Whether to apply a drop shadow to the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/\n                 *         False\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         Fixed tooltip position, border and shadow disabled\n                 *\n                 * @type {boolean|Highcharts.ShadowOptionsObject}\n                 */\n                shadow: true,\n                /**\n                 * Prevents the tooltip from switching or closing when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @since 8.0.1\n                 */\n                stickOnContact: false,\n                /**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * Note that the default `pointerEvents` style makes the tooltip ignore\n                 * mouse events, so in order to use clickable tooltips, this value must\n                 * be set to `auto`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/style/\n                 *         Greater padding, bold text\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @internal */\n                    cursor: 'default',\n                    /** @internal */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @since 2.2\n                 */\n                useHTML: false\n            },\n            /**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             */\n            credits: {\n                /**\n                 * Credits for map source to be concatenated with conventional credit\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapTextFull](#credits.mapTextFull)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   \\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapText\n                 */\n                /**\n                 * Detailed credits for map source to be displayed on hover of credits\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapText](#credits.mapText)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   {geojson.copyright}\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapTextFull\n                 */\n                /**\n                 * Whether to show the credits text.\n                 *\n                 * @sample {highcharts} highcharts/credits/enabled-false/\n                 *         Credits disabled\n                 * @sample {highstock} stock/credits/enabled/\n                 *         Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/\n                 *         Credits disabled\n                 */\n                enabled: true,\n                /**\n                 * The URL for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                href: 'https://www.highcharts.com?credits',\n                /**\n                 * Position configuration for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 *\n                 * @type    {Highcharts.AlignObject}\n                 * @since   2.1\n                 */\n                position: {\n                    /** @internal */\n                    align: 'right',\n                    /** @internal */\n                    x: -10,\n                    /** @internal */\n                    verticalAlign: 'bottom',\n                    /** @internal */\n                    y: -5\n                },\n                /**\n                 * CSS styles for the credits label.\n                 *\n                 * @see In styled mode, credits styles can be set with the\n                 *      `.highcharts-credits` class.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    cursor: 'pointer',\n                    /** @internal */\n                    color: \"#999999\" /* Palette.neutralColor40 */,\n                    /** @internal */\n                    fontSize: '0.6em'\n                },\n                /**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to\n                 * `Highcharts @ {map-credits}`. Otherwise, it defaults to\n                 * `Highcharts.com`.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                text: 'Highcharts.com'\n            }\n        };\n        /* eslint-disable spaced-comment */\n\n        defaultOptions.chart.styledMode = false;\n\n        '';\n        const defaultTime = new Time(defaultOptions.time);\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions\n         * for outside modules wasn't enough because the setOptions method created a new\n         * object.\n         *\n         * @function Highcharts.getOptions\n         *\n         * @return {Highcharts.Options}\n         * Default options.\n         */\n        function getOptions() {\n            return defaultOptions;\n        }\n        /**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @sample highcharts/global/useutc-false Setting a global option\n         * @sample highcharts/members/setoptions Applying a global theme\n         *\n         * @function Highcharts.setOptions\n         *\n         * @param {Highcharts.Options} options\n         * The new custom chart options.\n         *\n         * @return {Highcharts.Options}\n         * Updated options.\n         */\n        function setOptions(options) {\n            // Copy in the default options\n            merge(true, defaultOptions, options);\n            // Update the time object\n            if (options.time || options.global) {\n                if (H.time) {\n                    H.time.update(merge(defaultOptions.global, defaultOptions.time, options.global, options.time));\n                }\n                else {\n                    /**\n                     * Global `Time` object with default options. Since v6.0.5, time\n                     * settings can be applied individually for each chart. If no\n                     * individual settings apply, this `Time` object is shared by all\n                     * instances.\n                     *\n                     * @name Highcharts.time\n                     * @type {Highcharts.Time}\n                     */\n                    H.time = defaultTime;\n                }\n            }\n            return defaultOptions;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DefaultOptions = {\n            defaultOptions,\n            defaultTime,\n            getOptions,\n            setOptions\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"plotBox\"|\"spacingBox\"} Highcharts.ButtonRelativeToValue\n         */\n        /**\n         * Gets fired when a series is added to the chart after load time, using the\n         * `addSeries` method. Returning `false` prevents the series from being added.\n         *\n         * @callback Highcharts.ChartAddSeriesCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.ChartAddSeriesEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains common event information. Through the `options` property you can\n         * access the series options that were passed to the `addSeries` method.\n         *\n         * @interface Highcharts.ChartAddSeriesEventObject\n         */ /**\n        * The series options that were passed to the `addSeries` method.\n        * @name Highcharts.ChartAddSeriesEventObject#options\n        * @type {Highcharts.SeriesOptionsType}\n        */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.ChartAddSeriesEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The event target.\n        * @name Highcharts.ChartAddSeriesEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.ChartAddSeriesEventObject#type\n        * @type {\"addSeries\"}\n        */\n        /**\n         * Gets fired when clicking on the plot background.\n         *\n         * @callback Highcharts.ChartClickCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.PointerEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains an axes of the clicked spot.\n         *\n         * @interface Highcharts.ChartClickEventAxisObject\n         */ /**\n        * Axis at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#axis\n        * @type {Highcharts.Axis}\n        */ /**\n        * Axis value at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#value\n        * @type {number}\n        */\n        /**\n         * Contains information about the clicked spot on the chart. Remember the unit\n         * of a datetime axis is milliseconds since 1970-01-01 00:00:00.\n         *\n         * @interface Highcharts.ChartClickEventObject\n         * @extends Highcharts.PointerEventObject\n         */ /**\n        * Information about the x-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#xAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the y-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#yAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the z-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#zAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>|undefined}\n        */\n        /**\n         * Gets fired when the chart is finished loading.\n         *\n         * @callback Highcharts.ChartLoadCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Fires when the chart is redrawn, either after a call to `chart.redraw()` or\n         * after an axis, series or point is modified with the `redraw` option set to\n         * `true`.\n         *\n         * @callback Highcharts.ChartRedrawCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired after initial load of the chart (directly after the `load` event),\n         * and after each redraw (directly after the `redraw` event).\n         *\n         * @callback Highcharts.ChartRenderCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired when an area of the chart has been selected. The default action\n         * for the selection event is to zoom the chart to the selected area. It can be\n         * prevented by calling `event.preventDefault()` or return false.\n         *\n         * @callback Highcharts.ChartSelectionCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.SelectEventObject} event\n         *        Event informations\n         *\n         * @return {boolean|undefined}\n         *         Return false to prevent the default action, usually zoom.\n         */\n        (''); // Detach doclets above\n\n        return DefaultOptions;\n    });\n    _registerModule(_modules, 'Core/Templating.js', [_modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (D, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, defaultTime } = D;\n        const { extend, getNestedProperty, isArray, isNumber, isObject, pick, pInt } = U;\n        const helpers = {\n            // Built-in helpers\n            add: (a, b) => a + b,\n            divide: (a, b) => (b !== 0 ? a / b : ''),\n            // eslint-disable-next-line eqeqeq\n            eq: (a, b) => a == b,\n            each: function (arr) {\n                const match = arguments[arguments.length - 1];\n                return isArray(arr) ?\n                    arr.map((item, i) => format(match.body, extend(isObject(item) ? item : { '@this': item }, {\n                        '@index': i,\n                        '@first': i === 0,\n                        '@last': i === arr.length - 1\n                    }))).join('') :\n                    false;\n            },\n            ge: (a, b) => a >= b,\n            gt: (a, b) => a > b,\n            'if': (condition) => !!condition,\n            le: (a, b) => a <= b,\n            lt: (a, b) => a < b,\n            multiply: (a, b) => a * b,\n            // eslint-disable-next-line eqeqeq\n            ne: (a, b) => a != b,\n            subtract: (a, b) => a - b,\n            unless: (condition) => !condition\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime](https://www.php.net/manual/en/function.strftime.php) function.\n         * Additional formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * Since v6.0.5, all internal dates are formatted through the\n         * {@link Highcharts.Chart#time} instance to respect chart-level time settings.\n         * The `Highcharts.dateFormat` function only reflects global time settings set\n         * with `setOptions`.\n         *\n         * Supported format keys:\n         * - `%a`: Short weekday, like 'Mon'\n         * - `%A`: Long weekday, like 'Monday'\n         * - `%d`: Two digit day of the month, 01 to 31\n         * - `%e`: Day of the month, 1 through 31\n         * - `%w`: Day of the week, 0 through 6\n         * - `%b`: Short month, like 'Jan'\n         * - `%B`: Long month, like 'January'\n         * - `%m`: Two digit month number, 01 through 12\n         * - `%y`: Two digits year, like 09 for 2009\n         * - `%Y`: Four digits year, like 2009\n         * - `%H`: Two digits hours in 24h format, 00 through 23\n         * - `%k`: Hours in 24h format, 0 through 23\n         * - `%I`: Two digits hours in 12h format, 00 through 11\n         * - `%l`: Hours in 12h format, 1 through 12\n         * - `%M`: Two digits minutes, 00 through 59\n         * - `%p`: Upper case AM or PM\n         * - `%P`: Lower case AM or PM\n         * - `%S`: Two digits seconds, 00 through 59\n         * - `%L`: Milliseconds (naming from Ruby)\n         *\n         * @function Highcharts.dateFormat\n         *\n         * @param {string} format\n         *        The desired format where various time representations are prefixed\n         *        with `%`.\n         *\n         * @param {number} timestamp\n         *        The JavaScript timestamp.\n         *\n         * @param {boolean} [capitalize=false]\n         *        Upper case first letter in the return.\n         *\n         * @return {string}\n         *         The formatted date.\n         */\n        function dateFormat(format, timestamp, capitalize) {\n            return defaultTime.dateFormat(format, timestamp, capitalize);\n        }\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @example\n         * let s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         *\n         * @function Highcharts.format\n         *\n         * @param {string} str\n         *        The string to format.\n         *\n         * @param {Record<string, *>} ctx\n         *        The context, a collection of key-value pairs where each key is\n         *        replaced by its value.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        A `Chart` instance used to get numberFormatter and time.\n         *\n         * @return {string}\n         *         The formatted string.\n         */\n        function format(str = '', ctx, chart) {\n            const regex = /\\{([a-zA-Z0-9\\:\\.\\,;\\-\\/<>%_@\"'= #\\(\\)]+)\\}/g, \n            // The sub expression regex is the same as the top expression regex,\n            // but except parens and block helpers (#), and surrounded by parens\n            // instead of curly brackets.\n            subRegex = /\\(([a-zA-Z0-9\\:\\.\\,;\\-\\/<>%_@\"'= ]+)\\)/g, matches = [], floatRegex = /f$/, decRegex = /\\.([0-9])/, lang = defaultOptions.lang, time = chart && chart.time || defaultTime, numberFormatter = chart && chart.numberFormatter || numberFormat;\n            /*\n             * Get a literal or variable value inside a template expression. May be\n             * extended with other types like string or null if needed, but keep it\n             * small for now.\n             */\n            const resolveProperty = (key = '') => {\n                let n;\n                // Literals\n                if (key === 'true') {\n                    return true;\n                }\n                if (key === 'false') {\n                    return false;\n                }\n                if ((n = Number(key)).toString() === key) {\n                    return n;\n                }\n                // Variables and constants\n                return getNestedProperty(key, ctx);\n            };\n            let match, currentMatch, depth = 0, hasSub;\n            // Parse and create tree\n            while ((match = regex.exec(str)) !== null) {\n                // When a sub expression is found, it is evaluated first, and the\n                // results recursively evaluated until no subexpression exists.\n                const subMatch = subRegex.exec(match[1]);\n                if (subMatch) {\n                    match = subMatch;\n                    hasSub = true;\n                }\n                if (!currentMatch || !currentMatch.isBlock) {\n                    currentMatch = {\n                        ctx,\n                        expression: match[1],\n                        find: match[0],\n                        isBlock: match[1].charAt(0) === '#',\n                        start: match.index,\n                        startInner: match.index + match[0].length,\n                        length: match[0].length\n                    };\n                }\n                // Identify helpers\n                const fn = match[1].split(' ')[0].replace('#', '');\n                if (helpers[fn]) {\n                    // Block helper, only 0 level is handled\n                    if (currentMatch.isBlock && fn === currentMatch.fn) {\n                        depth++;\n                    }\n                    if (!currentMatch.fn) {\n                        currentMatch.fn = fn;\n                    }\n                }\n                // Closing a block helper\n                const startingElseSection = match[1] === 'else';\n                if (currentMatch.isBlock &&\n                    currentMatch.fn && (match[1] === `/${currentMatch.fn}` ||\n                    startingElseSection)) {\n                    if (!depth) { // === 0\n                        const start = currentMatch.startInner, body = str.substr(start, match.index - start);\n                        // Either closing without an else section, or when encountering\n                        // an else section\n                        if (currentMatch.body === void 0) {\n                            currentMatch.body = body;\n                            currentMatch.startInner = match.index + match[0].length;\n                            // The body exists already, so this is the else section\n                        }\n                        else {\n                            currentMatch.elseBody = body;\n                        }\n                        currentMatch.find += body + match[0];\n                        if (!startingElseSection) {\n                            matches.push(currentMatch);\n                            currentMatch = void 0;\n                        }\n                    }\n                    else if (!startingElseSection) {\n                        depth--;\n                    }\n                    // Common expression\n                }\n                else if (!currentMatch.isBlock) {\n                    matches.push(currentMatch);\n                }\n                // Evaluate sub-matches one by one to prevent orphaned block closers\n                if (subMatch && !currentMatch?.isBlock) {\n                    break;\n                }\n            }\n            // Execute\n            matches.forEach((match) => {\n                const { body, elseBody, expression, fn } = match;\n                let replacement, i;\n                // Helper function\n                if (fn) {\n                    // Pass the helpers the amount of arguments defined by the function,\n                    // then the match as the last argument.\n                    const args = [match], parts = expression.split(' ');\n                    i = helpers[fn].length;\n                    while (i--) {\n                        args.unshift(resolveProperty(parts[i + 1]));\n                    }\n                    replacement = helpers[fn].apply(ctx, args);\n                    // Block helpers may return true or false. They may also return a\n                    // string, like the `each` helper.\n                    if (match.isBlock && typeof replacement === 'boolean') {\n                        replacement = format(replacement ? body : elseBody, ctx);\n                    }\n                    // Simple variable replacement\n                }\n                else {\n                    const valueAndFormat = expression.split(':');\n                    replacement = resolveProperty(valueAndFormat.shift() || '');\n                    // Format the replacement\n                    if (valueAndFormat.length && typeof replacement === 'number') {\n                        const segment = valueAndFormat.join(':');\n                        if (floatRegex.test(segment)) { // Float\n                            const decimals = parseInt((segment.match(decRegex) || ['', '-1'])[1], 10);\n                            if (replacement !== null) {\n                                replacement = numberFormatter(replacement, decimals, lang.decimalPoint, segment.indexOf(',') > -1 ? lang.thousandsSep : '');\n                            }\n                        }\n                        else {\n                            replacement = time.dateFormat(segment, replacement);\n                        }\n                    }\n                }\n                str = str.replace(match.find, pick(replacement, ''));\n            });\n            return hasSub ? format(str, ctx, chart) : str;\n        }\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @sample highcharts/members/highcharts-numberformat/\n         *         Custom number format\n         *\n         * @function Highcharts.numberFormat\n         *\n         * @param {number} number\n         *        The input number to format.\n         *\n         * @param {number} decimals\n         *        The amount of decimals. A value of -1 preserves the amount in the\n         *        input number.\n         *\n         * @param {string} [decimalPoint]\n         *        The decimal point, defaults to the one given in the lang options, or\n         *        a dot.\n         *\n         * @param {string} [thousandsSep]\n         *        The thousands separator, defaults to the one given in the lang\n         *        options, or a space character.\n         *\n         * @return {string}\n         *         The formatted number.\n         */\n        function numberFormat(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n            let ret, fractionDigits;\n            const lang = defaultOptions.lang, origDec = (number.toString().split('.')[1] || '').split('e')[0].length, exponent = number.toString().split('e'), firstDecimals = decimals;\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            }\n            else if (!isNumber(decimals)) {\n                decimals = 2;\n            }\n            else if (decimals && exponent[1] && exponent[1] < 0) {\n                // Expose decimals from exponential notation (#7042)\n                fractionDigits = decimals + +exponent[1];\n                if (fractionDigits >= 0) {\n                    // Remove too small part of the number while keeping the notation\n                    exponent[0] = (+exponent[0]).toExponential(fractionDigits)\n                        .split('e')[0];\n                    decimals = fractionDigits;\n                }\n                else {\n                    // `fractionDigits < 0`\n                    exponent[0] = exponent[0].split('.')[0] || 0;\n                    if (decimals < 20) {\n                        // Use number instead of exponential notation (#7405)\n                        number = (exponent[0] * Math.pow(10, exponent[1]))\n                            .toFixed(decimals);\n                    }\n                    else {\n                        // Or zero\n                        number = 0;\n                    }\n                    exponent[1] = 0;\n                }\n            }\n            // Add another decimal to avoid rounding errors of float numbers. (#4573)\n            // Then use toFixed to handle rounding.\n            const roundedNumber = (Math.abs(exponent[1] ? exponent[0] : number) +\n                Math.pow(10, -Math.max(decimals, origDec) - 1)).toFixed(decimals);\n            // A string containing the positive integer component of the number\n            const strinteger = String(pInt(roundedNumber));\n            // Leftover after grouping into thousands. Can be 0, 1 or 2.\n            const thousands = strinteger.length > 3 ? strinteger.length % 3 : 0;\n            // Language\n            decimalPoint = pick(decimalPoint, lang.decimalPoint);\n            thousandsSep = pick(thousandsSep, lang.thousandsSep);\n            // Start building the return\n            ret = number < 0 ? '-' : '';\n            // Add the leftover after grouping into thousands. For example, in the\n            // number 42 000 000, this line adds 42.\n            ret += thousands ? strinteger.substr(0, thousands) + thousandsSep : '';\n            if (+exponent[1] < 0 && !firstDecimals) {\n                ret = '0';\n            }\n            else {\n                // Add the remaining thousands groups, joined by the thousands separator\n                ret += strinteger\n                    .substr(thousands)\n                    .replace(/(\\d{3})(?=\\d)/g, '$1' + thousandsSep);\n            }\n            // Add the decimal point and the decimal component\n            if (decimals) {\n                // Get the decimal component\n                ret += decimalPoint + roundedNumber.slice(-decimals);\n            }\n            if (exponent[1] && +ret !== 0) {\n                ret += 'e' + exponent[1];\n            }\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Templating = {\n            dateFormat,\n            format,\n            helpers,\n            numberFormat\n        };\n\n        return Templating;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPIComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/KPIComponent/KPISyncHandlers.js'], _modules['Dashboards/Components/KPIComponent/KPIComponentDefaults.js'], _modules['Core/Templating.js'], _modules['Core/Utilities.js']], function (AST, Component, KPISyncHandlers, KPIComponentDefaults, Templating, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { format } = Templating;\n        const { createElement, css, defined, diffObjects, isArray, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a KPI component.\n         *\n         */\n        class KPIComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the KPI component.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @returns\n             * KPI component based on config from JSON.\n             *\n             * @internal\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const chartOptions = options.chartOptions && JSON.parse(options.chartOptions);\n                const subtitle = JSON.parse(options.subtitle || '{}');\n                const title = options.title && JSON.parse(options.title);\n                return new KPIComponent(cell, merge(options, {\n                    chartOptions,\n                    title,\n                    subtitle\n                }));\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a KPI component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                options = merge(KPIComponent.defaultOptions, options);\n                super(cell, options, board);\n                this.options = options;\n                this.type = 'KPI';\n                this.sync = new KPIComponent.Sync(this, this.syncHandlers);\n                this.value = createElement('span', {\n                    className: `${options.className}-value`\n                }, {}, this.contentElement);\n                this.subtitle = createElement('span', {\n                    className: this.getSubtitleClassName()\n                }, {}, this.contentElement);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                await super.load();\n                this.linkValueToChart();\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                // Animate\n                if (this.chart && this.chart.container) {\n                    this.chart.reflow();\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.updateElements();\n                const charter = KPIComponent.charter?.Chart;\n                if (charter &&\n                    this.options.chartOptions &&\n                    !this.chart) {\n                    if (!this.chartContainer) {\n                        this.chartContainer = createElement('div', {\n                            className: `${this.options.className}-chart-container`\n                        }, {\n                            // Fix inner height, when using flex box\n                            padding: '0.1px'\n                        }, this.contentElement);\n                    }\n                    this.chart = charter.chart(this.chartContainer, merge(KPIComponent.defaultChartOptions, this.options.chartOptions));\n                }\n                else if (this.chart &&\n                    !this.options.chartOptions &&\n                    'chartOptions' in this.options) {\n                    this.chart.destroy();\n                    this.chart = void 0;\n                }\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            /**\n             * Internal method for handling option updates.\n             *\n             * @private\n             */\n            setOptions() {\n                this.filterAndAssignSyncOptions(KPISyncHandlers);\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options);\n                this.setOptions();\n                if (options.chartOptions && this.chart) {\n                    this.chart.update(options.chartOptions);\n                }\n                shouldRerender && this.render();\n            }\n            /**\n             * @internal\n             */\n            onTableChanged() {\n                this.setValue();\n            }\n            /**\n             * Destroys the highcharts component.\n             */\n            destroy() {\n                // Cleanup references in the global Highcharts scope\n                this.chart?.destroy();\n                super.destroy();\n            }\n            /**\n             * Gets the default value that should be displayed in the KPI.\n             *\n             * @returns\n             * The value that should be displayed in the KPI.\n             */\n            getValue() {\n                if (defined(this.options.value)) {\n                    return this.options.value;\n                }\n                if (this.connector && this.options.columnName) {\n                    const table = this.connector?.table.modified, column = table.getColumn(this.options.columnName), length = column?.length || 0;\n                    return table.getCellAsString(this.options.columnName, length - 1);\n                }\n            }\n            /**\n             * Sets the value that should be displayed in the KPI.\n             *\n             * @param value\n             * The value to display in the KPI.\n             */\n            setValue(value = this.getValue()) {\n                const { valueFormat, valueFormatter } = this.options;\n                if (defined(value)) {\n                    let prevValue;\n                    if (isNumber(+value)) {\n                        prevValue = +value;\n                    }\n                    if (valueFormatter) {\n                        value = valueFormatter.call(this, value);\n                    }\n                    else if (valueFormat) {\n                        value = format(valueFormat, { value });\n                    }\n                    else if (isNumber(value)) {\n                        value = value.toLocaleString();\n                    }\n                    AST.setElementHTML(this.value, '' + value);\n                    this.linkValueToChart(prevValue);\n                    this.prevValue = prevValue;\n                }\n            }\n            /**\n             * Handles updating chart point value.\n             *\n             * @internal\n             */\n            linkValueToChart(value = this.getValue()) {\n                const chart = this.chart;\n                const linkedValueTo = this.options.linkedValueTo;\n                if (!chart || !linkedValueTo.enabled ||\n                    !defined(value) || !isNumber(+value)) {\n                    return;\n                }\n                value = +value;\n                const targetSeries = chart.series[linkedValueTo.seriesIndex ?? 0], targetPoint = targetSeries?.points[linkedValueTo.pointIndex ?? 0];\n                if (targetSeries) {\n                    if (targetPoint) {\n                        targetPoint.update({\n                            y: value\n                        });\n                        return;\n                    }\n                    targetSeries.addPoint({\n                        y: value\n                    });\n                    return;\n                }\n                chart.addSeries({\n                    data: [{\n                            y: value\n                        }]\n                });\n            }\n            /**\n             * Handles updating elements via options\n             *\n             * @internal\n             */\n            updateElements() {\n                const { style, subtitle } = this.options;\n                this.setValue();\n                AST.setElementHTML(this.subtitle, this.getSubtitle());\n                if (style) {\n                    css(this.element, style);\n                }\n                if (typeof subtitle === 'object') {\n                    if (subtitle.style) {\n                        css(this.subtitle, subtitle.style);\n                    }\n                    this.subtitle.className = this.getSubtitleClassName();\n                }\n                if (this.chartContainer) {\n                    this.chartContainer.style.flex =\n                        this.options.chartOptions ? '1' : '0';\n                }\n                if (this.chart) {\n                    this.chart.reflow();\n                }\n                this.value.style.color = this.getValueColor();\n            }\n            /**\n             * Gets KPI subtitle text.\n             *\n             * @returns\n             * The subtitle's text.\n             *\n             * @internal\n             */\n            getSubtitle() {\n                const { subtitle, value } = this.options;\n                if (typeof subtitle === 'string') {\n                    return subtitle;\n                }\n                if (subtitle) {\n                    if (isNumber(this.prevValue) && isNumber(value)) {\n                        const diff = value - this.prevValue;\n                        let prefix = '';\n                        if (diff > 0) {\n                            prefix = '<span style=\"color:green\">&#9650;</span> +';\n                        }\n                        else if (diff < 0) {\n                            prefix = '<span style=\"color:red\">&#9660;</span> ';\n                        }\n                        else {\n                            return this.subtitle.innerHTML;\n                        }\n                        if (subtitle.type === 'diff') {\n                            return prefix + diff.toLocaleString();\n                        }\n                        if (subtitle.type === 'diffpercent') {\n                            return prefix + format('{v:,.2f}%', {\n                                v: diff / this.prevValue * 100\n                            });\n                        }\n                    }\n                    return subtitle.text || '';\n                }\n                return '';\n            }\n            /**\n             * Gets CSS class name of the KPI subtitle.\n             *\n             * @returns\n             * The name of class.\n             *\n             * @internal\n             */\n            getSubtitleClassName() {\n                const { subtitle } = this.options;\n                return `${Component.defaultOptions.className}-subtitle` +\n                    ((typeof subtitle === 'object' && subtitle.className) || '');\n            }\n            /**\n             * Applies title's color according to the threshold.\n             *\n             * @returns\n             * Hex of color.\n             *\n             * @internal\n             */\n            getValueColor() {\n                const { threshold, thresholdColors, value } = this.options;\n                if (thresholdColors && threshold && isNumber(value)) {\n                    if (isArray(threshold)) {\n                        for (let i = threshold.length - 1; i >= 0; i--) {\n                            if (value >= threshold[i]) {\n                                if (i + 1 < thresholdColors.length) {\n                                    return thresholdColors[i + 1];\n                                }\n                                return thresholdColors[thresholdColors.length - 1];\n                            }\n                        }\n                    }\n                    else if (value >= threshold) {\n                        return thresholdColors[1];\n                    }\n                    return thresholdColors[0];\n                }\n                return '';\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'KPI'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    type: 'KPI',\n                    options: {\n                        ...base.options,\n                        type: 'KPI',\n                        value: this.options.value,\n                        subtitle: JSON.stringify(this.options.subtitle),\n                        title: JSON.stringify(this.options.title),\n                        threshold: this.options.threshold,\n                        thresholdColors: this.options.thresholdColors,\n                        chartOptions: JSON.stringify(this.options.chartOptions),\n                        valueFormat: this.options.valueFormat\n                    }\n                };\n                this.emit({ type: 'toJSON', json: base });\n                return json;\n            }\n            /**\n             * Get the KPI component's options.\n             * @returns\n             * The JSON of KPI component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, KPIComponent.defaultOptions),\n                    type: 'KPI'\n                };\n            }\n        }\n        /**\n         * Default options of the KPI component.\n         */\n        KPIComponent.defaultOptions = merge(Component.defaultOptions, KPIComponentDefaults);\n        /** @internal */\n        KPIComponent.syncHandlers = KPISyncHandlers;\n        /**\n         * Default options of the KPI component.\n         *\n         * @default {\n            chart: {\n                type: 'spline',\n                styledMode: true,\n                zooming: {\n                    mouseWheel: {\n                        enabled: false\n                    }\n                }\n            },\n            title: {\n                text: void 0\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false,\n                title: {\n                    text: null\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            tooltip: {\n                outside: true\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            }\n        }\n         */\n        KPIComponent.defaultChartOptions = {\n            chart: {\n                type: 'spline',\n                styledMode: true,\n                zooming: {\n                    mouseWheel: {\n                        enabled: false\n                    }\n                }\n            },\n            title: {\n                text: void 0\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false,\n                title: {\n                    text: null\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            tooltip: {\n                outside: true\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return KPIComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const NavigatorComponentDefaults = {\n            type: 'Navigator',\n            chartOptions: {\n                chart: {\n                    animation: false,\n                    height: 200,\n                    styledMode: true,\n                    type: 'column',\n                    zooming: {\n                        mouseWheel: {\n                            enabled: false\n                        }\n                    }\n                },\n                credits: {\n                    enabled: false\n                },\n                legend: {\n                    enabled: false\n                },\n                navigator: {\n                    enabled: true,\n                    outlineWidth: 0,\n                    series: {\n                        animation: false,\n                        lineWidth: 0\n                    },\n                    xAxis: {\n                        endOnTick: true,\n                        gridZIndex: 4,\n                        labels: {\n                            x: 1,\n                            y: 22\n                        },\n                        opposite: true,\n                        showFirstLabel: true,\n                        showLastLabel: true,\n                        startOnTick: true,\n                        tickPosition: 'inside'\n                    },\n                    yAxis: {\n                        maxPadding: 0.5\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        borderRadius: 0,\n                        marker: {\n                            enabled: false\n                        },\n                        states: {\n                            hover: {\n                                enabled: false\n                            }\n                        }\n                    }\n                },\n                scrollbar: {\n                    enabled: true\n                },\n                title: {\n                    text: ''\n                },\n                tooltip: {\n                    enabled: false\n                },\n                xAxis: {\n                    visible: false,\n                    minRange: Number.MIN_VALUE\n                },\n                yAxis: {\n                    visible: false\n                }\n            },\n            editableOptions: (Component.defaultOptions.editableOptions || []).concat()\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncHandlers.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { Range: RangeModifier } = DataModifier.types;\n        const { addEvent, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @internal */\n        function setRangeOptions(ranges, column, minValue, maxValue) {\n            let changed = false;\n            for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                if (ranges[i].column === column) {\n                    ranges[i].maxValue = maxValue;\n                    ranges[i].minValue = minValue;\n                    changed = true;\n                    break;\n                }\n            }\n            if (!changed) {\n                ranges.push({ column, maxValue, minValue });\n            }\n        }\n        /** @internal */\n        function unsetRangeOptions(ranges, column) {\n            for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                if (ranges[i].column === column) {\n                    return ranges.splice(i, 1)[0];\n                }\n            }\n        }\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const configs = {\n            handlers: {\n                extremesHandler() {\n                    const component = this, dataCursor = component.board.dataCursor;\n                    const extremesListener = (e) => {\n                        const cursor = e.cursor;\n                        if (!component.connector) {\n                            return;\n                        }\n                        const table = component.connector.table;\n                        // Assume first column with unique keys as fallback\n                        let extremesColumn = table.getColumnNames()[0], maxIndex = table.getRowCount(), minIndex = 0;\n                        if (cursor.type === 'range') {\n                            maxIndex = cursor.lastRow;\n                            minIndex = cursor.firstRow;\n                            if (cursor.columns) {\n                                extremesColumn = pick(cursor.columns[0], extremesColumn);\n                            }\n                        }\n                        else if (cursor.state === 'xAxis.extremes.max') {\n                            extremesColumn = pick(cursor.column, extremesColumn);\n                            maxIndex = pick(cursor.row, maxIndex);\n                        }\n                        else {\n                            extremesColumn = pick(cursor.column, extremesColumn);\n                            minIndex = pick(cursor.row, minIndex);\n                        }\n                        const modifier = table.getModifier();\n                        if (typeof extremesColumn === 'string' &&\n                            modifier instanceof RangeModifier) {\n                            const ranges = modifier.options.ranges, min = table.getCell(extremesColumn, minIndex), max = table.getCell(extremesColumn, maxIndex);\n                            if (max !== null && typeof max !== 'undefined' &&\n                                min !== null && typeof min !== 'undefined') {\n                                unsetRangeOptions(ranges, extremesColumn);\n                                ranges.unshift({\n                                    column: extremesColumn,\n                                    maxValue: max,\n                                    minValue: min\n                                });\n                                table.setModifier(modifier);\n                            }\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const table = component.connector && component.connector.table;\n                        if (table) {\n                            dataCursor.addListener(table.id, 'xAxis.extremes', extremesListener);\n                            dataCursor.addListener(table.id, 'xAxis.extremes.max', extremesListener);\n                            dataCursor.addListener(table.id, 'xAxis.extremes.min', extremesListener);\n                        }\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = component.connector && component.connector.table;\n                        if (table) {\n                            dataCursor.removeListener(table.id, 'xAxis.extremes', extremesListener);\n                            dataCursor.removeListener(table.id, 'xAxis.extremes.max', extremesListener);\n                            dataCursor.removeListener(table.id, 'xAxis.extremes.min', extremesListener);\n                        }\n                    };\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            },\n            emitters: {\n                crossfilterEmitter() {\n                    const component = this;\n                    const afterSetExtremes = async (extremes) => {\n                        if (component.connector) {\n                            const table = component.connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = component.getAxisExtremes();\n                            let modifier = table.getModifier();\n                            if (modifier instanceof RangeModifier) {\n                                setRangeOptions(modifier.options.ranges, filterColumn, min, max);\n                            }\n                            else {\n                                modifier = new RangeModifier({\n                                    ranges: [{\n                                            column: filterColumn,\n                                            maxValue: max,\n                                            minValue: min\n                                        }]\n                                });\n                            }\n                            await table.setModifier(modifier);\n                            dataCursor.emitCursor(table, {\n                                type: 'range',\n                                columns: [filterColumn],\n                                firstRow: 0,\n                                lastRow: table.getRowCount() - 1,\n                                state: 'crossfilter'\n                            }, extremes);\n                        }\n                    };\n                    let delay;\n                    return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                        clearTimeout(delay);\n                        delay = setTimeout(afterSetExtremes, 50, this, extremes);\n                    });\n                },\n                extremesEmitter() {\n                    const component = this;\n                    const afterSetExtremes = (extremes) => {\n                        if (component.connector) {\n                            const table = component.connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = component.getAxisExtremes();\n                            dataCursor.emitCursor(table, {\n                                type: 'position',\n                                column: filterColumn,\n                                row: table.getRowIndexBy(filterColumn, min),\n                                state: 'xAxis.extremes.min'\n                            }, extremes);\n                            dataCursor.emitCursor(table, {\n                                type: 'position',\n                                column: filterColumn,\n                                row: table.getRowIndexBy(filterColumn, max),\n                                state: 'xAxis.extremes.max'\n                            }, extremes);\n                        }\n                    };\n                    let delay;\n                    return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                        clearTimeout(delay);\n                        delay = setTimeout(afterSetExtremes, 50, this, extremes);\n                    });\n                }\n            }\n        };\n        const defaults = {\n            crossfilter: {\n                emitter: configs.emitters.crossfilterEmitter\n            },\n            extremes: {\n                emitter: configs.emitters.extremesEmitter,\n                handler: configs.emitters.extremesHandler\n            }\n        };\n\n        return defaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorComponentDefaults.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncHandlers.js'], _modules['Core/Utilities.js']], function (Component, Globals, NavigatorComponentDefaults, NavigatorSyncHandler, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { diffObjects, isNumber, isString, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Setup a component with data navigation.\n         */\n        class NavigatorComponent extends Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the Highcharts component.\n             *\n             * @returns\n             * Highcharts component based on config from JSON.\n             *\n             * @private\n             */\n            static fromJSON(json, cell) {\n                const options = json.options, component = new NavigatorComponent(cell, options);\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options) {\n                super(cell, options);\n                this.options = merge(NavigatorComponent.defaultOptions, options);\n                const charter = (NavigatorComponent.charter.Chart ||\n                    Globals.win.Highcharts);\n                this.chartContainer = Globals.win.document.createElement('div');\n                this.chart = charter\n                    .chart(this.chartContainer, (this.options.chartOptions || {}));\n                this.chartContainer.classList\n                    .add(Globals.classNamePrefix + 'navigator');\n                this.filterAndAssignSyncOptions(NavigatorSyncHandler);\n                this.sync = new NavigatorComponent.Sync(this, this.syncHandlers);\n                if (this.sync.syncConfig.crossfilter?.enabled) {\n                    this.chart.update(merge({ navigator: { xAxis: { labels: { format: '{value}' } } } }, this.options.chartOptions || {}), false);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            adjustNavigator() {\n                const chart = this.chart, height = pick(chart.chartHeight, this.contentElement.clientHeight), width = this.contentElement.clientWidth, chartUpdates = {};\n                if (chart.chartHeight !== height ||\n                    chart.chartWidth !== width) {\n                    chartUpdates.chart = {\n                        height,\n                        width\n                    };\n                }\n                if (chart.navigator) {\n                    const navigator = chart.navigator, navigatorHeight = (navigator.top - chart.plotTop + navigator.height);\n                    if (navigator.height !== navigatorHeight) {\n                        chartUpdates.navigator = {\n                            handles: {\n                                height: Math.round(height / 4)\n                            },\n                            height: navigatorHeight\n                        };\n                    }\n                    if (Object.keys(chartUpdates).length) {\n                        chart.update(chartUpdates, false);\n                    }\n                    if (navigator.series && navigator.series[0]) {\n                        navigator.series[0].update({\n                            type: chart.series[0].type\n                        }, false);\n                    }\n                }\n                else if (Object.keys(chartUpdates).length) {\n                    chart.update(chartUpdates, false);\n                }\n            }\n            /**\n             * Returns the first column of columnAssignments to use for navigator data.\n             * @private\n             *\n             * @return\n             * Navigator column assignment.\n             */\n            getColumnAssignment() {\n                const columnAssignments = (this.options.columnAssignments || {});\n                let columnsAssignment;\n                for (const column of Object.keys(columnAssignments)) {\n                    columnsAssignment = columnAssignments[column];\n                    if (columnsAssignment !== null) {\n                        return [column, columnsAssignment];\n                    }\n                }\n                if (this.connector) {\n                    const columns = this.connector.table.getColumnNames();\n                    if (columns.length) {\n                        return [columns[0], 'y'];\n                    }\n                }\n                return ['', 'y'];\n            }\n            /**\n             * Gets the component's options.\n             * @internal\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, NavigatorComponentDefaults),\n                    type: 'Navigator'\n                };\n            }\n            /**\n             * Gets the extremes of the navigator's x-axis.\n             */\n            getAxisExtremes() {\n                const axis = this.chart.xAxis[0], extremes = axis.getExtremes(), min = isNumber(extremes.min) ? extremes.min : extremes.dataMin, max = isNumber(extremes.max) ? extremes.max : extremes.dataMax;\n                if (this.categories) {\n                    return [\n                        this.categories[Math.max(0, Math.ceil(min))],\n                        this.categories[Math.min(this.categories.length - 1, Math.floor(max))]\n                    ];\n                }\n                if (axis.hasNames) {\n                    return [\n                        axis.names[Math.ceil(min)],\n                        axis.names[Math.floor(max)]\n                    ];\n                }\n                return [min, max];\n            }\n            /** @private */\n            async load() {\n                await super.load();\n                this.contentElement.appendChild(this.chartContainer);\n                this.parentElement.appendChild(this.element);\n                this.adjustNavigator();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            onTableChanged() {\n                this.renderNavigator();\n            }\n            /** @private */\n            redrawNavigator() {\n                const timeouts = this.resizeTimeouts;\n                for (let i = 0, iEnd = timeouts.length; i < iEnd; ++i) {\n                    clearTimeout(timeouts[i]);\n                }\n                timeouts.length = 0;\n                timeouts.push(setTimeout(() => {\n                    this.adjustNavigator();\n                    this.chart.redraw();\n                }, 33));\n            }\n            /** @private */\n            render() {\n                const component = this;\n                super.render();\n                component.renderNavigator();\n                component.sync.start();\n                component.emit({ type: 'afterRender' });\n                return component;\n            }\n            /** @private */\n            renderNavigator() {\n                const chart = this.chart;\n                if (this.connector) {\n                    const table = this.connector.table, column = this.getColumnAssignment(), columnValues = table.getColumn(column[0], true) || [];\n                    let data;\n                    if (this.sync.syncConfig.crossfilter?.enabled) {\n                        data = this.generateCrossfilterData();\n                    }\n                    else {\n                        data = columnValues.slice();\n                    }\n                    if (!chart.series[0]) {\n                        chart.addSeries({ id: table.id, data }, false);\n                    }\n                    else {\n                        chart.series[0].setData(data, false);\n                    }\n                }\n                this.redrawNavigator();\n            }\n            /**\n             * Generates the data for the crossfilter navigator.\n             */\n            generateCrossfilterData() {\n                const crossfilterOptions = this.sync.syncConfig.crossfilter;\n                const table = this.connector?.table;\n                const columnValues = table?.getColumn(this.getColumnAssignment()[0], true) || [];\n                if (!table || columnValues.length < 1 || !crossfilterOptions) {\n                    return [];\n                }\n                const values = [];\n                const uniqueXValues = [];\n                for (let i = 0, iEnd = columnValues.length; i < iEnd; i++) {\n                    let value = columnValues[i];\n                    if (value === null) {\n                        continue;\n                    }\n                    else if (!isNumber(value)) {\n                        value = `${value}`;\n                    }\n                    // Check if the x-axis data is not of mixed type.\n                    if (this.stringData === void 0) {\n                        this.stringData = isString(value);\n                    }\n                    else if (this.stringData !== isString(value)) {\n                        throw new Error('Mixed data types in crossfilter navigator are ' +\n                            'not supported.');\n                    }\n                    values.push(value);\n                    if (uniqueXValues.indexOf(value) === -1) {\n                        uniqueXValues.push(value);\n                    }\n                }\n                uniqueXValues.sort((a, b) => (pick(a, NaN) < pick(b, NaN) ? -1 : a === b ? 0 : 1));\n                let filteredValues;\n                const modifierOptions = table.getModifier()?.options;\n                if (crossfilterOptions.affectNavigator && modifierOptions) {\n                    const appliedRanges = [], rangedColumns = [], { ranges } = modifierOptions;\n                    for (let i = 0, iEnd = ranges.length; i < iEnd; i++) {\n                        if (ranges[i].column !== this.getColumnAssignment()[0]) {\n                            appliedRanges.push(ranges[i]);\n                            rangedColumns.push(table.getColumn(ranges[i].column, true) || []);\n                        }\n                    }\n                    filteredValues = [];\n                    const appliedRagesLength = appliedRanges.length;\n                    for (let i = 0, iEnd = values.length; i < iEnd; i++) {\n                        const value = values[i];\n                        let allConditionsMet = true;\n                        for (let j = 0; j < appliedRagesLength; j++) {\n                            const range = appliedRanges[j];\n                            if (!(rangedColumns[j][i] >=\n                                (range.minValue ?? -Infinity) &&\n                                rangedColumns[j][i] <=\n                                    (range.maxValue ?? Infinity))) {\n                                allConditionsMet = false;\n                                break;\n                            }\n                        }\n                        if (allConditionsMet) {\n                            filteredValues.push(value);\n                        }\n                    }\n                }\n                else {\n                    filteredValues = values;\n                }\n                const seriesData = [];\n                if (this.stringData) {\n                    this.categories = uniqueXValues;\n                    for (let i = 0, iEnd = uniqueXValues.length; i < iEnd; i++) {\n                        seriesData.push([i, null]);\n                    }\n                }\n                else {\n                    for (let i = 0, iEnd = uniqueXValues.length; i < iEnd; i++) {\n                        seriesData.push([uniqueXValues[i], null]);\n                    }\n                }\n                for (let i = 0, iEnd = filteredValues.length; i < iEnd; i++) {\n                    const index = uniqueXValues.indexOf(filteredValues[i]);\n                    seriesData[index][1] = (seriesData[index][1] || 0) + 1;\n                }\n                return seriesData;\n            }\n            /** @private */\n            resize(width, height) {\n                super.resize(width, height);\n                this.redrawNavigator();\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                const chart = this.chart;\n                await super.update(options, false);\n                if (options.sync) {\n                    this.filterAndAssignSyncOptions(NavigatorSyncHandler);\n                }\n                if (options.chartOptions) {\n                    chart.update(merge(this.sync.syncConfig.crossfilter?.enabled ? ({ navigator: { xAxis: { labels: { format: '{value}' } } } }) : {}, options.chartOptions), false);\n                }\n                this.emit({ type: 'afterUpdate' });\n                if (shouldRerender) {\n                    this.render();\n                }\n            }\n            getOptionsOnDrop(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            sidebar) {\n                return {};\n            }\n        }\n        /**\n         * Default options of the Navigator component.\n         */\n        NavigatorComponent.defaultOptions = merge(Component.defaultOptions, NavigatorComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/HighchartsPlugin.js', [_modules['Dashboards/Components/HighchartsComponent/HighchartsComponent.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncHandlers.js'], _modules['Dashboards/Components/KPIComponent/KPIComponent.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorComponent.js']], function (HighchartsComponent, HighchartsSyncHandlers, KPIComponent, NavigatorComponent) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects Highcharts core with the Dashboard plugin.\n         *\n         * @param {Highcharts} highcharts\n         * Highcharts core to connect.\n         */\n        function connectHighcharts(highcharts) {\n            HighchartsComponent.charter = highcharts;\n            KPIComponent.charter = highcharts;\n            NavigatorComponent.charter = highcharts;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { Sync, ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('Highcharts', HighchartsComponent);\n            ComponentRegistry.registerComponent('KPI', KPIComponent);\n            ComponentRegistry.registerComponent('Navigator', NavigatorComponent);\n            Sync.defaultHandlers = {\n                ...Sync.defaultHandlers,\n                ...HighchartsSyncHandlers\n            };\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onUnregister(e) {\n            const { Sync } = e;\n            Object\n                .keys(HighchartsSyncHandlers)\n                .forEach((handler) => {\n                if (Sync.defaultHandlers[handler] ===\n                    HighchartsSyncHandlers[handler]) {\n                    delete Sync.defaultHandlers[handler];\n                }\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const HighchartsCustom = {\n            connectHighcharts\n        };\n        const HighchartsPlugin = {\n            custom: HighchartsCustom,\n            name: 'Highcharts.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return HighchartsPlugin;\n    });\n    _registerModule(_modules, 'Dashboards/PluginHandler.js', [_modules['Dashboards/Board.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Components/ComponentRegistry.js']], function (Board, Sync, ComponentRegistry) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var PluginHandler;\n        (function (PluginHandler) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /** @internal */\n            PluginHandler.registry = {};\n            /**\n             * Revision of the Dashboard plugin API.\n             *\n             * @internal\n             */\n            PluginHandler.revision = 0;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a dashboard plugin.\n             *\n             * @param {Dashboards.Plugin} plugin\n             * Dashboard plugin to register.\n             *\n             * @param {string} [key]\n             * Plugin key for the registry. (Default: `plugin.name`)\n             */\n            function addPlugin(plugin, key = plugin.name) {\n                const { maxRevision, minRevision, onRegister } = plugin;\n                if (PluginHandler.registry[key]) {\n                    // Only throw error with custom key\n                    if (key !== plugin.name) {\n                        throw new Error(`Plugin '${key}' already registered.`);\n                    }\n                    return;\n                }\n                if ((typeof minRevision === 'number' && minRevision > PluginHandler.revision) ||\n                    (typeof maxRevision === 'number' && maxRevision < PluginHandler.revision)) {\n                    throw new Error(`Plugin '${key}' does not support revision ${PluginHandler.revision}.`);\n                }\n                onRegister({\n                    Board,\n                    ComponentRegistry,\n                    Sync,\n                    revision: PluginHandler.revision\n                });\n                PluginHandler.registry[key] = plugin;\n            }\n            PluginHandler.addPlugin = addPlugin;\n            /**\n             * Removes a dashboard plugin.\n             *\n             * @param {string} key\n             * Plugin key in the registry.\n             */\n            function removePlugin(key) {\n                if (PluginHandler.registry[key]) {\n                    PluginHandler.registry[key].onUnregister({\n                        ComponentRegistry: ComponentRegistry,\n                        Board,\n                        Sync,\n                        revision: PluginHandler.revision\n                    });\n                    delete PluginHandler.registry[key];\n                }\n            }\n            PluginHandler.removePlugin = removePlugin;\n        })(PluginHandler || (PluginHandler = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PluginHandler;\n    });\n    _registerModule(_modules, 'masters/dashboards.src.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Dashboards/Board.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Data/DataPool.js'], _modules['Data/DataCursor.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Plugins/DataGridPlugin.js'], _modules['Dashboards/Plugins/HighchartsPlugin.js'], _modules['Dashboards/PluginHandler.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Utilities.js']], function (AST, DataConnector, Board, Component, ComponentRegistry, DataPool, DataCursor, DataModifier, DataTable, Globals, DataGridPlugin, HighchartsPlugin, PluginHandler, Sync, Utilities) {\n\n        // Fill registries\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.board = Board.board;\n        G.error = Utilities.error;\n        G.merge = Utilities.merge;\n        G.uniqueKey = Utilities.uniqueKey;\n        G.AST = AST;\n        G.Board = Board;\n        G.Component = Component;\n        G.ComponentRegistry = ComponentRegistry;\n        G.DataConnector = DataConnector;\n        G.DataCursor = DataCursor;\n        G.DataModifier = DataModifier;\n        G.DataPool = DataPool;\n        G.DataTable = DataTable;\n        G.DataGridPlugin = DataGridPlugin;\n        G.HighchartsPlugin = HighchartsPlugin;\n        G.PluginHandler = PluginHandler;\n        G.Sync = Sync;\n        /* *\n         *\n         *  Classic Export\n         *\n         * */\n        if (!G.win.Dashboards) {\n            G.win.Dashboards = G;\n        }\n        if (G.win.DataGrid) {\n            DataGridPlugin.custom.connectDataGrid(G.win.DataGrid);\n            G.PluginHandler.addPlugin(DataGridPlugin);\n        }\n        if (G.win.Highcharts) {\n            HighchartsPlugin.custom.connectHighcharts(G.win.Highcharts);\n            G.PluginHandler.addPlugin(HighchartsPlugin);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n    _modules['masters/dashboards.src.js']._modules = _modules;\n    return _modules['masters/dashboards.src.js'];\n}));"],"names":["root","factory","module","exports","document","define","amd","Dashboards","error","window","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","dispatchEvent","detail","Globals","SVG_NS","product","version","win","doc","svg","createElementNS","createSVGRect","userAgent","navigator","isChrome","indexOf","isFirefox","isMS","test","opera","isSafari","isTouchDevice","isWebKit","deg2rad","Math","PI","hasBidiBug","parseInt","split","marginNames","noop","supportsPassiveEvents","supportsPassive","opts","Object","defineProperty","get","addEventListener","removeEventListener","charts","composed","dateFormats","seriesTypes","symbolSizes","chartCount","H","serialMode","code","stop","chart","params","severity","isCode","isNumber","message","toString","additionalMessages","objectEach","value","key","encodeURI","fireEvent","Error","console","messages","warn","push","pInt","s","mag","isString","isArray","str","prototype","call","isObject","strict","isDOMElement","nodeType","isClass","c","constructor","name","n","isNaN","Infinity","defined","attr","elem","keyOrAttribs","ret","isGetter","attrSingle","setAttribute","getAttribute","removeAttribute","splat","extend","a","b","pick","arguments","length","i","arg","css","el","styles","style","getMagnitude","num","pow","floor","log","LN10","correctFloat","prec","parseFloat","toPrecision","easeInOutSine","pos","cos","find","Array","arr","callback","ctx","removeEvent","type","removeOneEvent","removeAllEvents","eventCollection","types","len","nodeName","_val","owner","events","hcEvents","typeEvents","filter","eventArguments","defaultFunction","createEvent","e","initEvent","target","preventDefault","defaultPrevented","object","multilevel","unshift","getPrototypeOf","sort","order","forEach","map","each","grep","reduce","some","val","slice","uniqueKey","hash","random","substring","id","jQuery","highcharts","shift","addEvent","options","Point","series","runTrackerClick","passive","capture","eventObject","arrayMax","data","max","arrayMin","min","clamp","clearTimeout","createElement","tag","attribs","parent","nopad","padding","border","margin","appendChild","destroyObjectProperties","except","destructablesOnly","destroy","diffObjects","newer","older","keepOlder","collectionsWithUpdate","diff","depth","keeper","newerVal","keys","discardElement","element","parentElement","removeChild","erase","item","splice","extendClass","members","getClosestDistance","arrays","onError","closest","loopLength","distance","allowNegative","xData","getNestedProperty","pathElements","pathElement","thisProp","child","getStyle","prop","toInt","offsetWidth","scrollWidth","boundingClientRectWidth","getBoundingClientRect","width","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","inArray","fromIndex","insertItem","collection","indexOption","index","isInternal","_i","isFunction","merge","doCopy","copy","original","normalizeTickInterval","interval","multiples","magnitude","allowDecimals","hasTickAmount","retInterval","normalized","round","offset","docElem","documentElement","box","parentNode","top","left","height","pageYOffset","scrollTop","clientTop","pageXOffset","scrollLeft","clientLeft","pad","number","padder","String","replace","join","pushUnique","array","relativeLength","base","replaceNested","text","replacements","previous","replacement","stableSort","sortFunction","sortValue","safeI","syncTimeout","delay","context","setTimeout","timeUnits","millisecond","second","minute","hour","day","week","month","year","useSerialIds","mode","wrap","method","func","proceed","outerArgs","scope","concat","U","trustedTypes","trustedTypesPolicy","createPolicy","createHTML","emptyHTML","hasValidDOMParser","Boolean","DOMParser","parseFromString","AST","filterUserAttributes","attributes","valid","allowedAttributes","allowedReferences","ref","parseStyle","line","pair","trim","g","toUpperCase","setElementHTML","html","innerHTML","ast","addToDOM","source","nodes","parseMarkup","recurse","subtree","subParent","node","tagName","textNode","textContent","createTextNode","bypassHTMLFiltering","allowedTags","NS","namespaceURI","children","markup","body","appendChildNodes","addTo","toLowerCase","astNode","parsedAttributes","attrib","childNodes","childNode","registry","addCallback","getCallback","toJSON","json","Serializable","classRegistry","helperRegistry","fromJSON","$class","classs","helper","registerClassPrototype","classPrototype","registerHelper","helperFunctions","serializer","classes","numberOfHelpers","jsonSupportFor","SharedComponentState","columnVisibilityMap","hiddenRowIndexes","selection","emit","getColumnOrder","columnOrder","getColumnVisibility","columnName","getColumnSorter","aIndex","bIndex","isSet","isModified","on","setColumnOrder","eventDetail","oldColumnOrder","presentationState","newColumnOrder","setColumnVisibility","columnVisibility","visibilityMap","setHiddenRows","rowIndexes","hidden","rowIndex","hiddenRows","getHiddenRows","setHoverPoint","point","isDataGrid","hoverPoint","HTMLElement","hoverRow","getHoverPoint","getSelection","setSelection","reset","axes","axisID","hoverpoint","x","y","SharedState","ComponentGroup","getComponentGroup","groupID","componentGroups","addComponentGroup","group","getGroupsFromComponent","componentID","groups","groupKey","components","state","addComponents","pop","removeComponents","getSharedState","EditableOptions","component","bindings","defaultBindings","getOptions","editableOptions","iEnd","option","board","selectOptions","dataPool","getConnectorIds","keyMap","color","title","caption","typeMap","skipRedraw","defaultTypeMap","SyncEmitter","register","emitter","emitterID","create","remove","SyncHandler","handler","handlerID","Sync","syncHandlers","defaultHandlers","syncConfig","registeredSyncHandlers","registeredSyncEmitters","isSyncing","listeners","registerSyncEmitter","isRegisteredEmitter","registerSyncHandler","isRegisteredHandler","start","syncOptions","emitterConfig","handlerConfig","defaultSyncOptions","crossfilter","affectNavigator","highlight","highlightPoint","showTooltip","showCrosshair","classNamePrefix","classNames","layout","cell","cellHover","cellActive","cellLoading","row","layoutsWrapper","boardContainer","guiElementType","boards","ComponentUtilities","getStyles","elementStyles","sumPixels","accumulator","getMargins","includeBorders","borders","getPaddings","coreError","coreUniqueKey","copyDepth","copyDepthError","CallbackRegistry","CU","DU","Component","createTextElement","elementName","textOptions","className","callbackRegistry","tableEvents","cellListeners","resizeTimeouts","innerResizeTimeouts","renderTo","container","querySelector","defaultOptions","editableOptionsBindings","presentationModifier","dimensions","Number","contentElement","filterAndAssignSyncOptions","setupEventListeners","attachCellListeners","onTableChanged","setLoadingState","getOptionsOnDrop","sidebar","initConnector","connectorId","connector","isNewConnector","getConnector","setConnector","sync","carry","handlerName","defaultHandler","enabled","resizeTo","getCellIndex","setCell","resize","setupTableListeners","table","event","tableEventTimeout","clearTableListeners","removeEventCallback","eventCallback","modified","tableID","activeGroup","setActiveGroup","getContentHeight","titleHeight","titleElement","clientHeight","captionElement","removeProperty","timeout","cancelAnimationFrame","timeoutID","requestAnimationFrame","margins","update","newOptions","shouldRerender","shouldForceRerender","render","eventType","resizeObserverCallback","ResizeObserver","resizeObserver","observe","unbind","setTitle","titleOptions","newTitle","replaceWith","insertBefore","firstChild","setCaption","captionOptions","newCaption","load","getEditableOptions","getEditableOptionValue","propertyPath","result","end","elements","HTMLComponentDefaults","HTMLComponent","JSON","parse","isError","getElementsFromString","constructTree","src","parser","htmlString","stringify","sender","DataTable","isNull","NULL","columnNames","aliases","autoId","columns","rowCount","versionTag","thisColumns","column","aliasKeys","thisAliases","alias","clone","skipColumns","tableOptions","tableClone","deleteColumnAlias","deletedAlias","modifier","modifyColumns","deleteColumns","deletedColumns","modifiedColumns","deleteRows","deletedRows","modifiedRows","deletedCells","j","jEnd","modifyRows","rows","getCell","columnNameOrAlias","getCellAsBoolean","getCellAsNumber","useNaN","cellValue","getCellAsString","getColumn","asReference","getColumns","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","columnNamesOrAliases","tableAliasMap","tableColumns","getModifier","getRow","getRows","getRowCount","getRowIndexBy","rowIndexOffset","getRowObject","getRowObjects","i2","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","modifyCell","setColumn","setColumns","tableModifier","tableColumn","tableColumnNames","setModifier","promise","modify","Promise","resolve","then","setRow","setRows","rowColumnNames","rowColumnName","indexRowCount","DataConverter","regex","match","Date","UTC","NaN","alternative","d","getFullYear","mergedOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","converter","guessType","decimalRegex","getDate","deduceDateFormat","limit","save","stable","format","thing","guessedFormat","madeDeduction","dateFormat","export","headers","getTable","trimedValue","innerTrimedValue","floatValue","dateFormatProp","getTime","getTimezoneOffset","inside","alternativeFormat","startColumn","endColumn","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","getSortedColumns","usePresentationOrder","csvRows","columnsCount","rowArray","columnIndex","columnDataType","columnMeta","whatIs","dataType","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","token","actualColumn","read","pushType","isFinite","initialValue","points","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","DataModifier","benchmark","dataTable","results","execute","modifyTable","iterations","times","startTime","endTime","performance","now","reject","registerType","DataModifierClass","DataConnector","metadata","polling","describeColumn","describeColumns","usePresentationState","names","setModifierOptions","modifierOptions","ModifierClass","startPolling","refreshTime","_polling","stopPolling","DataConnectorClass","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","GoogleSheetsConverter","header","parseOptions","values","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","status","worksheet","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","tableCaption","attrs","topheaders","subheaders","useRowspanHeaders","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","getElementsByTagName","rowsCount","items","itemsLength","columnsInRow","columnsInRowLength","relativeColumnIndex","HTMLTableConnector","getElementById","JSONConverter","orientation","newRow","arrayWithPath","acc","JSONConnector","dataUrl","ChainModifier","chain","optionsChain","add","clear","modifiers","reverse","promiseChain","chainTable","InvertModifier","modifiedRowIndex","modifiedColumnNames","j2","RangeModifier","additive","ranges","range","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","ComponentRegistry","registerComponent","ComponentClass","Bindings","getGUIElement","idOrElement","guiElement","addComponent","optionsStates","states","optionsEvents","componentContainer","editMode","lang","errorMessage","mountedComponent","mountedComponents","click","active","setActiveState","hover","classList","componentFromJSON","componentClass","getType","getLayout","addTabIndexToCells","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","listener","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","groupOrCursor","cursorOrEvent","eventOrLasting","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","needle","columnNeedle","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","DataCursorHelper","cursorsJSON","stateMapJSON","tableIds","k","kEnd","connectors","DataPoolDefaults","DataPool","waiting","waitingList","connectorOptions","getConnectorOptions","loadConnector","connectorIds","getConnectorTable","ConnectorClass","setConnectorOptions","instances","DG","PREFIX","resizeSnap","resizeSnapX","resizeSnapY","separator","contextMenuBtn","contextMenuBtnText","contextMenu","contextMenuItem","editModeEnabled","editToolbar","editToolbarCellOutline","editToolbarRowOutline","editToolbarItem","editToolbarRow","editToolbarCell","editSidebar","editSidebarShow","editSidebarHide","editSidebarTitle","editSidebarMenuItem","rowContextHighlight","cellEditHighlight","dashboardCellEditHighlightActive","dragMock","dropPointer","contextDetectionPointer","resizePointer","currentEditedElement","maskElement","menuItem","menu","menuVerticalSeparator","menuHorizontalSeparator","menuDestroy","editSidebarWrapper","customSelect","customSelectButton","toggleContainer","toggleWrapper","toggleSlider","toggleWrapperColored","toggleLabels","button","sidebarNavButton","labelText","editSidebarTabBtn","editToolsBtn","editTools","editGridItems","confirmationPopup","popupButtonContainer","popupContentContainer","popupCancelBtn","popupConfirmBtn","popupCloseButton","editOverlay","editOverlayActive","resizerMenuBtnActive","sidebarCloseButton","editSidebarTabBtnWrapper","editSidebarRight","editSidebarRightShow","viewFullscreen","accordionMenu","accordionContainer","accordionHeader","accordionHeaderBtn","accordionHeaderIcon","accordionContent","accordionNestedWrapper","accordionMenuButtonsContainer","accordionMenuButton","hiddenElement","collapsableContentHeader","collapsedElement","dropdown","dropdownContent","dropdownButton","dropdownButtonContent","dropdownIcon","icon","accessibility","cancelButton","chartClassName","chartConfig","chartID","chartOptions","chartType","connectorName","confirmButton","confirmDestroyCell","confirmDestroyRow","dataLabels","exitFullscreen","off","pointFormat","settings","HTML","Highcharts","DataGrid","KPI","getOffsets","referenceElement","right","bottom","guiElementClientRect","referenceClientRect","getDimFromOffsets","offsets","createElementId","elementType","getPercentageWidth","fractionRegEx","getElementContainer","elementId","div","parentContainer","removeBindedEventFn","stopImmediatePropagation","changeVisibility","setVisible","displayStyle","visibilityChanged","isVisible","display","hide","show","EditGlobals","GUIElement","Cell","containerId","copyId","parentContainerId","mountedComponentJSON","layoutJSON","cellElement","cellHeight","layoutOptions","rowOptions","cellClassName","guiEnabled","mountComponentFromJSON","setNestedLayout","layoutFromJSON","nestedLayout","Layout","optionsGui","gui","unmountCell","destroyRow","cells","rowContainerId","getVisibleCells","getParentCell","level","parentCell","getOverlappingLevels","align","levelMaxGap","levels","cellOffset","parentCellOffset","abs","setSize","flex","cellWidth","convertWidthToValue","hideContextPointer","cellToolbar","showToolbar","setHighlight","cnt","contains","isHighlighted","toggle","Row","cellsJSON","setContainerHeight","rowContainer","rowElement","rowClassName","setCells","setCellsFromJSON","cellsElements","getElementsByClassName","addCell","cellJSON","componentsToMount","mountCell","setCellEvents","rowCells","unmountRow","layoutContainerId","nextCell","prevCell","nextSibling","cellIndex","getVisibleRows","getRowLevels","cellOffsets","rowLevels","rowLevelsArray","getRowLevelInfo","posY","rowLevelInfo","rowLevel","rowsJSON","layouts","importLocal","localStorage","getItem","layoutClassName","setRowsFromJSON","rowsElements","addRow","mountRow","setRowEvents","exportLocal","setItem","getRowIndex","nextRow","prevRow","dashboardContainerId","DashboardsAccessibility","Board","async","init","componentTypes","initContainer","initLayout","dataCursor","a11y","componentPromises","setComponents","initEvents","all","runReflow","reflow","boardWrapper","EditMode","setLayouts","layoutsJSON","setLayoutsFromJSON","fullscreen","FullScreen","guiOptions","layoutsOptions","promises","unobserve","importLayoutLocal","editModeTools","tools","hideToolbars","updatePosition","contextButtonElement","componentOptions","dashboardJSON","configs","emitters","highlightEmitter","dataGrid","highlightOptions","onDataGridHover","dataset","rowXIndex","onDataGridMouseOut","handlers","highlightHandler","handleCursor","highlightedDataRow","toggleRowHighlight","hoveredRow","handleCursorOut","registerCursorListeners","extremesHandler","handleChangeExtremes","scrollToRow","visibilityHandler","handleVisibilityChange","extremes","visibility","DataGridSyncHandlers","dataGridClassName","dataGridID","dataGridOptions","onUpdate","inputElement","parentRow","dataTableRowIndex","valueToSet","DataGridComponentDefaults","DataGridComponent","connectorListeners","disableEditingModifiedColumns","cellInputEl","filterColumns","getColumnOptions","modifierColumns","columnFormulas","editable","shouldUpdateTheGrid","rowElements","childElementCount","input","convertedInputValue","constructDataGrid","setupConnectorUpdate","DataGridNamespace","columnOptions","keyEvent","visibleColumns","columnsToDelete","includes","filteredTable","connectorsIds","containerResizeObserver","disconnect","custom","connectDataGrid","DataGridNS","onRegister","onUnregister","getModifiedTableOffset","minRange","currentRange","tableRowIndex","mouseOver","mouseOut","redraw","seriesVisibilityEmitter","extremesEmitter","cleanupCallbacks","extremesEventHandler","resetSelection","trigger","axis","seriesFromConnector","visiblePoints","isInside","minCursorData","coll","maxCursorData","columnAssignment","assignment","seriesId","dateTime","addExtremesEvent","addExtremesEventCallbacks","resetExtremesEvent","seriesVisibilityHandler","findSeries","seriesArray","handleShow","handleHide","getHoveredPoint","relatedSeries","visible","graphic","isCartesian","tooltip","useSharedTooltip","shared","hoverSeries","pointer","getHoverData","refresh","hoverPoints","setState","xAxis","drawCrosshair","yAxis","unhovered","unhoverAllPoints","seriesLength","pointsLength","xAxes","yAxes","l","zooming","unregisterCallbacks","dimension","handleUpdateExtremes","eventTarget","didZoom","setExtremes","resetZoomButton","showResetZoom","addCursorListeners","handleChartZoomOut","zoomOut","resetZoomButtons","querySelectorAll","HighchartsSyncHandlers","allowConnectorUpdate","styledMode","chartConstructor","nestedOptions","iconURL","showToggle","HighchartsComponentDefaults","HighchartsComponent","chartContainer","setOptions","updateSeries","hcComponent","getChart","heightOffset","store","drag","onChartUpdate","presentationTable","getDefaultColumnAssignment","oldSeriesId","dataStructure","seriesOptions","adjustDraggableOptions","formula","dragDrop","draggableY","seriesTable","addSeries","createChart","firstColumn","charter","Factory","Chart","registerChartEvents","allEvents","optionKey","seriesOrAxisOptions","seriesOrAxis","callbackKey","storeTableID","animation","plotOptions","setValue","KPISyncHandlers","minFontSize","thresholdColors","linkedValueTo","seriesIndex","pointIndex","alignThresholds","panning","borderRadius","colorCount","allowMutatingData","ignoreHiddenSeries","spacing","theme","position","singleTouch","resetButton","zIndex","borderColor","backgroundColor","plotBorderColor","colors","hasNewSafariBug","Intl","DateTimeFormat","formatRange","hasOldSafariBug","Time","useUTC","variableTimezone","timezoneOffsetFunction","unit","date","timezoneOffset","realMs","ms","setTime","set","newOffset","timezone","makeTime","hours","minutes","seconds","time","cacheKey","gmt","colon","dateTimeFormat","formatCache","timeZone","timeZoneName","valueOf","capitalize","invalidDate","dayOfMonth","fullYear","langWeekdays","weekdays","shortWeekdays","substr","A","w","shortMonths","B","months","m","o","Y","I","M","p","P","S","L","resolveDTLFormat","f","main","from","to","getTimeTicks","normalizedInterval","startOfWeek","minYear","variableDayLength","minDay","tickPositions","higherRanks","minDate","unitRange","count","minMonth","minDateDate","minHours","t","info","totalRange","getDateFormat","dateTimeLabelFormats","dateStr","blank","strpos","lastN","ChartDefaults","Palettes","symbols","loading","numericSymbols","resetZoom","resetZoomTitle","thousandsSep","global","fontWeight","widthAdjust","subtitle","fontSize","verticalAlign","legend","alignColumns","itemMarginBottom","itemMarginTop","labelFormatter","navigation","activeColor","inactiveColor","itemStyle","textDecoration","textOverflow","itemHoverStyle","itemHiddenStyle","shadow","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","opacity","textAlign","footerFormat","headerShape","hideDelay","shape","snap","headerFormat","borderWidth","stickOnContact","useHTML","credits","href","defaultTime","D","helpers","divide","eq","ge","gt","condition","le","lt","multiply","ne","subtract","unless","subRegex","matches","floatRegex","decRegex","numberFormatter","numberFormat","resolveProperty","currentMatch","hasSub","exec","subMatch","isBlock","expression","charAt","startInner","startingElseSection","elseBody","parts","valueAndFormat","segment","decimals","fractionDigits","origDec","exponent","firstDecimals","toExponential","toFixed","roundedNumber","strinteger","thousands","KPIComponentDefaults","Templating","KPIComponent","getSubtitleClassName","linkValueToChart","updateElements","defaultChartOptions","getValue","valueFormat","valueFormatter","prevValue","targetSeries","targetPoint","addPoint","getSubtitle","getValueColor","prefix","v","threshold","mouseWheel","outside","marker","outlineWidth","lineWidth","endOnTick","gridZIndex","labels","opposite","showFirstLabel","showLastLabel","startOnTick","tickPosition","maxPadding","scrollbar","MIN_VALUE","Range","extremesListener","extremesColumn","maxIndex","minIndex","unsetRangeOptions","crossfilterEmitter","afterSetExtremes","filterColumn","getColumnAssignment","getAxisExtremes","setRangeOptions","changed","NavigatorComponentDefaults","NavigatorSyncHandler","NavigatorComponent","adjustNavigator","chartHeight","clientWidth","chartUpdates","chartWidth","navigatorHeight","plotTop","handles","columnsAssignment","columnAssignments","getExtremes","dataMin","dataMax","categories","ceil","hasNames","renderNavigator","redrawNavigator","timeouts","columnValues","generateCrossfilterData","setData","filteredValues","crossfilterOptions","uniqueXValues","stringData","appliedRanges","rangedColumns","appliedRagesLength","allConditionsMet","seriesData","connectHighcharts","PluginHandler","revision","addPlugin","plugin","maxRevision","minRevision","removePlugin","DataGridPlugin","HighchartsPlugin","Utilities","G"],"mappings":"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ACX+R,EAAQrQ,KAAK,CAAG8N,EAAIO,UAAU,CAACkC,EAAOzT,KAAK,EAG3CkR,CAAU,CAACuC,EAAOjS,IAAI,CAAC,CAAGiS,EAAOzT,KAAK,AAE9C,GACAuT,EAAQrC,UAAU,CAAGA,CACzB,CAEA,GAAIsB,EAAKkB,UAAU,CAAC9Q,MAAM,CAAE,CACxB,IAAMqQ,EAAW,EAAE,CACnB,EAAE,CAAChN,OAAO,CAACjF,IAAI,CAACwR,EAAKkB,UAAU,CAAE,AAACC,IAC9BP,EAAiBO,EAAWV,EAChC,GACIA,EAASrQ,MAAM,EACf2Q,CAAAA,EAAQN,QAAQ,CAAGA,CAAO,CAElC,CACAI,EAAM7S,IAAI,CAAC+S,EACf,EAEA,MADA,EAAE,CAACtN,OAAO,CAACjF,IAAI,CAAClE,EAAIqW,IAAI,CAACO,UAAU,CAAE,AAACC,GAAcP,EAAiBO,EAAWxB,IACzEA,CACX,CACJ,CAqQA,OAhPAnB,EAAII,iBAAiB,CAAG,CACpB,MACA,gBACA,mBACA,gBACA,gBACA,cACA,aACA,kBACA,YACA,eACA,gBACA,uBACA,gBACA,QACA,YACA,QACA,UACA,KACA,KACA,IACA,KACA,KACA,WACA,OACA,cACA,cACA,gBACA,SACA,OACA,KACA,KACA,eACA,cACA,SACA,UACA,SACA,UACA,cACA,eACA,eACA,IACA,OACA,OACA,OACA,QACA,QACA,MACA,cACA,eACA,SACA,iBACA,eACA,QACA,cACA,SACA,UACA,UACA,SACA,WACA,aACA,cACA,aACA,aACA,QACA,OACA,SACA,QACA,IACA,KACA,KACA,aACA,IACA,KACA,KACA,SACH,CAgBDJ,EAAIK,iBAAiB,CAAG,CACpB,WACA,UACA,UACA,IACA,MACA,KACA,IACH,CAeDL,EAAI8B,WAAW,CAAG,CACd,IACA,OACA,IACA,KACA,SACA,UACA,SACA,WACA,OACA,KACA,OACA,MACA,KACA,KACA,KACA,sBACA,eACA,UACA,UACA,UACA,UACA,iBACA,WACA,UACA,cACA,SACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MA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"}