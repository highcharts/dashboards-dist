{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards v3.4.0 (2025-06-30)\n *\n * (c) 2009-2025 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = (root && root.document) ?\n            factory(root) :\n            factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/dashboards', function () {\n            return factory(root);\n        });\n    } else {\n        if (root.Dashboards) {\n            root.Dashboards.error(16, true);\n        }\n        root.Dashboards = factory(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function (window) {\n    'use strict';\n    var _modules = {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (window && typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Shared Highcharts properties.\n         * @private\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            Globals.SVG_NS = 'http://www.w3.org/2000/svg', Globals.product = 'Highcharts', Globals.version = '3.4.0', Globals.win = (typeof window !== 'undefined' ?\n                window :\n                {}), // eslint-disable-line node/no-unsupported-features/es-builtins\n            Globals.doc = Globals.win.document, Globals.svg = !!Globals.doc?.createElementNS?.(Globals.SVG_NS, 'svg')?.createSVGRect, Globals.pageLang = Globals.doc?.documentElement?.closest('[lang]')?.lang, Globals.userAgent = Globals.win.navigator?.userAgent || '', Globals.isChrome = Globals.win.chrome, Globals.isFirefox = Globals.userAgent.indexOf('Firefox') !== -1, Globals.isMS = /(edge|msie|trident)/i.test(Globals.userAgent) && !Globals.win.opera, Globals.isSafari = !Globals.isChrome && Globals.userAgent.indexOf('Safari') !== -1, Globals.isTouchDevice = /(Mobile|Android|Windows Phone)/.test(Globals.userAgent), Globals.isWebKit = Globals.userAgent.indexOf('AppleWebKit') !== -1, Globals.deg2rad = Math.PI * 2 / 360, Globals.marginNames = [\n                'plotTop',\n                'marginRight',\n                'marginBottom',\n                'plotLeft'\n            ], Globals.noop = function () { }, Globals.supportsPassiveEvents = (function () {\n                // Checks whether the browser supports passive events, (#11353).\n                let supportsPassive = false;\n                // Object.defineProperty doesn't work on IE as well as passive\n                // events - instead of using polyfill, we can exclude IE totally.\n                if (!Globals.isMS) {\n                    const opts = Object.defineProperty({}, 'passive', {\n                        get: function () {\n                            supportsPassive = true;\n                        }\n                    });\n                    if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                        Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                        Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n                    }\n                }\n                return supportsPassive;\n            }());\n            /**\n             * An array containing the current chart objects in the page. A chart's\n             * position in the array is preserved throughout the page's lifetime. When\n             * a chart is destroyed, the array item becomes `undefined`.\n             *\n             * @name Highcharts.charts\n             * @type {Array<Highcharts.Chart|undefined>}\n             */\n            Globals.charts = [];\n            /**\n             * A shared registry between all bundles to keep track of applied\n             * compositions.\n             * @private\n             */\n            Globals.composed = [];\n            /**\n             * A hook for defining additional date format specifiers. New\n             * specifiers are defined as key-value pairs by using the\n             * specifier as key, and a function which takes the timestamp as\n             * value. This function returns the formatted portion of the\n             * date.\n             *\n             * Using `dateFormats` is also a convenient way to define new keys for\n             * complex locale-aware date formats compatible with the\n             * [Intl.DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat)\n             * browser API, whenever the built-in formats are not sufficient.\n             *\n             * @sample highcharts/global/dateformats/\n             *         Adding support for week number\n             * @sample highcharts/global/dateformats-object/\n             *         A locale-aware date format using `Intl.DateTimeFormat`\n             *\n             * @name Highcharts.dateFormats\n             * @type {Record<string, Highcharts.TimeFormatCallbackFunction>}\n             */\n            Globals.dateFormats = {};\n            /**\n             * @private\n             * @deprecated\n             * @todo Use only `Core/Series/SeriesRegistry.seriesTypes`\n             */\n            Globals.seriesTypes = {};\n            /**\n             * @private\n             */\n            Globals.symbolSizes = {};\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            // eslint-disable-next-line prefer-const\n            Globals.chartCount = 0;\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Theme options that should get applied to the chart. In module mode it\n         * might not be possible to change this property because of read-only\n         * restrictions, instead use {@link Highcharts.setOptions}.\n         *\n         * @deprecated\n         * @name Highcharts.theme\n         * @type {Highcharts.Options}\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Core/Utilities.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { charts, doc, win } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Highcharts.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        Reference to the chart that causes the error. Used in 'debugger'\n         *        module to display errors directly on the chart.\n         *        Important note: This argument is undefined for errors that lack\n         *        access to the Chart instance. In such case, the error will be\n         *        displayed on the last created chart.\n         *\n         * @param {Highcharts.Dictionary<string>} [params]\n         *        Additional parameters for the generated message.\n         *\n         * @return {void}\n         */\n        function error(code, stop, chart, params) {\n            const severity = stop ? 'Highcharts error' : 'Highcharts warning';\n            if (code === 32) {\n                code = `${severity}: Deprecated member`;\n            }\n            const isCode = isNumber(code);\n            let message = isCode ?\n                `${severity} #${code}: www.highcharts.com/errors/${code}/` :\n                code.toString();\n            const defaultHandler = function () {\n                if (stop) {\n                    throw new Error(message);\n                }\n                // Else ...\n                if (win.console &&\n                    error.messages.indexOf(message) === -1 // Prevent console flooting\n                ) {\n                    console.warn(message); // eslint-disable-line no-console\n                }\n            };\n            if (typeof params !== 'undefined') {\n                let additionalMessages = '';\n                if (isCode) {\n                    message += '?';\n                }\n                objectEach(params, function (value, key) {\n                    additionalMessages += `\\n - ${key}: ${value}`;\n                    if (isCode) {\n                        message += encodeURI(key) + '=' + encodeURI(value);\n                    }\n                });\n                message += additionalMessages;\n            }\n            fireEvent(H, 'displayError', { chart, code, message, params }, defaultHandler);\n            error.messages.push(message);\n        }\n        (function (error) {\n            error.messages = [];\n        })(error || (error = {}));\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {true | T} extendOrSource\n         *        Whether to extend the left-side object,\n         *        or the first object to merge as a deep copy.\n         *\n         * @param {...Array<object|undefined>} [sources]\n         *        Object(s) to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */\n        function merge(extendOrSource, ...sources) {\n            let i, args = [extendOrSource, ...sources], ret = {};\n            const doCopy = function (copy, original) {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                objectEach(original, function (value, key) {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (extendOrSource === true) {\n                ret = args[1];\n                args = Array.prototype.slice.call(args, 2);\n            }\n            // For each argument, extend the return\n            const len = args.length;\n            for (i = 0; i < len; i++) {\n                ret = doCopy(ret, args[i]);\n            }\n            return ret;\n        }\n        /**\n         * Constrain a value to within a lower and upper threshold.\n         *\n         * @private\n         * @param {number} value The initial value\n         * @param {number} min The lower threshold\n         * @param {number} max The upper threshold\n         * @return {number} Returns a number value within min and max.\n         */\n        function clamp(value, min, max) {\n            return value > min ? value < max ? value : max : min;\n        }\n        /**\n         * Utility for crisping a line position to the nearest full pixel depening on\n         * the line width\n         * @param {number} value       The raw pixel position\n         * @param {number} lineWidth   The line width\n         * @param {boolean} [inverted] Whether the containing group is inverted.\n         *                             Crisping round numbers on the y-scale need to go\n         *                             to the other side because the coordinate system\n         *                             is flipped (scaleY is -1)\n         * @return {number}            The pixel position to use for a crisp display\n         */\n        function crisp(value, lineWidth = 0, inverted) {\n            const mod = lineWidth % 2 / 2, inverter = inverted ? -1 : 1;\n            return (Math.round(value * inverter - mod) + mod) * inverter;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Return the deep difference between two objects. It can either return the new\n         * properties, or optionally return the old values of new properties.\n         * @private\n         */\n        function diffObjects(newer, older, keepOlder, collectionsWithUpdate) {\n            const ret = {};\n            /**\n             * Recurse over a set of options and its current values, and store the\n             * current values in the ret object.\n             */\n            function diff(newer, older, ret, depth) {\n                const keeper = keepOlder ? older : newer;\n                objectEach(newer, function (newerVal, key) {\n                    if (!depth &&\n                        collectionsWithUpdate &&\n                        collectionsWithUpdate.indexOf(key) > -1 &&\n                        older[key]) {\n                        newerVal = splat(newerVal);\n                        ret[key] = [];\n                        // Iterate over collections like series, xAxis or yAxis and map\n                        // the items by index.\n                        for (let i = 0; i < Math.max(newerVal.length, older[key].length); i++) {\n                            // Item exists in current data (#6347)\n                            if (older[key][i]) {\n                                // If the item is missing from the new data, we need to\n                                // save the whole config structure. Like when\n                                // responsively updating from a dual axis layout to a\n                                // single axis and back (#13544).\n                                if (newerVal[i] === void 0) {\n                                    ret[key][i] = older[key][i];\n                                    // Otherwise, proceed\n                                }\n                                else {\n                                    ret[key][i] = {};\n                                    diff(newerVal[i], older[key][i], ret[key][i], depth + 1);\n                                }\n                            }\n                        }\n                    }\n                    else if (isObject(newerVal, true) &&\n                        !newerVal.nodeType // #10044\n                    ) {\n                        ret[key] = isArray(newerVal) ? [] : {};\n                        diff(newerVal, older[key] || {}, ret[key], depth + 1);\n                        // Delete empty nested objects\n                        if (Object.keys(ret[key]).length === 0 &&\n                            // Except colorAxis which is a special case where the empty\n                            // object means it is enabled. Which is unfortunate and we\n                            // should try to find a better way.\n                            !(key === 'colorAxis' && depth === 0)) {\n                            delete ret[key];\n                        }\n                    }\n                    else if (newer[key] !== older[key] ||\n                        // If the newer key is explicitly undefined, keep it (#10525)\n                        (key in newer && !(key in older))) {\n                        if (key !== '__proto__' && key !== 'constructor') {\n                            ret[key] = keeper[key];\n                        }\n                    }\n                });\n            }\n            diff(newer, older, ret, 0);\n            return ret;\n        }\n        /**\n         * Shortcut for parseInt\n         *\n         * @private\n         * @function Highcharts.pInt\n         *\n         * @param {*} s\n         *        any\n         *\n         * @param {number} [mag]\n         *        Magnitude\n         *\n         * @return {number}\n         *         number\n         */\n        function pInt(s, mag) {\n            return parseInt(s, mag || 10);\n        }\n        /**\n         * Utility function to check for string type.\n         *\n         * @function Highcharts.isString\n         *\n         * @param {*} s\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a string.\n         */\n        function isString(s) {\n            return typeof s === 'string';\n        }\n        /**\n         * Utility function to check if an item is an array.\n         *\n         * @function Highcharts.isArray\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is an array.\n         */\n        function isArray(obj) {\n            const str = Object.prototype.toString.call(obj);\n            return str === '[object Array]' || str === '[object Array Iterator]';\n        }\n        /**\n         * Utility function to check if an item is of type object.\n         *\n         * @function Highcharts.isObject\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @param {boolean} [strict=false]\n         *        Also checks that the object is not an array.\n         *\n         * @return {boolean}\n         *         True if the argument is an object.\n         */\n        function isObject(obj, strict) {\n            return (!!obj &&\n                typeof obj === 'object' &&\n                (!strict || !isArray(obj))); // eslint-disable-line @typescript-eslint/no-explicit-any\n        }\n        /**\n         * Utility function to check if an Object is a HTML Element.\n         *\n         * @function Highcharts.isDOMElement\n         *\n         * @param {*} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a HTML Element.\n         */\n        function isDOMElement(obj) {\n            return isObject(obj) && typeof obj.nodeType === 'number';\n        }\n        /**\n         * Utility function to check if an Object is a class.\n         *\n         * @function Highcharts.isClass\n         *\n         * @param {object|undefined} obj\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the argument is a class.\n         */\n        function isClass(obj) {\n            const c = obj?.constructor;\n            return !!(isObject(obj, true) &&\n                !isDOMElement(obj) &&\n                (c?.name && c.name !== 'Object'));\n        }\n        /**\n         * Utility function to check if an item is a number and it is finite (not NaN,\n         * Infinity or -Infinity).\n         *\n         * @function Highcharts.isNumber\n         *\n         * @param {*} n\n         *        The item to check.\n         *\n         * @return {boolean}\n         *         True if the item is a finite number\n         */\n        function isNumber(n) {\n            return typeof n === 'number' && !isNaN(n) && n < Infinity && n > -Infinity;\n        }\n        /**\n         * Remove the last occurence of an item from an array.\n         *\n         * @function Highcharts.erase\n         *\n         * @param {Array<*>} arr\n         *        The array.\n         *\n         * @param {*} item\n         *        The item to remove.\n         *\n         * @return {void}\n         */\n        function erase(arr, item) {\n            let i = arr.length;\n            while (i--) {\n                if (arr[i] === item) {\n                    arr.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        /**\n         * Insert a series or an axis in a collection with other items, either the\n         * chart series or yAxis series or axis collections, in the correct order\n         * according to the index option and whether it is internal. Used internally\n         * when adding series and axes.\n         *\n         * @private\n         * @function Highcharts.Chart#insertItem\n         * @param  {Highcharts.Series|Highcharts.Axis} item\n         *         The item to insert\n         * @param  {Array<Highcharts.Series>|Array<Highcharts.Axis>} collection\n         *         A collection of items, like `chart.series` or `xAxis.series`.\n         * @return {number} The index of the series in the collection.\n         */\n        function insertItem(item, collection) {\n            const indexOption = item.options.index, length = collection.length;\n            let i;\n            for (\n            // Internal item (navigator) should always be pushed to the end\n            i = item.options.isInternal ? length : 0; i < length + 1; i++) {\n                if (\n                // No index option, reached the end of the collection,\n                // equivalent to pushing\n                !collection[i] ||\n                    // Handle index option, the element to insert has lower index\n                    (isNumber(indexOption) &&\n                        indexOption < pick(collection[i].options.index, collection[i]._i)) ||\n                    // Insert the new item before other internal items\n                    // (navigator)\n                    collection[i].options.isInternal) {\n                    collection.splice(i, 0, item);\n                    break;\n                }\n            }\n            return i;\n        }\n        /**\n         * Adds an item to an array, if it is not present in the array.\n         *\n         * @function Highcharts.pushUnique\n         *\n         * @param {Array<unknown>} array\n         * The array to add the item to.\n         *\n         * @param {unknown} item\n         * The item to add.\n         *\n         * @return {boolean}\n         * Returns true, if the item was not present and has been added.\n         */\n        function pushUnique(array, item) {\n            return array.indexOf(item) < 0 && !!array.push(item);\n        }\n        /**\n         * Check if an object is null or undefined.\n         *\n         * @function Highcharts.defined\n         *\n         * @param {*} obj\n         *        The object to check.\n         *\n         * @return {boolean}\n         *         False if the object is null or undefined, otherwise true.\n         */\n        function defined(obj) {\n            return typeof obj !== 'undefined' && obj !== null;\n        }\n        /**\n         * Set or get an attribute or an object of attributes.\n         *\n         * To use as a setter, pass a key and a value, or let the second argument be a\n         * collection of keys and values. When using a collection, passing a value of\n         * `null` or `undefined` will remove the attribute.\n         *\n         * To use as a getter, pass only a string as the second argument.\n         *\n         * @function Highcharts.attr\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} elem\n         *        The DOM element to receive the attribute(s).\n         *\n         * @param {string|Highcharts.HTMLAttributes|Highcharts.SVGAttributes} [keyOrAttribs]\n         *        The property or an object of key-value pairs.\n         *\n         * @param {number|string} [value]\n         *        The value if a single property is set.\n         *\n         * @return {string|null|undefined}\n         *         When used as a getter, return the value.\n         */\n        function attr(elem, keyOrAttribs, value) {\n            const isGetter = isString(keyOrAttribs) && !defined(value);\n            let ret;\n            const attrSingle = (value, key) => {\n                // Set the value\n                if (defined(value)) {\n                    elem.setAttribute(key, value);\n                    // Get the value\n                }\n                else if (isGetter) {\n                    ret = elem.getAttribute(key);\n                    // IE7 and below cannot get class through getAttribute (#7850)\n                    if (!ret && key === 'class') {\n                        ret = elem.getAttribute(key + 'Name');\n                    }\n                    // Remove the value\n                }\n                else {\n                    elem.removeAttribute(key);\n                }\n            };\n            // If keyOrAttribs is a string\n            if (isString(keyOrAttribs)) {\n                attrSingle(value, keyOrAttribs);\n                // Else if keyOrAttribs is defined, it is a hash of key/value pairs\n            }\n            else {\n                objectEach(keyOrAttribs, attrSingle);\n            }\n            return ret;\n        }\n        /**\n         * Check if an element is an array, and if not, make it into an array.\n         *\n         * @function Highcharts.splat\n         *\n         * @param {*} obj\n         *        The object to splat.\n         *\n         * @return {Array}\n         *         The produced or original array.\n         */\n        function splat(obj) {\n            return isArray(obj) ? obj : [obj];\n        }\n        /**\n         * Set a timeout if the delay is given, otherwise perform the function\n         * synchronously.\n         *\n         * @function Highcharts.syncTimeout\n         *\n         * @param {Function} fn\n         *        The function callback.\n         *\n         * @param {number} delay\n         *        Delay in milliseconds.\n         *\n         * @param {*} [context]\n         *        An optional context to send to the function callback.\n         *\n         * @return {number}\n         *         An identifier for the timeout that can later be cleared with\n         *         Highcharts.clearTimeout. Returns -1 if there is no timeout.\n         */\n        function syncTimeout(fn, delay, context) {\n            if (delay > 0) {\n                return setTimeout(fn, delay, context);\n            }\n            fn.call(0, context);\n            return -1;\n        }\n        /**\n         * Internal clear timeout. The function checks that the `id` was not removed\n         * (e.g. by `chart.destroy()`). For the details see\n         * [issue #7901](https://github.com/highcharts/highcharts/issues/7901).\n         *\n         * @function Highcharts.clearTimeout\n         *\n         * @param {number|undefined} id\n         * Id of a timeout.\n         */\n        function internalClearTimeout(id) {\n            if (defined(id)) {\n                clearTimeout(id);\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function Highcharts.extend<T>\n         *\n         * @param {T|undefined} a\n         *        The object to be extended.\n         *\n         * @param {Partial<T>} b\n         *        The object to add to the first one.\n         *\n         * @return {T}\n         *         Object a, the original object.\n         */\n        function extend(a, b) {\n            /* eslint-enable valid-jsdoc */\n            let n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) { // eslint-disable-line guard-for-in\n                a[n] = b[n];\n            }\n            return a;\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Return the first value that is not null or undefined.\n         *\n         * @function Highcharts.pick<T>\n         *\n         * @param {...Array<T|null|undefined>} items\n         *        Variable number of arguments to inspect.\n         *\n         * @return {T}\n         *         The value of the first argument that is not null or undefined.\n         */\n        function pick() {\n            const args = arguments;\n            const length = args.length;\n            for (let i = 0; i < length; i++) {\n                const arg = args[i];\n                if (typeof arg !== 'undefined' && arg !== null) {\n                    return arg;\n                }\n            }\n        }\n        /**\n         * Set CSS on a given element.\n         *\n         * @function Highcharts.css\n         *\n         * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} el\n         *        An HTML DOM element.\n         *\n         * @param {Highcharts.CSSObject} styles\n         *        Style object with camel case property names.\n         *\n         * @return {void}\n         */\n        function css(el, styles) {\n            extend(el.style, styles);\n        }\n        /**\n         * Utility function to create an HTML element with attributes and styles.\n         *\n         * @function Highcharts.createElement\n         *\n         * @param {string} tag\n         *        The HTML tag.\n         *\n         * @param {Highcharts.HTMLAttributes} [attribs]\n         *        Attributes as an object of key-value pairs.\n         *\n         * @param {Highcharts.CSSObject} [styles]\n         *        Styles as an object of key-value pairs.\n         *\n         * @param {Highcharts.HTMLDOMElement} [parent]\n         *        The parent HTML object.\n         *\n         * @param {boolean} [nopad=false]\n         *        If true, remove all padding, border and margin.\n         *\n         * @return {Highcharts.HTMLDOMElement}\n         *         The created DOM element.\n         */\n        function createElement(tag, attribs, styles, parent, nopad) {\n            const el = doc.createElement(tag);\n            if (attribs) {\n                extend(el, attribs);\n            }\n            if (nopad) {\n                css(el, { padding: '0', border: 'none', margin: '0' });\n            }\n            if (styles) {\n                css(el, styles);\n            }\n            if (parent) {\n                parent.appendChild(el);\n            }\n            return el;\n        }\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Extend a prototyped class by new members.\n         *\n         * @deprecated\n         * @function Highcharts.extendClass<T>\n         *\n         * @param {Highcharts.Class<T>} parent\n         *        The parent prototype to inherit.\n         *\n         * @param {Highcharts.Dictionary<*>} members\n         *        A collection of prototype members to add or override compared to the\n         *        parent prototype.\n         *\n         * @return {Highcharts.Class<T>}\n         *         A new prototype.\n         */\n        function extendClass(parent, members) {\n            const obj = (function () { });\n            obj.prototype = new parent(); // eslint-disable-line new-cap\n            extend(obj.prototype, members);\n            return obj;\n        }\n        /**\n         * Left-pad a string to a given length by adding a character repetitively.\n         *\n         * @function Highcharts.pad\n         *\n         * @param {number} number\n         *        The input string or number.\n         *\n         * @param {number} [length]\n         *        The desired string length.\n         *\n         * @param {string} [padder=0]\n         *        The character to pad with.\n         *\n         * @return {string}\n         *         The padded string.\n         */\n        function pad(number, length, padder) {\n            return new Array((length || 2) +\n                1 -\n                String(number)\n                    .replace('-', '')\n                    .length).join(padder || '0') + number;\n        }\n        /**\n         * Return a length based on either the integer value, or a percentage of a base.\n         *\n         * @function Highcharts.relativeLength\n         *\n         * @param {Highcharts.RelativeSize} value\n         *        A percentage string or a number.\n         *\n         * @param {number} base\n         *        The full length that represents 100%.\n         *\n         * @param {number} [offset=0]\n         *        A pixel offset to apply for percentage values. Used internally in\n         *        axis positioning.\n         *\n         * @return {number}\n         *         The computed length.\n         */\n        function relativeLength(value, base, offset) {\n            return (/%$/).test(value) ?\n                (base * parseFloat(value) / 100) + (offset || 0) :\n                parseFloat(value);\n        }\n        /**\n         * Replaces text in a string with a given replacement in a loop to catch nested\n         * matches after previous replacements.\n         *\n         * @function Highcharts.replaceNested\n         *\n         * @param {string} text\n         * Text to search and modify.\n         *\n         * @param {...Array<(RegExp|string)>} replacements\n         * One or multiple tuples with search pattern (`[0]: (string|RegExp)`) and\n         * replacement (`[1]: string`) for matching text.\n         *\n         * @return {string}\n         * Text with replacements.\n         */\n        function replaceNested(text, ...replacements) {\n            let previous, replacement;\n            do {\n                previous = text;\n                for (replacement of replacements) {\n                    text = text.replace(replacement[0], replacement[1]);\n                }\n            } while (text !== previous);\n            return text;\n        }\n        /**\n         * Wrap a method with extended functionality, preserving the original function.\n         *\n         * @function Highcharts.wrap\n         *\n         * @param {*} obj\n         *        The context object that the method belongs to. In real cases, this is\n         *        often a prototype.\n         *\n         * @param {string} method\n         *        The name of the method to extend.\n         *\n         * @param {Highcharts.WrapProceedFunction} func\n         *        A wrapper function callback. This function is called with the same\n         *        arguments as the original function, except that the original function\n         *        is unshifted and passed as the first argument.\n         */\n        function wrap(obj, method, func) {\n            const proceed = obj[method];\n            obj[method] = function () {\n                const outerArgs = arguments, scope = this;\n                return func.apply(this, [\n                    function () {\n                        return proceed.apply(scope, arguments.length ? arguments : outerArgs);\n                    }\n                ].concat([].slice.call(arguments)));\n            };\n        }\n        /**\n         * Get the magnitude of a number.\n         *\n         * @function Highcharts.getMagnitude\n         *\n         * @param {number} num\n         *        The number.\n         *\n         * @return {number}\n         *         The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc.\n         */\n        function getMagnitude(num) {\n            return Math.pow(10, Math.floor(Math.log(num) / Math.LN10));\n        }\n        /**\n         * Take an interval and normalize it to multiples of round numbers.\n         *\n         * @deprecated\n         * @function Highcharts.normalizeTickInterval\n         *\n         * @param {number} interval\n         *        The raw, un-rounded interval.\n         *\n         * @param {Array<*>} [multiples]\n         *        Allowed multiples.\n         *\n         * @param {number} [magnitude]\n         *        The magnitude of the number.\n         *\n         * @param {boolean} [allowDecimals]\n         *        Whether to allow decimals.\n         *\n         * @param {boolean} [hasTickAmount]\n         *        If it has tickAmount, avoid landing on tick intervals lower than\n         *        original.\n         *\n         * @return {number}\n         *         The normalized interval.\n         *\n         * @todo\n         * Move this function to the Axis prototype. It is here only for historical\n         * reasons.\n         */\n        function normalizeTickInterval(interval, multiples, magnitude, allowDecimals, hasTickAmount) {\n            let i, retInterval = interval;\n            // Round to a tenfold of 1, 2, 2.5 or 5\n            magnitude = pick(magnitude, getMagnitude(interval));\n            const normalized = interval / magnitude;\n            // Multiples for a linear scale\n            if (!multiples) {\n                multiples = hasTickAmount ?\n                    // Finer grained ticks when the tick amount is hard set, including\n                    // when alignTicks is true on multiple axes (#4580).\n                    [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10] :\n                    // Else, let ticks fall on rounder numbers\n                    [1, 2, 2.5, 5, 10];\n                // The allowDecimals option\n                if (allowDecimals === false) {\n                    if (magnitude === 1) {\n                        multiples = multiples.filter(function (num) {\n                            return num % 1 === 0;\n                        });\n                    }\n                    else if (magnitude <= 0.1) {\n                        multiples = [1 / magnitude];\n                    }\n                }\n            }\n            // Normalize the interval to the nearest multiple\n            for (i = 0; i < multiples.length; i++) {\n                retInterval = multiples[i];\n                // Only allow tick amounts smaller than natural\n                if ((hasTickAmount &&\n                    retInterval * magnitude >= interval) ||\n                    (!hasTickAmount &&\n                        (normalized <=\n                            (multiples[i] +\n                                (multiples[i + 1] || multiples[i])) / 2))) {\n                    break;\n                }\n            }\n            // Multiply back to the correct magnitude. Correct floats to appropriate\n            // precision (#6085).\n            retInterval = correctFloat(retInterval * magnitude, -Math.round(Math.log(0.001) / Math.LN10));\n            return retInterval;\n        }\n        /**\n         * Sort an object array and keep the order of equal items. The ECMAScript\n         * standard does not specify the behaviour when items are equal.\n         *\n         * @function Highcharts.stableSort\n         *\n         * @param {Array<*>} arr\n         *        The array to sort.\n         *\n         * @param {Function} sortFunction\n         *        The function to sort it with, like with regular Array.prototype.sort.\n         */\n        function stableSort(arr, sortFunction) {\n            // @todo It seems like Chrome since v70 sorts in a stable way internally,\n            // plus all other browsers do it, so over time we may be able to remove this\n            // function\n            const length = arr.length;\n            let sortValue, i;\n            // Add index to each item\n            for (i = 0; i < length; i++) {\n                arr[i].safeI = i; // Stable sort index\n            }\n            arr.sort(function (a, b) {\n                sortValue = sortFunction(a, b);\n                return sortValue === 0 ? a.safeI - b.safeI : sortValue;\n            });\n            // Remove index from items\n            for (i = 0; i < length; i++) {\n                delete arr[i].safeI; // Stable sort index\n            }\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.min` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMin\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The lowest number.\n         */\n        function arrayMin(data) {\n            let i = data.length, min = data[0];\n            while (i--) {\n                if (data[i] < min) {\n                    min = data[i];\n                }\n            }\n            return min;\n        }\n        /**\n         * Non-recursive method to find the lowest member of an array. `Math.max` raises\n         * a maximum call stack size exceeded error in Chrome when trying to apply more\n         * than 150.000 points. This method is slightly slower, but safe.\n         *\n         * @function Highcharts.arrayMax\n         *\n         * @param {Array<*>} data\n         *        An array of numbers.\n         *\n         * @return {number}\n         *         The highest number.\n         */\n        function arrayMax(data) {\n            let i = data.length, max = data[0];\n            while (i--) {\n                if (data[i] > max) {\n                    max = data[i];\n                }\n            }\n            return max;\n        }\n        /**\n         * Utility method that destroys any SVGElement instances that are properties on\n         * the given object. It loops all properties and invokes destroy if there is a\n         * destroy method. The property is then delete.\n         *\n         * @function Highcharts.destroyObjectProperties\n         *\n         * @param {*} obj\n         *        The object to destroy properties on.\n         *\n         * @param {*} [except]\n         *        Exception, do not destroy this property, only delete it.\n         */\n        function destroyObjectProperties(obj, except, destructablesOnly) {\n            objectEach(obj, function (val, n) {\n                // If the object is non-null and destroy is defined\n                if (val !== except && val?.destroy) {\n                    // Invoke the destroy\n                    val.destroy();\n                }\n                // Delete the property from the object\n                if (val?.destroy || !destructablesOnly) {\n                    delete obj[n];\n                }\n            });\n        }\n        /**\n         * Discard a HTML element\n         *\n         * @function Highcharts.discardElement\n         *\n         * @param {Highcharts.HTMLDOMElement} element\n         *        The HTML node to discard.\n         */\n        function discardElement(element) {\n            element?.parentElement?.removeChild(element);\n        }\n        /**\n         * Fix JS round off float errors.\n         *\n         * @function Highcharts.correctFloat\n         *\n         * @param {number} num\n         *        A float number to fix.\n         *\n         * @param {number} [prec=14]\n         *        The precision.\n         *\n         * @return {number}\n         *         The corrected float number.\n         */\n        function correctFloat(num, prec) {\n            // When the number is higher than 1e14 use the number (#16275)\n            return num > 1e14 ? num : parseFloat(num.toPrecision(prec || 14));\n        }\n        /**\n         * The time unit lookup\n         *\n         * @ignore\n         */\n        const timeUnits = {\n            millisecond: 1,\n            second: 1000,\n            minute: 60000,\n            hour: 3600000,\n            day: 24 * 3600000,\n            week: 7 * 24 * 3600000,\n            month: 28 * 24 * 3600000,\n            year: 364 * 24 * 3600000\n        };\n        /**\n         * Easing definition\n         *\n         * @private\n         * @function Math.easeInOutSine\n         *\n         * @param {number} pos\n         *        Current position, ranging from 0 to 1.\n         *\n         * @return {number}\n         *         Ease result\n         */\n        Math.easeInOutSine = function (pos) {\n            return -0.5 * (Math.cos(Math.PI * pos) - 1);\n        };\n        /**\n         * Convenience function to get the align factor, used several places for\n         * computing positions\n         * @private\n         */\n        const getAlignFactor = (align = '') => ({\n            center: 0.5,\n            right: 1,\n            middle: 0.5,\n            bottom: 1\n        }[align] || 0);\n        /**\n         * Find the closest distance between two values of a two-dimensional array\n         * @private\n         * @function Highcharts.getClosestDistance\n         *\n         * @param {Array<Array<number>>} arrays\n         *          An array of arrays of numbers\n         *\n         * @return {number | undefined}\n         *          The closest distance between values\n         */\n        function getClosestDistance(arrays, onError) {\n            const allowNegative = !onError;\n            let closest, loopLength, distance, i;\n            arrays.forEach((xData) => {\n                if (xData.length > 1) {\n                    loopLength = xData.length - 1;\n                    for (i = loopLength; i > 0; i--) {\n                        distance = xData[i] - xData[i - 1];\n                        if (distance < 0 && !allowNegative) {\n                            onError?.();\n                            // Only one call\n                            onError = void 0;\n                        }\n                        else if (distance && (typeof closest === 'undefined' || distance < closest)) {\n                            closest = distance;\n                        }\n                    }\n                }\n            });\n            return closest;\n        }\n        /**\n         * Returns the value of a property path on a given object.\n         *\n         * @private\n         * @function getNestedProperty\n         *\n         * @param {string} path\n         * Path to the property, for example `custom.myValue`.\n         *\n         * @param {unknown} obj\n         * Instance containing the property on the specific path.\n         *\n         * @return {unknown}\n         * The unknown property value.\n         */\n        function getNestedProperty(path, parent) {\n            const pathElements = path.split('.');\n            while (pathElements.length && defined(parent)) {\n                const pathElement = pathElements.shift();\n                // Filter on the key\n                if (typeof pathElement === 'undefined' ||\n                    pathElement === '__proto__') {\n                    return; // Undefined\n                }\n                if (pathElement === 'this') {\n                    let thisProp;\n                    if (isObject(parent)) {\n                        thisProp = parent['@this'];\n                    }\n                    return thisProp ?? parent;\n                }\n                const child = parent[pathElement.replace(/[\\\\'\"]/g, '')];\n                // Filter on the child\n                if (!defined(child) ||\n                    typeof child === 'function' ||\n                    typeof child.nodeType === 'number' ||\n                    child === win) {\n                    return; // Undefined\n                }\n                // Else, proceed\n                parent = child;\n            }\n            return parent;\n        }\n        /**\n         * Get the computed CSS value for given element and property, only for numerical\n         * properties. For width and height, the dimension of the inner box (excluding\n         * padding) is returned. Used for fitting the chart within the container.\n         *\n         * @function Highcharts.getStyle\n         *\n         * @param {Highcharts.HTMLDOMElement} el\n         * An HTML element.\n         *\n         * @param {string} prop\n         * The property name.\n         *\n         * @param {boolean} [toInt=true]\n         * Parse to integer.\n         *\n         * @return {number|string|undefined}\n         * The style value.\n         */\n        function getStyle(el, prop, toInt) {\n            let style;\n            // For width and height, return the actual inner pixel size (#4913)\n            if (prop === 'width') {\n                let offsetWidth = Math.min(el.offsetWidth, el.scrollWidth);\n                // In flex boxes, we need to use getBoundingClientRect and floor it,\n                // because scrollWidth doesn't support subpixel precision (#6427) ...\n                const boundingClientRectWidth = el.getBoundingClientRect?.().width;\n                // ...unless if the containing div or its parents are transform-scaled\n                // down, in which case the boundingClientRect can't be used as it is\n                // also scaled down (#9871, #10498).\n                if (boundingClientRectWidth < offsetWidth &&\n                    boundingClientRectWidth >= offsetWidth - 1) {\n                    offsetWidth = Math.floor(boundingClientRectWidth);\n                }\n                return Math.max(0, // #8377\n                (offsetWidth -\n                    (getStyle(el, 'padding-left', true) || 0) -\n                    (getStyle(el, 'padding-right', true) || 0)));\n            }\n            if (prop === 'height') {\n                return Math.max(0, // #8377\n                (Math.min(el.offsetHeight, el.scrollHeight) -\n                    (getStyle(el, 'padding-top', true) || 0) -\n                    (getStyle(el, 'padding-bottom', true) || 0)));\n            }\n            // Otherwise, get the computed style\n            const css = win.getComputedStyle(el, void 0); // eslint-disable-line no-undefined\n            if (css) {\n                style = css.getPropertyValue(prop);\n                if (pick(toInt, prop !== 'opacity')) {\n                    style = pInt(style);\n                }\n            }\n            return style;\n        }\n        /**\n         * Return the value of the first element in the array that satisfies the\n         * provided testing function.\n         *\n         * @function Highcharts.find<T>\n         *\n         * @param {Array<T>} arr\n         *        The array to test.\n         *\n         * @param {Function} callback\n         *        The callback function. The function receives the item as the first\n         *        argument. Return `true` if this item satisfies the condition.\n         *\n         * @return {T|undefined}\n         *         The value of the element.\n         */\n        const find = Array.prototype.find ?\n            function (arr, callback) {\n                return arr.find(callback);\n            } :\n            // Legacy implementation. PhantomJS, IE <= 11 etc. #7223.\n            function (arr, callback) {\n                let i;\n                const length = arr.length;\n                for (i = 0; i < length; i++) {\n                    if (callback(arr[i], i)) { // eslint-disable-line node/callback-return\n                        return arr[i];\n                    }\n                }\n            };\n        /**\n         * Get the element's offset position, corrected for `overflow: auto`.\n         *\n         * @function Highcharts.offset\n         *\n         * @param {global.Element} el\n         *        The DOM element.\n         *\n         * @return {Highcharts.OffsetObject}\n         *         An object containing `left` and `top` properties for the position in\n         *         the page.\n         */\n        function offset(el) {\n            const docElem = doc.documentElement, box = (el.parentElement || el.parentNode) ?\n                el.getBoundingClientRect() :\n                { top: 0, left: 0, width: 0, height: 0 };\n            return {\n                top: box.top + (win.pageYOffset || docElem.scrollTop) -\n                    (docElem.clientTop || 0),\n                left: box.left + (win.pageXOffset || docElem.scrollLeft) -\n                    (docElem.clientLeft || 0),\n                width: box.width,\n                height: box.height\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Iterate over object key pairs in an object.\n         *\n         * @function Highcharts.objectEach<T>\n         *\n         * @param {*} obj\n         *        The object to iterate over.\n         *\n         * @param {Highcharts.ObjectEachCallbackFunction<T>} fn\n         *        The iterator callback. It passes three arguments:\n         *        * value - The property value.\n         *        * key - The property key.\n         *        * obj - The object that objectEach is being applied to.\n         *\n         * @param {T} [ctx]\n         *        The context.\n         */\n        function objectEach(obj, fn, ctx) {\n            /* eslint-enable valid-jsdoc */\n            for (const key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    fn.call(ctx || obj[key], obj[key], key, obj);\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Add an event listener.\n         *\n         * @function Highcharts.addEvent<T>\n         *\n         * @param  {Highcharts.Class<T>|T} el\n         *         The element or object to add a listener to. It can be a\n         *         {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         *\n         * @param  {string} type\n         *         The event type.\n         *\n         * @param  {Highcharts.EventCallbackFunction<T>|Function} fn\n         *         The function callback to execute when the event is fired.\n         *\n         * @param  {Highcharts.EventOptionsObject} [options]\n         *         Options for adding the event.\n         *\n         * @sample highcharts/members/addevent\n         *         Use a general `render` event to draw shapes on a chart\n         *\n         * @return {Function}\n         *         A callback function to remove the added event.\n         */\n        function addEvent(el, type, fn, options = {}) {\n            /* eslint-enable valid-jsdoc */\n            // Add hcEvents to either the prototype (in case we're running addEvent on a\n            // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n            // inherited down the prototype chain, in which case we need to set the\n            // property on this instance (which may itself be a prototype).\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                owner.hcEvents = {};\n            }\n            const events = owner.hcEvents;\n            // Allow click events added to points, otherwise they will be prevented by\n            // the TouchPointer.pinch function after a pinch zoom operation (#7091).\n            if (H.Point && // Without H a dependency loop occurs\n                el instanceof H.Point &&\n                el.series &&\n                el.series.chart) {\n                el.series.chart.runTrackerClick = true;\n            }\n            // Handle DOM events\n            // If the browser supports passive events, add it to improve performance\n            // on touch events (#11353).\n            const addEventListener = el.addEventListener;\n            if (addEventListener) {\n                addEventListener.call(el, type, fn, H.supportsPassiveEvents ? {\n                    passive: options.passive === void 0 ?\n                        type.indexOf('touch') !== -1 : options.passive,\n                    capture: false\n                } : false);\n            }\n            if (!events[type]) {\n                events[type] = [];\n            }\n            const eventObject = {\n                fn,\n                order: typeof options.order === 'number' ? options.order : Infinity\n            };\n            events[type].push(eventObject);\n            // Order the calls\n            events[type].sort((a, b) => a.order - b.order);\n            // Return a function that can be called to remove this event.\n            return function () {\n                removeEvent(el, type, fn);\n            };\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.removeEvent<T>\n         *\n         * @param {Highcharts.Class<T>|T} el\n         *        The element to remove events on.\n         *\n         * @param {string} [type]\n         *        The type of events to remove. If undefined, all events are removed\n         *        from the element.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>} [fn]\n         *        The specific callback to remove. If undefined, all events that match\n         *        the element and optionally the type are removed.\n         *\n         * @return {void}\n         */\n        function removeEvent(el, type, fn) {\n            /* eslint-enable valid-jsdoc */\n            /**\n             * @private\n             */\n            function removeOneEvent(type, fn) {\n                const removeEventListener = el.removeEventListener;\n                if (removeEventListener) {\n                    removeEventListener.call(el, type, fn, false);\n                }\n            }\n            /**\n             * @private\n             */\n            function removeAllEvents(eventCollection) {\n                let types, len;\n                if (!el.nodeName) {\n                    return; // Break on non-DOM events\n                }\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                }\n                else {\n                    types = eventCollection;\n                }\n                objectEach(types, function (_val, n) {\n                    if (eventCollection[n]) {\n                        len = eventCollection[n].length;\n                        while (len--) {\n                            removeOneEvent(n, eventCollection[n][len].fn);\n                        }\n                    }\n                });\n            }\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                const events = owner.hcEvents;\n                if (type) {\n                    const typeEvents = (events[type] || []);\n                    if (fn) {\n                        events[type] = typeEvents.filter(function (obj) {\n                            return fn !== obj.fn;\n                        });\n                        removeOneEvent(type, fn);\n                    }\n                    else {\n                        removeAllEvents(events);\n                        events[type] = [];\n                    }\n                }\n                else {\n                    removeAllEvents(events);\n                    delete owner.hcEvents;\n                }\n            }\n        }\n        /* eslint-disable valid-jsdoc */\n        /**\n         * Fire an event that was registered with {@link Highcharts#addEvent}.\n         *\n         * @function Highcharts.fireEvent<T>\n         *\n         * @param {T} el\n         *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n         *        an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The type of event.\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Custom event arguments that are passed on as an argument to the event\n         *        handler.\n         *\n         * @param {Highcharts.EventCallbackFunction<T>|Function} [defaultFunction]\n         *        The default function to execute if the other listeners haven't\n         *        returned false.\n         *\n         * @return {void}\n         */\n        function fireEvent(el, type, eventArguments, defaultFunction) {\n            /* eslint-enable valid-jsdoc */\n            eventArguments = eventArguments || {};\n            if (doc?.createEvent &&\n                (el.dispatchEvent ||\n                    (el.fireEvent &&\n                        // Enable firing events on Highcharts instance.\n                        el !== H))) {\n                const e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                eventArguments = extend(e, eventArguments);\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(eventArguments);\n                }\n                else {\n                    el.fireEvent(type, eventArguments);\n                }\n            }\n            else if (el.hcEvents) {\n                if (!eventArguments.target) {\n                    // We're running a custom event\n                    extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip\n                        // default handler if called. The built-in\n                        // defaultPrevented property is not overwritable (#5112)\n                        preventDefault: function () {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking\n                        // the zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event\n                        // (#2297). If it is set, we're running a browser event.\n                        type: type\n                    });\n                }\n                const events = [];\n                let object = el;\n                let multilevel = false;\n                // Recurse up the inheritance chain and collect hcEvents set as own\n                // objects on the prototypes.\n                while (object.hcEvents) {\n                    if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                        object.hcEvents[type]) {\n                        if (events.length) {\n                            multilevel = true;\n                        }\n                        events.unshift.apply(events, object.hcEvents[type]);\n                    }\n                    object = Object.getPrototypeOf(object);\n                }\n                // For performance reasons, only sort the event handlers in case we are\n                // dealing with multiple levels in the prototype chain. Otherwise, the\n                // events are already sorted in the addEvent function.\n                if (multilevel) {\n                    // Order the calls\n                    events.sort((a, b) => a.order - b.order);\n                }\n                // Call the collected event handlers\n                events.forEach((obj) => {\n                    // If the event handler returns false, prevent the default handler\n                    // from executing\n                    if (obj.fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                });\n            }\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction.call(el, eventArguments);\n            }\n        }\n        let serialMode;\n        /**\n         * Get a unique key for using in internal element id's and pointers. The key is\n         * composed of a random hash specific to this Highcharts instance, and a\n         * counter.\n         *\n         * @example\n         * let id = uniqueKey(); // => 'highcharts-x45f6hp-0'\n         *\n         * @function Highcharts.uniqueKey\n         *\n         * @return {string}\n         * A unique key.\n         */\n        const uniqueKey = (function () {\n            const hash = Math.random().toString(36).substring(2, 9) + '-';\n            let id = 0;\n            return function () {\n                return 'highcharts-' + (serialMode ? '' : hash) + id++;\n            };\n        }());\n        /**\n         * Activates a serial mode for element IDs provided by\n         * {@link Highcharts.uniqueKey}. This mode can be used in automated tests, where\n         * a simple comparison of two rendered SVG graphics is needed.\n         *\n         * **Note:** This is only for testing purposes and will break functionality in\n         * webpages with multiple charts.\n         *\n         * @example\n         * if (\n         *   process &&\n         *   process.env.NODE_ENV === 'development'\n         * ) {\n         *   Highcharts.useSerialIds(true);\n         * }\n         *\n         * @function Highcharts.useSerialIds\n         *\n         * @param {boolean} [mode]\n         * Changes the state of serial mode.\n         *\n         * @return {boolean|undefined}\n         * State of the serial mode.\n         */\n        function useSerialIds(mode) {\n            return (serialMode = pick(mode, serialMode));\n        }\n        function isFunction(obj) {\n            return typeof obj === 'function';\n        }\n        function ucfirst(s) {\n            return ((isString(s) ?\n                s.substring(0, 1).toUpperCase() + s.substring(1) :\n                String(s)));\n        }\n        /* *\n         *\n         *  External\n         *\n         * */\n        // Register Highcharts as a plugin in jQuery\n        if (win.jQuery) {\n            /**\n             * Highcharts-extended JQuery.\n             *\n             * @external JQuery\n             */\n            /**\n             * Helper function to return the chart of the current JQuery selector\n             * element.\n             *\n             * @function external:JQuery#highcharts\n             *\n             * @return {Highcharts.Chart}\n             *         The chart that is linked to the JQuery selector element.\n             */ /**\n            * Factory function to create a chart in the current JQuery selector\n            * element.\n            *\n            * @function external:JQuery#highcharts\n            *\n            * @param {'Chart'|'Map'|'StockChart'|string} [className]\n            *        Name of the factory class in the Highcharts namespace.\n            *\n            * @param {Highcharts.Options} [options]\n            *        The chart options structure.\n            *\n            * @param {Highcharts.ChartCallbackFunction} [callback]\n            *        Function to run when the chart has loaded and all external\n            *        images are loaded. Defining a\n            *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n            *        handler is equivalent.\n            *\n            * @return {JQuery}\n            *         The current JQuery selector.\n            */\n            win.jQuery.fn.highcharts = function () {\n                const args = [].slice.call(arguments);\n                if (this[0]) { // `this[0]` is the renderTo div\n                    // Create the chart\n                    if (args[0]) {\n                        new H[ // eslint-disable-line computed-property-spacing, no-new\n                        // Constructor defaults to Chart\n                        isString(args[0]) ? args.shift() : 'Chart'](this[0], args[0], args[1]);\n                        return this;\n                    }\n                    // When called without parameters or with the return argument,\n                    // return an existing chart\n                    return charts[attr(this[0], 'data-highcharts-chart')];\n                }\n            };\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // TODO use named exports when supported.\n        const Utilities = {\n            addEvent,\n            arrayMax,\n            arrayMin,\n            attr,\n            clamp,\n            clearTimeout: internalClearTimeout,\n            correctFloat,\n            createElement,\n            crisp,\n            css,\n            defined,\n            destroyObjectProperties,\n            diffObjects,\n            discardElement,\n            erase,\n            error,\n            extend,\n            extendClass,\n            find,\n            fireEvent,\n            getAlignFactor,\n            getClosestDistance,\n            getMagnitude,\n            getNestedProperty,\n            getStyle,\n            insertItem,\n            isArray,\n            isClass,\n            isDOMElement,\n            isFunction,\n            isNumber,\n            isObject,\n            isString,\n            merge,\n            normalizeTickInterval,\n            objectEach,\n            offset,\n            pad,\n            pick,\n            pInt,\n            pushUnique,\n            relativeLength,\n            removeEvent,\n            replaceNested,\n            splat,\n            stableSort,\n            syncTimeout,\n            timeUnits,\n            ucfirst,\n            uniqueKey,\n            useSerialIds,\n            wrap\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * An animation configuration. Animation configurations can also be defined as\n         * booleans, where `false` turns off animation and `true` defaults to a duration\n         * of 500ms and defer of 0ms.\n         *\n         * @interface Highcharts.AnimationOptionsObject\n         */ /**\n        * A callback function to execute when the animation finishes.\n        * @name Highcharts.AnimationOptionsObject#complete\n        * @type {Function|undefined}\n        */ /**\n        * The animation defer in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#defer\n        * @type {number|undefined}\n        */ /**\n        * The animation duration in milliseconds.\n        * @name Highcharts.AnimationOptionsObject#duration\n        * @type {number|undefined}\n        */ /**\n        * The name of an easing function as defined on the `Math` object.\n        * @name Highcharts.AnimationOptionsObject#easing\n        * @type {string|Function|undefined}\n        */ /**\n        * A callback function to execute on each step of each attribute or CSS property\n        * that's being animated. The first argument contains information about the\n        * animation and progress.\n        * @name Highcharts.AnimationOptionsObject#step\n        * @type {Function|undefined}\n        */\n        /**\n         * Creates a frame for the animated SVG element.\n         *\n         * @callback Highcharts.AnimationStepCallbackFunction\n         *\n         * @param {Highcharts.SVGElement} this\n         *        The SVG element to animate.\n         *\n         * @return {void}\n         */\n        /**\n         * Interface description for a class.\n         *\n         * @interface Highcharts.Class<T>\n         * @extends Function\n         */ /**\n        * Class constructor.\n        * @function Highcharts.Class<T>#new\n        * @param {...Array<*>} args\n        *        Constructor arguments.\n        * @return {T}\n        *         Class instance.\n        */\n        /**\n         * A style object with camel case property names to define visual appearance of\n         * a SVG element or HTML element. The properties can be whatever styles are\n         * supported on the given SVG or HTML element.\n         *\n         * @example\n         * {\n         *    fontFamily: 'monospace',\n         *    fontSize: '1.2em'\n         * }\n         *\n         * @interface Highcharts.CSSObject\n         */ /**\n        * @name Highcharts.CSSObject#[key:string]\n        * @type {boolean|number|string|undefined}\n        */ /**\n        * Background style for the element.\n        * @name Highcharts.CSSObject#background\n        * @type {string|undefined}\n        */ /**\n        * Background color of the element.\n        * @name Highcharts.CSSObject#backgroundColor\n        * @type {Highcharts.ColorString|undefined}\n        */ /**\n        * Border style for the element.\n        * @name Highcharts.CSSObject#border\n        * @type {string|undefined}\n        */ /**\n        * Radius of the element border.\n        * @name Highcharts.CSSObject#borderRadius\n        * @type {number|undefined}\n        */ /**\n        * Color used in the element. The 'contrast' option is a Highcharts custom\n        * property that results in black or white, depending on the background of the\n        * element.\n        * @name Highcharts.CSSObject#color\n        * @type {'contrast'|Highcharts.ColorString|undefined}\n        */ /**\n        * Style of the mouse cursor when resting over the element.\n        * @name Highcharts.CSSObject#cursor\n        * @type {Highcharts.CursorValue|undefined}\n        */ /**\n        * Font family of the element text. Multiple values have to be in decreasing\n        * preference order and separated by comma.\n        * @name Highcharts.CSSObject#fontFamily\n        * @type {string|undefined}\n        */ /**\n        * Font size of the element text.\n        * @name Highcharts.CSSObject#fontSize\n        * @type {string|undefined}\n        */ /**\n        * Font weight of the element text.\n        * @name Highcharts.CSSObject#fontWeight\n        * @type {string|undefined}\n        */ /**\n        * Height of the element.\n        * @name Highcharts.CSSObject#height\n        * @type {number|undefined}\n        */ /**\n        * The maximum number of lines. If lines are cropped away, an ellipsis will be\n        * added.\n        * @name Highcharts.CSSObject#lineClamp\n        * @type {number|undefined}\n        */ /**\n        * Width of the element border.\n        * @name Highcharts.CSSObject#lineWidth\n        * @type {number|undefined}\n        */ /**\n        * Opacity of the element.\n        * @name Highcharts.CSSObject#opacity\n        * @type {number|undefined}\n        */ /**\n        * Space around the element content.\n        * @name Highcharts.CSSObject#padding\n        * @type {string|undefined}\n        */ /**\n        * Behaviour of the element when the mouse cursor rests over it.\n        * @name Highcharts.CSSObject#pointerEvents\n        * @type {string|undefined}\n        */ /**\n        * Positioning of the element.\n        * @name Highcharts.CSSObject#position\n        * @type {string|undefined}\n        */ /**\n        * Alignment of the element text.\n        * @name Highcharts.CSSObject#textAlign\n        * @type {string|undefined}\n        */ /**\n        * Additional decoration of the element text.\n        * @name Highcharts.CSSObject#textDecoration\n        * @type {string|undefined}\n        */ /**\n        * Outline style of the element text.\n        * @name Highcharts.CSSObject#textOutline\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text. Highcharts SVG elements support\n        * `ellipsis` when a `width` is set.\n        * @name Highcharts.CSSObject#textOverflow\n        * @type {string|undefined}\n        */ /**\n        * Top spacing of the element relative to the parent element.\n        * @name Highcharts.CSSObject#top\n        * @type {string|undefined}\n        */ /**\n        * Animated transition of selected element properties.\n        * @name Highcharts.CSSObject#transition\n        * @type {string|undefined}\n        */ /**\n        * Line break style of the element text.\n        * @name Highcharts.CSSObject#whiteSpace\n        * @type {string|undefined}\n        */ /**\n        * Width of the element.\n        * @name Highcharts.CSSObject#width\n        * @type {number|undefined}\n        */\n        /**\n         * All possible cursor styles.\n         *\n         * @typedef {'alias'|'all-scroll'|'auto'|'cell'|'col-resize'|'context-menu'|'copy'|'crosshair'|'default'|'e-resize'|'ew-resize'|'grab'|'grabbing'|'help'|'move'|'n-resize'|'ne-resize'|'nesw-resize'|'no-drop'|'none'|'not-allowed'|'ns-resize'|'nw-resize'|'nwse-resize'|'pointer'|'progress'|'row-resize'|'s-resize'|'se-resize'|'sw-resize'|'text'|'vertical-text'|'w-resize'|'wait'|'zoom-in'|'zoom-out'} Highcharts.CursorValue\n         */\n        /**\n         * All possible dash styles.\n         *\n         * @typedef {'Dash'|'DashDot'|'Dot'|'LongDash'|'LongDashDot'|'LongDashDotDot'|'ShortDash'|'ShortDashDot'|'ShortDashDotDot'|'ShortDot'|'Solid'} Highcharts.DashStyleValue\n         */\n        /**\n         * Generic dictionary in TypeScript notation.\n         * Use the native `AnyRecord` instead.\n         *\n         * @deprecated\n         * @interface Highcharts.Dictionary<T>\n         */ /**\n        * @name Highcharts.Dictionary<T>#[key:string]\n        * @type {T}\n        */\n        /**\n         * The function callback to execute when the event is fired. The `this` context\n         * contains the instance, that fired the event.\n         *\n         * @callback Highcharts.EventCallbackFunction<T>\n         *\n         * @param {T} this\n         *\n         * @param {Highcharts.Dictionary<*>|Event} [eventArguments]\n         *        Event arguments.\n         *\n         * @return {boolean|void}\n         */\n        /**\n         * The event options for adding function callback.\n         *\n         * @interface Highcharts.EventOptionsObject\n         */ /**\n        * The order the event handler should be called. This opens for having one\n        * handler be called before another, independent of in which order they were\n        * added.\n        * @name Highcharts.EventOptionsObject#order\n        * @type {number}\n        */ /**\n        * Whether an event should be passive or not.\n        * When set to `true`, the function specified by listener will never call\n        * `preventDefault()`.\n        * @name Highcharts.EventOptionsObject#passive\n        * @type boolean\n        */\n        /**\n         * Formats data as a string. Usually the data is accessible through the `this`\n         * keyword.\n         *\n         * @callback Highcharts.FormatterCallbackFunction<T>\n         *\n         * @param {T} this\n         *        Context to format\n         *\n         * @return {string}\n         *         Formatted text\n         */\n        /**\n         * An object of key-value pairs for HTML attributes.\n         *\n         * @typedef {Highcharts.Dictionary<boolean|number|string|Function>} Highcharts.HTMLAttributes\n         */\n        /**\n         * An HTML DOM element. The type is a reference to the regular HTMLElement in\n         * the global scope.\n         *\n         * @typedef {global.HTMLElement} Highcharts.HTMLDOMElement\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\n         */\n        /**\n         * The iterator callback.\n         *\n         * @callback Highcharts.ObjectEachCallbackFunction<T>\n         *\n         * @param {T} this\n         *        The context.\n         *\n         * @param {*} value\n         *        The property value.\n         *\n         * @param {string} key\n         *        The property key.\n         *\n         * @param {*} obj\n         *        The object that objectEach is being applied to.\n         */\n        /**\n         * An object containing `left` and `top` properties for the position in the\n         * page.\n         *\n         * @interface Highcharts.OffsetObject\n         */ /**\n        * Left distance to the page border.\n        * @name Highcharts.OffsetObject#left\n        * @type {number}\n        */ /**\n        * Top distance to the page border.\n        * @name Highcharts.OffsetObject#top\n        * @type {number}\n        */\n        /**\n         * Describes a range.\n         *\n         * @interface Highcharts.RangeObject\n         */ /**\n        * Maximum number of the range.\n        * @name Highcharts.RangeObject#max\n        * @type {number}\n        */ /**\n        * Minimum number of the range.\n        * @name Highcharts.RangeObject#min\n        * @type {number}\n        */\n        /**\n         * If a number is given, it defines the pixel length. If a percentage string is\n         * given, like for example `'50%'`, the setting defines a length relative to a\n         * base size, for example the size of a container.\n         *\n         * @typedef {number|string} Highcharts.RelativeSize\n         */\n        /**\n         * Proceed function to call original (wrapped) function.\n         *\n         * @callback Highcharts.WrapProceedFunction\n         *\n         * @param {*} [arg1]\n         *        Optional argument. Without any arguments defaults to first argument of\n         *        the wrapping function.\n         *\n         * @param {*} [arg2]\n         *        Optional argument. Without any arguments defaults to second argument\n         *        of the wrapping function.\n         *\n         * @param {*} [arg3]\n         *        Optional argument. Without any arguments defaults to third argument of\n         *        the wrapping function.\n         *\n         * @return {*}\n         *         Return value of the original function.\n         */\n        /**\n         * The Highcharts object is the placeholder for all other members, and various\n         * utility functions. The most important member of the namespace would be the\n         * chart constructor.\n         *\n         * @example\n         * let chart = Highcharts.chart('container', { ... });\n         *\n         * @namespace Highcharts\n         */\n        ''; // Detach doclets above\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Core/Renderer/HTML/AST.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { SVG_NS, win } = H;\n        const { attr, createElement, css, error, isFunction, isString, objectEach, splat } = U;\n        const { trustedTypes } = win;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // Create the trusted type policy. This should not be exposed.\n        const trustedTypesPolicy = (trustedTypes &&\n            isFunction(trustedTypes.createPolicy) &&\n            trustedTypes.createPolicy('highcharts', {\n                createHTML: (s) => s\n            }));\n        const emptyHTML = trustedTypesPolicy ?\n            trustedTypesPolicy.createHTML('') :\n            '';\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AST class represents an abstract syntax tree of HTML or SVG content. It\n         * can take HTML as an argument, parse it, optionally transform it to SVG, then\n         * perform sanitation before inserting it into the DOM.\n         *\n         * @class\n         * @name Highcharts.AST\n         *\n         * @param {string|Array<Highcharts.ASTNode>} source\n         * Either an HTML string or an ASTNode list to populate the tree.\n         */\n        class AST {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Filter an object of SVG or HTML attributes against the allow list.\n             *\n             * @static\n             *\n             * @function Highcharts.AST#filterUserAttributes\n             *\n             * @param {Highcharts.SVGAttributes} attributes The attributes to filter\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The filtered attributes\n             */\n            static filterUserAttributes(attributes) {\n                objectEach(attributes, (val, key) => {\n                    let valid = true;\n                    if (AST.allowedAttributes.indexOf(key) === -1) {\n                        valid = false;\n                    }\n                    if (['background', 'dynsrc', 'href', 'lowsrc', 'src']\n                        .indexOf(key) !== -1) {\n                        valid = isString(val) && AST.allowedReferences.some((ref) => val.indexOf(ref) === 0);\n                    }\n                    if (!valid) {\n                        error(33, false, void 0, {\n                            'Invalid attribute in config': `${key}`\n                        });\n                        delete attributes[key];\n                    }\n                    // #17753, < is not allowed in SVG attributes\n                    if (isString(val) && attributes[key]) {\n                        attributes[key] = val.replace(/</g, '&lt;');\n                    }\n                });\n                return attributes;\n            }\n            static parseStyle(style) {\n                return style\n                    .split(';')\n                    .reduce((styles, line) => {\n                    const pair = line.split(':').map((s) => s.trim()), key = pair.shift();\n                    if (key && pair.length) {\n                        styles[key.replace(/-([a-z])/g, (g) => g[1].toUpperCase())] = pair.join(':'); // #17146\n                    }\n                    return styles;\n                }, {});\n            }\n            /**\n             * Utility function to set html content for an element by passing in a\n             * markup string. The markup is safely parsed by the AST class to avoid\n             * XSS vulnerabilities. This function should be used instead of setting\n             * `innerHTML` in all cases where the content is not fully trusted.\n             *\n             * @static\n             * @function Highcharts.AST#setElementHTML\n             *\n             * @param {SVGDOMElement|HTMLDOMElement} el\n             * Node to set content of.\n             *\n             * @param {string} html\n             * Markup string\n             */\n            static setElementHTML(el, html) {\n                el.innerHTML = AST.emptyHTML; // Clear previous\n                if (html) {\n                    const ast = new AST(html);\n                    ast.addToDOM(el);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            // Construct an AST from HTML markup, or wrap an array of existing AST nodes\n            constructor(source) {\n                this.nodes = typeof source === 'string' ?\n                    this.parseMarkup(source) : source;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add the tree defined as a hierarchical JS structure to the DOM\n             *\n             * @function Highcharts.AST#addToDOM\n             *\n             * @param {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement} parent\n             * The node where it should be added\n             *\n             * @return {Highcharts.HTMLDOMElement|Highcharts.SVGDOMElement}\n             * The inserted node.\n             */\n            addToDOM(parent) {\n                /**\n                 * @private\n                 * @param {Highcharts.ASTNode} subtree\n                 * HTML/SVG definition\n                 * @param {Element} [subParent]\n                 * parent node\n                 * @return {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement}\n                 * The inserted node.\n                 */\n                function recurse(subtree, subParent) {\n                    let ret;\n                    splat(subtree).forEach(function (item) {\n                        const tagName = item.tagName;\n                        const textNode = item.textContent ?\n                            H.doc.createTextNode(item.textContent) :\n                            void 0;\n                        // Whether to ignore the AST filtering totally, #15345\n                        const bypassHTMLFiltering = AST.bypassHTMLFiltering;\n                        let node;\n                        if (tagName) {\n                            if (tagName === '#text') {\n                                node = textNode;\n                            }\n                            else if (AST.allowedTags.indexOf(tagName) !== -1 ||\n                                bypassHTMLFiltering) {\n                                const NS = tagName === 'svg' ?\n                                    SVG_NS :\n                                    (subParent.namespaceURI || SVG_NS);\n                                const element = H.doc.createElementNS(NS, tagName);\n                                const attributes = item.attributes || {};\n                                // Apply attributes from root of AST node, legacy from\n                                // from before TextBuilder\n                                objectEach(item, function (val, key) {\n                                    if (key !== 'tagName' &&\n                                        key !== 'attributes' &&\n                                        key !== 'children' &&\n                                        key !== 'style' &&\n                                        key !== 'textContent') {\n                                        attributes[key] = val;\n                                    }\n                                });\n                                attr(element, bypassHTMLFiltering ?\n                                    attributes :\n                                    AST.filterUserAttributes(attributes));\n                                if (item.style) {\n                                    css(element, item.style);\n                                }\n                                // Add text content\n                                if (textNode) {\n                                    element.appendChild(textNode);\n                                }\n                                // Recurse\n                                recurse(item.children || [], element);\n                                node = element;\n                            }\n                            else {\n                                error(33, false, void 0, {\n                                    'Invalid tagName in config': tagName\n                                });\n                            }\n                        }\n                        // Add to the tree\n                        if (node) {\n                            subParent.appendChild(node);\n                        }\n                        ret = node;\n                    });\n                    // Return last node added (on top level it's the only one)\n                    return ret;\n                }\n                return recurse(this.nodes, parent);\n            }\n            /**\n             * Parse HTML/SVG markup into AST Node objects. Used internally from the\n             * constructor.\n             *\n             * @private\n             *\n             * @function Highcharts.AST#getNodesFromMarkup\n             *\n             * @param {string} markup The markup string.\n             *\n             * @return {Array<Highcharts.ASTNode>} The parsed nodes.\n             */\n            parseMarkup(markup) {\n                const nodes = [];\n                markup = markup\n                    .trim()\n                    // The style attribute throws a warning when parsing when CSP is\n                    // enabled (#6884), so use an alias and pick it up below\n                    // Make all quotation marks parse correctly to DOM (#17627)\n                    .replace(/ style=([\"'])/g, ' data-style=$1');\n                let doc;\n                try {\n                    doc = new DOMParser().parseFromString(trustedTypesPolicy ?\n                        trustedTypesPolicy.createHTML(markup) :\n                        markup, 'text/html');\n                }\n                catch (e) {\n                    // There are two cases where this fails:\n                    // 1. IE9 and PhantomJS, where the DOMParser only supports parsing\n                    //    XML\n                    // 2. Due to a Chromium issue where chart redraws are triggered by\n                    //    a `beforeprint` event (#16931),\n                    //    https://issues.chromium.org/issues/40222135\n                }\n                if (!doc) {\n                    const body = createElement('div');\n                    body.innerHTML = markup;\n                    doc = { body };\n                }\n                const appendChildNodes = (node, addTo) => {\n                    const tagName = node.nodeName.toLowerCase();\n                    // Add allowed tags\n                    const astNode = {\n                        tagName\n                    };\n                    if (tagName === '#text') {\n                        astNode.textContent = node.textContent || '';\n                    }\n                    const parsedAttributes = node.attributes;\n                    // Add attributes\n                    if (parsedAttributes) {\n                        const attributes = {};\n                        [].forEach.call(parsedAttributes, (attrib) => {\n                            if (attrib.name === 'data-style') {\n                                astNode.style = AST.parseStyle(attrib.value);\n                            }\n                            else {\n                                attributes[attrib.name] = attrib.value;\n                            }\n                        });\n                        astNode.attributes = attributes;\n                    }\n                    // Handle children\n                    if (node.childNodes.length) {\n                        const children = [];\n                        [].forEach.call(node.childNodes, (childNode) => {\n                            appendChildNodes(childNode, children);\n                        });\n                        if (children.length) {\n                            astNode.children = children;\n                        }\n                    }\n                    addTo.push(astNode);\n                };\n                [].forEach.call(doc.body.childNodes, (childNode) => appendChildNodes(childNode, nodes));\n                return nodes;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * The list of allowed SVG or HTML attributes, used for sanitizing\n         * potentially harmful content from the chart configuration before adding to\n         * the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedAttributes)\n         *\n         * @example\n         * // Allow a custom, trusted attribute\n         * Highcharts.AST.allowedAttributes.push('data-value');\n         *\n         * @name Highcharts.AST.allowedAttributes\n         * @type {Array<string>}\n         */\n        AST.allowedAttributes = [\n            'alt',\n            'aria-controls',\n            'aria-describedby',\n            'aria-expanded',\n            'aria-haspopup',\n            'aria-hidden',\n            'aria-label',\n            'aria-labelledby',\n            'aria-live',\n            'aria-pressed',\n            'aria-readonly',\n            'aria-roledescription',\n            'aria-selected',\n            'class',\n            'clip-path',\n            'color',\n            'colspan',\n            'cx',\n            'cy',\n            'd',\n            'disabled',\n            'dx',\n            'dy',\n            'fill',\n            'filterUnits',\n            'flood-color',\n            'flood-opacity',\n            'height',\n            'href',\n            'id',\n            'in',\n            'in2',\n            'markerHeight',\n            'markerWidth',\n            'offset',\n            'opacity',\n            'operator',\n            'orient',\n            'padding',\n            'paddingLeft',\n            'paddingRight',\n            'patternUnits',\n            'r',\n            'radius',\n            'refX',\n            'refY',\n            'result',\n            'role',\n            'rowspan',\n            'scope',\n            'slope',\n            'src',\n            'startOffset',\n            'stdDeviation',\n            'stroke-linecap',\n            'stroke-width',\n            'stroke',\n            'style',\n            'summary',\n            'tabindex',\n            'tableValues',\n            'target',\n            'text-align',\n            'text-anchor',\n            'textAnchor',\n            'textLength',\n            'title',\n            'type',\n            'valign',\n            'width',\n            'x',\n            'x1',\n            'x2',\n            'xlink:href',\n            'y',\n            'y1',\n            'y2',\n            'zIndex'\n        ];\n        /**\n         * The list of allowed references for referring attributes like `href` and\n         * `src`. Attribute values will only be allowed if they start with one of\n         * these strings.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedReferences)\n         *\n         * @example\n         * // Allow tel:\n         * Highcharts.AST.allowedReferences.push('tel:');\n         *\n         * @name    Highcharts.AST.allowedReferences\n         * @type    {Array<string>}\n         */\n        AST.allowedReferences = [\n            'https://',\n            'http://',\n            'mailto:',\n            '/',\n            '../',\n            './',\n            '#'\n        ];\n        /**\n         * The list of allowed SVG or HTML tags, used for sanitizing potentially\n         * harmful content from the chart configuration before adding to the DOM.\n         *\n         * @see [Source code with default values](\n         * https://github.com/highcharts/highcharts/blob/master/ts/Core/Renderer/HTML/AST.ts#:~:text=public%20static%20allowedTags)\n         *\n         * @example\n         * // Allow a custom, trusted tag\n         * Highcharts.AST.allowedTags.push('blink'); // ;)\n         *\n         * @name    Highcharts.AST.allowedTags\n         * @type    {Array<string>}\n         */\n        AST.allowedTags = [\n            '#text',\n            'a',\n            'abbr',\n            'b',\n            'br',\n            'button',\n            'caption',\n            'circle',\n            'clipPath',\n            'code',\n            'dd',\n            'defs',\n            'div',\n            'dl',\n            'dt',\n            'em',\n            'feComponentTransfer',\n            'feComposite',\n            'feDropShadow',\n            'feFlood',\n            'feFuncA',\n            'feFuncB',\n            'feFuncG',\n            'feFuncR',\n            'feGaussianBlur',\n            'feMerge',\n            'feMergeNode',\n            'feMorphology',\n            'feOffset',\n            'filter',\n            'h1',\n            'h2',\n            'h3',\n            'h4',\n            'h5',\n            'h6',\n            'hr',\n            'i',\n            'img',\n            'li',\n            'linearGradient',\n            'marker',\n            'ol',\n            'p',\n            'path',\n            'pattern',\n            'pre',\n            'rect',\n            'small',\n            'span',\n            'stop',\n            'strong',\n            'style',\n            'sub',\n            'sup',\n            'svg',\n            'table',\n            'tbody',\n            'td',\n            'text',\n            'textPath',\n            'th',\n            'thead',\n            'title',\n            'tr',\n            'tspan',\n            'u',\n            'ul'\n        ];\n        AST.emptyHTML = emptyHTML;\n        /**\n         * Allow all custom SVG and HTML attributes, references and tags (together\n         * with potentially harmful ones) to be added to the DOM from the chart\n         * configuration. In other words, disable the allow-listing which is the\n         * primary functionality of the AST.\n         *\n         * WARNING: Setting this property to `true` while allowing untrusted user\n         * data in the chart configuration will expose your application to XSS\n         * security risks!\n         *\n         * Note that in case you want to allow a known set of tags or attributes,\n         * you should allow-list them instead of disabling the filtering totally.\n         * See [allowedAttributes](Highcharts.AST#.allowedAttributes),\n         * [allowedReferences](Highcharts.AST#.allowedReferences) and\n         * [allowedTags](Highcharts.AST#.allowedTags). The `bypassHTMLFiltering`\n         * setting is intended only for those cases where allow-listing is not\n         * practical, and the chart configuration already comes from a secure\n         * source.\n         *\n         * @example\n         * // Allow all custom attributes, references and tags (disable DOM XSS\n         * // filtering)\n         * Highcharts.AST.bypassHTMLFiltering = true;\n         *\n         * @name Highcharts.AST.bypassHTMLFiltering\n         * @static\n         */\n        AST.bypassHTMLFiltering = false;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Serialized form of an SVG/HTML definition, including children.\n         *\n         * @interface Highcharts.ASTNode\n         */ /**\n        * @name Highcharts.ASTNode#attributes\n        * @type {Highcharts.SVGAttributes|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#children\n        * @type {Array<Highcharts.ASTNode>|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#tagName\n        * @type {string|undefined}\n        */ /**\n        * @name Highcharts.ASTNode#textContent\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in file\n\n        return AST;\n    });\n    _registerModule(_modules, 'Dashboards/Globals.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        /**\n         * Global Dashboards namespace in classic `<scripts>`-based implementations.\n         *\n         * @namespace Dashboards\n         */\n        var Globals;\n        (function (Globals) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Prefix of a GUIElement HTML class name.\n             */\n            Globals.classNamePrefix = 'highcharts-dashboards-';\n            /** @internal */\n            Globals.classNames = {\n                layout: Globals.classNamePrefix + 'layout',\n                cell: Globals.classNamePrefix + 'cell',\n                cellHover: Globals.classNamePrefix + 'cell-state-hover',\n                cellActive: Globals.classNamePrefix + 'cell-state-active',\n                cellLoading: Globals.classNamePrefix + 'cell-state-loading',\n                row: Globals.classNamePrefix + 'row',\n                layoutsWrapper: Globals.classNamePrefix + 'layouts-wrapper',\n                boardContainer: Globals.classNamePrefix + 'wrapper'\n            };\n            /** @internal */\n            Globals.guiElementType = {\n                row: 'row',\n                cell: 'cell',\n                layout: 'layout'\n            };\n            /**\n             * Contains all Board instances of this window.\n             */\n            Globals.boards = [];\n            /**\n             * Reference to the window used by Dashboards.\n             */\n            Globals.win = window;\n            Globals.doc = document;\n            Globals.noop = function () { };\n            Globals.isMS = /(edge|msie|trident)/i\n                .test((Globals.win.navigator && Globals.win.navigator.userAgent) || '') && !Globals.win.opera;\n            Globals.supportsPassiveEvents = (function () {\n                // Checks whether the browser supports passive events, (#11353).\n                let supportsPassive = false;\n                // Object.defineProperty doesn't work on IE as well as passive\n                // events - instead of using polyfill, we can exclude IE totally.\n                if (!Globals.isMS) {\n                    const opts = Object.defineProperty({}, 'passive', {\n                        get: function () {\n                            supportsPassive = true;\n                        }\n                    });\n                    if (Globals.win.addEventListener && Globals.win.removeEventListener) {\n                        Globals.win.addEventListener('testPassive', Globals.noop, opts);\n                        Globals.win.removeEventListener('testPassive', Globals.noop, opts);\n                    }\n                }\n                return supportsPassive;\n            }());\n        })(Globals || (Globals = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Globals;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditGlobals.js', [_modules['Dashboards/Globals.js']], function (DG) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const PREFIX = DG.classNamePrefix + 'edit-';\n        const EditGlobals = {\n            classNames: {\n                resizeSnap: PREFIX + 'resize-snap',\n                resizeSnapX: PREFIX + 'resize-snap-x',\n                resizeSnapY: PREFIX + 'resize-snap-y',\n                separator: PREFIX + 'separator',\n                contextMenuBtn: PREFIX + 'context-menu-btn',\n                contextMenuBtnText: PREFIX + 'context-menu-btn-text',\n                contextMenu: PREFIX + 'context-menu',\n                contextMenuItem: PREFIX + 'context-menu-item',\n                editModeEnabled: PREFIX + 'enabled',\n                editToolbar: PREFIX + 'toolbar',\n                editToolbarCellOutline: PREFIX + 'toolbar-cell-outline',\n                editToolbarRowOutline: PREFIX + 'toolbar-row-outline',\n                editToolbarItem: PREFIX + 'toolbar-item',\n                editToolbarRow: PREFIX + 'toolbar-row',\n                editToolbarCell: PREFIX + 'toolbar-cell',\n                editSidebar: PREFIX + 'sidebar',\n                editSidebarShow: PREFIX + 'sidebar-show',\n                editSidebarHide: PREFIX + 'sidebar-hide',\n                editSidebarHeader: PREFIX + 'sidebar-header',\n                editSidebarTitle: PREFIX + 'sidebar-title',\n                editSidebarMenuItem: PREFIX + 'sidebar-item',\n                rowContextHighlight: PREFIX + 'row-context-highlight',\n                cellEditHighlight: PREFIX + 'cell-highlight',\n                dashboardCellEditHighlightActive: PREFIX + 'cell-highlight-active',\n                dragMock: PREFIX + 'drag-mock',\n                dropPointer: PREFIX + 'drop-pointer',\n                contextDetectionPointer: PREFIX + 'ctx-detection-pointer',\n                resizePointer: PREFIX + 'resize-pointer',\n                currentEditedElement: PREFIX + 'unmask',\n                maskElement: PREFIX + 'mask',\n                menuItem: PREFIX + 'menu-item',\n                menu: PREFIX + 'menu',\n                menuVerticalSeparator: PREFIX + 'menu-vertical-separator',\n                menuHorizontalSeparator: PREFIX + 'menu-horizontal-separator',\n                menuDestroy: PREFIX + 'menu-destroy',\n                editSidebarWrapper: PREFIX + 'sidebar-wrapper',\n                customSelect: PREFIX + 'custom-select',\n                customSelectButton: PREFIX + 'custom-option-button',\n                toggleContainer: PREFIX + 'toggle-container',\n                toggleWrapper: PREFIX + 'toggle-wrapper',\n                toggleSlider: PREFIX + 'toggle-slider',\n                toggleWrapperColored: PREFIX + 'toggle-wrapper-colored',\n                toggleLabels: PREFIX + 'toggle-labels',\n                labeledToggleWrapper: PREFIX + 'labeled-toggle-wrapper',\n                button: PREFIX + 'button',\n                sidebarNavButton: PREFIX + 'sidebar-button-nav',\n                labelText: PREFIX + 'label-text',\n                editSidebarTabBtn: PREFIX + 'sidebar-tab-btn',\n                editToolsBtn: PREFIX + 'tools-btn',\n                editTools: PREFIX + 'tools',\n                editGridItems: PREFIX + 'grid-items',\n                // Confirmation popup\n                confirmationPopup: PREFIX + 'confirmation-popup',\n                popupButtonContainer: PREFIX + 'confirmation-popup-button-container',\n                popupContentContainer: PREFIX + 'confirmation-popup-content',\n                popupCancelBtn: PREFIX + 'confirmation-popup-cancel-btn',\n                popupConfirmBtn: PREFIX + 'confirmation-popup-confirm-btn',\n                popupCloseButton: PREFIX + 'popup-close',\n                editOverlay: PREFIX + 'overlay',\n                editOverlayActive: PREFIX + 'overlay-active',\n                resizerMenuBtnActive: PREFIX + 'resizer-menu-btn-active',\n                sidebarCloseButton: PREFIX + 'close-btn',\n                editSidebarTabBtnWrapper: PREFIX + 'tabs-buttons-wrapper',\n                editSidebarRight: PREFIX + 'sidebar-right',\n                editSidebarRightShow: PREFIX + 'sidebar-right-show',\n                viewFullscreen: PREFIX + 'view-fullscreen',\n                // Accordion\n                accordionMenu: PREFIX + 'accordion-menu',\n                accordionContainer: PREFIX + 'accordion',\n                accordionHeader: PREFIX + 'accordion-header',\n                accordionHeaderBtn: PREFIX + 'accordion-header-btn',\n                accordionHeaderWrapper: PREFIX + 'accordion-header-wrapper',\n                accordionHeaderIcon: PREFIX + 'accordion-header-icon',\n                accordionContent: PREFIX + 'accordion-content',\n                accordionNestedWrapper: PREFIX + 'accordion-nested',\n                accordionMenuButtonsContainer: PREFIX + 'accordion-menu-buttons-container',\n                accordionMenuButton: PREFIX + 'accordion-menu-button',\n                accordionStandaloneWrapper: PREFIX + 'accordion-standalone-wrapper',\n                hiddenElement: PREFIX + 'hidden-element',\n                collapsableContentHeader: PREFIX + 'collapsable-content-header',\n                standaloneElement: PREFIX + 'standalone-element',\n                // Custom dropdown with icons\n                collapsedElement: PREFIX + 'collapsed-element',\n                dropdown: PREFIX + 'dropdown',\n                dropdownContent: PREFIX + 'dropdown-content',\n                dropdownButton: PREFIX + 'dropdown-button',\n                dropdownButtonContent: PREFIX + 'dropdown-button-content',\n                dropdownIcon: PREFIX + 'pointer',\n                icon: PREFIX + 'icon'\n            },\n            lang: {\n                accessibility: {\n                    contextMenu: {\n                        button: 'Context menu'\n                    },\n                    editMode: {\n                        editMode: 'Edit mode toggle button'\n                    }\n                },\n                addComponent: 'Add component',\n                cancelButton: 'Cancel',\n                caption: 'Caption',\n                chartClassName: 'Chart class name',\n                chartConfig: 'Chart configuration',\n                chartID: 'Chart ID',\n                chartOptions: 'Chart options',\n                chartType: 'Chart type',\n                connectorName: 'Connector name',\n                confirmButton: 'Confirm',\n                confirmDestroyCell: 'Do you really want to destroy the cell?',\n                confirmDestroyRow: 'Do you really want to destroy the row?',\n                confirmDiscardChanges: 'Do you really want to discard the changes?',\n                dataLabels: 'Data labels',\n                editMode: 'Edit mode',\n                errorMessage: 'Something went wrong',\n                exitFullscreen: 'Exit full screen',\n                htmlInput: 'HTML',\n                id: 'Id',\n                off: 'off',\n                on: 'on',\n                pointFormat: 'Point format',\n                settings: 'Settings',\n                style: 'Styles',\n                title: 'Title',\n                viewFullscreen: 'View in full screen',\n                sidebar: {\n                    HTML: 'HTML',\n                    row: 'Row',\n                    Highcharts: 'Highcharts',\n                    DataGrid: 'DataGrid',\n                    KPI: 'KPI'\n                }\n            }\n        };\n\n        return EditGlobals;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/GUIElement.js', [_modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (Globals, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, uniqueKey, objectEach, error } = U;\n        class GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /**\n             * Get offsets of the guiElement relative to the referenceElement or the\n             * Viewport.\n             *\n             * @param guiElement\n             * The element to get the offsets from.\n             *\n             * @param referenceElement\n             * The element to get the offsets relative to.\n             *\n             * @returns\n             * The offsets of the guiElement.\n             */\n            static getOffsets(guiElement, referenceElement) {\n                const offset = { left: 0, top: 0, right: 0, bottom: 0 };\n                if (!guiElement.container) {\n                    return offset;\n                }\n                const guiElementClientRect = guiElement.container.getBoundingClientRect();\n                const referenceClientRect = referenceElement ?\n                    referenceElement.getBoundingClientRect() : { left: 0, top: 0 };\n                offset.left = guiElementClientRect.left - referenceClientRect.left;\n                offset.top = guiElementClientRect.top - referenceClientRect.top;\n                offset.right =\n                    guiElementClientRect.right - referenceClientRect.left;\n                offset.bottom =\n                    guiElementClientRect.bottom - referenceClientRect.top;\n                return offset;\n            }\n            /**\n             * Get dimensions of the guiElement container from offsets.\n             *\n             * @param offsets\n             * The offsets of the guiElement container.\n             *\n             * @returns\n             * The dimensions of the guiElement container.\n             */\n            static getDimFromOffsets(offsets) {\n                return {\n                    width: offsets.right - offsets.left,\n                    height: offsets.bottom - offsets.top\n                };\n            }\n            /**\n             * Based on the element provided, generate an unique id.\n             *\n             * @param elementType\n             * Type of the element.\n             *\n             * @returns\n             * The unique id.\n             */\n            static getElementId(elementType) {\n                return (Globals.classNamePrefix + elementType + '-' +\n                    uniqueKey().slice(11));\n            }\n            /**\n             * Get width in percentages (0% - 100%).\n             *\n             * @param width\n             * The width of the element. Supported formats '50%' or '1/2'.\n             *\n             * @returns\n             * The width in percentages.\n             */\n            static getPercentageWidth(width) {\n                const fractionRegEx = /^(\\d{1})[\\-\\/\\.](\\d{1,2})$/;\n                let result;\n                if (fractionRegEx.test(width)) {\n                    const match = width.match(fractionRegEx) || [], multiplier = +match[1], divider = +match[2];\n                    result = 100 * multiplier / divider;\n                    result = (result <= 100 ? result : 100) + '%';\n                }\n                else if (width.indexOf('%') !== -1) {\n                    const value = parseFloat(width);\n                    result = (value <= 100 ?\n                        (value >= 0 ? value : 0) : 100) + '%';\n                }\n                return result;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Create or get existing HTML element as a GUIElement container.\n             *\n             * @param {GUIElement.ContainerOptions} options\n             * Options.\n             *\n             * @returns\n             * The HTML element for the element container.\n             */\n            getElementContainer(options) {\n                const guiElement = this;\n                let elem;\n                if (options.render) {\n                    if (options.attribs && !options.attribs.id) {\n                        delete options.attribs.id;\n                    }\n                }\n                else if (typeof options.elementId === 'string') {\n                    const div = document.getElementById(options.elementId);\n                    if (div) {\n                        guiElement.container = div;\n                    }\n                    else {\n                        error('Element ' + options.elementId + ' does not exist');\n                    }\n                }\n                if (options.element instanceof HTMLElement) {\n                    elem = options.element;\n                }\n                else {\n                    elem = createElement('div', options.attribs || {}, options.style || {}, options.parentContainer);\n                }\n                // Set bindedGUIElement event on GUIElement container.\n                guiElement.removeBindedEventFn = addEvent(elem, 'bindedGUIElement', function (e) {\n                    e.guiElement = guiElement;\n                    e.stopImmediatePropagation();\n                });\n                return elem;\n            }\n            /**\n             * Destroy the element, its container, event hooks and all properties.\n             */\n            destroy() {\n                const guiElement = this;\n                // Remove bindedGUIElement event.\n                if (guiElement.removeBindedEventFn) {\n                    guiElement.removeBindedEventFn();\n                }\n                // Remove HTML container.\n                if (guiElement.container && guiElement.container.parentNode) {\n                    guiElement.container.parentNode.removeChild(guiElement.container);\n                }\n                // Delete all properties.\n                objectEach(guiElement, function (val, key) {\n                    delete guiElement[key];\n                });\n            }\n            /**\n             * Return the GUIElement instance type.\n             *\n             * @returns\n             * The GUIElement instance type\n             */\n            getType() {\n                return this.type;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const visibilityChanged = (this.isVisible && !setVisible ||\n                    !this.isVisible && setVisible);\n                if (this.container && visibilityChanged) {\n                    this.container.style.display = (setVisible ?\n                        (displayStyle || 'block') :\n                        'none');\n                    this.isVisible = setVisible;\n                }\n            }\n            hide() {\n                this.changeVisibility(false);\n            }\n            show() {\n                this.changeVisibility();\n            }\n        }\n\n        return GUIElement;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Cell.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (EditGlobals, Globals, GUIElement, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @internal\n         **/\n        class Cell extends GUIElement {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the Cell class.\n             *\n             * @param {Row} row\n             * Reference to the row instance.\n             *\n             * @param {Cell.Options} options\n             * Options for the cell.\n             *\n             * @param {HTMLElement} cellElement\n             * The container of the cell HTML element.\n             */\n            constructor(row, options, cellElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.cell;\n                this.id = options.id;\n                this.options = options;\n                this.row = row;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    row.container;\n                const layoutOptions = row.layout.options || {}, rowOptions = row.options || {}, cellClassName = layoutOptions.cellClassName || '';\n                let cellHeight;\n                if (options.height) {\n                    if (typeof options.height === 'number') {\n                        cellHeight = options.height + 'px';\n                    }\n                    else {\n                        cellHeight = options.height;\n                    }\n                }\n                this.container = this.getElementContainer({\n                    render: row.layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.cell + ' ' +\n                            cellClassName\n                    },\n                    element: cellElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, rowOptions.style, options.style, {\n                        height: cellHeight\n                    })\n                });\n                // Nested layout\n                if (this.options.layout) {\n                    this.setNestedLayout();\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create a nested layout in the cell and assign it to the nestedCell\n             * property.\n             * @internal\n             */\n            setNestedLayout() {\n                const board = this.row.layout.board, Layout = this.row.layout.constructor;\n                const optionsGui = board.options.gui;\n                this.nestedLayout = new Layout(board, merge({}, optionsGui && optionsGui.layoutOptions, this.options.layout, {\n                    parentContainerId: this.options.id\n                }), this);\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and mounted component.\n             */\n            destroy() {\n                const cell = this;\n                const { row } = cell;\n                // Destroy mounted component.\n                cell.mountedComponent?.destroy();\n                // If layout exists in the cell - destroy it\n                cell.nestedLayout?.destroy();\n                row.unmountCell(cell);\n                const destroyRow = row.cells?.length === 0;\n                super.destroy();\n                if (destroyRow) {\n                    row.destroy();\n                }\n            }\n            /**\n             * Get the cell's options.\n             * @returns\n             * The JSON of cell's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return this.options;\n            }\n            changeVisibility(setVisible = true) {\n                super.changeVisibility(setVisible);\n                const cell = this, row = cell.row;\n                // Change row visibility if needed.\n                if (!cell.row.getVisibleCells().length) {\n                    cell.row.hide();\n                }\n                else if (cell.isVisible && !row.isVisible) {\n                    cell.row.show();\n                }\n                setTimeout(() => {\n                    fireEvent(row, 'cellChange', { row, cell });\n                }, 0);\n            }\n            getParentCell(level) {\n                const cell = this;\n                let parentCell;\n                if (level <= cell.row.layout.level) {\n                    if (cell.row.layout.level === level) {\n                        return cell;\n                    }\n                    if (cell.row.layout.level - 1 >= 0) {\n                        parentCell = cell.row.layout.parentCell;\n                        if (parentCell) {\n                            return parentCell.getParentCell(level);\n                        }\n                    }\n                }\n            }\n            // Method to get array of overlapping levels.\n            getOverlappingLevels(align, levelMaxGap, // Max distance between levels\n            offset // Analyzed cell offset\n            ) {\n                const cell = this, parentCell = cell.row.layout.parentCell;\n                let levels = [cell.row.layout.level];\n                if (parentCell) {\n                    const cellOffset = offset || GUIElement.getOffsets(cell)[align];\n                    const parentCellOffset = GUIElement.getOffsets(parentCell)[align];\n                    if (Math.abs(cellOffset - parentCellOffset) < levelMaxGap) {\n                        levels = [\n                            ...levels,\n                            ...parentCell.getOverlappingLevels(align, levelMaxGap, parentCellOffset)\n                        ];\n                    }\n                }\n                return levels;\n            }\n            /**\n             * Set cell size.\n             *\n             * @param width\n             * % value or 'auto' or px\n             *\n             * @param height\n             * value in px\n             */\n            setSize(width, height) {\n                const cell = this, editMode = cell.row.layout.board.editMode;\n                if (cell.container) {\n                    if (width) {\n                        if (width === 'auto' &&\n                            cell.container.style.flex !== '1 1 0%') {\n                            cell.container.style.flex = '1 1 0%';\n                        }\n                        else {\n                            const cellWidth = cell.convertWidthToValue(width);\n                            if (cellWidth &&\n                                cell.container.style.flex !== '0 0 ' + cellWidth) {\n                                cell.container.style.flex = '0 0 ' + cellWidth;\n                            }\n                            cell.options.width = cellWidth;\n                        }\n                    }\n                    if (height) {\n                        cell.options.height = cell.container.style.height =\n                            height + 'px';\n                    }\n                    if (editMode) {\n                        editMode.hideContextPointer();\n                        if (editMode.cellToolbar &&\n                            editMode.cellToolbar.isVisible) {\n                            if (editMode.cellToolbar.cell === cell) {\n                                editMode.cellToolbar.showToolbar(cell);\n                            }\n                            else {\n                                editMode.cellToolbar.hide();\n                            }\n                        }\n                    }\n                    // Call cellResize board event.\n                    fireEvent(cell.row.layout.board, 'cellResize', { cell: cell });\n                    fireEvent(cell.row, 'cellChange', { cell: cell, row: cell.row });\n                }\n            }\n            setHighlight(remove) {\n                const cell = this, editMode = cell.row?.layout.board.editMode;\n                if (cell.container && editMode) {\n                    const cnt = cell.container, isSet = cnt.classList.contains(EditGlobals.classNames.cellEditHighlight);\n                    if (!remove && !isSet) {\n                        cnt.classList.add(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.add(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = true;\n                    }\n                    else if (remove && isSet) {\n                        cnt.classList.remove(EditGlobals.classNames.cellEditHighlight);\n                        cell.row.layout.board.container.classList.remove(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                        cell.isHighlighted = false;\n                    }\n                }\n            }\n            /**\n             * Sets the active state of the cell and resets the state of other cells.\n             */\n            setActiveState() {\n                const cell = this;\n                // Reset other boxes\n                cell.row.layout.board.mountedComponents.forEach((mountedComponent) => {\n                    if (mountedComponent.cell.container) {\n                        mountedComponent.cell.container.classList.remove(Globals.classNames.cellActive);\n                    }\n                    mountedComponent.component.isActive = false;\n                });\n                // Apply class\n                if (cell.container) {\n                    cell.container.classList.add(Globals.classNames.cellActive);\n                }\n            }\n            /**\n             * Enables or disables the loading indicator in the cell.\n             *\n             * @internal\n             */\n            setLoadingState(enabled = true) {\n                this.container?.classList?.toggle(Globals.classNames.cellLoading, enabled);\n            }\n            convertWidthToValue(width) {\n                if (typeof width === 'number') {\n                    return width + 'px';\n                }\n                if (/px/.test(width)) {\n                    return width;\n                }\n                return GUIElement.getPercentageWidth(width) || '';\n            }\n        }\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        (function (Cell) {\n            /**\n             * Checks if a valid cell instance.\n             */\n            function isCell(cell) {\n                return cell instanceof Cell;\n            }\n            Cell.isCell = isCell;\n        })(Cell || (Cell = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Cell;\n    });\n    _registerModule(_modules, 'Dashboards/CallbackRegistry.js', [], function () {\n        class CallbackRegistry {\n            constructor() {\n                this.registry = {};\n            }\n            addCallback(id, callback) {\n                this.registry[id] = callback;\n            }\n            getCallback(id) {\n                return this.registry[id];\n            }\n            /** @internal */\n            toJSON() {\n                const json = {};\n                Object.keys(this.registry).forEach((key) => {\n                    const entry = this.getCallback(key);\n                    const { func, type } = entry;\n                    json[key] = {\n                        func: func.toString(),\n                        type\n                    };\n                });\n                return json;\n            }\n        }\n\n        return CallbackRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ConnectorHandler.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Globals.js']], function (Cell, Globals) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A class that handles the connection between the component and the data\n         * connector.\n         */\n        class ConnectorHandler {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates an object that manages the data layer for the component.\n             *\n             * @param component\n             * The component that the connector is tied to.\n             *\n             * @param options\n             * The options for the connector.\n             *\n             */\n            constructor(component, options) {\n                /**\n                 * Event listeners tied to the current DataTable. Used for rerendering the\n                 * component on data changes.\n                 *\n                 * @internal\n                 */\n                this.tableEvents = [];\n                this.component = component;\n                this.options = options;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Inits connectors for the component and rerenders it.\n             *\n             * @returns\n             * Promise resolving to the component.\n             */\n            async initConnector() {\n                const component = this.component;\n                const connectorId = this.options.id;\n                const dataPool = this.component.board.dataPool;\n                if (connectorId &&\n                    (this.connectorId !== connectorId ||\n                        dataPool.isNewConnector(connectorId))) {\n                    if (Cell.isCell(component.cell)) {\n                        component.cell.setLoadingState();\n                    }\n                    const connector = await dataPool.getConnector(connectorId);\n                    // The connector shouldn't be set if the handler was destroyed\n                    // during its creation.\n                    if (!this.destroyed) {\n                        this.setConnector(connector);\n                    }\n                }\n                return component;\n            }\n            /**\n             * Sets the data table settings and events.\n             *\n             * @param table\n             * The data table instance for settings and events.\n             */\n            setTable(table) {\n                // Set up event listeners\n                this.clearTableListeners(table);\n                this.setupTableListeners(table);\n                // Re-setup if modifier changes\n                table.on('setModifier', () => this.clearTableListeners(table));\n                table.on('afterSetModifier', (e) => {\n                    if (e.type === 'afterSetModifier' && e.modified) {\n                        this.setupTableListeners(e.modified);\n                        this.component.emit({\n                            type: 'tableChanged',\n                            connector: this.connector\n                        });\n                    }\n                });\n                if (this.presentationModifier) {\n                    this.presentationTable =\n                        this.presentationModifier.modifyTable(table.modified.clone()).modified;\n                }\n                else {\n                    this.presentationTable = table;\n                }\n            }\n            /**\n             * Sets the connector for the component connector handler.\n             *\n             * @param connector\n             * The connector to set.\n             */\n            setConnector(connector) {\n                // Clean up old event listeners\n                while (this.tableEvents.length) {\n                    const eventCallback = this.tableEvents.pop();\n                    if (typeof eventCallback === 'function') {\n                        eventCallback();\n                    }\n                }\n                this.connector = connector;\n                if (connector) {\n                    const dataTableKey = this.component.dataTableKey;\n                    const dataTables = connector.dataTables;\n                    if (dataTableKey) {\n                        // Match a data table used in this component.\n                        this.setTable(dataTables[dataTableKey]);\n                        // Take the first connector data table if id not provided.\n                    }\n                    else {\n                        this.setTable(Object.values(dataTables)[0]);\n                    }\n                }\n                this.addConnectorAssignment();\n                return this.component;\n            }\n            /**\n             * Adds event listeners to data table.\n             * @param table\n             * Data table that is source of data.\n             * @internal\n             */\n            setupTableListeners(table) {\n                const connector = this.connector;\n                if (connector) {\n                    if (table) {\n                        [\n                            'afterDeleteRows',\n                            'afterSetCell',\n                            'afterSetColumns',\n                            'afterSetRows'\n                        ].forEach((event) => {\n                            this.tableEvents.push(table.on(event, (e) => {\n                                clearTimeout(this.tableEventTimeout);\n                                this.tableEventTimeout = Globals.win.setTimeout(() => {\n                                    this.component.emit({\n                                        ...e,\n                                        type: 'tableChanged',\n                                        targetConnector: connector\n                                    });\n                                    this.tableEventTimeout = void 0;\n                                });\n                            }));\n                        });\n                    }\n                }\n            }\n            /**\n             * Remove event listeners in data table.\n             *\n             * @param table\n             * The connector data table (data source).\n             *\n             * @internal\n             */\n            clearTableListeners(table) {\n                const connector = this.connector;\n                const tableEvents = this.tableEvents;\n                this.removeTableEvents();\n                if (connector) {\n                    tableEvents.push(table.on('afterSetModifier', (e) => {\n                        if (e.type === 'afterSetModifier') {\n                            clearTimeout(this.tableEventTimeout);\n                            this.tableEventTimeout = Globals.win.setTimeout(() => {\n                                connector.emit({\n                                    ...e,\n                                    type: 'tableChanged',\n                                    targetConnector: connector\n                                });\n                                this.tableEventTimeout = void 0;\n                            });\n                        }\n                    }));\n                }\n            }\n            /**\n             * Adds the component to the provided connector.\n             * Starts the connector polling if inactive and one component is provided.\n             */\n            addConnectorAssignment() {\n                const { connector } = this;\n                if (!connector) {\n                    return;\n                }\n                if (!connector.components) {\n                    connector.components = [];\n                }\n                if (!connector.components.includes(this.component)) {\n                    const options = connector.options;\n                    // Add the component assignment.\n                    connector.components.push(this.component);\n                    // Start the connector polling.\n                    if ('enablePolling' in options &&\n                        options.enablePolling &&\n                        !connector.polling &&\n                        connector.components.length === 1 &&\n                        'dataRefreshRate' in options) {\n                        connector.startPolling(Math.max(options.dataRefreshRate || 0, 1) * 1000);\n                    }\n                }\n            }\n            /**\n             * Removes the component instance from the provided connector.\n             * Stops the connector polling if the last element is removed.\n             */\n            removeConnectorAssignment() {\n                const { connector } = this;\n                if (!connector?.components) {\n                    return;\n                }\n                const index = connector.components.indexOf(this.component);\n                if (index > -1) {\n                    connector.components.splice(index, 1);\n                    if (!connector.components.length) {\n                        connector.stopPolling();\n                        delete connector.components;\n                    }\n                }\n            }\n            /**\n             * Clears all event listeners in the table.\n             */\n            removeTableEvents() {\n                this.tableEvents.forEach((clearEvent) => clearEvent());\n                this.tableEvents.length = 0;\n            }\n            /**\n             * Updates the options for the connector handler.\n             *\n             * @param newOptions\n             * The new options to update.\n             */\n            updateOptions(newOptions) {\n                this.options = newOptions;\n            }\n            /**\n             * Destroys the connector handler.\n             * @internal\n             */\n            destroy() {\n                this.destroyed = true;\n                this.removeConnectorAssignment();\n                this.removeTableEvents();\n            }\n        }\n\n        return ConnectorHandler;\n    });\n    _registerModule(_modules, 'Dashboards/Components/EditableOptions.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        class EditableOptions {\n            constructor(component, bindings = EditableOptions.defaultBindings) {\n                this.component = component;\n                this.bindings = bindings;\n            }\n            getOptions() {\n                const options = this.component.options.editableOptions;\n                if (!options) {\n                    return [];\n                }\n                for (let i = 0, iEnd = options.length; i < iEnd; i++) {\n                    const option = options[i];\n                    if (option.propertyPath?.some((path) => path === 'connector')) {\n                        const board = this.component.board;\n                        const selectOptions = !board ?\n                            [] :\n                            board.dataPool\n                                .getConnectorIds()\n                                .map((name) => ({ name }));\n                        option.selectOptions = selectOptions;\n                    }\n                }\n                return options;\n            }\n        }\n        EditableOptions.defaultBindings = {\n            keyMap: {\n                color: 'colorPicker',\n                title: 'text',\n                caption: 'text',\n                style: 'textarea'\n            },\n            typeMap: {\n                'string': 'text',\n                'number': 'input',\n                'boolean': 'toggle'\n            },\n            skipRedraw: []\n        };\n        // Bindings of basic types to \"editor components\"\n        EditableOptions.defaultTypeMap = {\n            'string': 'text',\n            'number': 'input',\n            'boolean': 'toggle'\n        };\n\n        return EditableOptions;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Emitter.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /**\n         *  Class responsible for adding event listeners on a component\n         *  @internal\n         */\n        class SyncEmitter {\n            /**\n             * Adds an emitter to the emitter registry.\n             *\n             * @param emitter the emitter to add to the registry.\n             */\n            static register(emitter) {\n                const { id } = emitter;\n                this.registry[id] = emitter;\n            }\n            /**\n             * Gets an emitter from emitter registry.\n             *\n             * @param emitterID The ID of the emitter to get.\n             */\n            static get(emitterID) {\n                return this.registry[emitterID];\n            }\n            /**\n             * Creates a new emitter instance.\n             *\n             * @param id An unique ID for the emitter.\n             *\n             * @param func\n             * The function to be called when the emitter is activated.\n             */\n            constructor(id, func) {\n                this.id = id;\n                this.func = func;\n                SyncEmitter.register(this);\n            }\n            /**\n             * Attaches the emitter to a component.\n             *\n             * @param component The component to attach to.\n             */\n            create(component) {\n                this.callback = this.func.call(component);\n            }\n            /**\n             * To be used when removing the emitter from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable emitter.\n         * The emitter is stored by ID.\n         */\n        SyncEmitter.registry = {};\n\n        return SyncEmitter;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Handler.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class responsible for storing handler callbacks used in component sync.\n         * @internal\n         */\n        class SyncHandler {\n            /**\n             * Adds a handler to the handler registry.\n             *\n             * @param handler\n             * The handler to add to the registry.\n             */\n            static register(handler) {\n                const { id } = handler;\n                this.registry[id] = handler;\n            }\n            /**\n             * Gets a handler from handler registry.\n             *\n             * @param handlerID\n             * The ID of the handler to get.\n             */\n            static get(handlerID) {\n                return this.registry[handlerID];\n            }\n            /**\n             * Creates a new handler instance.\n             *\n             * @param id\n             * An unique ID for the handler.\n             *\n             * @param func\n             * The function to be called when the handler is activated.\n             */\n            constructor(id, func) {\n                this.id = id;\n                this.func = func;\n                SyncHandler.register(this);\n            }\n            /**\n             * Calls the activation function on the component and sets the callback to\n             * the return function.\n             *\n             * @param component\n             * The component to register on.\n             */\n            register(component) {\n                const { func } = this;\n                this.callback = func.call(component);\n            }\n            /**\n             * To be used when removing the handler from the component.\n             * Calls the {@link callback} function.\n             */\n            remove() {\n                if (this.callback) {\n                    this.callback();\n                }\n            }\n        }\n        /**\n         * Registry for reusable handlers.\n         * The handler is stored by ID.\n         */\n        SyncHandler.registry = {};\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SyncHandler;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Sync/Sync.js', [_modules['Dashboards/Components/Sync/Emitter.js'], _modules['Dashboards/Components/Sync/Handler.js'], _modules['Core/Utilities.js']], function (SyncEmitter, SyncHandler, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, isObject } = U;\n        /* *\n         *\n         * Class\n         *\n         * */\n        /** @internal */\n        class Sync {\n            /* *\n             *\n             * Constructor\n             *\n             * */\n            /**\n             * Creates an instance of the sync class.\n             *\n             * @param component\n             * The component to which the emitters and handlers are attached.\n             *\n             * @param predefinedSyncConfig\n             * The predefined sync configuration.\n             */\n            constructor(component, predefinedSyncConfig) {\n                this.component = component;\n                this.predefinedSyncConfig = predefinedSyncConfig;\n                this.syncConfig = Sync.prepareSyncConfig(predefinedSyncConfig, component.options.sync);\n                this.registeredSyncHandlers = {};\n                this.registeredSyncEmitters = {};\n                this.isSyncing = false;\n                this.listeners = [];\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method that prepares the sync configuration from the predefined config\n             * and current component options.\n             *\n             * @param predefinedConfig The predefined sync configuration.\n             * @param componentSyncOptions The current component sync options.\n             * @returns The sync configuration.\n             */\n            static prepareSyncConfig(predefinedConfig, componentSyncOptions = {}) {\n                const { defaultSyncPairs: defaultPairs, defaultSyncOptions: defaultOptionsList } = predefinedConfig;\n                return Object.keys(componentSyncOptions).reduce((acc, syncName) => {\n                    if (syncName) {\n                        const defaultPair = defaultPairs[syncName];\n                        const defaultOptions = defaultOptionsList[syncName];\n                        const entry = componentSyncOptions[syncName];\n                        const preparedOptions = merge(defaultOptions || {}, { enabled: isObject(entry) ? entry.enabled : entry }, isObject(entry) ? entry : {});\n                        if (defaultPair && preparedOptions.enabled) {\n                            const keys = [\n                                'emitter',\n                                'handler'\n                            ];\n                            for (const key of keys) {\n                                if (preparedOptions[key] === true ||\n                                    preparedOptions[key] === void 0) {\n                                    preparedOptions[key] =\n                                        defaultPair[key];\n                                }\n                            }\n                        }\n                        acc[syncName] = preparedOptions;\n                    }\n                    return acc;\n                }, {});\n            }\n            /**\n             * Add new emitter to the registered emitters.\n             *\n             * @param emitter\n             * The emitter to register.\n             */\n            registerSyncEmitter(emitter) {\n                const { id } = emitter;\n                this.registeredSyncEmitters[id] = emitter;\n            }\n            /**\n             * Method that checks if the emitter is registered.\n             *\n             * @param id\n             * The id of the emitter to check.\n             *\n             * @returns\n             * Whether the emitter is registered.\n             */\n            isRegisteredEmitter(id) {\n                return Boolean(this.registeredSyncEmitters[id]);\n            }\n            /**\n             * Register new handler to the registered handlers.\n             *\n             * @param handler\n             * The handler to register.\n             */\n            registerSyncHandler(handler) {\n                const { id } = handler;\n                this.registeredSyncHandlers[id] = handler;\n            }\n            /**\n             * Method that checks if the handler is registered.\n             *\n             * @param handlerID\n             * The id of the handler to check.\n             *\n             * @returns\n             * Whether the handler is registered.\n             */\n            isRegisteredHandler(handlerID) {\n                return Boolean(this.registeredSyncHandlers[handlerID]);\n            }\n            /**\n             * Registers the handlers and emitters on the component\n             */\n            start() {\n                const { component } = this;\n                this.syncConfig = Sync.prepareSyncConfig(this.predefinedSyncConfig, component.options.sync);\n                for (const id of Object.keys(this.syncConfig)) {\n                    const syncOptions = this.syncConfig[id];\n                    if (!syncOptions) {\n                        continue;\n                    }\n                    let { emitter: emitterConfig, handler: handlerConfig } = syncOptions;\n                    if (handlerConfig) {\n                        if (handlerConfig === true) {\n                            handlerConfig =\n                                Sync.defaultHandlers[id]\n                                    .handler;\n                        }\n                        const handler = new SyncHandler(id, handlerConfig);\n                        if (!this.isRegisteredHandler(handler.id)) {\n                            this.registerSyncHandler(handler);\n                            handler.register(component);\n                        }\n                    }\n                    if (emitterConfig) {\n                        if (emitterConfig === true) {\n                            emitterConfig =\n                                Sync.defaultHandlers[id]\n                                    .emitter;\n                        }\n                        const emitter = new SyncEmitter(id, emitterConfig);\n                        if (!this.isRegisteredEmitter(emitter.id)) {\n                            this.registerSyncEmitter(emitter);\n                            emitter.create(component);\n                        }\n                    }\n                }\n                this.isSyncing = true;\n                this.listeners.push(component.on('update', () => this.stop()));\n            }\n            /**\n             * Removes the handlers and emitters from the component.\n             */\n            stop() {\n                const { component, listeners, registeredSyncHandlers, registeredSyncEmitters } = this;\n                Object.keys(registeredSyncHandlers).forEach((id) => {\n                    registeredSyncHandlers[id].remove();\n                    delete registeredSyncHandlers[id];\n                });\n                Object.keys(registeredSyncEmitters).forEach((id) => {\n                    registeredSyncEmitters[id].remove();\n                    delete registeredSyncEmitters[id];\n                });\n                this.isSyncing = false;\n                for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                    listeners[i]();\n                }\n                this.listeners.length = 0;\n                this.listeners.push(component.on('afterUpdate', () => {\n                    this.start();\n                }));\n            }\n        }\n        /**\n         * Default handlers for the sync class. This property is extended by\n         * different Components, where default syncs are added. Allows overwriting\n         * the configuration before creating the dashboard.\n         */\n        Sync.defaultHandlers = {};\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Sync;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentUtilities;\n        (function (ComponentUtilities) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getMargins(element, includeBorders = true) {\n                const borders = {\n                    x: ['borderLeft', 'borderRight'],\n                    y: ['borderTop', 'borderBottom']\n                };\n                return {\n                    y: getStyles(element, [\n                        'marginTop',\n                        'marginBottom',\n                        ...(includeBorders ? borders.y : [])\n                    ]).reduce(sumPixels, 0),\n                    x: getStyles(element, [\n                        'marginLeft',\n                        'marginTop',\n                        ...(includeBorders ? borders.x : [])\n                    ]).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getMargins = getMargins;\n            function getPaddings(element) {\n                return {\n                    x: getStyles(element, ['paddingLeft', 'paddingRight']).reduce(sumPixels, 0),\n                    y: getStyles(element, ['paddingTop', 'paddingBottom']).reduce(sumPixels, 0)\n                };\n            }\n            ComponentUtilities.getPaddings = getPaddings;\n            function getStyles(element, styles) {\n                const elementStyles = window.getComputedStyle(element);\n                return styles.map((style) => elementStyles[style]); // Cannot use getPropertyValue?\n            }\n            ComponentUtilities.getStyles = getStyles;\n            function sumPixels(accumulator, value) {\n                if (value) {\n                    accumulator += (typeof value === 'number' ? value : parseFloat(value));\n                }\n                return accumulator;\n            }\n            ComponentUtilities.sumPixels = sumPixels;\n        })(ComponentUtilities || (ComponentUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentUtilities;\n    });\n    _registerModule(_modules, 'Dashboards/Utilities.js', [_modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (D, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { doc, supportsPassiveEvents } = D;\n        const { error: coreError, isClass, isDOMElement, isObject, objectEach, uniqueKey: coreUniqueKey } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Add an event listener.\n         *\n         * @function Highcharts.addEvent<T>\n         *\n         * @param  {D.Class<T>|T} el\n         *         The element or object to add a listener to. It can be a\n         *         {@link HTMLDOMElement}, an {@link SVGElement} or any other object.\n         *\n         * @param  {string} type\n         *         The event type.\n         *\n         * @param  {Dashboards.EventCallbackFunction<T>|Function} fn\n         *         The function callback to execute when the event is fired.\n         *\n         * @param  {Dashboards.EventOptionsObject} [options]\n         *         Options for adding the event.\n         *\n         * @return {Function}\n         *         A callback function to remove the added event.\n         */\n        function addEvent(el, type, fn, options = {}) {\n            /* eslint-enable valid-jsdoc */\n            // Add hcEvents to either the prototype (in case we're running addEvent on a\n            // class) or the instance. If hasOwnProperty('hcEvents') is false, it is\n            // inherited down the prototype chain, in which case we need to set the\n            // property on this instance (which may itself be a prototype).\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (!Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                owner.hcEvents = {};\n            }\n            const events = owner.hcEvents;\n            // Handle DOM events\n            // If the browser supports passive events, add it to improve performance\n            // on touch events (#11353).\n            const addEventListener = el.addEventListener;\n            if (addEventListener) {\n                addEventListener.call(el, type, fn, supportsPassiveEvents ? {\n                    passive: options.passive === void 0 ?\n                        type.indexOf('touch') !== -1 : options.passive,\n                    capture: false\n                } : false);\n            }\n            if (!events[type]) {\n                events[type] = [];\n            }\n            const eventObject = {\n                fn,\n                order: typeof options.order === 'number' ? options.order : Infinity\n            };\n            events[type].push(eventObject);\n            // Order the calls\n            events[type].sort((a, b) => a.order - b.order);\n            // Return a function that can be called to remove this event.\n            return function () {\n                removeEvent(el, type, fn);\n            };\n        }\n        /**\n         * Utility function to deep merge two or more objects and return a third object.\n         * If the first argument is true, the contents of the second object is copied\n         * into the first object. The merge function can also be used with a single\n         * object argument to create a deep copy of an object.\n         *\n         * @function Highcharts.merge<T>\n         *\n         * @param {boolean} extend\n         *        Whether to extend the left-side object (a) or return a whole new\n         *        object.\n         *\n         * @param {T|undefined} a\n         *        The first object to extend. When only this is given, the function\n         *        returns a deep copy.\n         *\n         * @param {...Array<object|undefined>} [n]\n         *        An object to merge into the previous one.\n         *\n         * @return {T}\n         *         The merged object. If the first argument is true, the return is the\n         *         same as the second argument.\n         */ /**\n        * Utility function to deep merge two or more objects and return a third object.\n        * The merge function can also be used with a single object argument to create a\n        * deep copy of an object.\n        *\n        * @function Highcharts.merge<T>\n        *\n        * @param {T|undefined} a\n        *        The first object to extend. When only this is given, the function\n        *        returns a deep copy.\n        *\n        * @param {...Array<object|undefined>} [n]\n        *        An object to merge into the previous one.\n        *\n        * @return {T}\n        *         The merged object. If the first argument is true, the return is the\n        *         same as the second argument.\n        */\n        function merge(a, ...n) {\n            let copyDepth = 0, obj = {};\n            // Descriptive error stack:\n            const copyDepthError = new Error('Recursive copy depth > 100'), doCopy = (copy, original) => {\n                // An object is replacing a primitive\n                if (typeof copy !== 'object') {\n                    copy = {};\n                }\n                if (++copyDepth > 100) {\n                    throw copyDepthError;\n                }\n                objectEach(original, (value, key) => {\n                    // Prototype pollution (#14883)\n                    if (key === '__proto__' || key === 'constructor') {\n                        return;\n                    }\n                    // Copy the contents of objects, but not arrays or DOM nodes\n                    if (isObject(value, true) &&\n                        !isClass(value) &&\n                        !isDOMElement(value)) {\n                        copy[key] = doCopy(copy[key] || {}, value);\n                        // Primitives and arrays are copied over directly\n                    }\n                    else {\n                        copy[key] = original[key];\n                    }\n                });\n                --copyDepth;\n                return copy;\n            };\n            // If first argument is true, copy into the existing object. Used in\n            // setOptions.\n            if (a === true) {\n                obj = n.shift();\n            }\n            else {\n                n.unshift(a);\n            }\n            // For each argument, extend the return\n            for (let i = 0, iEnd = n.length; i < iEnd; ++i) {\n                obj = doCopy(obj, n[i]);\n            }\n            return obj;\n        }\n        /**\n         * Returns a deep copy of an argument. It differs from `merge` in that it copies\n         * also arrays.\n         *\n         * @param value\n         * The value to clone.\n         *\n         * @param excludedKeys\n         * An array of keys to exclude from the clone.\n         */\n        function deepClone(value, excludedKeys) {\n            if (Array.isArray(value)) {\n                return value.map((v) => deepClone(v, excludedKeys));\n            }\n            if (value && typeof value === 'object') {\n                const clone = {};\n                const keys = Object.keys(value);\n                for (const key of keys) {\n                    if (excludedKeys && excludedKeys.includes(key)) {\n                        clone[key] = value[key];\n                    }\n                    else {\n                        clone[key] = deepClone(value[key], excludedKeys);\n                    }\n                }\n                return clone;\n            }\n            return value;\n        }\n        /**\n         * Creates a session-dependent unique key string for reference purposes.\n         *\n         * @function Dashboards.uniqueKey\n         *\n         * @return {string}\n         * Unique key string\n         */\n        function uniqueKey() {\n            return `dashboard-${coreUniqueKey().replace('highcharts-', '')}`;\n        }\n        /**\n         * Provide error messages for debugging, with links to online explanation. This\n         * function can be overridden to provide custom error handling.\n         *\n         * @sample highcharts/chart/highcharts-error/\n         *         Custom error handler\n         *\n         * @function Dashboards.error\n         *\n         * @param {number|string} code\n         *        The error code. See\n         *        [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n         *        for available codes. If it is a string, the error message is printed\n         *        directly in the console.\n         *\n         * @param {boolean} [stop=false]\n         *        Whether to throw an error or just log a warning in the console.\n         *\n         * @return {void}\n         */\n        function error(code, stop) {\n            // TODO- replace with proper error handling\n            if (code === 16) {\n                console.warn(// eslint-disable-line no-console\n                'Dashboard error: Dashboards library loaded more than once.' +\n                    'This may cause undefined behavior.');\n                return;\n            }\n            coreError(code, stop);\n        }\n        /**\n         * Utility function to extend an object with the members of another.\n         *\n         * @function Dashboards.extend<T>\n         *\n         * @param {T|undefined} a\n         *        The object to be extended.\n         *\n         * @param {Partial<T>} b\n         *        The object to add to the first one.\n         *\n         * @return {T}\n         *         Object a, the original object.\n         */\n        function extend(a, b) {\n            /* eslint-enable valid-jsdoc */\n            let n;\n            if (!a) {\n                a = {};\n            }\n            for (n in b) { // eslint-disable-line guard-for-in\n                a[n] = b[n];\n            }\n            return a;\n        }\n        /**\n         * Fire an event that was registered with addEvent.\n         *\n         * @function Highcharts.fireEvent<T>\n         *\n         * @param {T} el\n         *        The object to fire the event on. It can be a {@link HTMLDOMElement},\n         *        an {@link SVGElement} or any other object.\n         *\n         * @param {string} type\n         *        The type of event.\n         *\n         * @param {Dashboards.Dictionary<*>|Event} [eventArguments]\n         *        Custom event arguments that are passed on as an argument to the event\n         *        handler.\n         *\n         * @param {Dashboards.EventCallbackFunction<T>|Function} [defaultFunction]\n         *        The default function to execute if the other listeners haven't\n         *        returned false.\n         *\n         * @return {void}\n         */\n        function fireEvent(el, type, eventArguments, defaultFunction) {\n            /* eslint-enable valid-jsdoc */\n            eventArguments = eventArguments || {};\n            if (doc?.createEvent &&\n                (el.dispatchEvent ||\n                    (el.fireEvent &&\n                        // Enable firing events on Highcharts instance.\n                        el !== D))) {\n                const e = doc.createEvent('Events');\n                e.initEvent(type, true, true);\n                eventArguments = extend(e, eventArguments);\n                if (el.dispatchEvent) {\n                    el.dispatchEvent(eventArguments);\n                }\n                else {\n                    el.fireEvent(type, eventArguments);\n                }\n            }\n            else if (el.hcEvents) {\n                if (!eventArguments.target) {\n                    // We're running a custom event\n                    extend(eventArguments, {\n                        // Attach a simple preventDefault function to skip\n                        // default handler if called. The built-in\n                        // defaultPrevented property is not overwritable (#5112)\n                        preventDefault: function () {\n                            eventArguments.defaultPrevented = true;\n                        },\n                        // Setting target to native events fails with clicking\n                        // the zoom-out button in Chrome.\n                        target: el,\n                        // If the type is not set, we're running a custom event\n                        // (#2297). If it is set, we're running a browser event.\n                        type: type\n                    });\n                }\n                const events = [];\n                let object = el;\n                let multilevel = false;\n                // Recurse up the inheritance chain and collect hcEvents set as own\n                // objects on the prototypes.\n                while (object.hcEvents) {\n                    if (Object.hasOwnProperty.call(object, 'hcEvents') &&\n                        object.hcEvents[type]) {\n                        if (events.length) {\n                            multilevel = true;\n                        }\n                        events.unshift.apply(events, object.hcEvents[type]);\n                    }\n                    object = Object.getPrototypeOf(object);\n                }\n                // For performance reasons, only sort the event handlers in case we are\n                // dealing with multiple levels in the prototype chain. Otherwise, the\n                // events are already sorted in the addEvent function.\n                if (multilevel) {\n                    // Order the calls\n                    events.sort((a, b) => a.order - b.order);\n                }\n                // Call the collected event handlers\n                events.forEach((obj) => {\n                    // If the event handler returns false, prevent the default handler\n                    // from executing\n                    if (obj.fn.call(el, eventArguments) === false) {\n                        eventArguments.preventDefault();\n                    }\n                });\n            }\n            // Run the default if not prevented\n            if (defaultFunction && !eventArguments.defaultPrevented) {\n                defaultFunction.call(el, eventArguments);\n            }\n        }\n        /**\n         * Remove an event that was added with {@link Highcharts#addEvent}.\n         *\n         * @function Dashboards.removeEvent<T>\n         *\n         * @param {Dashboards.Class<T>|T} el\n         *        The element to remove events on.\n         *\n         * @param {string} [type]\n         *        The type of events to remove. If undefined, all events are removed\n         *        from the element.\n         *\n         * @param {Dashboards.EventCallbackFunction<T>} [fn]\n         *        The specific callback to remove. If undefined, all events that match\n         *        the element and optionally the type are removed.\n         *\n         * @return {void}\n         */\n        function removeEvent(el, type, fn) {\n            /* eslint-enable valid-jsdoc */\n            /**\n             * @private\n             */\n            function removeOneEvent(type, fn) {\n                const removeEventListener = el.removeEventListener;\n                if (removeEventListener) {\n                    removeEventListener.call(el, type, fn, false);\n                }\n            }\n            /**\n             * @private\n             */\n            function removeAllEvents(eventCollection) {\n                let types, len;\n                if (!el.nodeName) {\n                    return; // Break on non-DOM events\n                }\n                if (type) {\n                    types = {};\n                    types[type] = true;\n                }\n                else {\n                    types = eventCollection;\n                }\n                objectEach(types, function (_val, n) {\n                    if (eventCollection[n]) {\n                        len = eventCollection[n].length;\n                        while (len--) {\n                            removeOneEvent(n, eventCollection[n][len].fn);\n                        }\n                    }\n                });\n            }\n            const owner = typeof el === 'function' && el.prototype || el;\n            if (Object.hasOwnProperty.call(owner, 'hcEvents')) {\n                const events = owner.hcEvents;\n                if (type) {\n                    const typeEvents = (events[type] || []);\n                    if (fn) {\n                        events[type] = typeEvents.filter(function (obj) {\n                            return fn !== obj.fn;\n                        });\n                        removeOneEvent(type, fn);\n                    }\n                    else {\n                        removeAllEvents(events);\n                        events[type] = [];\n                    }\n                }\n                else {\n                    removeAllEvents(events);\n                    delete owner.hcEvents;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Utilities = {\n            addEvent,\n            deepClone,\n            error,\n            fireEvent,\n            merge,\n            removeEvent,\n            uniqueKey\n        };\n\n        return Utilities;\n    });\n    _registerModule(_modules, 'Dashboards/Components/Component.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/CallbackRegistry.js'], _modules['Dashboards/Components/ConnectorHandler.js'], _modules['Dashboards/Components/EditableOptions.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Components/ComponentUtilities.js'], _modules['Dashboards/Utilities.js']], function (Cell, CallbackRegistry, ConnectorHandler, EditableOptions, Sync, Globals, U, CU, DU) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { classNamePrefix } = Globals;\n        const { createElement, isArray, merge, fireEvent, addEvent, objectEach, isFunction, getStyle, diffObjects, removeEvent } = U;\n        const { getMargins, getPaddings } = CU;\n        const { deepClone, uniqueKey } = DU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Abstract Class of component.\n         *\n         * @internal\n         *\n         */\n        /**\n         * Abstract Class of component.\n         * @internal\n         */\n        class Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             *\n             * Creates HTML text element like header or title\n             *\n             * @param tagName\n             * HTML tag name used as wrapper of text like `h2` or `p`.\n             * @param elementName\n             * Name of element\n             * @param textOptions\n             * The options for the component\n             * @returns\n             * HTML object when title is created, otherwise undefined\n             *\n             * @internal\n             */\n            static createTextElement(tagName, elementName, textOptions) {\n                if (typeof textOptions === 'object') {\n                    const { className, text, style } = textOptions;\n                    return createElement(tagName, {\n                        className: className || `${classNamePrefix}component-${elementName}`,\n                        textContent: text\n                    }, style);\n                }\n                if (typeof textOptions === 'string') {\n                    return createElement(tagName, {\n                        className: `${classNamePrefix}component-${elementName}`,\n                        textContent: textOptions\n                    }, {});\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                /**\n                 * The connector handlers for the component.\n                 */\n                this.connectorHandlers = [];\n                /**\n                 * Registry of callbacks registered on the component. Used in the Highcharts\n                 * component to keep track of chart events.\n                 *\n                 * @internal\n                 */\n                this.callbackRegistry = new CallbackRegistry();\n                /**\n                 * Event listeners tied to the parent cell. Used for rendering/resizing the\n                 * component on interactions.\n                 *\n                 * @internal\n                 */\n                this.cellListeners = [];\n                /**\n                 * Timeouts for calls to `Component.resizeTo()`.\n                 *\n                 * @internal\n                /* *\n                 */\n                this.resizeTimeouts = [];\n                /**\n                 * Timeouts for resizing the content. I.e. `chart.setSize()`.\n                 *\n                 * @internal\n                 * */\n                this.innerResizeTimeouts = [];\n                const renderTo = options.renderTo || options.cell;\n                this.board = board || cell?.row?.layout?.board || {};\n                this.parentElement =\n                    cell?.container || document.querySelector('#' + renderTo);\n                this.cell = cell;\n                this.options = merge(Component.defaultOptions, options);\n                this.id = this.options.id && this.options.id.length ?\n                    this.options.id :\n                    uniqueKey();\n                if (this.options.connector) {\n                    const connectorOptionsArray = isArray(this.options.connector) ?\n                        this.options.connector :\n                        [this.options.connector];\n                    for (const connectorOptions of connectorOptionsArray) {\n                        this.connectorHandlers.push(new ConnectorHandler(this, connectorOptions));\n                    }\n                    // Assign the data table key to define the proper dataTable.\n                    this.dataTableKey = isArray(this.options.connector) ?\n                        this.options.connector[0].dataTableKey :\n                        this.options.connector.dataTableKey;\n                }\n                this.editableOptions =\n                    new EditableOptions(this, options.editableOptionsBindings);\n                this.dimensions = {\n                    width: null,\n                    height: null\n                };\n                this.element = createElement('div', {\n                    className: this.options.className\n                }, {}, this.parentElement);\n                if (!Number(getStyle(this.element, 'padding'))) {\n                    // Fix flex problem, because of wrong height in internal elements\n                    this.element.style.padding = '0.1px';\n                }\n                this.contentElement = createElement('div', {\n                    className: `${this.options.className}-content`\n                }, {}, this.element, true);\n                this.sync = new Sync(this, this.constructor.predefinedSyncConfig);\n                this.setupEventListeners();\n                if (cell) {\n                    this.attachCellListeners();\n                    this.on('update', () => {\n                        if (Cell.isCell(this.cell)) {\n                            this.cell.setLoadingState();\n                        }\n                    });\n                    this.on('afterRender', () => {\n                        if (Cell.isCell(this.cell)) {\n                            this.cell.setLoadingState(false);\n                        }\n                    });\n                }\n                this.on('tableChanged', () => {\n                    this.onTableChanged();\n                });\n            }\n            /**\n             * Returns the component's options when it is dropped from the sidebar.\n             *\n             * @param sidebar\n             * The sidebar popup.\n             */\n            getOptionsOnDrop(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            sidebar) {\n                return {};\n            }\n            /**\n             * Returns the first connector of the component if it exists.\n             *\n             * @internal\n             */\n            getFirstConnector() {\n                return this.connectorHandlers[0]?.connector;\n            }\n            /**\n             * Setup listeners on cell/other things up the chain\n             *\n             * @internal\n             */\n            attachCellListeners() {\n                // Remove old listeners\n                while (this.cellListeners.length) {\n                    const destroy = this.cellListeners.pop();\n                    if (destroy) {\n                        destroy();\n                    }\n                }\n                if (this.cell &&\n                    Cell.isCell(this.cell) &&\n                    Object.keys(this.cell).length) {\n                    const board = this.cell.row.layout.board;\n                    this.cellListeners.push(\n                    // Listen for resize on dashboard\n                    addEvent(board, 'cellResize', () => {\n                        this.resizeTo(this.parentElement);\n                    }), \n                    // Listen for changed parent\n                    addEvent(this.cell.row, 'cellChange', (e) => {\n                        const { row } = e;\n                        if (row && this.cell) {\n                            const hasLeftTheRow = row.getCellIndex(this.cell) === void 0;\n                            if (hasLeftTheRow) {\n                                if (this.cell) {\n                                    this.setCell(this.cell);\n                                }\n                            }\n                        }\n                    }));\n                }\n            }\n            /**\n             * Set a parent cell.\n             * @param cell\n             * Instance of a cell.\n             * @param resize\n             * Flag that allow to resize the component.\n             *\n             * @internal\n             */\n            setCell(cell, resize = false) {\n                this.cell = cell;\n                if (cell.container) {\n                    this.parentElement = cell.container;\n                }\n                this.attachCellListeners();\n                if (resize) {\n                    this.resizeTo(this.parentElement);\n                }\n            }\n            /**\n             * Initializes connector handlers for the component.\n             */\n            async initConnectors() {\n                fireEvent(this, 'setConnectors', {\n                    connectorHandlers: this.connectorHandlers\n                });\n                for (const connectorHandler of this.connectorHandlers) {\n                    await connectorHandler.initConnector();\n                }\n                fireEvent(this, 'afterSetConnectors', {\n                    connectorHandlers: this.connectorHandlers\n                });\n                return this;\n            }\n            /**\n             * Gets height of the component's content.\n             *\n             * @returns\n             * Current height as number.\n             * @internal\n             */\n            getContentHeight() {\n                const titleHeight = this.titleElement ?\n                    this.titleElement.clientHeight + getMargins(this.titleElement).y :\n                    0;\n                const captionHeight = this.captionElement ?\n                    this.captionElement.clientHeight +\n                        getMargins(this.captionElement).y :\n                    0;\n                return titleHeight + captionHeight;\n            }\n            /**\n             * Resize the component\n             * @param width\n             * The width to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style\n             * @param height\n             * The height to set the component to.\n             * Can be pixels, a percentage string or null.\n             * Null will unset the style.\n             */\n            resize(width, height) {\n                if (height) {\n                    // Get offset for border, padding\n                    const pad = getPaddings(this.element).y + getMargins(this.element).y;\n                    this.element.style.height = 'calc(100% - ' + pad + 'px)';\n                    this.contentElement.style.height =\n                        'calc(100% - ' + this.getContentHeight() + 'px)';\n                }\n                else if (height === null) {\n                    this.dimensions.height = null;\n                    this.element.style.removeProperty('height');\n                }\n                fireEvent(this, 'resize', {\n                    width,\n                    height\n                });\n            }\n            /**\n             * It's a temporary alternative for the `resize` method. It sets the strict\n             * pixel height for the component so that the content can be distributed in\n             * the right way, without looping the resizers in the content and container.\n             * @param width\n             * The width to set the component to.\n             * @param height\n             * The height to set the component to.\n             */\n            resizeDynamicContent(width, height) {\n                const { element } = this;\n                if (height) {\n                    const margins = getMargins(element).y;\n                    const paddings = getPaddings(element).y;\n                    if (typeof height === 'string') {\n                        height = parseFloat(height);\n                    }\n                    height = Math.round(height);\n                    element.style.height = `${height - margins - paddings}px`;\n                    this.contentElement.style.height = `${element.clientHeight - this.getContentHeight() - paddings}px`;\n                }\n                else if (height === null) {\n                    this.dimensions.height = null;\n                    element.style.removeProperty('height');\n                }\n                fireEvent(this, 'resize', {\n                    width,\n                    height\n                });\n            }\n            /**\n             * Adjusts size of component to parent's cell size when animation is done.\n             * @param element\n             * HTML element that is resized.\n             */\n            resizeTo(element) {\n                while (this.resizeTimeouts.length) {\n                    const timeout = this.resizeTimeouts.pop();\n                    if (timeout) {\n                        cancelAnimationFrame(timeout);\n                    }\n                }\n                const timeoutID = requestAnimationFrame(() => {\n                    const { width, height } = element.getBoundingClientRect();\n                    const padding = getPaddings(element);\n                    const margins = getMargins(element);\n                    this.resize(width - padding.x - margins.x, height - padding.y - margins.y);\n                });\n                this.resizeTimeouts.push(timeoutID);\n            }\n            /**\n             * Handles updating via options.\n             * @param newOptions\n             * The options to apply.\n             *\n             * @param shouldRerender\n             * Set to true if the update should rerender the component.\n             */\n            async update(newOptions, shouldRerender = true) {\n                const eventObject = {\n                    options: newOptions,\n                    shouldForceRerender: false\n                };\n                // Update options\n                fireEvent(this, 'update', eventObject);\n                if (newOptions.connector && Array.isArray(this.options.connector)) {\n                    this.options.connector = void 0;\n                }\n                this.options = merge(this.options, newOptions);\n                const connectorOptions = (this.options.connector ? (isArray(this.options.connector) ? this.options.connector :\n                    [this.options.connector]) : []);\n                let connectorsHaveChanged = connectorOptions.length !== this.connectorHandlers.length;\n                if (!connectorsHaveChanged) {\n                    for (let i = 0, iEnd = connectorOptions.length; i < iEnd; i++) {\n                        const oldConnectorId = this.connectorHandlers[i]?.options.id;\n                        const newConnectorId = connectorOptions[i]?.id;\n                        if (oldConnectorId !== newConnectorId) {\n                            connectorsHaveChanged = true;\n                            break;\n                        }\n                        this.connectorHandlers[i].updateOptions(connectorOptions[i]);\n                    }\n                }\n                if (connectorsHaveChanged) {\n                    for (const connectorHandler of this.connectorHandlers) {\n                        connectorHandler.destroy();\n                    }\n                    this.connectorHandlers.length = 0;\n                    for (const options of connectorOptions) {\n                        this.connectorHandlers.push(new ConnectorHandler(this, options));\n                    }\n                    await this.initConnectors();\n                }\n                // Assign the data table key to define the proper dataTable.\n                const firstConnectorDataTableKey = connectorOptions[0]?.dataTableKey;\n                if (firstConnectorDataTableKey) {\n                    this.dataTableKey = firstConnectorDataTableKey;\n                }\n                if (shouldRerender || eventObject.shouldForceRerender) {\n                    this.render();\n                }\n            }\n            /**\n             * Private method which sets up event listeners for the component.\n             *\n             * @internal\n             */\n            setupEventListeners() {\n                const events = this.options.events;\n                if (events) {\n                    Object.keys(events).forEach((key) => {\n                        const eventCallback = events[key];\n                        if (eventCallback) {\n                            this.callbackRegistry.addCallback(key, {\n                                type: 'component',\n                                func: eventCallback\n                            });\n                        }\n                    });\n                    objectEach(events, (eventCallback, eventType) => {\n                        if (isFunction(eventCallback)) {\n                            this.on(eventType, eventCallback);\n                        }\n                    });\n                }\n                const resizeObserverCallback = () => {\n                    this.resizeTo(this.parentElement);\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(resizeObserverCallback);\n                    this.resizeObserver.observe(this.element);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', resizeObserverCallback);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * Adds title at the top of component's container.\n             *\n             * @param titleOptions\n             * The options for the title.\n             */\n            setTitle(titleOptions) {\n                const titleElement = this.titleElement, shouldExist = titleOptions &&\n                    (typeof titleOptions === 'string' || titleOptions.text);\n                if (shouldExist) {\n                    const newTitle = Component.createTextElement('h2', 'title', titleOptions);\n                    if (newTitle) {\n                        if (!titleElement) {\n                            this.element.insertBefore(newTitle, this.element.firstChild);\n                        }\n                        else {\n                            titleElement.replaceWith(newTitle);\n                        }\n                        this.titleElement = newTitle;\n                    }\n                }\n                else {\n                    if (titleElement) {\n                        titleElement.remove();\n                        delete this.titleElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Adds caption at the bottom of component's container.\n             *\n             * @param captionOptions\n             * The options for the caption.\n             */\n            setCaption(captionOptions) {\n                const captionElement = this.captionElement, shouldExist = captionOptions &&\n                    (typeof captionOptions === 'string' || captionOptions.text);\n                if (shouldExist) {\n                    const newCaption = Component.createTextElement('div', 'caption', captionOptions);\n                    if (newCaption) {\n                        if (!captionElement) {\n                            this.element.appendChild(newCaption);\n                        }\n                        else {\n                            captionElement.replaceWith(newCaption);\n                        }\n                        this.captionElement = newCaption;\n                    }\n                }\n                else {\n                    if (captionElement) {\n                        captionElement.remove();\n                        delete this.captionElement;\n                        return;\n                    }\n                }\n            }\n            /**\n             * Handles setting things up on initial render.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            async load() {\n                await this.initConnectors();\n                this.render();\n                return this;\n            }\n            /**\n             * Renders the component.\n             *\n             * @returns\n             * The component for chaining.\n             *\n             * @internal\n             */\n            render() {\n                this.emit({ type: 'render' });\n                this.setTitle(this.options.title);\n                this.setCaption(this.options.caption);\n                this.resizeTo(this.parentElement);\n                return this;\n            }\n            /**\n             * Destroys the component.\n             */\n            destroy() {\n                /**\n                 * TODO: Should perhaps set an `isActive` flag to false.\n                 */\n                if (this.sync.isSyncing) {\n                    this.sync.stop();\n                }\n                while (this.element.firstChild) {\n                    this.element.firstChild.remove();\n                }\n                // Call unmount\n                fireEvent(this, 'unmount');\n                for (const connectorHandler of this.connectorHandlers) {\n                    connectorHandler.destroy();\n                }\n                // Used to removed the onTableChanged event.\n                removeEvent(this);\n                this.element.remove();\n            }\n            /** @internal */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /** @internal */\n            emit(e) {\n                if (!e.target) {\n                    e.target = this;\n                }\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Get the component's options.\n             * @returns\n             * The JSON of component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return diffObjects(this.options, Component.defaultOptions);\n            }\n            getEditableOptions() {\n                const component = this;\n                // When refactoring, limit the copied options to the ones that are\n                // actually editable to avoid unnecessary memory usage.\n                return deepClone(component.options, [\n                    'dataTable', 'points', 'series', 'data', 'editableOptions'\n                ]);\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                let result = component.getEditableOptions();\n                for (let i = 0, end = propertyPath.length; i < end; i++) {\n                    if (isArray(result) &&\n                        propertyPath[0] === 'connector' &&\n                        result.length > 1) {\n                        return 'multiple connectors';\n                    }\n                    if (!result) {\n                        return;\n                    }\n                    result = result[propertyPath[i]];\n                    if (result === false &&\n                        (propertyPath.indexOf('title') >= 0 ||\n                            propertyPath.indexOf('subtitle') >= 0 ||\n                            propertyPath.indexOf('caption') >= 0)) {\n                        result = '';\n                    }\n                }\n                return result;\n            }\n        }\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        /** @internal */\n        Component.Sync = Sync;\n        /**\n         * Predefined sync config for component.\n         */\n        Component.predefinedSyncConfig = {\n            defaultSyncOptions: {},\n            defaultSyncPairs: {}\n        };\n        /**\n         * Default options of the component.\n         */\n        Component.defaultOptions = {\n            className: `${classNamePrefix}component`,\n            id: '',\n            title: false,\n            caption: false,\n            sync: Sync.defaultHandlers,\n            editableOptions: [{\n                    name: 'title',\n                    propertyPath: ['title'],\n                    type: 'input'\n                }, {\n                    name: 'caption',\n                    propertyPath: ['caption'],\n                    type: 'input'\n                }]\n        };\n\n        return Component;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const HTMLComponentDefaults = {\n            type: 'HTML',\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-html`\n            ].join(' '),\n            elements: [],\n            editableOptions: [\n                ...Component.defaultOptions.editableOptions || [],\n                {\n                    name: 'htmlInput',\n                    propertyPath: ['html'],\n                    type: 'textarea'\n                }\n            ]\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLSyncs/HTMLSyncs.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {},\n            defaultSyncOptions: {}\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HTMLComponent/HTMLComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/HTMLComponent/HTMLComponentDefaults.js'], _modules['Dashboards/Components/HTMLComponent/HTMLSyncs/HTMLSyncs.js'], _modules['Dashboards/Utilities.js'], _modules['Core/Utilities.js']], function (AST, Component, HTMLComponentDefaults, HTMLSyncs, DU, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, diffObjects } = U;\n        const { deepClone } = DU;\n        // TODO: This may affect the AST parsing in Highcharts\n        // should look into adding these as options if possible\n        // Needs to go in a composition in the Highcharts plugin\n        AST.allowedTags = [\n            ...AST.allowedTags,\n            'option',\n            'select',\n            'label',\n            'input',\n            'textarea'\n        ];\n        AST.allowedAttributes = [\n            ...AST.allowedAttributes,\n            'for',\n            'value',\n            'checked',\n            'src',\n            'name',\n            'selected'\n        ];\n        AST.allowedReferences = [\n            ...AST.allowedReferences,\n            'data:image/'\n        ];\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a HTML component.\n         *\n         */\n        class HTMLComponent extends Component {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a HTML component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options) {\n                if (options.className) {\n                    options.className = `${HTMLComponent.defaultOptions.className} ${options.className}`;\n                }\n                options = merge(HTMLComponent.defaultOptions, options);\n                super(cell, options);\n                this.options = options;\n                this.type = 'HTML';\n                this.elements = [];\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                this.emit({\n                    type: 'load'\n                });\n                await super.load();\n                const options = this.options;\n                let isError = false;\n                if (options.elements?.length) {\n                    this.elements = options.elements.map(function (element) {\n                        if (typeof element === 'string') {\n                            return new AST(element).nodes[0];\n                        }\n                        if (!element.textContent &&\n                            !element.tagName &&\n                            element.attributes) {\n                            isError = true;\n                        }\n                        return element;\n                    });\n                }\n                else if (options.html) {\n                    this.elements = this.getElementsFromString(options.html);\n                    this.options.elements = this.elements;\n                }\n                this.constructTree();\n                this.emit({ type: 'afterLoad' });\n                if (isError) {\n                    throw new Error(`Missing tagName param in component: ${options.renderTo}`);\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.constructTree();\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                if (options.html) {\n                    this.elements = this.getElementsFromString(options.html);\n                    this.options.elements = this.elements;\n                    this.constructTree();\n                }\n                else if (options.elements) {\n                    this.elements = options.elements;\n                }\n                await super.update(options, shouldRerender);\n                this.emit({ type: 'afterUpdate' });\n            }\n            getOptionsOnDrop() {\n                return {\n                    cell: '',\n                    type: 'HTML',\n                    elements: [{\n                            tagName: 'span',\n                            textContent: '[Your custom HTML here- edit the component]'\n                        }]\n                };\n            }\n            /**\n             * @internal\n             */\n            constructTree() {\n                // Remove old tree if rerendering.\n                while (this.contentElement.firstChild) {\n                    this.contentElement.firstChild.remove();\n                }\n                const parser = new AST(this.options.elements || []);\n                parser.addToDOM(this.contentElement);\n            }\n            /**\n             * When HTML definition is a string, it needs to be parsed to AST.\n             *\n             * @internal\n             */\n            getElementsFromString(htmlString) {\n                return new AST(htmlString).nodes;\n            }\n            /**\n             * Get the HTML component's options.\n             * @returns\n             * HTML component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HTMLComponent.defaultOptions),\n                    type: 'HTML'\n                };\n            }\n            /**\n             * Retrieves editable options for the HTML component.\n             */\n            getEditableOptions() {\n                return deepClone(this.options, ['editableOptions']);\n            }\n            /**\n             * Get the value of the editable option by property path. Parse the elements\n             * if the HTML options is not set.\n             *\n             * @param propertyPath\n             * The property path of the option.\n             */\n            getEditableOptionValue(propertyPath) {\n                if (!propertyPath) {\n                    return;\n                }\n                if (propertyPath[0] === 'html') {\n                    const result = this.getEditableOptions();\n                    if (!result.html && result.elements) {\n                        return this.getStringFromElements(result.elements);\n                    }\n                    return result[propertyPath[0]];\n                }\n                return super.getEditableOptionValue(propertyPath);\n            }\n            /**\n             * Returns the HTML string from the given elements.\n             *\n             * @param elements\n             * The array of elements to serialize.\n             */\n            getStringFromElements(elements) {\n                let html = '';\n                for (const element of elements) {\n                    html += this.serializeNode(element);\n                }\n                return html;\n            }\n            /**\n             * Serializes the HTML node to string.\n             *\n             * @param node\n             * The HTML node to serialize.\n             */\n            serializeNode(node) {\n                if (!node.tagName || node.tagName === '#text') {\n                    // Text node\n                    return node.textContent || '';\n                }\n                const attributes = node.attributes;\n                let html = `<${node.tagName}`;\n                if (attributes) {\n                    for (const key in attributes) {\n                        if (Object.prototype.hasOwnProperty.call(attributes, key)) {\n                            const value = attributes[key];\n                            if (value !== void 0) {\n                                html += ` ${key}=\"${value}\"`;\n                            }\n                        }\n                    }\n                }\n                html += '>';\n                html += node.textContent || '';\n                (node.children || []).forEach((child) => {\n                    html += this.serializeNode(child);\n                });\n                html += `</${node.tagName}>`;\n                return html;\n            }\n            /**\n             * @internal\n             */\n            onTableChanged(e) {\n                if (e.detail?.sender !== this.id) {\n                    this.render();\n                }\n            }\n        }\n        /* *\n         *\n         *  Static properties\n         *\n         * */\n        /**\n         * Default options of the HTML component.\n         */\n        HTMLComponent.defaultOptions = merge(Component.defaultOptions, HTMLComponentDefaults);\n        /**\n         * Predefined sync config for HTML component.\n         */\n        HTMLComponent.predefinedSyncConfig = HTMLSyncs;\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return HTMLComponent;\n    });\n    _registerModule(_modules, 'Data/ColumnUtils.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /**\n         * Utility functions for columns that can be either arrays or typed arrays.\n         * @private\n         */\n        var ColumnUtils;\n        (function (ColumnUtils) {\n            /* *\n            *\n            *  Declarations\n            *\n            * */\n            /* *\n            *\n            * Functions\n            *\n            * */\n            /**\n             * Sets the length of the column array.\n             *\n             * @param {DataTable.Column} column\n             * Column to be modified.\n             *\n             * @param {number} length\n             * New length of the column.\n             *\n             * @param {boolean} asSubarray\n             * If column is a typed array, return a subarray instead of a new array. It\n             * is faster `O(1)`, but the entire buffer will be kept in memory until all\n             * views to it are destroyed. Default is `false`.\n             *\n             * @return {DataTable.Column}\n             * Modified column.\n             *\n             * @private\n             */\n            function setLength(column, length, asSubarray) {\n                if (Array.isArray(column)) {\n                    column.length = length;\n                    return column;\n                }\n                return column[asSubarray ? 'subarray' : 'slice'](0, length);\n            }\n            ColumnUtils.setLength = setLength;\n            /**\n             * Splices a column array.\n             *\n             * @param {DataTable.Column} column\n             * Column to be modified.\n             *\n             * @param {number} start\n             * Index at which to start changing the array.\n             *\n             * @param {number} deleteCount\n             * An integer indicating the number of old array elements to remove.\n             *\n             * @param {boolean} removedAsSubarray\n             * If column is a typed array, return a subarray instead of a new array. It\n             * is faster `O(1)`, but the entire buffer will be kept in memory until all\n             * views to it are destroyed. Default is `true`.\n             *\n             * @param {Array<number>|TypedArray} items\n             * The elements to add to the array, beginning at the start index. If you\n             * don't specify any elements, `splice()` will only remove elements from the\n             * array.\n             *\n             * @return {SpliceResult}\n             * Object containing removed elements and the modified column.\n             *\n             * @private\n             */\n            function splice(column, start, deleteCount, removedAsSubarray, items = []) {\n                if (Array.isArray(column)) {\n                    if (!Array.isArray(items)) {\n                        items = Array.from(items);\n                    }\n                    return {\n                        removed: column.splice(start, deleteCount, ...items),\n                        array: column\n                    };\n                }\n                const Constructor = Object.getPrototypeOf(column)\n                    .constructor;\n                const removed = column[removedAsSubarray ? 'subarray' : 'slice'](start, start + deleteCount);\n                const newLength = column.length - deleteCount + items.length;\n                const result = new Constructor(newLength);\n                result.set(column.subarray(0, start), 0);\n                result.set(items, start);\n                result.set(column.subarray(start + deleteCount), start + items.length);\n                return {\n                    removed: removed,\n                    array: result\n                };\n            }\n            ColumnUtils.splice = splice;\n        })(ColumnUtils || (ColumnUtils = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnUtils;\n    });\n    _registerModule(_modules, 'Data/DataTableCore.js', [_modules['Data/ColumnUtils.js'], _modules['Core/Utilities.js']], function (ColumnUtils, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *\n         * */\n        const { setLength, splice } = ColumnUtils;\n        const { fireEvent, objectEach, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTableCore {\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @example\n             * const dataTable = new Highcharts.DataTableCore({\n             *   columns: {\n             *     year: [2020, 2021, 2022, 2023],\n             *     cost: [11, 13, 12, 14],\n             *     revenue: [12, 15, 14, 18]\n             *   }\n             * });\n\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            constructor(options = {}) {\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for identification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                let rowCount = 0;\n                objectEach(options.columns || {}, (column, columnName) => {\n                    this.columns[columnName] = column.slice();\n                    rowCount = Math.max(rowCount, column.length);\n                });\n                this.applyRowCount(rowCount);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies a row count to the table by setting the `rowCount` property and\n             * adjusting the length of all columns.\n             *\n             * @private\n             * @param {number} rowCount The new row count.\n             */\n            applyRowCount(rowCount) {\n                this.rowCount = rowCount;\n                objectEach(this.columns, (column, columnName) => {\n                    if (column.length !== rowCount) {\n                        this.columns[columnName] = setLength(column, rowCount);\n                    }\n                });\n            }\n            /**\n             * Delete rows. Simplified version of the full\n             * `DataTable.deleteRows` method.\n             *\n             * @param {number} rowIndex\n             * The start row index\n             *\n             * @param {number} [rowCount=1]\n             * The number of rows to delete\n             *\n             * @return {void}\n             *\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1) {\n                if (rowCount > 0 && rowIndex < this.rowCount) {\n                    let length = 0;\n                    objectEach(this.columns, (column, columnName) => {\n                        this.columns[columnName] =\n                            splice(column, rowIndex, rowCount).array;\n                        length = column.length;\n                    });\n                    this.rowCount = length;\n                }\n                fireEvent(this, 'afterDeleteRows', { rowIndex, rowCount });\n                this.versionTag = uniqueKey();\n            }\n            /**\n             * Fetches the given column by the canonical column name. Simplified version\n             * of the full `DataTable.getRow` method, always returning by reference.\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnName, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            asReference) {\n                return this.columns[columnName];\n            }\n            /**\n             * Retrieves all or the given columns. Simplified version of the full\n             * `DataTable.getColumns` method, always returning by reference.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNames, \n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            asReference) {\n                return (columnNames || Object.keys(this.columns)).reduce((columns, columnName) => {\n                    columns[columnName] = this.columns[columnName];\n                    return columns;\n                }, {});\n            }\n            /**\n             * Retrieves the row at a given index.\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @return {Record<string, number|string|undefined>|undefined}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNames) {\n                return (columnNames || Object.keys(this.columns)).map((key) => this.columns[key]?.[rowIndex]);\n            }\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumn(columnName, column = [], rowIndex = 0, eventDetail) {\n                this.setColumns({ [columnName]: column }, rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found. Simplified version of the full `DataTableCore.setColumns`, limited\n             * to full replacement of the columns (undefined `rowIndex`).\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Ignored in the `DataTableCore`, as it\n             * always replaces the full column.\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                let rowCount = this.rowCount;\n                objectEach(columns, (column, columnName) => {\n                    this.columns[columnName] = column.slice();\n                    rowCount = column.length;\n                });\n                this.applyRowCount(rowCount);\n                if (!eventDetail?.silent) {\n                    fireEvent(this, 'afterSetColumns');\n                    this.versionTag = uniqueKey();\n                }\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             * A simplified version of the full `DateTable.setRow`, limited to objects.\n             *\n             * @param {Record<string, number|string|undefined>} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefined` to add as a new row.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Record<string, (boolean|number|string|null|undefined)>} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex = this.rowCount, insert, eventDetail) {\n                const { columns } = this, indexRowCount = insert ? this.rowCount + 1 : rowIndex + 1;\n                objectEach(row, (cellValue, columnName) => {\n                    let column = columns[columnName] ||\n                        eventDetail?.addColumns !== false && new Array(indexRowCount);\n                    if (column) {\n                        if (insert) {\n                            column = splice(column, rowIndex, 0, true, [cellValue]).array;\n                        }\n                        else {\n                            column[rowIndex] = cellValue;\n                        }\n                        columns[columnName] = column;\n                    }\n                });\n                if (indexRowCount > this.rowCount) {\n                    this.applyRowCount(indexRowCount);\n                }\n                if (!eventDetail?.silent) {\n                    fireEvent(this, 'afterSetRows');\n                    this.versionTag = uniqueKey();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * A typed array.\n         * @typedef {Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} Highcharts.TypedArray\n         * //**\n         * A column of values in a data table.\n         * @typedef {Array<boolean|null|number|string|undefined>|Highcharts.TypedArray} Highcharts.DataTableColumn\n         */ /**\n        * A collection of data table columns defined by a object where the key is the\n        * column name and the value is an array of the column values.\n        * @typedef {Record<string, Highcharts.DataTableColumn>} Highcharts.DataTableColumnCollection\n        */\n        /**\n         * Options for the `DataTable` or `DataTableCore` classes.\n         * @interface Highcharts.DataTableOptions\n         */ /**\n        * The column options for the data table. The columns are defined by an object\n        * where the key is the column ID and the value is an array of the column\n        * values.\n        *\n        * @name Highcharts.DataTableOptions.columns\n        * @type {Highcharts.DataTableColumnCollection|undefined}\n        */ /**\n        * Custom ID to identify the new DataTable instance.\n        *\n        * @name Highcharts.DataTableOptions.id\n        * @type {string|undefined}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return DataTableCore;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Data/ColumnUtils.js'], _modules['Data/DataTableCore.js'], _modules['Core/Utilities.js']], function (CU, DataTableCore, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *  - Jomar Hønsi\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, defined, extend, fireEvent, isNumber, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTable extends DataTableCore {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            static isNull(row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    const columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = {}) {\n                super(options);\n                this.modified = this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            clone(skipColumns, eventDetail) {\n                const table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                const tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                    tableClone.originalRowIndexes = table.originalRowIndexes;\n                    tableClone.localRowIndexes = table.localRowIndexes;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone\n                });\n                return tableClone;\n            }\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            deleteColumns(columnNames, eventDetail) {\n                const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                        this.deleteRowIndexReferences();\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            }\n            /**\n             * Deletes the row index references. This is useful when the original table\n             * is deleted, and the references are no longer needed. This table is\n             * then considered an original table or a table that has the same row's\n             * order as the original table.\n             */\n            deleteRowIndexReferences() {\n                delete this.originalRowIndexes;\n                delete this.localRowIndexes;\n                // Here, in case of future need, can be implemented updating of the\n                // modified tables' row indexes references.\n            }\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1, eventDetail) {\n                const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    const columns = table.columns, columnNames = Object.keys(columns);\n                    for (let i = 0, iEnd = columnNames.length, column, deletedCells, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        const result = CU.splice(column, rowIndex, rowCount);\n                        deletedCells = result.removed;\n                        columns[columnName] = column = result.array;\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            }\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                if ([\n                    'afterDeleteColumns',\n                    'afterDeleteRows',\n                    'afterSetCell',\n                    'afterSetColumns',\n                    'afterSetRows'\n                ].includes(e.type)) {\n                    this.versionTag = uniqueKey();\n                }\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnName\n             * Column name of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            getCell(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    return column[rowIndex];\n                }\n            }\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            getCellAsBoolean(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                return !!(column && column[rowIndex]);\n            }\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnName\n             * Column name or to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            getCellAsNumber(columnName, rowIndex, useNaN) {\n                const table = this;\n                const column = table.columns[columnName];\n                let cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(`${cellValue ?? ''}`);\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            }\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            getCellAsString(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                return `${(column && column[rowIndex])}`;\n            }\n            /**\n             * Fetches the given column by the canonical column name.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnName, asReference) {\n                return this.getColumns([columnName], asReference)[columnName];\n            }\n            /**\n             * Fetches the given column by the canonical column name, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @deprecated\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            getColumnAsNumbers(columnName, useNaN) {\n                const table = this, columns = table.columns;\n                const column = columns[columnName], columnAsNumber = [];\n                if (column) {\n                    const columnLength = column.length;\n                    if (useNaN) {\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i, true));\n                        }\n                    }\n                    else {\n                        for (let i = 0, cellValue; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            }\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            getColumnNames() {\n                const table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            }\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @param {boolean} [asBasicColumns]\n             * Whether to transform all typed array columns to normal arrays.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNames, asReference, asBasicColumns) {\n                const table = this, tableColumns = table.columns, columns = {};\n                columnNames = (columnNames || Object.keys(tableColumns));\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = tableColumns[columnName];\n                    if (column) {\n                        if (asReference) {\n                            columns[columnName] = column;\n                        }\n                        else if (asBasicColumns && !Array.isArray(column)) {\n                            columns[columnName] = Array.from(column);\n                        }\n                        else {\n                            columns[columnName] = column.slice();\n                        }\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Takes the original row index and returns the local row index in the\n             * modified table for which this function is called.\n             *\n             * @param {number} originalRowIndex\n             * Original row index to get the local row index for.\n             *\n             * @return {number|undefined}\n             * Returns the local row index or `undefined` if not found.\n             */\n            getLocalRowIndex(originalRowIndex) {\n                const { localRowIndexes } = this;\n                if (localRowIndexes) {\n                    return localRowIndexes[originalRowIndex];\n                }\n                return originalRowIndex;\n            }\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            getModifier() {\n                return this.modifier;\n            }\n            /**\n             * Takes the local row index and returns the index of the corresponding row\n             * in the original table.\n             *\n             * @param {number} rowIndex\n             * Local row index to get the original row index for.\n             *\n             * @return {number|undefined}\n             * Returns the original row index or `undefined` if not found.\n             */\n            getOriginalRowIndex(rowIndex) {\n                const { originalRowIndexes } = this;\n                if (originalRowIndexes) {\n                    return originalRowIndexes[rowIndex];\n                }\n                return rowIndex;\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNames) {\n                return this.getRows(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            getRowCount() {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            }\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            getRowIndexBy(columnName, cellValue, rowIndexOffset) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    let rowIndex = -1;\n                    if (Array.isArray(column)) {\n                        // Normal array\n                        rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    }\n                    else if (isNumber(cellValue)) {\n                        // Typed array\n                        rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    }\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRowObject(rowIndex, columnNames) {\n                return this.getRowObjects(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            getVersionTag() {\n                return this.versionTag;\n            }\n            /**\n             * Checks for given column names.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNames\n             * Column names to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            hasColumns(columnNames) {\n                const table = this, columns = table.columns;\n                for (let i = 0, iEnd = columnNames.length, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    if (!columns[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            hasRowWith(columnName, cellValue) {\n                const table = this;\n                const column = table.columns[columnName];\n                // Normal array\n                if (Array.isArray(column)) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                // Typed array\n                if (defined(cellValue) && Number.isFinite(cellValue)) {\n                    return (column.indexOf(+cellValue) !== -1);\n                }\n                return false;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            renameColumn(columnName, newColumnName) {\n                const table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Sets a cell value based on the row index and column.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            setCell(columnName, rowIndex, cellValue, eventDetail) {\n                const table = this, columns = table.columns, modifier = table.modifier;\n                let column = columns[columnName];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!column) {\n                    column = columns[columnName] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnName, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @param {boolean} [typeAsOriginal=false]\n             * Determines whether the original column retains its type when data\n             * replaced. If `true`, the original column keeps its type. If not\n             * (default), the original column will adopt the type of the replacement\n             * column.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail, typeAsOriginal) {\n                const table = this, tableColumns = table.columns, tableModifier = table.modifier, columnNames = Object.keys(columns);\n                let rowCount = table.rowCount;\n                table.emit({\n                    type: 'setColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!defined(rowIndex) && !typeAsOriginal) {\n                    super.setColumns(columns, rowIndex, extend(eventDetail, { silent: true }));\n                }\n                else {\n                    for (let i = 0, iEnd = columnNames.length, column, tableColumn, columnName, ArrayConstructor; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        tableColumn = tableColumns[columnName];\n                        ArrayConstructor = Object.getPrototypeOf((tableColumn && typeAsOriginal) ? tableColumn : column).constructor;\n                        if (!tableColumn) {\n                            tableColumn = new ArrayConstructor(rowCount);\n                        }\n                        else if (ArrayConstructor === Array) {\n                            if (!Array.isArray(tableColumn)) {\n                                tableColumn = Array.from(tableColumn);\n                            }\n                        }\n                        else if (tableColumn.length < rowCount) {\n                            tableColumn =\n                                new ArrayConstructor(rowCount);\n                            tableColumn.set(tableColumns[columnName]);\n                        }\n                        tableColumns[columnName] = tableColumn;\n                        for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                            tableColumn[i] = column[i];\n                        }\n                        rowCount = Math.max(rowCount, column.length);\n                    }\n                    this.applyRowCount(rowCount);\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, rowIndex || 0);\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets or unsets the modifier for the table.\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successful, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            setModifier(modifier, eventDetail) {\n                const table = this;\n                let promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then((table) => {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch']((error) => {\n                    table.emit({\n                        type: 'setModifierError',\n                        error,\n                        modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            }\n            /**\n             * Sets the original row indexes for the table. It is used to keep the\n             * reference to the original rows when modifying the table.\n             *\n             * @param {Array<number|undefined>} originalRowIndexes\n             * Original row indexes array.\n             *\n             * @param {boolean} omitLocalRowIndexes\n             * Whether to omit the local row indexes calculation. Defaults to `false`.\n             */\n            setOriginalRowIndexes(originalRowIndexes, omitLocalRowIndexes = false) {\n                this.originalRowIndexes = originalRowIndexes;\n                if (omitLocalRowIndexes) {\n                    return;\n                }\n                const modifiedIndexes = this.localRowIndexes = [];\n                for (let i = 0, iEnd = originalRowIndexes.length, originalIndex; i < iEnd; ++i) {\n                    originalIndex = originalRowIndexes[i];\n                    if (defined(originalIndex)) {\n                        modifiedIndexes[originalIndex] = i;\n                    }\n                }\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex, insert, eventDetail) {\n                this.setRows([row], rowIndex, insert, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefined` to add as new rows.\n             *\n             * @param {boolean} [insert]\n             * Whether to insert the row at the given index, or to overwrite the row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRows(rows, rowIndex = this.rowCount, insert, eventDetail) {\n                const table = this, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n                for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            const column = columns[columnNames[j]];\n                            if (insert) {\n                                columns[columnNames[j]] = CU.splice(column, i2, 0, true, [null]).array;\n                            }\n                            else {\n                                column[i2] = null;\n                            }\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        super.setRow(row, i2, void 0, { silent: true });\n                    }\n                }\n                const indexRowCount = insert ?\n                    rowCount + rows.length :\n                    rowIndex + rowCount;\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        const columnName = columnNames[i];\n                        columns[columnName] = CU.setLength(columns[columnName], indexRowCount);\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Null state for a row record. In some cases, a row in a table may not\n         * contain any data or may be invalid. In these cases, a null state can be\n         * used to indicate that the row record is empty or invalid.\n         *\n         * @name Highcharts.DataTable.NULL\n         * @type {Highcharts.DataTableRowObject}\n         *\n         * @see {@link Highcharts.DataTable.isNull} for a null test.\n         *\n         * @example\n         * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n         */\n        DataTable.NULL = {};\n        /**\n         * Semantic version string of the DataTable class.\n         * @internal\n         */\n        DataTable.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - Gøran Slettemark\n         *  - Torstein Hønsi\n         *  - Wojciech Chmiel\n         *  - Jomar Hønsi\n         *\n         * */\n        const { addEvent, fireEvent, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        class DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^(\\d{4})([\\-\\.\\/])(\\d{1,2})\\2(\\d{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            const d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            let year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                const mergedOptions = merge(DataConverter.defaultOptions, options);\n                let regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            asBoolean(value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            }\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            asDate(value) {\n                let timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            }\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            asGuessedType(value) {\n                const converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            }\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            asNumber(value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    const decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            }\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            asString(value) {\n                return '' + value;\n            }\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            deduceDateFormat(data, limit, save) {\n                const parser = this, stable = [], max = [];\n                let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[\\-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            }\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            export(\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            getTable() {\n                throw new Error('Not implemented');\n            }\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            guessType(value) {\n                const converter = this;\n                let result = 'string';\n                if (typeof value === 'string') {\n                    const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n                    let innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    const floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        const dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            parse(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            parseDate(value, dateFormatProp) {\n                const converter = this, options = converter.options;\n                let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            trim(str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[\\d\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        DataConverter.defaultOptions = {\n            dateFormat: '',\n            alternativeFormat: '',\n            startColumn: 0,\n            endColumn: Number.MAX_VALUE,\n            startRow: 0,\n            endRow: Number.MAX_VALUE,\n            firstRowAsNames: true,\n            switchRowsAndColumns: false\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConverter.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a converter class to the registry.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the converter class.\n             *\n             * @param {DataConverterTypes} DataConverterClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a converter registered with this key.\n             */\n            function registerType(key, DataConverterClass) {\n                return (!!key &&\n                    !DataConverter.types[key] &&\n                    !!(DataConverter.types[key] = DataConverterClass));\n            }\n            DataConverter.registerType = registerType;\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns = [], headers = []) {\n                const table = new DataTable();\n                for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || `${i}`, columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        class CSVConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            export(connector, options = this.options) {\n                const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n                let { decimalPoint, itemDelimiter } = options;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    const columnMeta = connector.whatIs(columnName);\n                    let columnDataType;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = `\"${cellValue}\"`;\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            let i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                const cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            }\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n                let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (let i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    let offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                let cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Internal method that parses a single CSV row\n             */\n            parseCSVRow(columnStr, rowNumber) {\n                const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                let { decimalPoint } = converter.options;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                let i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                const read = (j) => {\n                    c = columnStr[j];\n                };\n                const pushType = (type) => {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                const push = () => {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        const initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[A-F\\d]{3,3}|[A-F\\d]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            }\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            guessDelimiter(lines) {\n                let points = 0, commas = 0, guessed;\n                const potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (let i = 0; i < linesCount; i++) {\n                    let inStr = false, c, cn, cl, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    const columnStr = lines[i];\n                    for (let j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        CSVConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            lineDelimiter: '\\n'\n        };\n        DataConverter.registerType('CSV', CSVConverter);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         */\n        class DataModifier {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            benchmark(dataTable, options) {\n                const results = [];\n                const modifier = this;\n                const execute = () => {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                const defaultOptions = {\n                    iterations: 1\n                };\n                const { iterations } = merge(defaultOptions, options);\n                modifier.on('afterBenchmarkIteration', () => {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                const times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', () => {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', () => {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            }\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifier = this;\n                return new Promise((resolve, reject) => {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        reject(e);\n                    }\n                });\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        class DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             *\n             * @param {Array<DataTableOptions>} [dataTables]\n             * Multiple connector data tables options.\n             */\n            constructor(options = {}, dataTables = []) {\n                /**\n                 * Tables managed by this DataConnector instance.\n                 */\n                this.dataTables = {};\n                /**\n                 * Helper flag for detecting whether the data connector is loaded.\n                 * @internal\n                 */\n                this.loaded = false;\n                this.metadata = options.metadata || { columns: {} };\n                // Create a data table for each defined in the dataTables user options.\n                let dataTableIndex = 0;\n                if (dataTables?.length > 0) {\n                    for (let i = 0, iEnd = dataTables.length; i < iEnd; ++i) {\n                        const dataTable = dataTables[i];\n                        const key = dataTable?.key;\n                        this.dataTables[key ?? dataTableIndex] =\n                            new DataTable(dataTable);\n                        if (!key) {\n                            dataTableIndex++;\n                        }\n                    }\n                    // If user options dataTables is not defined, generate a default table.\n                }\n                else {\n                    this.dataTables[0] = new DataTable(options.dataTable);\n                }\n            }\n            /**\n             * Poll timer ID, if active.\n             */\n            get polling() {\n                return !!this._polling;\n            }\n            /**\n             * Gets the first data table.\n             *\n             * @return {DataTable}\n             * The data table instance.\n             */\n            get table() {\n                return this.getTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            describeColumn(name, columnMeta) {\n                const connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            }\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            describeColumns(columns) {\n                const connector = this, columnNames = Object.keys(columns);\n                let columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            }\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            getColumnOrder(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort((a, b) => (pick(columns[a].index, 0) - pick(columns[b].index, 0)));\n                }\n            }\n            /**\n             * Returns a single data table instance based on the provided key.\n             * Otherwise, returns the first data table.\n             *\n             * @param {string} [key]\n             * The data table key.\n             *\n             * @return {DataTable}\n             * The data table instance.\n             */\n            getTable(key) {\n                if (key) {\n                    return this.dataTables[key];\n                }\n                return Object.values(this.dataTables)[0];\n            }\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            getSortedColumns(usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            }\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            load() {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            }\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            save() {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            }\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            setColumnOrder(columnNames) {\n                const connector = this;\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            }\n            async setModifierOptions(modifierOptions, tablesOptions) {\n                for (const [key, table] of Object.entries(this.dataTables)) {\n                    const tableOptions = tablesOptions?.find((dataTable) => dataTable.key === key);\n                    const mergedModifierOptions = merge(tableOptions?.dataModifier, modifierOptions);\n                    const ModifierClass = (mergedModifierOptions &&\n                        DataModifier.types[mergedModifierOptions.type]);\n                    await table.setModifier(ModifierClass ?\n                        new ModifierClass(mergedModifierOptions) :\n                        void 0);\n                }\n                return this;\n            }\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            startPolling(refreshTime = 1000) {\n                const connector = this;\n                const tables = connector.dataTables;\n                // Assign a new abort controller.\n                this.pollingController = new AbortController();\n                // Clear the polling timeout.\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(() => connector\n                    .load()['catch']((error) => connector.emit({\n                    type: 'loadError',\n                    error,\n                    tables\n                }))\n                    .then(() => {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }), refreshTime);\n            }\n            /**\n             * Stops polling data. Shouldn't be performed if polling is already stopped.\n             */\n            stopPolling() {\n                const connector = this;\n                if (!connector.polling) {\n                    return;\n                }\n                // Abort the existing request.\n                connector?.pollingController?.abort();\n                // Clear the polling timeout.\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            }\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            whatIs(name) {\n                return this.metadata.columns[name];\n            }\n            /**\n             * Iterates over the dataTables and initiates the corresponding converters.\n             * Updates the dataTables and assigns the first converter.\n             *\n             * @param {T}[data]\n             * Data specific to the corresponding converter.\n             *\n             * @param {DataConnector.CreateConverterFunction}[createConverter]\n             * Creates a specific converter combining the dataTable options.\n             *\n             * @param {DataConnector.ParseDataFunction<T>}[parseData]\n             * Runs the converter parse method with the specific data type.\n             */\n            initConverters(data, createConverter, parseData) {\n                let index = 0;\n                for (const [key, table] of Object.entries(this.dataTables)) {\n                    // Create a proper converter and parse its data.\n                    const converter = createConverter(key, table);\n                    parseData(converter, data);\n                    // Update the dataTable.\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    // Assign the first converter.\n                    if (index === 0) {\n                        this.converter = converter;\n                    }\n                    index++;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Christer Vasseng\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        class CSVConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             *\n             * @param {Array<DataTableOptions>} [dataTables]\n             * Multiple connector data tables options.\n             *\n             */\n            constructor(options, dataTables) {\n                const mergedOptions = merge(CSVConnector.defaultOptions, options);\n                super(mergedOptions, dataTables);\n                this.options = defined(dataTables) ?\n                    merge(mergedOptions, { dataTables }) : mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, tables = connector.dataTables, { csv, csvURL, dataModifier, dataTables } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    csv,\n                    detail: eventDetail,\n                    tables\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL, {\n                        signal: connector?.pollingController?.signal\n                    }).then((response) => response.text()) :\n                    csv || '')\n                    .then((csv) => {\n                    if (csv) {\n                        this.initConverters(csv, (key) => {\n                            const options = this.options;\n                            const tableOptions = dataTables?.find((dataTable) => dataTable.key === key);\n                            // Takes over the connector default options.\n                            const mergedTableOptions = {\n                                dataTableKey: key,\n                                firstRowAsNames: tableOptions?.firstRowAsNames ??\n                                    options.firstRowAsNames,\n                                beforeParse: tableOptions?.beforeParse ??\n                                    options.beforeParse\n                            };\n                            return new CSVConverter(merge(this.options, mergedTableOptions));\n                        }, (converter, data) => {\n                            converter.parse({ csv: data });\n                        });\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier, dataTables)\n                        .then(() => csv);\n                })\n                    .then((csv) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv,\n                        detail: eventDetail,\n                        tables\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        tables\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CSVConnector.defaultOptions = {\n            csv: '',\n            csvURL: '',\n            enablePolling: false,\n            dataRefreshRate: 1,\n            firstRowAsNames: true\n        };\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        class GoogleSheetsConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.header = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, parseOptions = merge(converter.options, options);\n                let columns = ((parseOptions.json?.values) || []).map((column) => column.slice());\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                // If beforeParse is defined, use it to modify the data\n                const { beforeParse, json } = parseOptions;\n                if (beforeParse && json) {\n                    columns = beforeParse(json.values);\n                }\n                let column;\n                converter.columns = columns;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        `${column.shift()}` :\n                        uniqueKey());\n                    for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            let cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        GoogleSheetsConverter.defaultOptions = {\n            ...DataConverter.defaultOptions\n        };\n        DataConverter.registerType('GoogleSheets', GoogleSheetsConverter);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *  - Jomar Hønsi\n         *\n         * */\n        const { merge, pick, defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        class GoogleSheetsConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             *\n             * @param {Array<DataTableOptions>} [dataTables]\n             * Multiple connector data tables options.\n             *\n             */\n            constructor(options, dataTables) {\n                const mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                super(mergedOptions, dataTables);\n                this.options = defined(dataTables) ?\n                    merge(mergedOptions, { dataTables }) : mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            load(eventDetail) {\n                const connector = this, tables = connector.dataTables, { dataModifier, dataRefreshRate, enablePolling, googleAPIKey, googleSpreadsheetKey, dataTables } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    tables,\n                    url\n                });\n                if (!URL.canParse(url)) {\n                    throw new Error('Invalid URL: ' + url);\n                }\n                return fetch(url, { signal: connector?.pollingController?.signal })\n                    .then((response) => (response.json()))\n                    .then((json) => {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    this.initConverters(json, (key) => {\n                        const options = this.options;\n                        const tableOptions = dataTables?.find((dataTable) => dataTable.key === key);\n                        // Takes over the connector default options.\n                        const mergedTableOptions = {\n                            dataTableKey: key,\n                            firstRowAsNames: tableOptions?.firstRowAsNames ??\n                                options.firstRowAsNames,\n                            beforeParse: tableOptions?.beforeParse ??\n                                options.beforeParse\n                        };\n                        return new GoogleSheetsConverter(merge(this.options, mergedTableOptions));\n                    }, (converter, data) => {\n                        converter.parse({ json: data });\n                    });\n                    return connector.setModifierOptions(dataModifier, dataTables);\n                })\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        tables,\n                        url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        tables\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GoogleSheetsConnector.defaultOptions = {\n            googleAPIKey: '',\n            googleSpreadsheetKey: '',\n            enablePolling: false,\n            dataRefreshRate: 2,\n            firstRowAsNames: true\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options = {}) {\n                const url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/`);\n                const range = options.onlyColumnNames ?\n                    'A1:Z1' : buildQueryRange(options);\n                url.pathname += range;\n                const searchParams = url.searchParams;\n                searchParams.set('alt', 'json');\n                if (!options.onlyColumnNames) {\n                    searchParams.set('dateTimeRenderOption', 'FORMATTED_STRING');\n                    searchParams.set('majorDimension', 'COLUMNS');\n                    searchParams.set('valueRenderOption', 'UNFORMATTED_VALUE');\n                }\n                searchParams.set('prettyPrint', 'false');\n                searchParams.set('key', apiKey);\n                return url.href;\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options = {}) {\n                const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            let i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        class HTMLTableConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    this.tableElement = mergedOptions.tableElement;\n                    this.tableElementID = mergedOptions.tableElement.id;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            export(connector, options = this.options) {\n                const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                let tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    const subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (const name of columnNames) {\n                            let column = columns[name];\n                            if (!Array.isArray(column)) {\n                                // Convert to conventional array from typed array\n                                // if needed\n                                column = Array.from(column);\n                            }\n                            const subhead = (column.shift() || '').toString();\n                            columns[name] = column;\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                let caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            }\n            /**\n             * Get table cell markup from row data.\n             */\n            getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n                let val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            }\n            /**\n             * Get table header markup from row data.\n             */\n            getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n                const { useMultiLevelHeaders, useRowspanHeaders } = options;\n                let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Exporting.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            }\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            parse(options, eventDetail) {\n                const converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns,\n                        detail: eventDetail,\n                        headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                let rowIndex = 0, item, { startRow } = parseOptions;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    const items = rows[0].children, itemsLength = items.length;\n                    for (let i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        let columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                let cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                let i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns,\n                    detail: eventDetail,\n                    headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        HTMLTableConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            useRowspanHeaders: true,\n            useMultiLevelHeaders: true\n        };\n        DataConverter.registerType('HTMLTable', HTMLTableConverter);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein Hønsi\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { win } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        class HTMLTableConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new HTMLTableConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    tables: { table },\n                    tableElement: connector.tableElement\n                });\n                let tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    const error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        tables: { table }\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        tables: { table },\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HTMLTableConnector.defaultOptions = {\n            table: ''\n        };\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { error, isArray, merge, objectEach } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        class JSONConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                this.table = new DataTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this;\n                options = merge(converter.options, options);\n                const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n                let data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                        const item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(`${item.shift()}`);\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        let row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            const columnNames = converter.headers;\n                            if (columnNames && !(columnNames instanceof Array)) {\n                                const newRow = {};\n                                objectEach(columnNames, (arrayWithPath, name) => {\n                                    newRow[name] = arrayWithPath.reduce((acc, key) => acc[key], row);\n                                });\n                                row = newRow;\n                            }\n                            this.table.setRows([row], rowIndex);\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return this.table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        JSONConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            data: [],\n            orientation: 'rows'\n        };\n        DataConverter.registerType('JSON', JSONConverter);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge, defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        class JSONConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             *\n             * @param {Array<DataTableOptions>} [dataTables]\n             * Multiple connector data tables options.\n             */\n            constructor(options, dataTables) {\n                const mergedOptions = merge(JSONConnector.defaultOptions, options);\n                super(mergedOptions, dataTables);\n                this.options = defined(dataTables) ?\n                    merge(mergedOptions, { dataTables }) : mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, tables = connector.dataTables, { data, dataUrl, dataModifier, dataTables } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    data,\n                    detail: eventDetail,\n                    tables\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl, {\n                        signal: connector?.pollingController?.signal\n                    }).then((response) => response.json())['catch']((error) => {\n                        connector.emit({\n                            type: 'loadError',\n                            detail: eventDetail,\n                            error,\n                            tables\n                        });\n                        console.warn(`Unable to fetch data from ${dataUrl}.`); // eslint-disable-line no-console\n                    }) :\n                    data || [])\n                    .then((data) => {\n                    if (data) {\n                        this.initConverters(data, (key) => {\n                            const options = this.options;\n                            const tableOptions = dataTables?.find((dataTable) => dataTable.key === key);\n                            // Takes over the connector default options.\n                            const mergedTableOptions = {\n                                dataTableKey: key,\n                                columnNames: tableOptions?.columnNames ??\n                                    options.columnNames,\n                                firstRowAsNames: tableOptions?.firstRowAsNames ??\n                                    options.firstRowAsNames,\n                                orientation: tableOptions?.orientation ??\n                                    options.orientation,\n                                beforeParse: tableOptions?.beforeParse ??\n                                    options.beforeParse\n                            };\n                            return new JSONConverter(merge(this.options, mergedTableOptions));\n                        }, (converter, data) => {\n                            converter.parse({ data });\n                        });\n                    }\n                    return connector.setModifierOptions(dataModifier, dataTables)\n                        .then(() => data);\n                })\n                    .then((data) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data,\n                        detail: eventDetail,\n                        tables\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        tables\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        JSONConnector.defaultOptions = {\n            data: [],\n            enablePolling: false,\n            dataRefreshRate: 0,\n            firstRowAsNames: true,\n            orientation: 'rows'\n        };\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         */\n        class ChainModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            constructor(options, ...chain) {\n                super();\n                this.chain = chain;\n                this.options = merge(ChainModifier.defaultOptions, options);\n                const optionsChain = this.options.chain || [];\n                for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            add(modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            clear(eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            async modify(table, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                let modified = table;\n                for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    try {\n                        await modifiers[i].modify(modified, eventDetail);\n                    }\n                    catch (error) {\n                        this.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        throw error;\n                    }\n                    modified = modified.modified;\n                }\n                table.modified = modified;\n                return table;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            modifyTable(table, eventDetail) {\n                const chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table\n                });\n                const modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                let modified = table.modified;\n                for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table\n                });\n                return table;\n            }\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            remove(modifier, eventDetail) {\n                const modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default option for the ordered modifier chain.\n         */\n        ChainModifier.defaultOptions = {\n            type: 'Chain'\n        };\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        class InvertModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(InvertModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(`${i2}`, row);\n                    }\n                    else {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            }\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    const columnNamesColumn = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []), columns = {}, columnNames = [];\n                    for (let i = 0, iEnd = columnNamesColumn.length; i < iEnd; ++i) {\n                        columnNames.push('' + columnNamesColumn[i]);\n                    }\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    const columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[`${i}`] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the invert modifier.\n         */\n        InvertModifier.defaultOptions = {\n            type: 'Invert'\n        };\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         */\n        class RangeModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(RangeModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                let indexes = [];\n                const { additive, ranges, strict } = modifier.options;\n                if (ranges.length) {\n                    const modified = table.modified;\n                    let columns = table.getColumns(), rows = [];\n                    for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            modified.setOriginalRowIndexes(indexes, true);\n                            columns = modified.getColumns();\n                            rows = [];\n                            indexes = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (let j = 0, jEnd = rangeColumn.length, cell, row, originalRowIndex; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                if (additive) {\n                                    row = table.getRow(j);\n                                    originalRowIndex = table.getOriginalRowIndex(j);\n                                }\n                                else {\n                                    row = modified.getRow(j);\n                                    originalRowIndex = modified.getOriginalRowIndex(j);\n                                }\n                                if (row) {\n                                    rows.push(row);\n                                    indexes.push(originalRowIndex);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                    modified.setOriginalRowIndexes(indexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the range modifier.\n         */\n        RangeModifier.defaultOptions = {\n            type: 'Range',\n            ranges: []\n        };\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         */\n        class SortModifier extends DataModifier {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static ascending(a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            }\n            static descending(a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(SortModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            getRowReferences(table) {\n                const rows = table.getRows(), rowReferences = [];\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n                }\n                if (orderInColumn) {\n                    const column = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns({ [orderInColumn]: column });\n                }\n                else {\n                    const originalIndexes = [];\n                    const rows = [];\n                    let rowReference;\n                    for (let i = 0; i < rowCount; ++i) {\n                        rowReference = rowReferences[i];\n                        originalIndexes.push(modified.getOriginalRowIndex(rowReference.index));\n                        rows.push(rowReference.row);\n                    }\n                    modified.setRows(rows, 0);\n                    modified.setOriginalRowIndexes(originalIndexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options to group table rows.\n         */\n        SortModifier.defaultOptions = {\n            type: 'Sort',\n            direction: 'desc',\n            orderByColumn: 'y'\n        };\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'Dashboards/Components/ComponentRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ComponentRegistry;\n        (function (ComponentRegistry) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             *\n             * Record of component classes\n             * @todo\n             *\n             */\n            ComponentRegistry.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method used to register new component classes.\n             *\n             * @param {string} key\n             * Registry key of the component class.\n             *\n             * @param {ComponentType} DataConnectorClass\n             * Component class (aka class constructor) to register.\n             */\n            function registerComponent(key, ComponentClass) {\n                return (!!key &&\n                    !ComponentRegistry.types[key] &&\n                    !!(ComponentRegistry.types[key] = ComponentClass));\n            }\n            ComponentRegistry.registerComponent = registerComponent;\n        })(ComponentRegistry || (ComponentRegistry = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ComponentRegistry;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/CellHTML.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/GUIElement.js']], function (EditGlobals, Globals, GUIElement) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @internal\n         **/\n        class CellHTML extends GUIElement {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CellHTML class.\n             *\n             * @param {Cell.Options} options\n             * Options for the cell.\n             */\n            constructor(options) {\n                super();\n                /**\n                 * The type of a GUIElement instance.\n                 */\n                this.type = 'cell-html';\n                this.options = options;\n                this.id = options.id;\n                this.container = options.container;\n                this.mountedComponent = options.mountedComponent;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and mounted component.\n             */\n            destroy() {\n                const cell = this;\n                // Destroy mounted component.\n                cell.mountedComponent?.destroy();\n                super.destroy();\n            }\n            /**\n             * Highlight the cell.\n             */\n            setHighlight() {\n                const cell = this;\n                cell.container.classList.toggle(EditGlobals.classNames.cellEditHighlight);\n                cell.mountedComponent?.board.container.classList.toggle(EditGlobals.classNames.dashboardCellEditHighlightActive);\n            }\n            setActiveState() {\n                const cell = this;\n                // Apply class\n                if (cell.container) {\n                    cell.container.classList.add(Globals.classNames.cellActive);\n                }\n            }\n        }\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        (function (CellHTML) {\n            /**\n             * Checks if a valid cell HTML instance.\n             */\n            function isCellHTML(cellHTML) {\n                return cellHTML instanceof CellHTML;\n            }\n            CellHTML.isCellHTML = isCellHTML;\n        })(CellHTML || (CellHTML = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CellHTML;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/Bindings.js', [_modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Layout/CellHTML.js'], _modules['Dashboards/Globals.js'], _modules['Core/Utilities.js']], function (ComponentRegistry, CellHTML, Globals, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, fireEvent } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var Bindings;\n        (function (Bindings) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            function getGUIElement(idOrElement, parentElement) {\n                let guiElement;\n                if (typeof idOrElement === 'string' &&\n                    document.querySelectorAll('#' + idOrElement).length > 1) {\n                    // eslint-disable-next-line no-console\n                    console.warn(`Multiple cells have identical ID %c${idOrElement}%c, potentially leading to unexpected behavior. \\nEnsure that each cell has a unique ID on the page.`, 'font-weight: bold', '');\n                }\n                const container = parentElement ?\n                    parentElement.querySelector('#' + idOrElement) :\n                    document.getElementById(idOrElement);\n                if (container !== null) {\n                    fireEvent(container, 'bindedGUIElement', {}, function (e) {\n                        guiElement = e.guiElement;\n                    });\n                }\n                return guiElement;\n            }\n            async function addComponent(options, board, cell) {\n                const optionsStates = options.states;\n                const optionsEvents = options.events;\n                const renderTo = options.renderTo || options.cell;\n                if (!renderTo) {\n                    // eslint-disable-next-line no-console\n                    console.error('The%c renderTo%c option is required to render the component.', 'font-weight: bold', '');\n                    return;\n                }\n                if (board.mountedComponents.filter((el) => ((el.options.renderTo || el.options.cell) === renderTo)).length > 0) {\n                    // eslint-disable-next-line no-console\n                    console.error(`A component has already been declared in the cell %c${renderTo}%c use a different cell.`, 'font-weight: bold', '');\n                    return;\n                }\n                cell = cell || Bindings.getCell(renderTo, board.container);\n                const componentContainer = cell?.container || document.querySelector('#' + renderTo);\n                if (!componentContainer || !options.type) {\n                    // eslint-disable-next-line no-console\n                    console.error(`The component is unable to find the HTML cell element %c${renderTo}%c to render the content.`, 'font-weight: bold', '');\n                    return;\n                }\n                let ComponentClass = ComponentRegistry.types[options.type];\n                if (!ComponentClass) {\n                    // eslint-disable-next-line no-console\n                    console.error(`The component's type %c${options.type}%c does not exist.`, 'font-weight: bold', '');\n                    if (cell) {\n                        ComponentClass =\n                            ComponentRegistry.types['HTML'];\n                        options.title = {\n                            text: board.editMode?.lang.errorMessage ||\n                                'Something went wrong',\n                            className: Globals.classNamePrefix + 'component-title-error ' +\n                                Globals.classNamePrefix + 'component-title'\n                        };\n                    }\n                }\n                const component = new ComponentClass(cell, options, board);\n                const promise = component.load()['catch']((e) => {\n                    // eslint-disable-next-line no-console\n                    console.error(e);\n                    component.update({\n                        connector: {\n                            id: ''\n                        },\n                        title: {\n                            text: board.editMode?.lang.errorMessage ||\n                                'Something went wrong',\n                            className: Globals.classNamePrefix + 'component-title-error ' +\n                                Globals.classNamePrefix + 'component-title'\n                        }\n                    });\n                });\n                if (cell) {\n                    component.setCell(cell);\n                    cell.mountedComponent = component;\n                }\n                board.mountedComponents.push({\n                    options: options,\n                    component: component,\n                    cell: cell || new CellHTML({\n                        id: renderTo,\n                        container: componentContainer,\n                        mountedComponent: component\n                    })\n                });\n                if (cell &&\n                    optionsStates?.active?.enabled &&\n                    optionsStates?.active?.isActive) {\n                    cell.setActiveState();\n                    component.isActive = true;\n                }\n                fireEvent(component, 'mount');\n                // Events\n                addEvent(componentContainer, 'click', () => {\n                    // Call the component's click callback\n                    if (optionsEvents && optionsEvents.click) {\n                        optionsEvents.click.call(component);\n                    }\n                    // Default behavior\n                    if (cell &&\n                        component &&\n                        componentContainer &&\n                        optionsStates?.active?.enabled) {\n                        cell.setActiveState();\n                        component.isActive = true;\n                    }\n                });\n                // States\n                if (optionsStates?.hover?.enabled) {\n                    componentContainer.classList.add(Globals.classNames.cellHover);\n                }\n                fireEvent(component, 'afterLoad');\n                return promise;\n            }\n            Bindings.addComponent = addComponent;\n            function getCell(idOrElement, parentElement) {\n                const cell = getGUIElement(idOrElement, parentElement);\n                if (!(cell && cell.getType() === 'cell')) {\n                    return;\n                }\n                return cell;\n            }\n            Bindings.getCell = getCell;\n            function getRow(idOrElement, parentElement) {\n                const row = getGUIElement(idOrElement, parentElement);\n                if (!(row && row.getType() === 'row')) {\n                    return;\n                }\n                return row;\n            }\n            Bindings.getRow = getRow;\n            function getLayout(idOrElement, parentElement) {\n                const layout = getGUIElement(idOrElement, parentElement);\n                if (!(layout && layout.getType() === 'layout')) {\n                    return;\n                }\n                return layout;\n            }\n            Bindings.getLayout = getLayout;\n        })(Bindings || (Bindings = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Bindings;\n    });\n    _registerModule(_modules, 'Dashboards/Accessibility/DashboardsAccessibility.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class DashboardsAccessibility {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(board) {\n                this.board = board;\n                this.addTabIndexToCells();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            addTabIndexToCells() {\n                const components = this.board.mountedComponents;\n                let cell;\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    cell = components[i].cell;\n                    if (cell && cell.container) {\n                        cell.container.setAttribute('tabindex', -1);\n                    }\n                }\n            }\n        }\n        /// namespace DashboardsAccessibility { }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DashboardsAccessibility;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        class DataCursor {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(stateMap = {}) {\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            addListener(tableId, state, listener) {\n                const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                const listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            }\n            /**\n             * @private\n             */\n            buildEmittingTag(e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            }\n            /**\n             * This function emits a state cursor related to a table. It will provide\n             * lasting state cursors of the table to listeners.\n             *\n             * @example\n             * ```ts\n             * dataCursor.emit(myTable, {\n             *     type: 'position',\n             *     column: 'city',\n             *     row: 4,\n             *     state: 'hover',\n             * });\n             * ```\n             *\n             * @param {Data.DataTable} table\n             * The related table of the cursor.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * The state cursor to emit.\n             *\n             * @param {Event} [event]\n             * Optional event information from a related source.\n             *\n             * @param {boolean} [lasting]\n             * Whether this state cursor should be kept until it is cleared with\n             * {@link DataCursor#remitCursor}.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            emitCursor(table, cursor, event, lasting) {\n                const tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ?? {});\n                    const cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    const e = {\n                        cursor,\n                        cursors,\n                        table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        const index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            }\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            remitCursor(tableId, cursor) {\n                const cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    const index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            removeListener(tableId, state, listener) {\n                const listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataCursor class.\n         * @internal\n         */\n        DataCursor.version = '1.0.0';\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    const columnNeedle = JSON.stringify(needle.columns);\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                const needleColumns = needle.columns;\n                const rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                const columns = (cursor.columns || []);\n                const positions = [];\n                const state = cursor.state;\n                for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row,\n                            state\n                        });\n                        continue;\n                    }\n                    for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row,\n                            state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                const range = {\n                    type: 'range',\n                    firstRow: (cursor.row ??\n                        (defaultRange && defaultRange.firstRow) ??\n                        0),\n                    lastRow: (cursor.row ??\n                        (defaultRange && defaultRange.lastRow) ??\n                        Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        class DataPool {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = DataPoolDefaults) {\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                U.fireEvent(this, e.type, e);\n            }\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnectorType>}\n             * Returns the connector.\n             */\n            getConnector(connectorId) {\n                const connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector?.loaded) {\n                    return Promise.resolve(connector);\n                }\n                let waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    const connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(`Connector '${connectorId}' not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then((connector) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch']((error) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise((resolve, reject) => {\n                    waitingList.push([resolve, reject]);\n                });\n            }\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            getConnectorIds() {\n                const connectors = this.options.connectors, connectorIds = [];\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            }\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            getConnectorOptions(connectorId) {\n                const connectors = this.options.connectors;\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            }\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            getConnectorTable(connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then((connector) => connector.table);\n            }\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            isNewConnector(connectorId) {\n                return !this.connectors[connectorId];\n            }\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnectorType>}\n             * Returns the connector.\n             */\n            loadConnector(options) {\n                return new Promise((resolve, reject) => {\n                    this.emit({\n                        type: 'load',\n                        options\n                    });\n                    const ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(`Connector type not found. (${options.type})`);\n                    }\n                    const connector = this.connectors[options.id] = new ConnectorClass(options.options, options.dataTables);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then(({ converter, dataTables }) => {\n                        connector.dataTables = dataTables;\n                        connector.converter = converter;\n                        connector.loaded = true;\n                        this.emit({\n                            type: 'afterLoad',\n                            options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            }\n            /**\n             * Cancels all data connectors pending requests.\n             */\n            cancelPendingRequests() {\n                const { connectors } = this;\n                for (const connectorKey of Object.keys(connectors)) {\n                    connectors[connectorKey].stopPolling();\n                }\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return U.addEvent(this, type, callback);\n            }\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            setConnectorOptions(options) {\n                const connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options\n                });\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataPool class.\n         * @internal\n         */\n        DataPool.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Dashboards/Board.js', [_modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Dashboards/Accessibility/DashboardsAccessibility.js'], _modules['Data/DataCursor.js'], _modules['Data/DataPool.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Components/HTMLComponent/HTMLComponent.js'], _modules['Core/Utilities.js']], function (Bindings, ComponentRegistry, DashboardsAccessibility, DataCursor, DataPool, Globals, HTMLComponent, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *  - Pawel Lysy\n         *  - Karol Kolodziej\n         *\n         * */\n        const { merge, addEvent, error, objectEach, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that represents a dashboard.\n         *\n         * @example\n         * const dashboard = Dashboards.board('container', {\n         *      gui: {\n         *          layouts: [{\n         *              id: 'layout-1',\n         *              rows: [{\n         *                  cells: [{\n         *                      id: 'dashboard-col-0'\n         *                  }]\n         *              }]\n         *          }]\n         *      },\n         *      components: [{\n         *          cell: 'dashboard-col-0',\n         *          type: 'Highcharts',\n         *          chartOptions: {\n         *              series: [{\n         *                  data: [1, 2, 3, 4]\n         *              }]\n         *          }\n         *      }]\n         * });\n         */\n        class Board {\n            // Implementation:\n            static board(renderTo, options, async) {\n                return new Board(renderTo, options).init(async);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a dashboard with components like charts, tables, and HTML\n             * elements.\n             *\n             * @internal\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             *\n             * @param options\n             * The options for the dashboard.\n             */\n            constructor(renderTo, options) {\n                /**\n                 * All types of components available in the dashboard.\n                 * @internal\n                 */\n                this.componentTypes = ComponentRegistry.types;\n                this.options = merge(Board.defaultOptions, options);\n                this.dataPool = new DataPool(options.dataPool);\n                this.id = uniqueKey();\n                this.guiEnabled = !options.gui ?\n                    false : this.options?.gui?.enabled;\n                this.editModeEnabled = !options.editMode ?\n                    false : this.options?.editMode?.enabled;\n                this.layouts = [];\n                this.mountedComponents = [];\n                this.initContainer(renderTo);\n                this.initEditMode();\n                // Add table cursors support.\n                this.dataCursor = new DataCursor();\n                this.index = Globals.boards.length;\n                Globals.boards.push(this);\n                // A11y module\n                this.a11y = new DashboardsAccessibility(this);\n            }\n            // Implementation:\n            init(async) {\n                const options = this.options;\n                const componentPromises = (options.components) ?\n                    this.setComponents(options.components) : [];\n                // Init events.\n                this.initEvents();\n                if (async) {\n                    return Promise.all(componentPromises).then(() => {\n                        options.events?.mounted?.call(this);\n                        return this;\n                    });\n                }\n                options.events?.mounted?.call(this);\n                return this;\n            }\n            /**\n             * Initializes the events.\n             * @internal\n             */\n            initEvents() {\n                const board = this, runReflow = () => {\n                    board.reflow();\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(runReflow);\n                    this.resizeObserver.observe(board.container);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', runReflow);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * Initialize the container for the dashboard.\n             * @internal\n             *\n             * @param renderTo\n             * The DOM element to render to, or its id.\n             */\n            initContainer(renderTo) {\n                const board = this;\n                if (typeof renderTo === 'string') {\n                    renderTo = window.document.getElementById(renderTo);\n                }\n                // Display an error if the renderTo doesn't exist.\n                if (!renderTo) {\n                    error(13, true);\n                }\n                board.container = renderTo;\n            }\n            /**\n             * Inits creating a layouts and setup the EditMode tools.\n             * @internal\n             *\n             */\n            initEditMode() {\n                if (Dashboards.EditMode) {\n                    this.editMode = new Dashboards.EditMode(this, this.options.editMode);\n                }\n                else if (this.editModeEnabled) {\n                    throw new Error('Missing layout.js module');\n                }\n            }\n            /**\n             * Set the components from options.\n             * @internal\n             *\n             * @param components\n             * An array of component options.\n             *\n             */\n            setComponents(components) {\n                const promises = [];\n                const board = this;\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    promises.push(Bindings.addComponent(components[i], board));\n                }\n                return promises;\n            }\n            /**\n             * Destroy the whole dashboard, its layouts and elements.\n             */\n            destroy() {\n                const board = this;\n                // Cancel all data connectors pending requests.\n                this.dataPool.cancelPendingRequests();\n                // Destroy layouts.\n                if (this.guiEnabled) {\n                    for (let i = 0, iEnd = board.layouts?.length; i < iEnd; ++i) {\n                        board.layouts[i].destroy();\n                    }\n                }\n                else {\n                    for (const mountedComponent of board.mountedComponents) {\n                        mountedComponent.component.destroy();\n                    }\n                }\n                // Remove resizeObserver from the board\n                this.resizeObserver?.unobserve(board.container);\n                // Destroy container.\n                if (this.guiEnabled) {\n                    board.container?.remove();\n                }\n                // @ToDo Destroy bindings.\n                // Delete all properties.\n                objectEach(board, function (val, key) {\n                    delete board[key];\n                });\n                Globals.boards[this.index] = void 0;\n                return;\n            }\n            /**\n             * Reflow the dashboard. Hide the toolbars and context pointer. Reflow the\n             * layouts and its cells.\n             */\n            reflow() {\n                const board = this;\n                if (board.editMode) {\n                    const editModeTools = board.editMode.tools;\n                    board.editMode.hideToolbars(['cell', 'row']);\n                    board.editMode.hideContextPointer();\n                    // Update expanded context menu container\n                    if (editModeTools.contextMenu) {\n                        editModeTools.contextMenu\n                            .updatePosition(editModeTools.contextButtonElement);\n                    }\n                }\n            }\n            /**\n             * Convert the current state of board's options into JSON. The function does\n             * not support converting functions or events into JSON object.\n             *\n             * @returns\n             * Dashboards options.\n             */\n            getOptions() {\n                const board = this, options = {\n                    ...this.options,\n                    components: []\n                };\n                for (let i = 0, iEnd = board.mountedComponents.length; i < iEnd; ++i) {\n                    if (board.mountedComponents[i].cell &&\n                        board.mountedComponents[i].cell.mountedComponent) {\n                        options.components?.push(board.mountedComponents[i].component.getOptions());\n                    }\n                }\n                if (this.guiEnabled) {\n                    options.gui = {\n                        layouts: []\n                    };\n                    for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                        options.gui.layouts?.push(board.layouts[i].getOptions());\n                    }\n                }\n                else {\n                    delete options.gui;\n                }\n                return options;\n            }\n            /**\n             * Get a Dashboards component by its identifier.\n             *\n             * @param id\n             * The identifier of the requested component.\n             *\n             * @returns\n             * The component with the given identifier.\n             */\n            getComponentById(id) {\n                return this.mountedComponents.find((c) => c.component.id === id)?.component;\n            }\n            /**\n             * Get a Dashboards component by its cell identifier.\n             *\n             * @param id\n             * The identifier of the cell that contains the requested component.\n             *\n             * @returns\n             * The component with the given cell identifier.\n             */\n            getComponentByCellId(id) {\n                return this.mountedComponents.find((c) => c.cell.id === id)?.component;\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (Board) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Global dashboard settings.\n             */\n            Board.defaultOptions = {\n                gui: {\n                    enabled: true,\n                    layoutOptions: {\n                        rowClassName: void 0,\n                        cellClassName: void 0\n                    },\n                    layouts: []\n                },\n                components: []\n            };\n        })(Board || (Board = {}));\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        ComponentRegistry.registerComponent('HTML', HTMLComponent);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Board;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridExtremesSync.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: void 0,\n            handler: function () {\n                if (this.type !== 'DataGrid' && // To be removed in v4\n                    this.type !== 'Grid') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { board } = component;\n                const handleChangeExtremes = (e) => {\n                    const cursor = e.cursor;\n                    if (cursor.type === 'position' &&\n                        component.dataGrid &&\n                        typeof cursor?.row === 'number') {\n                        const { row } = cursor;\n                        const { viewport } = component.dataGrid;\n                        const rowIndex = viewport?.dataTable?.getLocalRowIndex(row);\n                        if (rowIndex !== void 0) {\n                            component.dataGrid.viewport?.scrollToRow(rowIndex);\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'xAxis.extremes.min' + groupKey, handleChangeExtremes);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    const { dataCursor: cursor } = board;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'xAxis.extremes.min' + groupKey, handleChangeExtremes);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridHighlightSync.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {\n            autoScroll: false\n        };\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'DataGrid' && // To be removed in v4\n                    this.type !== 'Grid') {\n                    return;\n                }\n                const component = this;\n                const { grid, board } = component;\n                const highlightOptions = this.sync.syncConfig.highlight;\n                const groupKey = highlightOptions.group ?\n                    ':' + highlightOptions.group : '';\n                if (!board || !grid || !highlightOptions?.enabled) {\n                    return;\n                }\n                const { dataCursor: cursor } = board;\n                const table = this.getFirstConnector()?.getTable(component.dataTableKey);\n                const onCellHover = (e) => {\n                    if (table) {\n                        const cell = e.target;\n                        cursor.emitCursor(table, {\n                            type: 'position',\n                            row: cell.row.id,\n                            column: cell.column.id,\n                            state: 'point.mouseOver' + groupKey,\n                            sourceId: this.id\n                        });\n                    }\n                };\n                const onCellMouseOut = (e) => {\n                    if (table) {\n                        const cell = e.target;\n                        cursor.emitCursor(table, {\n                            type: 'position',\n                            row: cell.row.id,\n                            column: cell.column.id,\n                            state: 'point.mouseOut' + groupKey,\n                            sourceId: this.id\n                        });\n                    }\n                };\n                addEvent(grid, 'cellMouseOver', onCellHover);\n                addEvent(grid, 'cellMouseOut', onCellMouseOut);\n                // Return a function that calls the callbacks\n                return function () {\n                    removeEvent(grid.container, 'cellMouseOver', onCellHover);\n                    removeEvent(grid.container, 'cellMouseOut', onCellMouseOut);\n                };\n            },\n            handler: function () {\n                if (this.type !== 'DataGrid' && // To be removed in v4\n                    this.type !== 'Grid') {\n                    return;\n                }\n                const component = this;\n                const { board } = component;\n                const highlightOptions = component.sync.syncConfig.highlight;\n                const groupKey = highlightOptions.group ?\n                    ':' + highlightOptions.group : '';\n                if (!highlightOptions?.enabled) {\n                    return;\n                }\n                const table = component.getFirstConnector()?.getTable(component.dataTableKey);\n                const handleCursor = (e) => {\n                    const cursor = e.cursor;\n                    if (cursor.sourceId === component.id ||\n                        cursor.type !== 'position') {\n                        return;\n                    }\n                    const { row, column } = cursor;\n                    const { grid } = component;\n                    const viewport = grid?.viewport;\n                    if (row === void 0 || !viewport) {\n                        return;\n                    }\n                    const rowIndex = viewport.dataTable.getLocalRowIndex(row);\n                    if (rowIndex === void 0) {\n                        return;\n                    }\n                    if (highlightOptions.autoScroll) {\n                        viewport.scrollToRow(rowIndex);\n                    }\n                    grid.syncRow(rowIndex);\n                    grid.syncColumn(column);\n                };\n                const handleCursorOut = (e) => {\n                    const { grid } = component;\n                    if (grid && e.cursor.sourceId !== component.id) {\n                        grid.syncColumn();\n                        grid.syncRow();\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                    cursor.addListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                };\n                const unregisterCursorListeners = () => {\n                    if (!table) {\n                        return;\n                    }\n                    const cursor = board.dataCursor;\n                    cursor.removeListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                    cursor.removeListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridVisibilitySync.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: void 0,\n            handler: function () {\n                if (this.type !== 'DataGrid' && // To be removed in v4\n                    this.type !== 'Grid') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.visibility;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { board } = component;\n                const handleVisibilityChange = (e) => {\n                    const cursor = e.cursor, dataGrid = component.dataGrid;\n                    if (!(dataGrid && cursor.type === 'position' && cursor.column)) {\n                        return;\n                    }\n                    void dataGrid.updateColumn(cursor.column, {\n                        enabled: cursor.state !== 'series.hide' + groupKey\n                    });\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'series.show' + groupKey, handleVisibilityChange);\n                    cursor.addListener(table.id, 'series.hide' + groupKey, handleVisibilityChange);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    const { dataCursor: cursor } = board;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'series.show' + groupKey, handleVisibilityChange);\n                    cursor.removeListener(table.id, 'series.hide' + groupKey, handleVisibilityChange);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridSyncs.js', [_modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridExtremesSync.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridHighlightSync.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridVisibilitySync.js']], function (DataGridExtremesSync, DataGridHighlightSync, DataGridVisibilitySync) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Namespace\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                extremes: DataGridExtremesSync.syncPair,\n                highlight: DataGridHighlightSync.syncPair,\n                visibility: DataGridVisibilitySync.syncPair\n            },\n            defaultSyncOptions: {\n                extremes: DataGridExtremesSync.defaultOptions,\n                highlight: DataGridHighlightSync.defaultOptions,\n                visibility: DataGridVisibilitySync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridComponentDefaults.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { uniqueKey } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const DataGridComponentDefaults = {\n            gridClassName: 'dataGrid-container',\n            gridID: 'dataGrid-' + uniqueKey(),\n            gridOptions: {},\n            editableOptions: [\n                {\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                }, {\n                    name: 'title',\n                    propertyPath: ['title'],\n                    type: 'input'\n                }, {\n                    name: 'caption',\n                    propertyPath: ['caption'],\n                    type: 'input'\n                }, {\n                    name: 'Grid options',\n                    type: 'nested',\n                    nestedOptions: [{\n                            name: 'General',\n                            options: [\n                                {\n                                    name: 'Caption/title',\n                                    propertyPath: ['gridOptions', 'caption', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'Columns resizing mode',\n                                    propertyPath: [\n                                        'gridOptions',\n                                        'rendering',\n                                        'columns',\n                                        'resizing',\n                                        'mode'\n                                    ],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: ''\n                                        }, {\n                                            name: 'full'\n                                        }, {\n                                            name: 'fixed'\n                                        }, {\n                                            name: 'mixed'\n                                        }]\n                                }, {\n                                    name: 'Editable Grid',\n                                    propertyPath: [\n                                        'gridOptions',\n                                        'columnDefaults',\n                                        'cells',\n                                        'editMode',\n                                        'enabled'\n                                    ],\n                                    type: 'toggle'\n                                }, {\n                                    name: 'Resizable columns',\n                                    propertyPath: [\n                                        'gridOptions',\n                                        'rendering',\n                                        'columns',\n                                        'resizing',\n                                        'enabled'\n                                    ],\n                                    type: 'toggle'\n                                }, {\n                                    name: 'Sortable columns',\n                                    propertyPath: [\n                                        'gridOptions',\n                                        'columnDefaults',\n                                        'sorting',\n                                        'sortable'\n                                    ],\n                                    type: 'toggle'\n                                }, {\n                                    name: 'Cell text truncation',\n                                    propertyPath: [\n                                        'gridOptions',\n                                        'rendering',\n                                        'rows',\n                                        'strictHeights'\n                                    ],\n                                    type: 'toggle'\n                                }\n                            ]\n                        }]\n                }, {\n                    name: 'Grid class name',\n                    propertyPath: ['gridClassName'],\n                    type: 'input'\n                }, {\n                    name: 'Grid ID',\n                    propertyPath: ['gridID'],\n                    type: 'input'\n                }\n            ],\n            onUpdate: (e, connector) => {\n                const inputElement = e.target;\n                if (inputElement) {\n                    const parentRow = inputElement\n                        .closest('.highcharts-datagrid-row');\n                    const cell = inputElement.closest('.highcharts-datagrid-cell');\n                    if (parentRow &&\n                        parentRow instanceof HTMLElement &&\n                        cell &&\n                        cell instanceof HTMLElement) {\n                        const dataTableRowIndex = parentRow.dataset.rowIndex;\n                        const { columnName } = cell.dataset;\n                        if (dataTableRowIndex !== void 0 &&\n                            columnName !== void 0) {\n                            const table = connector.table;\n                            if (table) {\n                                const converter = new DataConverter();\n                                let valueToSet = converter\n                                    .asGuessedType(inputElement.value);\n                                if (valueToSet instanceof Date) {\n                                    valueToSet = valueToSet.toString();\n                                }\n                                table.setCell(columnName, Number(dataTableRowIndex), valueToSet);\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/DataGridComponent/DataGridComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/DataGridComponent/DataGridSyncs/DataGridSyncs.js'], _modules['Dashboards/Components/DataGridComponent/DataGridComponentDefaults.js'], _modules['Core/Utilities.js'], _modules['Dashboards/Utilities.js']], function (Component, DataGridSyncs, GridComponentDefaults, U, DU) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge, diffObjects, getStyle } = U;\n        const { deepClone } = DU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Grid Component for Highcharts Dashboards.\n         * @private\n         */\n        class DataGridComponent extends Component {\n            /**\n             * The namespace of the Grid Component.\n             * @deprecated\n             * DataGrid will be removed in behalf of Grid in the next major version.\n             */\n            static get DataGridNamespace() {\n                return DataGridComponent.GridNamespace;\n            }\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            /**\n             * The Grid that is rendered in the Grid Component.\n             * @deprecated\n             * DataGrid will be removed in behalf of Grid in the next major version.\n             */\n            get dataGrid() {\n                return this.grid;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options, board) {\n                options = merge(DataGridComponent.defaultOptions, options);\n                super(cell, options, board);\n                this.options = options;\n                this.type = 'Grid';\n                this.setOptions();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            async update(options) {\n                await super.update(options);\n                this.setOptions();\n                if (this.grid) {\n                    this.grid.update(merge({}, options.gridOptions, options.dataGridOptions), false);\n                    if (this.grid?.viewport?.dataTable?.id !==\n                        this.getFirstConnector()?.table?.id) {\n                        this.grid.update({\n                            dataTable: this.getFirstConnector()?.table?.modified\n                        }, false);\n                    }\n                    this.grid.renderViewport();\n                }\n                this.emit({ type: 'afterUpdate' });\n            }\n            render() {\n                super.render();\n                if (!this.grid) {\n                    this.grid = this.constructGrid();\n                }\n                else {\n                    this.grid.renderViewport();\n                }\n                this.grid.initialContainerHeight =\n                    getStyle(this.parentElement, 'height', true) || 0;\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            resize(width, height) {\n                if (height) {\n                    this.contentElement.style.minHeight = '0';\n                }\n                else if (height === null) {\n                    this.contentElement.style.removeProperty('min-height');\n                }\n                this.resizeDynamicContent(width, height);\n                this.grid?.viewport?.reflow();\n            }\n            onTableChanged() {\n                this.grid?.update({\n                    dataTable: this.getFirstConnector()?.table?.modified\n                });\n            }\n            getEditableOptions() {\n                const componentOptions = this.options;\n                const gridOptions = this.grid?.options;\n                return deepClone(merge({\n                    gridOptions: gridOptions\n                }, componentOptions), ['editableOptions', 'dataTable']);\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'Grid'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Get the Grid Component's options.\n             *\n             * @returns\n             * Grid Component's options.\n             *\n             * @internal\n             */\n            getOptions() {\n                // Remove the table from the options copy if the connector is set.\n                const optionsCopy = merge(this.options);\n                if (optionsCopy.connector?.id) {\n                    delete optionsCopy.gridOptions?.dataTable;\n                }\n                else if (optionsCopy.gridOptions?.dataTable?.id) {\n                    optionsCopy.gridOptions.dataTable = {\n                        columns: optionsCopy.gridOptions.dataTable.columns\n                    };\n                }\n                return {\n                    ...diffObjects(optionsCopy, DataGridComponent.defaultOptions),\n                    type: 'Grid'\n                };\n            }\n            /**\n             * Destroys the data grid component.\n             */\n            destroy() {\n                this.sync.stop();\n                this.grid?.destroy();\n                super.destroy();\n            }\n            /**\n             * Sets the options for the data grid component content container.\n             */\n            setOptions() {\n                const options = this.options, gridClassName = options.gridClassName || options.dataGridClassName, gridID = options.gridID || options.dataGridID;\n                if (gridClassName) {\n                    this.contentElement.classList.value =\n                        GridComponentDefaults.className + ' ' +\n                            gridClassName;\n                }\n                if (gridID) {\n                    this.contentElement.id = gridID;\n                }\n            }\n            /**\n             * Function to create the Grid.\n             *\n             * @returns The Grid.\n             */\n            constructGrid() {\n                const DGN = DataGridComponent.GridNamespace;\n                if (!DGN) {\n                    throw new Error('Grid not connected.');\n                }\n                const dataTable = this.getFirstConnector()?.getTable(this.dataTableKey), options = this.options, gridOptions = merge({}, options.gridOptions, options.dataGridOptions);\n                if (dataTable) {\n                    gridOptions.dataTable = dataTable.modified;\n                }\n                const dataGridInstance = new DGN.Grid(this.contentElement, gridOptions);\n                this.options.gridOptions = dataGridInstance.options;\n                return dataGridInstance;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Predefined sync config for the Grid Component.\n         */\n        DataGridComponent.predefinedSyncConfig = DataGridSyncs;\n        /**\n         * The default options for the Grid Component.\n         */\n        DataGridComponent.defaultOptions = merge(Component.defaultOptions, GridComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/DataGridPlugin.js', [_modules['Dashboards/Components/DataGridComponent/DataGridComponent.js']], function (GridComponent) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects DataGrid with the Dashboard plugin.\n         *\n         * @param DataGridNS\n         * DataGrid core to connect.\n         *\n         * @deprecated\n         * DataGrid will be removed in behalf of Grid in the next major version.\n         */\n        function connectDataGrid(DataGridNS) {\n            connectGrid(DataGridNS);\n        }\n        /**\n         * Connects DataGrid with the Dashboard plugin.\n         *\n         * @param GridNS\n         * Grid core to connect.\n         */\n        function connectGrid(GridNS) {\n            GridComponent.GridNamespace = GridNS;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('DataGrid', GridComponent);\n            ComponentRegistry.registerComponent('Grid', GridComponent);\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e Plugin context provided by the Dashboard.\n         */\n        function onUnregister(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        e) { }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGridCustom = {\n            connectDataGrid,\n            connectGrid\n        };\n        const DataGridPlugin = {\n            custom: DataGridCustom,\n            name: 'DataGrid.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return DataGridPlugin;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsExtremesSync.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, isString } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const cleanupCallbacks = [];\n                const { chart, board } = component;\n                const connector = component.connectorHandlers?.[0]?.connector;\n                const table = connector && connector.table;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { dataCursor: cursor } = board;\n                if (table && chart) {\n                    const extremesEventHandler = (e) => {\n                        const reset = !!e.resetSelection;\n                        if ((!e.trigger || (e.trigger && e.trigger !== 'dashboards-sync')) && !reset) {\n                            // TODO: investigate this type?\n                            const axis = e.target;\n                            const seriesFromConnectorArray = Object.keys(component.seriesFromConnector);\n                            // Prefer a series that's in a related table,\n                            // but allow for other data\n                            const series = seriesFromConnectorArray.length > 0 ?\n                                chart.get(seriesFromConnectorArray[0]) :\n                                axis.series[0];\n                            if (series) {\n                                // Get the indexes of the first and last drawn points\n                                const visiblePoints = series.points.filter((point) => point.isInside || false);\n                                const minCursorData = {\n                                    type: 'position',\n                                    state: `${axis.coll}.extremes.min${groupKey}`\n                                };\n                                const maxCursorData = {\n                                    type: 'position',\n                                    state: `${axis.coll}.extremes.max${groupKey}`\n                                };\n                                if (seriesFromConnectorArray.length > 0 &&\n                                    axis.coll === 'xAxis' &&\n                                    visiblePoints.length) {\n                                    let columnName;\n                                    const columnAssignment = (component.connectorHandlers[0]\n                                        ?.options).columnAssignment;\n                                    if (columnAssignment) {\n                                        const assignment = columnAssignment.find((assignment) => (assignment.seriesId ===\n                                            series.options.id));\n                                        if (assignment) {\n                                            const data = assignment.data;\n                                            if (isString(data)) {\n                                                columnName = data;\n                                            }\n                                            else if (Array.isArray(data)) {\n                                                columnName = data[data.length - 1];\n                                            }\n                                            else {\n                                                columnName = data.y;\n                                            }\n                                        }\n                                    }\n                                    if (!columnName) {\n                                        columnName = axis.dateTime && (table.hasColumns(['x']) ? 'x' :\n                                            series.options.id ?? series.name);\n                                    }\n                                    minCursorData.row = visiblePoints[0].index;\n                                    minCursorData.column = columnName;\n                                    maxCursorData.row =\n                                        visiblePoints[visiblePoints.length - 1].index;\n                                    maxCursorData.column = columnName;\n                                }\n                                // Emit as lasting cursors\n                                cursor.emitCursor(table, minCursorData, e, true).emitCursor(table, maxCursorData, e, true);\n                            }\n                        }\n                    };\n                    const addExtremesEvent = () => chart.axes.map((axis) => addEvent(axis, 'afterSetExtremes', extremesEventHandler));\n                    let addExtremesEventCallbacks = addExtremesEvent();\n                    const resetExtremesEvent = () => {\n                        addExtremesEventCallbacks.forEach((callback) => {\n                            callback();\n                        });\n                        addExtremesEventCallbacks = [];\n                    };\n                    const handleChartResetSelection = (e) => {\n                        if (e.resetSelection) {\n                            resetExtremesEvent();\n                            cursor.emitCursor(table, {\n                                type: 'position',\n                                state: 'chart.zoomOut' + groupKey\n                            }, e);\n                            addExtremesEventCallbacks.push(...addExtremesEvent());\n                        }\n                    };\n                    cleanupCallbacks.push(addEvent(chart, 'selection', handleChartResetSelection));\n                    cleanupCallbacks.push(() => {\n                        cursor.remitCursor(table.id, {\n                            type: 'position',\n                            state: 'xAxis.extremes.min' + groupKey\n                        });\n                        cursor.remitCursor(table.id, {\n                            type: 'position',\n                            state: 'xAxis.extremes.max' + groupKey\n                        });\n                        resetExtremesEvent();\n                    });\n                }\n                // Return cleanup\n                return function () {\n                    // Call back the cleanup callbacks\n                    cleanupCallbacks.forEach((callback) => {\n                        callback();\n                    });\n                };\n            },\n            handler: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ?\n                    ':' + syncOptions.group : '';\n                const { chart, board } = component;\n                if (chart && board && chart.zooming?.type) {\n                    const dimensions = chart.zooming.type.split('')\n                        .map((c) => c + 'Axis');\n                    const unregisterCallbacks = [];\n                    dimensions.forEach((dimension) => {\n                        const handleUpdateExtremes = (e) => {\n                            const { cursor, event } = e;\n                            if (cursor.type === 'position') {\n                                const eventTarget = event?.target;\n                                if (eventTarget && chart) {\n                                    const axes = chart[dimension];\n                                    let didZoom = false;\n                                    axes.forEach((axis) => {\n                                        if (eventTarget.coll === axis.coll &&\n                                            eventTarget !== axis &&\n                                            eventTarget.min !== null &&\n                                            eventTarget.max !== null && (axis.max !== eventTarget.max ||\n                                            axis.min !== eventTarget.min)) {\n                                            axis.setExtremes(eventTarget.min, eventTarget.max, false, void 0, {\n                                                trigger: 'dashboards-sync'\n                                            });\n                                            didZoom = true;\n                                        }\n                                    });\n                                    if (didZoom && !chart.resetZoomButton) {\n                                        chart.showResetZoom();\n                                    }\n                                    chart.redraw();\n                                }\n                            }\n                        };\n                        const addCursorListeners = () => {\n                            const { dataCursor: cursor } = board;\n                            const connector = component.connectorHandlers?.[0]?.connector;\n                            if (connector) {\n                                const { table } = connector;\n                                cursor.addListener(table.id, `${dimension}.extremes.min${groupKey}`, handleUpdateExtremes);\n                                cursor.addListener(table.id, `${dimension}.extremes.max${groupKey}`, handleUpdateExtremes);\n                                const handleChartZoomOut = () => {\n                                    chart.zoomOut();\n                                    setTimeout(() => {\n                                        // Workaround for zoom button not being removed\n                                        const resetZoomButtons = component.element\n                                            .querySelectorAll('.highcharts-reset-zoom');\n                                        resetZoomButtons.forEach((button) => {\n                                            button.remove();\n                                        });\n                                    });\n                                };\n                                cursor.addListener(table.id, 'chart.zoomOut', handleChartZoomOut);\n                                unregisterCallbacks.push(() => {\n                                    cursor.removeListener(table.id, `${dimension}.extremes.min${groupKey}`, handleUpdateExtremes);\n                                    cursor.removeListener(table.id, `${dimension}.extremes.max${groupKey}`, handleUpdateExtremes);\n                                    cursor.removeListener(table.id, 'chart.zoomOut' + groupKey, handleChartZoomOut);\n                                });\n                            }\n                        };\n                        if (board) {\n                            addCursorListeners();\n                        }\n                    });\n                    return function () {\n                        unregisterCallbacks.forEach((callback) => {\n                            callback();\n                        });\n                    };\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsHighlightSync.js', [_modules['Dashboards/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { error } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {\n            affectedSeriesId: null,\n            highlightPoint: true,\n            showTooltip: true,\n            showCrosshair: true\n        };\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const { chart, board } = component;\n                const highlightOptions = this.sync.syncConfig.highlight;\n                const groupKey = highlightOptions.group ?\n                    ':' + highlightOptions.group : '';\n                if (!highlightOptions.enabled || !chart) {\n                    return;\n                }\n                const { dataCursor: cursor } = board;\n                for (let i = 0, iEnd = chart.series?.length ?? 0; i < iEnd; ++i) {\n                    const series = chart.series[i];\n                    const seriesId = series.options.id ?? '';\n                    const connectorHandler = component.seriesFromConnector[seriesId];\n                    const table = connectorHandler?.connector?.table;\n                    let columnName;\n                    if (!table) {\n                        continue;\n                    }\n                    const presTable = table?.modified;\n                    const colAssignment = connectorHandler.columnAssignment?.find((s) => s.seriesId === seriesId);\n                    // TODO: Better way to recognize the column name.\n                    if (colAssignment) {\n                        const { data } = colAssignment;\n                        if (typeof data === 'string') {\n                            columnName = data;\n                        }\n                        else if (Array.isArray(data)) {\n                            columnName = data[1];\n                        }\n                        else {\n                            columnName = data.y ?? data.value;\n                        }\n                    }\n                    if (!columnName) {\n                        columnName = series.name;\n                    }\n                    series.update({\n                        point: {\n                            events: {\n                                // Emit table cursor\n                                mouseOver: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        row: presTable.getOriginalRowIndex(this.index),\n                                        column: columnName,\n                                        state: 'point.mouseOver' + groupKey,\n                                        sourceId: component.id\n                                    });\n                                },\n                                mouseOut: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        row: presTable.getOriginalRowIndex(this.index),\n                                        column: columnName,\n                                        state: 'point.mouseOut' + groupKey,\n                                        sourceId: component.id\n                                    });\n                                }\n                            }\n                        }\n                    }, false);\n                }\n                chart.redraw();\n                // Return function that handles cleanup\n                return function () {\n                    if (chart && chart.series) {\n                        chart.series.forEach((series) => {\n                            series.update({\n                                point: {\n                                    events: {\n                                        mouseOver: void 0,\n                                        mouseOut: void 0\n                                    }\n                                }\n                            }, false);\n                        });\n                        chart.redraw();\n                    }\n                };\n            },\n            handler: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const groupKey = this.sync.syncConfig.highlight.group ?\n                    ':' + this.sync.syncConfig.highlight.group : '';\n                const { chart, board } = component;\n                const getHoveredPoint = (e) => {\n                    const { table, cursor } = e;\n                    const highlightOptions = this.sync\n                        .syncConfig.highlight;\n                    if (chart && chart.series?.length && cursor.type === 'position') {\n                        let series;\n                        const seriesId = highlightOptions.affectedSeriesId;\n                        if (highlightOptions.affectedSeriesId) {\n                            const foundSeries = chart.get(highlightOptions.affectedSeriesId);\n                            if (foundSeries?.points) {\n                                series = foundSeries;\n                            }\n                            else {\n                                error('No series with ID \\'' + seriesId + '\\' found in ' +\n                                    'the chart. Affected series will be selected ' +\n                                    'according to the column assignment.');\n                            }\n                        }\n                        if (!series) {\n                            const seriesIds = Object.keys(component.seriesFromConnector);\n                            for (let i = 0, iEnd = seriesIds.length; i < iEnd; ++i) {\n                                const seriesId = seriesIds[i];\n                                const connectorHandler = component.seriesFromConnector[seriesId];\n                                if (connectorHandler?.connector?.table !== table) {\n                                    continue;\n                                }\n                                const colAssignment = connectorHandler.columnAssignment;\n                                series = chart.get(seriesId);\n                                if (!colAssignment) {\n                                    break;\n                                }\n                                const { data } = colAssignment.find((s) => s.seriesId === seriesId) ?? {};\n                                if (!data || !cursor.column) {\n                                    break;\n                                }\n                                if (typeof data === 'string') {\n                                    if (data === cursor.column) {\n                                        break;\n                                    }\n                                }\n                                else if (Array.isArray(data)) {\n                                    if (data.includes(cursor.column)) {\n                                        break;\n                                    }\n                                }\n                                else {\n                                    if (Object.keys(data)\n                                        .map((key) => data[key])\n                                        .includes(cursor.column)) {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        const row = cursor.row;\n                        if (series?.visible && row !== void 0) {\n                            const rowIndex = table.modified.getLocalRowIndex(row);\n                            if (rowIndex === void 0) {\n                                return;\n                            }\n                            const point = series.data[rowIndex];\n                            if (point?.visible) {\n                                return point;\n                            }\n                        }\n                    }\n                };\n                const handleCursor = (e) => {\n                    const highlightOptions = this.sync\n                        .syncConfig.highlight;\n                    if (!highlightOptions.enabled ||\n                        e.cursor.sourceId === component.id) {\n                        return;\n                    }\n                    const point = getHoveredPoint(e);\n                    if (!point || !chart ||\n                        // Non-cartesian points do not use 'isInside'\n                        (!point.isInside && point.series.isCartesian) ||\n                        // Abort if the affected chart is the same as the one\n                        // that is currently affected manually.\n                        point === chart.hoverPoint) {\n                        return;\n                    }\n                    const tooltip = chart.tooltip;\n                    if (tooltip && highlightOptions.showTooltip) {\n                        const useSharedTooltip = tooltip.shared;\n                        const hoverPoint = chart.hoverPoint;\n                        const hoverSeries = hoverPoint?.series ||\n                            chart.hoverSeries;\n                        const points = chart.pointer?.getHoverData(point, hoverSeries, chart.series, true, true);\n                        if (chart.tooltip && points?.hoverPoints.length) {\n                            tooltip.refresh(useSharedTooltip ? points.hoverPoints : point);\n                        }\n                    }\n                    if (highlightOptions.highlightPoint && (\n                    // If the tooltip is shared, the hover state is\n                    // already set on the point.\n                    (!tooltip?.shared && highlightOptions.showTooltip) ||\n                        !highlightOptions.showTooltip)) {\n                        point.setState('hover');\n                    }\n                    if (highlightOptions.showCrosshair) {\n                        point.series.xAxis?.drawCrosshair(void 0, point);\n                        point.series.yAxis?.drawCrosshair(void 0, point);\n                    }\n                };\n                const handleCursorOut = (e) => {\n                    const highlightOptions = this.sync\n                        .syncConfig.highlight;\n                    if (!chart || !chart.series.length ||\n                        !highlightOptions.enabled ||\n                        e.cursor.sourceId === component.id) {\n                        return;\n                    }\n                    const point = getHoveredPoint(e);\n                    // Abort if the affected chart is the same as the one\n                    // that is currently affected manually.\n                    if (point && (!point.isInside && point.series.isCartesian ||\n                        point === chart.hoverPoint)) {\n                        return;\n                    }\n                    let unhovered = false;\n                    const unhoverAllPoints = () => {\n                        // If the 'row' parameter is missing in the event\n                        // object, the unhovered point cannot be identified.\n                        const series = chart.series;\n                        const seriesLength = series.length;\n                        for (let i = 0; i < seriesLength; i++) {\n                            const points = chart.series[i].points;\n                            const pointsLength = points.length;\n                            for (let j = 0; j < pointsLength; j++) {\n                                points[j].setState();\n                            }\n                        }\n                    };\n                    const tooltip = chart.tooltip;\n                    if (tooltip && highlightOptions.showTooltip) {\n                        tooltip.hide();\n                        // Shared tooltip refresh always hovers points, so it's\n                        // important to unhover all points on cursor out.\n                        if (tooltip.shared) {\n                            unhoverAllPoints();\n                            unhovered = true;\n                        }\n                    }\n                    if (highlightOptions.highlightPoint && !unhovered) {\n                        if (point) {\n                            point.setState();\n                        }\n                        else {\n                            unhoverAllPoints();\n                        }\n                    }\n                    if (highlightOptions.showCrosshair) {\n                        if (point) {\n                            point.series.xAxis?.drawCrosshair();\n                            point.series.yAxis?.drawCrosshair();\n                        }\n                        else {\n                            // If the 'row' parameter is missing in the event\n                            // object, the unhovered point cannot be identified.\n                            const xAxes = chart.xAxis;\n                            const yAxes = chart.yAxis;\n                            for (let i = 0, l = xAxes.length; i < l; i++) {\n                                xAxes[i].drawCrosshair();\n                            }\n                            for (let i = 0, l = yAxes.length; i < l; i++) {\n                                yAxes[i].drawCrosshair();\n                            }\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    const { connectorHandlers } = this;\n                    if (!cursor) {\n                        return;\n                    }\n                    for (let i = 0, iEnd = connectorHandlers.length; i < iEnd; ++i) {\n                        const table = connectorHandlers[i]?.connector?.table;\n                        if (!table) {\n                            continue;\n                        }\n                        cursor.addListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                        cursor.addListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                    }\n                };\n                const unregisterCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    const { connectorHandlers } = this;\n                    if (!cursor) {\n                        return;\n                    }\n                    for (let i = 0, iEnd = connectorHandlers.length; i < iEnd; ++i) {\n                        const table = connectorHandlers[i]?.connector?.table;\n                        if (!table) {\n                            continue;\n                        }\n                        cursor.removeListener(table.id, 'point.mouseOver' + groupKey, handleCursor);\n                        cursor.removeListener(table.id, 'point.mouseOut' + groupKey, handleCursorOut);\n                    }\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsVisibilitySync.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.visibility;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const { chart, board } = component;\n                const connector = this.getFirstConnector();\n                if (!board || !chart) {\n                    return;\n                }\n                const table = connector?.table;\n                if (table) { // Has a connector\n                    const { dataCursor: cursor } = board;\n                    const { series } = chart;\n                    series.forEach((series) => {\n                        series.update({\n                            events: {\n                                show: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        state: 'series.show' + groupKey,\n                                        column: this.name\n                                    });\n                                },\n                                hide: function () {\n                                    cursor.emitCursor(table, {\n                                        type: 'position',\n                                        state: 'series.hide' + groupKey,\n                                        column: this.name\n                                    });\n                                }\n                            }\n                        }, false);\n                    });\n                    chart.redraw();\n                }\n                return function () {\n                    if (!chart || !chart.series?.length) {\n                        return;\n                    }\n                    chart.series.forEach((series) => {\n                        series.update({\n                            events: {\n                                show: void 0,\n                                hide: void 0\n                            }\n                        }, false);\n                    });\n                    chart.redraw();\n                };\n            },\n            handler: function () {\n                if (this.type !== 'Highcharts') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.visibility;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const { board } = component;\n                const findSeries = (seriesArray, name) => {\n                    for (const series of seriesArray) {\n                        if (series.name === name) {\n                            return series;\n                        }\n                    }\n                };\n                const handleShow = (e) => {\n                    const chart = component.chart;\n                    if (!chart || !chart.series?.length) {\n                        return;\n                    }\n                    if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                        const series = findSeries(chart.series, e.cursor.column);\n                        if (series) {\n                            series.setVisible(true, true);\n                        }\n                    }\n                };\n                const handleHide = (e) => {\n                    const chart = component.chart;\n                    if (!chart || !chart.series?.length) {\n                        return;\n                    }\n                    if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                        const series = findSeries(chart.series, e.cursor.column);\n                        if (series) {\n                            series.setVisible(false, true);\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor } = board;\n                    if (!dataCursor) {\n                        return;\n                    }\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (!table) {\n                        return;\n                    }\n                    dataCursor.addListener(table.id, 'series.show' + groupKey, handleShow);\n                    dataCursor.addListener(table.id, 'series.hide' + groupKey, handleHide);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (table) {\n                        board.dataCursor.removeListener(table.id, 'series.show' + groupKey, handleShow);\n                        board.dataCursor.removeListener(table.id, 'series.hide' + groupKey, handleHide);\n                    }\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsSyncs.js', [_modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsExtremesSync.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsHighlightSync.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsVisibilitySync.js']], function (HighchartsExtremesSync, HighchartsHighlightSync, HighchartsVisibilitySync) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                extremes: HighchartsExtremesSync.syncPair,\n                highlight: HighchartsHighlightSync.syncPair,\n                visibility: HighchartsVisibilitySync.syncPair\n            },\n            defaultSyncOptions: {\n                extremes: HighchartsExtremesSync.defaultOptions,\n                highlight: HighchartsHighlightSync.defaultOptions,\n                visibility: HighchartsVisibilitySync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsComponentDefaults.js', [_modules['Dashboards/Components/Component.js'], _modules['Core/Utilities.js']], function (Component, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const HighchartsComponentDefaults = {\n            allowConnectorUpdate: true,\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-highcharts`\n            ].join(' '),\n            chartClassName: 'chart-container',\n            chartID: 'chart-' + uniqueKey(),\n            chartOptions: {\n                series: []\n            },\n            chartConstructor: 'chart',\n            editableOptions: [\n                {\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                },\n                ...Component.defaultOptions.editableOptions || [],\n                {\n                    name: 'chartOptions',\n                    type: 'nested',\n                    nestedOptions: [{\n                            name: 'chart',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'subtitle',\n                                    propertyPath: ['chartOptions', 'subtitle', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'chart', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'column',\n                                            iconURL: 'series-types/icon-column.svg'\n                                        }, {\n                                            name: 'line',\n                                            iconURL: 'series-types/icon-line.svg'\n                                        }, {\n                                            name: 'scatter',\n                                            iconURL: 'series-types/icon-scatter.svg'\n                                        }, {\n                                            name: 'pie',\n                                            iconURL: 'series-types/icon-pie.svg'\n                                        }]\n                                }]\n                        }, {\n                            name: 'xAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'xAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'xAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'yAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'yAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'yAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'legend',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'legend', 'enabled'],\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: ['chartOptions', 'legend', 'align'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'tooltip',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'tooltip', 'enabled'],\n                            options: [{\n                                    name: 'split',\n                                    propertyPath: ['chartOptions', 'tooltip', 'split'],\n                                    type: 'toggle'\n                                }]\n                        }, {\n                            name: 'dataLabels',\n                            propertyPath: [\n                                'chartOptions',\n                                'plotOptions',\n                                'series',\n                                'dataLabels',\n                                'enabled'\n                            ],\n                            showToggle: true,\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'plotOptions',\n                                        'series',\n                                        'dataLabels',\n                                        'align'\n                                    ],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'credits',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'credits', 'enabled'],\n                            options: [{\n                                    name: 'name',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'text'\n                                    ],\n                                    type: 'input'\n                                }, {\n                                    name: 'url',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'href'\n                                    ],\n                                    type: 'input'\n                                }]\n                        }]\n                }, {\n                    name: 'chartConfig',\n                    propertyPath: ['chartOptions'],\n                    type: 'textarea'\n                }, {\n                    name: 'chartClassName',\n                    propertyPath: ['chartClassName'],\n                    type: 'input'\n                }, {\n                    name: 'chartID',\n                    propertyPath: ['chartID'],\n                    type: 'input'\n                }\n            ],\n            editableOptionsBindings: merge(Component.defaultOptions.editableOptionsBindings, {\n                skipRedraw: [\n                    'chartOptions',\n                    'chartConfig'\n                ]\n            })\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HighchartsComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/HighchartsComponent/HighchartsComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsSyncs/HighchartsSyncs.js'], _modules['Dashboards/Components/HighchartsComponent/HighchartsComponentDefaults.js'], _modules['Dashboards/Utilities.js'], _modules['Core/Utilities.js']], function (Component, DataConverter, DataTable, Globals, HighchartsSyncs, HighchartsComponentDefaults, DU, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sebastian Bochan\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, diffObjects, isString, merge, splat } = U;\n        const { deepClone } = DU;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a Highcharts component.\n         *\n         */\n        class HighchartsComponent extends Component {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a Highcharts component in the cell.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                options = merge(HighchartsComponent.defaultOptions, options);\n                super(cell, options, board);\n                /**\n                 * An object of series IDs and their connector handlers.\n                 */\n                this.seriesFromConnector = {};\n                this.options = options;\n                this.chartConstructor = this.options.chartConstructor || 'chart';\n                this.type = 'Highcharts';\n                this.chartContainer = createElement('figure', void 0, void 0, this.contentElement, true);\n                this.setOptions();\n                this.chartOptions = merge((this.options.chartOptions ||\n                    { chart: {} }), {\n                    tooltip: {} // Temporary fix for #18876\n                });\n                for (const connectorHandler of this.connectorHandlers) {\n                    const connector = connectorHandler.connector;\n                    if (connector) {\n                        connector.on('afterLoad', (e) => {\n                            const eventTables = e.tables;\n                            let eventTable;\n                            if (this.dataTableKey) {\n                                eventTable = eventTables[this.dataTableKey];\n                            }\n                            else {\n                                eventTable = Object.values(eventTables)[0];\n                            }\n                            const table = connector.getTable(this.dataTableKey);\n                            table.setColumns(eventTable.getColumns());\n                        });\n                    }\n                }\n                this.innerResizeTimeouts = [];\n            }\n            onTableChanged() {\n                this.updateSeries();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            async load() {\n                this.emit({ type: 'load' });\n                await super.load();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            render() {\n                const hcComponent = this;\n                super.render();\n                hcComponent.chart = hcComponent.getChart();\n                hcComponent.updateSeries();\n                hcComponent.emit({ type: 'afterRender' });\n                hcComponent.setupConnectorUpdate();\n                this.sync.start();\n                return this;\n            }\n            resize(width, height) {\n                this.resizeDynamicContent(width, height);\n                while (this.innerResizeTimeouts.length) {\n                    const timeoutID = this.innerResizeTimeouts.pop();\n                    if (timeoutID) {\n                        clearTimeout(timeoutID);\n                    }\n                }\n                this.innerResizeTimeouts.push(setTimeout(() => {\n                    if (this.chart && this.chart.container) {\n                        const heightOffset = this.contentElement.offsetHeight -\n                            this.chart?.container.offsetHeight;\n                        this.chart.setSize(null, (Math.abs(heightOffset) > 1) ?\n                            this.contentElement.offsetHeight : null, false);\n                    }\n                }, 33));\n                return this;\n            }\n            /**\n             * Adds call update value in store, when chart's point is updated.\n             *\n             * @private\n             * */\n            setupConnectorUpdate() {\n                const { connectorHandlers, chart } = this;\n                if (!chart || !this.options.allowConnectorUpdate) {\n                    return;\n                }\n                const seriesLength = chart.series.length;\n                for (let i = 0, iEnd = connectorHandlers.length; i < iEnd; i++) {\n                    const connectorHandler = connectorHandlers[i];\n                    for (let j = 0; j < seriesLength; j++) {\n                        const series = chart.series[j];\n                        series.update({\n                            point: {\n                                events: {\n                                    update: (e) => {\n                                        this.onChartUpdate(e.target, connectorHandler);\n                                    }\n                                }\n                            }\n                        }, false);\n                    }\n                }\n            }\n            /**\n             * Update the store, when the point is being dragged.\n             * @param point Dragged point.\n             * @param connectorHandler Connector handler with data to update.\n             */\n            onChartUpdate(point, connectorHandler) {\n                const table = connectorHandler.connector?.getTable(this.dataTableKey);\n                const columnAssignment = connectorHandler.columnAssignment;\n                const seriesId = point.series.options.id;\n                const converter = new DataConverter();\n                const valueToSet = converter.asNumber(point.y);\n                if (!table) {\n                    return;\n                }\n                let columnName;\n                if (columnAssignment && seriesId) {\n                    const data = columnAssignment.find((s) => s.seriesId === seriesId)?.data;\n                    if (isString(data)) {\n                        columnName = data;\n                    }\n                    else if (Array.isArray(data)) {\n                        columnName = data[1];\n                    }\n                    else if (data) {\n                        columnName = data.y ?? data.value;\n                    }\n                }\n                if (!columnName) {\n                    columnName = seriesId ?? point.series.name;\n                }\n                table.setCell(columnName, point.index, valueToSet);\n            }\n            /**\n             * Internal method for handling option updates.\n             *\n             * @internal\n             */\n            setOptions() {\n                if (this.options.chartClassName) {\n                    this.chartContainer.classList.value =\n                        HighchartsComponentDefaults.className + ' ' +\n                            this.options.chartClassName;\n                }\n                if (this.options.chartID) {\n                    this.chartContainer.id = this.options.chartID;\n                }\n            }\n            /**\n             * Handles updating via options.\n             * @param options\n             * The options to apply.\n             *\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options, false);\n                this.setOptions();\n                if (this.options.chartConstructor !== this.chartConstructor) {\n                    this.chartConstructor = this.options.chartConstructor || 'chart';\n                    this.chartOptions = this.options.chartOptions || {};\n                    this.chart?.destroy();\n                    delete this.chart;\n                }\n                else {\n                    this.chart?.update(merge(this.options.chartOptions) || {});\n                }\n                this.emit({ type: 'afterUpdate' });\n                shouldRerender && this.render();\n            }\n            /**\n             * Updates chart's series when the data table is changed.\n             * @private\n             */\n            updateSeries() {\n                const { chart } = this;\n                const connectorHandlers = this.connectorHandlers;\n                if (!chart) {\n                    return;\n                }\n                const newSeriesIds = [];\n                for (const connectorHandler of connectorHandlers) {\n                    const options = connectorHandler.options;\n                    let columnAssignment = options.columnAssignment;\n                    // Set the new data table based on the data table key.\n                    const connector = connectorHandler.connector;\n                    const dataTableKey = this.dataTableKey;\n                    if (connector && dataTableKey) {\n                        connectorHandler.setTable(connector.dataTables[dataTableKey]);\n                    }\n                    if (!columnAssignment && connectorHandler.presentationTable) {\n                        columnAssignment = this.getDefaultColumnAssignment(connectorHandler.presentationTable.getColumnNames(), connectorHandler.presentationTable);\n                    }\n                    if (columnAssignment) {\n                        connectorHandler.columnAssignment = columnAssignment;\n                        for (const { seriesId } of columnAssignment) {\n                            if (seriesId) {\n                                newSeriesIds.push(seriesId);\n                            }\n                        }\n                    }\n                }\n                const seriesArray = Object.keys(this.seriesFromConnector);\n                // Remove series that were added in the previous update and are not\n                // present in the new columnAssignment.\n                for (let i = 0, iEnd = seriesArray.length; i < iEnd; ++i) {\n                    const oldSeriesId = seriesArray[i];\n                    if (newSeriesIds.some((newSeriesId) => newSeriesId === oldSeriesId)) {\n                        continue;\n                    }\n                    const series = chart.get(oldSeriesId);\n                    if (series) {\n                        series.destroy();\n                    }\n                }\n                this.seriesFromConnector = {};\n                for (const connectorHandler of connectorHandlers) {\n                    this.updateSeriesFromConnector(connectorHandler);\n                }\n                chart.redraw();\n            }\n            /**\n             * Updates the series based on the connector from each connector handler.\n             * @param connectorHandler The connector handler.\n             * @private\n             */\n            updateSeriesFromConnector(connectorHandler) {\n                const chart = this.chart;\n                if (!connectorHandler.connector ||\n                    !chart ||\n                    !connectorHandler.presentationTable) {\n                    return;\n                }\n                const table = connectorHandler.presentationTable.modified;\n                const modifierOptions = connectorHandler.presentationTable.getModifier()?.options;\n                const columnAssignment = connectorHandler.columnAssignment ?? [];\n                // Create the series or update the existing ones.\n                for (let i = 0, iEnd = columnAssignment.length; i < iEnd; ++i) {\n                    const assignment = columnAssignment[i];\n                    const dataStructure = assignment.data;\n                    const series = chart.get(assignment.seriesId);\n                    const seriesOptions = {};\n                    // Prevent dragging on series, which were created out of a\n                    // columns which are created by MathModifier.\n                    const adjustDraggableOptions = (compare) => {\n                        if (modifierOptions?.type === 'Math' &&\n                            modifierOptions\n                                .columnFormulas?.some((formula) => compare(formula.column))) {\n                            seriesOptions.dragDrop = {\n                                draggableY: false\n                            };\n                        }\n                    };\n                    // Set the series data based on the column assignment data structure\n                    // type.\n                    if (isString(dataStructure)) {\n                        const column = table.getColumn(dataStructure);\n                        if (column) {\n                            seriesOptions.data = column.slice();\n                        }\n                        adjustDraggableOptions((columnName) => (columnName === dataStructure));\n                    }\n                    else if (Array.isArray(dataStructure)) {\n                        const seriesTable = new DataTable({\n                            columns: table.getColumns(dataStructure)\n                        });\n                        seriesOptions.data = seriesTable.getRows();\n                        adjustDraggableOptions((columnName) => (dataStructure.some((name) => name === columnName)));\n                    }\n                    else {\n                        const keys = Object.keys(dataStructure);\n                        const columnNames = [];\n                        for (let j = 0, jEnd = keys.length; j < jEnd; ++j) {\n                            columnNames.push(dataStructure[keys[j]]);\n                        }\n                        const seriesTable = new DataTable({\n                            columns: table.getColumns(columnNames)\n                        });\n                        seriesOptions.keys = keys;\n                        seriesOptions.data = seriesTable.getRows();\n                        adjustDraggableOptions((columnName) => (columnNames.some((name) => name === columnName)));\n                    }\n                    if (!series) {\n                        chart.addSeries({\n                            name: assignment.seriesId,\n                            id: assignment.seriesId,\n                            ...seriesOptions\n                        }, false);\n                    }\n                    else {\n                        series.update(seriesOptions, false);\n                    }\n                    this.seriesFromConnector[assignment.seriesId] = connectorHandler;\n                }\n            }\n            /**\n             * Destroy chart and create a new one.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            getChart() {\n                return this.chart || this.createChart();\n            }\n            /**\n             * Destroys the highcharts component.\n             */\n            destroy() {\n                // Cleanup references in the global Highcharts scope\n                this.chart?.destroy();\n                super.destroy();\n            }\n            /**\n             * Creates default mapping when columnAssignment is not declared.\n             * @param  { Array<string>} columnNames all columns returned from dataTable.\n             *\n             * @returns\n             * The record of mapping\n             *\n             * @private\n             *\n             */\n            getDefaultColumnAssignment(columnNames = [], presentationTable) {\n                const result = [];\n                const firstColumn = presentationTable.getColumn(columnNames[0]);\n                if (firstColumn && isString(firstColumn[0])) {\n                    for (let i = 1, iEnd = columnNames.length; i < iEnd; ++i) {\n                        result.push({\n                            seriesId: columnNames[i],\n                            data: [columnNames[0], columnNames[i]]\n                        });\n                    }\n                    return result;\n                }\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    result.push({\n                        seriesId: columnNames[i],\n                        data: columnNames[i]\n                    });\n                }\n                return result;\n            }\n            /**\n             * Creates chart.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            createChart() {\n                const charter = HighchartsComponent.charter || Globals.win.Highcharts;\n                if (!this.chartConstructor) {\n                    this.chartConstructor = 'chart';\n                }\n                const Factory = charter[this.chartConstructor];\n                if (Factory) {\n                    try {\n                        if (this.chartConstructor === 'chart') {\n                            return charter.Chart.chart(this.chartContainer, this.chartOptions);\n                        }\n                        return new Factory(this.chartContainer, this.chartOptions);\n                    }\n                    catch (e) {\n                        throw new Error(`The Highcharts component in cell '${this.cell.id}' is misconfigured. \\n____________\\n${e}`);\n                    }\n                }\n                if (typeof charter.chart !== 'function') {\n                    throw new Error('Chart constructor not found');\n                }\n                return this.chart;\n            }\n            /**\n             * Registers events from the chart options to the callback register.\n             *\n             * @private\n             */\n            registerChartEvents() {\n                if (this.chart && this.chart.options) {\n                    const options = this.chart.options;\n                    const allEvents = [\n                        'chart',\n                        'series',\n                        'yAxis',\n                        'xAxis',\n                        'colorAxis',\n                        'annotations',\n                        'navigation'\n                    ].map((optionKey) => {\n                        let seriesOrAxisOptions = options[optionKey] || {};\n                        if (!Array.isArray(seriesOrAxisOptions) &&\n                            seriesOrAxisOptions.events) {\n                            seriesOrAxisOptions = [seriesOrAxisOptions];\n                        }\n                        if (seriesOrAxisOptions &&\n                            typeof seriesOrAxisOptions === 'object' &&\n                            Array.isArray(seriesOrAxisOptions)) {\n                            return seriesOrAxisOptions.reduce((acc, seriesOrAxis, i) => {\n                                if (seriesOrAxis && seriesOrAxis.events) {\n                                    acc[seriesOrAxis.id || `${optionKey}-${i}`] = seriesOrAxis.events;\n                                }\n                                return acc;\n                            }, {}) || {};\n                        }\n                        return {};\n                    });\n                    allEvents.forEach((options) => {\n                        Object.keys(options).forEach((key) => {\n                            const events = options[key];\n                            Object.keys(events).forEach((callbackKey) => {\n                                this.callbackRegistry.addCallback(`${key}-${callbackKey}`, {\n                                    type: 'seriesEvent',\n                                    func: events[callbackKey]\n                                });\n                            });\n                        });\n                    });\n                }\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'Highcharts',\n                    chartOptions: {\n                        chart: {\n                            animation: false,\n                            type: 'column',\n                            zooming: {}\n                        }\n                    }\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Get the HighchartsComponent component's options.\n             * @returns\n             * HighchartsComponent component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HighchartsComponent.defaultOptions),\n                    type: 'Highcharts'\n                };\n            }\n            /**\n             * Retrieves editable options for the chart.\n             *\n             * @returns\n             * The editable options for the chart and its values.\n             */\n            getEditableOptions() {\n                const component = this;\n                const componentOptions = component.options;\n                const chart = component.chart;\n                const chartOptions = chart && chart.options;\n                const chartType = chartOptions?.chart?.type || 'line';\n                return deepClone(merge({\n                    chartOptions\n                }, {\n                    chartOptions: {\n                        yAxis: splat(chart && chart.yAxis[0].options),\n                        xAxis: splat(chart && chart.xAxis[0].options),\n                        plotOptions: {\n                            series: ((chartOptions && chartOptions.plotOptions) ||\n                                {})[chartType]\n                        }\n                    }\n                }, componentOptions), ['dataTable', 'points', 'series', 'data', 'editableOptions']);\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                if (propertyPath.length === 1 && propertyPath[0] === 'chartOptions') {\n                    return JSON.stringify(component.options.chartOptions, null, 2);\n                }\n                return super.getEditableOptionValue.call(this, propertyPath);\n            }\n        }\n        /**\n         * Predefined sync config for Highcharts component.\n         */\n        HighchartsComponent.predefinedSyncConfig = HighchartsSyncs;\n        /**\n         * Default options of the Highcharts component.\n         */\n        HighchartsComponent.defaultOptions = merge(Component.defaultOptions, HighchartsComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HighchartsComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPISyncs/KPIExtremesSync.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: void 0,\n            handler: function () {\n                if (this.type !== 'KPI') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const { board } = this;\n                const handleChangeExtremes = (e) => {\n                    const cursor = e.cursor;\n                    if (cursor.type === 'position' &&\n                        typeof cursor?.row === 'number' &&\n                        defined(cursor.column) &&\n                        component.connectorHandlers?.[0]?.connector &&\n                        !defined(component.options.value)) {\n                        const value = component.connectorHandlers[0].connector\n                            .table.modified.getCellAsString(cursor.column, cursor.row);\n                        component.setValue(value);\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const { dataCursor: cursor } = board;\n                    if (!cursor) {\n                        return;\n                    }\n                    const table = this.getFirstConnector()?.table;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.addListener(table.id, 'xAxis.extremes.max' + groupKey, handleChangeExtremes);\n                };\n                const unregisterCursorListeners = () => {\n                    const table = this.getFirstConnector()?.table;\n                    const { dataCursor: cursor } = board;\n                    if (!table) {\n                        return;\n                    }\n                    cursor.removeListener(table.id, 'xAxis.extremes.max' + groupKey, handleChangeExtremes);\n                };\n                if (board) {\n                    registerCursorListeners();\n                    return unregisterCursorListeners;\n                }\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPISyncs/KPISyncs.js', [_modules['Dashboards/Components/KPIComponent/KPISyncs/KPIExtremesSync.js']], function (KPIExtremesSync) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                extremes: KPIExtremesSync.syncPair\n            },\n            defaultSyncOptions: {\n                extremes: KPIExtremesSync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPIComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const KPIComponentDefaults = {\n            type: 'KPI',\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-kpi`\n            ].join(' '),\n            minFontSize: 20,\n            thresholdColors: ['#f45b5b', '#90ed7d'],\n            editableOptions: [\n                {\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                },\n                ...Component.defaultOptions.editableOptions || [],\n                {\n                    name: 'Value',\n                    type: 'input',\n                    propertyPath: ['value']\n                }, {\n                    name: 'Column name',\n                    type: 'input',\n                    propertyPath: ['columnName']\n                }, {\n                    name: 'Value format',\n                    type: 'input',\n                    propertyPath: ['valueFormat']\n                }\n            ],\n            linkedValueTo: {\n                enabled: true,\n                seriesIndex: 0,\n                pointIndex: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return KPIComponentDefaults;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaTypes.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Array of all possible operators.\n         * @private\n         */\n        const operators = ['+', '-', '*', '/', '^', '=', '<', '<=', '>', '>='];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests an item for a Formula array.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula (or argument) array.\n         */\n        function isFormula(item) {\n            return item instanceof Array;\n        }\n        /**\n         * Tests an item for a Function structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula function.\n         */\n        function isFunction(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'function');\n        }\n        /**\n         * Tests an item for an Operator string.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is an operator string.\n         */\n        function isOperator(item) {\n            return (typeof item === 'string' &&\n                operators.indexOf(item) >= 0);\n        }\n        /**\n         * Tests an item for a Range structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a range.\n         */\n        function isRange(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'range');\n        }\n        /**\n         * Tests an item for a Reference structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a reference.\n         */\n        function isReference(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'reference');\n        }\n        /**\n         * Tests an item for a Value structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem|null|undefined} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a value.\n         */\n        function isValue(item) {\n            return (typeof item === 'boolean' ||\n                typeof item === 'number' ||\n                typeof item === 'string');\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const MathFormula = {\n            isFormula,\n            isFunction,\n            isOperator,\n            isRange,\n            isReference,\n            isValue\n        };\n\n        return MathFormula;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaProcessor.js', [_modules['Data/Formula/FormulaTypes.js'], _modules['Core/Utilities.js']], function (FormulaTypes, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { isFormula, isFunction, isOperator, isRange, isReference, isValue } = FormulaTypes;\n        const { defined } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const asLogicalStringRegExp = / */;\n        const MAX_FALSE = Number.MAX_VALUE / 1.000000000001;\n        const MAX_STRING = Number.MAX_VALUE / 1.000000000002;\n        const MAX_TRUE = Number.MAX_VALUE;\n        const operatorPriority = {\n            '^': 3,\n            '*': 2,\n            '/': 2,\n            '+': 1,\n            '-': 1,\n            '=': 0,\n            '<': 0,\n            '<=': 0,\n            '>': 0,\n            '>=': 0\n        };\n        const processorFunctions = {};\n        const processorFunctionNameRegExp = /^[A-Z][A-Z\\.]*$/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts non-number types to logical numbers.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Logical number value. `NaN` if not convertable.\n         */\n        function asLogicalNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? MAX_TRUE : MAX_FALSE;\n                case 'string':\n                    return MAX_STRING;\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Converts strings to logical strings, while other types get passed through. In\n         * logical strings the space character is the lowest value and letters are case\n         * insensitive.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Logical string value or passed through value.\n         */\n        function asLogicalString(value) {\n            if (typeof value === 'string') {\n                return value.toLowerCase().replace(asLogicalStringRegExp, '\\0');\n            }\n            return value;\n        }\n        /**\n         * Converts non-number types to a logic number.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Number value. `NaN` if not convertable.\n         */\n        function asNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? 1 : 0;\n                case 'string':\n                    return parseFloat(value.replace(',', '.'));\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Process a basic operation of two given values.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaOperator} operator\n         * Operator between values.\n         *\n         * @param {Highcharts.FormulaValue} x\n         * First value for operation.\n         *\n         * @param {Highcharts.FormulaValue} y\n         * Second value for operation.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Operation result. `NaN` if operation is not support.\n         */\n        function basicOperation(operator, x, y) {\n            switch (operator) {\n                case '=':\n                    return asLogicalString(x) === asLogicalString(y);\n                case '<':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) < asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) < asLogicalNumber(y);\n                case '<=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) <= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) <= asLogicalNumber(y);\n                case '>':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) > asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) > asLogicalNumber(y);\n                case '>=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) >= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) >= asLogicalNumber(y);\n            }\n            x = asNumber(x);\n            y = asNumber(y);\n            let result;\n            switch (operator) {\n                case '+':\n                    result = x + y;\n                    break;\n                case '-':\n                    result = x - y;\n                    break;\n                case '*':\n                    result = x * y;\n                    break;\n                case '/':\n                    result = x / y;\n                    break;\n                case '^':\n                    result = Math.pow(x, y);\n                    break;\n                default:\n                    return NaN;\n            }\n            // Limit decimal to 9 digits\n            return (result % 1 ?\n                Math.round(result * 1000000000) / 1000000000 :\n                result);\n        }\n        /**\n         * Converts an argument to Value and in case of a range to an array of Values.\n         *\n         * @function Highcharts.Formula.getArgumentValue\n         *\n         * @param {Highcharts.FormulaRange|Highcharts.FormulaTerm} arg\n         * Formula range or term to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Converted value.\n         */\n        function getArgumentValue(arg, table) {\n            // Add value\n            if (isValue(arg)) {\n                return arg;\n            }\n            // Add values of a range\n            if (isRange(arg)) {\n                return (table && getRangeValues(arg, table) || []);\n            }\n            // Add values of a function\n            if (isFunction(arg)) {\n                return processFunction(arg, table);\n            }\n            // Process functions, operations, references with formula processor\n            return processFormula((isFormula(arg) ? arg : [arg]), table);\n        }\n        /**\n         * Converts all arguments to Values and in case of ranges to arrays of Values.\n         *\n         * @function Highcharts.Formula.getArgumentsValues\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Formula arguments to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<(Highcharts.FormulaValue|Array<Highcharts.FormulaValue>)>}\n         * Converted values.\n         */\n        function getArgumentsValues(args, table) {\n            const values = [];\n            for (let i = 0, iEnd = args.length; i < iEnd; ++i) {\n                values.push(getArgumentValue(args[i], table));\n            }\n            return values;\n        }\n        /**\n         * Extracts cell values from a table for a given range.\n         *\n         * @function Highcharts.Formula.getRangeValues\n         *\n         * @param {Highcharts.FormulaRange} range\n         * Formula range to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Array<Highcharts.FormulaValue>}\n         * Extracted values.\n         */\n        function getRangeValues(range, table) {\n            const columnNames = table\n                .getColumnNames()\n                .slice(range.beginColumn, range.endColumn + 1), values = [];\n            for (let i = 0, iEnd = columnNames.length, cell; i < iEnd; ++i) {\n                const cells = table.getColumn(columnNames[i], true) || [];\n                for (let j = range.beginRow, jEnd = range.endRow + 1; j < jEnd; ++j) {\n                    cell = cells[j];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=' &&\n                        table !== table.modified) {\n                        // Look in the modified table for formula result\n                        cell = table.modified.getCell(columnNames[i], j);\n                    }\n                    values.push(isValue(cell) ? cell : NaN);\n                }\n            }\n            return values;\n        }\n        /**\n         * Extracts the cell value from a table for a given reference.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaReference} reference\n         * Formula reference to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Extracted value. 'undefined' might also indicate that the cell was not found.\n         */\n        function getReferenceValue(reference, table) {\n            const columnName = table.getColumnNames()[reference.column];\n            if (columnName) {\n                const cell = table.getCell(columnName, reference.row);\n                if (typeof cell === 'string' &&\n                    cell[0] === '=' &&\n                    table !== table.modified) {\n                    // Look in the modified table for formula result\n                    const result = table.modified.getCell(columnName, reference.row);\n                    return isValue(result) ? result : NaN;\n                }\n                if (isValue(cell)) {\n                    return reference.isNegative ? -cell : cell;\n                }\n                return NaN;\n            }\n            return NaN;\n        }\n        /**\n         * Calculates a value based on the two top values and the related operator.\n         *\n         * Used to properly process the formula's values based on its operators.\n         *\n         * @private\n         * @function Highcharts.applyOperator\n         *\n         * @param {Array<Highcharts.Value>} values\n         * Processed formula values.\n         *\n         * @param {Array<Highcharts.Operator>} operators\n         * Processed formula operators.\n         */\n        function applyOperator(values, operators) {\n            if (values.length < 2 || operators.length < 1) {\n                values.push(NaN);\n            }\n            const secondValue = values.pop();\n            const firstValue = values.pop();\n            const operator = operators.pop();\n            if (!defined(secondValue) || !defined(firstValue) || !defined(operator)) {\n                values.push(NaN);\n            }\n            else {\n                values.push(basicOperation(operator, firstValue, secondValue));\n            }\n        }\n        /**\n         * Processes a formula array on the given table. If the formula does not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * Performs formulas considering the operators precedence.\n         *\n         * // Example of the `2 * 3 + 4` formula:\n         * 2 -> values: [2], operators: []\n         * * -> values: [2], operators: [*]\n         * 3 -> values: [2, 3], operators: [*]\n         * // Since the higher precedence operator exists (* > +), perform it first.\n         * + -> values: [6], operators: [+]\n         * 4 -> values: [6, 4], operators: [+]\n         * // When non-higher precedence operators remain, perform rest calculations.\n         * -> values: [10], operators: []\n         *\n         * @private\n         * @function Highcharts.processFormula\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula array to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Result value of the process. `NaN` indicates an error.\n         */\n        function processFormula(formula, table) {\n            // Keeps all the values to calculate them in a proper priority, based on the\n            // given operators.\n            const values = [];\n            // Keeps all the operators to calculate the values above, following the\n            // proper priority.\n            const operators = [];\n            // Indicates if the next item is a value (not an operator).\n            let expectingValue = true;\n            for (let i = 0, iEnd = formula.length; i < iEnd; ++i) {\n                const item = formula[i];\n                if (isOperator(item)) {\n                    if (expectingValue && item === '-') {\n                        // Split the negative values to be handled as a binary\n                        // operation if the next item is a value.\n                        values.push(0);\n                        operators.push('-');\n                        expectingValue = true;\n                    }\n                    else {\n                        // Perform if the higher precedence operator exist.\n                        while (operators.length &&\n                            operatorPriority[operators[operators.length - 1]] >=\n                                operatorPriority[item]) {\n                            applyOperator(values, operators);\n                        }\n                        operators.push(item);\n                        expectingValue = true;\n                    }\n                    continue;\n                }\n                let value;\n                // Assign the proper value, starting from the most common types.\n                if (isValue(item)) {\n                    value = item;\n                }\n                else if (isReference(item)) {\n                    value = table ? getReferenceValue(item, table) : NaN;\n                }\n                else if (isFunction(item)) {\n                    const result = processFunction(item, table);\n                    value = isValue(result) ? result : NaN;\n                }\n                else if (isFormula(item)) {\n                    value = processFormula(item, table);\n                }\n                if (typeof value !== 'undefined') {\n                    values.push(value);\n                    expectingValue = false;\n                }\n                else {\n                    return NaN;\n                }\n            }\n            // Handle the remaining operators that weren't taken into consideration, due\n            // to non-higher precedence.\n            while (operators.length) {\n                applyOperator(values, operators);\n            }\n            if (values.length !== 1) {\n                return NaN;\n            }\n            return values[0];\n        }\n        /**\n         * Process a function on the given table. If the arguments do not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaFunction} formulaFunction\n         * Formula function to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @param {Highcharts.FormulaReference} [reference]\n         * Table cell reference to use for relative references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value (or values) of the process. `NaN` indicates an error.\n         */\n        function processFunction(formulaFunction, table, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        reference // @todo\n        ) {\n            const processor = processorFunctions[formulaFunction.name];\n            if (processor) {\n                try {\n                    return processor(formulaFunction.args, table);\n                }\n                catch {\n                    return NaN;\n                }\n            }\n            const error = new Error(`Function \"${formulaFunction.name}\" not found.`);\n            error.name = 'FormulaProcessError';\n            throw error;\n        }\n        /**\n         * Registers a function for the FormulaProcessor.\n         *\n         * @param {string} name\n         * Name of the function in spreadsheets notation with upper case.\n         *\n         * @param {Highcharts.FormulaFunction} processorFunction\n         * ProcessorFunction for the FormulaProcessor. This is an object so that it\n         * can take additional parameter for future validation routines.\n         *\n         * @return {boolean}\n         * Return true, if the ProcessorFunction has been registered.\n         */\n        function registerProcessorFunction(name, processorFunction) {\n            return (processorFunctionNameRegExp.test(name) &&\n                !processorFunctions[name] &&\n                !!(processorFunctions[name] = processorFunction));\n        }\n        /**\n         * Translates relative references and ranges in-place.\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula to translate references and ranges in.\n         *\n         * @param {number} [columnDelta=0]\n         * Column delta to translate to. Negative translate back.\n         *\n         * @param {number} [rowDelta=0]\n         * Row delta to translate to. Negative numbers translate back.\n         *\n         * @return {Highcharts.Formula}\n         * Formula with translated reference and ranges. This formula is equal to the\n         * first argument.\n         */\n        function translateReferences(formula, columnDelta = 0, rowDelta = 0) {\n            for (let i = 0, iEnd = formula.length, item; i < iEnd; ++i) {\n                item = formula[i];\n                if (item instanceof Array) {\n                    translateReferences(item, columnDelta, rowDelta);\n                }\n                else if (isFunction(item)) {\n                    translateReferences(item.args, columnDelta, rowDelta);\n                }\n                else if (isRange(item)) {\n                    if (item.beginColumnRelative) {\n                        item.beginColumn += columnDelta;\n                    }\n                    if (item.beginRowRelative) {\n                        item.beginRow += rowDelta;\n                    }\n                    if (item.endColumnRelative) {\n                        item.endColumn += columnDelta;\n                    }\n                    if (item.endRowRelative) {\n                        item.endRow += rowDelta;\n                    }\n                }\n                else if (isReference(item)) {\n                    if (item.columnRelative) {\n                        item.column += columnDelta;\n                    }\n                    if (item.rowRelative) {\n                        item.row += rowDelta;\n                    }\n                }\n            }\n            return formula;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const FormulaProcessor = {\n            asNumber,\n            getArgumentValue,\n            getArgumentsValues,\n            getRangeValues,\n            getReferenceValue,\n            processFormula,\n            processorFunctions,\n            registerProcessorFunction,\n            translateReferences\n        };\n\n        return FormulaProcessor;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/SUM.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `SUM(...values)` implementation. Calculates the sum of the\n         * given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.SUM\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SUM(args, table) {\n            const values = FormulaProcessor.getArgumentsValues(args, table);\n            let result = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        result += SUM(value, table);\n                        break;\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('SUM', SUM); // 🐝\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SUM;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGE(...values)` implementation. Calculates the average\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGE\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGE(args, table) {\n            const values = getArgumentsValues(args, table);\n            let count = 0, result = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                ++count;\n                                result += value2;\n                            }\n                        }\n                        break;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGE', AVERAGE);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MEDIAN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MEDIAN(...values)` implementation. Calculates the median\n         * average of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MEDIAN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MEDIAN(args, table) {\n            const median = [], values = FormulaProcessor.getArgumentsValues(args, table);\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            median.push(value);\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                median.push(value2);\n                            }\n                        }\n                        break;\n                }\n            }\n            const count = median.length;\n            if (!count) {\n                return NaN;\n            }\n            const half = Math.floor(count / 2); // Floor because index starts at 0\n            return (count % 2 ?\n                median[half] : // Odd\n                (median[half - 1] + median[half]) / 2 // Even\n            );\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MEDIAN', MEDIAN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MEDIAN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MAX.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MAX(...values)` implementation. Calculates the largest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MAX\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MAX(args, table) {\n            const values = getArgumentsValues(args, table);\n            let result = Number.NEGATIVE_INFINITY;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MAX(value);\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MAX', MAX);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MAX;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MIN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MIN(...values)` implementation. Calculates the lowest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MIN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MIN(args, table) {\n            const values = getArgumentsValues(args, table);\n            let result = Number.POSITIVE_INFINITY;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MIN(value);\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MIN', MIN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MIN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNT(...values)` implementation. Returns the count of\n         * given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNT(args, table) {\n            const values = FormulaProcessor.getArgumentsValues(args, table);\n            let count = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNT(value, table);\n                        break;\n                }\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNT', COUNT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/PRODUCT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `PRODUCT(...values)` implementation. Calculates the product\n         * of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.PRODUCT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function PRODUCT(args, table) {\n            const values = getArgumentsValues(args, table);\n            let result = 1, calculated = false;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            calculated = true;\n                            result *= value;\n                        }\n                        break;\n                    case 'object':\n                        calculated = true;\n                        result *= PRODUCT(value, table);\n                        break;\n                }\n            }\n            return (calculated ? result : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('PRODUCT', PRODUCT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PRODUCT;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * General options for the chart.\n         *\n         * @optionparent chart\n         */\n        const ChartDefaults = {\n            /**\n             * Default `mapData` for all series, in terms of a GeoJSON or TopoJSON\n             * object. If set to a string, it functions as an index into the\n             * `Highcharts.maps` array.\n             *\n             * For picking out individual shapes and geometries to use for each series\n             * of the map, see [series.mapData](#series.map.mapData).\n             *\n             * @sample    maps/demo/geojson\n             *            Loading GeoJSON data\n             * @sample    maps/chart/topojson\n             *            Loading TopoJSON data\n             *\n             * @type      {string|Array<*>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.map\n             */\n            /**\n             * Set lat/lon transformation definitions for the chart. If not defined,\n             * these are extracted from the map data.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.mapTransforms\n             */\n            /**\n             * When using multiple axes, the ticks of two or more opposite axes\n             * will automatically be aligned by adding ticks to the axis or axes\n             * with the least ticks, as if `tickAmount` were specified.\n             *\n             * This can be prevented by setting `alignTicks` to false. If the grid\n             * lines look messy, it's a good idea to hide them for the secondary\n             * axis by setting `gridLineWidth` to 0.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false,\n             * then the `alignTicks ` will be disabled for the axis.\n             *\n             * Disabled for logarithmic axes.\n             *\n             * @sample {highcharts} highcharts/chart/alignticks-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/alignticks-false/\n             *         False\n             * @sample {highstock} stock/chart/alignticks-true/\n             *         True by default\n             * @sample {highstock} stock/chart/alignticks-false/\n             *         False\n             *\n             * @type      {boolean}\n             * @default   true\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignTicks\n             */\n            /**\n             * When using multiple axes, align the thresholds. When this is true, other\n             * ticks will also be aligned.\n             *\n             * Note that for line series and some other series types, the `threshold`\n             * option is set to `null` by default. This will in turn cause their y-axis\n             * to not have a threshold. In order to avoid that, set the series\n             * `threshold` to 0 or another number.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false, or\n             * if the axis is logarithmic, the threshold will not be aligned.\n             *\n             * @sample {highcharts} highcharts/chart/alignthresholds/ Set to true\n             *\n             * @since 10.0.0\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignThresholds\n             */\n            alignThresholds: false,\n            /**\n             * Set the overall animation for all chart updating. Animation can be\n             * disabled throughout the chart by setting it to false here. It can\n             * be overridden for each individual API method as a function parameter.\n             * The only animation not affected by this option is the initial series\n             * animation, see [plotOptions.series.animation](\n             * #plotOptions.series.animation).\n             *\n             * The animation can either be set as a boolean or a configuration\n             * object. If `true`, it will use the 'swing' jQuery easing and a\n             * duration of 500 ms. If used as a configuration object, the following\n             * properties are supported:\n             *\n             * - `defer`: The animation delay time in milliseconds.\n             *\n             * - `duration`: The duration of the animation in milliseconds.\n             *\n             * - `easing`: A string reference to an easing function set on the\n             *   `Math` object. See\n             *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n             *\n             * When zooming on a series with less than 100 points, the chart redraw\n             * will be done with animation, but in case of more data points, it is\n             * necessary to set this option to ensure animation on zoom.\n             *\n             * @sample {highcharts} highcharts/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highcharts} highcharts/chart/animation-duration/\n             *         With a longer duration\n             * @sample {highcharts} highcharts/chart/animation-easing/\n             *         With a jQuery UI easing\n             * @sample {highmaps} maps/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highmaps} maps/chart/animation-duration/\n             *         With a longer duration\n             *\n             * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @default   true\n             * @apioption chart.animation\n             */\n            /**\n             * A CSS class name to apply to the charts container `div`, allowing\n             * unique CSS styling for each chart.\n             *\n             * @type      {string}\n             * @apioption chart.className\n             */\n            /**\n             * Event listeners for the chart.\n             *\n             * @apioption chart.events\n             */\n            /**\n             * Fires when a series is added to the chart after load time, using the\n             * `addSeries` method. One parameter, `event`, is passed to the\n             * function, containing common event information. Through\n             * `event.options` you can access the series options that were passed to\n             * the `addSeries` method. Returning false prevents the series from\n             * being added.\n             *\n             * @sample {highcharts} highcharts/chart/events-addseries/\n             *         Alert on add series\n             * @sample {highstock} stock/chart/events-addseries/\n             *         Alert on add series\n             *\n             * @type      {Highcharts.ChartAddSeriesCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.addSeries\n             */\n            /**\n             * Fires when clicking on the plot background. One parameter, `event`,\n             * is passed to the function, containing common event information.\n             *\n             * Information on the clicked spot can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' value at the clicked spot. The primary axes\n             * are `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * click: function(e) {\n             *     console.log(\n             *         Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n             *         e.yAxis[0].value\n             *     )\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highcharts} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highstock} stock/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highstock} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highmaps} maps/chart/events-click/\n             *         Record coordinates on click\n             * @sample {highmaps} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             *\n             * @type      {Highcharts.ChartClickCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.click\n             */\n            /**\n             * Fires when the chart is finished loading. Since v4.2.2, it also waits\n             * for images to be loaded, for example from point markers. One\n             * parameter, `event`, is passed to the function, containing common\n             * event information.\n             *\n             * There is also a second parameter to the chart constructor where a\n             * callback function can be passed to be executed on chart.load.\n             *\n             * @sample {highcharts} highcharts/chart/events-load/\n             *         Alert on chart load\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-load/\n             *         Alert on chart load\n             * @sample {highmaps} maps/chart/events-load/\n             *         Add series on chart load\n             *\n             * @type      {Highcharts.ChartLoadCallbackFunction}\n             * @context   Highcharts.Chart\n             * @apioption chart.events.load\n             */\n            /**\n             * Fires when the chart is redrawn, either after a call to\n             * `chart.redraw()` or after an axis, series or point is modified with\n             * the `redraw` option set to `true`. One parameter, `event`, is passed\n             * to the function, containing common event information.\n             *\n             * @sample {highcharts} highcharts/chart/events-redraw/\n             *         Alert on chart redraw\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-redraw/\n             *         Alert on chart redraw when adding a series or moving the\n             *         zoomed range\n             * @sample {highmaps} maps/chart/events-redraw/\n             *         Set subtitle on chart redraw\n             *\n             * @type      {Highcharts.ChartRedrawCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.redraw\n             */\n            /**\n             * Fires after initial load of the chart (directly after the `load`\n             * event), and after each redraw (directly after the `redraw` event).\n             *\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             *\n             * @type      {Highcharts.ChartRenderCallbackFunction}\n             * @since     5.0.7\n             * @context   Highcharts.Chart\n             * @apioption chart.events.render\n             */\n            /**\n             * Fires when an area of the chart has been selected. Selection is\n             * enabled by setting the chart's zoomType. One parameter, `event`, is\n             * passed to the function, containing common event information. The\n             * default action for the selection event is to zoom the chart to the\n             * selected area. It can be prevented by calling\n             * `event.preventDefault()` or return false.\n             *\n             * Information on the selected area can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' min and max values. The primary axes are\n             * `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * selection: function(event) {\n             *     // log the min and max of the primary, datetime x-axis\n             *     console.log(\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].min\n             *         ),\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].max\n             *         )\n             *     );\n             *     // log the min and max of the y axis\n             *     console.log(event.yAxis[0].min, event.yAxis[0].max);\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highcharts} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample {highstock} stock/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highstock} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             *         (Highcharts)\n             *\n             * @type      {Highcharts.ChartSelectionCallbackFunction}\n             * @apioption chart.events.selection\n             */\n            /**\n             * The margin between the outer edge of the chart and the plot area.\n             * The numbers in the array designate top, right, bottom and left\n             * respectively. Use the options `marginTop`, `marginRight`,\n             * `marginBottom` and `marginLeft` for shorthand setting of one option.\n             *\n             * By default there is no margin. The actual space is dynamically\n             * calculated from the offset of axis labels, axis title, title,\n             * subtitle and legend in addition to the `spacingTop`, `spacingRight`,\n             * `spacingBottom` and `spacingLeft` options.\n             *\n             * @sample {highcharts} highcharts/chart/margins-zero/\n             *         Zero margins\n             * @sample {highstock} stock/chart/margin-zero/\n             *         Zero margins\n             *\n             * @type      {number|Array<number>}\n             * @apioption chart.margin\n             */\n            /**\n             * The margin between the bottom outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingBottom`.\n             *\n             * @sample {highcharts} highcharts/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highstock} stock/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginBottom\n             */\n            /**\n             * The margin between the left outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingLeft`.\n             *\n             * @sample {highcharts} highcharts/chart/marginleft/\n             *         150px left margin\n             * @sample {highstock} stock/chart/marginleft/\n             *         150px left margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginLeft\n             */\n            /**\n             * The margin between the right outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingRight`.\n             *\n             * @sample {highcharts} highcharts/chart/marginright/\n             *         100px right margin\n             * @sample {highstock} stock/chart/marginright/\n             *         100px right margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginRight\n             */\n            /**\n             * The margin between the top outer edge of the chart and the plot area.\n             * Use this to set a fixed pixel value for the margin as opposed to\n             * the default dynamic margin. See also `spacingTop`.\n             *\n             * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n             * @sample {highstock} stock/chart/margintop/\n             *         100px top margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginTop\n             */\n            /**\n             * Callback function to override the default function that formats all\n             * the numbers in the chart. Returns a string with the formatted number.\n             *\n             * @sample highcharts/members/highcharts-numberformat\n             *      Arabic digits in Highcharts\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             * @since 8.0.0\n             * @apioption chart.numberFormatter\n             */\n            /**\n             * When a chart with an x and a y-axis is rendered, we first pre-render the\n             * labels of both in order to measure them. Then, if either of the axis\n             * labels take up so much space that it significantly affects the length of\n             * the other axis, we repeat the process.\n             *\n             * By default we stop at two axis layout runs, but it may be that the second\n             * run also alter the space required by either axis, for example if it\n             * causes the labels to rotate. In this situation, a subsequent redraw of\n             * the chart may cause the tick and label placement to change for apparently\n             * no reason.\n             *\n             * Use the `axisLayoutRuns` option to set the maximum allowed number of\n             * repetitions. But keep in mind that the default value of 2 is set because\n             * every run costs performance time.\n             *\n             * **Note:** Changing that option to higher than the default might decrease\n             * performance significantly, especially with bigger sets of data.\n             *\n             * @type      {number}\n             * @default   2\n             * @since     11.3.0\n             * @apioption chart.axisLayoutRuns\n             */\n            /**\n             * Allows setting a key to switch between zooming and panning. Can be\n             * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n             * key on Windows) or `shift`. The keys are mapped directly to the key\n             * properties of the click event argument (`event.altKey`,\n             * `event.ctrlKey`, `event.metaKey` and `event.shiftKey`).\n             *\n             * @type       {string}\n             * @since      4.0.3\n             * @product    highcharts gantt\n             * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n             * @apioption  chart.panKey\n             */\n            /**\n             * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n             * to combine zooming and panning.\n             *\n             * On touch devices, when the [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) option is `true` (default), panning\n             * requires two fingers. To allow panning with one finger, set\n             * `followTouchMove` to `false`.\n             *\n             * @sample  {highcharts} highcharts/chart/pankey/ Zooming and panning\n             * @sample  {highstock} stock/chart/panning/ Zooming and xy panning\n             */\n            panning: {\n                /**\n                 * Enable or disable chart panning.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock|highmaps} true\n                 */\n                enabled: false,\n                /**\n                 * Decides in what dimensions the user can pan the chart. Can be\n                 * one of `x`, `y`, or `xy`.\n                 *\n                 * During panning, all axes will behave as if\n                 * [`startOnTick`](#yAxis.startOnTick) and\n                 * [`endOnTick`](#yAxis.endOnTick) were set to `false`. After the\n                 * panning action is finished, the axes will adjust to their actual\n                 * settings.\n                 *\n                 * **Note:** For non-cartesian series, the only supported panning type\n                 * is `xy`, as zooming in a single direction is not applicable due to\n                 * the radial nature of the coordinate system.\n                 *\n                 * @sample {highcharts} highcharts/chart/panning-type\n                 *         Zooming and xy panning\n                 *\n                 * @declare    Highcharts.OptionsChartPanningTypeValue\n                 * @type       {string}\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @product    highcharts highstock gantt\n                 */\n                type: 'x'\n            },\n            /**\n             * Equivalent to [zoomType](#chart.zoomType), but for multitouch\n             * gestures only. By default, the `pinchType` is the same as the\n             * `zoomType` setting. However, pinching can be enabled separately in\n             * some cases, for example in stock charts where a mouse drag pans the\n             * chart, while pinching is enabled. When [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) is true, pinchType only applies to\n             * two-finger touches.\n             *\n             * @type       {string}\n             * @default    {highcharts} undefined\n             * @default    {highstock} undefined\n             * @since      3.0\n             * @product    highcharts highstock gantt\n             * @deprecated\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @apioption  chart.pinchType\n             */\n            /**\n             * Whether to apply styled mode. When in styled mode, no presentational\n             * attributes or CSS are applied to the chart SVG. Instead, CSS rules\n             * are required to style the chart. The default style sheet is\n             * available from `https://code.highcharts.com/css/highcharts.css`.\n             *\n             * [Read more in the docs](https://www.highcharts.com/docs/chart-design-and-style/style-by-css)\n             * on what classes and variables are available.\n             *\n             * @sample highcharts/css/colors\n             *         Color theming with CSS\n             * @sample highcharts/css/prefers-color-scheme\n             *         Dynamic theme based on system settings\n             * @type       {boolean}\n             * @default    false\n             * @since      7.0\n             * @apioption  chart.styledMode\n             */\n            styledMode: false,\n            /**\n             * The corner radius of the outer chart border.\n             *\n             * @sample {highcharts} highcharts/chart/borderradius/\n             *         20px radius\n             * @sample {highstock} stock/chart/border/\n             *         10px radius\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             */\n            borderRadius: 0,\n            /**\n             * In styled mode, this sets how many colors the class names\n             * should rotate between. With ten colors, series (or points) are\n             * given class names like `highcharts-color-0`, `highcharts-color-1`\n             * [...] `highcharts-color-9`. The equivalent in non-styled mode\n             * is to set colors using the [colors](#colors) setting.\n             *\n             * @since      5.0.0\n             */\n            colorCount: 10,\n            /**\n             * By default, (because of memory and performance reasons) the chart does\n             * not copy the data but keeps it as a reference. In some cases, this might\n             * result in mutating the original data source. In order to prevent that,\n             * set that property to false. Please note that changing that might decrease\n             * performance, especially with bigger sets of data.\n             *\n             * @type       {boolean}\n             * @since 10.1.0\n             */\n            allowMutatingData: true,\n            /**\n             * If true, the axes will scale to the remaining visible series once\n             * one series is hidden. If false, hiding and showing a series will\n             * not affect the axes or the other series. For stacks, once one series\n             * within the stack is hidden, the rest of the stack will close in\n             * around it even if the axis is not affected.\n             *\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n             *         False\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n             *         True with stack\n             * @sample {highstock} stock/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highstock} stock/chart/ignorehiddenseries-false/\n             *         False\n             *\n             * @since   1.2.0\n             * @product highcharts highstock gantt\n             */\n            ignoreHiddenSeries: true,\n            /**\n             * Whether to invert the axes so that the x axis is vertical and y axis\n             * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n             * by default.\n             *\n             * @productdesc {highcharts}\n             * If a bar series is present in the chart, it will be inverted\n             * automatically. Inverting the chart doesn't have an effect if there\n             * are no cartesian series in the chart.\n             *\n             * @sample {highcharts} highcharts/chart/inverted/\n             *         Inverted line\n             * @sample {highstock} stock/navigator/inverted/\n             *         Inverted stock chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @product   highcharts highstock gantt\n             * @apioption chart.inverted\n             */\n            /**\n             * The distance between the outer edge of the chart and the content,\n             * like title or legend, or axis title and labels if present. The\n             * numbers in the array designate top, right, bottom and left\n             * respectively. Use the options spacingTop, spacingRight, spacingBottom\n             * and spacingLeft options for shorthand setting of one option.\n             *\n             * @type    {Array<number>}\n             * @see     [chart.margin](#chart.margin)\n             * @default [10, 10, 15, 10]\n             * @since   3.0.6\n             */\n            spacing: [10, 10, 15, 10],\n            /**\n             * The button that appears after a selection zoom, allowing the user\n             * to reset zoom. This option is deprecated in favor of\n             * [zooming](#chart.zooming).\n             *\n             * @since      2.2\n             * @deprecated 10.2.1\n             */\n            resetZoomButton: {\n                /**\n                 * What frame the button placement should be related to. Can be\n                 * either `plotBox` or `spacingBox`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 *\n                 * @type      {Highcharts.ButtonRelativeToValue}\n                 * @apioption chart.resetZoomButton.relativeTo\n                 */\n                /**\n                 * A collection of attributes for the button. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                 * border radius. The theme also supports `style`, a collection of\n                 * CSS properties for the text. Equivalent attributes for the hover\n                 * state are given in `theme.states.hover`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                theme: {\n                /**\n                 * The z-index of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.theme.zIndex\n                 */\n                },\n                /**\n                 * The position of the button.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 *\n                 * @type {Highcharts.AlignObject}\n                 */\n                position: {\n                /**\n                 * The horizontal alignment of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.align\n                 */\n                /**\n                 * The horizontal offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.x\n                 */\n                /**\n                 * The vertical alignment of the button.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @apioption chart.resetZoomButton.position.verticalAlign\n                 */\n                /**\n                 * The vertical offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.y\n                 */\n                }\n            },\n            /**\n             * The pixel width of the plot area border.\n             *\n             * @sample {highcharts} highcharts/chart/plotborderwidth/\n             *         1px border\n             * @sample {highstock} stock/chart/plotborder/\n             *         2px border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.plotBorderWidth\n             */\n            /**\n             * Whether to apply a drop shadow to the plot area. Requires that\n             * plotBackgroundColor be set. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample {highcharts} highcharts/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highstock} stock/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.plotShadow\n             */\n            /**\n             * When true, cartesian charts like line, spline, area and column are\n             * transformed into the polar coordinate system. This produces _polar\n             * charts_, also known as _radar charts_.\n             *\n             * @sample {highcharts} highcharts/demo/polar/\n             *         Polar chart\n             * @sample {highcharts} highcharts/demo/polar-wind-rose/\n             *         Wind rose, stacked polar column chart\n             * @sample {highcharts} highcharts/demo/polar-spider/\n             *         Spider web chart\n             * @sample {highcharts} highcharts/parallel-coordinates/polar/\n             *         Star plot, multivariate data in a polar chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     2.3.0\n             * @product   highcharts\n             * @requires  highcharts-more\n             * @apioption chart.polar\n             */\n            /**\n             * Whether to reflow the chart to fit the width of the container div\n             * on resizing the window.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/reflow-false/\n             *         False\n             * @sample {highstock} stock/chart/reflow-true/\n             *         True by default\n             * @sample {highstock} stock/chart/reflow-false/\n             *         False\n             * @sample {highmaps} maps/chart/reflow-true/\n             *         True by default\n             * @sample {highmaps} maps/chart/reflow-false/\n             *         False\n             *\n             * @since     2.1\n             */\n            reflow: true,\n            /**\n             * The HTML element where the chart will be rendered. If it is a string,\n             * the element by that id is used. The HTML element can also be passed\n             * by direct reference, or as the first argument of the chart\n             * constructor, in which case the option is not needed.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         String\n             * @sample {highcharts} highcharts/chart/renderto-object/\n             *         Object reference\n             * @sample {highstock} stock/chart/renderto-string/\n             *         String\n             * @sample {highstock} stock/chart/renderto-object/\n             *         Object reference\n             *\n             * @type      {string|Highcharts.HTMLDOMElement}\n             * @apioption chart.renderTo\n             */\n            /**\n             * The background color of the marker square when selecting (zooming\n             * in on) an area of the chart.\n             *\n             * @see In styled mode, the selection marker fill is set with the\n             *      `.highcharts-selection-marker` class.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   rgba(51,92,173,0.25)\n             * @since     2.1.7\n             * @apioption chart.selectionMarkerFill\n             */\n            /**\n             * Whether to apply a drop shadow to the global series group. This causes\n             * all the series to have the same shadow. Contrary to the `series.shadow`\n             * option, this prevents items from casting shadows on each other, like for\n             * others series in a stack. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample highcharts/chart/seriesgroupshadow/\n             *         Shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.seriesGroupShadow\n             */\n            /**\n             * Whether to apply a drop shadow to the outer chart area. Requires\n             * that backgroundColor be set. The shadow can be an object\n             * configuration containing `color`, `offsetX`, `offsetY`, `opacity` and\n             * `width`.\n             *\n             * @sample {highcharts} highcharts/chart/shadow/\n             *         Shadow\n             * @sample {highstock} stock/chart/shadow/\n             *         Shadow\n             * @sample {highmaps} maps/chart/border/\n             *         Chart border and shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to show the axes initially. This only applies to empty charts\n             * where series are added dynamically, as axes are automatically added\n             * to cartesian series.\n             *\n             * @sample {highcharts} highcharts/chart/showaxes-false/\n             *         False by default\n             * @sample {highcharts} highcharts/chart/showaxes-true/\n             *         True\n             *\n             * @type      {boolean}\n             * @since     1.2.5\n             * @product   highcharts gantt\n             * @apioption chart.showAxes\n             */\n            /**\n             * The space between the bottom edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highstock} stock/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   15\n             * @since     2.1\n             * @apioption chart.spacingBottom\n             */\n            /**\n             * The space between the left edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highstock} stock/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingLeft\n             */\n            /**\n             * The space between the right edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingright-100/\n             *         Spacing set to 100\n             * @sample {highcharts} highcharts/chart/spacingright-legend/\n             *         Legend in right position with default spacing\n             * @sample {highstock} stock/chart/spacingright/\n             *         Spacing set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingRight\n             */\n            /**\n             * The space between the top edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingtop-100/\n             *         A top spacing of 100\n             * @sample {highcharts} highcharts/chart/spacingtop-10/\n             *         Floating chart title makes the plot area align to the default\n             *         spacingTop of 10.\n             * @sample {highstock} stock/chart/spacingtop/\n             *         A top spacing of 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingTop\n             */\n            /**\n             * Additional CSS styles to apply inline to the container `div` and the root\n             * SVG.\n             *\n             * According to the CSS syntax documentation, it is recommended to quote\n             * font family names that contain white space, digits, or punctuation\n             * characters other than hyphens. In such cases, wrap the fontFamily\n             * name as follows: `fontFamily: '\"Font name\"'`.\n             *\n             * Since v11, the root font size is 1rem by default, and all child element\n             * are given a relative `em` font size by default. This allows implementers\n             * to control all the chart's font sizes by only setting the root level.\n             *\n             * @see    In styled mode, general chart styles can be set with the\n             *         `.highcharts-root` class.\n             * @sample {highcharts} highcharts/chart/style-serif-font/\n             *         Using a serif type font\n             * @sample {highcharts} highcharts/chart/style-special-font/\n             *         Using a font with special character in name\n             * @sample {highcharts} highcharts/members/relative-font-size/\n             *         Relative font sizes\n             * @sample {highcharts} highcharts/css/em/\n             *         Styled mode with relative font sizes\n             * @sample {highstock} stock/chart/style/\n             *         Using a serif type font\n             * @sample {highmaps} maps/chart/style-serif-font/\n             *         Using a serif type font\n             *\n             * @type      {Highcharts.CSSObject}\n             * @default   {\"fontFamily\": \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', sans-serif\", \"fontSize\":\"1rem\"}\n             * @apioption chart.style\n             */\n            /**\n             * The default series type for the chart. Can be any of the chart types\n             * listed under [plotOptions](#plotOptions) and [series](#series) or can\n             * be a series provided by an additional module.\n             *\n             * In TypeScript this option has no effect in sense of typing and\n             * instead the `type` option must always be set in the series.\n             *\n             * @sample {highcharts} highcharts/chart/type-bar/\n             *         Bar\n             * @sample {highstock} stock/chart/type/\n             *         Areaspline\n             * @sample {highmaps} maps/chart/type-mapline/\n             *         Mapline\n             *\n             * @type       {string}\n             * @default    {highcharts} line\n             * @default    {highstock} line\n             * @default    {highmaps} map\n             * @since      2.1.0\n             * @apioption  chart.type\n             */\n            type: 'line',\n            /**\n             * Decides in what dimensions the user can zoom by dragging the mouse.\n             * Can be one of `x`, `y` or `xy`.\n             *\n             * @see [panKey](#chart.panKey)\n             *\n             * @sample {highcharts} highcharts/chart/zoomtype-none/\n             *         None by default\n             * @sample {highcharts} highcharts/chart/zoomtype-x/\n             *         X\n             * @sample {highcharts} highcharts/chart/zoomtype-y/\n             *         Y\n             * @sample {highcharts} highcharts/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highcharts} highcharts/chart/zoomtype-polar/\n             *         Zoom on polar chart\n             * @sample {highstock} stock/demo/basic-line/\n             *         None by default\n             * @sample {highstock} stock/chart/zoomtype-x/\n             *         X\n             * @sample {highstock} stock/chart/zoomtype-y/\n             *         Y\n             * @sample {highstock} stock/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highmaps} maps/chart/zoomtype-xy/\n             *         Map with selection zoom\n             *\n             * @type       {string}\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @deprecated\n             * @apioption  chart.zoomType\n             */\n            /**\n             * Enables zooming by a single touch, in combination with\n             * [chart.zoomType](#chart.zoomType). When enabled, two-finger pinch\n             * will still work as set up by [chart.pinchType](#chart.pinchType).\n             * However, `zoomBySingleTouch` will interfere with touch-dragging the\n             * chart to read the tooltip. And especially when vertical zooming is\n             * enabled, it will make it hard to scroll vertically on the page.\n             * @since      9.0.0\n             * @sample     highcharts/chart/zoombysingletouch\n             *             Zoom by single touch enabled, with buttons to toggle\n             * @product    highcharts highstock gantt\n             * @deprecated\n             */\n            /**\n             * Chart zooming options.\n             * @since 10.2.1\n             *\n             * @sample     highcharts/plotoptions/sankey-node-color\n             *             Zooming in sankey series\n             * @sample     highcharts/series-treegraph/link-types\n             *             Zooming in treegraph series\n             */\n            zooming: {\n                /**\n                 * Equivalent to [type](#chart.zooming.type), but for multitouch\n                 * gestures only. By default, the `pinchType` is the same as the\n                 * `type` setting. However, pinching can be enabled separately in\n                 * some cases, for example in stock charts where a mouse drag pans the\n                 * chart, while pinching is enabled. When [tooltip.followTouchMove](\n                 * #tooltip.followTouchMove) is true, pinchType only applies to\n                 * two-finger touches.\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @default    {highstock} x\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.pinchType\n                 */\n                /**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * **Note:** For non-cartesian series, the only supported zooming type\n                 * is `xy`, as zooming in a single direction is not applicable due to\n                 * the radial nature of the coordinate system.\n                 *\n                 * @declare    Highcharts.OptionsChartZoomingTypeValue\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.type\n                 */\n                /**\n                 * Set a key to hold when dragging to zoom the chart. This is useful to\n                 * avoid zooming while moving points. Should be set different than\n                 * [chart.panKey](#chart.panKey).\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @requires   modules/draggable-points\n                 * @apioption  chart.zooming.key\n                 */\n                /**\n                 * Enables zooming by a single touch, in combination with\n                 * [chart.zooming.type](#chart.zooming.type). When enabled, two-finger\n                 * pinch will still work as set up by [chart.zooming.pinchType]\n                 * (#chart.zooming.pinchType). However, `singleTouch` will interfere\n                 * with touch-dragging the chart to read the tooltip. And especially\n                 * when vertical zooming is enabled, it will make it hard to scroll\n                 * vertically on the page.\n                 *\n                 * @sample  highcharts/chart/zoombysingletouch\n                 *          Zoom by single touch enabled, with buttons to toggle\n                 *\n                 * @product highcharts highstock gantt\n                 */\n                singleTouch: false,\n                /**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 */\n                resetButton: {\n                    /**\n                     * What frame the button placement should be related to. Can be\n                     * either `plotBox` or `spacingBox`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     *\n                     * @type      {Highcharts.ButtonRelativeToValue}\n                     * @default   plot\n                     * @apioption chart.zooming.resetButton.relativeTo\n                     */\n                    /**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                     * border radius. The theme also supports `style`, a collection of\n                     * CSS properties for the text. Equivalent attributes for the hover\n                     * state are given in `theme.states.hover`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     *\n                     * @type  {Highcharts.SVGAttributes}\n                     * @since 10.2.1\n                     */\n                    theme: {\n                        /** @internal */\n                        zIndex: 6\n                    },\n                    /**\n                     * The position of the button.\n                     *\n                     * Note: Adjusting position values might cause overlap with chart\n                     * elements. Ensure coordinates do not obstruct other components or\n                     * data visibility.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     *\n                     * @type  {Highcharts.AlignObject}\n                     * @since 10.2.1\n                     */\n                    position: {\n                        /**\n                         * The horizontal alignment of the button.\n                         */\n                        align: 'right',\n                        /**\n                         * The horizontal offset of the button.\n                         */\n                        x: -10,\n                        /**\n                         * The vertical alignment of the button.\n                         *\n                         * @type       {Highcharts.VerticalAlignValue}\n                         * @default    top\n                         * @apioption  chart.zooming.resetButton.position.verticalAlign\n                         */\n                        /**\n                         * The vertical offset of the button.\n                         */\n                        y: 10\n                    }\n                }\n            },\n            /**\n             * An explicit width for the chart. By default (when `null`) the width\n             * is calculated from the offset width of the containing element.\n             *\n             * @sample {highcharts} highcharts/chart/width/\n             *         800px wide\n             * @sample {highstock} stock/chart/width/\n             *         800px wide\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             *\n             * @type {null|number|string}\n             */\n            width: null,\n            /**\n             * An explicit height for the chart. If a _number_, the height is\n             * given in pixels. If given a _percentage string_ (for example\n             * `'56%'`), the height is given as the percentage of the actual chart\n             * width. This allows for preserving the aspect ratio across responsive\n             * sizes.\n             *\n             * By default (when `null`) the height is calculated from the offset\n             * height of the containing element, or 400 pixels if the containing\n             * element's height is 0.\n             *\n             * @sample {highcharts} highcharts/chart/height/\n             *         Forced 200px height\n             * @sample {highstock} stock/chart/height/\n             *         300px height\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             * @sample highcharts/chart/height-percent/\n             *         Highcharts with percentage height\n             * @sample highcharts/chart/height-inherited/\n             *         Chart with inherited height\n             *\n             * @type {null|number|string}\n             */\n            height: null,\n            /**\n             * The color of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/bordercolor/\n             *         Brown border\n             * @sample {highstock} stock/chart/border/\n             *         Brown border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: \"#334eff\" /* Palette.highlightColor80 */,\n            /**\n             * The pixel width of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/borderwidth/\n             *         5px border\n             * @sample {highstock} stock/chart/border/\n             *         2px border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.borderWidth\n             */\n            /**\n             * The background color or gradient for the outer chart area.\n             *\n             * @see In styled mode, the background is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The background color or gradient for the plot area.\n             *\n             * @see In styled mode, the plot background is set with the\n             *      `.highcharts-plot-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption chart.plotBackgroundColor\n             */\n            /**\n             * The URL for an image to use as the plot background. To set an image\n             * as the background for the entire chart, set a CSS background image\n             * to the container element. Note that for the image to be applied to\n             * exported charts, its URL needs to be accessible by the export server.\n             *\n             * @see In styled mode, a plot background image can be set with the\n             *      `.highcharts-plot-background` class and a [custom pattern](\n             *      https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundimage/\n             *         Skies\n             * @sample {highstock} stock/chart/plotbackgroundimage/\n             *         Skies\n             *\n             * @type      {string}\n             * @apioption chart.plotBackgroundImage\n             */\n            /**\n             * The color of the inner chart or plot area border.\n             *\n             * @see In styled mode, a plot border stroke can be set with the\n             *      `.highcharts-plot-border` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbordercolor/\n             *         Blue border\n             * @sample {highstock} stock/chart/plotborder/\n             *         Blue border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            plotBorderColor: \"#cccccc\" /* Palette.neutralColor20 */\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartDefaults;\n    });\n    _registerModule(_modules, 'Core/Color/Palettes.js', [], function () {\n        /**\n         * Series palettes for Highcharts. Series colors are defined in highcharts.css.\n         * **Do not edit this file!** This file is generated using the 'gulp palette' task.\n         * @private\n         */\n        const SeriesPalettes = {\n            /**\n             * Colors for data series and points\n             */\n            colors: [\n                '#2caffe',\n                '#544fc5',\n                '#00e272',\n                '#fe6a35',\n                '#6b8abc',\n                '#d568fb',\n                '#2ee0ca',\n                '#fa4b42',\n                '#feb56a',\n                '#91e8e1'\n            ]\n        };\n\n        return SeriesPalettes;\n    });\n    _registerModule(_modules, 'Shared/TimeBase.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { pageLang, win } = H;\n        const { defined, error, extend, isNumber, isObject, isString, merge, objectEach, pad, splat, timeUnits, ucfirst } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        // To do: Remove this when we no longer need support for Safari < v14.1\n        const hasOldSafariBug = H.isSafari &&\n            win.Intl &&\n            !win.Intl.DateTimeFormat.prototype.formatRange;\n        const isDateTimeFormatOptions = (obj) => obj.main === void 0;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The Time class. Time settings are applied in general for each page using\n         * `Highcharts.setOptions`, or individually for each Chart item through the\n         * [time](https://api.highcharts.com/highcharts/time) options set.\n         *\n         * The Time object is available from {@link Highcharts.Chart#time}, which refers\n         * to  `Highcharts.time` unless individual time settings are applied for each\n         * chart.\n         *\n         * When configuring time settings for individual chart instances, be aware that\n         * using `Highcharts.dateFormat` or `Highcharts.time.dateFormat` within\n         * formatter callbacks relies on the global time object, which applies the\n         * global language and time zone settings. To ensure charts with local time\n         * settings function correctly, use `chart.time.dateFormat? instead. However,\n         * the recommended best practice is to use `setOptions` to define global time\n         * settings unless specific configurations are needed for each chart.\n         *\n         * @example\n         * // Apply time settings globally\n         * Highcharts.setOptions({\n         *     time: {\n         *         timezone: 'Europe/London'\n         *     }\n         * });\n         *\n         * // Apply time settings by instance\n         * const chart = Highcharts.chart('container', {\n         *     time: {\n         *         timezone: 'America/New_York'\n         *     },\n         *     series: [{\n         *         data: [1, 4, 3, 5]\n         *     }]\n         * });\n         *\n         * // Use the Time object of a chart instance\n         * console.log(\n         *        'Current time in New York',\n         *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n         * );\n         *\n         * // Standalone use\n         * const time = new Highcharts.Time({\n         *    timezone: 'America/New_York'\n         * });\n         * const s = time.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2020, 0, 1));\n         * console.log(s); // => 2019-12-31 19:00:00\n         *\n         * @since 6.0.5\n         *\n         * @class\n         * @name Highcharts.Time\n         *\n         * @param {Highcharts.TimeOptions} [options] Time options as defined in\n         * [chart.options.time](/highcharts/time).\n         */\n        class TimeBase {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(options, lang) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = {\n                    timezone: 'UTC'\n                };\n                this.variableTimezone = false;\n                this.Date = win.Date;\n                this.update(options);\n                this.lang = lang;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Update the Time object with current options. It is called internally on\n             * initializing Highcharts, after running `Highcharts.setOptions` and on\n             * `Chart.update`.\n             *\n             * @private\n             * @function Highcharts.Time#update\n             *\n             * @param {Highcharts.TimeOptions} [options]\n             *\n             */\n            update(options = {}) {\n                this.dTLCache = {};\n                this.options = options = merge(true, this.options, options);\n                const { timezoneOffset, useUTC, locale } = options;\n                // Allow using a different Date class\n                this.Date = options.Date || win.Date || Date;\n                // Assign the time zone. Handle the legacy, deprecated `useUTC` option.\n                let timezone = options.timezone;\n                if (defined(useUTC)) {\n                    timezone = useUTC ? 'UTC' : void 0;\n                }\n                // The Etc/GMT time zones do not support offsets with half-hour\n                // resolutions\n                if (timezoneOffset && timezoneOffset % 60 === 0) {\n                    timezone = 'Etc/GMT' + ((timezoneOffset > 0 ? '+' : '')) + timezoneOffset / 60;\n                }\n                /*\n                 * The time object has options allowing for variable time zones, meaning\n                 * the axis ticks or series data needs to consider this.\n                 */\n                this.variableTimezone = timezone !== 'UTC' &&\n                    timezone?.indexOf('Etc/GMT') !== 0;\n                this.timezone = timezone;\n                // Update locale.\n                if (this.lang && locale) {\n                    this.lang.locale = locale;\n                }\n                // Assign default time formats from locale strings\n                ['months', 'shortMonths', 'weekdays', 'shortWeekdays'].forEach((name) => {\n                    const isMonth = /months/i.test(name), isShort = /short/.test(name), options = {\n                        timeZone: 'UTC'\n                    };\n                    options[isMonth ? 'month' : 'weekday'] = isShort ? 'short' : 'long';\n                    this[name] = (isMonth ?\n                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] :\n                        [3, 4, 5, 6, 7, 8, 9]).map((position) => this.dateFormat(options, (isMonth ? 31 : 1) * 24 * 36e5 * position));\n                });\n            }\n            /**\n             * Get a date in terms of numbers (year, month, day etc) for further\n             * processing. Takes the current `timezone` setting into account. Inverse of\n             * `makeTime` and the native `Date` constructor and `Date.UTC`.\n             *\n             * The date is returned in array format with the following indices:\n             *\n             * 0: year,\n             * 1: month (zero based),\n             * 2: day,\n             * 3: hours,\n             * 4: minutes,\n             * 5: seconds,\n             * 6: milliseconds,\n             * 7: weekday (Sunday as 0)\n             *\n             * @function Highcharts.Time#toParts\n             *\n             * @param {number|Date} [timestamp]\n             *                 The timestamp in milliseconds since January 1st 1970.\n             *                 A Date object is also accepted.\n             *\n             * @return {Array<number>} The date parts in array format.\n             */\n            toParts(timestamp) {\n                const [weekday, dayOfMonth, month, year, hours, minutes, seconds] = this.dateTimeFormat({\n                    weekday: 'narrow',\n                    day: 'numeric',\n                    month: 'numeric',\n                    year: 'numeric',\n                    hour: 'numeric',\n                    minute: 'numeric',\n                    second: 'numeric'\n                }, timestamp, 'es')\n                    // The ', ' splitter is for all modern browsers:\n                    //      L, 6/3/2023, 14:30:00\n                    // The ' ' splitter is for legacy Safari with no comma between date\n                    // and time (#22445):\n                    //      L, 6/3/2023 14:30:00\n                    .split(/(?:, | |\\/|:)/g);\n                return [\n                    year,\n                    +month - 1,\n                    dayOfMonth,\n                    hours,\n                    minutes,\n                    seconds,\n                    // Milliseconds\n                    Math.floor(Number(timestamp) || 0) % 1000,\n                    // Spanish weekday index\n                    'DLMXJVS'.indexOf(weekday)\n                ].map(Number);\n            }\n            /**\n             * Shorthand to get a cached `Intl.DateTimeFormat` instance.\n             */\n            dateTimeFormat(options, timestamp, locale = this.options.locale || pageLang) {\n                const cacheKey = JSON.stringify(options) + locale;\n                if (isString(options)) {\n                    options = this.str2dtf(options);\n                }\n                let dTL = this.dTLCache[cacheKey];\n                if (!dTL) {\n                    options.timeZone ?? (options.timeZone = this.timezone);\n                    try {\n                        dTL = new Intl.DateTimeFormat(locale, options);\n                    }\n                    catch (e) {\n                        if (/Invalid time zone/i.test(e.message)) {\n                            error(34);\n                            options.timeZone = 'UTC';\n                            dTL = new Intl.DateTimeFormat(locale, options);\n                        }\n                        else {\n                            error(e.message, false);\n                        }\n                    }\n                }\n                this.dTLCache[cacheKey] = dTL;\n                return dTL?.format(timestamp) || '';\n            }\n            /**\n             * Take a locale-aware string format and return a full DateTimeFormat in\n             * object form.\n             */\n            str2dtf(s, dtf = {}) {\n                const mapping = {\n                    L: { fractionalSecondDigits: 3 },\n                    S: { second: '2-digit' },\n                    M: { minute: 'numeric' },\n                    H: { hour: '2-digit' },\n                    k: { hour: 'numeric' },\n                    E: { weekday: 'narrow' },\n                    a: { weekday: 'short' },\n                    A: { weekday: 'long' },\n                    d: { day: '2-digit' },\n                    e: { day: 'numeric' },\n                    b: { month: 'short' },\n                    B: { month: 'long' },\n                    m: { month: '2-digit' },\n                    o: { month: 'numeric' },\n                    y: { year: '2-digit' },\n                    Y: { year: 'numeric' }\n                };\n                Object.keys(mapping).forEach((key) => {\n                    if (s.indexOf(key) !== -1) {\n                        extend(dtf, mapping[key]);\n                    }\n                });\n                return dtf;\n            }\n            /**\n             * Make a time and returns milliseconds. Similar to `Date.UTC`, but takes\n             * the current `timezone` setting into account.\n             *\n             * @function Highcharts.Time#makeTime\n             *\n             * @param {number} year\n             *        The year\n             *\n             * @param {number} month\n             *        The month. Zero-based, so January is 0.\n             *\n             * @param {number} [date=1]\n             *        The day of the month\n             *\n             * @param {number} [hours=0]\n             *        The hour of the day, 0-23.\n             *\n             * @param {number} [minutes=0]\n             *        The minutes\n             *\n             * @param {number} [seconds=0]\n             *        The seconds\n             *\n             * @return {number}\n             *         The time in milliseconds since January 1st 1970.\n             */\n            makeTime(year, month, date = 1, hours = 0, minutes, seconds, milliseconds) {\n                // eslint-disable-next-line new-cap\n                let d = this.Date.UTC(year, month, date, hours, minutes || 0, seconds || 0, milliseconds || 0);\n                if (this.timezone !== 'UTC') {\n                    const offset = this.getTimezoneOffset(d);\n                    d += offset;\n                    // Adjustments close to DST transitions\n                    if (\n                    // Optimize for speed by limiting the number of calls to\n                    // `getTimezoneOffset`. According to\n                    // https://en.wikipedia.org/wiki/Daylight_saving_time_by_country,\n                    // DST change may only occur in these months.\n                    [2, 3, 8, 9, 10, 11].indexOf(month) !== -1 &&\n                        // DST transitions occur only in the night-time\n                        (hours < 5 || hours > 20)) {\n                        const newOffset = this.getTimezoneOffset(d);\n                        if (offset !== newOffset) {\n                            d += newOffset - offset;\n                            // A special case for transitioning from summer time to winter\n                            // time. When the clock is set back, the same time is repeated\n                            // twice, i.e. 02:30 am is repeated since the clock is set back\n                            // from 3 am to 2 am. We need to make the same time as local\n                            // Date does.\n                        }\n                        else if (offset - 36e5 === this.getTimezoneOffset(d - 36e5) &&\n                            !hasOldSafariBug) {\n                            d -= 36e5;\n                        }\n                    }\n                }\n                return d;\n            }\n            /**\n             * Parse a datetime string. Unless the string contains time zone\n             * information, apply the current `timezone` from options. If the argument\n             * is a number, return it.\n             *\n             * @function Highcharts.Time#parse\n             * @param    {string|number|undefined} s The datetime string to parse\n             * @return   {number|undefined}          Parsed JavaScript timestamp\n             */\n            parse(s) {\n                if (!isString(s)) {\n                    return s ?? void 0;\n                }\n                s = s\n                    // Firefox fails on YYYY/MM/DD\n                    .replace(/\\//g, '-')\n                    // Replace some non-standard notations\n                    .replace(/(GMT|UTC)/, '');\n                // Extend shorthand hour timezone offset like +02\n                // .replace(/([+-][0-9]{2})$/, '$1:00');\n                // Check if the string has time zone information\n                const hasTimezone = s.indexOf('Z') > -1 ||\n                    /([+-][0-9]{2}):?[0-9]{2}$/.test(s), \n                // YYYY-MM-DD and YYYY-MM are always UTC\n                isYYYYMMDD = /^[0-9]{4}-[0-9]{2}(-[0-9]{2}|)$/.test(s);\n                if (!hasTimezone && !isYYYYMMDD) {\n                    s += 'Z';\n                }\n                const ts = Date.parse(s);\n                if (isNumber(ts)) {\n                    // Unless the string contains time zone information, convert from\n                    // the local time result of `Date.parse` via UTC into the current\n                    // timezone of the time object.\n                    return ts + ((!hasTimezone || isYYYYMMDD) ?\n                        this.getTimezoneOffset(ts) :\n                        0);\n                }\n            }\n            /**\n             * Get the time zone offset based on the current timezone information as\n             * set in the global options.\n             *\n             * @function Highcharts.Time#getTimezoneOffset\n             *\n             * @param {number} timestamp\n             *        The JavaScript timestamp to inspect.\n             *\n             * @return {number}\n             *         The timezone offset in minutes compared to UTC.\n             */\n            getTimezoneOffset(timestamp) {\n                if (this.timezone !== 'UTC') {\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    const [date, gmt, hours, colon, minutes = 0] = this.dateTimeFormat({ timeZoneName: 'shortOffset' }, timestamp, 'en')\n                        .split(/(GMT|:)/)\n                        .map(Number), offset = -(hours + minutes / 60) * 60 * 60000;\n                    // Possible future NaNs stop here\n                    if (isNumber(offset)) {\n                        return offset;\n                    }\n                }\n                return 0;\n            }\n            /**\n             * Formats a JavaScript date timestamp (milliseconds since January 1 1970)\n             * into a human readable date string.\n             *\n             * The `format` parameter accepts two types of values:\n             * - An object containing settings that are passed directly on to\n             *   [Intl.DateTimeFormat.prototype.format](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format).\n             * - A format string containing either individual or locale-aware format\n             *   keys. **Individual keys**, for example `%Y-%m-%d`, are listed below.\n             *   **Locale-aware keys** are grouped by square brackets, for example\n             *   `%[Ymd]`. The order of keys within the square bracket doesn't affect\n             *   the output, which is determined by the locale. See example below.\n             *   Internally, the locale-aware format keys are just a shorthand for the\n             *   full object formats, but are particularly practical in\n             *   [templating](https://www.highcharts.com/docs/chart-concepts/templating)\n             *   where full object definitions are not an option.\n             *\n             * The available string format keys are listed below. Additional formats can\n             * be given in the {@link Highcharts.dateFormats} hook.\n             *\n             * Supported format keys:\n             * | Key  | Description                     | Notes on locale-aware format |\n             * -------|----------------------------------------------|-------|\n             * | `%A` | Long weekday, like 'Monday'                  |       |\n             * | `%a` | Short weekday, like 'Mon'                    |       |\n             * | `%E` | Narrow weekday, single character             |       |\n             * | `%d` | Two digit day of the month, 01 to 31         |       |\n             * | `%e` | Day of the month, 1 through 31               |       |\n             * | `%w` | Day of the week, 0 through 6                 | N/A   |\n             * | `%v` | The prefix \"week from\", read from `lang.weekFrom` | N/A |\n             * | `%b` | Short month, like 'Jan'                      |       |\n             * | `%B` | Long month, like 'January'                   |       |\n             * | `%m` | Two digit month number, 01 through 12        |       |\n             * | `%o` | Month number, 1 through 12                   |       |\n             * | `%y` | Two digits year, like 24 for 2024            |       |\n             * | `%Y` | Four digits year, like 2024                  |       |\n             * | `%H` | Two digits hours in 24h format, 00 through 23 | Depending on the locale, 12h format may be instered. |\n             * | `%k` | Hours in 24h format, 0 through 23            | Depending on the locale, 12h format may be instered. |\n             * | `%I` | Two digits hours in 12h format, 00 through 11 | N/A. The locale determines the hour format. |\n             * | `%l` | Hours in 12h format, 1 through 12            | N/A. The locale determines the hour format. |\n             * | `%M` | Two digits minutes, 00 through 59            |       |\n             * | `%p` | Upper case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n             * | `%P` | Lower case AM or PM                          | N/A. The locale determines whether to add AM and PM. |\n             * | `%S` | Two digits seconds, 00 through 59            |       |\n             * | `%L` | Milliseconds (naming from Ruby)              |       |\n             *\n             * @example\n             * // Object format, US English\n             * const time1 = new Highcharts.Time({ locale: 'en-US' });\n             * console.log(\n             *     time1.dateFormat({\n             *         day: 'numeric',\n             *         month: 'short',\n             *         year: 'numeric',\n             *         hour: 'numeric',\n             *         minute: 'numeric'\n             *     }, Date.UTC(2024, 11, 31))\n             * ); // => Dec 31, 2024, 12:00 AM\n             *\n             * // Object format, British English\n             * const time2 = new Highcharts.Time({ locale: 'en-GB' });\n             * console.log(\n             *     time2.dateFormat({\n             *         day: 'numeric',\n             *         month: 'short',\n             *         year: 'numeric',\n             *         hour: 'numeric',\n             *         minute: 'numeric'\n             *     }, Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * // Individual key string replacement\n             * const time3 = new Highcharts.Time();\n             * console.log(\n             *     time3.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2024, 11, 31))\n             * ); // => 2024-12-31 00:00:00\n             *\n             * // Locale-aware keys, US English\n             * const time4 = new Highcharts.Time({ locale: 'en-US' });\n             * console.log(\n             *     time4.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n             * ); // => Dec 31, 2024, 12:00 AM\n             *\n             * // Locale-aware keys, British English\n             * const time5 = new Highcharts.Time({ locale: 'en-GB' });\n             * console.log(\n             *     time5.dateFormat('%[YebHM]', Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * // Mixed locale-aware and individual keys\n             * console.log(\n             *     time5.dateFormat('%[Yeb], %H:%M', Date.UTC(2024, 11, 31))\n             * ); // => 31 Dec 2024, 00:00\n             *\n             * @function Highcharts.Time#dateFormat\n             *\n             * @param {string|Highcharts.DateTimeFormatOptions} format\n             *        The desired string format where various time representations are\n             *        prefixed with %, or an object representing the locale-aware format\n             *        options.\n             *\n             * @param {number} [timestamp]\n             *        The JavaScript timestamp.\n             *\n             * @param {boolean} [upperCaseFirst=false]\n             *        Upper case first letter in the return.\n             *\n             * @return {string}\n             *         The formatted date.\n             */\n            dateFormat(format, timestamp, upperCaseFirst) {\n                const lang = this.lang;\n                if (!defined(timestamp) || isNaN(timestamp)) {\n                    return lang?.invalidDate || '';\n                }\n                format = format ?? '%Y-%m-%d %H:%M:%S';\n                // First, identify and replace locale-aware formats like %[Ymd]\n                if (isString(format)) {\n                    const localeAwareRegex = /%\\[([a-zA-Z]+)\\]/g;\n                    let match;\n                    while ((match = localeAwareRegex.exec(format))) {\n                        format = format.replace(match[0], this.dateTimeFormat(match[1], timestamp, lang?.locale));\n                    }\n                }\n                // Then, replace static formats like %Y, %m, %d etc.\n                if (isString(format) && format.indexOf('%') !== -1) {\n                    const time = this, [fullYear, month, dayOfMonth, hours, minutes, seconds, milliseconds, weekday] = this.toParts(timestamp), langWeekdays = lang?.weekdays || this.weekdays, shortWeekdays = lang?.shortWeekdays || this.shortWeekdays, months = lang?.months || this.months, shortMonths = lang?.shortMonths || this.shortMonths, \n                    // List all format keys. Custom formats can be added from the\n                    // outside.\n                    replacements = extend({\n                        // Day\n                        // Short weekday, like 'Mon'\n                        a: shortWeekdays ?\n                            shortWeekdays[weekday] :\n                            langWeekdays[weekday].substr(0, 3),\n                        // Long weekday, like 'Monday'\n                        A: langWeekdays[weekday],\n                        // Two digit day of the month, 01 to 31\n                        d: pad(dayOfMonth),\n                        // Day of the month, 1 through 31\n                        e: pad(dayOfMonth, 2, ' '),\n                        // Day of the week, 0 through 6\n                        w: weekday,\n                        // Week (none implemented)\n                        // 'W': weekNumber(),\n                        v: lang?.weekFrom ?? '',\n                        // Month\n                        // Short month, like 'Jan'\n                        b: shortMonths[month],\n                        // Long month, like 'January'\n                        B: months[month],\n                        // Two digit month number, 01 through 12\n                        m: pad(month + 1),\n                        // Month number, 1 through 12 (#8150)\n                        o: month + 1,\n                        // Year\n                        // Two digits year, like 09 for 2009\n                        y: fullYear.toString().substr(2, 2),\n                        // Four digits year, like 2009\n                        Y: fullYear,\n                        // Time\n                        // Two digits hours in 24h format, 00 through 23\n                        H: pad(hours),\n                        // Hours in 24h format, 0 through 23\n                        k: hours,\n                        // Two digits hours in 12h format, 00 through 11\n                        I: pad((hours % 12) || 12),\n                        // Hours in 12h format, 1 through 12\n                        l: (hours % 12) || 12,\n                        // Two digits minutes, 00 through 59\n                        M: pad(minutes),\n                        // Upper case AM or PM\n                        p: hours < 12 ? 'AM' : 'PM',\n                        // Lower case AM or PM\n                        P: hours < 12 ? 'am' : 'pm',\n                        // Two digits seconds, 00 through 59\n                        S: pad(seconds),\n                        // Milliseconds (naming from Ruby)\n                        L: pad(milliseconds, 3)\n                    }, H.dateFormats);\n                    // Do the replaces\n                    objectEach(replacements, function (val, key) {\n                        if (isString(format)) {\n                            // Regex would do it in one line, but this is faster\n                            while (format.indexOf('%' + key) !== -1) {\n                                format = format.replace('%' + key, typeof val === 'function' ?\n                                    val.call(time, timestamp) :\n                                    val);\n                            }\n                        }\n                    });\n                }\n                else if (isObject(format)) {\n                    const tzHours = (this.getTimezoneOffset(timestamp) || 0) /\n                        (60000 * 60), timeZone = this.timezone || ('Etc/GMT' + (tzHours >= 0 ? '+' : '') + tzHours), { prefix = '', suffix = '' } = format;\n                    format = prefix + this.dateTimeFormat(extend({ timeZone }, format), timestamp) + suffix;\n                }\n                // Optionally sentence-case the string and return\n                return upperCaseFirst ? ucfirst(format) : format;\n            }\n            /**\n             * Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\n             * an object.\n             * @private\n             * @param {string|Array<T>|Highcharts.Dictionary<T>} f\n             * General format description\n             * @return {Highcharts.Dictionary<T>}\n             * The object definition\n             */\n            resolveDTLFormat(f) {\n                if (!isObject(f, true)) { // Check for string or array\n                    f = splat(f);\n                    return {\n                        main: f[0],\n                        from: f[1],\n                        to: f[2]\n                    };\n                }\n                // Type-check DateTimeFormatOptions against DateTimeLabelFormatObject\n                if (isObject(f, true) && isDateTimeFormatOptions(f)) {\n                    return { main: f };\n                }\n                return f;\n            }\n            /**\n             * Get the optimal date format for a point, based on a range.\n             *\n             * @private\n             * @function Highcharts.Time#getDateFormat\n             *\n             * @param {number} range\n             *        The time range\n             *\n             * @param {number} timestamp\n             *        The timestamp of the date\n             *\n             * @param {number} startOfWeek\n             *        An integer representing the first day of the week, where 0 is\n             *        Sunday.\n             *\n             * @param {Highcharts.Dictionary<string>} dateTimeLabelFormats\n             *        A map of time units to formats.\n             *\n             * @return {string}\n             *         The optimal date format for a point.\n             */\n            getDateFormat(range, timestamp, startOfWeek, dateTimeLabelFormats) {\n                const dateStr = this.dateFormat('%m-%d %H:%M:%S.%L', timestamp), blank = '01-01 00:00:00.000', strpos = {\n                    millisecond: 15,\n                    second: 12,\n                    minute: 9,\n                    hour: 6,\n                    day: 3\n                };\n                let n = 'millisecond', \n                // For sub-millisecond data, #4223\n                lastN = n;\n                for (n in timeUnits) { // eslint-disable-line guard-for-in\n                    // If the range is exactly one week and we're looking at a\n                    // Sunday/Monday, go for the week format\n                    if (range &&\n                        range === timeUnits.week &&\n                        +this.dateFormat('%w', timestamp) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n                    // The first format that is too great for the range\n                    if (range && timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] &&\n                        dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n                    // Weeks are outside the hierarchy, only apply them on\n                    // Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n                return this.resolveDTLFormat(dateTimeLabelFormats[n]).main;\n            }\n        }\n        /* *\n         *\n         * Default export\n         *\n         * */\n        /* *\n         *\n         * API Declarations\n         *\n         * */\n        /**\n         * Normalized interval.\n         *\n         * @interface Highcharts.TimeNormalizedObject\n         */ /**\n        * The count.\n        *\n        * @name Highcharts.TimeNormalizedObject#count\n        * @type {number|undefined}\n        */ /**\n        * The interval in axis values (ms).\n        *\n        * @name Highcharts.TimeNormalizedObject#unitRange\n        * @type {number}\n        */\n        /**\n         * Function of an additional date format specifier.\n         *\n         * @callback Highcharts.TimeFormatCallbackFunction\n         *\n         * @param {number} timestamp\n         *        The time to format.\n         *\n         * @return {string}\n         *         The formatted portion of the date.\n         */\n        /**\n         * Time ticks.\n         *\n         * @interface Highcharts.AxisTickPositionsArray\n         * @extends global.Array<number>\n         */ /**\n        * @name Highcharts.AxisTickPositionsArray#info\n        * @type {Highcharts.TimeTicksInfoObject|undefined}\n        */\n        /**\n         * A callback to return the time zone offset for a given datetime. It\n         * takes the timestamp in terms of milliseconds since January 1 1970,\n         * and returns the timezone offset in minutes. This provides a hook\n         * for drawing time based charts in specific time zones using their\n         * local DST crossover dates, with the help of external libraries.\n         *\n         * @callback Highcharts.TimezoneOffsetCallbackFunction\n         *\n         * @param {number} timestamp\n         * Timestamp in terms of milliseconds since January 1 1970.\n         *\n         * @return {number}\n         * Timezone offset in minutes.\n         */\n        /**\n         * Options for formatting dates and times using the [Intl.DateTimeFormat](\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\n         * ) API, and extended with some custom options for Highcharts.\n         *\n         * @interface Highcharts.DateTimeFormatOptions\n         */ /**\n        * The locale matching algorithm to use.\n        *\n        * @name Highcharts.DateTimeFormatOptions#localeMatcher\n        * @type {string|undefined}\n        */ /**\n        * The time zone to use. The default is the browser's default time zone.\n        *\n        * @name Highcharts.DateTimeFormatOptions#timeZone\n        * @type {string|undefined}\n        */ /**\n        * Whether to use 12-hour time (as opposed to 24-hour time).\n        *\n        * @name Highcharts.DateTimeFormatOptions#hour12\n        * @type {'auto'|'always'|'never'|undefined}\n        */ /**\n        * The format matching algorithm to use.\n        *\n        * @name Highcharts.DateTimeFormatOptions#formatMatcher\n        * @type {string|undefined}\n        */ /**\n        * The representation of the weekday.\n        *\n        * @name Highcharts.DateTimeFormatOptions#weekday\n        * @type {'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the era.\n        *\n        * @name Highcharts.DateTimeFormatOptions#era\n        * @type {'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the year.\n        *\n        * @name Highcharts.DateTimeFormatOptions#year\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the month.\n        * \"narrow\", \"short\", \"long\".\n        *\n        * @name Highcharts.DateTimeFormatOptions#month\n        * @type {'numeric'|'2-digit'|'narrow'|'short'|'long'|undefined}\n        */ /**\n        * The representation of the day.\n        *\n        * @name Highcharts.DateTimeFormatOptions#day\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the hour.\n        *\n        * @name Highcharts.DateTimeFormatOptions#hour\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the minute.\n        *\n        * @name Highcharts.DateTimeFormatOptions#minute\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The representation of the second.\n        *\n        * @name Highcharts.DateTimeFormatOptions#second\n        * @type {'numeric'|'2-digit'|undefined}\n        */ /**\n        * The number of fractional digits to use. 3 means milliseconds.\n        *\n        * @name Highcharts.DateTimeFormatOptions#fractionalSecondDigits\n        * @type {number|undefined}\n        */ /**\n        * The representation of the time zone name.\n        *\n        * @name Highcharts.DateTimeFormatOptions#timeZoneName\n        * @type {'short'|'long'|undefined}\n        */ /**\n        * A prefix for the time string. Custom Highcharts option.\n        *\n        * @name Highcharts.DateTimeFormatOptions#prefix\n        * @type {'string'|undefined}\n        */ /**\n        * A suffix for the time string. Custom Highcharts option.\n        *\n        * @name Highcharts.DateTimeFormatOptions#suffix\n        * @type {'string'|undefined}\n        */\n        ''; // Keeps doclets above in JS file\n\n        return TimeBase;\n    });\n    _registerModule(_modules, 'Core/Time.js', [_modules['Shared/TimeBase.js'], _modules['Core/Utilities.js']], function (TimeBase, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, extend, timeUnits } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        class Time extends TimeBase {\n            /**\n             * Return an array with time positions distributed on round time values\n             * right and right after min and max. Used in datetime axes as well as for\n             * grouping data on a datetime axis.\n             *\n             * @function Highcharts.Time#getTimeTicks\n             *\n             * @param {Highcharts.TimeNormalizedObject} normalizedInterval\n             *        The interval in axis values (ms) and the count\n             *\n             * @param {number} [min]\n             *        The minimum in axis values\n             *\n             * @param {number} [max]\n             *        The maximum in axis values\n             *\n             * @param {number} [startOfWeek=1]\n             *\n             * @return {Highcharts.AxisTickPositionsArray}\n             * Time positions\n             */\n            getTimeTicks(normalizedInterval, min, max, startOfWeek) {\n                const time = this, tickPositions = [], higherRanks = {}, { count = 1, unitRange } = normalizedInterval;\n                let [year, month, dayOfMonth, hours, minutes, seconds] = time.toParts(min), milliseconds = (min || 0) % 1000, variableDayLength;\n                startOfWeek ?? (startOfWeek = 1);\n                if (defined(min)) { // #1300\n                    milliseconds = unitRange >= timeUnits.second ?\n                        0 : // #3935\n                        count * Math.floor(milliseconds / count);\n                    if (unitRange >= timeUnits.second) { // Second\n                        seconds = unitRange >= timeUnits.minute ?\n                            0 : // #3935\n                            count * Math.floor(seconds / count);\n                    }\n                    if (unitRange >= timeUnits.minute) { // Minute\n                        minutes = unitRange >= timeUnits.hour ?\n                            0 :\n                            count * Math.floor(minutes / count);\n                    }\n                    if (unitRange >= timeUnits.hour) { // Hour\n                        hours = unitRange >= timeUnits.day ?\n                            0 :\n                            count * Math.floor(hours / count);\n                    }\n                    if (unitRange >= timeUnits.day) { // Day\n                        dayOfMonth = unitRange >= timeUnits.month ?\n                            1 :\n                            Math.max(1, count * Math.floor(dayOfMonth / count));\n                    }\n                    if (unitRange >= timeUnits.month) { // Month\n                        month = unitRange >= timeUnits.year ? 0 :\n                            count * Math.floor(month / count);\n                    }\n                    if (unitRange >= timeUnits.year) { // Year\n                        year -= year % count;\n                    }\n                    // Week is a special case that runs outside the hierarchy\n                    if (unitRange === timeUnits.week) {\n                        if (count) {\n                            min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n                        }\n                        // Get start of current week, independent of count\n                        const weekday = this.dateTimeFormat({\n                            timeZone: this.timezone,\n                            weekday: 'narrow'\n                        }, min, 'es'), \n                        // Spanish weekday index\n                        weekdayNo = 'DLMXJVS'.indexOf(weekday);\n                        dayOfMonth += -weekdayNo + startOfWeek +\n                            // We don't want to skip days that are before\n                            // startOfWeek (#7051)\n                            (weekdayNo < startOfWeek ? -7 : 0);\n                    }\n                    min = time.makeTime(year, month, dayOfMonth, hours, minutes, seconds, milliseconds);\n                    // Handle local timezone offset\n                    if (time.variableTimezone && defined(max)) {\n                        // Detect whether we need to take the DST crossover into\n                        // consideration. If we're crossing over DST, the day length may\n                        // be 23h or 25h and we need to compute the exact clock time for\n                        // each tick instead of just adding hours. This comes at a cost,\n                        // so first we find out if it is needed (#4951).\n                        variableDayLength = (\n                        // Long range, assume we're crossing over.\n                        max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time\n                            // zones.\n                            time.getTimezoneOffset(min) !==\n                                time.getTimezoneOffset(max));\n                    }\n                    // Iterate and add tick positions at appropriate values\n                    let t = min, i = 1;\n                    while (t < max) {\n                        tickPositions.push(t);\n                        // Increase the years\n                        if (unitRange === timeUnits.year) {\n                            t = time.makeTime(year + i * count, 0);\n                            // Increase the months\n                        }\n                        else if (unitRange === timeUnits.month) {\n                            t = time.makeTime(year, month + i * count);\n                            // If we're using local time, the interval is not fixed as it\n                            // jumps one hour at the DST crossover\n                        }\n                        else if (variableDayLength && (unitRange === timeUnits.day ||\n                            unitRange === timeUnits.week)) {\n                            t = time.makeTime(year, month, dayOfMonth +\n                                i * count * (unitRange === timeUnits.day ? 1 : 7));\n                        }\n                        else if (variableDayLength &&\n                            unitRange === timeUnits.hour &&\n                            count > 1) {\n                            // Make sure higher ranks are preserved across DST (#6797,\n                            // #7621)\n                            t = time.makeTime(year, month, dayOfMonth, hours + i * count);\n                            // Else, the interval is fixed and we use simple addition\n                        }\n                        else {\n                            t += unitRange * count;\n                        }\n                        i++;\n                    }\n                    // Push the last time\n                    tickPositions.push(t);\n                    // Handle higher ranks. Mark new days if the time is on midnight\n                    // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold\n                    // to prevent looping over dense data grouping (#6156).\n                    if (unitRange <= timeUnits.hour && tickPositions.length < 10000) {\n                        tickPositions.forEach((t) => {\n                            if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            t % 1800000 === 0 &&\n                                // Check for local or global midnight\n                                time.dateFormat('%H%M%S%L', t) === '000000000') {\n                                higherRanks[t] = 'day';\n                            }\n                        });\n                    }\n                }\n                // Record information on the chosen unit - for dynamic label formatter\n                tickPositions.info = extend(normalizedInterval, {\n                    higherRanks,\n                    totalRange: unitRange * count\n                });\n                return tickPositions;\n            }\n        }\n        /* *\n         *\n         * Default export\n         *\n         * */\n\n        return Time;\n    });\n    _registerModule(_modules, 'Core/Defaults.js', [_modules['Core/Chart/ChartDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Time.js'], _modules['Core/Utilities.js']], function (ChartDefaults, H, Palettes, Time, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { fireEvent, merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Global default settings.\n         *\n         * @name Highcharts.defaultOptions\n         * @type {Highcharts.Options}\n         */ /**\n        * @optionparent\n        * @private\n        */\n        const defaultOptions = {\n            /**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors),\n             * [pie.colors](#plotOptions.pie.colors).\n             *\n             * In styled mode, the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             * @sample {highcharts} highcharts/chart/colors/\n             *         Assign a global color theme\n             * @sample highcharts/members/theme-v10/\n             *         Latest release styled like version 10\n             *\n             * @type    {Array<(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)>}\n             * @default [\n             *     \"#2caffe\",\n             *     \"#544fc5\",\n             *     \"#00e272\",\n             *     \"#fe6a35\",\n             *     \"#6b8abc\",\n             *     \"#d568fb\",\n             *     \"#2ee0ca\",\n             *     \"#fa4b42\",\n             *     \"#feb56a\",\n             *     \"#91e8e1\"\n             * ]\n             */\n            colors: Palettes.colors,\n            /**\n             * Styled mode only. Configuration object for adding SVG definitions for\n             * reusable elements. See [gradients, shadows and\n             * patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\n             * for more information and code examples.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @apioption defs\n             */\n            /**\n             * @ignore-option\n             */\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            /**\n             * An object containing language-related strings and settings. A typical\n             * setup uses `Highcharts.setOptions` to make the options apply to all\n             * charts in the same page.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     lang: {\n             *         locale: 'fr'\n             *     }\n             * });\n             * ```\n             *\n             * @optionparent lang\n             */\n            lang: {\n                weekFrom: 'week from',\n                /**\n                 * The default chart title.\n                 *\n                 * @since 12.2.0\n                 */\n                chartTitle: 'Chart title',\n                /**\n                 * The browser locale to use for date and number formatting. The actual\n                 * locale used for each chart is determined in three steps:\n                 * 1. If this `lang.locale` option is specified, it is used.\n                 * 2. Else, look for the closest ancestor HTML element with a `lang`\n                 *    attribute, typically the `<html>` element.\n                 * 3. If no 'lang' attribute is found, use the default browser locale.\n                 *\n                 * Use `en-GB`, British English, for approximate consistency with\n                 * Highcharts v < 12.\n                 *\n                 * @sample highcharts/lang/locale/\n                 *         Set the locale using the `lang.locale` option\n                 * @sample highcharts/lang/locale-attribute/\n                 *         Pick up the locale from the HTML `lang` attribute\n                 * @sample highcharts/members/highcharts-numberformat\n                 *         Arabic locale with digits and dates         *\n                 *\n                 * @since 12.0.0\n                 * @type {string|Array<string>}\n                 */\n                locale: void 0,\n                /**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 */\n                loading: 'Loading...',\n                /**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`. Defaults to 'undefined',\n                 * meaning the default month names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                months: void 0,\n                /**\n                 * [Format string](https://www.highcharts.com/docs/chart-concepts/templating) for the default series name.\n                 *\n                 * @since 12.2.0\n                 */\n                seriesName: 'Series {add index 1}',\n                /**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`. Defaults to\n                 * 'undefined', meaning the default short month names are used according\n                 * to the `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                shortMonths: void 0,\n                /**\n                 * An array containing the weekday names. Defaults to 'undefined',\n                 * meaning the default weekday names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @type    {Array<string>}\n                 */\n                weekdays: void 0,\n                /**\n                 * Short week days, starting Sunday. Defaults to 'undefined', meaning\n                 * the default short weekday names are used according to the\n                 * `lang.locale` setting.\n                 *\n                 * @sample highcharts/lang/shortweekdays/\n                 *         Finnish two-letter abbreviations\n                 *\n                 * @type      {Array<string>}\n                 * @since     4.2.4\n                 * @apioption lang.shortWeekdays\n                 */\n                /**\n                 * What to show in a date field for invalid dates. Defaults to an empty\n                 * string.\n                 *\n                 * @type      {string}\n                 * @since     4.1.8\n                 * @product   highcharts highstock\n                 * @apioption lang.invalidDate\n                 */\n                /**\n                 * The title appearing on hovering the zoom in button. The text itself\n                 * defaults to \"+\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom in\n                 * @product   highmaps\n                 * @apioption lang.zoomIn\n                 */\n                /**\n                 * The title appearing on hovering the zoom out button. The text itself\n                 * defaults to \"-\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom out\n                 * @product   highmaps\n                 * @apioption lang.zoomOut\n                 */\n                /**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to the locale decimal point as determined by `lang.locale`.\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     1.2.2\n                 * @apioption lang.decimalPoint\n                 */\n                /**\n                 * [Metric prefixes](https://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the\n                 * positions with `null` causes the full number to be written. Setting\n                 * `numericSymbols` to `undefined` disables shortening altogether.\n                 *\n                 * @sample {highcharts} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n                 * @since   2.3.0\n                 */\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'],\n                /**\n                 * The default name for a pie slice (point).\n                 * @since 12.2.0\n                 */\n                pieSliceName: 'Slice',\n                /**\n                 * The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\n                 * Use 10000 for Japanese, Korean and various Chinese locales, which\n                 * use symbols for 10^4, 10^8 and 10^12.\n                 *\n                 * @sample highcharts/lang/numericsymbolmagnitude/\n                 *         10000 magnitude for Japanese\n                 *\n                 * @type      {number}\n                 * @default   1000\n                 * @since     5.0.3\n                 * @apioption lang.numericSymbolMagnitude\n                 */\n                /**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to the locale thousands separator as determined by `lang.locale`.\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     1.2.2\n                 * @apioption lang.thousandsSep\n                 */\n                /**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoom: 'Reset zoom',\n                /**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                /**\n                 * The default title of the Y axis\n                 *\n                 * @since 12.2.0\n                 */\n                yAxisTitle: 'Values',\n                resetZoomTitle: 'Reset zoom level 1:1'\n            },\n            /**\n             * Global options that don't apply to each chart. These options must be set\n             * using the `Highcharts.setOptions` method.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     global: {\n             *         buttonTheme: {\n             *             fill: '#d0d0d0'\n             *         }\n             *     }\n             * });\n             * ```\n             */\n            global: {\n                /**\n                 * General theme for buttons. This applies to the zoom button, exporting\n                 * context menu, map navigation, range selector buttons and custom\n                 * buttons generated using the `SVGRenderer.button` function. However,\n                 * each of these may be overridden with more specific options.\n                 *\n                 * @sample highcharts/global/buttontheme\n                 *         General button theme\n                 * @since 11.4.2\n                 */\n                buttonTheme: {\n                    /**\n                     * The fill color for buttons\n                     */\n                    fill: \"#f7f7f7\" /* Palette.neutralColor3 */,\n                    /**\n                     * The padding of buttons\n                     */\n                    padding: 8,\n                    /**\n                     * The border radius for buttons\n                     */\n                    r: 2,\n                    /**\n                     * The stroke color for buttons\n                     */\n                    stroke: \"#cccccc\" /* Palette.neutralColor20 */,\n                    /**\n                     * The stroke width for buttons\n                     */\n                    'stroke-width': 1,\n                    /**\n                     * CSS styling for the buttons' text\n                     */\n                    style: {\n                        color: \"#333333\" /* Palette.neutralColor80 */,\n                        cursor: 'pointer',\n                        fontSize: '0.8em',\n                        fontWeight: 'normal'\n                    },\n                    /**\n                     * State overrides for the buttons\n                     */\n                    states: {\n                        /**\n                         * Hover state overrides for the buttons are applied in addition\n                         * to the normal state options\n                         */\n                        hover: {\n                            fill: \"#e6e6e6\" /* Palette.neutralColor10 */\n                        },\n                        /**\n                         * Select state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        select: {\n                            fill: \"#e6e9ff\" /* Palette.highlightColor10 */,\n                            style: {\n                                color: \"#000000\" /* Palette.neutralColor100 */,\n                                fontWeight: 'bold'\n                            }\n                        },\n                        /**\n                         * Disabled state overrides for the buttons are applied in\n                         * addition to the normal state options\n                         */\n                        disabled: {\n                            /**\n                             * Disabled state CSS style overrides for the buttons' text\n                             */\n                            style: {\n                                color: \"#cccccc\" /* Palette.neutralColor20 */\n                            }\n                        }\n                    }\n                }\n            },\n            /**\n             * Time options that can apply globally or to individual charts. These\n             * settings affect how `datetime` axes are laid out, how tooltips are\n             * formatted, how series\n             * [pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\n             * the Highcharts Stock range selector handles time.\n             *\n             * The common use case is that all charts in the same Highcharts object\n             * share the same time settings, in which case the global settings are set\n             * using `setOptions`.\n             *\n             * ```js\n             * // Apply time settings globally\n             * Highcharts.setOptions({\n             *     time: {\n             *         timezone: 'Europe/London'\n             *     }\n             * });\n             * // Apply time settings by instance\n             * const chart = Highcharts.chart('container', {\n             *     time: {\n             *         timezone: 'America/New_York'\n             *     },\n             *     series: [{\n             *         data: [1, 4, 3, 5]\n             *     }]\n             * });\n             *\n             * // Use the Time object\n             * console.log(\n             *        'Current time in New York',\n             *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n             * );\n             * ```\n             *\n             * Since v6.0.5, the time options were moved from the `global` object to the\n             * `time` object, and time options can be set on each individual chart.\n             *\n             * @sample {highcharts|highstock}\n             *         highcharts/time/timezone/\n             *         Set the timezone globally\n             * @sample {highcharts}\n             *         highcharts/time/individual/\n             *         Set the timezone per chart instance\n             * @sample {highstock}\n             *         stock/time/individual/\n             *         Set the timezone per chart instance\n             *\n             * @since     6.0.5\n             * @optionparent time\n             */\n            time: {\n                /**\n                 * A custom `Date` class for advanced date handling. For example,\n                 * [JDate](https://github.com/tahajahangir/jdate) can be hooked in to\n                 * handle Jalali dates.\n                 *\n                 * @type      {*}\n                 * @since     4.0.4\n                 * @product   highcharts highstock gantt\n                 */\n                Date: void 0,\n                /**\n                 * A named time zone. Supported time zone names rely on the browser\n                 * implementations, as described in the [mdn\n                 * docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#timezone).\n                 * If the given time zone is not recognized by the browser, Highcharts\n                 * provides a warning and falls back to returning a 0 offset,\n                 * corresponding to the UTC time zone.\n                 *\n                 * The time zone affects axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`.\n                 *\n                 * Setting `timezone` to `undefined` falls back to the default browser\n                 * timezone setting.\n                 *\n                 * Until v11.2.0, this option depended on moment.js.\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezone/ Europe/Oslo\n                 *\n                 * @type      {string}\n                 * @since     5.0.7\n                 * @product   highcharts highstock gantt\n                 */\n                timezone: 'UTC',\n                /**\n                 * The timezone offset in minutes. Positive values are west, negative\n                 * values are east of UTC, as in the ECMAScript\n                 * [getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n                 * method. Use this to display UTC based data in a predefined time zone.\n                 *\n                 * This option is deprecated as of v11.4.1 and will be removed in a\n                 * future release. Use the [time.timezone](#time.timezone) option\n                 * instead.\n                 *\n                 * @see [time.getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezoneoffset/\n                 *         Timezone offset\n                 *\n                 * @since     3.0.8\n                 * @deprecated 11.4.2\n                 * @product   highcharts highstock gantt\n                 */\n                timezoneOffset: 0,\n                /**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * Setting `useUTC` to true is equivalent to setting `time.timezone` to\n                 * `\"UTC\"`. Setting `useUTC` to false is equivalent to setting\n                 * `time.timezone` to `undefined`.\n                 *\n                 * @see [time.timezone](#timezone)\n                 *\n                 * @sample {highcharts} highcharts/time/useutc-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/time/useutc-false/\n                 *         False\n                 *\n                 * @deprecated\n                 */\n                useUTC: void 0\n            },\n            chart: ChartDefaults,\n            /**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/\n             *         Title options demonstrated\n             * @sample {highcharts} highcharts/title/align-auto/\n             *         Default title alignment\n             */\n            title: {\n                /**\n                 * When the title is floating, the plot area will not move to make space\n                 * for it.\n                 *\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/\n                 *         False by default\n                 * @sample {highcharts} highcharts/title/floating/\n                 *         True - title on top of the plot area\n                 * @sample {highstock} stock/chart/title-floating/\n                 *         True - title on top of the plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption title.floating\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption title.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\n                 * as if [floating](#title.floating) were `true`.\n                 *\n                 * @sample {highcharts} highcharts/title/verticalalign/\n                 *         Chart title in bottom right corner\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption title.verticalAlign\n                 */\n                /**\n                 * The x position of the title relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption title.x\n                 */\n                /**\n                 * The y position of the title relative to the alignment within\n                 * [chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](\n                 * #chart.spacingBottom). By default it depends on the font size.\n                 *\n                 * @sample {highcharts} highcharts/title/y/\n                 *         Title inside the plot area\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption title.y\n                 */\n                /**\n                 * CSS styles for the title. Use this for font styling, but use `align`,\n                 * `x` and `y` for text alignment.\n                 *\n                 * Note that the default [title.minScale](#title.minScale) option also\n                 * affects the rendered font size. In order to keep the font size fixed\n                 * regardless of title length, set `minScale` to 1.\n                 *\n                 * In styled mode, the title style is given in the `.highcharts-title`\n                 * class.\n                 *\n                 * @sample {highcharts} highcharts/title/style/\n                 *         Custom color and weight\n                 * @sample {highstock} stock/chart/title-style/\n                 *         Custom color and weight\n                 * @sample highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {highcharts|highmaps} { \"color\": \"#333333\", \"fontSize\": \"18px\" }\n                 * @default   {highstock} { \"color\": \"#333333\", \"fontSize\": \"16px\" }\n                 */\n                style: {\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    fontWeight: 'bold'\n                },\n                /**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `undefined`.\n                 *\n                 * @sample {highcharts} highcharts/title/text/\n                 *         Custom title\n                 * @sample {highstock} stock/chart/title-text/\n                 *         Custom title\n                 *\n                 * @default {highcharts|highmaps} Chart title\n                 * @default {highstock} undefined\n                 */\n                text: 'Chart title',\n                /**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * Since v12 it defaults to `undefined`, meaning the alignment is\n                 * computed for best fit. If the text fits in one line, it aligned to\n                 * the center, but if it is wrapped into multiple lines, it is aligned\n                 * to the left.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Default alignment, dynamic\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {Highcharts.AlignValue}\n                 * @default   undefined\n                 * @since     2.0\n                 * @apioption title.align\n                 */\n                /**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @sample {highcharts} highcharts/title/margin-50/\n                 *         A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/\n                 *         The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/\n                 *         A chart title margin of 50\n                 *\n                 * @since 2.1\n                 */\n                margin: 15,\n                /**\n                 * When the title is too wide to fit in the chart, the default behavior\n                 * is to scale it down to fit, or apply word wrap if it is scaled down\n                 * to `minScale` and still doesn't fit.\n                 *\n                 * The default value reflects the scale, when using default font sizes,\n                 * when the title font size matches that of the subtitle. The title\n                 * still stands out as it is bold by default.\n                 *\n                 * Set `minScale` to 1 to avoid downscaling.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Downscaling demonstrated\n                 *\n                 * @since 12.0.0\n                 */\n                minScale: 0.67\n            },\n            /**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highcharts} highcharts/title/align-auto/\n             *         Default title alignment\n             * @sample {highmaps} maps/title/subtitle/\n             *         Subtitle options demonstrated\n             */\n            subtitle: {\n                /**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 * \"center\" and \"right\". Since v12, it defaults to `undefined`, meaning\n                 * the actual alignment is inherited from the alignment of the main\n                 * title.\n                 *\n                 * @sample {highcharts} highcharts/title/align-auto/\n                 *         Default title and subtitle alignment, dynamic\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at bottom right of plot area\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @default undefined\n                 * @since 2.0\n                 * @apioption subtitle.align\n                 */\n                /**\n                 * When the subtitle is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/floating/\n                 *         Floating title and subtitle\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote floating at bottom right of plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption subtitle.floating\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 * @apioption subtitle.style\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption subtitle.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\n                 * floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption subtitle.verticalAlign\n                 */\n                /**\n                 * The x position of the subtitle relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption subtitle.x\n                 */\n                /**\n                 * The y position of the subtitle relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\n                 * is laid out below the title unless the title is floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption subtitle.y\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The subtitle of the chart.\n                 *\n                 * @sample {highcharts|highstock} highcharts/subtitle/text/\n                 *         Custom subtitle\n                 * @sample {highcharts|highstock} highcharts/subtitle/text-formatted/\n                 *         Formatted and linked text.\n                 */\n                text: ''\n            },\n            /**\n             * The chart's caption, which will render below the chart and will be part\n             * of exported charts. The caption can be updated after chart initialization\n             * through the `Chart.update` or `Chart.caption.update` methods.\n             *\n             * @sample highcharts/caption/text/\n             *         A chart with a caption\n             * @since  7.2.0\n             */\n            caption: {\n                /**\n                 * When the caption is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.floating\n                 */\n                /**\n                 * The margin between the caption and the plot area.\n                 */\n                margin: 15,\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.useHTML\n                 */\n                /**\n                 * The x position of the caption relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption caption.x\n                 */\n                /**\n                 * The y position of the caption relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`.\n                 *\n                 * @type      {number}\n                 * @apioption caption.y\n                 */\n                /**\n                 * CSS styles for the caption.\n                 *\n                 * In styled mode, the caption style is given in the\n                 * `.highcharts-caption` class.\n                 *\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The caption text of the chart.\n                 *\n                 * @sample {highcharts} highcharts/caption/text/\n                 *         Custom caption\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the caption. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * The vertical alignment of the caption. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\n                 * floating.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'bottom'\n            },\n            /**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](\n             * #plotOptions.series) object. Then options for all series of a specific\n             * type are given in the plotOptions of that type, for example\n             * `plotOptions.line`. Next, options for one single series are given in\n             * [the series array](#series).\n             */\n            plotOptions: {},\n            /**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and create\n             * [custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */\n            legend: {\n                /**\n                 * The background color of the legend.\n                 *\n                 * @see In styled mode, the legend background fill can be applied with\n                 *      the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/backgroundcolor/\n                 *         Yellowish background\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption legend.backgroundColor\n                 */\n                /**\n                 * The width of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke width can be applied\n                 *      with the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderwidth/\n                 *         2px border width\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption legend.borderWidth\n                 */\n                /**\n                 * Enable or disable the legend. There is also a series-specific option,\n                 * [showInLegend](#plotOptions.series.showInLegend), that can hide the\n                 * series from the legend. In some series types this is `false` by\n                 * default, so it must set to `true` in order to show the legend for the\n                 * series.\n                 *\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 *\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @default {gantt} false\n                 */\n                enabled: true,\n                /**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/align/\n                 *         Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * If the [layout](legend.layout) is `horizontal` and the legend items\n                 * span over two lines or more, whether to align the items into vertical\n                 * columns. Setting this to `false` makes room for more items, but will\n                 * look more messy.\n                 *\n                 * @since 6.1.0\n                 */\n                alignColumns: true,\n                /**\n                 * A CSS class name to apply to the legend group.\n                 */\n                className: 'highcharts-no-tooltip',\n                /**\n                 * General event handlers for the legend. These event hooks can\n                 * also be attached to the legend at run time using the\n                 * `Highcharts.addEvent` function.\n                 *\n                 * @declare Highcharts.LegendEventsOptionsObject\n                 *\n                 * @private\n                 */\n                events: {},\n                /**\n                 * Fires when the legend item belonging to the series is clicked. One\n                 * parameter, `event`, is passed to the function. The default action\n                 * is to toggle the visibility of the series, point or data class. This\n                 * can be prevented by returning `false` or calling\n                 * `event.preventDefault()`.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemclick/\n                 *         Confirm hiding and showing\n                 * @sample {highcharts} highcharts/legend/pie-legend-itemclick/\n                 *         Confirm toggle visibility of pie slices\n                 *\n                 * @type      {Highcharts.LegendItemClickCallbackFunction}\n                 * @context   Highcharts.Legend\n                 * @apioption legend.events.itemClick\n                 */\n                /**\n                 * When the legend is floating, the plot area ignores it and is allowed\n                 * to be placed below it.\n                 *\n                 * @sample {highcharts} highcharts/legend/floating-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/legend/floating-true/\n                 *         True\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Floating legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption legend.floating\n                 */\n                /**\n                 * The layout of the legend items. Can be one of `horizontal` or\n                 * `vertical` or `proximate`. When `proximate`, the legend items will be\n                 * placed as close as possible to the graphs they're representing,\n                 * except in inverted charts or when the legend position doesn't allow\n                 * it.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/\n                 *         Vertical\n                 * @sample highcharts/legend/layout-proximate\n                 *         Labels proximate to the data\n                 * @sample {highstock} stock/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/\n                 *         Vertical with color axis gradient\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\", \"proximate\"]\n                 */\n                layout: 'horizontal',\n                /**\n                 * In a legend with horizontal layout, the itemDistance defines the\n                 * pixel distance between each item.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 * @sample {highstock} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 *\n                 * @type      {number}\n                 * @default   {highcharts} 20\n                 * @default   {highstock} 20\n                 * @default   {highmaps} 8\n                 * @since     3.0.3\n                 * @apioption legend.itemDistance\n                 */\n                /**\n                 * The pixel bottom margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginBottom: 2,\n                /**\n                 * The pixel top margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginTop: 2,\n                /**\n                 * The width for each legend item. By default the items are laid out\n                 * successively. In a [horizontal layout](legend.layout), if the items\n                 * are laid out across two rows or more, they will be vertically aligned\n                 * depending on the [legend.alignColumns](legend.alignColumns) option.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemwidth-default/\n                 *         Undefined by default\n                 * @sample {highcharts} highcharts/legend/itemwidth-80/\n                 *         80 for aligned legend items\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption legend.itemWidth\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for each legend label. Available variables relates to properties on\n                 * the series, or the point in case of pies.\n                 *\n                 * @type      {string}\n                 * @default   {name}\n                 * @since     1.3\n                 * @apioption legend.labelFormat\n                 */\n                /* eslint-disable valid-jsdoc */\n                /**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case of\n                 * pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps the context can also be a data class in case of a\n                 * `colorAxis`.\n                 *\n                 * @sample {highcharts} highcharts/legend/labelformatter/\n                 *         Add text\n                 * @sample {highmaps} maps/legend/labelformatter/\n                 *         Data classes with label formatter\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Point|Series>}\n                 */\n                labelFormatter: function () {\n                    // eslint-enable valid-jsdoc\n                    return this.name;\n                },\n                /**\n                 * Line height for the legend items. Deprecated as of 2.1\\. Instead,\n                 * the line height for each item can be set using\n                 * `itemStyle.lineHeight`, and the padding between items using\n                 * `itemMarginTop` and `itemMarginBottom`.\n                 *\n                 * @sample {highcharts} highcharts/legend/lineheight/\n                 *         Setting padding\n                 *\n                 * @deprecated\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @since     2.0\n                 * @product   highcharts gantt\n                 * @apioption legend.lineHeight\n                 */\n                /**\n                 * If the plot area sized is calculated automatically and the legend is\n                 * not floating, the legend margin is the space between the legend and\n                 * the axis labels or plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/margin-default/\n                 *         12 pixels by default\n                 * @sample {highcharts} highcharts/legend/margin-30/\n                 *         30 pixels\n                 *\n                 * @type      {number}\n                 * @default   12\n                 * @since     2.1\n                 * @apioption legend.margin\n                 */\n                /**\n                 * Maximum pixel height for the legend. When the maximum height is\n                 * extended, navigation will show.\n                 *\n                 * @type      {number}\n                 * @since     2.3.0\n                 * @apioption legend.maxHeight\n                 */\n                /**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke can be applied with the\n                 *      `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/bordercolor/\n                 *         Brown border\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                /**\n                 * The border corner radius of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderradius-default/\n                 *         Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/\n                 *         5px rounded\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 */\n                borderRadius: 0,\n                /**\n                 * Options for the paging or navigation appearing when the legend is\n                 * overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to\n                 * [increase the chart height in\n                 * export](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/).\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 */\n                navigation: {\n                    /**\n                     * How to animate the pages when navigating up or down. A value of\n                     * `true` applies the default navigation given in the\n                     * `chart.animation` option. Additional options can be given as an\n                     * object containing values for easing and duration.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @default   true\n                     * @since     2.2.4\n                     * @apioption legend.navigation.animation\n                     */\n                    /**\n                     * The pixel size of the up and down arrows in the legend paging\n                     * navigation.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {number}\n                     * @default   12\n                     * @since     2.2.4\n                     * @apioption legend.navigation.arrowSize\n                     */\n                    /**\n                     * Whether to enable the legend navigation. In most cases, disabling\n                     * the navigation results in an unwanted overflow.\n                     *\n                     * See also the\n                     * [adapt chart to legend](https://github.com/highcharts/adapt-chart-to-legend)\n                     * plugin for a solution to extend the chart height to make room for\n                     * the legend, optionally in exported charts only.\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     4.2.4\n                     * @apioption legend.navigation.enabled\n                     */\n                    /**\n                     * Text styles for the legend page navigation.\n                     *\n                     * @see In styled mode, the navigation items are styled with the\n                     *      `.highcharts-legend-navigation` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {Highcharts.CSSObject}\n                     * @since     2.2.4\n                     * @apioption legend.navigation.style\n                     */\n                    style: {\n                        /**\n                         * @type {number|string}\n                         */\n                        fontSize: '0.8em'\n                    },\n                    /**\n                     * The color for the active up or down arrow in the legend page\n                     * navigation.\n                     *\n                     * @see In styled mode, the active arrow be styled with the\n                     *      `.highcharts-legend-nav-active` class.\n                     *\n                     * @sample  {highcharts} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     * @sample  {highstock} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    activeColor: \"#0022ff\" /* Palette.highlightColor100 */,\n                    /**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @see In styled mode, the inactive arrow be styled with the\n                     *      `.highcharts-legend-nav-inactive` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    inactiveColor: \"#cccccc\" /* Palette.neutralColor20 */\n                },\n                /**\n                 * The inner padding of the legend box.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @type      {number}\n                 * @default   8\n                 * @since     2.2.0\n                 * @apioption legend.padding\n                 */\n                /**\n                 * Whether to reverse the order of the legend items compared to the\n                 * order of the series or points as defined in the configuration object.\n                 *\n                 * @see [yAxis.reversedStacks](#yAxis.reversedStacks),\n                 *      [series.legendIndex](#series.legendIndex)\n                 *\n                 * @sample {highcharts} highcharts/legend/reversed/\n                 *         Stacked bar with reversed legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.2.5\n                 * @apioption legend.reversed\n                 */\n                /**\n                 * Whether to show the symbol on the right side of the text rather than\n                 * the left side. This is common in Arabic and Hebrew.\n                 *\n                 * @sample {highcharts} highcharts/legend/rtl/\n                 *         Symbol to the right\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption legend.rtl\n                 */\n                /**\n                 * CSS styles for the legend area. In the 1.x versions the position\n                 * of the legend area was determined by CSS. In 2.x, the position is\n                 * determined by properties like `align`, `verticalAlign`, `x` and `y`,\n                 * but the styles are still parsed for backwards compatibility.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @product   highcharts highstock\n                 * @apioption legend.style\n                 */\n                /**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `undefined` to wrap\n                 * text instead. A `width` property can be added to control the text\n                 * width.\n                 *\n                 * @see In styled mode, the legend items can be styled with the\n                 *      `.highcharts-legend-item` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemstyle/\n                 *         Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"0.8em\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}\n                 */\n                itemStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /**\n                     * @ignore\n                     */\n                    cursor: 'pointer',\n                    /**\n                     * @ignore\n                     */\n                    fontSize: '0.8em',\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'none',\n                    /**\n                     * @ignore\n                     */\n                    textOverflow: 'ellipsis'\n                },\n                /**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @see In styled mode, the hovered legend items can be styled with\n                 *      the `.highcharts-legend-item:hover` pseudo-class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/\n                 *         Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#000000\"}\n                 */\n                itemHoverStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @see In styled mode, the hidden legend items can be styled with\n                 *      the `.highcharts-legend-item-hidden` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/\n                 *         Darker gray color\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#cccccc\"}\n                 */\n                itemHiddenStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'line-through'\n                },\n                /**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {boolean|Highcharts.CSSObject}\n                 */\n                shadow: false,\n                /**\n                 * Default styling for the checkbox next to a legend item when\n                 * `showCheckbox` is true.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 * @default {\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}\n                 */\n                itemCheckboxStyle: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    width: '13px', // For IE precision\n                    /**\n                     * @ignore\n                     */\n                    height: '13px'\n                },\n                /// itemWidth: undefined,\n                /**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @since 5.0.0\n                 */\n                squareSymbol: true,\n                /**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * Note: This option is a default source of color axis height, if the\n                 * [colorAxis.height](https://api.highcharts.com/highcharts/colorAxis.height)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolHeight\n                 */\n                /**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`, effectively\n                 * creating a circle.\n                 *\n                 * For color axis scales, it defaults to 3.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolRadius\n                 */\n                /**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * Note: This option is a default source of color axis width, if the\n                 * [colorAxis.width](https://api.highcharts.com/highcharts/colorAxis.width)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 *\n                 * @type      {number}\n                 * @apioption legend.symbolWidth\n                 */\n                /**\n                 * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the legend item texts.\n                 *\n                 * Prior to 4.1.7, when using HTML, [legend.navigation](\n                 * #legend.navigation) was disabled.\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption legend.useHTML\n                 */\n                /**\n                 * For a color axis with data classes, how many decimals to render in\n                 * the legend. The default preserves the decimals of the range numbers.\n                 *\n                 * @type      {number}\n                 * @default   -1\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueDecimals\n                 */\n                /**\n                 * For a color axis with data classes, a suffix for the range numbers in\n                 * the legend.\n                 *\n                 * @type      {string}\n                 * @default   ''\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueSuffix\n                 */\n                /**\n                 * The width of the legend box. If a number is set, it translates to\n                 * pixels. Since v7.0.2 it allows setting a percent string of the full\n                 * chart width, for example `40%`.\n                 *\n                 * Defaults to the full chart width for legends below or above the\n                 * chart, half the chart width for legends to the left and right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 * @sample {highcharts} highcharts/legend/width-percent/\n                 *         A percent of the chart width\n                 *\n                 * @type      {number|string}\n                 * @since     2.0\n                 * @apioption legend.width\n                 */\n                /**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolpadding/\n                 *         Greater symbol width and padding\n                 */\n                symbolPadding: 5,\n                /**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * When the [layout](#legend.layout) option is `proximate`, the\n                 * `verticalAlign` option doesn't apply.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'bottom',\n                // Width: undefined,\n                /**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 *\n                 * @since 2.0\n                 */\n                x: 0,\n                /**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @since 2.0\n                 */\n                y: 0,\n                /**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/\n                 *         Legend title\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend with title\n                 *\n                 * @since 3.0\n                 */\n                title: {\n                    /**\n                     * A text or HTML string for the title.\n                     *\n                     * @type      {string}\n                     * @since     3.0\n                     * @apioption legend.title.text\n                     */\n                    /**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @see In styled mode, the legend title is styled with the\n                     *      `.highcharts-legend-title` class.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"fontSize\": \"0.8em\", \"fontWeight\": \"bold\"}\n                     * @since   3.0\n                     */\n                    style: {\n                        /**\n                         * @ignore\n                         */\n                        color: \"#333333\" /* Palette.neutralColor80 */,\n                        /**\n                         * @ignore\n                         */\n                        fontSize: '0.8em',\n                        /**\n                         * @ignore\n                         */\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            /**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             */\n            loading: {\n                /**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.hideDuration\n                 */\n                /**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.showDuration\n                 */\n                /**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @see In styled mode, the loading label is styled with the\n                 *      `.highcharts-loading-inner` class.\n                 *\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/\n                 *         Vertically centered\n                 * @sample {highstock} stock/loading/general/\n                 *         Label styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}\n                 * @since   1.2.0\n                 */\n                labelStyle: {\n                    /**\n                     * @ignore\n                     */\n                    fontWeight: 'bold',\n                    /**\n                     * @ignore\n                     */\n                    position: 'relative',\n                    /**\n                     * @ignore\n                     */\n                    top: '45%'\n                },\n                /**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * In styled mode, the loading label is styled with the\n                 * `.highcharts-loading` class.\n                 *\n                 * @sample  {highcharts|highmaps} highcharts/loading/style/\n                 *          Gray plot area, white text\n                 * @sample  {highstock} stock/loading/general/\n                 *          Gray plot area, white text\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}\n                 * @since   1.2.0\n                 */\n                style: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                    /**\n                     * @ignore\n                     */\n                    opacity: 0.5,\n                    /**\n                     * @ignore\n                     */\n                    textAlign: 'center'\n                }\n            },\n            /**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @declare Highcharts.TooltipOptions\n             */\n            tooltip: {\n                /**\n                 * The color of the tooltip border. When `undefined`, the border takes\n                 * the color of the corresponding series or point.\n                 *\n                 * Note that the [borderWidth](#tooltip.borderWidth) is usually 0 by\n                 * default, so the border color may not be visible until a border width\n                 * is set.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ Follow\n                 *         series by default\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-black/ Black\n                 *         border\n                 * @sample {highstock} stock/tooltip/general/ Styled tooltip\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and\n                 *         border demo\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption tooltip.borderColor\n                 */\n                /**\n                 * A CSS class name to apply to the tooltip's container div,\n                 * allowing unique CSS styling for each chart.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.className\n                 */\n                /**\n                 * Since 4.1, the crosshair definitions are moved to the Axis object\n                 * in order for a better separation from the tooltip. See\n                 * [xAxis.crosshair](#xAxis.crosshair).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/crosshairs-x/\n                 *         Enable a crosshair for the x value\n                 *\n                 * @deprecated\n                 *\n                 * @type      {*}\n                 * @default   true\n                 * @apioption tooltip.crosshairs\n                 */\n                /**\n                 * Distance from point to tooltip in pixels.\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @apioption tooltip.distance\n                 */\n                /**\n                 * Whether the tooltip should be fixed to one position in the chart, or\n                 * located next to the point or mouse. When the tooltip is fixed, the\n                 * position can be further specified with the\n                 * [tooltip.position](#tooltip.position) options set.\n                 *\n                 * @sample    highcharts/tooltip/fixed/\n                 *            Fixed tooltip and position options\n                 * @sample    {highstock} stock/tooltip/fixed/\n                 *            Stock chart with fixed tooltip\n                 * @sample    {highmaps} maps/tooltip/fixed/\n                 *            Map with fixed tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since 12.2.0\n                 * @apioption tooltip.fixed\n                 */\n                /**\n                 * Whether the tooltip should follow the mouse as it moves across\n                 * columns, pie slices and other point types with an extent.\n                 * By default it behaves this way for pie, polygon, map, sankey\n                 * and wordcloud series by override in the `plotOptions`\n                 * for those series types.\n                 *\n                 * Does not apply if [split](#tooltip.split) is `true`.\n                 *\n                 * For touch moves to behave the same way, [followTouchMove](\n                 * #tooltip.followTouchMove) must be `true` also.\n                 *\n                 * @sample highcharts/tooltip/followpointer/\n                 *         Tooltip follow pointer comparison\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} false\n                 * @default   {highmaps} true\n                 * @since     3.0\n                 * @apioption tooltip.followPointer\n                 */\n                /**\n                 * Whether the tooltip should update as the finger moves on a touch\n                 * device. If this is `true` and [chart.panning](#chart.panning) is\n                 * set,`followTouchMove` will take over one-finger touches, so the user\n                 * needs to use two fingers for zooming and panning.\n                 *\n                 * Note the difference to [followPointer](#tooltip.followPointer) that\n                 * only defines the _position_ of the tooltip. If `followPointer` is\n                 * false in for example a column series, the tooltip will show above or\n                 * below the column, but as `followTouchMove` is true, the tooltip will\n                 * jump from column to column as the user swipes across the plot area.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} true\n                 * @default   {highstock} true\n                 * @default   {highmaps} false\n                 * @since     3.0.1\n                 * @apioption tooltip.followTouchMove\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for the whole shared tooltip. When format strings are a requirement,\n                 * it is usually more convenient to use `headerFormat`, `pointFormat`\n                 * and `footerFormat`, but the `format` option allows combining them\n                 * into one setting.\n                 *\n                 * The context of the format string is the same as that of the\n                 * `tooltip.formatter` callback.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/format-shared/\n                 *         Format for shared tooltip\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since     11.1.0\n                 * @apioption tooltip.format\n                 */\n                /**\n                 * Callback function to format the text of the tooltip from scratch. In\n                 * case of single or [shared](#tooltip.shared) tooltips, a string should\n                 * be returned. In case of [split](#tooltip.split) tooltips, it should\n                 * return an array where the first item is the header, and subsequent\n                 * items are mapped to the points. Return `false` to disable tooltip for\n                 * a specific point on series.\n                 *\n                 * A subset of HTML is supported. Unless `useHTML` is true, the HTML of\n                 * the tooltip is parsed and converted to SVG, therefore this isn't a\n                 * complete HTML renderer. The following HTML tags are supported: `b`,\n                 * `br`, `em`, `i`, `span`, `strong`. Spans can be styled with a `style`\n                 * attribute, but only text-related CSS, that is shared with SVG, is\n                 * handled.\n                 *\n                 * The context of the formatter (since v12) is the\n                 * [Point](https://api.highcharts.com/class-reference/Highcharts.Point)\n                 * instance. If the tooltip is shared or split, an array `this.points`\n                 * contains all points of the hovered x-value.\n                 *\n                 * Common properties from the Point to use in the formatter include:\n                 *\n                 * - **Point.percentage**:\n                 *   Stacked series and pies only. The point's percentage of the total.\n                 *\n                 * - **Point.points**:\n                 *   In a shared or split tooltip, this is an array containing all the\n                 *   hovered points.\n                 *\n                 * - **this.series**:\n                 *   The series object. The series name is available through\n                 *   `this.series.name`.\n                 *\n                 * - **this.total**:\n                 *   The total value at this point's x value in a stacked series, or the\n                 *   sum of all slices in a pie series.\n                 *\n                 * - **this.x**:\n                 *   The x value.\n                 *\n                 * - **this.y**:\n                 *   The y value.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/formatter-simple/\n                 *         Simple string formatting\n                 * @sample {highcharts} highcharts/tooltip/formatter-shared/\n                 *         Formatting with shared tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Formatting with split tooltip\n                 * @sample highcharts/tooltip/formatter-conditional-default/\n                 *         Extending default formatter\n                 * @sample {highstock} stock/tooltip/formatter/\n                 *         Formatting with shared tooltip\n                 * @sample {highmaps} maps/tooltip/formatter/\n                 *         String formatting\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.formatter\n                 */\n                /**\n                 * Callback function to format the text of the tooltip for\n                 * visible null points.\n                 * Works analogously to [formatter](#tooltip.formatter).\n                 *\n                 * @sample highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.nullFormatter\n                 */\n                /**\n                 * Whether to allow the tooltip to render outside the chart's SVG\n                 * element box. By default (`false`), the tooltip is rendered within the\n                 * chart's SVG element, which results in the tooltip being aligned\n                 * inside the chart area. For small charts, this may result in clipping\n                 * or overlapping. When `true`, a separate SVG element is created and\n                 * overlaid on the page, allowing the tooltip to be aligned inside the\n                 * page itself. Beware that with this option active, CSS classes on the\n                 * chart's target container, with classnames matching the pattern\n                 * 'highcharts-*', will be set on the tooltip as well. This is done to\n                 * support theming for tooltips with this option.\n                 *\n                 * Defaults to `true` if `chart.scrollablePlotArea` is activated,\n                 * otherwise `false`.\n                 *\n                 * @sample highcharts/tooltip/outside\n                 *         Small charts with tooltips outside\n                 *\n                 * @type      {boolean|undefined}\n                 * @default   undefined\n                 * @since     6.1.1\n                 * @apioption tooltip.outside\n                 */\n                /**\n                 * A callback function for formatting the HTML output for a single point\n                 * in the tooltip. Like the `pointFormat` string, but with more\n                 * flexibility.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n                 * @since     4.1.0\n                 * @context   Highcharts.Point\n                 * @apioption tooltip.pointFormatter\n                 */\n                /**\n                 * A callback function to place the tooltip in a custom position. The\n                 * callback receives three parameters: `labelWidth`, `labelHeight` and\n                 * `point`, where point contains values for `plotX` and `plotY` telling\n                 * where the reference point is in the plot area. Add `chart.plotLeft`\n                 * and `chart.plotTop` to get the full coordinates.\n                 *\n                 * To find the actual hovered `Point` instance, use\n                 * `this.chart.hoverPoint`. For shared or split tooltips, all the hover\n                 * points are available in `this.chart.hoverPoints`.\n                 *\n                 * Since v7, when [tooltip.split](#tooltip.split) option is enabled,\n                 * positioner is called for each of the boxes separately, including\n                 * xAxis header. xAxis header is not a point, instead `point` argument\n                 * contains info: `{ plotX: Number, plotY: Number, isHeader: Boolean }`\n                 *\n                 * Since v12.2, the [tooltip.fixed](#tooltip.fixed) option combined with\n                 * [tooltip.position](#tooltip.position) covers most of the use cases\n                 * for custom tooltip positioning.\n                 *\n                 * The return should be an object containing x and y values, for example\n                 * `{ x: 100, y: 100 }`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/positioner/\n                 *         A fixed tooltip position on top of the chart\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Split tooltip with fixed positions\n                 * @sample {highstock} stock/tooltip/positioner-scrollable-plotarea/\n                 *         Scrollable plot area combined with tooltip positioner\n                 *\n                 * @see [position](#tooltip.position)\n                 *\n                 * @type      {Highcharts.TooltipPositionerCallbackFunction}\n                 * @since     2.2.4\n                 * @apioption tooltip.positioner\n                 */\n                /**\n                 * Shows tooltip for all points with the same X value. Splits the\n                 * tooltip into one label per series, with the header close to the axis.\n                 * This is recommended over [shared](#tooltip.shared)\n                 * tooltips for charts with multiple line series, generally making them\n                 * easier to read. This option takes precedence over `tooltip.shared`.\n                 *\n                 * Not supported for [polar](#chart.polar) and [inverted](#chart.inverted) charts.\n                 *\n                 * @productdesc {highstock} In Highcharts Stock, tooltips are split\n                 * by default since v6.0.0. Stock charts typically contain\n                 * multi-dimension points and multiple panes, making split tooltips\n                 * the preferred layout over\n                 * the previous `shared` tooltip.\n                 *\n                 * @sample highcharts/tooltip/split/\n                 *         Split tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Split tooltip and custom formatter callback\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} true\n                 * @since     5.0.0\n                 * @product   highcharts highstock\n                 * @apioption tooltip.split\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing, when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @type      {boolean}\n                 * @since     8.0.1\n                 * @apioption tooltip.stickOnContact\n                 */\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption tooltip.useHTML\n                 */\n                /**\n                 * How many decimals to show in each series' y value. This is\n                 * overridable in each series' tooltip options object. The default is to\n                 * preserve all decimals.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {number|undefined}\n                 * @since     2.2\n                 * @apioption tooltip.valueDecimals\n                 */\n                /**\n                 * A string to prepend to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valuePrefix\n                 */\n                /**\n                 * A string to append to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valueSuffix\n                 */\n                /**\n                 * The format for the date in the tooltip header if the X axis is a\n                 * datetime axis. The default is a best guess based on the smallest\n                 * distance between points in the chart.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/xdateformat/\n                 *         A different format\n                 *\n                 * @type      {string|Highcharts.DateTimeFormatOptions}\n                 * @product   highcharts highstock gantt\n                 * @apioption tooltip.xDateFormat\n                 */\n                /**\n                 * How many decimals to show for the `point.change`\n                 * or the `point.cumulativeSum` value when the `series.compare`\n                 * or the `series.cumulative` option is set.\n                 * This is overridable in each series' tooltip options object.\n                 *\n                 * @type      {number}\n                 * @default   2\n                 * @since     1.0.1\n                 * @product   highstock\n                 * @apioption tooltip.changeDecimals\n                 */\n                /**\n                 * Enable or disable the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/enabled/\n                 *         Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n                 *         Disable tooltip and show values on chart instead\n                 */\n                enabled: true,\n                /**\n                 * Enable or disable animation of the tooltip.\n                 *\n                 * @type       {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                 * @since      2.3.0\n                 */\n                animation: {\n                    duration: 300,\n                    // EaseOutCirc\n                    easing: (x) => Math.sqrt(1 - Math.pow(x - 1, 2))\n                },\n                /**\n                 * The radius of the rounded border corners.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         Default border radius\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/\n                 *         Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 */\n                borderRadius: 3,\n                /**\n                 * For series on datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the string or object configuration, see\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat).\n                 *\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 *\n                 * @type    {Highcharts.Dictionary<string|Highcharts.DateTimeFormatOptions>}\n                 * @product highcharts highstock gantt\n                 */\n                dateTimeLabelFormats: {\n                    /** @internal */\n                    millisecond: '%[AebHMSL]',\n                    /** @internal */\n                    second: '%[AebHMS]',\n                    /** @internal */\n                    minute: '%[AebHM]',\n                    /** @internal */\n                    hour: '%[AebHM]',\n                    /** @internal */\n                    day: '%[AebY]',\n                    /** @internal */\n                    week: '%v %[AebY]',\n                    /** @internal */\n                    month: '%[BY]',\n                    /** @internal */\n                    year: '%Y'\n                },\n                /**\n                 * A string to append to the tooltip format.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @since 2.2\n                 */\n                footerFormat: '',\n                /**\n                 * The name of a symbol to use for the border around the tooltip\n                 * header. Applies only when [tooltip.split](#tooltip.split) is\n                 * enabled.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @see [tooltip.shape](#tooltip.shape)\n                 *\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Different shapes for header and split boxes\n                 *\n                 * @type       {Highcharts.TooltipShapeValue}\n                 * @validvalue [\"callout\", \"rect\"]\n                 * @since      7.0\n                 */\n                headerShape: 'callout',\n                /**\n                 * The number of milliseconds to wait until the tooltip is hidden when\n                 * mouse out from a point or chart.\n                 *\n                 * @since 3.0\n                 */\n                hideDelay: 500,\n                /**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @since 5.0.0\n                 */\n                padding: 8,\n                /**\n                 * Positioning options for fixed tooltip, taking effect only when\n                 * [tooltip.fixed](#tooltip.fixed) is `true`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/fixed/\n                 *         Fixed tooltip and position options\n                 * @sample {highstock} stock/tooltip/fixed/\n                 *         Stock chart with fixed tooltip\n                 * @sample {highmaps} maps/tooltip/fixed/\n                 *         Map with fixed tooltip\n                 *\n                 * @since 12.2.0\n                 */\n                position: {\n                    /**\n                     * The horizontal alignment of the fixed tooltip.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     *\n                     * @type {Highcharts.AlignValue}\n                     * @default left\n                     * @apioption tooltip.position.align\n                     */\n                    /**\n                     * The vertical alignment of the fixed tooltip.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     *\n                     * @type {Highcharts.VerticalAlignValue}\n                     * @default top\n                     * @apioption tooltip.position.verticalAlign\n                     */\n                    /**\n                     * What the fixed tooltip alignment should be relative to.\n                     *\n                     * The default, `pane`, means that it is aligned within the plot\n                     * area for that given series. If the tooltip is split (as default\n                     * in Stock charts), each partial tooltip is aligned within the\n                     * series' pane.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     *\n                     * @type {string}\n                     * @default pane\n                     * @validvalue [\"pane\", \"chart\", \"plotBox\", \"spacingBox\"]\n                     * @apioption tooltip.position.relativeTo\n                     */\n                    /**\n                     * X pixel offset from the given position. Can be used to shy away\n                     * from axis lines, grid lines etc to avoid the tooltip overlapping\n                     * other elements.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     */\n                    x: 0,\n                    /**\n                     * Y pixel offset from the given position. Can be used to shy away\n                     * from axis lines, grid lines etc to avoid the tooltip overlapping\n                     * other elements.\n                     *\n                     * @sample highcharts/tooltip/fixed/\n                     *         Fixed tooltip\n                     * @sample {highstock} stock/tooltip/fixed/\n                     *         Stock chart with fixed tooltip\n                     */\n                    y: 3\n                },\n                /**\n                 * The name of a symbol to use for the border around the tooltip. Can\n                 * be one of: `\"callout\"`, `\"circle\"` or `\"rect\"`. When\n                 * [tooltip.split](#tooltip.split)\n                 * option is enabled, shape is applied to all boxes except header, which\n                 * is controlled by\n                 * [tooltip.headerShape](#tooltip.headerShape).\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * Defaults to `callout` for floating tooltip, `rect` for\n                 * [fixed](#tooltip.fixed) tooltip.\n                 *\n                 * @type  {Highcharts.TooltipShapeValue}\n                 * @since 4.0\n                 * @default undefined\n                 * @apioption tooltip.shape\n                 */\n                /**\n                 * Shows information in the tooltip for all points with the same X\n                 * value. When the tooltip is shared, the entire plot area will capture\n                 * mouse movement or touch events. Tooltip texts for series types with\n                 * ordered data (not pie, scatter, flags etc) will be shown in a single\n                 * bubble. This is recommended for single series charts and for\n                 * tablet/mobile optimized charts.\n                 *\n                 * See also [tooltip.split](#tooltip.split), that is better suited for\n                 * charts with many series, especially line-type series. The\n                 * `tooltip.split` option takes precedence over `tooltip.shared`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/shared-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/tooltip/shared-true/\n                 *         True\n                 * @sample {highcharts} highcharts/tooltip/shared-x-crosshair/\n                 *         True with x axis crosshair\n                 * @sample {highcharts} highcharts/tooltip/shared-true-mixed-types/\n                 *         True with mixed series types\n                 *\n                 * @since   2.1\n                 * @product highcharts highstock\n                 */\n                shared: false,\n                /**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense. This\n                 * applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/\n                 *         50 px on graph\n                 *\n                 * @type    {number}\n                 * @default 10/25\n                 * @since   1.2.0\n                 * @product highcharts highstock\n                 */\n                snap: isTouchDevice ? 25 : 10,\n                /**\n                 * The HTML of the tooltip header line. The context is the\n                 * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n                 * Variables are enclosed in curly brackets. Examples of common\n                 * variables to include are `x`, `y`, `series.name` and `series.color`\n                 * and other properties on the same form. The `point.key` variable\n                 * contains the category name, x value or datetime string depending on\n                 * the type of axis. For datetime axes, the `point.key` date format can\n                 * be set using `tooltip.xDateFormat`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.headerFormat\n                 */\n                headerFormat: '<span style=\"font-size: 0.8em\">{ucfirst point.key}</span><br/>',\n                /**\n                 * The HTML of the null point's line in the tooltip. Works analogously\n                 * to [pointFormat](#tooltip.pointFormat).\n                 *\n                 * @sample {highcharts} highcharts/series/null-interaction\n                 *         Line chart with null interaction\n                 * @sample {highcharts} highcharts/plotoptions/series-nullformat\n                 *         Heatmap with null interaction\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.nullFormat\n                 */\n                /**\n                 * The HTML of the point's line in the tooltip. The context is the\n                 * [Point class](https://api.highcharts.com/class-reference/Highcharts.Point).\n                 * Variables are enclosed in curly brackets. Examples of common\n                 * variables to include are `x`, `y`, `series.name` and `series.color`\n                 * and other properties on the same form. Furthermore, `y` can be\n                 * extended by the `tooltip.valuePrefix` and `tooltip.valueSuffix`\n                 * variables. This can also be overridden for each series, which makes\n                 * it a good hook for displaying units.\n                 *\n                 * In styled mode, the dot is colored by a class name rather than the\n                 * point color.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/pointformat/\n                 *         A different point format with value suffix\n                 * @sample {highcharts|highstock} highcharts/tooltip/pointformat-extra-information/\n                 *         Show extra information about points in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type       {string}\n                 * @since      2.2\n                 * @apioption  tooltip.pointFormat\n                 */\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n                /**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/\n                 *         Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                /**\n                 * The pixel width of the tooltip border. Defaults to 0 for single\n                 * tooltips and fixed tooltips, otherwise 1 for split tooltips.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         2 pixels\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/\n                 *         No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {number}\n                 */\n                borderWidth: void 0,\n                /**\n                 * Whether to apply a drop shadow to the tooltip. Defaults to true,\n                 * unless the tooltip is [fixed](#tooltip.fixed).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/\n                 *         False\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         Fixed tooltip position, border and shadow disabled\n                 *\n                 * @type {boolean|Highcharts.ShadowOptionsObject}\n                 * @default undefined\n                 * @apioption tooltip.shadow\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @since 8.0.1\n                 */\n                stickOnContact: false,\n                /**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * Note that the default `pointerEvents` style makes the tooltip ignore\n                 * mouse events, so in order to use clickable tooltips, this value must\n                 * be set to `auto`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/style/\n                 *         Greater padding, bold text\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @internal */\n                    cursor: 'default',\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @since 2.2\n                 */\n                useHTML: false\n            },\n            /**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             */\n            credits: {\n                /**\n                 * Credits for map source to be concatenated with conventional credit\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapTextFull](#credits.mapTextFull)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   \\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapText\n                 */\n                /**\n                 * Detailed credits for map source to be displayed on hover of credits\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapText](#credits.mapText)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   {geojson.copyright}\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapTextFull\n                 */\n                /**\n                 * Whether to show the credits text.\n                 *\n                 * @sample {highcharts} highcharts/credits/enabled-false/\n                 *         Credits disabled\n                 * @sample {highstock} stock/credits/enabled/\n                 *         Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/\n                 *         Credits disabled\n                 */\n                enabled: true,\n                /**\n                 * The URL for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                href: 'https://www.highcharts.com?credits',\n                /**\n                 * Position configuration for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 *\n                 * @type    {Highcharts.AlignObject}\n                 * @since   2.1\n                 */\n                position: {\n                    /** @internal */\n                    align: 'right',\n                    /** @internal */\n                    x: -10,\n                    /** @internal */\n                    verticalAlign: 'bottom',\n                    /** @internal */\n                    y: -5\n                },\n                /**\n                 * CSS styles for the credits label.\n                 *\n                 * @see In styled mode, credits styles can be set with the\n                 *      `.highcharts-credits` class.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    cursor: 'pointer',\n                    /** @internal */\n                    color: \"#999999\" /* Palette.neutralColor40 */,\n                    /**\n                     * @type {number|string}\n                     */\n                    fontSize: '0.6em'\n                },\n                /**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to\n                 * `Highcharts @ {map-credits}`. Otherwise, it defaults to\n                 * `Highcharts.com`.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                text: 'Highcharts.com'\n            }\n        };\n        const defaultTime = new Time(defaultOptions.time, defaultOptions.lang);\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions\n         * for outside modules wasn't enough because the setOptions method created a new\n         * object.\n         *\n         * @function Highcharts.getOptions\n         *\n         * @return {Highcharts.Options}\n         * Default options.\n         */\n        function getOptions() {\n            return defaultOptions;\n        }\n        /**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @sample highcharts/members/setoptions Applying a global theme\n         *\n         * @function Highcharts.setOptions\n         *\n         * @param {Highcharts.Options} options\n         * The new custom chart options.\n         *\n         * @return {Highcharts.Options}\n         * Updated options.\n         */\n        function setOptions(options) {\n            fireEvent(H, 'setOptions', { options });\n            // Copy in the default options\n            merge(true, defaultOptions, options);\n            // Update the time object\n            if (options.time) {\n                defaultTime.update(defaultOptions.time);\n            }\n            if (options.lang && 'locale' in options.lang) {\n                defaultTime.update({\n                    locale: options.lang.locale\n                });\n            }\n            if (options.lang?.chartTitle) {\n                defaultOptions.title = {\n                    ...defaultOptions.title,\n                    text: options.lang.chartTitle\n                };\n            }\n            return defaultOptions;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DefaultOptions = {\n            defaultOptions,\n            defaultTime,\n            getOptions,\n            setOptions\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"plotBox\"|\"spacingBox\"} Highcharts.ButtonRelativeToValue\n         */\n        /**\n         * Gets fired when a series is added to the chart after load time, using the\n         * `addSeries` method. Returning `false` prevents the series from being added.\n         *\n         * @callback Highcharts.ChartAddSeriesCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.ChartAddSeriesEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains common event information. Through the `options` property you can\n         * access the series options that were passed to the `addSeries` method.\n         *\n         * @interface Highcharts.ChartAddSeriesEventObject\n         */ /**\n        * The series options that were passed to the `addSeries` method.\n        * @name Highcharts.ChartAddSeriesEventObject#options\n        * @type {Highcharts.SeriesOptionsType}\n        */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.ChartAddSeriesEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The event target.\n        * @name Highcharts.ChartAddSeriesEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.ChartAddSeriesEventObject#type\n        * @type {\"addSeries\"}\n        */\n        /**\n         * Gets fired when clicking on the plot background.\n         *\n         * @callback Highcharts.ChartClickCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.PointerEventObject} event\n         *        The event that occurred.\n         */\n        /**\n         * Contains an axes of the clicked spot.\n         *\n         * @interface Highcharts.ChartClickEventAxisObject\n         */ /**\n        * Axis at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#axis\n        * @type {Highcharts.Axis}\n        */ /**\n        * Axis value at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#value\n        * @type {number}\n        */\n        /**\n         * Contains information about the clicked spot on the chart. Remember the unit\n         * of a datetime axis is milliseconds since 1970-01-01 00:00:00.\n         *\n         * @interface Highcharts.ChartClickEventObject\n         * @extends Highcharts.PointerEventObject\n         */ /**\n        * Information about the x-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#xAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the y-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#yAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the z-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#zAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>|undefined}\n        */\n        /**\n         * Gets fired when the chart is finished loading.\n         *\n         * @callback Highcharts.ChartLoadCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Fires when the chart is redrawn, either after a call to `chart.redraw()` or\n         * after an axis, series or point is modified with the `redraw` option set to\n         * `true`.\n         *\n         * @callback Highcharts.ChartRedrawCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired after initial load of the chart (directly after the `load` event),\n         * and after each redraw (directly after the `redraw` event).\n         *\n         * @callback Highcharts.ChartRenderCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired when an area of the chart has been selected. The default action\n         * for the selection event is to zoom the chart to the selected area. It can be\n         * prevented by calling `event.preventDefault()` or return false.\n         *\n         * @callback Highcharts.ChartSelectionCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {Highcharts.SelectEventObject} event\n         *        Event informations\n         *\n         * @return {boolean|undefined}\n         *         Return false to prevent the default action, usually zoom.\n         */\n        (''); // Detach doclets above\n\n        return DefaultOptions;\n    });\n    _registerModule(_modules, 'Core/Templating.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (D, G, U) {\n        /* *\n         *\n         *  (c) 2010-2025 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, defaultTime } = D;\n        const { pageLang } = G;\n        const { extend, getNestedProperty, isArray, isNumber, isObject, isString, pick, ucfirst } = U;\n        const helpers = {\n            // Built-in helpers\n            add: (a, b) => a + b,\n            divide: (a, b) => (b !== 0 ? a / b : ''),\n            // eslint-disable-next-line eqeqeq\n            eq: (a, b) => a == b,\n            each: function (arr) {\n                const match = arguments[arguments.length - 1];\n                return isArray(arr) ?\n                    arr.map((item, i) => format(match.body, extend(isObject(item) ? item : { '@this': item }, {\n                        '@index': i,\n                        '@first': i === 0,\n                        '@last': i === arr.length - 1\n                    }))).join('') :\n                    false;\n            },\n            ge: (a, b) => a >= b,\n            gt: (a, b) => a > b,\n            'if': (condition) => !!condition,\n            le: (a, b) => a <= b,\n            lt: (a, b) => a < b,\n            multiply: (a, b) => a * b,\n            // eslint-disable-next-line eqeqeq\n            ne: (a, b) => a != b,\n            subtract: (a, b) => a - b,\n            ucfirst,\n            unless: (condition) => !condition\n        };\n        const numberFormatCache = {};\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Internal convenience function\n        const isQuotedString = (str) => /^[\"'].+[\"']$/.test(str);\n        /**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime](https://www.php.net/manual/en/function.strftime.php) function.\n         * Additional formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * Since v6.0.5, all internal dates are formatted through the\n         * {@link Highcharts.Chart#time} instance to respect chart-level time settings.\n         * The `Highcharts.dateFormat` function only reflects global time settings set\n         * with `setOptions`.\n         *\n         * Supported format keys:\n         * - `%a`: Short weekday, like 'Mon'\n         * - `%A`: Long weekday, like 'Monday'\n         * - `%d`: Two digit day of the month, 01 to 31\n         * - `%e`: Day of the month, 1 through 31\n         * - `%w`: Day of the week, 0 through 6\n         * - `%b`: Short month, like 'Jan'\n         * - `%B`: Long month, like 'January'\n         * - `%m`: Two digit month number, 01 through 12\n         * - `%y`: Two digits year, like 09 for 2009\n         * - `%Y`: Four digits year, like 2009\n         * - `%H`: Two digits hours in 24h format, 00 through 23\n         * - `%k`: Hours in 24h format, 0 through 23\n         * - `%I`: Two digits hours in 12h format, 00 through 11\n         * - `%l`: Hours in 12h format, 1 through 12\n         * - `%M`: Two digits minutes, 00 through 59\n         * - `%p`: Upper case AM or PM\n         * - `%P`: Lower case AM or PM\n         * - `%S`: Two digits seconds, 00 through 59\n         * - `%L`: Milliseconds (naming from Ruby)\n         *\n         * @function Highcharts.dateFormat\n         *\n         * @param {string} format\n         *        The desired format where various time representations are prefixed\n         *        with `%`.\n         *\n         * @param {number} timestamp\n         *        The JavaScript timestamp.\n         *\n         * @param {boolean} [upperCaseFirst=false]\n         *        Upper case first letter in the return.\n         *\n         * @return {string}\n         *         The formatted date.\n         */\n        function dateFormat(format, timestamp, upperCaseFirst) {\n            return defaultTime.dateFormat(format, timestamp, upperCaseFirst);\n        }\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @example\n         * let s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         *\n         * @function Highcharts.format\n         *\n         * @param {string} str\n         *        The string to format.\n         *\n         * @param {Record<string, *>} ctx\n         *        The context, a collection of key-value pairs where each key is\n         *        replaced by its value.\n         *\n         * @param {Highcharts.Chart} [owner]\n         *        A `Chart` or `DataGrid` instance used to get numberFormatter and time.\n         *\n         * @return {string}\n         *         The formatted string.\n         */\n        function format(str = '', ctx, owner) {\n            // Notice: using u flag will require a refactor for ES5 (#22450).\n            const regex = /\\{([a-zA-Z\\u00C0-\\u017F\\d:\\.,;\\-\\/<>\\[\\]%_@+\"'’= #\\(\\)]+)\\}/g, // eslint-disable-line max-len\n            // The sub expression regex is the same as the top expression regex,\n            // but except parens and block helpers (#), and surrounded by parens\n            // instead of curly brackets.\n            subRegex = /\\(([a-zA-Z\\u00C0-\\u017F\\d:\\.,;\\-\\/<>\\[\\]%_@+\"'= ]+)\\)/g, matches = [], floatRegex = /f$/, decRegex = /\\.(\\d)/, lang = owner?.options?.lang || defaultOptions.lang, time = owner?.time || defaultTime, numberFormatter = owner?.numberFormatter || numberFormat.bind(owner);\n            /*\n             * Get a literal or variable value inside a template expression. May be\n             * extended with other types like string or null if needed, but keep it\n             * small for now.\n             */\n            const resolveProperty = (key = '') => {\n                let n;\n                // Literals\n                if (key === 'true') {\n                    return true;\n                }\n                if (key === 'false') {\n                    return false;\n                }\n                if ((n = Number(key)).toString() === key) {\n                    return n;\n                }\n                if (isQuotedString(key)) {\n                    return key.slice(1, -1);\n                }\n                // Variables and constants\n                return getNestedProperty(key, ctx);\n            };\n            let match, currentMatch, depth = 0, hasSub;\n            // Parse and create tree\n            while ((match = regex.exec(str)) !== null) {\n                // When a sub expression is found, it is evaluated first, and the\n                // results recursively evaluated until no subexpression exists.\n                const mainMatch = match, subMatch = subRegex.exec(match[1]);\n                if (subMatch) {\n                    match = subMatch;\n                    hasSub = true;\n                }\n                if (!currentMatch?.isBlock) {\n                    currentMatch = {\n                        ctx,\n                        expression: match[1],\n                        find: match[0],\n                        isBlock: match[1].charAt(0) === '#',\n                        start: match.index,\n                        startInner: match.index + match[0].length,\n                        length: match[0].length\n                    };\n                }\n                // Identify helpers\n                const fn = (currentMatch.isBlock ? mainMatch : match)[1].split(' ')[0].replace('#', '');\n                if (helpers[fn]) {\n                    // Block helper, only 0 level is handled\n                    if (currentMatch.isBlock && fn === currentMatch.fn) {\n                        depth++;\n                    }\n                    if (!currentMatch.fn) {\n                        currentMatch.fn = fn;\n                    }\n                }\n                // Closing a block helper\n                const startingElseSection = match[1] === 'else';\n                if (currentMatch.isBlock &&\n                    currentMatch.fn && (match[1] === `/${currentMatch.fn}` ||\n                    startingElseSection)) {\n                    if (!depth) { // === 0\n                        const start = currentMatch.startInner, body = str.substr(start, match.index - start);\n                        // Either closing without an else section, or when encountering\n                        // an else section\n                        if (currentMatch.body === void 0) {\n                            currentMatch.body = body;\n                            currentMatch.startInner = match.index + match[0].length;\n                            // The body exists already, so this is the else section\n                        }\n                        else {\n                            currentMatch.elseBody = body;\n                        }\n                        currentMatch.find += body + match[0];\n                        if (!startingElseSection) {\n                            matches.push(currentMatch);\n                            currentMatch = void 0;\n                        }\n                    }\n                    else if (!startingElseSection) {\n                        depth--;\n                    }\n                    // Common expression\n                }\n                else if (!currentMatch.isBlock) {\n                    matches.push(currentMatch);\n                }\n                // Evaluate sub-matches one by one to prevent orphaned block closers\n                if (subMatch && !currentMatch?.isBlock) {\n                    break;\n                }\n            }\n            // Execute\n            matches.forEach((match) => {\n                const { body, elseBody, expression, fn } = match;\n                let replacement, i;\n                // Helper function\n                if (fn) {\n                    // Pass the helpers the amount of arguments defined by the function,\n                    // then the match as the last argument.\n                    const args = [match], parts = [], len = expression.length;\n                    let start = 0, startChar;\n                    for (i = 0; i <= len; i++) {\n                        const char = expression.charAt(i);\n                        // Start of string\n                        if (!startChar && (char === '\"' || char === '\\'')) {\n                            startChar = char;\n                            // End of string\n                        }\n                        else if (startChar === char) {\n                            startChar = '';\n                        }\n                        if (!startChar &&\n                            (char === ' ' || i === len)) {\n                            parts.push(expression.substr(start, i - start));\n                            start = i + 1;\n                        }\n                    }\n                    i = helpers[fn].length;\n                    while (i--) {\n                        args.unshift(resolveProperty(parts[i + 1]));\n                    }\n                    replacement = helpers[fn].apply(ctx, args);\n                    // Block helpers may return true or false. They may also return a\n                    // string, like the `each` helper.\n                    if (match.isBlock && typeof replacement === 'boolean') {\n                        replacement = format(replacement ? body : elseBody, ctx, owner);\n                    }\n                    // Simple variable replacement\n                }\n                else {\n                    const valueAndFormat = isQuotedString(expression) ?\n                        [expression] : expression.split(':');\n                    replacement = resolveProperty(valueAndFormat.shift() || '');\n                    // Format the replacement\n                    const isFloat = replacement % 1 !== 0;\n                    if (typeof replacement === 'number' &&\n                        (valueAndFormat.length || isFloat)) {\n                        const segment = valueAndFormat.join(':');\n                        if (floatRegex.test(segment) || isFloat) { // Float\n                            const decimals = parseInt((segment.match(decRegex) || ['', '-1'])[1], 10);\n                            if (replacement !== null) {\n                                replacement = numberFormatter(replacement, decimals, lang.decimalPoint, segment.indexOf(',') > -1 ? lang.thousandsSep : '');\n                            }\n                        }\n                        else {\n                            replacement = time.dateFormat(segment, replacement);\n                        }\n                    }\n                    // Use string literal in order to be preserved in the outer\n                    // expression\n                    subRegex.lastIndex = 0;\n                    if (subRegex.test(match.find) && isString(replacement)) {\n                        replacement = `\"${replacement}\"`;\n                    }\n                }\n                str = str.replace(match.find, pick(replacement, ''));\n            });\n            return hasSub ? format(str, ctx, owner) : str;\n        }\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @sample highcharts/members/highcharts-numberformat/\n         *         Custom number format\n         *\n         * @function Highcharts.numberFormat\n         *\n         * @param {number} number\n         *        The input number to format.\n         *\n         * @param {number} decimals\n         *        The amount of decimals. A value of -1 preserves the amount in the\n         *        input number.\n         *\n         * @param {string} [decimalPoint]\n         *        The decimal point, defaults to the one given in the lang options, or\n         *        a dot.\n         *\n         * @param {string} [thousandsSep]\n         *        The thousands separator, defaults to the one given in the lang\n         *        options, or a space character.\n         *\n         * @return {string}\n         *         The formatted number.\n         */\n        function numberFormat(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n            let ret, fractionDigits, [mantissa, exp] = number.toString().split('e').map(Number);\n            const lang = this?.options?.lang || defaultOptions.lang, origDec = (number.toString().split('.')[1] || '').split('e')[0].length, firstDecimals = decimals, options = {};\n            decimalPoint ?? (decimalPoint = lang.decimalPoint);\n            thousandsSep ?? (thousandsSep = lang.thousandsSep);\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            }\n            else if (!isNumber(decimals)) {\n                decimals = 2;\n            }\n            else if (decimals && exp < 0) {\n                // Expose decimals from exponential notation (#7042)\n                fractionDigits = decimals + exp;\n                if (fractionDigits >= 0) {\n                    // Remove too small part of the number while keeping the notation\n                    mantissa = +mantissa.toExponential(fractionDigits).split('e')[0];\n                    decimals = fractionDigits;\n                }\n                else {\n                    // `fractionDigits < 0`\n                    mantissa = Math.floor(mantissa);\n                    if (decimals < 20) {\n                        // Use number instead of exponential notation (#7405)\n                        number = +(mantissa * Math.pow(10, exp)).toFixed(decimals);\n                    }\n                    else {\n                        // Or zero\n                        number = 0;\n                    }\n                    exp = 0;\n                }\n            }\n            if (exp) {\n                decimals ?? (decimals = 2);\n                number = mantissa;\n            }\n            if (isNumber(decimals) && decimals >= 0) {\n                options.minimumFractionDigits = decimals;\n                options.maximumFractionDigits = decimals;\n            }\n            if (thousandsSep === '') {\n                options.useGrouping = false;\n            }\n            const hasSeparators = thousandsSep || decimalPoint, locale = hasSeparators ?\n                'en' : (this?.locale || lang.locale || pageLang), cacheKey = JSON.stringify(options) + locale, nf = numberFormatCache[cacheKey] ?? (numberFormatCache[cacheKey] = new Intl.NumberFormat(locale, options));\n            ret = nf.format(number);\n            // If thousandsSep or decimalPoint are set, fall back to using English\n            // format with string replacement for the separators.\n            if (hasSeparators) {\n                ret = ret\n                    // Preliminary step to avoid re-swapping (#22402)\n                    .replace(/([,\\.])/g, '_$1')\n                    .replace(/_\\,/g, thousandsSep ?? ',')\n                    .replace('_.', decimalPoint ?? '.');\n            }\n            if (\n            // Remove signed zero (#20564)\n            (!decimals && +ret === 0) ||\n                // Small numbers, no decimals (#14023)\n                (exp < 0 && !firstDecimals)) {\n                ret = '0';\n            }\n            if (exp && +ret !== 0) {\n                ret += 'e' + (exp < 0 ? '' : '+') + exp;\n            }\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Templating = {\n            dateFormat,\n            format,\n            helpers,\n            numberFormat\n        };\n        /* *\n         * API Declarations\n         * */\n        /**\n         * @interface Highcharts.Templating\n         *\n         * The Highcharts.Templating interface provides a structure for defining\n         * helpers. Helpers can be used as conditional blocks or functions within\n         * expressions. Highcharts includes several built-in helpers and supports\n         * the addition of custom helpers.\n         *\n         * @see [More information](\n         * https://www.highcharts.com/docs/chart-concepts/templating#helpers)\n         *\n         * @example\n         * // Define a custom helper to return the absolute value of a number\n         * Highcharts.Templating.helpers.abs = value => Math.abs(value);\n         *\n         * // Usage in a format string\n         * format: 'Absolute value: {abs point.y}'\n         *\n         * @name Highcharts.Templating#helpers\n         * @type {Record<string, Function>}\n         */\n        (''); // Keeps doclets above in file\n\n        return Templating;\n    });\n    _registerModule(_modules, 'Dashboards/Components/KPIComponent/KPIComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/KPIComponent/KPISyncs/KPISyncs.js'], _modules['Dashboards/Components/KPIComponent/KPIComponentDefaults.js'], _modules['Data/Formula/Functions/SUM.js'], _modules['Data/Formula/Functions/AVERAGE.js'], _modules['Data/Formula/Functions/MEDIAN.js'], _modules['Data/Formula/Functions/MAX.js'], _modules['Data/Formula/Functions/MIN.js'], _modules['Data/Formula/Functions/COUNT.js'], _modules['Data/Formula/Functions/PRODUCT.js'], _modules['Core/Templating.js'], _modules['Core/Utilities.js']], function (AST, Component, KPISyncs, KPIComponentDefaults, SUM, AVERAGE, MEDIAN, MAX, MIN, COUNT, PRODUCT, Templating, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { format } = Templating;\n        const { createElement, css, defined, diffObjects, isArray, isNumber, merge, isFunction } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a KPI component.\n         *\n         */\n        class KPIComponent extends Component {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a KPI component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options, board) {\n                options = merge(KPIComponent.defaultOptions, options);\n                super(cell, options, board);\n                this.options = options;\n                this.type = 'KPI';\n                this.value = createElement('span', {\n                    className: `${options.className}-value`\n                }, {}, this.contentElement);\n                this.subtitle = createElement('span', {\n                    className: this.getSubtitleClassName()\n                }, {}, this.contentElement);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                await super.load();\n                this.linkValueToChart();\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                // Animate\n                if (this.chart && this.chart.container) {\n                    this.chart.reflow();\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.updateElements();\n                const charter = KPIComponent.charter?.Chart;\n                if (charter &&\n                    this.options.chartOptions &&\n                    !this.chart) {\n                    if (!this.chartContainer) {\n                        this.chartContainer = createElement('div', {\n                            className: `${this.options.className}-chart-container`\n                        }, {\n                            // Fix inner height, when using flex box\n                            padding: '0.1px'\n                        }, this.contentElement);\n                    }\n                    this.chart = charter.chart(this.chartContainer, merge(KPIComponent.defaultChartOptions, this.options.chartOptions));\n                }\n                else if (this.chart &&\n                    !this.options.chartOptions &&\n                    'chartOptions' in this.options) {\n                    this.chart.destroy();\n                    this.chart = void 0;\n                }\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options);\n                if (options.chartOptions && this.chart) {\n                    this.chart.update(options.chartOptions);\n                }\n                shouldRerender && this.render();\n            }\n            /**\n             * @internal\n             */\n            onTableChanged() {\n                this.setValue();\n            }\n            /**\n             * Destroys the highcharts component.\n             */\n            destroy() {\n                // Cleanup references in the global Highcharts scope\n                this.chart?.destroy();\n                super.destroy();\n            }\n            /**\n             * Gets a proper value, according to the provided formula option.\n             *\n             * @returns\n             * The formula value. Can be a number internally, or a string from the\n             * callback function.\n             *\n             * @internal\n             */\n            getFormulaValue() {\n                const formula = this.options.formula;\n                const connector = this.getFirstConnector();\n                const table = connector?.table.modified;\n                const column = table?.getColumn(this.options.columnName);\n                if (!column || !formula) {\n                    return;\n                }\n                if (isFunction(formula)) {\n                    return formula.call(this, column);\n                }\n                let filteredColumn = Array.isArray(column) ?\n                    column.slice().filter(defined) : Array.from(column);\n                // Filter NaN values and empty strings since the formula functions don't\n                // handle it internally.\n                if (formula === 'MIN' || formula === 'MAX' || formula === 'MEDIAN') {\n                    filteredColumn = filteredColumn.filter((val) => val !== '' && !isNaN(Number(val)));\n                }\n                // Sort values since the formula function don't handle it internally.\n                if (formula === 'MEDIAN') {\n                    filteredColumn.sort((a, b) => Number(a) - Number(b));\n                }\n                try {\n                    return KPIComponent.formulaFunctions[formula](filteredColumn);\n                }\n                catch {\n                    console.warn('Invalid formula option provided.'); // eslint-disable-line no-console\n                }\n            }\n            /**\n             * Gets the default value that should be displayed in the KPI.\n             *\n             * @returns\n             * The value that should be displayed in the KPI.\n             */\n            getValue() {\n                if (defined(this.options.value)) {\n                    return this.options.value;\n                }\n                const connector = this.getFirstConnector();\n                if (connector && this.options.columnName) {\n                    if (defined(this.options.formula)) {\n                        return this.getFormulaValue();\n                    }\n                    const table = connector.table.modified, column = table.getColumn(this.options.columnName), length = column?.length || 0;\n                    return table.getCellAsString(this.options.columnName, length - 1);\n                }\n            }\n            /**\n             * Sets the value that should be displayed in the KPI.\n             *\n             * @param value\n             * The value to display in the KPI.\n             */\n            setValue(value = this.getValue()) {\n                const { valueFormat, valueFormatter } = this.options;\n                if (defined(value)) {\n                    let prevValue;\n                    if (isNumber(+value)) {\n                        prevValue = +value;\n                    }\n                    if (valueFormatter) {\n                        value = valueFormatter.call(this, value);\n                    }\n                    else if (valueFormat) {\n                        value = format(valueFormat, { value });\n                    }\n                    else if (isNumber(value)) {\n                        value = value.toLocaleString();\n                    }\n                    AST.setElementHTML(this.value, '' + value);\n                    this.linkValueToChart(prevValue);\n                    this.prevValue = prevValue;\n                }\n            }\n            /**\n             * Handles updating chart point value.\n             *\n             * @internal\n             */\n            linkValueToChart(value = this.getValue()) {\n                const chart = this.chart;\n                const linkedValueTo = this.options.linkedValueTo;\n                if (!chart || !linkedValueTo.enabled ||\n                    !defined(value) || !isNumber(+value)) {\n                    return;\n                }\n                value = +value;\n                const targetSeries = chart.series[linkedValueTo.seriesIndex ?? 0], targetPoint = targetSeries?.points[linkedValueTo.pointIndex ?? 0];\n                if (targetSeries) {\n                    if (targetPoint) {\n                        targetPoint.update({\n                            y: value\n                        });\n                        return;\n                    }\n                    targetSeries.addPoint({\n                        y: value\n                    });\n                    return;\n                }\n                chart.addSeries({\n                    data: [{\n                            y: value\n                        }]\n                });\n            }\n            /**\n             * Handles updating elements via options\n             *\n             * @internal\n             */\n            updateElements() {\n                const { style, subtitle } = this.options;\n                this.setValue();\n                AST.setElementHTML(this.subtitle, this.getSubtitle());\n                if (style) {\n                    css(this.element, style);\n                }\n                if (typeof subtitle === 'object') {\n                    if (subtitle.style) {\n                        css(this.subtitle, subtitle.style);\n                    }\n                    this.subtitle.className = this.getSubtitleClassName();\n                }\n                if (this.chartContainer) {\n                    this.chartContainer.style.flex =\n                        this.options.chartOptions ? '1' : '0';\n                }\n                if (this.chart) {\n                    this.chart.reflow();\n                }\n                this.value.style.color = this.getValueColor();\n            }\n            /**\n             * Gets KPI subtitle text.\n             *\n             * @returns\n             * The subtitle's text.\n             *\n             * @internal\n             */\n            getSubtitle() {\n                const { subtitle, value } = this.options;\n                if (typeof subtitle === 'string') {\n                    return subtitle;\n                }\n                if (subtitle) {\n                    if (isNumber(this.prevValue) && isNumber(value)) {\n                        const diff = value - this.prevValue;\n                        let prefix = '';\n                        if (diff > 0) {\n                            prefix = '<span style=\"color:green\">&#9650;</span> +';\n                        }\n                        else if (diff < 0) {\n                            prefix = '<span style=\"color:red\">&#9660;</span> ';\n                        }\n                        else {\n                            return this.subtitle.innerHTML;\n                        }\n                        if (subtitle.type === 'diff') {\n                            return prefix + diff.toLocaleString();\n                        }\n                        if (subtitle.type === 'diffpercent') {\n                            return prefix + format('{v:,.2f}%', {\n                                v: diff / this.prevValue * 100\n                            });\n                        }\n                    }\n                    return subtitle.text || '';\n                }\n                return '';\n            }\n            /**\n             * Gets CSS class name of the KPI subtitle.\n             *\n             * @returns\n             * The name of class.\n             *\n             * @internal\n             */\n            getSubtitleClassName() {\n                const { subtitle } = this.options;\n                return `${Component.defaultOptions.className}-subtitle` +\n                    ((typeof subtitle === 'object' && subtitle.className) || '');\n            }\n            /**\n             * Applies title's color according to the threshold.\n             *\n             * @returns\n             * Hex of color.\n             *\n             * @internal\n             */\n            getValueColor() {\n                const { threshold, thresholdColors, value } = this.options;\n                if (thresholdColors && threshold && isNumber(value)) {\n                    if (isArray(threshold)) {\n                        for (let i = threshold.length - 1; i >= 0; i--) {\n                            if (value >= threshold[i]) {\n                                if (i + 1 < thresholdColors.length) {\n                                    return thresholdColors[i + 1];\n                                }\n                                return thresholdColors[thresholdColors.length - 1];\n                            }\n                        }\n                    }\n                    else if (value >= threshold) {\n                        return thresholdColors[1];\n                    }\n                    return thresholdColors[0];\n                }\n                return '';\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'KPI'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Get the KPI component's options.\n             * @returns\n             * KPI component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, KPIComponent.defaultOptions),\n                    type: 'KPI'\n                };\n            }\n        }\n        /**\n         * Default options of the KPI component.\n         */\n        KPIComponent.defaultOptions = merge(Component.defaultOptions, KPIComponentDefaults);\n        /**\n         * Predefined sync config for the KPI component.\n         */\n        KPIComponent.predefinedSyncConfig = KPISyncs;\n        /**\n         * Default options of the KPI component.\n         *\n         * @default {\n            chart: {\n                type: 'spline',\n                zooming: {\n                    mouseWheel: {\n                        enabled: false\n                    }\n                }\n            },\n            title: {\n                text: void 0\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false,\n                title: {\n                    text: null\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            tooltip: {\n                outside: true\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            }\n        }\n         */\n        KPIComponent.defaultChartOptions = {\n            chart: {\n                type: 'spline',\n                zooming: {\n                    mouseWheel: {\n                        enabled: false\n                    }\n                }\n            },\n            title: {\n                text: void 0\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false,\n                title: {\n                    text: null\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            tooltip: {\n                outside: true\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            }\n        };\n        /**\n         * The formula option's default formula functions map.\n         */\n        KPIComponent.formulaFunctions = {\n            SUM,\n            AVERAGE,\n            MEDIAN,\n            MAX,\n            MIN,\n            COUNT,\n            PRODUCT\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return KPIComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const NavigatorComponentDefaults = {\n            type: 'Navigator',\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-navigator`\n            ].join(' '),\n            chartOptions: {\n                chart: {\n                    animation: false,\n                    height: 200,\n                    type: 'column',\n                    zooming: {\n                        mouseWheel: {\n                            enabled: false\n                        }\n                    }\n                },\n                credits: {\n                    enabled: false\n                },\n                legend: {\n                    enabled: false\n                },\n                navigator: {\n                    enabled: true,\n                    outlineWidth: 0,\n                    series: {\n                        animation: false,\n                        lineWidth: 0,\n                        colorIndex: 0\n                    },\n                    xAxis: {\n                        endOnTick: true,\n                        gridZIndex: 4,\n                        labels: {\n                            x: 1,\n                            y: 22\n                        },\n                        opposite: true,\n                        showFirstLabel: true,\n                        showLastLabel: true,\n                        startOnTick: true,\n                        tickPosition: 'inside'\n                    },\n                    yAxis: {\n                        maxPadding: 0.5\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        borderRadius: 0,\n                        marker: {\n                            enabled: false\n                        },\n                        states: {\n                            hover: {\n                                enabled: false\n                            }\n                        }\n                    }\n                },\n                scrollbar: {\n                    enabled: true\n                },\n                title: {\n                    text: ''\n                },\n                tooltip: {\n                    enabled: false\n                },\n                xAxis: {\n                    visible: false,\n                    minRange: Number.MIN_VALUE\n                },\n                yAxis: {\n                    visible: false\n                }\n            },\n            editableOptions: (Component.defaultOptions.editableOptions || []).concat()\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncUtils.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Namespace\n        *\n        * */\n        var NavigatorSyncUtils;\n        (function (NavigatorSyncUtils) {\n            /* *\n            *\n            *  Utility Functions\n            *\n            * */\n            /**\n             * Adds or updates range options for a specific column.\n             * @param ranges Array of range options (will be modified).\n             * @param column Column name.\n             * @param minValue Minimum value.\n             * @param maxValue Maximum value.\n             * @internal\n             */\n            function setRangeOptions(ranges, column, minValue, maxValue) {\n                let changed = false;\n                for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                    if (ranges[i].column === column) {\n                        ranges[i].maxValue = maxValue;\n                        ranges[i].minValue = minValue;\n                        changed = true;\n                        break;\n                    }\n                }\n                if (!changed) {\n                    ranges.push({ column, maxValue, minValue });\n                }\n            }\n            NavigatorSyncUtils.setRangeOptions = setRangeOptions;\n            /**\n             * Removes range options for a specific column.\n             * @param ranges Array of range options (will be modified).\n             * @param column Column name.\n             * @internal\n             */\n            function unsetRangeOptions(ranges, column) {\n                for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                    if (ranges[i].column === column) {\n                        return ranges.splice(i, 1)[0];\n                    }\n                }\n            }\n            NavigatorSyncUtils.unsetRangeOptions = unsetRangeOptions;\n        })(NavigatorSyncUtils || (NavigatorSyncUtils = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorSyncUtils;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorCrossfilterSync.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncUtils.js'], _modules['Core/Utilities.js']], function (DataModifier, NavigatorSyncUtils, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { Range: RangeModifier } = DataModifier.types;\n        const { addEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {\n            affectNavigator: false\n        };\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Navigator') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.crossfilter;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const afterSetExtremes = async (extremes) => {\n                    if (component.connectorHandlers?.[0]?.connector) {\n                        const table = component.connectorHandlers[0].connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = component.getAxisExtremes();\n                        let modifier = table.getModifier();\n                        if (modifier instanceof RangeModifier) {\n                            NavigatorSyncUtils.setRangeOptions(modifier.options.ranges, filterColumn, min, max);\n                        }\n                        else {\n                            modifier = new RangeModifier({\n                                ranges: [{\n                                        column: filterColumn,\n                                        maxValue: max,\n                                        minValue: min\n                                    }]\n                            });\n                        }\n                        await table.setModifier(modifier);\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, min),\n                            state: 'crossfilter' + groupKey\n                        }, extremes);\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, max),\n                            state: 'crossfilter' + groupKey\n                        }, extremes);\n                    }\n                };\n                let delay;\n                return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                    clearTimeout(delay);\n                    delay = setTimeout(afterSetExtremes, 50, this, extremes);\n                });\n            },\n            handler: void 0\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorExtremesSync.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncUtils.js'], _modules['Core/Utilities.js']], function (DataModifier, NavigatorSyncUtils, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        const { Range: RangeModifier } = DataModifier.types;\n        const { addEvent, pick, defined } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const defaultOptions = {};\n        const syncPair = {\n            emitter: function () {\n                if (this.type !== 'Navigator') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const afterSetExtremes = (extremes) => {\n                    if (component.connectorHandlers?.[0]?.connector) {\n                        const table = component.connectorHandlers[0].connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = component.getAxisExtremes();\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, min),\n                            state: 'xAxis.extremes.min' + groupKey\n                        }, extremes);\n                        dataCursor.emitCursor(table, {\n                            type: 'position',\n                            column: filterColumn,\n                            row: table.getRowIndexBy(filterColumn, max),\n                            state: 'xAxis.extremes.max' + groupKey\n                        }, extremes);\n                    }\n                };\n                let delay;\n                return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                    clearTimeout(delay);\n                    delay = setTimeout(afterSetExtremes, 50, this, extremes);\n                });\n            },\n            handler: function () {\n                if (this.type !== 'Navigator') {\n                    return;\n                }\n                const component = this;\n                const syncOptions = this.sync.syncConfig.extremes;\n                const groupKey = syncOptions.group ? ':' + syncOptions.group : '';\n                const dataCursor = component.board.dataCursor;\n                const extremesListener = (e) => {\n                    const cursor = e.cursor;\n                    if (!component.connectorHandlers?.[0]?.connector) {\n                        return;\n                    }\n                    const table = component.connectorHandlers[0].connector.table;\n                    // Assume first column with unique keys as fallback\n                    let extremesColumn = table.getColumnNames()[0], maxIndex = table.getRowCount(), minIndex = 0;\n                    if (cursor.type === 'range') {\n                        maxIndex = cursor.lastRow;\n                        minIndex = cursor.firstRow;\n                        if (cursor.columns) {\n                            extremesColumn = pick(cursor.columns[0], extremesColumn);\n                        }\n                    }\n                    else if (cursor.state === 'xAxis.extremes.max' + groupKey) {\n                        extremesColumn = pick(cursor.column, extremesColumn);\n                        maxIndex = pick(cursor.row, maxIndex);\n                    }\n                    else {\n                        extremesColumn = pick(cursor.column, extremesColumn);\n                        minIndex = pick(cursor.row, minIndex);\n                    }\n                    const modifier = table.getModifier();\n                    if (typeof extremesColumn === 'string' &&\n                        modifier instanceof RangeModifier) {\n                        const ranges = modifier.options.ranges, min = table.getCell(extremesColumn, minIndex), max = table.getCell(extremesColumn, maxIndex);\n                        if (defined(max) && defined(min)) {\n                            NavigatorSyncUtils.unsetRangeOptions(ranges, extremesColumn);\n                            ranges.unshift({\n                                column: extremesColumn,\n                                maxValue: max,\n                                minValue: min\n                            });\n                            table.setModifier(modifier);\n                        }\n                    }\n                };\n                const registerCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (table) {\n                        dataCursor.addListener(table.id, 'xAxis.extremes' + groupKey, extremesListener);\n                        dataCursor.addListener(table.id, 'xAxis.extremes.max' + groupKey, extremesListener);\n                        dataCursor.addListener(table.id, 'xAxis.extremes.min' + groupKey, extremesListener);\n                    }\n                };\n                const unregisterCursorListeners = () => {\n                    const table = component.connectorHandlers?.[0]?.connector?.table;\n                    if (table) {\n                        dataCursor.removeListener(table.id, 'xAxis.extremes' + groupKey, extremesListener);\n                        dataCursor.removeListener(table.id, 'xAxis.extremes.max' + groupKey, extremesListener);\n                        dataCursor.removeListener(table.id, 'xAxis.extremes.min' + groupKey, extremesListener);\n                    }\n                };\n                registerCursorListeners();\n                return unregisterCursorListeners;\n            }\n        };\n        /* *\n        *\n        *  Default export\n        *\n        * */\n\n        return { defaultOptions, syncPair };\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncs.js', [_modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorCrossfilterSync.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorExtremesSync.js']], function (NavigatorCrossfilterSync, NavigatorExtremesSync) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Dawid Dragula\n         *\n         * */\n        /* *\n        *\n        *  Constants\n        *\n        * */\n        const predefinedSyncConfig = {\n            defaultSyncPairs: {\n                crossfilter: NavigatorCrossfilterSync.syncPair,\n                extremes: NavigatorExtremesSync.syncPair\n            },\n            defaultSyncOptions: {\n                crossfilter: NavigatorCrossfilterSync.defaultOptions,\n                extremes: NavigatorExtremesSync.defaultOptions\n            }\n        };\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return predefinedSyncConfig;\n    });\n    _registerModule(_modules, 'Dashboards/Components/NavigatorComponent/NavigatorComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorComponentDefaults.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorSyncs/NavigatorSyncs.js'], _modules['Core/Utilities.js']], function (Component, Globals, NavigatorComponentDefaults, NavigatorSyncs, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { diffObjects, isNumber, isString, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Setup a component with data navigation.\n         */\n        class NavigatorComponent extends Component {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options) {\n                super(cell, options);\n                this.type = 'Navigator';\n                this.options = merge(NavigatorComponent.defaultOptions, options);\n                const charter = (NavigatorComponent.charter.Chart ||\n                    Globals.win.Highcharts);\n                this.chartContainer = Globals.win.document.createElement('div');\n                this.chart = charter\n                    .chart(this.chartContainer, (this.options.chartOptions || {}));\n                this.chartContainer.classList\n                    .add(Globals.classNamePrefix + 'navigator');\n                if (this.sync.syncConfig.crossfilter?.enabled) {\n                    this.chart.update(merge({ navigator: { xAxis: { labels: { format: '{value}' } } } }, this.options.chartOptions || {}), false);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            adjustNavigator() {\n                const chart = this.chart, height = pick(chart.chartHeight, this.contentElement.clientHeight), width = this.contentElement.clientWidth, chartUpdates = {};\n                if (chart.chartHeight !== height ||\n                    chart.chartWidth !== width) {\n                    chartUpdates.chart = {\n                        height,\n                        width\n                    };\n                }\n                if (chart.navigator) {\n                    const navigator = chart.navigator, navigatorHeight = (navigator.top - chart.plotTop + navigator.height);\n                    if (navigator.height !== navigatorHeight) {\n                        chartUpdates.navigator = {\n                            handles: {\n                                height: Math.round(height / 4)\n                            },\n                            height: navigatorHeight\n                        };\n                    }\n                    if (Object.keys(chartUpdates).length) {\n                        chart.update(chartUpdates, false);\n                    }\n                    if (navigator.series && navigator.series[0]) {\n                        navigator.series[0].update({\n                            type: chart.series[0].type\n                        }, false);\n                    }\n                }\n                else if (Object.keys(chartUpdates).length) {\n                    chart.update(chartUpdates, false);\n                }\n            }\n            /**\n             * Returns the first column of columnAssignment to use for navigator data.\n             * @private\n             *\n             * @return\n             * Navigator column assignment.\n             */\n            getColumnAssignment() {\n                const columnAssignment = this.options.columnAssignment ??\n                    this.options.columnAssignments ?? {};\n                let columnsAssignment;\n                for (const column of Object.keys(columnAssignment)) {\n                    columnsAssignment = columnAssignment[column];\n                    if (columnsAssignment !== null) {\n                        return [column, columnsAssignment];\n                    }\n                }\n                const connector = this.getFirstConnector();\n                if (connector) {\n                    const columns = connector.table.getColumnNames();\n                    if (columns.length) {\n                        return [columns[0], 'y'];\n                    }\n                }\n                return ['', 'y'];\n            }\n            /**\n             * Gets the component's options.\n             * @internal\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, NavigatorComponentDefaults),\n                    type: 'Navigator'\n                };\n            }\n            /**\n             * Gets the extremes of the navigator's x-axis.\n             */\n            getAxisExtremes() {\n                const axis = this.chart.xAxis[0], extremes = axis.getExtremes(), min = isNumber(extremes.min) ? extremes.min : extremes.dataMin, max = isNumber(extremes.max) ? extremes.max : extremes.dataMax;\n                if (this.categories) {\n                    return [\n                        this.categories[Math.max(0, Math.ceil(min))],\n                        this.categories[Math.min(this.categories.length - 1, Math.floor(max))]\n                    ];\n                }\n                if (axis.hasNames) {\n                    return [\n                        axis.names[Math.ceil(min)],\n                        axis.names[Math.floor(max)]\n                    ];\n                }\n                return [min, max];\n            }\n            /** @private */\n            async load() {\n                await super.load();\n                this.contentElement.appendChild(this.chartContainer);\n                this.parentElement.appendChild(this.element);\n                this.adjustNavigator();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            onTableChanged() {\n                this.renderNavigator();\n            }\n            /** @private */\n            redrawNavigator() {\n                const timeouts = this.resizeTimeouts;\n                for (let i = 0, iEnd = timeouts.length; i < iEnd; ++i) {\n                    clearTimeout(timeouts[i]);\n                }\n                timeouts.length = 0;\n                timeouts.push(setTimeout(() => {\n                    this.adjustNavigator();\n                    this.chart.redraw();\n                }, 33));\n            }\n            /** @private */\n            render() {\n                const component = this;\n                super.render();\n                component.renderNavigator();\n                component.sync.start();\n                component.emit({ type: 'afterRender' });\n                return component;\n            }\n            /** @private */\n            renderNavigator() {\n                const chart = this.chart;\n                const connector = this.getFirstConnector();\n                if (connector) {\n                    const table = connector.table, column = this.getColumnAssignment(), columnValues = table.getColumn(column[0], true) || [];\n                    let data;\n                    if (this.sync.syncConfig.crossfilter?.enabled) {\n                        data = this.generateCrossfilterData();\n                    }\n                    else {\n                        data = columnValues.slice();\n                    }\n                    if (!chart.series[0]) {\n                        chart.addSeries({ id: table.id, data }, false);\n                    }\n                    else {\n                        chart.series[0].setData(data, false);\n                    }\n                }\n                this.redrawNavigator();\n            }\n            /**\n             * Generates the data for the crossfilter navigator.\n             */\n            generateCrossfilterData() {\n                const crossfilterOptions = this.sync.syncConfig.crossfilter;\n                const table = this.getFirstConnector()?.table;\n                const columnValues = table?.getColumn(this.getColumnAssignment()[0], true) || [];\n                if (!table || columnValues.length < 1 || !crossfilterOptions) {\n                    return [];\n                }\n                const values = [];\n                const uniqueXValues = [];\n                for (let i = 0, iEnd = columnValues.length; i < iEnd; i++) {\n                    let value = columnValues[i];\n                    if (value === null) {\n                        continue;\n                    }\n                    else if (!isNumber(value)) {\n                        value = `${value}`;\n                    }\n                    // Check if the x-axis data is not of mixed type.\n                    if (this.stringData === void 0) {\n                        this.stringData = isString(value);\n                    }\n                    else if (this.stringData !== isString(value)) {\n                        throw new Error('Mixed data types in crossfilter navigator are ' +\n                            'not supported.');\n                    }\n                    values.push(value);\n                    if (uniqueXValues.indexOf(value) === -1) {\n                        uniqueXValues.push(value);\n                    }\n                }\n                uniqueXValues.sort((a, b) => (pick(a, NaN) < pick(b, NaN) ? -1 : a === b ? 0 : 1));\n                let filteredValues;\n                const modifierOptions = table.getModifier()?.options;\n                if (crossfilterOptions.affectNavigator && modifierOptions) {\n                    const appliedRanges = [], rangedColumns = [], { ranges } = modifierOptions;\n                    for (let i = 0, iEnd = ranges.length; i < iEnd; i++) {\n                        if (ranges[i].column !== this.getColumnAssignment()[0]) {\n                            appliedRanges.push(ranges[i]);\n                            rangedColumns.push(table.getColumn(ranges[i].column, true) || []);\n                        }\n                    }\n                    filteredValues = [];\n                    const appliedRagesLength = appliedRanges.length;\n                    for (let i = 0, iEnd = values.length; i < iEnd; i++) {\n                        const value = values[i];\n                        let allConditionsMet = true;\n                        for (let j = 0; j < appliedRagesLength; j++) {\n                            const range = appliedRanges[j];\n                            if (!(rangedColumns[j][i] >=\n                                (range.minValue ?? -Infinity) &&\n                                rangedColumns[j][i] <=\n                                    (range.maxValue ?? Infinity))) {\n                                allConditionsMet = false;\n                                break;\n                            }\n                        }\n                        if (allConditionsMet) {\n                            filteredValues.push(value);\n                        }\n                    }\n                }\n                else {\n                    filteredValues = values;\n                }\n                const seriesData = [];\n                if (this.stringData) {\n                    this.categories = uniqueXValues;\n                    for (let i = 0, iEnd = uniqueXValues.length; i < iEnd; i++) {\n                        seriesData.push([i, null]);\n                    }\n                }\n                else {\n                    for (let i = 0, iEnd = uniqueXValues.length; i < iEnd; i++) {\n                        seriesData.push([uniqueXValues[i], null]);\n                    }\n                }\n                for (let i = 0, iEnd = filteredValues.length; i < iEnd; i++) {\n                    const index = uniqueXValues.indexOf(filteredValues[i]);\n                    seriesData[index][1] = (seriesData[index][1] || 0) + 1;\n                }\n                return seriesData;\n            }\n            /** @private */\n            resize(width, height) {\n                super.resize(width, height);\n                this.redrawNavigator();\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                const chart = this.chart;\n                await super.update(options, false);\n                if (options.chartOptions) {\n                    chart.update(merge(this.sync.syncConfig.crossfilter?.enabled ? ({ navigator: { xAxis: { labels: { format: '{value}' } } } }) : {}, options.chartOptions), false);\n                }\n                this.emit({ type: 'afterUpdate' });\n                if (shouldRerender) {\n                    this.render();\n                }\n            }\n            getOptionsOnDrop() {\n                return {};\n            }\n        }\n        /**\n         * Default options of the Navigator component.\n         */\n        NavigatorComponent.defaultOptions = merge(Component.defaultOptions, NavigatorComponentDefaults);\n        /**\n         * Predefined sync configuration for the Navigator component.\n         */\n        NavigatorComponent.predefinedSyncConfig = NavigatorSyncs;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/HighchartsPlugin.js', [_modules['Dashboards/Components/HighchartsComponent/HighchartsComponent.js'], _modules['Dashboards/Components/KPIComponent/KPIComponent.js'], _modules['Dashboards/Components/NavigatorComponent/NavigatorComponent.js']], function (HighchartsComponent, KPIComponent, NavigatorComponent) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects Highcharts core with the Dashboard plugin.\n         *\n         * @param {Highcharts} highcharts\n         * Highcharts core to connect.\n         */\n        function connectHighcharts(highcharts) {\n            HighchartsComponent.charter = highcharts;\n            KPIComponent.charter = highcharts;\n            NavigatorComponent.charter = highcharts;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('Highcharts', HighchartsComponent);\n            ComponentRegistry.registerComponent('KPI', KPIComponent);\n            ComponentRegistry.registerComponent('Navigator', NavigatorComponent);\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        function onUnregister(e) {\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const HighchartsCustom = {\n            connectHighcharts\n        };\n        const HighchartsPlugin = {\n            custom: HighchartsCustom,\n            name: 'Highcharts.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return HighchartsPlugin;\n    });\n    _registerModule(_modules, 'Dashboards/PluginHandler.js', [_modules['Dashboards/Board.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Components/ComponentRegistry.js']], function (Board, Sync, ComponentRegistry) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var PluginHandler;\n        (function (PluginHandler) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /** @internal */\n            PluginHandler.registry = {};\n            /**\n             * Revision of the Dashboard plugin API.\n             *\n             * @internal\n             */\n            PluginHandler.revision = 0;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a dashboard plugin.\n             *\n             * @param {Dashboards.Plugin} plugin\n             * Dashboard plugin to register.\n             *\n             * @param {string} [key]\n             * Plugin key for the registry. (Default: `plugin.name`)\n             */\n            function addPlugin(plugin, key = plugin.name) {\n                const { maxRevision, minRevision, onRegister } = plugin;\n                if (PluginHandler.registry[key]) {\n                    // Only throw error with custom key\n                    if (key !== plugin.name) {\n                        throw new Error(`Plugin '${key}' already registered.`);\n                    }\n                    return;\n                }\n                if ((typeof minRevision === 'number' && minRevision > PluginHandler.revision) ||\n                    (typeof maxRevision === 'number' && maxRevision < PluginHandler.revision)) {\n                    throw new Error(`Plugin '${key}' does not support revision ${PluginHandler.revision}.`);\n                }\n                onRegister({\n                    Board,\n                    ComponentRegistry,\n                    Sync,\n                    revision: PluginHandler.revision\n                });\n                PluginHandler.registry[key] = plugin;\n            }\n            PluginHandler.addPlugin = addPlugin;\n            /**\n             * Removes a dashboard plugin.\n             *\n             * @param {string} key\n             * Plugin key in the registry.\n             */\n            function removePlugin(key) {\n                if (PluginHandler.registry[key]) {\n                    PluginHandler.registry[key].onUnregister({\n                        ComponentRegistry: ComponentRegistry,\n                        Board,\n                        Sync,\n                        revision: PluginHandler.revision\n                    });\n                    delete PluginHandler.registry[key];\n                }\n            }\n            PluginHandler.removePlugin = removePlugin;\n        })(PluginHandler || (PluginHandler = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PluginHandler;\n    });\n    _registerModule(_modules, 'masters/dashboards.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Dashboards/Board.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Components/ComponentRegistry.js'], _modules['Data/DataPool.js'], _modules['Data/DataCursor.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Plugins/DataGridPlugin.js'], _modules['Dashboards/Plugins/HighchartsPlugin.js'], _modules['Dashboards/PluginHandler.js'], _modules['Dashboards/Components/Sync/Sync.js'], _modules['Dashboards/Utilities.js']], function (AST, DataConnector, Board, Component, ComponentRegistry, DataPool, DataCursor, DataConverter, DataModifier, DataTable, Globals, GridPlugin, HighchartsPlugin, PluginHandler, Sync, Utilities) {\n\n        // Fill registries\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.board = Board.board;\n        G.addEvent = Utilities.addEvent;\n        G.error = Utilities.error;\n        G.merge = Utilities.merge;\n        G.removeEvent = Utilities.removeEvent;\n        G.uniqueKey = Utilities.uniqueKey;\n        G.AST = AST;\n        G.Board = Board;\n        G.Component = Component;\n        G.ComponentRegistry = ComponentRegistry;\n        G.DataConnector = DataConnector;\n        G.DataConverter = DataConverter;\n        G.DataCursor = DataCursor;\n        G.DataModifier = DataModifier;\n        G.DataPool = DataPool;\n        G.DataTable = DataTable;\n        G.DataGridPlugin = GridPlugin;\n        G.GridPlugin = GridPlugin;\n        G.HighchartsPlugin = HighchartsPlugin;\n        G.PluginHandler = PluginHandler;\n        G.Sync = Sync;\n        /* *\n         *\n         *  Classic Export\n         *\n         * */\n        if (!G.win.Dashboards) {\n            G.win.Dashboards = G;\n        }\n        if (G.win.Grid) {\n            GridPlugin.custom.connectGrid(G.win.Grid);\n            G.PluginHandler.addPlugin(GridPlugin);\n        }\n        if (G.win.Highcharts) {\n            HighchartsPlugin.custom.connectHighcharts(G.win.Highcharts);\n            G.PluginHandler.addPlugin(HighchartsPlugin);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n    _modules['masters/dashboards.js']._modules = _modules;\n    return _modules['masters/dashboards.js'];\n}));"],"names":["root","factory","module","exports","document","define","amd","Dashboards","error","window","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","dispatchEvent","detail","Globals","SVG_NS","product","version","win","doc","svg","createElementNS","createSVGRect","pageLang","documentElement","closest","lang","userAgent","navigator","isChrome","chrome","isFirefox","indexOf","isMS","test","opera","isSafari","isTouchDevice","isWebKit","deg2rad","Math","PI","marginNames","noop","supportsPassiveEvents","supportsPassive","opts","Object","defineProperty","get","addEventListener","removeEventListener","charts","composed","dateFormats","seriesTypes","symbolSizes","chartCount","H","serialMode","code","stop","chart","params","severity","isCode","isNumber","message","toString","additionalMessages","objectEach","value","key","encodeURI","fireEvent","Error","console","messages","warn","push","pInt","s","mag","parseInt","isString","isArray","str","prototype","call","isObject","strict","isDOMElement","nodeType","isClass","c","constructor","name","n","isNaN","Infinity","defined","attr","elem","keyOrAttribs","ret","isGetter","attrSingle","setAttribute","getAttribute","removeAttribute","splat","extend","a","b","pick","arguments","length","i","arg","css","el","styles","style","getMagnitude","num","pow","floor","log","LN10","correctFloat","prec","parseFloat","toPrecision","easeInOutSine","pos","cos","find","Array","arr","callback","ctx","removeEvent","type","removeOneEvent","removeAllEvents","eventCollection","types","len","nodeName","_val","owner","events","hcEvents","typeEvents","filter","eventArguments","defaultFunction","createEvent","e","initEvent","target","preventDefault","defaultPrevented","object","multilevel","unshift","getPrototypeOf","sort","order","forEach","uniqueKey","hash","random","substring","id","jQuery","highcharts","slice","shift","addEvent","options","Point","series","runTrackerClick","passive","capture","eventObject","arrayMax","data","max","arrayMin","min","clamp","clearTimeout","createElement","tag","attribs","parent","nopad","padding","border","margin","appendChild","crisp","lineWidth","inverted","mod","inverter","round","destroyObjectProperties","except","destructablesOnly","val","destroy","diffObjects","newer","older","keepOlder","collectionsWithUpdate","diff","depth","keeper","newerVal","keys","discardElement","element","parentElement","removeChild","erase","item","splice","extendClass","members","getAlignFactor","align","center","right","middle","bottom","getClosestDistance","arrays","onError","loopLength","distance","allowNegative","xData","getNestedProperty","pathElements","split","pathElement","thisProp","child","replace","getStyle","prop","toInt","offsetWidth","scrollWidth","boundingClientRectWidth","getBoundingClientRect","width","offsetHeight","scrollHeight","getComputedStyle","getPropertyValue","insertItem","collection","indexOption","index","isInternal","_i","isFunction","merge","extendOrSource","sources","doCopy","copy","original","normalizeTickInterval","interval","multiples","magnitude","allowDecimals","hasTickAmount","retInterval","normalized","offset","docElem","box","parentNode","top","left","height","pageYOffset","scrollTop","clientTop","pageXOffset","scrollLeft","clientLeft","pad","number","padder","String","join","pushUnique","array","relativeLength","base","replaceNested","text","replacements","previous","replacement","stableSort","sortFunction","sortValue","safeI","syncTimeout","delay","context","setTimeout","timeUnits","millisecond","second","minute","hour","day","week","month","year","ucfirst","toUpperCase","useSerialIds","mode","wrap","method","func","proceed","outerArgs","scope","concat","U","trustedTypes","trustedTypesPolicy","createPolicy","createHTML","emptyHTML","AST","filterUserAttributes","attributes","valid","allowedAttributes","allowedReferences","some","ref","parseStyle","reduce","line","pair","map","trim","g","setElementHTML","html","innerHTML","ast","addToDOM","source","nodes","parseMarkup","recurse","subtree","subParent","node","tagName","textNode","textContent","createTextNode","bypassHTMLFiltering","allowedTags","NS","namespaceURI","children","markup","DOMParser","parseFromString","body","appendChildNodes","addTo","toLowerCase","astNode","parsedAttributes","attrib","childNodes","childNode","classNamePrefix","classNames","layout","cell","cellHover","cellActive","cellLoading","row","layoutsWrapper","boardContainer","guiElementType","boards","DG","PREFIX","resizeSnap","resizeSnapX","resizeSnapY","separator","contextMenuBtn","contextMenuBtnText","contextMenu","contextMenuItem","editModeEnabled","editToolbar","editToolbarCellOutline","editToolbarRowOutline","editToolbarItem","editToolbarRow","editToolbarCell","editSidebar","editSidebarShow","editSidebarHide","editSidebarHeader","editSidebarTitle","editSidebarMenuItem","rowContextHighlight","cellEditHighlight","dashboardCellEditHighlightActive","dragMock","dropPointer","contextDetectionPointer","resizePointer","currentEditedElement","maskElement","menuItem","menu","menuVerticalSeparator","menuHorizontalSeparator","menuDestroy","editSidebarWrapper","customSelect","customSelectButton","toggleContainer","toggleWrapper","toggleSlider","toggleWrapperColored","toggleLabels","labeledToggleWrapper","button","sidebarNavButton","labelText","editSidebarTabBtn","editToolsBtn","editTools","editGridItems","confirmationPopup","popupButtonContainer","popupContentContainer","popupCancelBtn","popupConfirmBtn","popupCloseButton","editOverlay","editOverlayActive","resizerMenuBtnActive","sidebarCloseButton","editSidebarTabBtnWrapper","editSidebarRight","editSidebarRightShow","viewFullscreen","accordionMenu","accordionContainer","accordionHeader","accordionHeaderBtn","accordionHeaderWrapper","accordionHeaderIcon","accordionContent","accordionNestedWrapper","accordionMenuButtonsContainer","accordionMenuButton","accordionStandaloneWrapper","hiddenElement","collapsableContentHeader","standaloneElement","collapsedElement","dropdown","dropdownContent","dropdownButton","dropdownButtonContent","dropdownIcon","icon","accessibility","editMode","addComponent","cancelButton","caption","chartClassName","chartConfig","chartID","chartOptions","chartType","connectorName","confirmButton","confirmDestroyCell","confirmDestroyRow","confirmDiscardChanges","dataLabels","errorMessage","exitFullscreen","htmlInput","off","on","pointFormat","settings","title","sidebar","HTML","Highcharts","DataGrid","KPI","getOffsets","guiElement","referenceElement","container","guiElementClientRect","referenceClientRect","getDimFromOffsets","offsets","getElementId","elementType","getPercentageWidth","result","fractionRegEx","match","getElementContainer","render","elementId","div","getElementById","removeBindedEventFn","HTMLElement","parentContainer","stopImmediatePropagation","getType","changeVisibility","setVisible","displayStyle","visibilityChanged","isVisible","display","hide","show","EditGlobals","GUIElement","Cell","cellElement","cellHeight","parentContainerId","layoutOptions","rowOptions","cellClassName","board","guiEnabled","className","setNestedLayout","Layout","optionsGui","gui","nestedLayout","mountedComponent","unmountCell","destroyRow","cells","getOptions","getVisibleCells","getParentCell","level","parentCell","getOverlappingLevels","levelMaxGap","levels","cellOffset","parentCellOffset","abs","setSize","flex","cellWidth","convertWidthToValue","hideContextPointer","cellToolbar","showToolbar","setHighlight","remove","cnt","isSet","classList","contains","isHighlighted","add","setActiveState","mountedComponents","component","isActive","setLoadingState","enabled","toggle","isCell","registry","addCallback","getCallback","toJSON","json","tableEvents","initConnector","connectorId","dataPool","isNewConnector","connector","getConnector","destroyed","setConnector","setTable","table","clearTableListeners","setupTableListeners","modified","emit","presentationModifier","presentationTable","modifyTable","clone","eventCallback","pop","dataTableKey","dataTables","values","addConnectorAssignment","event","tableEventTimeout","targetConnector","removeTableEvents","components","includes","enablePolling","polling","startPolling","dataRefreshRate","removeConnectorAssignment","stopPolling","clearEvent","updateOptions","newOptions","EditableOptions","bindings","defaultBindings","editableOptions","iEnd","option","propertyPath","selectOptions","getConnectorIds","keyMap","color","typeMap","skipRedraw","defaultTypeMap","SyncEmitter","register","emitter","emitterID","create","SyncHandler","handler","handlerID","Sync","predefinedSyncConfig","syncConfig","prepareSyncConfig","sync","registeredSyncHandlers","registeredSyncEmitters","isSyncing","listeners","predefinedConfig","componentSyncOptions","defaultSyncPairs","defaultPairs","defaultSyncOptions","defaultOptionsList","acc","syncName","defaultPair","defaultOptions","entry","preparedOptions","registerSyncEmitter","isRegisteredEmitter","Boolean","registerSyncHandler","isRegisteredHandler","start","syncOptions","emitterConfig","handlerConfig","defaultHandlers","ComponentUtilities","getStyles","elementStyles","sumPixels","accumulator","getMargins","includeBorders","borders","x","y","getPaddings","D","coreError","coreUniqueKey","deepClone","excludedKeys","v","copyDepth","copyDepthError","CallbackRegistry","ConnectorHandler","CU","DU","Component","createTextElement","elementName","textOptions","connectorHandlers","callbackRegistry","cellListeners","resizeTimeouts","innerResizeTimeouts","renderTo","querySelector","connectorOptions","editableOptionsBindings","dimensions","Number","contentElement","setupEventListeners","attachCellListeners","onTableChanged","getOptionsOnDrop","getFirstConnector","resizeTo","hasLeftTheRow","getCellIndex","setCell","resize","initConnectors","connectorHandler","getContentHeight","titleHeight","titleElement","clientHeight","captionElement","removeProperty","resizeDynamicContent","margins","paddings","timeout","cancelAnimationFrame","timeoutID","requestAnimationFrame","update","shouldRerender","shouldForceRerender","connectorsHaveChanged","oldConnectorId","firstConnectorDataTableKey","eventType","resizeObserverCallback","ResizeObserver","resizeObserver","observe","unbind","setTitle","titleOptions","newTitle","replaceWith","insertBefore","firstChild","setCaption","captionOptions","newCaption","load","getEditableOptions","getEditableOptionValue","end","elements","HTMLComponentDefaults","HTMLSyncs","HTMLComponent","isError","getElementsFromString","constructTree","parser","htmlString","getStringFromElements","serializeNode","sender","ColumnUtils","setLength","column","asSubarray","deleteCount","removedAsSubarray","items","from","removed","Constructor","set","subarray","autoId","columns","rowCount","versionTag","columnName","applyRowCount","deleteRows","rowIndex","getColumn","asReference","getColumns","columnNames","getRow","setColumn","eventDetail","setColumns","silent","setRow","insert","indexRowCount","cellValue","addColumns","DataTableCore","DataTable","isNull","NULL","skipColumns","tableOptions","tableClone","originalRowIndexes","localRowIndexes","deleteColumns","deletedColumns","modifiedColumns","modifier","deleteRowIndexReferences","modifyColumns","deletedRows","modifiedRows","deletedCells","j","jEnd","modifyRows","rows","getCell","getCellAsBoolean","getCellAsNumber","useNaN","getCellAsString","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","asBasicColumns","tableColumns","getLocalRowIndex","originalRowIndex","getModifier","getOriginalRowIndex","getRows","getRowCount","getRowIndexBy","rowIndexOffset","getRowObject","getRowObjects","i2","getVersionTag","hasColumns","hasRowWith","isFinite","renameColumn","newColumnName","modifyCell","typeAsOriginal","tableModifier","tableColumn","ArrayConstructor","setModifier","promise","modify","Promise","resolve","then","setOriginalRowIndexes","omitLocalRowIndexes","modifiedIndexes","originalIndex","setRows","DataConverter","regex","Date","UTC","NaN","alternative","d","getFullYear","mergedOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","converter","guessType","decimalRegex","getDate","deduceDateFormat","limit","save","stable","format","thing","guessedFormat","madeDeduction","dateFormat","export","headers","getTable","trimedValue","innerTrimedValue","floatValue","parse","dateFormatProp","getTime","getTimezoneOffset","inside","alternativeFormat","startColumn","endColumn","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","registerType","DataConverterClass","getTableFromColumns","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","getSortedColumns","usePresentationOrder","csvRows","columnsCount","rowArray","columnIndex","columnDataType","columnMeta","whatIs","dataType","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","token","actualColumn","read","pushType","initialValue","points","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","DataModifier","benchmark","dataTable","results","execute","iterations","times","startTime","endTime","performance","now","reject","DataModifierClass","DataConnector","loaded","metadata","dataTableIndex","_polling","describeColumn","describeColumns","getColumnOrder","usePresentationState","names","setColumnOrder","setModifierOptions","modifierOptions","tablesOptions","entries","mergedModifierOptions","dataModifier","ModifierClass","refreshTime","tables","pollingController","AbortController","abort","initConverters","createConverter","parseData","DataConnectorClass","CSVConnector","csvURL","fetch","signal","response","mergedTableOptions","GoogleSheetsConverter","header","parseOptions","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","URL","canParse","status","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","range","onlyColumnNames","pathname","searchParams","href","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","tableCaption","classes","attrs","topheaders","subheaders","useRowspanHeaders","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","getElementsByTagName","rowsCount","itemsLength","columnsInRow","columnsInRowLength","relativeColumnIndex","HTMLTableConnector","tableID","JSONConverter","orientation","newRow","arrayWithPath","JSONConnector","dataUrl","ChainModifier","chain","optionsChain","clear","modifiers","reverse","InvertModifier","modifiedRowIndex","modifiedColumnNames","reset","j2","columnNamesColumn","RangeModifier","indexes","additive","ranges","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","rowReference","originalIndexes","ComponentRegistry","registerComponent","ComponentClass","CellHTML","isCellHTML","cellHTML","Bindings","getGUIElement","idOrElement","querySelectorAll","optionsStates","states","optionsEvents","componentContainer","active","click","hover","getLayout","addTabIndexToCells","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","needle","columnNeedle","JSON","stringify","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","connectors","DataPoolDefaults","DataPool","waiting","waitingList","getConnectorOptions","loadConnector","connectorIds","getConnectorTable","ConnectorClass","cancelPendingRequests","connectorKey","setConnectorOptions","instances","DashboardsAccessibility","Board","async","init","componentTypes","layouts","initContainer","initEditMode","dataCursor","a11y","componentPromises","setComponents","initEvents","all","mounted","runReflow","reflow","EditMode","promises","unobserve","editModeTools","tools","hideToolbars","updatePosition","contextButtonElement","getComponentById","getComponentByCellId","rowClassName","syncPair","extremes","groupKey","group","handleChangeExtremes","dataGrid","viewport","scrollToRow","registerCursorListeners","autoScroll","grid","highlightOptions","highlight","onCellHover","sourceId","onCellMouseOut","handleCursor","syncRow","syncColumn","handleCursorOut","visibility","handleVisibilityChange","updateColumn","DataGridExtremesSync","DataGridHighlightSync","DataGridVisibilitySync","gridClassName","gridID","gridOptions","nestedOptions","onUpdate","inputElement","parentRow","dataTableRowIndex","dataset","valueToSet","DataGridSyncs","GridComponentDefaults","DataGridComponent","DataGridNamespace","GridNamespace","setOptions","dataGridOptions","renderViewport","constructGrid","initialContainerHeight","minHeight","componentOptions","connectorsIds","optionsCopy","dataGridClassName","dataGridID","DGN","dataGridInstance","Grid","GridComponent","connectGrid","GridNS","custom","connectDataGrid","DataGridNS","onRegister","onUnregister","cleanupCallbacks","extremesEventHandler","resetSelection","trigger","axis","seriesFromConnectorArray","seriesFromConnector","visiblePoints","point","isInside","minCursorData","coll","maxCursorData","columnAssignment","assignment","seriesId","dateTime","addExtremesEvent","axes","addExtremesEventCallbacks","resetExtremesEvent","zooming","unregisterCallbacks","dimension","handleUpdateExtremes","eventTarget","didZoom","setExtremes","resetZoomButton","showResetZoom","redraw","addCursorListeners","handleChartZoomOut","zoomOut","resetZoomButtons","affectedSeriesId","highlightPoint","showTooltip","showCrosshair","presTable","colAssignment","mouseOver","mouseOut","getHoveredPoint","foundSeries","seriesIds","visible","isCartesian","hoverPoint","tooltip","useSharedTooltip","shared","hoverSeries","pointer","getHoverData","hoverPoints","refresh","setState","xAxis","drawCrosshair","yAxis","unhovered","unhoverAllPoints","seriesLength","pointsLength","xAxes","yAxes","l","findSeries","seriesArray","handleShow","handleHide","HighchartsExtremesSync","HighchartsHighlightSync","HighchartsVisibilitySync","allowConnectorUpdate","chartConstructor","iconURL","showToggle","HighchartsSyncs","HighchartsComponentDefaults","HighchartsComponent","chartContainer","eventTable","eventTables","updateSeries","hcComponent","getChart","setupConnectorUpdate","heightOffset","onChartUpdate","newSeriesIds","getDefaultColumnAssignment","oldSeriesId","newSeriesId","updateSeriesFromConnector","dataStructure","seriesOptions","adjustDraggableOptions","columnFormulas","formula","dragDrop","draggableY","seriesTable","addSeries","createChart","firstColumn","charter","Factory","Chart","registerChartEvents","allEvents","optionKey","seriesOrAxisOptions","seriesOrAxis","callbackKey","animation","plotOptions","setValue","KPIExtremesSync","minFontSize","thresholdColors","linkedValueTo","seriesIndex","pointIndex","operators","isFormula","isOperator","isRange","isReference","isValue","FormulaTypes","asLogicalStringRegExp","MAX_FALSE","MAX_STRING","MAX_TRUE","operatorPriority","processorFunctions","processorFunctionNameRegExp","asLogicalNumber","asLogicalString","getArgumentValue","getRangeValues","processFunction","processFormula","beginColumn","beginRow","getReferenceValue","reference","isNegative","applyOperator","secondValue","firstValue","operator","basicOperation","expectingValue","formulaFunction","processor","getArgumentsValues","registerProcessorFunction","processorFunction","translateReferences","columnDelta","rowDelta","beginColumnRelative","beginRowRelative","endColumnRelative","endRowRelative","columnRelative","rowRelative","FormulaProcessor","SUM","AVERAGE","count","value2","MEDIAN","median","half","MAX","NEGATIVE_INFINITY","MIN","POSITIVE_INFINITY","COUNT","PRODUCT","calculated","alignThresholds","panning","styledMode","borderRadius","colorCount","allowMutatingData","ignoreHiddenSeries","spacing","theme","position","singleTouch","resetButton","zIndex","borderColor","backgroundColor","plotBorderColor","colors","hasOldSafariBug","Intl","DateTimeFormat","formatRange","isDateTimeFormatOptions","main","timezone","variableTimezone","dTLCache","timezoneOffset","useUTC","locale","isMonth","isShort","timeZone","toParts","weekday","dayOfMonth","hours","minutes","seconds","dateTimeFormat","cacheKey","str2dtf","dTL","dtf","mapping","L","fractionalSecondDigits","S","M","k","E","A","B","m","o","Y","makeTime","date","milliseconds","newOffset","hasTimezone","isYYYYMMDD","ts","gmt","colon","timeZoneName","upperCaseFirst","invalidDate","localeAwareRegex","exec","time","fullYear","langWeekdays","weekdays","shortWeekdays","months","shortMonths","substr","w","weekFrom","I","p","P","tzHours","prefix","suffix","resolveDTLFormat","f","to","getDateFormat","startOfWeek","dateTimeLabelFormats","dateStr","blank","strpos","lastN","TimeBase","getTimeTicks","normalizedInterval","tickPositions","higherRanks","unitRange","variableDayLength","weekdayNo","t","info","totalRange","ChartDefaults","Palettes","Time","symbols","chartTitle","loading","seriesName","numericSymbols","pieSliceName","resetZoom","yAxisTitle","resetZoomTitle","global","buttonTheme","fill","r","stroke","fontSize","fontWeight","select","disabled","minScale","subtitle","verticalAlign","legend","alignColumns","itemMarginBottom","itemMarginTop","labelFormatter","navigation","activeColor","inactiveColor","itemStyle","textDecoration","textOverflow","itemHoverStyle","itemHiddenStyle","shadow","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","opacity","textAlign","duration","easing","sqrt","footerFormat","headerShape","hideDelay","snap","headerFormat","borderWidth","stickOnContact","useHTML","credits","defaultTime","G","helpers","divide","eq","each","ge","gt","condition","le","lt","multiply","ne","subtract","unless","numberFormatCache","isQuotedString","subRegex","matches","floatRegex","decRegex","numberFormatter","numberFormat","bind","resolveProperty","currentMatch","hasSub","mainMatch","subMatch","isBlock","expression","charAt","startInner","startingElseSection","elseBody","parts","startChar","char","valueAndFormat","isFloat","segment","decimals","thousandsSep","lastIndex","fractionDigits","mantissa","exp","origDec","firstDecimals","toExponential","toFixed","minimumFractionDigits","maximumFractionDigits","useGrouping","hasSeparators","nf","NumberFormat","KPISyncs","KPIComponentDefaults","Templating","KPIComponent","getSubtitleClassName","linkValueToChart","updateElements","defaultChartOptions","getFormulaValue","filteredColumn","formulaFunctions","getValue","valueFormat","valueFormatter","prevValue","targetSeries","targetPoint","addPoint","getSubtitle","getValueColor","threshold","mouseWheel","outside","marker","outlineWidth","colorIndex","endOnTick","gridZIndex","labels","opposite","showFirstLabel","showLastLabel","startOnTick","tickPosition","maxPadding","scrollbar","minRange","MIN_VALUE","NavigatorSyncUtils","setRangeOptions","changed","unsetRangeOptions","Range","affectNavigator","crossfilter","afterSetExtremes","filterColumn","getColumnAssignment","getAxisExtremes","extremesListener","extremesColumn","maxIndex","minIndex","NavigatorCrossfilterSync","NavigatorExtremesSync","NavigatorComponentDefaults","NavigatorSyncs","NavigatorComponent","adjustNavigator","chartHeight","clientWidth","chartUpdates","chartWidth","navigatorHeight","plotTop","handles","columnsAssignment","columnAssignments","getExtremes","dataMin","dataMax","categories","ceil","hasNames","renderNavigator","redrawNavigator","timeouts","columnValues","generateCrossfilterData","setData","filteredValues","crossfilterOptions","uniqueXValues","stringData","appliedRanges","rangedColumns","appliedRagesLength","allConditionsMet","seriesData","connectHighcharts","PluginHandler","revision","addPlugin","plugin","maxRevision","minRevision","removePlugin","GridPlugin","HighchartsPlugin","Utilities","DataGridPlugin"],"mappings":"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AElC,CACAM,EAAMrT,IAAI,CAACuT,EACf,EAEA,MADA,EAAE,CAAC7N,OAAO,CAACjF,IAAI,CAACrE,EAAI+W,IAAI,CAACO,UAAU,CAAE,AAACC,GAAcP,EAAiBO,EAAW1B,IACzEA,CACX,CACJ,CA2QA,OAtPArB,EAAII,iBAAiB,CAAG,CACpB,MACA,gBACA,mBACA,gBACA,gBACA,cACA,aACA,kBACA,YACA,eACA,gBACA,uBACA,gBACA,QACA,YACA,QACA,UACA,KACA,KACA,IACA,WACA,KACA,KACA,OACA,cACA,cACA,gBACA,SACA,OACA,KACA,KACA,MACA,eACA,cACA,SACA,UACA,WACA,SACA,UACA,cACA,eACA,eACA,IACA,SACA,OACA,OACA,SACA,OACA,UACA,QACA,QACA,MACA,cACA,eACA,iBACA,eACA,SACA,QACA,UACA,WACA,cACA,SACA,aACA,cACA,aACA,aACA,QACA,OACA,SACA,QACA,IACA,KACA,KACA,aACA,IACA,KACA,KACA,SACH,CAgBDJ,EAAIK,iBAAiB,CAAG,CACpB,WACA,UACA,UACA,IACA,MACA,KACA,IACH,CAeDL,EAAIgC,WAAW,CAAG,CACd,QACA,IACA,OACA,IACA,KACA,SACA,UACA,SACA,WACA,OACA,KACA,OACA,MACA,KACA,KACA,KACA,sBACA,cACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,cACA,eACA,WACA,SACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,KACA,iBACA,SACA,KACA,IACA,OACA,UACA,MACA,OACA,QACA,OACA,OACA,SACA,QACA,MACA,MACA,MACA,QACA,QACA,KACA,OACA,WACA,KACA,QACA,QACA,KACA,QACA,IACA,KACH,CACDhC,EAAID,SAAS,CAAGA,EA4BhBC,EAAI+B,mBAAmB,CAAG,CAAA,EA8BnB/B,CACX,GACAvV,EAAgBD,EAAU,wBAAyB,EAAE,CAAE,eA4B/CW,EACOA,EAqEX,MAvDIA,CAdOA,EA8DRA,GAAYA,CAAAA,EAAU,CAAC,CAAA,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"}