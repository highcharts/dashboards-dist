{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards Layout 3.0.0 (2024-10-16)\n *\n * (c) 2009-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/modules/layout', ['dashboards'], function (Dashboards) {\n            factory(Dashboards);\n            factory.Dashboards = Dashboards;\n            return factory;\n        });\n    } else {\n        factory(typeof Dashboards !== 'undefined' ? Dashboards : undefined);\n    }\n}(function (Dashboards) {\n    'use strict';\n    var _modules = Dashboards ? Dashboards._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Dashboards.win.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Dashboards/EditMode/EditRenderer.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js']], function (EditGlobals, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, createElement, defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Function to create a context button.\n         * @internal\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param editMode\n         * EditMode instance.\n         *\n         * @returns\n         * Context button element.\n         */\n        function renderContextButton(parentNode, editMode) {\n            const contextMenuOptions = editMode.options.contextMenu;\n            let contextButton;\n            if (contextMenuOptions) {\n                contextButton = createElement('button', {\n                    className: EditGlobals.classNames.contextMenuBtn,\n                    onclick: function (event) {\n                        event.stopPropagation();\n                        editMode.onContextBtnClick();\n                    }\n                }, {}, parentNode);\n                // Add the icon if defined.\n                if (contextMenuOptions.icon) {\n                    createElement('img', {\n                        src: contextMenuOptions.icon,\n                        className: EditGlobals.classNames.icon\n                    }, {}, contextButton);\n                }\n                // Add text next to the icon if defined.\n                if (contextMenuOptions.text) {\n                    createElement('span', {\n                        className: EditGlobals.classNames.contextMenuBtnText,\n                        textContent: contextMenuOptions.text\n                    }, {}, contextButton);\n                }\n                contextButton.setAttribute('aria-label', editMode.lang.accessibility.contextMenu.button);\n                contextButton.setAttribute('aria-expanded', 'false');\n            }\n            return contextButton;\n        }\n        /**\n         * Creates the collapsable header element.\n         * @internal\n         *\n         * @param parentElement\n         * The HTMLElement to which the element should be rendered to.\n         *\n         * @param options\n         * Nested header options.\n         *\n         * @returns the outer element and content in the collapsable div.\n         */\n        function renderCollapseHeader(parentElement, options) {\n            const { name, showToggle, onchange, isEnabled, isNested, isStandalone, lang } = options;\n            const accordion = createElement('div', {\n                className: EditGlobals.classNames[isNested ? 'accordionNestedWrapper' : 'accordionContainer'] + ' ' + EditGlobals.classNames.collapsableContentHeader\n            }, {}, parentElement);\n            const header = createElement('div', {\n                className: EditGlobals.classNames.accordionHeader\n            }, {}, accordion);\n            let headerBtn;\n            if (!isStandalone) {\n                headerBtn = createElement('button', { className: EditGlobals.classNames.accordionHeaderBtn }, {}, header);\n            }\n            createElement('span', {\n                textContent: lang[name] || name\n            }, {}, headerBtn);\n            if (showToggle) {\n                renderToggle(header, {\n                    enabledOnOffLabels: true,\n                    id: name,\n                    name: '',\n                    onchange: onchange,\n                    value: isEnabled || false,\n                    lang\n                });\n            }\n            const headerIcon = createElement('span', {\n                className: EditGlobals.classNames.accordionHeaderIcon + ' ' +\n                    EditGlobals.classNames.collapsedElement\n            }, {}, headerBtn);\n            const content = createElement('div', {\n                className: EditGlobals.classNames.accordionContent + ' ' +\n                    (isStandalone ?\n                        EditGlobals.classNames.standaloneElement :\n                        EditGlobals.classNames.hiddenElement)\n            }, {}, accordion);\n            headerBtn?.addEventListener('click', function () {\n                content.classList.toggle(EditGlobals.classNames.hiddenElement);\n                headerIcon.classList.toggle(EditGlobals.classNames.collapsedElement);\n            });\n            return { outerElement: accordion, content: content };\n        }\n        /**\n         * Function to create select element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param options\n         * Select form field options.\n         *\n         * @returns\n         * Select element\n         */\n        function renderSelect(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const iconsURLPrefix = options.iconsURLPrefix || '';\n            const customSelect = createElement('div', {\n                className: EditGlobals.classNames.dropdown +\n                    ' ' +\n                    EditGlobals.classNames.collapsableContentHeader\n            }, {}, parentElement);\n            const btn = createElement('button', {\n                className: EditGlobals.classNames.dropdownButton\n            }, {}, customSelect);\n            const btnContent = createElement('div', {\n                className: EditGlobals.classNames.dropdownButtonContent\n            }, {}, btn);\n            const iconURL = (U.find(options.selectOptions, (item) => item.name === options.value) || {}).iconURL;\n            let headerIcon;\n            if (iconURL) {\n                headerIcon = createElement('img', {\n                    src: iconsURLPrefix + iconURL,\n                    className: EditGlobals.classNames.icon\n                }, {}, btnContent);\n            }\n            const placeholder = createElement('span', {\n                textContent: options.value,\n                id: options.id || ''\n            }, {}, btnContent);\n            const dropdownPointer = createElement('img', {\n                className: EditGlobals.classNames.dropdownIcon +\n                    ' ' +\n                    EditGlobals.classNames.collapsedElement,\n                src: iconsURLPrefix + 'dropdown-pointer.svg'\n            }, {}, btn);\n            const dropdown = createElement('ul', {\n                className: EditGlobals.classNames.dropdownContent +\n                    ' ' +\n                    EditGlobals.classNames.hiddenElement\n            }, {}, customSelect);\n            btn.addEventListener('click', function () {\n                dropdown.classList.toggle(EditGlobals.classNames.hiddenElement);\n                dropdownPointer.classList.toggle(EditGlobals.classNames.collapsedElement);\n            });\n            for (let i = 0, iEnd = options.selectOptions.length; i < iEnd; ++i) {\n                renderSelectElement(merge(options.selectOptions[i] || {}, { iconsURLPrefix }), dropdown, placeholder, options.id, dropdownPointer, headerIcon, options.onchange);\n            }\n            return customSelect;\n        }\n        /**\n         * @internal\n         */\n        function renderSelectElement(option, dropdown, placeholder, id, dropdownPointer, headerIcon, callback) {\n            const iconURL = option.iconsURLPrefix + option.iconURL;\n            const selectOption = createElement('li', {}, {}, dropdown);\n            const selectOptionBtn = createElement('button', { className: EditGlobals.classNames.customSelectButton }, {}, selectOption);\n            if (option.iconURL) {\n                createElement('img', {\n                    src: iconURL\n                }, {}, selectOptionBtn);\n            }\n            createElement('span', { textContent: option.name || '' }, {}, selectOptionBtn);\n            selectOptionBtn.addEventListener('click', function () {\n                dropdown.classList.add(EditGlobals.classNames.hiddenElement);\n                dropdownPointer.classList.toggle(EditGlobals.classNames.collapsedElement);\n                placeholder.textContent = option.name || '';\n                if (headerIcon && option.iconURL) {\n                    headerIcon.src = iconURL;\n                }\n                if (callback) {\n                    return callback(option.name);\n                }\n            });\n        }\n        /**\n         * Function to create toggle element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param options\n         * Form field options.\n         *\n         * @returns\n         * Toggle element.\n         */\n        function renderToggle(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            const lang = options.lang, value = options.value, title = options.title || options.name, langKey = options.langKey;\n            const toggleContainer = createElement('button', {\n                className: EditGlobals.classNames.toggleContainer,\n                type: 'button',\n                role: 'switch',\n                ariaChecked: false,\n                ariaLabel: langKey ? lang.accessibility[langKey][options.name] : ''\n            }, {}, parentElement);\n            if (title) {\n                renderText(toggleContainer, { title });\n            }\n            if (options.enabledOnOffLabels) {\n                renderText(toggleContainer, {\n                    title: lang.off,\n                    className: EditGlobals.classNames.toggleLabels\n                });\n            }\n            const toggle = createElement('label', {\n                className: EditGlobals.classNames.toggleWrapper +\n                    ' ' + (options.className || '')\n            }, {}, toggleContainer);\n            const input = renderCheckbox(toggle, value), callbackFn = options.onchange;\n            callbackFn && toggleContainer.addEventListener('click', (e) => {\n                callbackFn(!input.checked);\n                input.checked = !input.checked;\n                toggleContainer.setAttribute('aria-checked', input.checked);\n                e.stopPropagation();\n            });\n            const slider = createElement('span', {\n                className: EditGlobals.classNames.toggleSlider\n            }, {}, toggle);\n            callbackFn && slider.addEventListener('click', (e) => {\n                e.preventDefault();\n            });\n            if (options.enabledOnOffLabels) {\n                renderText(toggleContainer, {\n                    title: lang.on,\n                    className: EditGlobals.classNames.toggleLabels\n                });\n            }\n            return toggleContainer;\n        }\n        /**\n         * Function to create text element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended\n         *\n         * @param text\n         * Text to be displayed\n         *\n         * @param callback\n         * Callback function to be fired on the click\n         *\n         * @returns text Element\n         */\n        function renderText(parentElement, options) {\n            let textElem;\n            const { title: text, className, isLabel } = options;\n            if (parentElement) {\n                const labelFor = isLabel ? { htmlFor: text } : {};\n                textElem = createElement(isLabel ? 'label' : 'div', {\n                    className: EditGlobals.classNames.labelText + ' ' + (className || ''),\n                    textContent: text,\n                    ...labelFor\n                }, {}, parentElement);\n            }\n            return textElem;\n        }\n        /**\n         * Function to create Icon element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param icon\n         * Icon URL\n         *\n         * @param callback\n         * Callback function\n         *\n         * @returns\n         * Icon Element\n         */\n        function renderIcon(parentElement, options) {\n            const { icon, callback } = options;\n            if (!parentElement) {\n                return;\n            }\n            const iconElem = createElement('div', {\n                onclick: callback,\n                className: options.className || ''\n            }, {}, parentElement);\n            iconElem.style['background-image'] = 'url(' + icon + ')';\n            const mousedown = options.mousedown;\n            const click = options.click;\n            if (mousedown) {\n                iconElem.onmousedown = function () {\n                    mousedown.apply(this, arguments);\n                };\n            }\n            if (click) {\n                iconElem.addEventListener('click', function () {\n                    click.apply(this, arguments);\n                });\n            }\n            return iconElem;\n        }\n        /**\n         * Function to create input element.\n         *\n         * @param parentElement\n         * the element to which the new element should be appended\n         *\n         * @param options\n         * Form field options\n         *\n         * @returns\n         * Input Element\n         */\n        function renderInput(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const input = createElement('input', {\n                type: 'text',\n                onclick: options.callback,\n                id: options.id || '',\n                name: options.name || '',\n                value: ((defined(options.value) &&\n                    options.value.toString().replace(/\\\"/g, '')) || '')\n            }, {}, parentElement);\n            const onchange = options.onchange;\n            if (onchange) {\n                input.addEventListener('change', function (e) {\n                    onchange(e.target.value);\n                });\n            }\n            return input;\n        }\n        /**\n         * Function to create textarea element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended\n         *\n         * @param options\n         * Form field options\n         *\n         * @returns\n         * textarea Element\n         */\n        function renderTextarea(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const textarea = createElement('textarea', {\n                id: options.id,\n                name: options.name,\n                value: options.value || ''\n            }, {}, parentElement);\n            const onchange = options.onchange;\n            if (onchange) {\n                textarea.addEventListener('change', function (e) {\n                    onchange(e.target.value);\n                });\n            }\n            return textarea;\n        }\n        /**\n         * Function to render the input of type checkbox.\n         *\n         * @param parentElement\n         * An element to which render the checkbox to\n         *\n         * @param checked\n         * Whether the checkbox should be checked or not.\n         *\n         * @returns\n         * The checkbox element\n         */\n        function renderCheckbox(parentElement, checked) {\n            let input;\n            if (parentElement) {\n                input = createElement('input', {\n                    type: 'checkbox',\n                    checked: !!checked\n                }, {}, parentElement);\n            }\n            return input;\n        }\n        /**\n         * Function to create button element.\n         *\n         * @param parentElement\n         * the element to which the new element should be appended\n         *\n         * @param options\n         * Button field options\n         *\n         * @returns\n         * Button Element\n         */\n        function renderButton(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            const button = createElement('button', {\n                className: (EditGlobals.classNames.button + ' ' +\n                    (options.className || '')),\n                onclick: options.callback,\n                textContent: options.text\n            }, options.style || {}, parentElement);\n            if (options.icon) {\n                button.style['background-image'] =\n                    'url(' + options.icon + ')';\n            }\n            return button;\n        }\n        /**\n         * Get the renderer function based on the type of the element to render.\n         *\n         * @param type\n         * Type of the element to render\n         *\n         * @returns\n         * function to render a specific element\n         */\n        function getRendererFunction(type) {\n            return {\n                select: renderSelect,\n                toggle: renderToggle,\n                text: renderText,\n                collapse: renderCollapseHeader,\n                icon: renderIcon,\n                contextButton: renderContextButton,\n                input: renderInput,\n                textarea: renderTextarea,\n                checkbox: renderCheckbox,\n                button: renderButton\n            }[type];\n        }\n        const EditRenderer = {\n            renderSelect,\n            renderToggle,\n            renderText,\n            renderCollapseHeader,\n            renderIcon,\n            renderContextButton,\n            renderInput,\n            renderTextarea,\n            renderCheckbox,\n            renderButton,\n            getRendererFunction\n        };\n\n        return EditRenderer;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/MenuItem.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditRenderer.js']], function (EditGlobals, U, EditRenderer) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, merge } = U;\n        class MenuItem {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(menu, options) {\n                this.menu = menu;\n                this.isActive = false;\n                this.options = merge(MenuItem.defaultOptions, options);\n                this.container = this.setContainer();\n                this.innerElement = this.setInnerElement();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            setContainer() {\n                const item = this, options = item.options;\n                let className = EditGlobals.classNames.menuItem;\n                if (item.menu.options.itemsClassName) {\n                    className += ' ' + item.menu.options.itemsClassName;\n                }\n                if (options.className) {\n                    className += ' ' + options.className;\n                }\n                return createElement('div', { className: className || '' }, merge(this.options.style || {}, \n                // To remove\n                this.isActive ? { display: 'block' } : {}), this.menu.container);\n            }\n            setInnerElement() {\n                const item = this, options = item.options, container = item.container, langKey = options.langKey;\n                if (options.type === 'toggle') {\n                    return EditRenderer.renderToggle(container, {\n                        id: options.id,\n                        name: options.id,\n                        title: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            options.text,\n                        value: !!(options.getValue && options.getValue(item)),\n                        lang: this.menu.editMode.lang,\n                        langKey: langKey,\n                        onchange: options.events?.click?.bind(item)\n                    });\n                }\n                if (options.type === 'text') {\n                    return EditRenderer.renderText(container, {\n                        title: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            options.text || '',\n                        className: options.className || ''\n                    });\n                }\n                if (options.type === 'icon') {\n                    return EditRenderer.renderIcon(container, {\n                        icon: options.icon || '',\n                        mousedown: options.events?.onmousedown?.bind(item),\n                        click: options.events?.click?.bind(item)\n                    });\n                }\n                if (options.type === 'button') {\n                    return EditRenderer.renderButton(container, {\n                        callback: options.events?.click?.bind(item),\n                        className: options.className || '',\n                        style: options.style || {},\n                        text: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            (options.text || '')\n                    });\n                }\n            }\n            update() {\n                const item = this, options = item.options;\n                if (options.events && options.events.update) {\n                    options.events.update.apply(item, arguments);\n                }\n            }\n            activate() {\n                const item = this;\n                item.update();\n                // Temp.\n                if (item.container) {\n                    item.isActive = true;\n                    item.container.style.display = 'block';\n                }\n            }\n            deactivate() {\n                const item = this;\n                // Temp.\n                if (item.container) {\n                    item.isActive = false;\n                    item.container.style.display = 'none';\n                }\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        MenuItem.defaultOptions = {\n            type: 'text'\n        };\n\n        return MenuItem;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/MenuItemBindings.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const MenuItemBindings = {\n            /* *\n            *\n            *  Context menu\n            *\n            * */\n            viewFullscreen: {\n                id: 'viewFullscreen',\n                type: 'button',\n                langKey: 'viewFullscreen',\n                events: {\n                    click: function () {\n                        const fullScreen = this.menu.editMode.board.fullscreen;\n                        if (fullScreen) {\n                            fullScreen.toggle();\n                        }\n                    }\n                }\n            }\n        };\n\n        return MenuItemBindings;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/Menu.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/MenuItem.js'], _modules['Dashboards/EditMode/Menu/MenuItemBindings.js']], function (EditGlobals, U, MenuItem, MenuItemBindings) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, merge } = U;\n        class Menu {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(parentElement, options, editMode, parent) {\n                this.parentElement = parentElement;\n                this.isVisible = false;\n                this.activeItems = [];\n                this.options = options;\n                this.items = {};\n                this.editMode = editMode;\n                if (parent) {\n                    this.parent = parent;\n                }\n                this.container = this.setContainer();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            setContainer() {\n                return createElement('div', {\n                    className: EditGlobals.classNames.menu +\n                        ' ' + (this.options.className || '')\n                }, {}, this.parentElement);\n            }\n            // ItemsSchemas - default items definitions.\n            initItems(itemsSchemas, activeItems) {\n                const menu = this, optionsItems = menu.options.items || [];\n                let itemSchema, itemConfig, item, options;\n                for (let i = 0, iEnd = optionsItems.length; i < iEnd; ++i) {\n                    itemConfig = optionsItems[i];\n                    itemSchema =\n                        typeof itemConfig === 'string' ? itemsSchemas[itemConfig] :\n                            itemConfig.id ? itemsSchemas[itemConfig.id] :\n                                {};\n                    options = typeof itemConfig === 'string' ?\n                        merge(itemSchema, { id: itemConfig }) :\n                        merge(itemSchema, itemConfig);\n                    if (options.id) {\n                        item = new MenuItem(menu, options);\n                        // Save initialized item.\n                        menu.items[item.options.id] = item;\n                        if (activeItems) {\n                            item.activate();\n                            menu.activeItems.push(item);\n                        }\n                    }\n                    else {\n                        // Error - defined item needs an id.\n                    }\n                }\n            }\n            setActiveItems(items) {\n                const menu = this;\n                let item;\n                // Deactivate items.\n                for (let i = 0, iEnd = menu.activeItems.length; i < iEnd; ++i) {\n                    if (items.indexOf(menu.activeItems[i].options.id) === -1) {\n                        menu.activeItems[i].deactivate();\n                    }\n                }\n                menu.activeItems.length = 0;\n                for (let j = 0, jEnd = items.length; j < jEnd; ++j) {\n                    item = menu.items[items[j]];\n                    if (item) {\n                        // Activate item.\n                        if (!item.isActive) {\n                            item.activate();\n                        }\n                        else {\n                            item.update();\n                        }\n                        menu.activeItems.push(item);\n                    }\n                }\n            }\n            deactivateActiveItems() {\n                const menu = this;\n                for (let i = 0, iEnd = menu.activeItems.length; i < iEnd; ++i) {\n                    menu.activeItems[i].deactivate();\n                }\n            }\n            updateActiveItems() {\n                const activeItems = this.activeItems;\n                for (let i = 0, iEnd = activeItems.length; i < iEnd; ++i) {\n                    activeItems[i].update();\n                }\n            }\n            destroy() {\n                this.activeItems.length = 0;\n                this.container.remove();\n                this.items = {};\n                this.options = {};\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        Menu.items = MenuItemBindings;\n\n        return Menu;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/EditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/Menu.js']], function (U, Menu) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { defined, createElement, css } = U;\n        /**\n         * Abstract Class of Edit Toolbar.\n         * @internal\n         */\n        class EditToolbar {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode, options) {\n                this.container = createElement('div', {\n                    className: options.className\n                }, void 0, editMode.board.container);\n                this.editMode = editMode;\n                this.iconURLPrefix = editMode.iconsURLPrefix;\n                this.menu = new Menu(this.container, options.menu, editMode, this);\n                this.options = options;\n                this.isVisible = false;\n                if (this.options.outline) {\n                    this.outline = createElement('div', {\n                        className: options.outlineClassName\n                    }, void 0, this.container);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            hide() {\n                this.setPosition(void 0, void 0);\n            }\n            refreshOutline(x, y, guiElement, offset = 0) {\n                const toolbar = this, guiElemCnt = (guiElement || {}).container;\n                if (toolbar.outline && guiElemCnt) {\n                    css(toolbar.outline, {\n                        display: 'block',\n                        left: x - offset + 'px',\n                        top: y - offset + 'px',\n                        width: guiElemCnt.offsetWidth + offset * 2 + 'px',\n                        height: guiElemCnt.offsetHeight + offset * 2 + 'px'\n                    });\n                }\n            }\n            hideOutline() {\n                if (this.outline) {\n                    this.outline.style.display = 'none';\n                }\n            }\n            setPosition(x, y) {\n                const toolbar = this;\n                if (toolbar.container) {\n                    css(toolbar.container, {\n                        left: (x || '-9999') + 'px',\n                        top: (y || '-9999') + 'px'\n                    });\n                }\n                toolbar.isVisible = defined(x) && defined(y);\n            }\n        }\n\n        return EditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/CellEditToolbar.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/Toolbar/EditToolbar.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (Cell, EditGlobals, EditToolbar, GUIElement, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, fireEvent, objectEach } = U;\n        /**\n         * @internal\n         */\n        class CellEditToolbar extends EditToolbar {\n            static getItemsConfig(options, iconURLPrefix) {\n                const items = [];\n                if (options.dragDrop?.enabled) {\n                    items.push({\n                        id: 'drag',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'drag.svg',\n                        events: {\n                            onmousedown: function (e) {\n                                const cellEditToolbar = this.menu\n                                    .parent;\n                                const dragDrop = cellEditToolbar.editMode.dragDrop;\n                                if (dragDrop &&\n                                    cellEditToolbar.cell &&\n                                    cellEditToolbar.cell instanceof Cell) {\n                                    dragDrop.onDragStart(e, cellEditToolbar.cell);\n                                }\n                            }\n                        }\n                    });\n                }\n                if (options.settings?.enabled) {\n                    items.push({\n                        id: 'settings',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'settings.svg',\n                        events: {\n                            click: function () {\n                                this.menu.parent.editMode.setEditOverlay();\n                                this.menu.parent.onCellOptions();\n                            }\n                        }\n                    });\n                }\n                items.push({\n                    id: 'destroy',\n                    type: 'icon',\n                    className: EditGlobals.classNames.menuDestroy,\n                    icon: iconURLPrefix + 'destroy.svg',\n                    events: {\n                        click: function () {\n                            const parentNode = this.menu.parent, editMode = this.menu.parent.editMode, popup = editMode.confirmationPopup;\n                            popup.show({\n                                confirmButton: {\n                                    value: editMode.lang.confirmButton,\n                                    callback: parentNode.onCellDestroy,\n                                    context: parentNode\n                                },\n                                cancelButton: {\n                                    value: editMode.lang.cancelButton,\n                                    callback: () => {\n                                        popup.closePopup();\n                                    }\n                                },\n                                text: editMode.lang.confirmDestroyCell\n                            });\n                        }\n                    }\n                });\n                return items;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode) {\n                super(editMode, merge(CellEditToolbar.defaultOptions, (editMode.options.toolbars || {}).cell, {\n                    menu: {\n                        items: CellEditToolbar.getItemsConfig(editMode.options, editMode.iconsURLPrefix)\n                    }\n                }));\n                if (editMode.customHTMLMode) {\n                    this.filterOptionsAvailableInCustomHTMLMode();\n                }\n                this.menu.initItems({});\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Show toolbar for given cell.\n             *\n             * @param cell\n             * Cell to show toolbar for.\n             */\n            showToolbar(cell) {\n                const toolbar = this;\n                const cellCnt = cell.container;\n                const toolbarWidth = 30;\n                const toolbarMargin = 10;\n                const cellToolbar = toolbar.editMode.cellToolbar;\n                if (!cellToolbar) {\n                    return;\n                }\n                if (cellCnt && toolbar.editMode.isActive() &&\n                    !(toolbar.editMode.dragDrop || {}).isActive) {\n                    const cellOffsets = GUIElement.getOffsets(cell, toolbar.editMode.board.container);\n                    const x = cellOffsets.right - toolbarWidth - toolbarMargin;\n                    const y = cellOffsets.top + toolbarMargin;\n                    objectEach(toolbar.menu.items, (item) => {\n                        if (!cell.options?.editMode?.toolbarItems) {\n                            item.activate();\n                            return;\n                        }\n                        const toolbarItems = cell.options.editMode.toolbarItems;\n                        if (toolbarItems[item.options.id]\n                            ?.enabled === false) {\n                            item.deactivate();\n                            return;\n                        }\n                        item.activate();\n                    });\n                    toolbar.setPosition(x, y);\n                    toolbar.cell = cell;\n                    toolbar.refreshOutline();\n                    cellToolbar.isVisible = true;\n                }\n                else if (toolbar.isVisible) {\n                    toolbar.hide();\n                    cellToolbar.isVisible = false;\n                }\n            }\n            refreshOutline() {\n                const toolbar = this, offsetWidth = -1;\n                if (toolbar.cell && toolbar.cell.container && toolbar.outline) {\n                    super.refreshOutline(-toolbar.cell.container.offsetWidth, 0, this.cell, offsetWidth);\n                }\n            }\n            /**\n             * When options icon is clicked, show sidebar with options.\n             */\n            onCellOptions() {\n                const toolbar = this;\n                const editMode = toolbar.editMode;\n                if (!editMode.sidebar) {\n                    return;\n                }\n                editMode.sidebar.show(toolbar.cell);\n                toolbar.highlightCell();\n            }\n            onCellDestroy() {\n                const toolbar = this;\n                if (toolbar.cell && toolbar.cell instanceof Cell) {\n                    const row = toolbar.cell.row;\n                    const cellId = toolbar.cell.id;\n                    toolbar.resetEditedCell();\n                    toolbar.cell.destroy();\n                    toolbar.cell = void 0;\n                    // Hide row and cell toolbars.\n                    toolbar.editMode.hideToolbars(['cell', 'row']);\n                    // Call cellResize dashboard event.\n                    if (row && row.cells && row.cells.length) {\n                        fireEvent(toolbar.editMode.board, 'cellResize', {\n                            cell: row.cells[0]\n                        });\n                        fireEvent(row, 'cellChange', { cell: row.cells[0], row });\n                        fireEvent(toolbar.editMode, 'layoutChanged', {\n                            type: 'cellDestroyed',\n                            target: cellId,\n                            board: toolbar.editMode.board\n                        });\n                    }\n                }\n            }\n            resetEditedCell() {\n                this.editedCell = void 0;\n            }\n            /**\n             * Filter options available in custom HTML mode, only settings available.\n             */\n            filterOptionsAvailableInCustomHTMLMode() {\n                this.options.menu.items = this.options.menu.items?.filter((item) => {\n                    if (typeof item === 'string') {\n                        return false;\n                    }\n                    return item.id === 'settings';\n                });\n            }\n            /**\n             * Highlight cell and gray out the rest of the dashboard.\n             */\n            highlightCell() {\n                const toolbar = this;\n                if (!toolbar.cell) {\n                    return;\n                }\n                if (toolbar.cell.setHighlight) {\n                    toolbar.cell.setHighlight();\n                }\n                else {\n                    toolbar.cell.container.classList.add(EditGlobals.classNames.cellEditHighlight);\n                    toolbar.editMode.board.container.classList.add(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CellEditToolbar.defaultOptions = {\n            enabled: true,\n            className: EditGlobals.classNames.editToolbar,\n            outline: false,\n            outlineClassName: EditGlobals.classNames.editToolbarCellOutline,\n            menu: {\n                className: EditGlobals.classNames.editToolbarCell,\n                itemsClassName: EditGlobals.classNames.editToolbarItem,\n                items: []\n            }\n        };\n\n        return CellEditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/RowEditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/Toolbar/EditToolbar.js'], _modules['Dashboards/Layout/GUIElement.js']], function (U, EditGlobals, EditToolbar, GUIElement) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { fireEvent, merge, objectEach } = U;\n        /**\n         * @internal\n         */\n        class RowEditToolbar extends EditToolbar {\n            static getMenuItemsConfig(options, iconURLPrefix) {\n                const items = [];\n                if (options.dragDrop?.enabled) {\n                    items.push({\n                        id: 'drag',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'drag.svg',\n                        events: {\n                            onmousedown: function (e) {\n                                const rowEditToolbar = this.menu\n                                    .parent, dragDrop = rowEditToolbar.editMode.dragDrop;\n                                e.preventDefault();\n                                if (dragDrop && rowEditToolbar.row) {\n                                    dragDrop.onDragStart(e, rowEditToolbar.row);\n                                }\n                            }\n                        }\n                    });\n                }\n                items.push({\n                    id: 'destroy',\n                    type: 'icon',\n                    className: EditGlobals.classNames.menuDestroy,\n                    icon: iconURLPrefix + 'destroy.svg',\n                    events: {\n                        click: function () {\n                            const parentNode = this.menu.parent, editMode = this.menu.parent.editMode, popup = editMode.confirmationPopup;\n                            popup.show({\n                                confirmButton: {\n                                    value: editMode.lang.confirmButton,\n                                    callback: parentNode.onRowDestroy,\n                                    context: parentNode\n                                },\n                                cancelButton: {\n                                    value: editMode.lang.cancelButton,\n                                    callback: () => {\n                                        popup.closePopup();\n                                    }\n                                },\n                                text: editMode.lang.confirmDestroyRow\n                            });\n                        }\n                    }\n                });\n                return items;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode) {\n                super(editMode, merge(RowEditToolbar.defaultOptions, (editMode.options.toolbars || {}).row, {\n                    menu: {\n                        items: RowEditToolbar.getMenuItemsConfig(editMode.options, editMode.iconsURLPrefix)\n                    }\n                }));\n                this.menu.initItems({});\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            refreshOutline(x, y) {\n                const toolbar = this, offsetWidth = 2;\n                if (toolbar.row && toolbar.row.container) {\n                    super.refreshOutline(x, y, this.row, offsetWidth);\n                }\n            }\n            showToolbar(row) {\n                const toolbar = this;\n                const rowCnt = row.container;\n                const rowToolbar = toolbar.editMode.rowToolbar;\n                let x;\n                let y;\n                let offsetX;\n                if (!rowToolbar) {\n                    return;\n                }\n                if (rowCnt &&\n                    toolbar.editMode.isActive() &&\n                    !(toolbar.editMode.dragDrop || {}).isActive) {\n                    const rowOffsets = GUIElement.getOffsets(row, toolbar.editMode.board.container);\n                    const rowWidth = rowOffsets.right - rowOffsets.left;\n                    objectEach(toolbar.menu.items, (item) => {\n                        if (!row.options?.editMode?.toolbarItems) {\n                            item.activate();\n                            return;\n                        }\n                        const toolbarItems = row.options.editMode.toolbarItems;\n                        if (toolbarItems[item.options.id]\n                            ?.enabled === false) {\n                            item.deactivate();\n                            return;\n                        }\n                        item.activate();\n                    });\n                    offsetX = rowWidth / 2 - toolbar.container.clientWidth / 2;\n                    x = rowOffsets.left + offsetX;\n                    y = rowOffsets.top - toolbar.container.clientHeight;\n                    toolbar.setPosition(x, y);\n                    toolbar.row = row;\n                    toolbar.refreshOutline(-offsetX, toolbar.container.clientHeight);\n                    rowToolbar.isVisible = true;\n                }\n                else if (toolbar.isVisible) {\n                    toolbar.hide();\n                    rowToolbar.isVisible = false;\n                }\n            }\n            onRowOptions() {\n                const toolbar = this;\n                if (toolbar.editMode.sidebar) {\n                    toolbar.editMode.sidebar.show(toolbar.row);\n                }\n            }\n            onRowDestroy() {\n                const toolbar = this;\n                if (toolbar.row) {\n                    const rowId = toolbar.row.options.id || -1;\n                    this.resetEditedRow();\n                    toolbar.row.destroy();\n                    toolbar.row = void 0;\n                    // Hide row and cell toolbars.\n                    toolbar.editMode.hideToolbars(['cell', 'row']);\n                    fireEvent(toolbar.editMode, 'layoutChanged', {\n                        type: 'rowDestroyed',\n                        target: rowId,\n                        board: toolbar.editMode.board\n                    });\n                }\n            }\n            resetEditedRow() {\n                /// super.resetCurrentElements(this.row as Row, true);\n                this.editedRow = void 0;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        RowEditToolbar.defaultOptions = {\n            enabled: true,\n            className: EditGlobals.classNames.editToolbar,\n            outline: true,\n            outlineClassName: EditGlobals.classNames.editToolbarRowOutline,\n            menu: {\n                className: EditGlobals.classNames.editToolbarRow,\n                itemsClassName: EditGlobals.classNames.editToolbarItem,\n                items: []\n            }\n        };\n\n        return RowEditToolbar;\n    });\n    _registerModule(_modules, 'Shared/BaseForm.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (AST, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { addEvent, createElement } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentDiv, iconsURL) {\n                this.iconsURL = iconsURL;\n                this.container = this.createPopupContainer(parentDiv);\n                this.closeButton = this.addCloseButton();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create popup div container.\n             *\n             * @param {HTMLElement} parentDiv\n             * Parent div to attach popup.\n             *\n             * @param  {string} className\n             * Class name of the popup.\n             *\n             * @return {HTMLElement}\n             * Popup div.\n             */\n            createPopupContainer(parentDiv, className = 'highcharts-popup highcharts-no-tooltip') {\n                return createElement('div', { className }, void 0, parentDiv);\n            }\n            /**\n             * Create HTML element and attach click event to close popup.\n             *\n             * @param {string} className\n             * Class name of the close button.\n             *\n             * @return {HTMLElement}\n             * Close button.\n             */\n            addCloseButton(className = 'highcharts-popup-close') {\n                const popup = this, iconsURL = this.iconsURL;\n                // Create close popup button.\n                const closeButton = createElement('button', { className }, void 0, this.container);\n                closeButton.style['background-image'] = 'url(' +\n                    (iconsURL.match(/png|svg|jpeg|jpg|gif/ig) ?\n                        iconsURL : iconsURL + 'close.svg') + ')';\n                ['click', 'touchstart'].forEach((eventName) => {\n                    addEvent(closeButton, eventName, popup.closeButtonEvents.bind(popup));\n                });\n                // Close popup when press ESC\n                addEvent(document, 'keydown', function (event) {\n                    if (event.code === 'Escape') {\n                        popup.closeButtonEvents();\n                    }\n                });\n                return closeButton;\n            }\n            /**\n             * Close button events.\n             * @return {void}\n             */\n            closeButtonEvents() {\n                this.closePopup();\n            }\n            /**\n             * Reset content of the current popup and show.\n             *\n             * @param {string} toolbarClass\n             * Class name of the toolbar which styles should be reset.\n             */\n            showPopup(toolbarClass = 'highcharts-annotation-toolbar') {\n                const popupDiv = this.container, popupCloseButton = this.closeButton;\n                this.type = void 0;\n                // Reset content.\n                popupDiv.innerHTML = AST.emptyHTML;\n                // Reset toolbar styles if exists.\n                if (popupDiv.className.indexOf(toolbarClass) >= 0) {\n                    popupDiv.classList.remove(toolbarClass);\n                    // Reset toolbar inline styles\n                    popupDiv.removeAttribute('style');\n                }\n                // Add close button.\n                popupDiv.appendChild(popupCloseButton);\n                popupDiv.style.display = 'block';\n                popupDiv.style.height = '';\n            }\n            /**\n             * Hide popup.\n             */\n            closePopup() {\n                this.container.style.display = 'none';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BaseForm;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/ConfirmationPopup.js', [_modules['Core/Utilities.js'], _modules['Shared/BaseForm.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js']], function (U, BaseForm, EditGlobals, EditRenderer) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement } = U;\n        /**\n         * Class to create confirmation popup.\n         */\n        class ConfirmationPopup extends BaseForm {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the ConfirmationPopup.\n             *\n             * @param parentDiv\n             * Parent div where the popup will be added.\n             *\n             * @param iconsURL\n             * URL to the icons.\n             *\n             * @param editMode\n             * The EditMode instance.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            constructor(parentDiv, iconsURL, editMode, options) {\n                iconsURL =\n                    options && options.close && options.close.icon ?\n                        options.close.icon :\n                        iconsURL;\n                super(parentDiv, iconsURL);\n                this.editMode = editMode;\n                this.options = options;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Returns popup container.\n             *\n             * @param parentDiv\n             * Parent div where the popup will be added.\n             *\n             * @param className\n             * Class name added to the popup container.\n             */\n            createPopupContainer(parentDiv, className = EditGlobals.classNames.confirmationPopup) {\n                return super.createPopupContainer(parentDiv, className);\n            }\n            /**\n             * Adds close button to the popup.\n             *\n             * @param className\n             * Class name added to the close button.\n             */\n            addCloseButton(className = EditGlobals.classNames.popupCloseButton) {\n                return super.addCloseButton(className);\n            }\n            /**\n             * Adds events to the close button.\n             *\n             * @override BaseForm.closeButtonEvents\n             */\n            closeButtonEvents() {\n                const cancelCallback = this.contentOptions?.cancelButton.callback;\n                if (!cancelCallback) {\n                    return;\n                }\n                cancelCallback();\n            }\n            /**\n             * Adds content inside the popup.\n             */\n            renderContent() {\n                const options = this.contentOptions;\n                if (!options) {\n                    return;\n                }\n                // Render content wrapper\n                this.contentContainer = createElement('div', {\n                    className: EditGlobals.classNames.popupContentContainer\n                }, {}, this.container);\n                const popupContainer = this.contentContainer.parentNode;\n                popupContainer.style.marginTop = '0px';\n                const offsetTop = popupContainer.getBoundingClientRect().top;\n                popupContainer.style.marginTop = (offsetTop < 0 ? Math.abs(offsetTop - 200) : 200) + 'px';\n                // Render text\n                EditRenderer.renderText(this.contentContainer, {\n                    title: options.text || ''\n                });\n                // Render button wrapper\n                this.buttonContainer = createElement('div', {\n                    className: EditGlobals.classNames.popupButtonContainer\n                }, {}, this.container);\n                // Render cancel buttons\n                EditRenderer.renderButton(this.buttonContainer, {\n                    text: options.cancelButton.value,\n                    className: EditGlobals.classNames.popupCancelBtn,\n                    callback: options.cancelButton.callback\n                });\n                // Confirm\n                EditRenderer.renderButton(this.buttonContainer, {\n                    text: options.confirmButton.value,\n                    className: EditGlobals.classNames.popupConfirmBtn,\n                    callback: () => {\n                        options.confirmButton.callback.call(options.confirmButton.context);\n                        this.closePopup();\n                    }\n                });\n            }\n            /**\n             * Shows confirmation popup.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            show(options) {\n                this.contentOptions = options;\n                this.showPopup();\n                this.renderContent();\n                this.editMode.setEditOverlay();\n            }\n            /**\n             * Hides confirmation popup.\n             */\n            closePopup() {\n                super.closePopup();\n                this.editMode.setEditOverlay(true);\n            }\n        }\n\n        return ConfirmationPopup;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/AccordionMenu.js', [_modules['Dashboards/EditMode/EditRenderer.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/ConfirmationPopup.js']], function (EditRenderer, U, EditGlobals, ConfirmationPopup) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *  - Sebastian Bochan\n         *\n         * */\n        const { createElement, merge, error, fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Accordion menu class.\n         */\n        class AccordionMenu {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(iconsURLPrefix, closeSidebar) {\n                this.changedOptions = {};\n                this.chartOptionsJSON = {};\n                this.oldOptionsBuffer = {};\n                this.waitingForConfirmation = false;\n                this.iconsURLPrefix = iconsURLPrefix;\n                this.closeSidebar = closeSidebar;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Renders the menu for given component.\n             *\n             * @param container\n             * The HTML Element to render the menu in.\n             *\n             * @param component\n             * The component to render the menu for.\n\n             * @param sidebarMainContainer\n             * The main container of the sidebar.\n             */\n            renderContent(container, component, sidebarMainContainer) {\n                const { editMode } = component.board;\n                const menu = this;\n                const editableOptions = component.editableOptions.getOptions();\n                let options;\n                let content;\n                this.component = component;\n                this.oldOptionsBuffer = merge({}, component.options);\n                if (editMode) {\n                    this.confirmationPopup = new ConfirmationPopup(component.board.container, editMode.iconsURLPrefix, editMode, { close: { icon: '' } });\n                }\n                const accordionContainer = createElement('div', {\n                    className: EditGlobals.classNames.accordionMenu\n                }, {}, container);\n                for (let i = 0, end = editableOptions.length; i < end; i++) {\n                    options = editableOptions[i];\n                    content = EditRenderer.renderCollapseHeader(accordionContainer, merge({\n                        iconsURLPrefix: menu.iconsURLPrefix,\n                        lang: (component.board?.editMode || EditGlobals).lang\n                    }, options)).content;\n                    this.renderAccordion(options, content, component);\n                }\n                const buttonContainer = createElement('div', {\n                    className: EditGlobals.classNames.accordionMenuButtonsContainer\n                }, {}, sidebarMainContainer);\n                EditRenderer.renderButton(buttonContainer, {\n                    text: (component.board?.editMode || EditGlobals)\n                        .lang.confirmButton,\n                    className: EditGlobals.classNames.popupConfirmBtn,\n                    callback: async () => {\n                        await this.confirmChanges();\n                    }\n                });\n                EditRenderer.renderButton(buttonContainer, {\n                    text: (component.board?.editMode || EditGlobals)\n                        .lang.cancelButton,\n                    className: EditGlobals.classNames.popupCancelBtn,\n                    callback: () => {\n                        this.cancelChanges();\n                    }\n                });\n                sidebarMainContainer.appendChild(buttonContainer);\n            }\n            /**\n             * Update the options object with new nested value, based on the property\n             * path. If the objects in the path are not defined, the function will\n             * create them.\n             *\n             * @param propertyPath\n             * Path of the property for which the value should be updated.\n             * Example: ```['chartOptions', 'chart', 'type']```\n             *\n             * @param value\n             * New value of the property.\n             */\n            updateOptions(propertyPath, value) {\n                const pathLength = propertyPath.length - 1;\n                let currentLevel = this.changedOptions;\n                let currentChartOptionsLevel;\n                let currentOldChartOptionsBufferLevel;\n                let currentDataGridOptionsLevel;\n                let currentOldDataGridOptionsBufferLevel;\n                if (pathLength === 0 && propertyPath[0] === 'chartOptions') {\n                    try {\n                        const parsedValue = JSON.parse(value);\n                        this.chartOptionsJSON = parsedValue;\n                    }\n                    catch (e) {\n                        // TODO: Handle the wrong config passed from the user.\n                        error(`Dashboards Error: Wrong JSON config structure passed as a chart options. \\n____________\\n${e}`);\n                    }\n                }\n                for (let i = 0; i < pathLength; i++) {\n                    const key = propertyPath[i];\n                    if (!currentLevel[key]) {\n                        currentLevel[key] = {};\n                    }\n                    currentLevel = currentLevel[key];\n                    if (key === 'dataGridOptions') {\n                        const realDataGridOptions = this.component.dataGrid?.options;\n                        if (realDataGridOptions) {\n                            const oldOptionsBuffer = this.oldOptionsBuffer;\n                            if (!oldOptionsBuffer.dataGridOptions) {\n                                oldOptionsBuffer.dataGridOptions = {};\n                            }\n                            currentOldDataGridOptionsBufferLevel =\n                                oldOptionsBuffer.dataGridOptions;\n                            currentDataGridOptionsLevel = realDataGridOptions;\n                        }\n                    }\n                    else if (currentDataGridOptionsLevel &&\n                        currentOldDataGridOptionsBufferLevel) {\n                        currentDataGridOptionsLevel = currentDataGridOptionsLevel[key];\n                        if (currentOldDataGridOptionsBufferLevel[key] === void 0) {\n                            currentOldDataGridOptionsBufferLevel[key] = {};\n                        }\n                        currentOldDataGridOptionsBufferLevel =\n                            currentOldDataGridOptionsBufferLevel[key];\n                    }\n                    if (key === 'chartOptions') {\n                        const realChartOptions = this.component.chart?.options;\n                        if (realChartOptions) {\n                            const oldOptionsBuffer = this.oldOptionsBuffer;\n                            if (!oldOptionsBuffer.chartOptions) {\n                                oldOptionsBuffer.chartOptions = {};\n                            }\n                            currentOldChartOptionsBufferLevel =\n                                oldOptionsBuffer.chartOptions;\n                            currentChartOptionsLevel = realChartOptions;\n                        }\n                    }\n                    else if (currentChartOptionsLevel &&\n                        currentOldChartOptionsBufferLevel) {\n                        currentChartOptionsLevel = currentChartOptionsLevel[key];\n                        if (currentOldChartOptionsBufferLevel[key] === void 0) {\n                            currentOldChartOptionsBufferLevel[key] = {};\n                        }\n                        currentOldChartOptionsBufferLevel =\n                            currentOldChartOptionsBufferLevel[key];\n                    }\n                }\n                const lastKey = propertyPath[pathLength];\n                currentLevel[lastKey] = value;\n                if (currentOldChartOptionsBufferLevel && currentChartOptionsLevel) {\n                    currentOldChartOptionsBufferLevel[lastKey] = (currentOldChartOptionsBufferLevel[lastKey] ??\n                        currentChartOptionsLevel[lastKey]);\n                }\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.component?.update(this.changedOptions);\n            }\n            /**\n             * Renders either a basic or nested element. This function can be\n             * recursively called, if there are multiple nested options.\n             *\n             * @param options\n             * Configuration object of the Component options.\n             *\n             * @param parentNode\n             * A container where the accordion is rendered.\n             *\n             * @param component\n             * the component for which the menu should be rendered.\n             */\n            renderAccordion(options, parentNode, component) {\n                if (options.type === 'nested') {\n                    return this.renderNested(parentNode, options, component);\n                }\n                const renderFunction = EditRenderer.getRendererFunction(options.type);\n                if (!renderFunction) {\n                    return;\n                }\n                renderFunction(parentNode, {\n                    ...options,\n                    iconsURLPrefix: this.iconsURLPrefix,\n                    value: component.getEditableOptionValue(options.propertyPath),\n                    onchange: (value) => this.updateOptions(options.propertyPath || [], value)\n                });\n            }\n            /**\n             * Render nested menu for the component.\n             *\n             * @param parentElement\n             * HTML element to which the nested structure should be rendered to\n             *\n             * @param options\n             * configuration object for the options\n             *\n             * @param component\n             * The component instance for the options should be rendered\n             */\n            renderNested(parentElement, options, component) {\n                if (!parentElement || !options.nestedOptions) {\n                    return;\n                }\n                const nestedOptions = options.nestedOptions;\n                for (let i = 0, iEnd = nestedOptions.length; i < iEnd; ++i) {\n                    const name = nestedOptions[i].name;\n                    const accordionOptions = nestedOptions[i].options;\n                    const showToggle = !!nestedOptions[i].showToggle;\n                    const propertyPath = nestedOptions[i].propertyPath || [];\n                    const collapsedHeader = EditRenderer.renderCollapseHeader(parentElement, {\n                        name,\n                        isEnabled: !!component.getEditableOptionValue(propertyPath),\n                        iconsURLPrefix: this.iconsURLPrefix,\n                        showToggle: showToggle,\n                        onchange: (value) => this.updateOptions(propertyPath, value),\n                        isNested: true,\n                        lang: (component.board?.editMode || EditGlobals).lang\n                    });\n                    for (let j = 0, jEnd = accordionOptions.length; j < jEnd; ++j) {\n                        this.renderAccordion(accordionOptions[j], collapsedHeader.content, component);\n                    }\n                }\n                return;\n            }\n            /**\n             * Closes the sidebar discarding changes. If there are any changes, it will\n             * show a confirmation popup. If no changes, it will close the sidebar.\n             */\n            cancelChanges() {\n                if (Object.keys(this.changedOptions).length < 1) {\n                    this.closeSidebar();\n                }\n                else {\n                    this.showCancelConfirmationPopup();\n                }\n            }\n            /**\n             * Confirms changes made in the component.\n             *\n             * @fires EditMode#componentChanged\n             */\n            async confirmChanges() {\n                const component = this.component;\n                if (!component) {\n                    return;\n                }\n                if (component.type === 'Highcharts' &&\n                    Object.keys(this.chartOptionsJSON).length) {\n                    await component.update({\n                        chartOptions: this.chartOptionsJSON\n                    });\n                }\n                else if (component.type === 'HTML') {\n                    const options = this.changedOptions;\n                    await component.update(options, true);\n                }\n                fireEvent(component.board.editMode, 'componentChanged', {\n                    target: component,\n                    changedOptions: merge({}, this.changedOptions),\n                    oldOptions: merge({}, this.oldOptionsBuffer)\n                });\n                this.changedOptions = {};\n                this.chartOptionsJSON = {};\n                this.closeSidebar();\n            }\n            /**\n             * Discards changes made in the component.\n             *\n             * @fires EditMode#componentChangesDiscarded\n             */\n            async discardChanges() {\n                const component = this.component;\n                if (!component) {\n                    return;\n                }\n                await component.update(this.oldOptionsBuffer);\n                fireEvent(component.board.editMode, 'componentChangesDiscarded', {\n                    target: component,\n                    changedOptions: merge({}, this.changedOptions),\n                    oldOptions: merge({}, this.oldOptionsBuffer)\n                });\n                this.changedOptions = {};\n                this.chartOptionsJSON = {};\n            }\n            /**\n             * Shows a confirmation popup when the user tries to discard changes.\n             */\n            showCancelConfirmationPopup() {\n                const popup = this.confirmationPopup;\n                const editMode = this.component?.board?.editMode;\n                if (!popup || !editMode || this.waitingForConfirmation) {\n                    return;\n                }\n                this.waitingForConfirmation = true;\n                popup.show({\n                    text: editMode.lang.confirmDiscardChanges,\n                    confirmButton: {\n                        value: editMode.lang.confirmButton,\n                        callback: async () => {\n                            await this.discardChanges();\n                            this.waitingForConfirmation = false;\n                            this.closeSidebar();\n                        },\n                        context: this\n                    },\n                    cancelButton: {\n                        value: editMode.lang.cancelButton,\n                        callback: () => {\n                            popup.closePopup();\n                            editMode.setEditOverlay();\n                            setTimeout(() => {\n                                this.waitingForConfirmation = false;\n                            }, 100);\n                        }\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AccordionMenu;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/SidebarPopup.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Layout/CellHTML.js'], _modules['Dashboards/EditMode/AccordionMenu.js'], _modules['Shared/BaseForm.js'], _modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Core/Utilities.js']], function (AST, CellHTML, AccordionMenu, BaseForm, Bindings, Cell, EditGlobals, EditRenderer, GUIElement, Layout, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  Pawel Lysy\n         *\n         * */\n        const { addEvent, createElement, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class which creates the sidebar and handles its behavior.\n         *\n         * @internal\n         */\n        class SidebarPopup extends BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor of the SidebarPopup class.\n             *\n             * @param parentDiv\n             * Element to which the sidebar will be appended.\n             *\n             * @param iconsURL\n             * URL to the icons.\n             *\n             * @param editMode\n             * Instance of EditMode.\n             */\n            constructor(parentDiv, iconsURL, editMode) {\n                super(parentDiv, iconsURL);\n                /**\n                 * Options used in the sidebar.\n                 */\n                this.options = {\n                    components: ['HTML', 'row', 'Highcharts', 'DataGrid', 'KPI']\n                };\n                /**\n                 * Whether the sidebar is visible.\n                 */\n                this.isVisible = false;\n                /**\n                 * List of components that can be added to the board.\n                 */\n                this.componentsList = [];\n                this.editMode = editMode;\n                this.options = merge(this.options, editMode.options.toolbars?.sidebar || {});\n                this.componentsList = this.getComponentsList(this.options.components || []);\n                this.accordionMenu = new AccordionMenu(this.iconsURL, this.hide.bind(this));\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Function to detect on which side of the screen should the sidebar be.\n             *\n             * @param context\n             * The cell or row which is the context of the sidebar.\n             *\n             * @returns\n             * Whether the sidebar should be on the right side of the screen.\n             */\n            detectRightSidebar(context) {\n                const editMode = this.editMode;\n                const layoutWrapper = editMode.customHTMLMode ?\n                    editMode.board.container : editMode.board.layoutsWrapper;\n                if (!layoutWrapper) {\n                    return false;\n                }\n                return GUIElement.getOffsets(context, layoutWrapper).left < ((layoutWrapper.offsetWidth / 2) - 10); // 10 = snap\n            }\n            /**\n             * Function to remove the class names from the sidebar.\n             */\n            removeClassNames() {\n                const classNames = EditGlobals.classNames, classList = this.container.classList;\n                classList.remove(classNames.editSidebarShow);\n                classList.remove(classNames.editSidebarRightShow);\n            }\n            /**\n             * Function to add the class names to the sidebar depending on the position\n             * of the sidebar.\n             *\n             * @param isRightSidebar\n             * Whether the sidebar should be on the right side of the screen.\n             */\n            addClassNames(isRightSidebar) {\n                const classList = this.container.classList;\n                if (isRightSidebar) {\n                    classList.add(EditGlobals.classNames.editSidebarRight);\n                }\n                else {\n                    classList.remove(EditGlobals.classNames.editSidebarRight);\n                }\n                setTimeout(() => {\n                    classList.add(EditGlobals.classNames[isRightSidebar ? 'editSidebarRightShow' : 'editSidebarShow']);\n                });\n            }\n            /**\n             * Function to show the sidebar.\n             *\n             * @param context\n             * The cell or row which is the context of the sidebar.\n             */\n            show(context) {\n                const editMode = this.editMode, isRightSidebar = !!(context && this.detectRightSidebar(context));\n                this.showPopup(EditGlobals.classNames.editSidebarShow);\n                this.addClassNames(isRightSidebar);\n                if (editMode.resizer) {\n                    editMode.resizer.disableResizer();\n                }\n                // Remove highlight from the row.\n                if (editMode.editCellContext instanceof Cell &&\n                    editMode.editCellContext.row) {\n                    editMode.editCellContext.row.setHighlight();\n                }\n                editMode.hideToolbars(['cell', 'row']);\n                editMode.stopContextDetection();\n                this.isVisible = true;\n                this.generateContent(context);\n            }\n            generateContent(context) {\n                // Reset\n                this.container.innerHTML = AST.emptyHTML;\n                // Title\n                this.renderHeader(context ?\n                    this.editMode.lang.settings :\n                    this.editMode.lang.addComponent, '');\n                // Render content wrapper\n                this.sidebarWrapper = createElement('div', {\n                    className: EditGlobals.classNames.editSidebarWrapper\n                }, void 0, this.container);\n                if (!context) {\n                    this.renderAddComponentsList();\n                    return;\n                }\n                this.type = context.getType();\n                if (this.type === 'cell-html' || this.type === 'cell') {\n                    const component = context.mountedComponent;\n                    if (!component) {\n                        return;\n                    }\n                    this.accordionMenu.renderContent(this.sidebarWrapper, component, this.container);\n                }\n            }\n            renderAddComponentsList() {\n                const sidebar = this;\n                const components = this.componentsList;\n                let gridElement;\n                const gridWrapper = createElement('div', {\n                    className: EditGlobals.classNames.editGridItems\n                }, {}, sidebar.sidebarWrapper);\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    gridElement = createElement('div', {}, {}, gridWrapper);\n                    // Drag drop new component.\n                    gridElement.addEventListener('mousedown', (e) => {\n                        e.preventDefault();\n                        if (sidebar.editMode.dragDrop) {\n                            // Workaround for Firefox, where mouseleave is not triggered\n                            // correctly when dragging.\n                            const onMouseMove = (event) => {\n                                const rect = sidebar.container.getBoundingClientRect();\n                                if (event.clientX < rect.left ||\n                                    event.clientX > rect.right ||\n                                    event.clientY < rect.top ||\n                                    event.clientY > rect.bottom) {\n                                    sidebar.hide();\n                                    document.removeEventListener('mousemove', onMouseMove);\n                                }\n                            };\n                            // Clean up event listeners\n                            const onMouseUp = () => {\n                                document.removeEventListener('mousemove', onMouseMove);\n                                document.removeEventListener('mouseup', onMouseUp);\n                            };\n                            // Add event listeners\n                            document.addEventListener('mousemove', onMouseMove);\n                            document.addEventListener('mouseup', onMouseUp);\n                            sidebar.editMode.dragDrop.onDragStart(e, void 0, (dropContext) => {\n                                // Add component if there is no layout yet.\n                                if (this.editMode.board.layouts.length === 0) {\n                                    const board = this.editMode.board, newLayoutId = GUIElement.getElementId('layout'), layout = new Layout(board, {\n                                        id: newLayoutId,\n                                        copyId: '',\n                                        parentContainerId: board.container.id,\n                                        rows: [{}],\n                                        style: {}\n                                    });\n                                    if (layout) {\n                                        board.layouts.push(layout);\n                                    }\n                                    dropContext = layout.rows[0];\n                                }\n                                const newCell = components[i].onDrop(sidebar, dropContext);\n                                if (newCell) {\n                                    sidebar.editMode.setEditCellContext(newCell);\n                                    sidebar.show(newCell);\n                                    newCell.setHighlight();\n                                }\n                                // Clean up event listener after drop is complete\n                                document.removeEventListener('mousemove', onMouseMove);\n                            });\n                        }\n                    });\n                    gridElement.innerHTML = components[i].text;\n                }\n                return;\n            }\n            onDropNewComponent(dropContext, componentOptions) {\n                const sidebar = this, dragDrop = sidebar.editMode.dragDrop;\n                if (dragDrop) {\n                    const row = (dropContext.getType() === 'cell' ?\n                        dropContext.row :\n                        dropContext), newCell = row.addCell({\n                        id: GUIElement.getElementId('col')\n                    });\n                    dragDrop.onCellDragEnd(newCell);\n                    const options = merge(componentOptions, {\n                        cell: newCell.id\n                    });\n                    const componentPromise = Bindings.addComponent(options, sidebar.editMode.board, newCell);\n                    sidebar.editMode.setEditOverlay();\n                    void (async () => {\n                        const component = await componentPromise;\n                        if (!component) {\n                            return;\n                        }\n                        fireEvent(this.editMode, 'layoutChanged', {\n                            type: 'newComponent',\n                            target: component\n                        });\n                    })();\n                    return newCell;\n                }\n            }\n            /**\n             * Function to hide the sidebar.\n             */\n            hide() {\n                const editMode = this.editMode;\n                const editCellContext = editMode.editCellContext;\n                this.removeClassNames();\n                this.container.style.display = 'none';\n                // Remove edit overlay if active.\n                if (editMode.isEditOverlayActive) {\n                    editMode.setEditOverlay(true);\n                }\n                if (editCellContext instanceof Cell && editCellContext.row) {\n                    editMode.showToolbars(['cell', 'row'], editCellContext);\n                    editCellContext.row.setHighlight();\n                    editCellContext.setHighlight(true);\n                }\n                else if (editCellContext instanceof CellHTML && editMode.cellToolbar) {\n                    editMode.cellToolbar.showToolbar(editCellContext);\n                    editCellContext.setHighlight();\n                }\n                editMode.isContextDetectionActive = true;\n                this.isVisible = false;\n            }\n            /**\n             * Function called when the close button is pressed.\n             *\n             * @override BaseForm.closeButtonEvents\n             */\n            closeButtonEvents() {\n                if (this.type === 'cell' || this.type === 'cell-html') {\n                    this.accordionMenu.cancelChanges();\n                }\n                else {\n                    this.hide();\n                }\n            }\n            renderHeader(title, iconURL) {\n                if (!this.container) {\n                    return;\n                }\n                const headerWrapper = createElement('div', {\n                    className: EditGlobals.classNames.editSidebarHeader\n                }, {}, this.container);\n                this.container.appendChild(headerWrapper);\n                this.headerWrapper = headerWrapper;\n                const icon = EditRenderer.renderIcon(this.headerWrapper, {\n                    icon: iconURL,\n                    className: EditGlobals.classNames.editSidebarTitle\n                });\n                if (icon) {\n                    icon.textContent = title;\n                }\n                this.headerWrapper?.appendChild(this.closeButton);\n            }\n            /**\n             * Based on the provided components list, it returns the list of components\n             * with its names and functions that are called when the component is\n             * dropped.\n             *\n             * @param components\n             * List of components that can be added to the board.\n             */\n            getComponentsList(components) {\n                const sidebar = this, editMode = sidebar.editMode, componentTypes = editMode.board.componentTypes, componentList = [];\n                components.forEach((componentName) => {\n                    const component = componentTypes[componentName];\n                    if (component) {\n                        componentList.push({\n                            text: editMode.lang?.sidebar[componentName] ||\n                                component.name,\n                            onDrop: function (sidebar, dropContext) {\n                                const options = component.prototype.getOptionsOnDrop(sidebar);\n                                if (options) {\n                                    return sidebar.onDropNewComponent(dropContext, options);\n                                }\n                            }\n                        });\n                    }\n                    else if (componentName === 'row') {\n                        componentList.push(SidebarPopup.addRow);\n                    }\n                });\n                return componentList;\n            }\n            /**\n             * Function to create and add the close button to the sidebar.\n             *\n             * @param className\n             * Class name of the close button.\n             * @returns Close button element\n             */\n            addCloseButton(className = EditGlobals.classNames.popupCloseButton) {\n                // Close popup when click outside the popup\n                addEvent(document, 'click', (event) => {\n                    event.stopPropagation();\n                    if (this.container.style.display === 'block' &&\n                        !this.container.contains(event.target) &&\n                        this.container.classList.value.includes('show')) {\n                        if (this.type === 'cell' || this.type === 'cell-html') {\n                            this.accordionMenu.cancelChanges();\n                        }\n                        else {\n                            this.hide();\n                        }\n                    }\n                });\n                return super.addCloseButton.call(this, className);\n            }\n            /**\n             * Function that creates the container of the sidebar.\n             *\n             * @param parentDiv\n             * The parent div to which the sidebar will be appended.\n             * @param className\n             * Class name of the sidebar.\n             * @returns The container of the sidebar.\n             */\n            createPopupContainer(parentDiv, className = EditGlobals.classNames.editSidebar) {\n                return super.createPopupContainer.call(this, parentDiv, className);\n            }\n        }\n        SidebarPopup.addRow = {\n            text: EditGlobals.lang.sidebar.row,\n            onDrop: function (sidebar, dropContext) {\n                if (!dropContext) {\n                    return;\n                }\n                const row = (dropContext.getType() === 'cell' ?\n                    dropContext.row :\n                    dropContext), board = row.layout.board, newLayoutId = GUIElement.getElementId('layout'), cellId = GUIElement.getElementId('cell'), layout = new Layout(board, {\n                    id: newLayoutId,\n                    copyId: '',\n                    parentContainerId: board.container.id,\n                    rows: [{\n                            cells: [{\n                                    id: cellId\n                                }]\n                        }],\n                    style: {}\n                });\n                if (layout) {\n                    board.layouts.push(layout);\n                    fireEvent(board.editMode, 'layoutChanged', {\n                        type: 'newLayout',\n                        target: layout,\n                        board\n                    });\n                }\n                void Bindings.addComponent({\n                    type: 'HTML',\n                    cell: cellId,\n                    className: 'highcharts-dashboards-component-placeholder',\n                    html: `\n                            <h2> Placeholder </h2>\n                            <span> This placeholder can be deleted when you add extra\n                                components to this row.\n                            </span>\n                            `\n                }, board);\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SidebarPopup;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditContextMenu.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/Menu.js']], function (EditGlobals, U, Menu) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, merge } = U;\n        /**\n         * Class to create context menu.\n         * @internal\n         */\n        class EditContextMenu extends Menu {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentElement, options, editMode) {\n                super(editMode.board.container, merge(EditContextMenu.defaultOptions, options || {}), editMode);\n                this.editMode = editMode;\n                this.options = merge(EditContextMenu.defaultOptions, options || {});\n                // Move it in the DOM after the edit tools so it is better accessible.\n                this.editMode.board.layoutsWrapper?.parentNode.insertBefore(this.container, this.editMode.board.layoutsWrapper);\n                // Set the context menu container width.\n                this.container.style.width = this.options.width + 'px';\n                super.initItems(EditContextMenu.items);\n                if (this.options.items) {\n                    const items = [];\n                    for (let i = 0, iEnd = this.options.items.length; i < iEnd; ++i) {\n                        if (typeof this.options.items[i] === 'string') {\n                            items.push(this.options.items[i]);\n                        }\n                        else if (this.options.items[i].id) {\n                            items.push(this.options.items[i].id);\n                        }\n                    }\n                    this.setActiveItems(items);\n                }\n                this.initEvents();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            initEvents() {\n                const contextMenu = this;\n                // Click on document close the context menu\n                // TODO refactor\n                addEvent(document, 'click', (event) => {\n                    if (event.target !== this.container &&\n                        event.target !==\n                            contextMenu.editMode.tools.contextButtonElement &&\n                        !event.target.classList\n                            .contains(EditGlobals.classNames.toggleSlider) &&\n                        event.target.tagName !== 'INPUT' &&\n                        this.isVisible) {\n                        this.setVisible(false);\n                    }\n                });\n            }\n            setVisible(visible) {\n                const contextMenu = this, contextButtonElement = contextMenu.editMode.tools.contextButtonElement;\n                if (contextMenu.container && contextButtonElement) {\n                    if (visible) {\n                        contextMenu.container.style.display = 'block';\n                        contextMenu.isVisible = true;\n                        contextButtonElement.setAttribute('aria-expanded', 'true');\n                    }\n                    else {\n                        contextMenu.container.style.display = 'none';\n                        contextMenu.isVisible = false;\n                        contextButtonElement.setAttribute('aria-expanded', 'false');\n                    }\n                }\n            }\n            updatePosition(ctxButton, x, y) {\n                const contextMenu = this, width = contextMenu.options.width || 0, left = (ctxButton ?\n                    ctxButton.offsetLeft - width + ctxButton.offsetWidth :\n                    x), top = ctxButton ? ctxButton.offsetTop + ctxButton.offsetHeight : y;\n                if (left && top) {\n                    contextMenu.container.style.left = left + 'px';\n                    contextMenu.container.style.top = top + 'px';\n                }\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        EditContextMenu.defaultOptions = {\n            enabled: true,\n            width: 150,\n            className: EditGlobals.classNames.contextMenu,\n            itemsClassName: EditGlobals.classNames.contextMenuItem,\n            items: ['editMode']\n        };\n        /**\n         * Default Context menu items.\n         */\n        EditContextMenu.items = merge(Menu.items, {\n            editMode: {\n                id: 'editMode',\n                type: 'toggle',\n                getValue: function (item) {\n                    return item.menu.editMode.isActive();\n                },\n                langKey: 'editMode',\n                events: {\n                    click: function () {\n                        this.menu.editMode.toggleEditMode();\n                    }\n                }\n            }\n        });\n\n        return EditContextMenu;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/ContextDetection.js', [_modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (GUIElement, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { defined } = U;\n        class ContextDetection {\n            static isGUIElementOnParentEdge(mouseContext, side) {\n                const visibleElements = (side === 'top' || side === 'bottom') ?\n                    mouseContext.row.layout.getVisibleRows() :\n                    (side === 'left' || side === 'right') ?\n                        mouseContext.row.getVisibleCells() :\n                        [];\n                const lastElementIndex = (visibleElements.length - 1);\n                return ((visibleElements[lastElementIndex] === mouseContext &&\n                    side === 'right') ||\n                    (visibleElements[lastElementIndex] === mouseContext.row &&\n                        side === 'bottom') ||\n                    (visibleElements[0] === mouseContext && side === 'left') ||\n                    (visibleElements[0] === mouseContext.row && side === 'top'));\n            }\n            static getContextLevel(mouseContext, offset, sideOffset, side) {\n                // Array of overlapped levels.\n                const overlappedLevels = mouseContext.getOverlappingLevels(side, offset / 2);\n                // Divide offset to level sections (eg 3 nested layouts -\n                // cell edge will have 3 sections each 1/3 offset width).\n                const divOffset = offset / overlappedLevels.length;\n                // Overlapped nested layout level.\n                const lastOverlappedLevel = overlappedLevels[overlappedLevels.length - 1];\n                let level = mouseContext.row.layout.level - Math.floor(sideOffset / divOffset);\n                level = level < lastOverlappedLevel ? lastOverlappedLevel : (level > mouseContext.row.layout.level ?\n                    mouseContext.row.layout.level : level);\n                return level;\n            }\n            static getContext(mouseCellContext, e, offset) {\n                let sideOffset;\n                // Get cell offsets, width, height\n                const mouseCellContextOffsets = GUIElement.getOffsets(mouseCellContext);\n                const { width, height } = GUIElement.getDimFromOffsets(mouseCellContextOffsets);\n                // Correct offset when element to small.\n                if (width < 2 * offset) {\n                    offset = width / 2;\n                }\n                // Get mouse position relative to the mouseContext sides.\n                const leftSideX = e.clientX - mouseCellContextOffsets.left;\n                const topSideY = e.clientY - mouseCellContextOffsets.top;\n                // Get cell side - right, left, top, bottom\n                let side = 'bottom';\n                if (leftSideX >= -offset && leftSideX <= offset) {\n                    side = 'left';\n                }\n                else if (leftSideX - width >= -offset && leftSideX - width <= offset) {\n                    side = 'right';\n                }\n                else if (topSideY >= -offset && topSideY <= offset) {\n                    side = 'top';\n                }\n                else if (topSideY - height >= -offset && topSideY - height <= offset) {\n                    side = 'bottom';\n                }\n                switch (side) {\n                    case 'right':\n                        sideOffset = leftSideX - width + offset;\n                        break;\n                    case 'left':\n                        sideOffset = offset - leftSideX;\n                        break;\n                    case 'top':\n                        sideOffset = offset - topSideY;\n                        break;\n                    case 'bottom':\n                        sideOffset = topSideY - height + offset;\n                        break;\n                }\n                const context = {\n                    cell: mouseCellContext,\n                    side: side\n                };\n                // Nested layouts.\n                if (mouseCellContext.row?.layout.level &&\n                    side &&\n                    ContextDetection.isGUIElementOnParentEdge(mouseCellContext, side) &&\n                    defined(sideOffset)) {\n                    const level = ContextDetection.getContextLevel(mouseCellContext, offset, sideOffset, side);\n                    const cell = mouseCellContext.getParentCell(level);\n                    if (cell) {\n                        context.cell = cell;\n                    }\n                }\n                return context;\n            }\n        }\n\n        return ContextDetection;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/DragDrop.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Actions/ContextDetection.js']], function (U, Globals, EditGlobals, GUIElement, ContextDetection) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, merge, css, fireEvent, createElement } = U;\n        /**\n         * Class providing a drag and drop functionality.\n         * @internal\n         */\n        class DragDrop {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * Constructor for the DragDrop class.\n             * @internal\n             *\n             * @param {EditMode} editMode\n             * The parent editMode reference.\n             *\n             * @param {DragDrop.Options} options\n             * Options for the DragDrop.\n             */\n            constructor(editMode, options) {\n                this.editMode = editMode;\n                this.options = merge(DragDrop.defaultOptions, options);\n                this.mockElement = createElement('div', { className: EditGlobals.classNames.dragMock }, {}, editMode.board.container);\n                this.dropPointer = {\n                    isVisible: false,\n                    align: '',\n                    element: createElement('div', { className: EditGlobals.classNames.dropPointer }, {}, editMode.board.container)\n                };\n                this.isActive = false;\n                this.initEvents();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for showing and positioning drop pointer.\n             *\n             * @param {number} left\n             * Drop pointer left position.\n             *\n             * @param {number} top\n             * Drop pointer top position.\n             *\n             * @param {number} width\n             * Drop pointer width.\n             *\n             * @param {number} height\n             * Drop pointer height.\n             */\n            showDropPointer(left, top, width, height) {\n                this.dropPointer.isVisible = true;\n                css(this.dropPointer.element, {\n                    display: 'block',\n                    left: left + 'px',\n                    top: top + 'px',\n                    height: height + 'px',\n                    width: width + 'px'\n                });\n            }\n            /**\n             * Method for hiding drop pointer.\n             */\n            hideDropPointer() {\n                if (this.dropPointer.isVisible) {\n                    this.dropPointer.isVisible = false;\n                    this.dropPointer.align = '';\n                    this.dropPointer.element.style.display = 'none';\n                }\n            }\n            /**\n             * Method for positioning drag mock element.\n             *\n             * @param {PointerEvent} mouseEvent\n             * Mouse event.\n             */\n            setMockElementPosition(mouseEvent) {\n                const dragDrop = this, dashBoundingRect = dragDrop.editMode.board.container.getBoundingClientRect(), offset = dragDrop.mockElement.clientWidth / 2, x = mouseEvent.clientX - dashBoundingRect.left - offset, y = mouseEvent.clientY - dashBoundingRect.top - offset;\n                css(this.mockElement, { left: x + 'px', top: y + 'px' });\n            }\n            /**\n             * Method for initializing drag drop events.\n             */\n            initEvents() {\n                const dragDrop = this;\n                // DragDrop events.\n                addEvent(document, 'mousemove', dragDrop.onDrag.bind(dragDrop));\n                addEvent(document, 'mouseup', dragDrop.onDragEnd.bind(dragDrop));\n            }\n            /**\n             * General method used on drag start.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {Cell|Row} context\n             * Reference to the dragged context.\n             *\n             * @param {Function} dragEndCallback\n             * Callback invoked on drag end.\n             */\n            onDragStart(e, context, dragEndCallback) {\n                this.isActive = true;\n                this.editMode.hideToolbars(['cell', 'row']);\n                if (this.editMode.resizer) {\n                    this.editMode.resizer.disableResizer();\n                }\n                this.setMockElementPosition(e);\n                if (context) {\n                    this.context = context;\n                    context.hide();\n                    if (context.getType() === Globals.guiElementType.cell) {\n                        const draggedCell = context;\n                        // Call cellResize board event.\n                        fireEvent(this.editMode.board, 'cellResize', { cell: context });\n                        fireEvent(draggedCell.row, 'cellChange', { cell: context, row: draggedCell.row });\n                    }\n                }\n                else if (dragEndCallback) {\n                    this.dragEndCallback = dragEndCallback;\n                }\n                css(this.mockElement, {\n                    cursor: 'grabbing',\n                    display: 'block'\n                });\n            }\n            /**\n             * General method used while dragging.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             */\n            onDrag(e) {\n                const dragDrop = this;\n                if (dragDrop.isActive) {\n                    e.preventDefault();\n                    dragDrop.setMockElementPosition(e);\n                    if (dragDrop.context) {\n                        if (dragDrop.context.getType() ===\n                            Globals.guiElementType.cell) {\n                            dragDrop.onCellDrag(e);\n                        }\n                        else if (dragDrop.context.getType() ===\n                            Globals.guiElementType.row) {\n                            dragDrop.onRowDrag(e);\n                        }\n                    }\n                    else if (dragDrop.dragEndCallback) {\n                        dragDrop.onCellDrag(e);\n                    }\n                }\n            }\n            /**\n             * General method used when drag finish.\n             */\n            onDragEnd() {\n                const dragDrop = this;\n                if (dragDrop.isActive) {\n                    dragDrop.isActive = false;\n                    css(dragDrop.mockElement, {\n                        cursor: 'grab',\n                        display: 'none'\n                    });\n                    if (dragDrop.context) {\n                        if (dragDrop.context.getType() ===\n                            Globals.guiElementType.cell) {\n                            dragDrop.onCellDragEnd();\n                        }\n                        else if (dragDrop.context.getType() ===\n                            Globals.guiElementType.row) {\n                            dragDrop.onRowDragEnd();\n                        }\n                        dragDrop.context = void 0;\n                        // Show toolbars and snaps.\n                        if (dragDrop.editMode.editCellContext) {\n                            dragDrop.editMode.showToolbars(['row', 'cell'], dragDrop.editMode.editCellContext);\n                            if (dragDrop.editMode.resizer) {\n                                dragDrop.editMode.resizer.setSnapPositions(dragDrop.editMode.editCellContext);\n                            }\n                        }\n                    }\n                    else if (dragDrop.dragEndCallback) {\n                        dragDrop.dragEndCallback(dragDrop.dropContext);\n                        dragDrop.dragEndCallback = void 0;\n                        dragDrop.hideDropPointer();\n                    }\n                }\n            }\n            /**\n             * Sets appropriate drop context and refresh drop pointer position when\n             * row is dragged or cell is dragged as a row.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} contextDetails\n             * Context details (cell, side)\n             */\n            onRowDrag(e, contextDetails) {\n                const dragDrop = this, mouseCellContext = dragDrop.mouseCellContext, dropPointerSize = dragDrop.options.dropPointerSize || 0, offset = dragDrop.options.rowDropOffset || 0;\n                let updateDropPointer = false;\n                if (mouseCellContext) {\n                    const context = (contextDetails ||\n                        ContextDetection.getContext(mouseCellContext, e, offset));\n                    const align = context.side;\n                    if (dragDrop.dropPointer.align !== align ||\n                        dragDrop.dropContext !== context.cell.row) {\n                        updateDropPointer = true;\n                        dragDrop.dropPointer.align = align;\n                        dragDrop.dropContext = context.cell.row;\n                    }\n                    if (align) {\n                        const dropContextRowOffsets = GUIElement.getOffsets(dragDrop.dropContext, dragDrop.editMode.board.container);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(dropContextRowOffsets);\n                        // Update or show drop pointer.\n                        if (!dragDrop.dropPointer.isVisible || updateDropPointer) {\n                            dragDrop.showDropPointer(dropContextRowOffsets.left, dropContextRowOffsets.top + (dragDrop.dropPointer.align === 'bottom' ?\n                                height :\n                                0) - dropPointerSize / 2, width, dropPointerSize);\n                        }\n                    }\n                    else {\n                        dragDrop.dropContext = void 0;\n                        dragDrop.hideDropPointer();\n                    }\n                }\n            }\n            /**\n             * Unmounts dropped row and mounts it in a new position.\n             *\n             * @fires DragDrop#layoutChanged\n             */\n            onRowDragEnd() {\n                const dragDrop = this, draggedRow = dragDrop.context, dropContext = dragDrop.dropContext;\n                if (dragDrop.dropPointer.align) {\n                    draggedRow.layout.unmountRow(draggedRow);\n                    // Destroy layout when empty.\n                    if (draggedRow.layout.rows.length === 0) {\n                        draggedRow.layout.destroy();\n                    }\n                    dropContext.layout.mountRow(draggedRow, (dropContext.layout.getRowIndex(dropContext) || 0) +\n                        (dragDrop.dropPointer.align === 'bottom' ? 1 : 0));\n                    // Call cellResize board event.\n                    if (draggedRow.cells[0]) {\n                        fireEvent(dragDrop.editMode.board, 'cellResize', { cell: draggedRow.cells[0] });\n                        fireEvent(draggedRow, 'cellChange', { cell: draggedRow.cells[0], row: draggedRow });\n                    }\n                }\n                dragDrop.hideDropPointer();\n                draggedRow.show();\n                fireEvent(dragDrop.editMode, 'layoutChanged', {\n                    type: 'rowDragEnd',\n                    target: draggedRow,\n                    board: dragDrop.editMode.board\n                });\n            }\n            /**\n             * Method used as middleware when cell is dragged.\n             * Decides where to pass an event depending on the mouse context.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} contextDetails\n             * Context details (cell, side)\n             */\n            onCellDrag(e, contextDetails) {\n                const dragDrop = this, mouseCellContext = dragDrop.mouseCellContext, offset = dragDrop.options.cellDropOffset || 0;\n                if (mouseCellContext || contextDetails) {\n                    dragDrop.onCellDragCellCtx(e, contextDetails ||\n                        ContextDetection.getContext(mouseCellContext, e, offset));\n                }\n                else if (dragDrop.mouseRowContext) {\n                    dragDrop.onCellDragRowCtx(e, dragDrop.mouseRowContext);\n                }\n            }\n            /**\n             * Sets appropriate drop context and refreshes the drop pointer\n             * position when a cell is dragged and a cell context is detected.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} context\n             * Context details (cell, side)\n             */\n            onCellDragCellCtx(e, context) {\n                const dragDrop = this, dropPointerSize = dragDrop.options.dropPointerSize || 0, align = context.side;\n                let updateDropPointer = false;\n                if (dragDrop.dropPointer.align !== align ||\n                    dragDrop.dropContext !== context.cell) {\n                    updateDropPointer = true;\n                    dragDrop.dropPointer.align = align;\n                    dragDrop.dropContext = context.cell;\n                }\n                if (align === 'right' || align === 'left') {\n                    const dropContextOffsets = GUIElement.getOffsets(dragDrop.dropContext, dragDrop.editMode.board.container);\n                    const { width, height } = GUIElement.getDimFromOffsets(dropContextOffsets);\n                    // Update or show drop pointer.\n                    if (!dragDrop.dropPointer.isVisible || updateDropPointer) {\n                        const rowLevelInfo = dragDrop.dropContext.row.getRowLevelInfo(e.clientY), pointerHeight = (rowLevelInfo ?\n                            (rowLevelInfo.rowLevel.bottom -\n                                rowLevelInfo.rowLevel.top) :\n                            height);\n                        dragDrop.showDropPointer(dropContextOffsets.left + (align === 'right' ? width : 0) -\n                            dropPointerSize / 2, dropContextOffsets.top, dropPointerSize, pointerHeight);\n                    }\n                }\n                else if (align === 'top' || align === 'bottom') {\n                    const dropContextOffsets = GUIElement.getOffsets(dragDrop.dropContext), rowLevelInfo = dragDrop.dropContext.row\n                        .getRowLevelInfo(dropContextOffsets.top);\n                    if (rowLevelInfo &&\n                        ((rowLevelInfo.index === 0 && align === 'top') ||\n                            (rowLevelInfo.index ===\n                                rowLevelInfo.rowLevels.length - 1 &&\n                                align === 'bottom'))) {\n                        // Checks if a cell is dragged as a row\n                        // (only when a cell edge is on a row edge)\n                        dragDrop.onRowDrag(e, context);\n                    }\n                }\n                else {\n                    dragDrop.dropContext = void 0;\n                    dragDrop.hideDropPointer();\n                }\n            }\n            /**\n             * Sets appropriate drop context and refreshes the drop pointer\n             * position when a cell is dragged and a row context is detected.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {Row} mouseRowContext\n             * Row context.\n             */\n            onCellDragRowCtx(e, mouseRowContext) {\n                const dragDrop = this, dropPointerSize = dragDrop.options.dropPointerSize || 0, rowOffsets = GUIElement.getOffsets(mouseRowContext), rowLevelInfo = mouseRowContext.getRowLevelInfo(e.clientY);\n                let cell, cellOffsets;\n                if (rowLevelInfo) {\n                    for (let i = 0, iEnd = rowLevelInfo.rowLevel.cells.length; i < iEnd; ++i) {\n                        cell = rowLevelInfo.rowLevel.cells[i];\n                        cellOffsets = GUIElement.getOffsets(cell);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(cellOffsets), dashOffsets = dragDrop.editMode.board.container\n                            .getBoundingClientRect(), levelHeight = (rowLevelInfo.rowLevel.bottom -\n                            rowLevelInfo.rowLevel.top);\n                        if (cell.isVisible) {\n                            if (height < 0.8 * levelHeight &&\n                                cellOffsets.left <= e.clientX &&\n                                cellOffsets.right >= e.clientX) {\n                                if (cellOffsets.top > e.clientY) {\n                                    // @ToDo - Mouse above the cell.\n                                }\n                                else if (cellOffsets.bottom < e.clientY) {\n                                    // Mouse below the cell.\n                                    dragDrop.showDropPointer(cellOffsets.left - dashOffsets.left, cellOffsets.top - dashOffsets.top + height, width, levelHeight - height);\n                                    dragDrop.dropPointer.align = 'nestedBottom';\n                                    dragDrop.dropContext = cell;\n                                }\n                                i = iEnd; // Stop the loop\n                            }\n                            else if ((i === 0 && cellOffsets.left > e.clientX) ||\n                                (i === iEnd - 1 && cellOffsets.right < e.clientX)) {\n                                if (cellOffsets.left > e.clientX) {\n                                    // @ToDo - Mouse on the cell left side.\n                                }\n                                else if (cellOffsets.right < e.clientX) {\n                                    // Mouse on the cell right side.\n                                    const pointerWidth = rowOffsets.right - cellOffsets.right;\n                                    dragDrop.showDropPointer(cellOffsets.left + ((i === 0 && cellOffsets.left > e.clientX) ?\n                                        0 :\n                                        width) - dropPointerSize / 2 - dashOffsets.left, cellOffsets.top - dashOffsets.top, pointerWidth > dropPointerSize ?\n                                        pointerWidth :\n                                        dropPointerSize, levelHeight || height);\n                                    dragDrop.dropPointer.align = 'right';\n                                    dragDrop.dropContext = cell;\n                                }\n                                i = iEnd; // Stop the loop\n                            }\n                        }\n                        else if (!cell.isVisible && cell === dragDrop.context) {\n                            // Element is not visible.\n                            dragDrop.dropContext = void 0;\n                            dragDrop.hideDropPointer();\n                        }\n                    }\n                }\n            }\n            /**\n             * Unmounts dropped cell and mounts it in a new position.\n             * When cell is dragged as a row also creates a new row\n             * and mounts cell there.\n             *\n             * @param {Cell} contextCell\n             * Cell used as a dragDrop context.\n             *\n             * @fires DragDrop#layoutChanged\n             */\n            onCellDragEnd(contextCell) {\n                const dragDrop = this, draggedCell = contextCell || dragDrop.context;\n                let dropContext = dragDrop.dropContext;\n                if (dragDrop.dropPointer.align && dropContext && draggedCell) {\n                    draggedCell.row.unmountCell(draggedCell);\n                    // Destroy row when empty.\n                    if (draggedCell.row.cells.length === 0) {\n                        draggedCell.row.destroy();\n                    }\n                    if ((dragDrop.dropPointer.align === 'top' ||\n                        dragDrop.dropPointer.align === 'bottom') &&\n                        dropContext.getType() === Globals.guiElementType.row) {\n                        dropContext = dropContext;\n                        const newRow = dropContext.layout.addRow({}, void 0, (dropContext.layout.getRowIndex(dropContext) || 0) +\n                            (dragDrop.dropPointer.align === 'bottom' ? 1 : 0));\n                        newRow.mountCell(draggedCell, 0);\n                    }\n                    else if (dragDrop.dropPointer.align === 'nestedBottom' &&\n                        dropContext.getType() === Globals.guiElementType.cell) {\n                        // Create nesting.\n                        const dropContextCell = dropContext;\n                        const row = dropContextCell.row;\n                        const dropContextCellIndex = row.getCellIndex(dropContextCell);\n                        row.unmountCell(dropContextCell);\n                        const newCell = row.addCell({\n                            id: GUIElement.getElementId('col-nested'),\n                            layout: {\n                                rows: [{}, {}]\n                            }\n                        }, void 0, dropContextCellIndex);\n                        if (newCell.nestedLayout) {\n                            newCell.nestedLayout.rows[0].mountCell(dropContextCell);\n                            newCell.nestedLayout.rows[1].mountCell(draggedCell);\n                        }\n                    }\n                    else if (dropContext.getType() === Globals.guiElementType.cell) {\n                        dropContext = dropContext;\n                        dropContext.row.mountCell(draggedCell, (dropContext.row.getCellIndex(dropContext) || 0) +\n                            (dragDrop.dropPointer.align === 'right' ? 1 : 0));\n                    }\n                }\n                // Call cellResize board event.\n                fireEvent(dragDrop.editMode.board, 'cellResize', { cell: draggedCell });\n                fireEvent(draggedCell.row, 'cellChange', { cell: draggedCell, row: draggedCell.row });\n                dragDrop.hideDropPointer();\n                draggedCell.show();\n                fireEvent(dragDrop.editMode, 'layoutChanged', {\n                    type: 'cellDragEnd',\n                    target: draggedCell,\n                    board: dragDrop.editMode.board\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        DragDrop.defaultOptions = {\n            enabled: true,\n            rowDropOffset: 30,\n            cellDropOffset: 30,\n            dropPointerSize: 16\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DragDrop;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/Resizer.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (EditGlobals, GUIElement, U) {\n        const { merge, addEvent, createElement, fireEvent, removeEvent } = U;\n        /**\n         * Class providing a resizing functionality.\n         */\n        class Resizer {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /**\n             * Creates a new instance of the Resizer class based on JSON.\n             * @internal\n             */\n            static fromJSON(editMode, json) {\n                return new Resizer(editMode, json.options);\n            }\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            /**\n             * Constructor for the Resizer class.\n             *\n             * @param {EditMode} editMode\n             * The parent editMode reference.\n             *\n             * @param {Resizer.Options} options\n             * Options for the Resizer.\n             */\n            constructor(editMode, options) {\n                this.editMode = editMode;\n                this.options = merge({}, Resizer.defaultOptions, editMode.options.resize, options);\n                this.currentCell = void 0;\n                this.isX = this.options.type.indexOf('x') > -1;\n                this.isY = this.options.type.indexOf('y') > -1;\n                this.isActive = false;\n                this.startX = 0;\n                this.tempSiblingsWidth = [];\n                this.addSnaps();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add Snap - create snaps and add events.\n             *\n             */\n            addSnaps() {\n                const iconsURLPrefix = this.editMode.iconsURLPrefix;\n                const snapWidth = this.options.snap.width || 0;\n                const snapHeight = this.options.snap.height || 0;\n                const dashboardContainer = this.editMode.board.container;\n                // Right snap\n                this.snapRight = createElement('img', {\n                    className: EditGlobals.classNames.resizeSnap + ' ' +\n                        EditGlobals.classNames.resizeSnapX,\n                    src: iconsURLPrefix + 'resize-handle.svg'\n                }, {\n                    width: snapWidth + 'px',\n                    height: snapHeight + 'px',\n                    left: -9999 + 'px'\n                }, dashboardContainer);\n                // Bottom snap\n                this.snapBottom = createElement('img', {\n                    className: EditGlobals.classNames.resizeSnap + ' ' +\n                        EditGlobals.classNames.resizeSnapY,\n                    src: iconsURLPrefix + 'resize-handle.svg'\n                }, {\n                    width: snapWidth + 'px',\n                    height: snapHeight + 'px',\n                    top: -9999 + 'px',\n                    left: '0px'\n                }, dashboardContainer);\n                this.addResizeEvents();\n            }\n            /**\n             * Hide snaps\n             *\n             */\n            disableResizer() {\n                this.isActive = false;\n                this.currentDimension = void 0;\n                this.currentCell = void 0;\n                if (this.snapRight) {\n                    this.snapRight.style.left = '-9999px';\n                }\n                if (this.snapBottom) {\n                    this.snapBottom.style.left = '-9999px';\n                }\n            }\n            /**\n             * Update snap position.\n             *\n             * @param cell\n             * Cell reference\n             */\n            setSnapPositions(cell) {\n                // Set current cell\n                this.currentCell = cell;\n                // Set position of snaps\n                const cellOffsets = GUIElement.getOffsets(cell, this.editMode.board.container);\n                const left = cellOffsets.left || 0;\n                const top = cellOffsets.top || 0;\n                const { width, height } = GUIElement.getDimFromOffsets(cellOffsets);\n                const snapWidth = (this.options.snap.width || 0);\n                const snapHeight = (this.options.snap.height || 0);\n                if (this.snapRight) {\n                    this.snapRight.style.left = (left + width - snapWidth) + 'px';\n                    this.snapRight.style.top = top + (height / 2) - (snapHeight / 2) + 'px';\n                }\n                if (this.snapBottom) {\n                    this.snapBottom.style.top = (top + height - snapHeight) + 'px';\n                    this.snapBottom.style.left = (left + (width / 2) - (snapWidth / 2)) + 'px';\n                }\n            }\n            /**\n             * Method detects siblings and auto-width applied by flex. The resizer\n             * requires static widths for correct calculations, so we need to apply\n             * temporary width on siblings.\n             */\n            setTempWidthSiblings() {\n                const currentCell = this.currentCell;\n                if (currentCell) {\n                    const cellOffsets = GUIElement.getOffsets(currentCell), rowLevelInfo = currentCell.row.getRowLevelInfo(cellOffsets.top), rowLevelCells = (rowLevelInfo && rowLevelInfo.rowLevel.cells) || [];\n                    let cellContainer, cell;\n                    for (let i = 0, iEnd = rowLevelCells.length; i < iEnd; ++i) {\n                        cell = rowLevelCells[i];\n                        cellContainer = cell.container;\n                        // Do not convert width on the current cell and next siblings.\n                        if (cell === currentCell) {\n                            break;\n                        }\n                        if (cellContainer) {\n                            cellContainer.style.flex =\n                                '0 0 ' + cellContainer.offsetWidth + 'px';\n                            this.tempSiblingsWidth.push(cell);\n                        }\n                    }\n                }\n            }\n            /**\n             * Revert widths to auto.\n             */\n            revertSiblingsAutoWidth() {\n                const tempSiblingsWidth = this.tempSiblingsWidth;\n                let cellContainer, cellResize;\n                for (let i = 0, iEnd = tempSiblingsWidth.length; i < iEnd; ++i) {\n                    cellContainer = tempSiblingsWidth[i].container;\n                    if (cellContainer) {\n                        cellContainer.style.flex = '1 1 0%';\n                        cellResize = tempSiblingsWidth[i];\n                    }\n                }\n                this.tempSiblingsWidth = [];\n                // Call cellResize dashboard event.\n                if (cellResize) {\n                    fireEvent(this.editMode.board, 'cellResize', {\n                        cell: cellResize\n                    });\n                    fireEvent(cellResize.row, 'cellChange', {\n                        cell: cellResize,\n                        row: cellResize.row\n                    });\n                }\n            }\n            /**\n             * Add mouse events to snaps\n             *\n             */\n            addResizeEvents() {\n                const resizer = this;\n                let mouseDownSnapX, mouseDownSnapY, mouseMoveSnap, mouseUpSnap;\n                resizer.mouseDownSnapX = mouseDownSnapX = function (e) {\n                    resizer.isActive = true;\n                    resizer.currentDimension = 'x';\n                    resizer.editMode.hideToolbars(['row', 'cell']);\n                    resizer.setTempWidthSiblings();\n                    resizer.startX = e.clientX;\n                };\n                resizer.mouseDownSnapY = mouseDownSnapY = function () {\n                    resizer.isActive = true;\n                    resizer.currentDimension = 'y';\n                    resizer.editMode.hideToolbars(['row', 'cell']);\n                };\n                resizer.mouseMoveSnap = mouseMoveSnap = function (e) {\n                    if (resizer.isActive) {\n                        resizer.onMouseMove(e);\n                    }\n                };\n                resizer.mouseUpSnap = mouseUpSnap = function () {\n                    if (resizer.isActive) {\n                        resizer.isActive = false;\n                        resizer.currentDimension = void 0;\n                        resizer.revertSiblingsAutoWidth();\n                        resizer.editMode.showToolbars(['row', 'cell'], resizer.currentCell);\n                        if (resizer.currentCell) {\n                            resizer.setSnapPositions(resizer.currentCell);\n                        }\n                    }\n                };\n                // Add mouse events\n                addEvent(this.snapRight, 'mousedown', mouseDownSnapX);\n                addEvent(this.snapBottom, 'mousedown', mouseDownSnapY);\n                addEvent(document, 'mousemove', mouseMoveSnap);\n                addEvent(document, 'mouseup', mouseUpSnap);\n                // Touch events\n                // addEvent(snapX, 'touchstart', mouseDownSnapX);\n                // addEvent(snapY, 'touchstart', mouseDownSnapY);\n                // if (!rowContainer.hcEvents.mousemove) {\n                //     addEvent(rowContainer, 'touchmove', mouseMoveSnap);\n                //     addEvent(rowContainer, 'touchend', mouseUpSnap);\n                // }\n                const runReflow = () => {\n                    if (resizer.currentCell) {\n                        resizer.setSnapPositions(resizer.currentCell);\n                    }\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(runReflow);\n                    this.resizeObserver.observe(resizer.editMode.board.container);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', runReflow);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * General method used on resizing.\n             *\n             * @param {global.Event} e\n             * A mouse event.\n             *\n             */\n            onMouseMove(e) {\n                const currentCell = this.currentCell;\n                const cellContainer = currentCell && currentCell.container;\n                const currentDimension = this.currentDimension;\n                if (currentCell &&\n                    cellContainer &&\n                    !((currentCell.row.layout.board.editMode || {}).dragDrop || {})\n                        .isActive) {\n                    const cellOffsets = GUIElement.getOffsets(currentCell);\n                    const { width: parentRowWidth } = GUIElement.getDimFromOffsets(GUIElement.getOffsets(currentCell.row));\n                    // Resize width\n                    if (currentDimension === 'x') {\n                        const newWidth = (Math.min(e.clientX - cellOffsets.left, parentRowWidth) /\n                            parentRowWidth) *\n                            100 +\n                            '%';\n                        currentCell.setSize(newWidth);\n                        this.startX = e.clientX;\n                    }\n                    // Resize height\n                    if (currentDimension === 'y') {\n                        currentCell.setSize(void 0, e.clientY - cellOffsets.top);\n                    }\n                    // Call cellResize dashboard event.\n                    fireEvent(this.editMode.board, 'cellResize', {\n                        cell: currentCell\n                    });\n                    fireEvent(currentCell.row, 'cellChange', {\n                        cell: currentCell,\n                        row: currentCell.row\n                    });\n                    this.setSnapPositions(currentCell);\n                }\n            }\n            /**\n             * Destroy resizer\n             */\n            destroy() {\n                const snaps = ['snapRight', 'snapBottom'];\n                let snap;\n                // Unbind events\n                removeEvent(document, 'mousemove');\n                removeEvent(document, 'mouseup');\n                this.resizeObserver?.unobserve(this.editMode.board.container);\n                for (let i = 0, iEnd = snaps.length; i < iEnd; ++i) {\n                    snap = this[snaps[i]];\n                    // Unbind event\n                    removeEvent(snap, 'mousedown');\n                    // Destroy snap\n                    snap.remove();\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Resizer.JSON}\n             * Class JSON of this Resizer instance.\n             */\n            toJSON() {\n                const options = this.options;\n                return {\n                    $class: 'Dashboards.Action.Resizer',\n                    options: {\n                        enabled: options.enabled,\n                        styles: {\n                            minWidth: options.styles.minWidth,\n                            minHeight: options.styles.minHeight\n                        },\n                        type: options.type,\n                        snap: {\n                            width: options.snap.width,\n                            height: options.snap.height\n                        }\n                    }\n                };\n            }\n        }\n        Resizer.defaultOptions = {\n            enabled: true,\n            styles: {\n                minWidth: 20,\n                minHeight: 50\n            },\n            type: 'xy',\n            snap: {\n                width: 9,\n                height: 17\n            }\n        };\n\n        return Resizer;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditMode.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Layout/CellHTML.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js'], _modules['Dashboards/EditMode/Toolbar/CellEditToolbar.js'], _modules['Dashboards/EditMode/Toolbar/RowEditToolbar.js'], _modules['Dashboards/EditMode/SidebarPopup.js'], _modules['Dashboards/EditMode/EditContextMenu.js'], _modules['Dashboards/Actions/DragDrop.js'], _modules['Dashboards/Actions/Resizer.js'], _modules['Dashboards/EditMode/ConfirmationPopup.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Core/Utilities.js']], function (Cell, CellHTML, EditGlobals, EditRenderer, CellEditToolbar, RowEditToolbar, SidebarPopup, EditContextMenu, DragDrop, Resizer, ConfirmationPopup, GUIElement, Globals, Layout, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, css, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class EditMode {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Edit mode constructor.\n             * @internal\n              *\n             * @param board\n             * Board instance\n             *\n             * @param options\n             * Edit mode options\n             */\n            constructor(board, options) {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * @internal\n                 */\n                this.active = false;\n                /**\n                 * Whether the board is generated with custom HTML.\n                 */\n                this.customHTMLMode = false;\n                /**\n                 * URL from which the icons will be fetched.\n                 */\n                this.iconsURLPrefix = 'https://code.highcharts.com/dashboards/3.0.0/gfx/dashboards-icons/';\n                this.iconsURLPrefix =\n                    (options && options.iconsURLPrefix) || this.iconsURLPrefix;\n                this.options = merge(\n                // Default options.\n                {\n                    confirmationPopup: {\n                        close: {\n                            icon: this.iconsURLPrefix + 'close.svg'\n                        }\n                    },\n                    contextMenu: {\n                        icon: this.iconsURLPrefix + 'menu.svg'\n                    },\n                    dragDrop: {\n                        enabled: true\n                    },\n                    enabled: true,\n                    resize: {\n                        enabled: true\n                    },\n                    settings: {\n                        enabled: true\n                    },\n                    toolbars: {\n                        cell: {\n                            enabled: true\n                        },\n                        row: {\n                            enabled: true\n                        }\n                    },\n                    tools: {\n                        addComponentBtn: {\n                            enabled: true,\n                            icon: this.iconsURLPrefix + 'add.svg'\n                        }\n                    }\n                }, options || {});\n                this.board = board;\n                this.lang = merge({}, EditGlobals.lang, this.options.lang);\n                board.boardWrapper = board.container;\n                if (board.guiEnabled) {\n                    this.initLayout();\n                }\n                this.isInitialized = false;\n                this.isContextDetectionActive = false;\n                this.tools = {};\n                if (board.editModeEnabled) {\n                    this.customHTMLMode = !this.board.layoutsWrapper;\n                    this.contextPointer = {\n                        isVisible: false,\n                        element: createElement('div', {\n                            className: EditGlobals.classNames.contextDetectionPointer\n                        }, {}, board.container)\n                    };\n                    this.createTools();\n                    this.confirmationPopup = new ConfirmationPopup(board.container, this.iconsURLPrefix, this, this.options.confirmationPopup);\n                    // Create edit overlay.\n                    this.editOverlay = createElement('div', {\n                        className: EditGlobals.classNames.editOverlay\n                    }, {}, board.container);\n                    this.isEditOverlayActive = false;\n                    board.fullscreen = new Dashboards.FullScreen(board);\n                    if (this.customHTMLMode) {\n                        board.container.classList.add(Globals.classNames.boardContainer);\n                    }\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Event to fire on click of the context button.\n             * @internal\n             */\n            onContextBtnClick() {\n                const editMode = this;\n                // Toggle context menu visibility.\n                if (editMode.tools.contextMenu) {\n                    if (!editMode.tools.contextMenu.isVisible) {\n                        editMode.tools.contextMenu\n                            .updatePosition(editMode.tools.contextButtonElement);\n                    }\n                    editMode.tools.contextMenu.setVisible(!editMode.tools.contextMenu.isVisible);\n                }\n            }\n            /**\n             * Activate or deactivate edit mode.\n             */\n            toggleEditMode() {\n                const editMode = this;\n                if (editMode.active) {\n                    editMode.deactivate();\n                }\n                else {\n                    editMode.activate();\n                }\n            }\n            /**\n             * Init the instance of edit mode.\n             * @internal\n             */\n            init() {\n                const editMode = this;\n                if (this.options.resize?.enabled && !editMode.customHTMLMode) {\n                    editMode.resizer = new Resizer(editMode, editMode.options.resize);\n                }\n                editMode.dragDrop = new DragDrop(editMode, editMode.options.dragDrop);\n                // Init rowToolbar.\n                if (editMode.options.toolbars?.row?.enabled &&\n                    !editMode.rowToolbar &&\n                    !editMode.customHTMLMode) {\n                    editMode.rowToolbar = new RowEditToolbar(editMode);\n                }\n                // Init cellToolbar.\n                if (editMode.options.toolbars?.cell?.enabled && !editMode.cellToolbar) {\n                    editMode.cellToolbar = new CellEditToolbar(editMode);\n                }\n                // Init Sidebar.\n                if (!editMode.sidebar) {\n                    editMode.sidebar = new SidebarPopup(this.board.container, this.iconsURLPrefix, editMode);\n                }\n                editMode.isInitialized = true;\n            }\n            /**\n             * Init events for edit mode.\n             * @internal\n             */\n            initEvents() {\n                const editMode = this, board = editMode.board;\n                if (this.customHTMLMode) {\n                    const length = board.mountedComponents.length;\n                    for (let i = 0, iEnd = length; i < iEnd; ++i) {\n                        editMode.setCellEvents(board.mountedComponents[i].cell);\n                    }\n                }\n                else {\n                    for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                        editMode.setLayoutEvents(board.layouts[i]);\n                    }\n                }\n                if (editMode.cellToolbar) {\n                    // Stop context detection when mouse on cell toolbar.\n                    addEvent(editMode.cellToolbar.container, 'mouseenter', function () {\n                        editMode.stopContextDetection();\n                    });\n                    addEvent(editMode.cellToolbar.container, 'mouseleave', function () {\n                        editMode.isContextDetectionActive = true;\n                    });\n                }\n                if (editMode.rowToolbar) {\n                    // Stop context detection when mouse on row toolbar.\n                    addEvent(editMode.rowToolbar.container, 'mouseenter', function () {\n                        editMode.stopContextDetection();\n                    });\n                    addEvent(editMode.rowToolbar.container, 'mouseleave', function () {\n                        editMode.isContextDetectionActive = true;\n                    });\n                }\n                const elementForEvents = this.customHTMLMode ?\n                    board.container : board.layoutsWrapper;\n                addEvent(elementForEvents, 'mousemove', editMode.onDetectContext.bind(editMode));\n                addEvent(elementForEvents, 'click', editMode.onContextConfirm.bind(editMode));\n                addEvent(elementForEvents, 'mouseleave', () => {\n                    editMode.hideContextPointer();\n                });\n            }\n            /**\n             * Initialize the container for the layouts.\n             * @internal\n             *\n             */\n            initLayout() {\n                const board = this.board;\n                // Clear the container from any content.\n                board.container.innerHTML = '';\n                // Add container for the board.\n                board.container = createElement('div', {\n                    className: Globals.classNames.boardContainer\n                }, {}, board.boardWrapper);\n                // Create layouts wrapper.\n                board.layoutsWrapper = createElement('div', {\n                    className: Globals.classNames.layoutsWrapper\n                }, {}, board.container);\n                if (board.options.gui) {\n                    this.setLayouts(board.options.gui);\n                }\n                if (board.options.layoutsJSON && !board.layouts.length) {\n                    this.setLayoutsFromJSON(board.options.layoutsJSON);\n                }\n            }\n            /**\n             * Creates a new layouts and adds it to the dashboard based on the options.\n             * @internal\n             *\n             * @param guiOptions\n             * The GUI options for the layout.\n             *\n             */\n            setLayouts(guiOptions) {\n                const board = this.board, layoutsOptions = guiOptions.layouts;\n                for (let i = 0, iEnd = layoutsOptions.length; i < iEnd; ++i) {\n                    board.layouts.push(new Layout(board, merge({}, guiOptions.layoutOptions, layoutsOptions[i])));\n                }\n            }\n            /**\n             * Set the layouts from JSON.\n             * @internal\n             *\n             * @param json\n             * An array of layout JSON objects.\n             *\n             */\n            setLayoutsFromJSON(json) {\n                const board = this.board;\n                let layout;\n                for (let i = 0, iEnd = json.length; i < iEnd; ++i) {\n                    layout = Layout.fromJSON(json[i], board);\n                    if (layout) {\n                        board.layouts.push(layout);\n                    }\n                }\n            }\n            /**\n             * Set events for the layout.\n             * @internal\n             */\n            setLayoutEvents(layout) {\n                const editMode = this;\n                for (let j = 0, jEnd = layout.rows.length; j < jEnd; ++j) {\n                    const row = layout.rows[j];\n                    editMode.setRowEvents(row);\n                    for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                        editMode.setCellEvents(row.cells[k]);\n                    }\n                }\n            }\n            /**\n             * Set events for the row.\n             * @internal\n             */\n            setRowEvents(row) {\n                const editMode = this;\n                // Init dragDrop row events.\n                if (editMode.dragDrop) {\n                    const dragDrop = editMode.dragDrop;\n                    addEvent(row.container, 'mouseenter', function () {\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseRowContext = row;\n                        }\n                    });\n                    addEvent(row.container, 'mousemove', function (e) {\n                        if (dragDrop.isActive && e.target === row.container) {\n                            dragDrop.mouseRowContext = row;\n                        }\n                    });\n                    addEvent(row.container, 'mouseleave', function () {\n                        if (dragDrop.isActive && dragDrop.mouseRowContext === row) {\n                            dragDrop.mouseRowContext = void 0;\n                        }\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseRowContext = void 0;\n                        }\n                    });\n                }\n            }\n            /**\n             * Set events for the cell.\n             * @internal\n             */\n            setCellEvents(cell) {\n                const editMode = this;\n                if (cell instanceof CellHTML) {\n                    addEvent(cell.container, 'mouseenter', function () {\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseCellContext = cell;\n                        }\n                    });\n                }\n                else {\n                    if (cell.nestedLayout) {\n                        editMode.setLayoutEvents(cell.nestedLayout);\n                    }\n                    else if (editMode.cellToolbar && cell.container) {\n                        addEvent(cell.container, 'mouseenter', function () {\n                            if (editMode.isContextDetectionActive) {\n                                editMode.mouseCellContext = cell;\n                            }\n                        });\n                        // Init dragDrop cell events only when using layouts.\n                        if ((editMode.dragDrop || editMode.resizer)) {\n                            const dragDrop = editMode.dragDrop;\n                            addEvent(cell.container, 'mousemove', function (e) {\n                                if (dragDrop &&\n                                    dragDrop.isActive &&\n                                    e.target === cell.container) {\n                                    dragDrop.mouseCellContext = cell;\n                                    dragDrop.mouseRowContext = void 0;\n                                }\n                            });\n                            addEvent(cell.container, 'mouseleave', function () {\n                                if (dragDrop &&\n                                    dragDrop.isActive &&\n                                    dragDrop.mouseCellContext === cell) {\n                                    dragDrop.mouseCellContext = void 0;\n                                }\n                                if (editMode.isContextDetectionActive) {\n                                    editMode.mouseCellContext = void 0;\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * Activate the edit mode.\n             * @internal\n             */\n            activate() {\n                const editMode = this;\n                // Init edit mode.\n                if (!editMode.isInitialized) {\n                    editMode.init();\n                    editMode.initEvents();\n                }\n                // Set edit mode active class to dashboard.\n                editMode.board.container.classList.add(EditGlobals.classNames.editModeEnabled);\n                if (this.addComponentBtn) {\n                    this.addComponentBtn.style.display = 'block';\n                }\n                editMode.active = true;\n                editMode.isContextDetectionActive = true;\n            }\n            /**\n             * Deactivate the edit mode.\n             * @internal\n             */\n            deactivate() {\n                const editMode = this, dashboardCnt = editMode.board.container;\n                dashboardCnt.classList.remove(EditGlobals.classNames.editModeEnabled);\n                // Hide toolbars.\n                editMode.hideToolbars();\n                // Remove highlight from the context row if exists.\n                if (this.editCellContext && this.editCellContext instanceof Cell) {\n                    this.editCellContext.row?.setHighlight();\n                }\n                // TODO all buttons should be deactivated.\n                if (this.addComponentBtn) {\n                    this.addComponentBtn.style.display = 'none';\n                }\n                if (editMode.resizer) {\n                    editMode.resizer.disableResizer();\n                }\n                // Disable responsive width and restore elements to their original\n                // positions and sizes.\n                if (this.board.layoutsWrapper) {\n                    this.board.layoutsWrapper.style.width = '100%';\n                }\n                this.board.reflow();\n                editMode.active = false;\n                editMode.stopContextDetection();\n                this.editCellContext = void 0;\n                this.potentialCellContext = void 0;\n            }\n            /**\n             * Function to check whether the edit mode is activated.\n             * @internal\n             *\n             * @returns\n             * Whether the edit mode is activated.\n             */\n            isActive() {\n                return this.active;\n            }\n            /**\n             * Method for hiding edit toolbars.\n             * @internal\n             *\n             * @param toolbarTypes\n             * The array of toolbar names to hide ('cell', 'row', 'sidebar').\n             */\n            hideToolbars(toolbarTypes) {\n                const editMode = this, toolbarsToHide = toolbarTypes || ['cell', 'row', 'sidebar'];\n                for (let i = 0, iEnd = toolbarsToHide.length; i < iEnd; ++i) {\n                    switch (toolbarsToHide[i]) {\n                        case 'cell': {\n                            if (editMode.cellToolbar &&\n                                editMode.cellToolbar.isVisible) {\n                                editMode.cellToolbar.hide();\n                            }\n                            break;\n                        }\n                        case 'row': {\n                            if (editMode.rowToolbar && editMode.rowToolbar.isVisible) {\n                                editMode.rowToolbar.hide();\n                            }\n                            break;\n                        }\n                        case 'sidebar': {\n                            if (editMode.sidebar && editMode.sidebar.isVisible) {\n                                editMode.sidebar.hide();\n                            }\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Method for hiding edit toolbars.\n             * @internal\n             *\n             * @param toolbarTypes\n             * The array of toolbar names to hide ('cell', 'row', 'sidebar').\n             *\n             * @param currentCell\n             * The cell reference for toolbar.\n             *\n             */\n            showToolbars(toolbarTypes, currentCell) {\n                const editMode = this, toolbarsToShow = toolbarTypes || ['cell', 'row', 'sidebar'];\n                for (let i = 0, iEnd = toolbarsToShow.length; i < iEnd; ++i) {\n                    switch (toolbarsToShow[i]) {\n                        case 'cell': {\n                            if (currentCell && editMode.cellToolbar) {\n                                editMode.cellToolbar.showToolbar(currentCell);\n                            }\n                            break;\n                        }\n                        case 'row': {\n                            if (currentCell && currentCell.row && editMode.rowToolbar) {\n                                editMode.rowToolbar.showToolbar(currentCell.row);\n                            }\n                            break;\n                        }\n                        case 'sidebar': {\n                            if (editMode.sidebar && !editMode.sidebar.isVisible) {\n                                editMode.sidebar.show();\n                            }\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Creates the buttons such as `addComponent` button, context menu button\n             * and its container.\n             * @internal\n             */\n            createTools() {\n                const editMode = this;\n                const { board, options, tools } = editMode;\n                // Create tools container\n                tools.container = document.createElement('div');\n                tools.container.classList.add(EditGlobals.classNames.editTools);\n                if (board.layoutsWrapper) {\n                    // For the generated layout\n                    board.layoutsWrapper.parentNode.insertBefore(tools.container, board.layoutsWrapper);\n                }\n                else {\n                    // For the custom layout\n                    board.container.insertBefore(tools.container, board.container.firstChild);\n                }\n                // Create context menu button\n                if (options.contextMenu && options.contextMenu.enabled) {\n                    tools.contextButtonElement = EditRenderer.renderContextButton(tools.container, editMode);\n                    // Init contextMenu if doesn't exist.\n                    if (!editMode.tools.contextMenu) {\n                        editMode.tools.contextMenu = new EditContextMenu(editMode.board.container, editMode.options.contextMenu || {}, editMode);\n                    }\n                }\n                // Create add component button\n                if (options.tools?.addComponentBtn?.enabled &&\n                    options.toolbars?.cell?.enabled &&\n                    !this.customHTMLMode) {\n                    const addIconURL = options.tools.addComponentBtn.icon;\n                    this.addComponentBtn = EditRenderer.renderButton(tools.container, {\n                        className: EditGlobals.classNames.editToolsBtn,\n                        icon: addIconURL,\n                        text: this.lang.addComponent,\n                        callback: () => {\n                            // Sidebar trigger\n                            if (editMode.sidebar) {\n                                editMode.sidebar.show();\n                                editMode.setEditOverlay();\n                            }\n                        },\n                        style: {\n                            display: 'none'\n                        }\n                    });\n                }\n            }\n            /**\n             * Event fired when detecting context on drag&drop.\n             */\n            onDetectContext() {\n                const editMode = this;\n                if (!editMode.isActive() ||\n                    !editMode.isContextDetectionActive ||\n                    (!editMode.mouseCellContext && !editMode.mouseRowContext) ||\n                    (editMode.dragDrop || {}).isActive) {\n                    return;\n                }\n                let cellContext;\n                let rowContext;\n                if (editMode.mouseCellContext) {\n                    cellContext = editMode.mouseCellContext;\n                }\n                else if (editMode.mouseRowContext) {\n                    rowContext = editMode.mouseRowContext;\n                    cellContext = rowContext.layout.parentCell;\n                }\n                this.potentialCellContext = cellContext;\n                if (cellContext) {\n                    const cellContextOffsets = GUIElement\n                        .getOffsets(cellContext, editMode.board.container);\n                    const { width, height } = GUIElement\n                        .getDimFromOffsets(cellContextOffsets);\n                    editMode.showContextPointer(cellContextOffsets.left, cellContextOffsets.top, width, height);\n                }\n            }\n            /**\n             * Stops the context detection.\n             */\n            stopContextDetection() {\n                this.isContextDetectionActive = false;\n                if (this.dragDrop) {\n                    this.dragDrop.mouseCellContext = void 0;\n                }\n                this.mouseCellContext = void 0;\n                this.hideContextPointer();\n            }\n            /**\n             * Confirms the selected context.\n             */\n            onContextConfirm() {\n                if (this.isContextDetectionActive &&\n                    this.potentialCellContext &&\n                    this.editCellContext !== this.potentialCellContext) {\n                    this.setEditCellContext(this.potentialCellContext, this.editCellContext);\n                }\n            }\n            /**\n             * Sets the edit cell context.\n             * @internal\n             */\n            setEditCellContext(editCellContext, oldEditCellContext) {\n                const editMode = this;\n                const oldContext = oldEditCellContext;\n                if (editCellContext instanceof CellHTML ||\n                    oldContext instanceof CellHTML) {\n                    editMode.editCellContext = editCellContext;\n                    editMode.cellToolbar?.showToolbar(editCellContext);\n                }\n                else {\n                    const oldContextRow = oldContext?.row;\n                    editMode.editCellContext = editCellContext;\n                    editMode.showToolbars(['row', 'cell'], editCellContext);\n                    if (!oldContextRow || oldContextRow !== editCellContext.row) {\n                        if (oldContextRow) {\n                            // Remove highlight from the previous row.\n                            oldContextRow.setHighlight();\n                        }\n                        // Add highlight to the context row.\n                        if (editCellContext.row) {\n                            editCellContext.row.setHighlight();\n                        }\n                    }\n                    if (editMode.resizer) {\n                        editMode.resizer.setSnapPositions(editCellContext);\n                    }\n                }\n            }\n            /**\n             * Method for showing and positioning context pointer.\n             * @internal\n             */\n            showContextPointer(left, top, width, height) {\n                if (!this.contextPointer) {\n                    return;\n                }\n                this.contextPointer.isVisible = true;\n                css(this.contextPointer.element, {\n                    display: 'block',\n                    left: left + 'px',\n                    top: top + 'px',\n                    height: height + 'px',\n                    width: width + 'px'\n                });\n            }\n            /**\n             * Method for hiding context pointer.\n             * @internal\n             */\n            hideContextPointer() {\n                if (this.contextPointer?.isVisible) {\n                    this.contextPointer.isVisible = false;\n                    this.contextPointer.element.style.display = 'none';\n                }\n            }\n            /**\n             * Adds/Removes the edit mode overlay.\n             * @internal\n             *\n             * @param remove\n             * Whether the edit overlay should be removed.\n             */\n            setEditOverlay(remove) {\n                const editMode = this, cnt = editMode.editOverlay, isSet = cnt?.classList.contains(EditGlobals.classNames.editOverlayActive);\n                if (!remove && !isSet) {\n                    cnt?.classList.add(EditGlobals.classNames.editOverlayActive);\n                    editMode.isEditOverlayActive = true;\n                }\n                else if (remove && isSet) {\n                    cnt?.classList.remove(EditGlobals.classNames.editOverlayActive);\n                    editMode.isEditOverlayActive = false;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return EditMode;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Fullscreen.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js']], function (U, Globals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent } = U;\n        class Fullscreen {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(DashboardClass) {\n                this.isOpen = false;\n                this.board = DashboardClass;\n                // Add class to allow scroll element\n                this.board.boardWrapper.classList.add(Globals.classNamePrefix + '-fullscreen');\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Toggles displaying the board in fullscreen mode.\n             */\n            toggle() {\n                const fullscreen = this, isOpen = this.isOpen;\n                fullscreen[isOpen ? 'close' : 'open']();\n            }\n            /**\n             * Display board in fullscreen.\n             */\n            open() {\n                if (this.isOpen) {\n                    return;\n                }\n                const fullscreen = this, board = fullscreen.board;\n                // Handle exitFullscreen() method when user clicks 'Escape' button.\n                const unbindChange = addEvent(board.boardWrapper.ownerDocument, // Dashboard's document\n                'fullscreenchange', function () {\n                    if (fullscreen.isOpen) {\n                        fullscreen.isOpen = false;\n                        fullscreen.close();\n                    }\n                    else {\n                        fullscreen.isOpen = true;\n                        fullscreen.setButtonText();\n                    }\n                });\n                fullscreen.unbindFullscreenEvent = () => {\n                    unbindChange();\n                };\n                const promise = board.boardWrapper.requestFullscreen();\n                // eslint-disable-next-line highcharts/quote-members\n                promise.catch(() => {\n                    throw new Error('Full screen is not supported.');\n                });\n            }\n            /**\n             * Stops displaying the dashboard in fullscreen mode.\n             */\n            close() {\n                const fullscreen = this, board = fullscreen.board;\n                // Don't fire exitFullscreen() when user exited using 'Escape' button.\n                if (fullscreen.isOpen &&\n                    board.boardWrapper.ownerDocument instanceof Document) {\n                    void board.boardWrapper.ownerDocument.exitFullscreen();\n                }\n                // Unbind event as it's necessary only before exiting from fullscreen.\n                if (fullscreen.unbindFullscreenEvent) {\n                    fullscreen.unbindFullscreenEvent =\n                        fullscreen.unbindFullscreenEvent();\n                }\n                fullscreen.isOpen = false;\n                this.setButtonText();\n            }\n            /**\n             * Set the correct text depending of the fullscreen is on or of.\n             */\n            setButtonText() {\n                const editMode = this.board.editMode, contextMenu = editMode && editMode.tools.contextMenu, button = contextMenu && contextMenu.items.viewFullscreen;\n                if (button && button.innerElement) {\n                    const lang = editMode.lang;\n                    button.innerElement.innerHTML =\n                        (this.isOpen ? lang.exitFullscreen : lang.viewFullscreen) || '';\n                }\n            }\n        }\n\n        return Fullscreen;\n    });\n    _registerModule(_modules, 'masters/modules/layout.src.js', [_modules['Dashboards/Globals.js'], _modules['Dashboards/EditMode/EditMode.js'], _modules['Dashboards/EditMode/Fullscreen.js']], function (Globals, EditMode, Fullscreen) {\n\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        // Fill registries\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.EditMode = EditMode;\n        G.FullScreen = Fullscreen;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Dashboards","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","EditGlobals","U","merge","createElement","defined","renderContextButton","parentNode","editMode","contextButton","contextMenuOptions","options","contextMenu","className","classNames","contextMenuBtn","onclick","event","stopPropagation","onContextBtnClick","icon","src","text","contextMenuBtnText","textContent","setAttribute","lang","accessibility","button","renderCollapseHeader","parentElement","headerBtn","name","showToggle","onchange","isEnabled","isNested","isStandalone","accordion","collapsableContentHeader","header","accordionHeader","accordionHeaderBtn","renderToggle","enabledOnOffLabels","id","value","headerIcon","accordionHeaderIcon","collapsedElement","content","accordionContent","standaloneElement","hiddenElement","addEventListener","classList","toggle","outerElement","renderSelect","renderText","title","isLabel","iconsURLPrefix","customSelect","dropdown","btn","dropdownButton","btnContent","dropdownButtonContent","iconURL","find","selectOptions","item","placeholder","dropdownPointer","dropdownIcon","dropdownContent","i","iEnd","length","renderSelectElement","option","callback","selectOption","selectOptionBtn","customSelectButton","add","langKey","toggleContainer","type","role","ariaChecked","ariaLabel","off","toggleLabels","toggleWrapper","input","renderCheckbox","callbackFn","e","checked","slider","toggleSlider","preventDefault","on","textElem","labelFor","htmlFor","labelText","renderIcon","iconElem","style","mousedown","click","onmousedown","arguments","renderInput","toString","replace","target","renderTextarea","textarea","renderButton","getRendererFunction","select","collapse","checkbox","EditRenderer","MenuItem","constructor","menu","isActive","defaultOptions","container","setContainer","innerElement","setInnerElement","menuItem","itemsClassName","display","getValue","events","bind","update","activate","deactivate","viewFullscreen","fullScreen","board","fullscreen","MenuItemBindings","Menu","parent","isVisible","activeItems","items","initItems","itemsSchemas","itemSchema","itemConfig","optionsItems","push","setActiveItems","indexOf","j","jEnd","deactivateActiveItems","updateActiveItems","destroy","remove","css","iconURLPrefix","outline","outlineClassName","hide","setPosition","refreshOutline","x","y","guiElement","offset","guiElemCnt","toolbar","left","top","width","offsetWidth","height","offsetHeight","hideOutline","Cell","EditToolbar","GUIElement","fireEvent","objectEach","CellEditToolbar","getItemsConfig","dragDrop","enabled","cellEditToolbar","cell","onDragStart","settings","setEditOverlay","onCellOptions","menuDestroy","popup","confirmationPopup","show","confirmButton","onCellDestroy","context","cancelButton","closePopup","confirmDestroyCell","toolbars","customHTMLMode","filterOptionsAvailableInCustomHTMLMode","showToolbar","cellCnt","cellToolbar","cellOffsets","getOffsets","right","toolbarItems","sidebar","highlightCell","row","cellId","resetEditedCell","hideToolbars","cells","editedCell","filter","setHighlight","cellEditHighlight","dashboardCellEditHighlightActive","editToolbar","editToolbarCellOutline","editToolbarCell","editToolbarItem","RowEditToolbar","getMenuItemsConfig","rowEditToolbar","onRowDestroy","confirmDestroyRow","offsetX","rowCnt","rowToolbar","rowOffsets","rowWidth","clientWidth","clientHeight","onRowOptions","rowId","resetEditedRow","editedRow","editToolbarRowOutline","editToolbarRow","AST","addEvent","parentDiv","iconsURL","createPopupContainer","closeButton","addCloseButton","match","forEach","eventName","closeButtonEvents","document","code","showPopup","toolbarClass","popupDiv","popupCloseButton","innerHTML","emptyHTML","removeAttribute","appendChild","BaseForm","close","cancelCallback","contentOptions","renderContent","contentContainer","popupContentContainer","popupContainer","marginTop","offsetTop","getBoundingClientRect","Math","abs","buttonContainer","popupButtonContainer","popupCancelBtn","popupConfirmBtn","call","ConfirmationPopup","error","closeSidebar","changedOptions","chartOptionsJSON","oldOptionsBuffer","waitingForConfirmation","component","sidebarMainContainer","editableOptions","getOptions","accordionContainer","accordionMenu","end","renderAccordion","accordionMenuButtonsContainer","confirmChanges","cancelChanges","updateOptions","propertyPath","currentChartOptionsLevel","currentOldChartOptionsBufferLevel","currentDataGridOptionsLevel","currentOldDataGridOptionsBufferLevel","pathLength","currentLevel","parsedValue","JSON","parse","key","realDataGridOptions","dataGrid","dataGridOptions","realChartOptions","chart","chartOptions","lastKey","renderNested","renderFunction","getEditableOptionValue","nestedOptions","accordionOptions","collapsedHeader","Object","keys","showCancelConfirmationPopup","oldOptions","discardChanges","confirmDiscardChanges","setTimeout","CellHTML","AccordionMenu","Bindings","Layout","SidebarPopup","components","componentsList","getComponentsList","detectRightSidebar","layoutWrapper","layoutsWrapper","removeClassNames","editSidebarShow","editSidebarRightShow","addClassNames","isRightSidebar","editSidebarRight","resizer","disableResizer","editCellContext","stopContextDetection","generateContent","renderHeader","addComponent","sidebarWrapper","editSidebarWrapper","renderAddComponentsList","getType","mountedComponent","gridElement","gridWrapper","editGridItems","onMouseMove","rect","clientX","clientY","bottom","removeEventListener","onMouseUp","dropContext","layouts","layout","getElementId","copyId","parentContainerId","rows","newCell","onDrop","setEditCellContext","onDropNewComponent","componentOptions","addCell","onCellDragEnd","componentPromise","isEditOverlayActive","showToolbars","isContextDetectionActive","headerWrapper","editSidebarHeader","editSidebarTitle","componentTypes","componentList","componentName","prototype","getOptionsOnDrop","addRow","contains","includes","editSidebar","newLayoutId","html","EditContextMenu","insertBefore","initEvents","tools","contextButtonElement","tagName","setVisible","visible","updatePosition","ctxButton","offsetLeft","contextMenuItem","toggleEditMode","ContextDetection","isGUIElementOnParentEdge","mouseContext","side","visibleElements","getVisibleRows","getVisibleCells","lastElementIndex","getContextLevel","sideOffset","overlappedLevels","getOverlappingLevels","divOffset","lastOverlappedLevel","level","floor","getContext","mouseCellContext","mouseCellContextOffsets","getDimFromOffsets","leftSideX","topSideY","getParentCell","Globals","DragDrop","mockElement","dragMock","dropPointer","align","element","showDropPointer","hideDropPointer","setMockElementPosition","mouseEvent","dashBoundingRect","onDrag","onDragEnd","dragEndCallback","guiElementType","draggedCell","cursor","onCellDrag","onRowDrag","onRowDragEnd","setSnapPositions","contextDetails","dropPointerSize","rowDropOffset","updateDropPointer","dropContextRowOffsets","draggedRow","unmountRow","mountRow","getRowIndex","cellDropOffset","onCellDragCellCtx","mouseRowContext","onCellDragRowCtx","dropContextOffsets","rowLevelInfo","getRowLevelInfo","pointerHeight","rowLevel","index","rowLevels","dashOffsets","levelHeight","pointerWidth","contextCell","unmountCell","newRow","mountCell","dropContextCell","dropContextCellIndex","getCellIndex","nestedLayout","removeEvent","Resizer","fromJSON","json","resize","currentCell","isX","isY","startX","tempSiblingsWidth","addSnaps","snapWidth","snap","snapHeight","dashboardContainer","snapRight","resizeSnap","resizeSnapX","snapBottom","resizeSnapY","addResizeEvents","currentDimension","setTempWidthSiblings","cellContainer","rowLevelCells","flex","revertSiblingsAutoWidth","cellResize","mouseDownSnapX","mouseDownSnapY","mouseMoveSnap","mouseUpSnap","runReflow","ResizeObserver","resizeObserver","observe","unbind","window","parentRowWidth","newWidth","min","setSize","snaps","unobserve","toJSON","$class","styles","minWidth","minHeight","active","addComponentBtn","boardWrapper","guiEnabled","initLayout","isInitialized","editModeEnabled","contextPointer","contextDetectionPointer","createTools","editOverlay","FullScreen","boardContainer","init","mountedComponents","setCellEvents","setLayoutEvents","elementForEvents","onDetectContext","onContextConfirm","hideContextPointer","gui","setLayouts","layoutsJSON","setLayoutsFromJSON","guiOptions","layoutsOptions","layoutOptions","setRowEvents","k","kEnd","dashboardCnt","reflow","potentialCellContext","toolbarTypes","toolbarsToHide","toolbarsToShow","editTools","firstChild","addIconURL","editToolsBtn","cellContext","rowContext","parentCell","cellContextOffsets","showContextPointer","oldEditCellContext","oldContext","oldContextRow","cnt","isSet","editOverlayActive","DashboardClass","isOpen","classNamePrefix","open","unbindChange","ownerDocument","setButtonText","unbindFullscreenEvent","promise","requestFullscreen","catch","Error","Document","exitFullscreen","EditMode","Fullscreen","G"],"mappings":"CAAA;;;;;;CAMC,EACA,SAAUA,CAAO,EACV,AAAkB,UAAlB,OAAOC,QAAuBA,OAAOC,OAAO,EAC5CF,EAAQ,OAAU,CAAGA,EACrBC,OAAOC,OAAO,CAAGF,GACV,AAAkB,YAAlB,OAAOG,QAAyBA,OAAOC,GAAG,CACjDD,OAAO,4BAA6B,CAAC,aAAa,CAAE,SAAUE,CAAU,EAGpE,OAFAL,EAAQK,GACRL,EAAQK,UAAU,CAAGA,EACdL,CACX,GAEAA,EAAQ,AAAsB,aAAtB,OAAOK,WAA6BA,WAAaC,KAAAA,EAEjE,EAAE,SAAUD,CAAU,EAClB,aACA,IAAIE,EAAWF,EAAaA,EAAWE,QAAQ,CAAG,CAAC,EACnD,SAASC,EAAgBC,CAAG,CAAEC,CAAI,CAAEC,CAAI,CAAEC,CAAE,EACnCH,EAAII,cAAc,CAACH,KACpBD,CAAG,CAACC,EAAK,CAAGE,EAAGE,KAAK,CAAC,KAAMH,GAEA,YAAvB,OAAOI,aACPV,EAAWW,GAAG,CAACC,aAAa,CAAC,IAAIF,YAC7B,yBACA,CAAEG,OAAQ,CAAER,KAAMA,EAAMT,OAAQQ,CAAG,CAACC,EAAK,AAAC,CAAE,IAI5D,CACAF,EAAgBD,EAAU,sCAAuC,CAACA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUY,CAAW,CAAEC,CAAC,EAgBtK,GAAM,CAAEC,MAAAA,CAAK,CAAEC,cAAAA,CAAa,CAAEC,QAAAA,CAAO,CAAE,CAAGH,EAmB1C,SAASI,EAAoBC,CAAU,CAAEC,CAAQ,MAEzCC,EADJ,IAAMC,EAAqBF,EAASG,OAAO,CAACC,WAAW,CA2BvD,OAzBIF,IACAD,EAAgBL,EAAc,SAAU,CACpCS,UAAWZ,EAAYa,UAAU,CAACC,cAAc,CAChDC,QAAS,SAAUC,CAAK,EACpBA,EAAMC,eAAe,GACrBV,EAASW,iBAAiB,EAC9B,CACJ,EAAG,CAAC,EAAGZ,GAEHG,EAAmBU,IAAI,EACvBhB,EAAc,MAAO,CACjBiB,IAAKX,EAAmBU,IAAI,CAC5BP,UAAWZ,EAAYa,UAAU,CAACM,IAAI,AAC1C,EAAG,CAAC,EAAGX,GAGPC,EAAmBY,IAAI,EACvBlB,EAAc,OAAQ,CAClBS,UAAWZ,EAAYa,UAAU,CAACS,kBAAkB,CACpDC,YAAad,EAAmBY,IAAI,AACxC,EAAG,CAAC,EAAGb,GAEXA,EAAcgB,YAAY,CAAC,aAAcjB,EAASkB,IAAI,CAACC,aAAa,CAACf,WAAW,CAACgB,MAAM,EACvFnB,EAAcgB,YAAY,CAAC,gBAAiB,UAEzChB,CACX,CAaA,SAASoB,EAAqBC,CAAa,CAAEnB,CAAO,MAQ5CoB,EAPJ,GAAM,CAAEC,KAAAA,CAAI,CAAEC,WAAAA,CAAU,CAAEC,SAAAA,CAAQ,CAAEC,UAAAA,CAAS,CAAEC,SAAAA,CAAQ,CAAEC,aAAAA,CAAY,CAAEX,KAAAA,CAAI,CAAE,CAAGf,EAC1E2B,EAAYlC,EAAc,MAAO,CACnCS,UAAWZ,EAAYa,UAAU,CAACsB,EAAW,yBAA2B,qBAAqB,CAAG,IAAMnC,EAAYa,UAAU,CAACyB,wBAAwB,AACzJ,EAAG,CAAC,EAAGT,GACDU,EAASpC,EAAc,MAAO,CAChCS,UAAWZ,EAAYa,UAAU,CAAC2B,eAAe,AACrD,EAAG,CAAC,EAAGH,GAEFD,GACDN,CAAAA,EAAY3B,EAAc,SAAU,CAAES,UAAWZ,EAAYa,UAAU,CAAC4B,kBAAkB,AAAC,EAAG,CAAC,EAAGF,EAAM,EAE5GpC,EAAc,OAAQ,CAClBoB,YAAaE,CAAI,CAACM,EAAK,EAAIA,CAC/B,EAAG,CAAC,EAAGD,GACHE,GACAU,EAAaH,EAAQ,CACjBI,mBAAoB,CAAA,EACpBC,GAAIb,EACJA,KAAM,GACNE,SAAUA,EACVY,MAAOX,GAAa,CAAA,EACpBT,KAAAA,CACJ,GAEJ,IAAMqB,EAAa3C,EAAc,OAAQ,CACrCS,UAAWZ,EAAYa,UAAU,CAACkC,mBAAmB,CAAG,IACpD/C,EAAYa,UAAU,CAACmC,gBAAgB,AAC/C,EAAG,CAAC,EAAGlB,GACDmB,EAAU9C,EAAc,MAAO,CACjCS,UAAWZ,EAAYa,UAAU,CAACqC,gBAAgB,CAAG,IAChDd,CAAAA,EACGpC,EAAYa,UAAU,CAACsC,iBAAiB,CACxCnD,EAAYa,UAAU,CAACuC,aAAa,AAAD,CAC/C,EAAG,CAAC,EAAGf,GAKP,OAJAP,GAAWuB,iBAAiB,QAAS,WACjCJ,EAAQK,SAAS,CAACC,MAAM,CAACvD,EAAYa,UAAU,CAACuC,aAAa,EAC7DN,EAAWQ,SAAS,CAACC,MAAM,CAACvD,EAAYa,UAAU,CAACmC,gBAAgB,CACvE,GACO,CAAEQ,aAAcnB,EAAWY,QAASA,CAAQ,CACvD,CAaA,SAASQ,EAAa5B,CAAa,CAAEnB,CAAO,MAoBpCoC,EAnBJ,GAAI,CAACjB,EACD,MAEAnB,CAAAA,EAAQqB,IAAI,EACZ2B,EAAW7B,EAAe,CAAE8B,MAAOjD,EAAQqB,IAAI,CAAE6B,QAAS,CAAA,CAAK,GAEnE,IAAMC,EAAiBnD,EAAQmD,cAAc,EAAI,GAC3CC,EAAe3D,EAAc,MAAO,CACtCS,UAAWZ,EAAYa,UAAU,CAACkD,QAAQ,CACtC,IACA/D,EAAYa,UAAU,CAACyB,wBAAwB,AACvD,EAAG,CAAC,EAAGT,GACDmC,EAAM7D,EAAc,SAAU,CAChCS,UAAWZ,EAAYa,UAAU,CAACoD,cAAc,AACpD,EAAG,CAAC,EAAGH,GACDI,EAAa/D,EAAc,MAAO,CACpCS,UAAWZ,EAAYa,UAAU,CAACsD,qBAAqB,AAC3D,EAAG,CAAC,EAAGH,GACDI,EAAU,AAACnE,CAAAA,EAAEoE,IAAI,CAAC3D,EAAQ4D,aAAa,CAAE,AAACC,GAASA,EAAKxC,IAAI,GAAKrB,EAAQmC,KAAK,GAAK,CAAC,CAAA,EAAGuB,OAAO,CAEhGA,GACAtB,CAAAA,EAAa3C,EAAc,MAAO,CAC9BiB,IAAKyC,EAAiBO,EACtBxD,UAAWZ,EAAYa,UAAU,CAACM,IAAI,AAC1C,EAAG,CAAC,EAAG+C,EAAU,EAErB,IAAMM,EAAcrE,EAAc,OAAQ,CACtCoB,YAAab,EAAQmC,KAAK,CAC1BD,GAAIlC,EAAQkC,EAAE,EAAI,EACtB,EAAG,CAAC,EAAGsB,GACDO,EAAkBtE,EAAc,MAAO,CACzCS,UAAWZ,EAAYa,UAAU,CAAC6D,YAAY,CAC1C,IACA1E,EAAYa,UAAU,CAACmC,gBAAgB,CAC3C5B,IAAKyC,EAAiB,sBAC1B,EAAG,CAAC,EAAGG,GACDD,EAAW5D,EAAc,KAAM,CACjCS,UAAWZ,EAAYa,UAAU,CAAC8D,eAAe,CAC7C,IACA3E,EAAYa,UAAU,CAACuC,aAAa,AAC5C,EAAG,CAAC,EAAGU,GACPE,EAAIX,gBAAgB,CAAC,QAAS,WAC1BU,EAAST,SAAS,CAACC,MAAM,CAACvD,EAAYa,UAAU,CAACuC,aAAa,EAC9DqB,EAAgBnB,SAAS,CAACC,MAAM,CAACvD,EAAYa,UAAU,CAACmC,gBAAgB,CAC5E,GACA,IAAK,IAAI4B,EAAI,EAAGC,EAAOnE,EAAQ4D,aAAa,CAACQ,MAAM,CAAEF,EAAIC,EAAM,EAAED,EAC7DG,AAOR,CAAA,SAA6BC,CAAM,CAAEjB,CAAQ,CAAES,CAAW,CAAE5B,CAAE,CAAE6B,CAAe,CAAE3B,CAAU,CAAEmC,CAAQ,EACjG,IAAMb,EAAUY,EAAOnB,cAAc,CAAGmB,EAAOZ,OAAO,CAChDc,EAAe/E,EAAc,KAAM,CAAC,EAAG,CAAC,EAAG4D,GAC3CoB,EAAkBhF,EAAc,SAAU,CAAES,UAAWZ,EAAYa,UAAU,CAACuE,kBAAkB,AAAC,EAAG,CAAC,EAAGF,EAC1GF,CAAAA,EAAOZ,OAAO,EACdjE,EAAc,MAAO,CACjBiB,IAAKgD,CACT,EAAG,CAAC,EAAGe,GAEXhF,EAAc,OAAQ,CAAEoB,YAAayD,EAAOjD,IAAI,EAAI,EAAG,EAAG,CAAC,EAAGoD,GAC9DA,EAAgB9B,gBAAgB,CAAC,QAAS,WAOtC,GANAU,EAAST,SAAS,CAAC+B,GAAG,CAACrF,EAAYa,UAAU,CAACuC,aAAa,EAC3DqB,EAAgBnB,SAAS,CAACC,MAAM,CAACvD,EAAYa,UAAU,CAACmC,gBAAgB,EACxEwB,EAAYjD,WAAW,CAAGyD,EAAOjD,IAAI,EAAI,GACrCe,GAAckC,EAAOZ,OAAO,EAC5BtB,CAAAA,EAAW1B,GAAG,CAAGgD,CAAM,EAEvBa,EACA,OAAOA,EAASD,EAAOjD,IAAI,CAEnC,EACJ,CAAA,EA5B4B7B,EAAMQ,EAAQ4D,aAAa,CAACM,EAAE,EAAI,CAAC,EAAG,CAAEf,eAAAA,CAAe,GAAIE,EAAUS,EAAa9D,EAAQkC,EAAE,CAAE6B,EAAiB3B,EAAYpC,EAAQuB,QAAQ,EAEnK,OAAO6B,CACX,CAsCA,SAASpB,EAAab,CAAa,CAAEnB,CAAO,EACxC,GAAI,CAACmB,EACD,OAEJ,IAAMJ,EAAOf,EAAQe,IAAI,CAAEoB,EAAQnC,EAAQmC,KAAK,CAAEc,EAAQjD,EAAQiD,KAAK,EAAIjD,EAAQqB,IAAI,CAAEuD,EAAU5E,EAAQ4E,OAAO,CAC5GC,EAAkBpF,EAAc,SAAU,CAC5CS,UAAWZ,EAAYa,UAAU,CAAC0E,eAAe,CACjDC,KAAM,SACNC,KAAM,SACNC,YAAa,CAAA,EACbC,UAAWL,EAAU7D,EAAKC,aAAa,CAAC4D,EAAQ,CAAC5E,EAAQqB,IAAI,CAAC,CAAG,EACrE,EAAG,CAAC,EAAGF,GACH8B,GACAD,EAAW6B,EAAiB,CAAE5B,MAAAA,CAAM,GAEpCjD,EAAQiC,kBAAkB,EAC1Be,EAAW6B,EAAiB,CACxB5B,MAAOlC,EAAKmE,GAAG,CACfhF,UAAWZ,EAAYa,UAAU,CAACgF,YAAY,AAClD,GAEJ,IAAMtC,EAASpD,EAAc,QAAS,CAClCS,UAAWZ,EAAYa,UAAU,CAACiF,aAAa,CAC3C,IAAOpF,CAAAA,EAAQE,SAAS,EAAI,EAAC,CACrC,EAAG,CAAC,EAAG2E,GACDQ,EAAQC,EAAezC,EAAQV,GAAQoD,EAAavF,EAAQuB,QAAQ,AAC1EgE,CAAAA,GAAcV,EAAgBlC,gBAAgB,CAAC,QAAS,AAAC6C,IACrDD,EAAW,CAACF,EAAMI,OAAO,EACzBJ,EAAMI,OAAO,CAAG,CAACJ,EAAMI,OAAO,CAC9BZ,EAAgB/D,YAAY,CAAC,eAAgBuE,EAAMI,OAAO,EAC1DD,EAAEjF,eAAe,EACrB,GACA,IAAMmF,EAASjG,EAAc,OAAQ,CACjCS,UAAWZ,EAAYa,UAAU,CAACwF,YAAY,AAClD,EAAG,CAAC,EAAG9C,GAUP,OATA0C,GAAcG,EAAO/C,gBAAgB,CAAC,QAAS,AAAC6C,IAC5CA,EAAEI,cAAc,EACpB,GACI5F,EAAQiC,kBAAkB,EAC1Be,EAAW6B,EAAiB,CACxB5B,MAAOlC,EAAK8E,EAAE,CACd3F,UAAWZ,EAAYa,UAAU,CAACgF,YAAY,AAClD,GAEGN,CACX,CAeA,SAAS7B,EAAW7B,CAAa,CAAEnB,CAAO,MAClC8F,EACJ,GAAM,CAAE7C,MAAOtC,CAAI,CAAET,UAAAA,CAAS,CAAEgD,QAAAA,CAAO,CAAE,CAAGlD,EAC5C,GAAImB,EAAe,CACf,IAAM4E,EAAW7C,EAAU,CAAE8C,QAASrF,CAAK,EAAI,CAAC,EAChDmF,EAAWrG,EAAcyD,EAAU,QAAU,MAAO,CAChDhD,UAAWZ,EAAYa,UAAU,CAAC8F,SAAS,CAAG,IAAO/F,CAAAA,GAAa,EAAC,EACnEW,YAAaF,EACb,GAAGoF,CAAQ,AACf,EAAG,CAAC,EAAG5E,EACX,CACA,OAAO2E,CACX,CAgBA,SAASI,EAAW/E,CAAa,CAAEnB,CAAO,EACtC,GAAM,CAAES,KAAAA,CAAI,CAAE8D,SAAAA,CAAQ,CAAE,CAAGvE,EAC3B,GAAI,CAACmB,EACD,OAEJ,IAAMgF,EAAW1G,EAAc,MAAO,CAClCY,QAASkE,EACTrE,UAAWF,EAAQE,SAAS,EAAI,EACpC,EAAG,CAAC,EAAGiB,EACPgF,CAAAA,EAASC,KAAK,CAAC,mBAAmB,CAAG,OAAS3F,EAAO,IACrD,IAAM4F,EAAYrG,EAAQqG,SAAS,CAC7BC,EAAQtG,EAAQsG,KAAK,CAW3B,OAVID,GACAF,CAAAA,EAASI,WAAW,CAAG,WACnBF,EAAUpH,KAAK,CAAC,IAAI,CAAEuH,UAC1B,CAAA,EAEAF,GACAH,EAASxD,gBAAgB,CAAC,QAAS,WAC/B2D,EAAMrH,KAAK,CAAC,IAAI,CAAEuH,UACtB,GAEGL,CACX,CAaA,SAASM,EAAYtF,CAAa,CAAEnB,CAAO,EACvC,GAAI,CAACmB,EACD,MAEAnB,CAAAA,EAAQqB,IAAI,EACZ2B,EAAW7B,EAAe,CAAE8B,MAAOjD,EAAQqB,IAAI,CAAE6B,QAAS,CAAA,CAAK,GAEnE,IAAMmC,EAAQ5F,EAAc,QAAS,CACjCqF,KAAM,OACNzE,QAASL,EAAQuE,QAAQ,CACzBrC,GAAIlC,EAAQkC,EAAE,EAAI,GAClBb,KAAMrB,EAAQqB,IAAI,EAAI,GACtBc,MAAQ,AAACzC,EAAQM,EAAQmC,KAAK,GAC1BnC,EAAQmC,KAAK,CAACuE,QAAQ,GAAGC,OAAO,CAAC,MAAO,KAAQ,EACxD,EAAG,CAAC,EAAGxF,GACDI,EAAWvB,EAAQuB,QAAQ,CAMjC,OALIA,GACA8D,EAAM1C,gBAAgB,CAAC,SAAU,SAAU6C,CAAC,EACxCjE,EAASiE,EAAEoB,MAAM,CAACzE,KAAK,CAC3B,GAEGkD,CACX,CAaA,SAASwB,EAAe1F,CAAa,CAAEnB,CAAO,EAC1C,GAAI,CAACmB,EACD,MAEAnB,CAAAA,EAAQqB,IAAI,EACZ2B,EAAW7B,EAAe,CAAE8B,MAAOjD,EAAQqB,IAAI,CAAE6B,QAAS,CAAA,CAAK,GAEnE,IAAM4D,EAAWrH,EAAc,WAAY,CACvCyC,GAAIlC,EAAQkC,EAAE,CACdb,KAAMrB,EAAQqB,IAAI,CAClBc,MAAOnC,EAAQmC,KAAK,EAAI,EAC5B,EAAG,CAAC,EAAGhB,GACDI,EAAWvB,EAAQuB,QAAQ,CAMjC,OALIA,GACAuF,EAASnE,gBAAgB,CAAC,SAAU,SAAU6C,CAAC,EAC3CjE,EAASiE,EAAEoB,MAAM,CAACzE,KAAK,CAC3B,GAEG2E,CACX,CAaA,SAASxB,EAAenE,CAAa,CAAEsE,CAAO,EAC1C,IAAIJ,EAOJ,OANIlE,GACAkE,CAAAA,EAAQ5F,EAAc,QAAS,CAC3BqF,KAAM,WACNW,QAAS,CAAC,CAACA,CACf,EAAG,CAAC,EAAGtE,EAAa,EAEjBkE,CACX,CAaA,SAAS0B,EAAa5F,CAAa,CAAEnB,CAAO,EACxC,GAAI,CAACmB,EACD,OAEJ,IAAMF,EAASxB,EAAc,SAAU,CACnCS,UAAYZ,EAAYa,UAAU,CAACc,MAAM,CAAG,IACvCjB,CAAAA,EAAQE,SAAS,EAAI,EAAC,EAC3BG,QAASL,EAAQuE,QAAQ,CACzB1D,YAAab,EAAQW,IAAI,AAC7B,EAAGX,EAAQoG,KAAK,EAAI,CAAC,EAAGjF,GAKxB,OAJInB,EAAQS,IAAI,EACZQ,CAAAA,EAAOmF,KAAK,CAAC,mBAAmB,CAC5B,OAASpG,EAAQS,IAAI,CAAG,GAAE,EAE3BQ,CACX,CAsCA,MAdqB,CACjB8B,aAAAA,EACAf,aAAAA,EACAgB,WAAAA,EACA9B,qBAAAA,EACAgF,WAAAA,EACAvG,oBAAAA,EACA8G,YAAAA,EACAI,eAAAA,EACAvB,eAAAA,EACAyB,aAAAA,EACAC,oBAzBJ,SAA6BlC,CAAI,EAC7B,MAAO,CAAA,CACHmC,OAAQlE,EACRF,OAAQb,EACRrB,KAAMqC,EACNkE,SAAUhG,EACVT,KAAMyF,EACNpG,cAAeH,EACf0F,MAAOoB,EACPK,SAAUD,EACVM,SAAU7B,EACVrE,OAAQ8F,CACZ,CAAA,CAAC,CAACjC,EAAK,AACX,CAaA,CAGJ,GACAnG,EAAgBD,EAAU,uCAAwC,CAACA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,sCAAsC,CAAC,CAAE,SAAUY,CAAW,CAAEC,CAAC,CAAE6H,CAAY,EAgBtO,GAAM,CAAE3H,cAAAA,CAAa,CAAED,MAAAA,CAAK,CAAE,CAAGD,CACjC,OAAM8H,EAMFC,YAAYC,CAAI,CAAEvH,CAAO,CAAE,CACvB,IAAI,CAACuH,IAAI,CAAGA,EACZ,IAAI,CAACC,QAAQ,CAAG,CAAA,EAChB,IAAI,CAACxH,OAAO,CAAGR,EAAM6H,EAASI,cAAc,CAAEzH,GAC9C,IAAI,CAAC0H,SAAS,CAAG,IAAI,CAACC,YAAY,GAClC,IAAI,CAACC,YAAY,CAAG,IAAI,CAACC,eAAe,EAC5C,CAMAF,cAAe,CACX,IAAmB3H,EAAU6D,AAAhB,IAAI,CAAiB7D,OAAO,CACrCE,EAAYZ,EAAYa,UAAU,CAAC2H,QAAQ,CAO/C,OANIjE,AAFS,IAAI,CAER0D,IAAI,CAACvH,OAAO,CAAC+H,cAAc,EAChC7H,CAAAA,GAAa,IAAM2D,AAHV,IAAI,CAGW0D,IAAI,CAACvH,OAAO,CAAC+H,cAAc,AAAD,EAElD/H,EAAQE,SAAS,EACjBA,CAAAA,GAAa,IAAMF,EAAQE,SAAS,AAAD,EAEhCT,EAAc,MAAO,CAAES,UAAWA,GAAa,EAAG,EAAGV,EAAM,IAAI,CAACQ,OAAO,CAACoG,KAAK,EAAI,CAAC,EAEzF,IAAI,CAACoB,QAAQ,CAAG,CAAEQ,QAAS,OAAQ,EAAI,CAAC,GAAI,IAAI,CAACT,IAAI,CAACG,SAAS,CACnE,CACAG,iBAAkB,CACd,IAAmB7H,EAAU6D,AAAhB,IAAI,CAAiB7D,OAAO,CAAE0H,EAAY7D,AAA1C,IAAI,CAA2C6D,SAAS,CAAE9C,EAAU5E,EAAQ4E,OAAO,OAChG,AAAI5E,AAAiB,WAAjBA,EAAQ8E,IAAI,CACLsC,EAAapF,YAAY,CAAC0F,EAAW,CACxCxF,GAAIlC,EAAQkC,EAAE,CACdb,KAAMrB,EAAQkC,EAAE,CAChBe,MAAO2B,EACH,IAAI,CAAC2C,IAAI,CAAC1H,QAAQ,CAACkB,IAAI,CAAC6D,EAAQ,CAChC5E,EAAQW,IAAI,CAChBwB,MAAO,CAAC,CAAEnC,CAAAA,EAAQiI,QAAQ,EAAIjI,EAAQiI,QAAQ,CARzC,IAAI,CAQ0C,EACnDlH,KAAM,IAAI,CAACwG,IAAI,CAAC1H,QAAQ,CAACkB,IAAI,CAC7B6D,QAASA,EACTrD,SAAUvB,EAAQkI,MAAM,EAAE5B,OAAO6B,KAX5B,IAAI,CAYb,GAEAnI,AAAiB,SAAjBA,EAAQ8E,IAAI,CACLsC,EAAapE,UAAU,CAAC0E,EAAW,CACtCzE,MAAO2B,EACH,IAAI,CAAC2C,IAAI,CAAC1H,QAAQ,CAACkB,IAAI,CAAC6D,EAAQ,CAChC5E,EAAQW,IAAI,EAAI,GACpBT,UAAWF,EAAQE,SAAS,EAAI,EACpC,GAEAF,AAAiB,SAAjBA,EAAQ8E,IAAI,CACLsC,EAAalB,UAAU,CAACwB,EAAW,CACtCjH,KAAMT,EAAQS,IAAI,EAAI,GACtB4F,UAAWrG,EAAQkI,MAAM,EAAE3B,aAAa4B,KAzBnC,IAAI,EA0BT7B,MAAOtG,EAAQkI,MAAM,EAAE5B,OAAO6B,KA1BzB,IAAI,CA2Bb,GAEAnI,AAAiB,WAAjBA,EAAQ8E,IAAI,CACLsC,EAAaL,YAAY,CAACW,EAAW,CACxCnD,SAAUvE,EAAQkI,MAAM,EAAE5B,OAAO6B,KA/B5B,IAAI,EAgCTjI,UAAWF,EAAQE,SAAS,EAAI,GAChCkG,MAAOpG,EAAQoG,KAAK,EAAI,CAAC,EACzBzF,KAAMiE,EACF,IAAI,CAAC2C,IAAI,CAAC1H,QAAQ,CAACkB,IAAI,CAAC6D,EAAQ,CAC/B5E,EAAQW,IAAI,EAAI,EACzB,SAER,CACAyH,QAAS,CACL,IAAmBpI,EAAU6D,AAAhB,IAAI,CAAiB7D,OAAO,AACrCA,CAAAA,EAAQkI,MAAM,EAAIlI,EAAQkI,MAAM,CAACE,MAAM,EACvCpI,EAAQkI,MAAM,CAACE,MAAM,CAACnJ,KAAK,CAFlB,IAAI,CAEqBuH,UAE1C,CACA6B,UAAW,CAEPxE,AADa,IAAI,CACZuE,MAAM,GAEPvE,AAHS,IAAI,CAGR6D,SAAS,GACd7D,AAJS,IAAI,CAIR2D,QAAQ,CAAG,CAAA,EAChB3D,AALS,IAAI,CAKR6D,SAAS,CAACtB,KAAK,CAAC4B,OAAO,CAAG,QAEvC,CACAM,YAAa,CAGLzE,AAFS,IAAI,CAER6D,SAAS,GACd7D,AAHS,IAAI,CAGR2D,QAAQ,CAAG,CAAA,EAChB3D,AAJS,IAAI,CAIR6D,SAAS,CAACtB,KAAK,CAAC4B,OAAO,CAAG,OAEvC,CACJ,CAUA,OAJAX,EAASI,cAAc,CAAG,CACtB3C,KAAM,MACV,EAEOuC,CACX,GACA1I,EAAgBD,EAAU,+CAAgD,EAAE,CAAE,WAqC1E,MArByB,CAMrB6J,eAAgB,CACZrG,GAAI,iBACJ4C,KAAM,SACNF,QAAS,iBACTsD,OAAQ,CACJ5B,MAAO,WACH,IAAMkC,EAAa,IAAI,CAACjB,IAAI,CAAC1H,QAAQ,CAAC4I,KAAK,CAACC,UAAU,CAClDF,GACAA,EAAW3F,MAAM,EAEzB,CACJ,CACJ,CACJ,CAGJ,GACAlE,EAAgBD,EAAU,mCAAoC,CAACA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,uCAAuC,CAAEA,CAAQ,CAAC,+CAA+C,CAAC,CAAE,SAAUY,CAAW,CAAEC,CAAC,CAAE8H,CAAQ,CAAEsB,CAAgB,EAgB3S,GAAM,CAAElJ,cAAAA,CAAa,CAAED,MAAAA,CAAK,CAAE,CAAGD,CACjC,OAAMqJ,EAMFtB,YAAYnG,CAAa,CAAEnB,CAAO,CAAEH,CAAQ,CAAEgJ,CAAM,CAAE,CAClD,IAAI,CAAC1H,aAAa,CAAGA,EACrB,IAAI,CAAC2H,SAAS,CAAG,CAAA,EACjB,IAAI,CAACC,WAAW,CAAG,EAAE,CACrB,IAAI,CAAC/I,OAAO,CAAGA,EACf,IAAI,CAACgJ,KAAK,CAAG,CAAC,EACd,IAAI,CAACnJ,QAAQ,CAAGA,EACZgJ,GACA,CAAA,IAAI,CAACA,MAAM,CAAGA,CAAK,EAEvB,IAAI,CAACnB,SAAS,CAAG,IAAI,CAACC,YAAY,EACtC,CAMAA,cAAe,CACX,OAAOlI,EAAc,MAAO,CACxBS,UAAWZ,EAAYa,UAAU,CAACoH,IAAI,CAClC,IAAO,CAAA,IAAI,CAACvH,OAAO,CAACE,SAAS,EAAI,EAAC,CAC1C,EAAG,CAAC,EAAG,IAAI,CAACiB,aAAa,CAC7B,CAEA8H,UAAUC,CAAY,CAAEH,CAAW,CAAE,KAE7BI,EAAYC,EAAYvF,EAAM7D,EADlC,IAAmBqJ,EAAe9B,AAArB,IAAI,CAAsBvH,OAAO,CAACgJ,KAAK,EAAI,EAAE,CAE1D,IAAK,IAAI9E,EAAI,EAAGC,EAAOkF,EAAajF,MAAM,CAAEF,EAAIC,EAAM,EAAED,EAEpDiF,EACI,AAAsB,UAAtB,MAFJC,CAAAA,EAAaC,CAAY,CAACnF,EAAE,AAAD,EAEUgF,CAAY,CAACE,EAAW,CACrDA,EAAWlH,EAAE,CAAGgH,CAAY,CAACE,EAAWlH,EAAE,CAAC,CACvC,CAAC,EAITlC,AAHJA,CAAAA,EAAU,AAAsB,UAAtB,OAAOoJ,EACb5J,EAAM2J,EAAY,CAAEjH,GAAIkH,CAAW,GACnC5J,EAAM2J,EAAYC,EAAU,EACpBlH,EAAE,GACV2B,EAAO,IAAIwD,EAZN,IAAI,CAYiBrH,GAE1BuH,AAdK,IAAI,CAcJyB,KAAK,CAACnF,EAAK7D,OAAO,CAACkC,EAAE,CAAC,CAAG2B,EAC1BkF,IACAlF,EAAKwE,QAAQ,GACbd,AAjBC,IAAI,CAiBAwB,WAAW,CAACO,IAAI,CAACzF,IAOtC,CACA0F,eAAeP,CAAK,CAAE,KAEdnF,EAEJ,IAAK,IAAIK,EAAI,EAAGC,EAAOoD,AAHV,IAAI,CAGWwB,WAAW,CAAC3E,MAAM,CAAEF,EAAIC,EAAM,EAAED,EACF,KAAlD8E,EAAMQ,OAAO,CAACjC,AAJT,IAAI,CAIUwB,WAAW,CAAC7E,EAAE,CAAClE,OAAO,CAACkC,EAAE,GAC5CqF,AALK,IAAI,CAKJwB,WAAW,CAAC7E,EAAE,CAACoE,UAAU,EAGtCf,CARa,IAAI,CAQZwB,WAAW,CAAC3E,MAAM,CAAG,EAC1B,IAAK,IAAIqF,EAAI,EAAGC,EAAOV,EAAM5E,MAAM,CAAEqF,EAAIC,EAAM,EAAED,EAC7C5F,CAAAA,EAAO0D,AAVE,IAAI,CAUDyB,KAAK,CAACA,CAAK,CAACS,EAAE,CAAC,AAAD,IAGjB5F,EAAK2D,QAAQ,CAId3D,EAAKuE,MAAM,GAHXvE,EAAKwE,QAAQ,GAKjBd,AAnBK,IAAI,CAmBJwB,WAAW,CAACO,IAAI,CAACzF,GAGlC,CACA8F,uBAAwB,CAEpB,IAAK,IAAIzF,EAAI,EAAGC,EAAOoD,AADV,IAAI,CACWwB,WAAW,CAAC3E,MAAM,CAAEF,EAAIC,EAAM,EAAED,EACxDqD,AAFS,IAAI,CAERwB,WAAW,CAAC7E,EAAE,CAACoE,UAAU,EAEtC,CACAsB,mBAAoB,CAChB,IAAMb,EAAc,IAAI,CAACA,WAAW,CACpC,IAAK,IAAI7E,EAAI,EAAGC,EAAO4E,EAAY3E,MAAM,CAAEF,EAAIC,EAAM,EAAED,EACnD6E,CAAW,CAAC7E,EAAE,CAACkE,MAAM,EAE7B,CACAyB,SAAU,CACN,IAAI,CAACd,WAAW,CAAC3E,MAAM,CAAG,EAC1B,IAAI,CAACsD,SAAS,CAACoC,MAAM,GACrB,IAAI,CAACd,KAAK,CAAG,CAAC,EACd,IAAI,CAAChJ,OAAO,CAAG,CAAC,CACpB,CACJ,CAQA,OAFA4I,EAAKI,KAAK,CAAGL,EAENC,CACX,GACAjK,EAAgBD,EAAU,6CAA8C,CAACA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,mCAAmC,CAAC,CAAE,SAAUa,CAAC,CAAEqJ,CAAI,EAgBpK,GAAM,CAAElJ,QAAAA,CAAO,CAAED,cAAAA,CAAa,CAAEsK,IAAAA,CAAG,CAAE,CAAGxK,EA+DxC,OA1DA,MAMI+H,YAAYzH,CAAQ,CAAEG,CAAO,CAAE,CAC3B,IAAI,CAAC0H,SAAS,CAAGjI,EAAc,MAAO,CAClCS,UAAWF,EAAQE,SAAS,AAChC,EAAG,KAAK,EAAGL,EAAS4I,KAAK,CAACf,SAAS,EACnC,IAAI,CAAC7H,QAAQ,CAAGA,EAChB,IAAI,CAACmK,aAAa,CAAGnK,EAASsD,cAAc,CAC5C,IAAI,CAACoE,IAAI,CAAG,IAAIqB,EAAK,IAAI,CAAClB,SAAS,CAAE1H,EAAQuH,IAAI,CAAE1H,EAAU,IAAI,EACjE,IAAI,CAACG,OAAO,CAAGA,EACf,IAAI,CAAC8I,SAAS,CAAG,CAAA,EACb,IAAI,CAAC9I,OAAO,CAACiK,OAAO,EACpB,CAAA,IAAI,CAACA,OAAO,CAAGxK,EAAc,MAAO,CAChCS,UAAWF,EAAQkK,gBAAgB,AACvC,EAAG,KAAK,EAAG,IAAI,CAACxC,SAAS,CAAA,CAEjC,CAMAyC,MAAO,CACH,IAAI,CAACC,WAAW,CAAC,KAAK,EAAG,KAAK,EAClC,CACAC,eAAeC,CAAC,CAAEC,CAAC,CAAEC,CAAU,CAAEC,EAAS,CAAC,CAAE,CACzC,IAAsBC,EAAa,AAACF,CAAAA,GAAc,CAAC,CAAA,EAAG9C,SAAS,AAC3DiD,CADY,IAAI,CACRV,OAAO,EAAIS,GACnBX,EAAIY,AAFQ,IAAI,CAEJV,OAAO,CAAE,CACjBjC,QAAS,QACT4C,KAAMN,EAAIG,EAAS,KACnBI,IAAKN,EAAIE,EAAS,KAClBK,MAAOJ,EAAWK,WAAW,CAAGN,AAAS,EAATA,EAAa,KAC7CO,OAAQN,EAAWO,YAAY,CAAGR,AAAS,EAATA,EAAa,IACnD,EAER,CACAS,aAAc,CACN,IAAI,CAACjB,OAAO,EACZ,CAAA,IAAI,CAACA,OAAO,CAAC7D,KAAK,CAAC4B,OAAO,CAAG,MAAK,CAE1C,CACAoC,YAAYE,CAAC,CAAEC,CAAC,CAAE,CAEVI,AADY,IAAI,CACRjD,SAAS,EACjBqC,EAAIY,AAFQ,IAAI,CAEJjD,SAAS,CAAE,CACnBkD,KAAM,AAACN,CAAAA,GAAK,OAAM,EAAK,KACvBO,IAAK,AAACN,CAAAA,GAAK,OAAM,EAAK,IAC1B,GAEJI,AAPgB,IAAI,CAOZ7B,SAAS,CAAGpJ,EAAQ4K,IAAM5K,EAAQ6K,EAC9C,CACJ,CAGJ,GACA5L,EAAgBD,EAAU,iDAAkD,CAACA,CAAQ,CAAC,4BAA4B,CAAEA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,6CAA6C,CAAEA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUyM,CAAI,CAAE7L,CAAW,CAAE8L,CAAW,CAAEC,CAAU,CAAE9L,CAAC,EAgB5V,GAAM,CAAEC,MAAAA,CAAK,CAAE8L,UAAAA,CAAS,CAAEC,WAAAA,CAAU,CAAE,CAAGhM,CAIzC,OAAMiM,UAAwBJ,EAC1B,OAAOK,eAAezL,CAAO,CAAEgK,CAAa,CAAE,CAC1C,IAAMhB,EAAQ,EAAE,CA0DhB,OAzDIhJ,EAAQ0L,QAAQ,EAAEC,SAClB3C,EAAMM,IAAI,CAAC,CACPpH,GAAI,OACJ4C,KAAM,OACNrE,KAAMuJ,EAAgB,WACtB9B,OAAQ,CACJ3B,YAAa,SAAUf,CAAC,EACpB,IAAMoG,EAAkB,IAAI,CAACrE,IAAI,CAC5BsB,MAAM,CACL6C,EAAWE,EAAgB/L,QAAQ,CAAC6L,QAAQ,CAC9CA,GACAE,EAAgBC,IAAI,EACpBD,EAAgBC,IAAI,YAAYV,GAChCO,EAASI,WAAW,CAACtG,EAAGoG,EAAgBC,IAAI,CAEpD,CACJ,CACJ,GAEA7L,EAAQ+L,QAAQ,EAAEJ,SAClB3C,EAAMM,IAAI,CAAC,CACPpH,GAAI,WACJ4C,KAAM,OACNrE,KAAMuJ,EAAgB,eACtB9B,OAAQ,CACJ5B,MAAO,WACH,IAAI,CAACiB,IAAI,CAACsB,MAAM,CAAChJ,QAAQ,CAACmM,cAAc,GACxC,IAAI,CAACzE,IAAI,CAACsB,MAAM,CAACoD,aAAa,EAClC,CACJ,CACJ,GAEJjD,EAAMM,IAAI,CAAC,CACPpH,GAAI,UACJ4C,KAAM,OACN5E,UAAWZ,EAAYa,UAAU,CAAC+L,WAAW,CAC7CzL,KAAMuJ,EAAgB,cACtB9B,OAAQ,CACJ5B,MAAO,WACH,IAAM1G,EAAa,IAAI,CAAC2H,IAAI,CAACsB,MAAM,CAAEhJ,EAAW,IAAI,CAAC0H,IAAI,CAACsB,MAAM,CAAChJ,QAAQ,CAAEsM,EAAQtM,EAASuM,iBAAiB,CAC7GD,EAAME,IAAI,CAAC,CACPC,cAAe,CACXnK,MAAOtC,EAASkB,IAAI,CAACuL,aAAa,CAClC/H,SAAU3E,EAAW2M,aAAa,CAClCC,QAAS5M,CACb,EACA6M,aAAc,CACVtK,MAAOtC,EAASkB,IAAI,CAAC0L,YAAY,CACjClI,SAAU,KACN4H,EAAMO,UAAU,EACpB,CACJ,EACA/L,KAAMd,EAASkB,IAAI,CAAC4L,kBAAkB,AAC1C,EACJ,CACJ,CACJ,GACO3D,CACX,CAMA1B,YAAYzH,CAAQ,CAAE,CAClB,KAAK,CAACA,EAAUL,EAAMgM,EAAgB/D,cAAc,CAAE,AAAC5H,CAAAA,EAASG,OAAO,CAAC4M,QAAQ,EAAI,CAAC,CAAA,EAAGf,IAAI,CAAE,CAC1FtE,KAAM,CACFyB,MAAOwC,EAAgBC,cAAc,CAAC5L,EAASG,OAAO,CAAEH,EAASsD,cAAc,CACnF,CACJ,IACItD,EAASgN,cAAc,EACvB,IAAI,CAACC,sCAAsC,GAE/C,IAAI,CAACvF,IAAI,CAAC0B,SAAS,CAAC,CAAC,EACzB,CAYA8D,YAAYlB,CAAI,CAAE,CAEd,IAAMmB,EAAUnB,EAAKnE,SAAS,CAGxBuF,EAActC,AAJJ,IAAI,CAIQ9K,QAAQ,CAACoN,WAAW,CAChD,GAAKA,GAGL,GAAID,GAAWrC,AARC,IAAI,CAQG9K,QAAQ,CAAC2H,QAAQ,IACpC,CAAC,AAACmD,CAAAA,AATU,IAAI,CASN9K,QAAQ,CAAC6L,QAAQ,EAAI,CAAC,CAAA,EAAGlE,QAAQ,CAAE,CAC7C,IAAM0F,EAAc7B,EAAW8B,UAAU,CAACtB,EAAMlB,AAVpC,IAAI,CAUwC9K,QAAQ,CAAC4I,KAAK,CAACf,SAAS,EAC1E4C,EAAI4C,EAAYE,KAAK,CATV,GACC,GASZ7C,EAAI2C,EAAYrC,GAAG,CATP,GAUlBU,EAAWZ,AAbC,IAAI,CAaGpD,IAAI,CAACyB,KAAK,CAAE,AAACnF,IAC5B,GAAI,CAACgI,EAAK7L,OAAO,EAAEH,UAAUwN,aAAc,CACvCxJ,EAAKwE,QAAQ,GACb,MACJ,CACA,IAAMgF,EAAexB,EAAK7L,OAAO,CAACH,QAAQ,CAACwN,YAAY,CACvD,GAAIA,CAAY,CAACxJ,EAAK7D,OAAO,CAACkC,EAAE,CAAC,EAC3ByJ,UAAY,CAAA,EAAO,CACrB9H,EAAKyE,UAAU,GACf,MACJ,CACAzE,EAAKwE,QAAQ,EACjB,GACAsC,AA1BY,IAAI,CA0BRP,WAAW,CAACE,EAAGC,GACvBI,AA3BY,IAAI,CA2BRkB,IAAI,CAAGA,EACflB,AA5BY,IAAI,CA4BRN,cAAc,GACtB4C,EAAYnE,SAAS,CAAG,CAAA,CAC5B,MACS6B,AA/BO,IAAI,CA+BH7B,SAAS,GACtB6B,AAhCY,IAAI,CAgCRR,IAAI,GACZ8C,EAAYnE,SAAS,CAAG,CAAA,GAEhC,CACAuB,gBAAiB,CAETM,AADY,IAAI,CACRkB,IAAI,EAAIlB,AADJ,IAAI,CACQkB,IAAI,CAACnE,SAAS,EAAIiD,AAD9B,IAAI,CACkCV,OAAO,EACzD,KAAK,CAACI,eAAe,CAACM,AAFV,IAAI,CAEckB,IAAI,CAACnE,SAAS,CAACqD,WAAW,CAAE,EAAG,IAAI,CAACc,IAAI,CAFtC,GAIxC,CAIAI,eAAgB,CAEZ,IAAMpM,EAAW8K,AADD,IAAI,CACK9K,QAAQ,AAC5BA,CAAAA,EAASyN,OAAO,GAGrBzN,EAASyN,OAAO,CAACjB,IAAI,CAAC1B,AALN,IAAI,CAKUkB,IAAI,EAClClB,AANgB,IAAI,CAMZ4C,aAAa,GACzB,CACAhB,eAAgB,CAEZ,GAAI5B,AADY,IAAI,CACRkB,IAAI,EAAIlB,AADJ,IAAI,CACQkB,IAAI,YAAYV,EAAM,CAC9C,IAAMqC,EAAM7C,AAFA,IAAI,CAEIkB,IAAI,CAAC2B,GAAG,CACtBC,EAAS9C,AAHH,IAAI,CAGOkB,IAAI,CAAC3J,EAAE,CAC9ByI,AAJY,IAAI,CAIR+C,eAAe,GACvB/C,AALY,IAAI,CAKRkB,IAAI,CAAChC,OAAO,GACpBc,AANY,IAAI,CAMRkB,IAAI,CAAG,KAAK,EAEpBlB,AARY,IAAI,CAQR9K,QAAQ,CAAC8N,YAAY,CAAC,CAAC,OAAQ,MAAM,EAEzCH,GAAOA,EAAII,KAAK,EAAIJ,EAAII,KAAK,CAACxJ,MAAM,GACpCkH,EAAUX,AAXF,IAAI,CAWM9K,QAAQ,CAAC4I,KAAK,CAAE,aAAc,CAC5CoD,KAAM2B,EAAII,KAAK,CAAC,EAAE,AACtB,GACAtC,EAAUkC,EAAK,aAAc,CAAE3B,KAAM2B,EAAII,KAAK,CAAC,EAAE,CAAEJ,IAAAA,CAAI,GACvDlC,EAAUX,AAfF,IAAI,CAeM9K,QAAQ,CAAE,gBAAiB,CACzCiF,KAAM,gBACN8B,OAAQ6G,EACRhF,MAAOkC,AAlBH,IAAI,CAkBO9K,QAAQ,CAAC4I,KAAK,AACjC,GAER,CACJ,CACAiF,iBAAkB,CACd,IAAI,CAACG,UAAU,CAAG,KAAK,CAC3B,CAIAf,wCAAyC,CACrC,IAAI,CAAC9M,OAAO,CAACuH,IAAI,CAACyB,KAAK,CAAG,IAAI,CAAChJ,OAAO,CAACuH,IAAI,CAACyB,KAAK,EAAE8E,OAAO,AAACjK,GACvD,AAAoB,UAAhB,OAAOA,GAGJA,AAAY,aAAZA,EAAK3B,EAAE,CAEtB,CAIAqL,eAAgB,CAEP5C,AADW,IAAI,CACPkB,IAAI,GAGblB,AAJY,IAAI,CAIRkB,IAAI,CAACkC,YAAY,CACzBpD,AALY,IAAI,CAKRkB,IAAI,CAACkC,YAAY,IAGzBpD,AARY,IAAI,CAQRkB,IAAI,CAACnE,SAAS,CAAC9E,SAAS,CAAC+B,GAAG,CAACrF,EAAYa,UAAU,CAAC6N,iBAAiB,EAC7ErD,AATY,IAAI,CASR9K,QAAQ,CAAC4I,KAAK,CAACf,SAAS,CAAC9E,SAAS,CAAC+B,GAAG,CAACrF,EAAYa,UAAU,CAAC8N,gCAAgC,GAE9G,CACJ,CAkBA,OAZAzC,EAAgB/D,cAAc,CAAG,CAC7BkE,QAAS,CAAA,EACTzL,UAAWZ,EAAYa,UAAU,CAAC+N,WAAW,CAC7CjE,QAAS,CAAA,EACTC,iBAAkB5K,EAAYa,UAAU,CAACgO,sBAAsB,CAC/D5G,KAAM,CACFrH,UAAWZ,EAAYa,UAAU,CAACiO,eAAe,CACjDrG,eAAgBzI,EAAYa,UAAU,CAACkO,eAAe,CACtDrF,MAAO,EAAE,AACb,CACJ,EAEOwC,CACX,GACA7M,EAAgBD,EAAU,gDAAiD,CAACA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,6CAA6C,CAAEA,CAAQ,CAAC,kCAAkC,CAAC,CAAE,SAAUa,CAAC,CAAED,CAAW,CAAE8L,CAAW,CAAEC,CAAU,EAgB9S,GAAM,CAAEC,UAAAA,CAAS,CAAE9L,MAAAA,CAAK,CAAE+L,WAAAA,CAAU,CAAE,CAAGhM,CAIzC,OAAM+O,UAAuBlD,EACzB,OAAOmD,mBAAmBvO,CAAO,CAAEgK,CAAa,CAAE,CAC9C,IAAMhB,EAAQ,EAAE,CA2ChB,OA1CIhJ,EAAQ0L,QAAQ,EAAEC,SAClB3C,EAAMM,IAAI,CAAC,CACPpH,GAAI,OACJ4C,KAAM,OACNrE,KAAMuJ,EAAgB,WACtB9B,OAAQ,CACJ3B,YAAa,SAAUf,CAAC,EACpB,IAAMgJ,EAAiB,IAAI,CAACjH,IAAI,CAC3BsB,MAAM,CAAE6C,EAAW8C,EAAe3O,QAAQ,CAAC6L,QAAQ,CACxDlG,EAAEI,cAAc,GACZ8F,GAAY8C,EAAehB,GAAG,EAC9B9B,EAASI,WAAW,CAACtG,EAAGgJ,EAAehB,GAAG,CAElD,CACJ,CACJ,GAEJxE,EAAMM,IAAI,CAAC,CACPpH,GAAI,UACJ4C,KAAM,OACN5E,UAAWZ,EAAYa,UAAU,CAAC+L,WAAW,CAC7CzL,KAAMuJ,EAAgB,cACtB9B,OAAQ,CACJ5B,MAAO,WACH,IAAM1G,EAAa,IAAI,CAAC2H,IAAI,CAACsB,MAAM,CAAEhJ,EAAW,IAAI,CAAC0H,IAAI,CAACsB,MAAM,CAAChJ,QAAQ,CAAEsM,EAAQtM,EAASuM,iBAAiB,CAC7GD,EAAME,IAAI,CAAC,CACPC,cAAe,CACXnK,MAAOtC,EAASkB,IAAI,CAACuL,aAAa,CAClC/H,SAAU3E,EAAW6O,YAAY,CACjCjC,QAAS5M,CACb,EACA6M,aAAc,CACVtK,MAAOtC,EAASkB,IAAI,CAAC0L,YAAY,CACjClI,SAAU,KACN4H,EAAMO,UAAU,EACpB,CACJ,EACA/L,KAAMd,EAASkB,IAAI,CAAC2N,iBAAiB,AACzC,EACJ,CACJ,CACJ,GACO1F,CACX,CAMA1B,YAAYzH,CAAQ,CAAE,CAClB,KAAK,CAACA,EAAUL,EAAM8O,EAAe7G,cAAc,CAAE,AAAC5H,CAAAA,EAASG,OAAO,CAAC4M,QAAQ,EAAI,CAAC,CAAA,EAAGY,GAAG,CAAE,CACxFjG,KAAM,CACFyB,MAAOsF,EAAeC,kBAAkB,CAAC1O,EAASG,OAAO,CAAEH,EAASsD,cAAc,CACtF,CACJ,IACA,IAAI,CAACoE,IAAI,CAAC0B,SAAS,CAAC,CAAC,EACzB,CAMAoB,eAAeC,CAAC,CAAEC,CAAC,CAAE,CAEbI,AADY,IAAI,CACR6C,GAAG,EAAI7C,AADH,IAAI,CACO6C,GAAG,CAAC9F,SAAS,EACpC,KAAK,CAAC2C,eAAeC,EAAGC,EAAG,IAAI,CAACiD,GAAG,CAFH,EAIxC,CACAT,YAAYS,CAAG,CAAE,KAITlD,EACAC,EACAoE,EAJJ,IAAMC,EAASpB,EAAI9F,SAAS,CACtBmH,EAAalE,AAFH,IAAI,CAEO9K,QAAQ,CAACgP,UAAU,CAI9C,GAAKA,GAGL,GAAID,GACAjE,AAVY,IAAI,CAUR9K,QAAQ,CAAC2H,QAAQ,IACzB,CAAC,AAACmD,CAAAA,AAXU,IAAI,CAWN9K,QAAQ,CAAC6L,QAAQ,EAAI,CAAC,CAAA,EAAGlE,QAAQ,CAAE,CAC7C,IAAMsH,EAAazD,EAAW8B,UAAU,CAACK,EAAK7C,AAZlC,IAAI,CAYsC9K,QAAQ,CAAC4I,KAAK,CAACf,SAAS,EACxEqH,EAAWD,EAAW1B,KAAK,CAAG0B,EAAWlE,IAAI,CACnDW,EAAWZ,AAdC,IAAI,CAcGpD,IAAI,CAACyB,KAAK,CAAE,AAACnF,IAC5B,GAAI,CAAC2J,EAAIxN,OAAO,EAAEH,UAAUwN,aAAc,CACtCxJ,EAAKwE,QAAQ,GACb,MACJ,CACA,IAAMgF,EAAeG,EAAIxN,OAAO,CAACH,QAAQ,CAACwN,YAAY,CACtD,GAAIA,CAAY,CAACxJ,EAAK7D,OAAO,CAACkC,EAAE,CAAC,EAC3ByJ,UAAY,CAAA,EAAO,CACrB9H,EAAKyE,UAAU,GACf,MACJ,CACAzE,EAAKwE,QAAQ,EACjB,GACAsG,EAAUI,EAAW,EAAIpE,AA3Bb,IAAI,CA2BiBjD,SAAS,CAACsH,WAAW,CAAG,EACzD1E,EAAIwE,EAAWlE,IAAI,CAAG+D,EACtBpE,EAAIuE,EAAWjE,GAAG,CAAGF,AA7BT,IAAI,CA6BajD,SAAS,CAACuH,YAAY,CACnDtE,AA9BY,IAAI,CA8BRP,WAAW,CAACE,EAAGC,GACvBI,AA/BY,IAAI,CA+BR6C,GAAG,CAAGA,EACd7C,AAhCY,IAAI,CAgCRN,cAAc,CAAC,CAACsE,EAAShE,AAhCrB,IAAI,CAgCyBjD,SAAS,CAACuH,YAAY,EAC/DJ,EAAW/F,SAAS,CAAG,CAAA,CAC3B,MACS6B,AAnCO,IAAI,CAmCH7B,SAAS,GACtB6B,AApCY,IAAI,CAoCRR,IAAI,GACZ0E,EAAW/F,SAAS,CAAG,CAAA,GAE/B,CACAoG,cAAe,CAEPvE,AADY,IAAI,CACR9K,QAAQ,CAACyN,OAAO,EACxB3C,AAFY,IAAI,CAER9K,QAAQ,CAACyN,OAAO,CAACjB,IAAI,CAAC1B,AAFlB,IAAI,CAEsB6C,GAAG,CAEjD,CACAiB,cAAe,CAEX,GAAI9D,AADY,IAAI,CACR6C,GAAG,CAAE,CACb,IAAM2B,EAAQxE,AAFF,IAAI,CAEM6C,GAAG,CAACxN,OAAO,CAACkC,EAAE,EAAI,GACxC,IAAI,CAACkN,cAAc,GACnBzE,AAJY,IAAI,CAIR6C,GAAG,CAAC3D,OAAO,GACnBc,AALY,IAAI,CAKR6C,GAAG,CAAG,KAAK,EAEnB7C,AAPY,IAAI,CAOR9K,QAAQ,CAAC8N,YAAY,CAAC,CAAC,OAAQ,MAAM,EAC7CrC,EAAUX,AARE,IAAI,CAQE9K,QAAQ,CAAE,gBAAiB,CACzCiF,KAAM,eACN8B,OAAQuI,EACR1G,MAAOkC,AAXC,IAAI,CAWG9K,QAAQ,CAAC4I,KAAK,AACjC,EACJ,CACJ,CACA2G,gBAAiB,CAEb,IAAI,CAACC,SAAS,CAAG,KAAK,CAC1B,CACJ,CAkBA,OAZAf,EAAe7G,cAAc,CAAG,CAC5BkE,QAAS,CAAA,EACTzL,UAAWZ,EAAYa,UAAU,CAAC+N,WAAW,CAC7CjE,QAAS,CAAA,EACTC,iBAAkB5K,EAAYa,UAAU,CAACmP,qBAAqB,CAC9D/H,KAAM,CACFrH,UAAWZ,EAAYa,UAAU,CAACoP,cAAc,CAChDxH,eAAgBzI,EAAYa,UAAU,CAACkO,eAAe,CACtDrF,MAAO,EAAE,AACb,CACJ,EAEOsF,CACX,GACA3P,EAAgBD,EAAU,qBAAsB,CAACA,CAAQ,CAAC,4BAA4B,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAU8Q,CAAG,CAAEjQ,CAAC,EAepI,GAAM,CAAEkQ,SAAAA,CAAQ,CAAEhQ,cAAAA,CAAa,CAAE,CAAGF,EA0GpC,OApGA,MAMI+H,YAAYoI,CAAS,CAAEC,CAAQ,CAAE,CAC7B,IAAI,CAACA,QAAQ,CAAGA,EAChB,IAAI,CAACjI,SAAS,CAAG,IAAI,CAACkI,oBAAoB,CAACF,GAC3C,IAAI,CAACG,WAAW,CAAG,IAAI,CAACC,cAAc,EAC1C,CAkBAF,qBAAqBF,CAAS,CAAExP,EAAY,wCAAwC,CAAE,CAClF,OAAOT,EAAc,MAAO,CAAES,UAAAA,CAAU,EAAG,KAAK,EAAGwP,EACvD,CAUAI,eAAe5P,EAAY,wBAAwB,CAAE,CACjD,IAAMiM,EAAQ,IAAI,CAAEwD,EAAW,IAAI,CAACA,QAAQ,CAEtCE,EAAcpQ,EAAc,SAAU,CAAES,UAAAA,CAAU,EAAG,KAAK,EAAG,IAAI,CAACwH,SAAS,EAajF,OAZAmI,EAAYzJ,KAAK,CAAC,mBAAmB,CAAG,OACnCuJ,CAAAA,EAASI,KAAK,CAAC,0BACZJ,EAAWA,EAAW,WAAU,EAAK,IAC7C,CAAC,QAAS,aAAa,CAACK,OAAO,CAAC,AAACC,IAC7BR,EAASI,EAAaI,EAAW9D,EAAM+D,iBAAiB,CAAC/H,IAAI,CAACgE,GAClE,GAEAsD,EAASU,SAAU,UAAW,SAAU7P,CAAK,EACtB,WAAfA,EAAM8P,IAAI,EACVjE,EAAM+D,iBAAiB,EAE/B,GACOL,CACX,CAKAK,mBAAoB,CAChB,IAAI,CAACxD,UAAU,EACnB,CAOA2D,UAAUC,EAAe,+BAA+B,CAAE,CACtD,IAAMC,EAAW,IAAI,CAAC7I,SAAS,CAAE8I,EAAmB,IAAI,CAACX,WAAW,AACpE,CAAA,IAAI,CAAC/K,IAAI,CAAG,KAAK,EAEjByL,EAASE,SAAS,CAAGjB,EAAIkB,SAAS,CAE9BH,EAASrQ,SAAS,CAACsJ,OAAO,CAAC8G,IAAiB,IAC5CC,EAAS3N,SAAS,CAACkH,MAAM,CAACwG,GAE1BC,EAASI,eAAe,CAAC,UAG7BJ,EAASK,WAAW,CAACJ,GACrBD,EAASnK,KAAK,CAAC4B,OAAO,CAAG,QACzBuI,EAASnK,KAAK,CAAC4E,MAAM,CAAG,EAC5B,CAIA0B,YAAa,CACT,IAAI,CAAChF,SAAS,CAACtB,KAAK,CAAC4B,OAAO,CAAG,MACnC,CACJ,CAQJ,GACArJ,EAAgBD,EAAU,2CAA4C,CAACA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,qBAAqB,CAAEA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,sCAAsC,CAAC,CAAE,SAAUa,CAAC,CAAEsR,CAAQ,CAAEvR,CAAW,CAAE8H,CAAY,EAgBpR,GAAM,CAAE3H,cAAAA,CAAa,CAAE,CAAGF,EA0I1B,OAtIA,cAAgCsR,EA0B5BvJ,YAAYoI,CAAS,CAAEC,CAAQ,CAAE9P,CAAQ,CAAEG,CAAO,CAAE,CAKhD,KAAK,CAAC0P,EAJNC,EACI3P,GAAWA,EAAQ8Q,KAAK,EAAI9Q,EAAQ8Q,KAAK,CAACrQ,IAAI,CAC1CT,EAAQ8Q,KAAK,CAACrQ,IAAI,CAClBkP,GAER,IAAI,CAAC9P,QAAQ,CAAGA,EAChB,IAAI,CAACG,OAAO,CAAGA,CACnB,CAeA4P,qBAAqBF,CAAS,CAAExP,EAAYZ,EAAYa,UAAU,CAACiM,iBAAiB,CAAE,CAClF,OAAO,KAAK,CAACwD,qBAAqBF,EAAWxP,EACjD,CAOA4P,eAAe5P,EAAYZ,EAAYa,UAAU,CAACqQ,gBAAgB,CAAE,CAChE,OAAO,KAAK,CAACV,eAAe5P,EAChC,CAMAgQ,mBAAoB,CAChB,IAAMa,EAAiB,IAAI,CAACC,cAAc,EAAEvE,aAAalI,SACpDwM,GAGLA,GACJ,CAIAE,eAAgB,CACZ,IAAMjR,EAAU,IAAI,CAACgR,cAAc,CACnC,GAAI,CAAChR,EACD,MAGJ,CAAA,IAAI,CAACkR,gBAAgB,CAAGzR,EAAc,MAAO,CACzCS,UAAWZ,EAAYa,UAAU,CAACgR,qBAAqB,AAC3D,EAAG,CAAC,EAAG,IAAI,CAACzJ,SAAS,EACrB,IAAM0J,EAAiB,IAAI,CAACF,gBAAgB,CAACtR,UAAU,AACvDwR,CAAAA,EAAehL,KAAK,CAACiL,SAAS,CAAG,MACjC,IAAMC,EAAYF,EAAeG,qBAAqB,GAAG1G,GAAG,AAC5DuG,CAAAA,EAAehL,KAAK,CAACiL,SAAS,CAAG,AAACC,CAAAA,EAAY,EAAIE,KAAKC,GAAG,CAACH,EAAY,KAAO,GAAE,EAAK,KAErFlK,EAAapE,UAAU,CAAC,IAAI,CAACkO,gBAAgB,CAAE,CAC3CjO,MAAOjD,EAAQW,IAAI,EAAI,EAC3B,GAEA,IAAI,CAAC+Q,eAAe,CAAGjS,EAAc,MAAO,CACxCS,UAAWZ,EAAYa,UAAU,CAACwR,oBAAoB,AAC1D,EAAG,CAAC,EAAG,IAAI,CAACjK,SAAS,EAErBN,EAAaL,YAAY,CAAC,IAAI,CAAC2K,eAAe,CAAE,CAC5C/Q,KAAMX,EAAQyM,YAAY,CAACtK,KAAK,CAChCjC,UAAWZ,EAAYa,UAAU,CAACyR,cAAc,CAChDrN,SAAUvE,EAAQyM,YAAY,CAAClI,QAAQ,AAC3C,GAEA6C,EAAaL,YAAY,CAAC,IAAI,CAAC2K,eAAe,CAAE,CAC5C/Q,KAAMX,EAAQsM,aAAa,CAACnK,KAAK,CACjCjC,UAAWZ,EAAYa,UAAU,CAAC0R,eAAe,CACjDtN,SAAU,KACNvE,EAAQsM,aAAa,CAAC/H,QAAQ,CAACuN,IAAI,CAAC9R,EAAQsM,aAAa,CAACE,OAAO,EACjE,IAAI,CAACE,UAAU,EACnB,CACJ,EACJ,CAOAL,KAAKrM,CAAO,CAAE,CACV,IAAI,CAACgR,cAAc,CAAGhR,EACtB,IAAI,CAACqQ,SAAS,GACd,IAAI,CAACY,aAAa,GAClB,IAAI,CAACpR,QAAQ,CAACmM,cAAc,EAChC,CAIAU,YAAa,CACT,KAAK,CAACA,aACN,IAAI,CAAC7M,QAAQ,CAACmM,cAAc,CAAC,CAAA,EACjC,CACJ,CAGJ,GACArN,EAAgBD,EAAU,uCAAwC,CAACA,CAAQ,CAAC,sCAAsC,CAAEA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,2CAA2C,CAAC,CAAE,SAAU0I,CAAY,CAAE7H,CAAC,CAAED,CAAW,CAAEyS,CAAiB,EAc/S,GAAM,CAAEtS,cAAAA,CAAa,CAAED,MAAAA,CAAK,CAAEwS,MAAAA,CAAK,CAAE1G,UAAAA,CAAS,CAAE,CAAG/L,EA+UnD,OAtUA,MAMI+H,YAAYnE,CAAc,CAAE8O,CAAY,CAAE,CACtC,IAAI,CAACC,cAAc,CAAG,CAAC,EACvB,IAAI,CAACC,gBAAgB,CAAG,CAAC,EACzB,IAAI,CAACC,gBAAgB,CAAG,CAAC,EACzB,IAAI,CAACC,sBAAsB,CAAG,CAAA,EAC9B,IAAI,CAAClP,cAAc,CAAGA,EACtB,IAAI,CAAC8O,YAAY,CAAGA,CACxB,CAkBAhB,cAAcvJ,CAAS,CAAE4K,CAAS,CAAEC,CAAoB,CAAE,KAIlDvS,EACAuC,EAJJ,GAAM,CAAE1C,SAAAA,CAAQ,CAAE,CAAGyS,EAAU7J,KAAK,CAE9B+J,EAAkBF,EAAUE,eAAe,CAACC,UAAU,EAG5D,CAAA,IAAI,CAACH,SAAS,CAAGA,EACjB,IAAI,CAACF,gBAAgB,CAAG5S,EAAM,CAAC,EAAG8S,EAAUtS,OAAO,EAC/CH,GACA,CAAA,IAAI,CAACuM,iBAAiB,CAAG,IAAI2F,EAAkBO,EAAU7J,KAAK,CAACf,SAAS,CAAE7H,EAASsD,cAAc,CAAEtD,EAAU,CAAEiR,MAAO,CAAErQ,KAAM,EAAG,CAAE,EAAC,EAExI,IAAMiS,EAAqBjT,EAAc,MAAO,CAC5CS,UAAWZ,EAAYa,UAAU,CAACwS,aAAa,AACnD,EAAG,CAAC,EAAGjL,GACP,IAAK,IAAIxD,EAAI,EAAG0O,EAAMJ,EAAgBpO,MAAM,CAAEF,EAAI0O,EAAK1O,IACnDlE,EAAUwS,CAAe,CAACtO,EAAE,CAC5B3B,EAAU6E,EAAalG,oBAAoB,CAACwR,EAAoBlT,EAAM,CAClE2D,eAAgBoE,AAfX,IAAI,CAeYpE,cAAc,CACnCpC,KAAM,AAACuR,CAAAA,EAAU7J,KAAK,EAAE5I,UAAYP,CAAU,EAAGyB,IAAI,AACzD,EAAGf,IAAUuC,OAAO,CACpB,IAAI,CAACsQ,eAAe,CAAC7S,EAASuC,EAAS+P,GAE3C,IAAMZ,EAAkBjS,EAAc,MAAO,CACzCS,UAAWZ,EAAYa,UAAU,CAAC2S,6BAA6B,AACnE,EAAG,CAAC,EAAGP,GACPnL,EAAaL,YAAY,CAAC2K,EAAiB,CACvC/Q,KAAM,AAAC2R,CAAAA,EAAU7J,KAAK,EAAE5I,UAAYP,CAAU,EACzCyB,IAAI,CAACuL,aAAa,CACvBpM,UAAWZ,EAAYa,UAAU,CAAC0R,eAAe,CACjDtN,SAAU,UACN,MAAM,IAAI,CAACwO,cAAc,EAC7B,CACJ,GACA3L,EAAaL,YAAY,CAAC2K,EAAiB,CACvC/Q,KAAM,AAAC2R,CAAAA,EAAU7J,KAAK,EAAE5I,UAAYP,CAAU,EACzCyB,IAAI,CAAC0L,YAAY,CACtBvM,UAAWZ,EAAYa,UAAU,CAACyR,cAAc,CAChDrN,SAAU,KACN,IAAI,CAACyO,aAAa,EACtB,CACJ,GACAT,EAAqB3B,WAAW,CAACc,EACrC,CAaAuB,cAAcC,CAAY,CAAE/Q,CAAK,CAAE,KAG3BgR,EACAC,EACAC,EACAC,EALJ,IAAMC,EAAaL,EAAa9O,MAAM,CAAG,EACrCoP,EAAe,IAAI,CAACtB,cAAc,CAKtC,GAAIqB,AAAe,IAAfA,GAAoBL,AAAoB,iBAApBA,CAAY,CAAC,EAAE,CACnC,GAAI,CACA,IAAMO,EAAcC,KAAKC,KAAK,CAACxR,EAC/B,CAAA,IAAI,CAACgQ,gBAAgB,CAAGsB,CAC5B,CACA,MAAOjO,EAAG,CAENwM,EAAM,CAAC;;AAAyF,EAAExM,EAAE,CAAC,CACzG,CAEJ,IAAK,IAAItB,EAAI,EAAGA,EAAIqP,EAAYrP,IAAK,CACjC,IAAM0P,EAAMV,CAAY,CAAChP,EAAE,CAK3B,GAJKsP,CAAY,CAACI,EAAI,EAClBJ,CAAAA,CAAY,CAACI,EAAI,CAAG,CAAC,CAAA,EAEzBJ,EAAeA,CAAY,CAACI,EAAI,CAC5BA,AAAQ,oBAARA,EAA2B,CAC3B,IAAMC,EAAsB,IAAI,CAACvB,SAAS,CAACwB,QAAQ,EAAE9T,QACrD,GAAI6T,EAAqB,CACrB,IAAMzB,EAAmB,IAAI,CAACA,gBAAgB,AACzCA,CAAAA,EAAiB2B,eAAe,EACjC3B,CAAAA,EAAiB2B,eAAe,CAAG,CAAC,CAAA,EAExCT,EACIlB,EAAiB2B,eAAe,CACpCV,EAA8BQ,CAClC,CACJ,MACSR,GACLC,IACAD,EAA8BA,CAA2B,CAACO,EAAI,CACZ,KAAK,IAAnDN,CAAoC,CAACM,EAAI,EACzCN,CAAAA,CAAoC,CAACM,EAAI,CAAG,CAAC,CAAA,EAEjDN,EACIA,CAAoC,CAACM,EAAI,EAEjD,GAAIA,AAAQ,iBAARA,EAAwB,CACxB,IAAMI,EAAmB,IAAI,CAAC1B,SAAS,CAAC2B,KAAK,EAAEjU,QAC/C,GAAIgU,EAAkB,CAClB,IAAM5B,EAAmB,IAAI,CAACA,gBAAgB,AACzCA,CAAAA,EAAiB8B,YAAY,EAC9B9B,CAAAA,EAAiB8B,YAAY,CAAG,CAAC,CAAA,EAErCd,EACIhB,EAAiB8B,YAAY,CACjCf,EAA2Ba,CAC/B,CACJ,MACSb,GACLC,IACAD,EAA2BA,CAAwB,CAACS,EAAI,CACT,KAAK,IAAhDR,CAAiC,CAACQ,EAAI,EACtCR,CAAAA,CAAiC,CAACQ,EAAI,CAAG,CAAC,CAAA,EAE9CR,EACIA,CAAiC,CAACQ,EAAI,CAElD,CACA,IAAMO,EAAUjB,CAAY,CAACK,EAAW,AACxCC,CAAAA,CAAY,CAACW,EAAQ,CAAGhS,EACpBiR,GAAqCD,GACrCC,CAAAA,CAAiC,CAACe,EAAQ,CAAIf,CAAiC,CAACe,EAAQ,EACpFhB,CAAwB,CAACgB,EAAQ,EAGzC,IAAI,CAAC7B,SAAS,EAAElK,OAAO,IAAI,CAAC8J,cAAc,CAC9C,CAcAW,gBAAgB7S,CAAO,CAAEJ,CAAU,CAAE0S,CAAS,CAAE,CAC5C,GAAItS,AAAiB,WAAjBA,EAAQ8E,IAAI,CACZ,OAAO,IAAI,CAACsP,YAAY,CAACxU,EAAYI,EAASsS,GAElD,IAAM+B,EAAiBjN,EAAaJ,mBAAmB,CAAChH,EAAQ8E,IAAI,EAC/DuP,GAGLA,EAAezU,EAAY,CACvB,GAAGI,CAAO,CACVmD,eAAgB,IAAI,CAACA,cAAc,CACnChB,MAAOmQ,EAAUgC,sBAAsB,CAACtU,EAAQkT,YAAY,EAC5D3R,SAAU,AAACY,GAAU,IAAI,CAAC8Q,aAAa,CAACjT,EAAQkT,YAAY,EAAI,EAAE,CAAE/Q,EACxE,EACJ,CAaAiS,aAAajT,CAAa,CAAEnB,CAAO,CAAEsS,CAAS,CAAE,CAC5C,GAAI,CAACnR,GAAiB,CAACnB,EAAQuU,aAAa,CACxC,OAEJ,IAAMA,EAAgBvU,EAAQuU,aAAa,CAC3C,IAAK,IAAIrQ,EAAI,EAAGC,EAAOoQ,EAAcnQ,MAAM,CAAEF,EAAIC,EAAM,EAAED,EAAG,CACxD,IAAM7C,EAAOkT,CAAa,CAACrQ,EAAE,CAAC7C,IAAI,CAC5BmT,EAAmBD,CAAa,CAACrQ,EAAE,CAAClE,OAAO,CAC3CsB,EAAa,CAAC,CAACiT,CAAa,CAACrQ,EAAE,CAAC5C,UAAU,CAC1C4R,EAAeqB,CAAa,CAACrQ,EAAE,CAACgP,YAAY,EAAI,EAAE,CAClDuB,EAAkBrN,EAAalG,oBAAoB,CAACC,EAAe,CACrEE,KAAAA,EACAG,UAAW,CAAC,CAAC8Q,EAAUgC,sBAAsB,CAACpB,GAC9C/P,eAAgB,IAAI,CAACA,cAAc,CACnC7B,WAAYA,EACZC,SAAU,AAACY,GAAU,IAAI,CAAC8Q,aAAa,CAACC,EAAc/Q,GACtDV,SAAU,CAAA,EACVV,KAAM,AAACuR,CAAAA,EAAU7J,KAAK,EAAE5I,UAAYP,CAAU,EAAGyB,IAAI,AACzD,GACA,IAAK,IAAI0I,EAAI,EAAGC,EAAO8K,EAAiBpQ,MAAM,CAAEqF,EAAIC,EAAM,EAAED,EACxD,IAAI,CAACoJ,eAAe,CAAC2B,CAAgB,CAAC/K,EAAE,CAAEgL,EAAgBlS,OAAO,CAAE+P,EAE3E,CAEJ,CAKAU,eAAgB,CACR0B,OAAOC,IAAI,CAAC,IAAI,CAACzC,cAAc,EAAE9N,MAAM,CAAG,EAC1C,IAAI,CAAC6N,YAAY,GAGjB,IAAI,CAAC2C,2BAA2B,EAExC,CAMA,MAAM7B,gBAAiB,CACnB,IAAMT,EAAY,IAAI,CAACA,SAAS,CAChC,GAAKA,GAGL,GAAIA,AAAmB,eAAnBA,EAAUxN,IAAI,EACd4P,OAAOC,IAAI,CAAC,IAAI,CAACxC,gBAAgB,EAAE/N,MAAM,CACzC,MAAMkO,EAAUlK,MAAM,CAAC,CACnB8L,aAAc,IAAI,CAAC/B,gBAAgB,AACvC,QAEC,GAAIG,AAAmB,SAAnBA,EAAUxN,IAAI,CAAa,CAChC,IAAM9E,EAAU,IAAI,CAACkS,cAAc,AACnC,OAAMI,EAAUlK,MAAM,CAACpI,EAAS,CAAA,EACpC,CACAsL,EAAUgH,EAAU7J,KAAK,CAAC5I,QAAQ,CAAE,mBAAoB,CACpD+G,OAAQ0L,EACRJ,eAAgB1S,EAAM,CAAC,EAAG,IAAI,CAAC0S,cAAc,EAC7C2C,WAAYrV,EAAM,CAAC,EAAG,IAAI,CAAC4S,gBAAgB,CAC/C,GACA,IAAI,CAACF,cAAc,CAAG,CAAC,EACvB,IAAI,CAACC,gBAAgB,CAAG,CAAC,EACzB,IAAI,CAACF,YAAY,GACrB,CAMA,MAAM6C,gBAAiB,CACnB,IAAMxC,EAAY,IAAI,CAACA,SAAS,CAC3BA,IAGL,MAAMA,EAAUlK,MAAM,CAAC,IAAI,CAACgK,gBAAgB,EAC5C9G,EAAUgH,EAAU7J,KAAK,CAAC5I,QAAQ,CAAE,4BAA6B,CAC7D+G,OAAQ0L,EACRJ,eAAgB1S,EAAM,CAAC,EAAG,IAAI,CAAC0S,cAAc,EAC7C2C,WAAYrV,EAAM,CAAC,EAAG,IAAI,CAAC4S,gBAAgB,CAC/C,GACA,IAAI,CAACF,cAAc,CAAG,CAAC,EACvB,IAAI,CAACC,gBAAgB,CAAG,CAAC,EAC7B,CAIAyC,6BAA8B,CAC1B,IAAMzI,EAAQ,IAAI,CAACC,iBAAiB,CAC9BvM,EAAW,IAAI,CAACyS,SAAS,EAAE7J,OAAO5I,SACnCsM,GAAUtM,IAAY,IAAI,CAACwS,sBAAsB,GAGtD,IAAI,CAACA,sBAAsB,CAAG,CAAA,EAC9BlG,EAAME,IAAI,CAAC,CACP1L,KAAMd,EAASkB,IAAI,CAACgU,qBAAqB,CACzCzI,cAAe,CACXnK,MAAOtC,EAASkB,IAAI,CAACuL,aAAa,CAClC/H,SAAU,UACN,MAAM,IAAI,CAACuQ,cAAc,GACzB,IAAI,CAACzC,sBAAsB,CAAG,CAAA,EAC9B,IAAI,CAACJ,YAAY,EACrB,EACAzF,QAAS,IAAI,AACjB,EACAC,aAAc,CACVtK,MAAOtC,EAASkB,IAAI,CAAC0L,YAAY,CACjClI,SAAU,KACN4H,EAAMO,UAAU,GAChB7M,EAASmM,cAAc,GACvBgJ,WAAW,KACP,IAAI,CAAC3C,sBAAsB,CAAG,CAAA,CAClC,EAAG,IACP,CACJ,CACJ,GACJ,CACJ,CAQJ,GACA1T,EAAgBD,EAAU,sCAAuC,CAACA,CAAQ,CAAC,4BAA4B,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,uCAAuC,CAAEA,CAAQ,CAAC,qBAAqB,CAAEA,CAAQ,CAAC,iCAAiC,CAAEA,CAAQ,CAAC,4BAA4B,CAAEA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,sCAAsC,CAAEA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,8BAA8B,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAU8Q,CAAG,CAAEyF,CAAQ,CAAEC,CAAa,CAAErE,CAAQ,CAAEsE,CAAQ,CAAEhK,CAAI,CAAE7L,CAAW,CAAE8H,CAAY,CAAEiE,CAAU,CAAE+J,CAAM,CAAE7V,CAAC,EAa9nB,GAAM,CAAEkQ,SAAAA,CAAQ,CAAEhQ,cAAAA,CAAa,CAAE6L,UAAAA,CAAS,CAAE9L,MAAAA,CAAK,CAAE,CAAGD,CAWtD,OAAM8V,UAAqBxE,EAkBvBvJ,YAAYoI,CAAS,CAAEC,CAAQ,CAAE9P,CAAQ,CAAE,CACvC,KAAK,CAAC6P,EAAWC,GAIjB,IAAI,CAAC3P,OAAO,CAAG,CACXsV,WAAY,CAAC,OAAQ,MAAO,aAAc,WAAY,MAAM,AAChE,EAIA,IAAI,CAACxM,SAAS,CAAG,CAAA,EAIjB,IAAI,CAACyM,cAAc,CAAG,EAAE,CACxB,IAAI,CAAC1V,QAAQ,CAAGA,EAChB,IAAI,CAACG,OAAO,CAAGR,EAAM,IAAI,CAACQ,OAAO,CAAEH,EAASG,OAAO,CAAC4M,QAAQ,EAAEU,SAAW,CAAC,GAC1E,IAAI,CAACiI,cAAc,CAAG,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAACxV,OAAO,CAACsV,UAAU,EAAI,EAAE,EAC1E,IAAI,CAAC3C,aAAa,CAAG,IAAIuC,EAAc,IAAI,CAACvF,QAAQ,CAAE,IAAI,CAACxF,IAAI,CAAChC,IAAI,CAAC,IAAI,EAC7E,CAeAsN,mBAAmBjJ,CAAO,CAAE,CACxB,IAAM3M,EAAW,IAAI,CAACA,QAAQ,CACxB6V,EAAgB7V,EAASgN,cAAc,CACzChN,EAAS4I,KAAK,CAACf,SAAS,CAAG7H,EAAS4I,KAAK,CAACkN,cAAc,OAC5D,EAAKD,GAGErK,EAAW8B,UAAU,CAACX,EAASkJ,GAAe9K,IAAI,CAAI,AAAC8K,EAAc3K,WAAW,CAAG,EAAK,EACnG,CAIA6K,kBAAmB,CACf,IAAMzV,EAAab,EAAYa,UAAU,CAAEyC,EAAY,IAAI,CAAC8E,SAAS,CAAC9E,SAAS,CAC/EA,EAAUkH,MAAM,CAAC3J,EAAW0V,eAAe,EAC3CjT,EAAUkH,MAAM,CAAC3J,EAAW2V,oBAAoB,CACpD,CAQAC,cAAcC,CAAc,CAAE,CAC1B,IAAMpT,EAAY,IAAI,CAAC8E,SAAS,CAAC9E,SAAS,CACtCoT,EACApT,EAAU+B,GAAG,CAACrF,EAAYa,UAAU,CAAC8V,gBAAgB,EAGrDrT,EAAUkH,MAAM,CAACxK,EAAYa,UAAU,CAAC8V,gBAAgB,EAE5DjB,WAAW,KACPpS,EAAU+B,GAAG,CAACrF,EAAYa,UAAU,CAAC6V,EAAiB,uBAAyB,kBAAkB,CACrG,EACJ,CAOA3J,KAAKG,CAAO,CAAE,CACV,IAAM3M,EAAW,IAAI,CAACA,QAAQ,CAAEmW,EAAiB,CAAC,CAAExJ,CAAAA,GAAW,IAAI,CAACiJ,kBAAkB,CAACjJ,EAAO,EAC9F,IAAI,CAAC6D,SAAS,CAAC/Q,EAAYa,UAAU,CAAC0V,eAAe,EACrD,IAAI,CAACE,aAAa,CAACC,GACfnW,EAASqW,OAAO,EAChBrW,EAASqW,OAAO,CAACC,cAAc,GAG/BtW,EAASuW,eAAe,YAAYjL,GACpCtL,EAASuW,eAAe,CAAC5I,GAAG,EAC5B3N,EAASuW,eAAe,CAAC5I,GAAG,CAACO,YAAY,GAE7ClO,EAAS8N,YAAY,CAAC,CAAC,OAAQ,MAAM,EACrC9N,EAASwW,oBAAoB,GAC7B,IAAI,CAACvN,SAAS,CAAG,CAAA,EACjB,IAAI,CAACwN,eAAe,CAAC9J,EACzB,CACA8J,gBAAgB9J,CAAO,CAAE,CAWrB,GATA,IAAI,CAAC9E,SAAS,CAAC+I,SAAS,CAAGjB,EAAIkB,SAAS,CAExC,IAAI,CAAC6F,YAAY,CAAC/J,EACd,IAAI,CAAC3M,QAAQ,CAACkB,IAAI,CAACgL,QAAQ,CAC3B,IAAI,CAAClM,QAAQ,CAACkB,IAAI,CAACyV,YAAY,CAAE,IAErC,IAAI,CAACC,cAAc,CAAGhX,EAAc,MAAO,CACvCS,UAAWZ,EAAYa,UAAU,CAACuW,kBAAkB,AACxD,EAAG,KAAK,EAAG,IAAI,CAAChP,SAAS,EACrB,CAAC8E,EAAS,CACV,IAAI,CAACmK,uBAAuB,GAC5B,MACJ,CAEA,GADA,IAAI,CAAC7R,IAAI,CAAG0H,EAAQoK,OAAO,GACvB,AAAc,cAAd,IAAI,CAAC9R,IAAI,EAAoB,AAAc,SAAd,IAAI,CAACA,IAAI,CAAa,CACnD,IAAMwN,EAAY9F,EAAQqK,gBAAgB,CAC1C,GAAI,CAACvE,EACD,OAEJ,IAAI,CAACK,aAAa,CAAC1B,aAAa,CAAC,IAAI,CAACwF,cAAc,CAAEnE,EAAW,IAAI,CAAC5K,SAAS,CACnF,CACJ,CACAiP,yBAA0B,KAGlBG,EAFJ,IAAMxJ,EAAU,IAAI,CACdgI,EAAa,IAAI,CAACC,cAAc,CAEhCwB,EAActX,EAAc,MAAO,CACrCS,UAAWZ,EAAYa,UAAU,CAAC6W,aAAa,AACnD,EAAG,CAAC,EAAG1J,EAAQmJ,cAAc,EAC7B,IAAK,IAAIvS,EAAI,EAAGC,EAAOmR,EAAWlR,MAAM,CAAEF,EAAIC,EAAM,EAAED,EAGlD4S,AAFAA,CAAAA,EAAcrX,EAAc,MAAO,CAAC,EAAG,CAAC,EAAGsX,EAAW,EAE1CpU,gBAAgB,CAAC,YAAa,AAAC6C,IAEvC,GADAA,EAAEI,cAAc,GACZ0H,EAAQzN,QAAQ,CAAC6L,QAAQ,CAAE,CAG3B,IAAMuL,EAAc,AAAC3W,IACjB,IAAM4W,EAAO5J,EAAQ5F,SAAS,CAAC6J,qBAAqB,GAChDjR,CAAAA,EAAM6W,OAAO,CAAGD,EAAKtM,IAAI,EACzBtK,EAAM6W,OAAO,CAAGD,EAAK9J,KAAK,EAC1B9M,EAAM8W,OAAO,CAAGF,EAAKrM,GAAG,EACxBvK,EAAM8W,OAAO,CAAGF,EAAKG,MAAM,AAAD,IAC1B/J,EAAQnD,IAAI,GACZgG,SAASmH,mBAAmB,CAAC,YAAaL,GAElD,EAEMM,EAAY,KACdpH,SAASmH,mBAAmB,CAAC,YAAaL,GAC1C9G,SAASmH,mBAAmB,CAAC,UAAWC,EAC5C,EAEApH,SAASxN,gBAAgB,CAAC,YAAasU,GACvC9G,SAASxN,gBAAgB,CAAC,UAAW4U,GACrCjK,EAAQzN,QAAQ,CAAC6L,QAAQ,CAACI,WAAW,CAACtG,EAAG,KAAK,EAAG,AAACgS,IAE9C,GAAI,AAAuC,IAAvC,IAAI,CAAC3X,QAAQ,CAAC4I,KAAK,CAACgP,OAAO,CAACrT,MAAM,CAAQ,CAC1C,IAAMqE,EAAQ,IAAI,CAAC5I,QAAQ,CAAC4I,KAAK,CAAmDiP,EAAS,IAAItC,EAAO3M,EAAO,CAC3GvG,GAD6CmJ,EAAWsM,YAAY,CAAC,UAErEC,OAAQ,GACRC,kBAAmBpP,EAAMf,SAAS,CAACxF,EAAE,CACrC4V,KAAM,CAAC,CAAC,EAAE,CACV1R,MAAO,CAAC,CACZ,GACIsR,GACAjP,EAAMgP,OAAO,CAACnO,IAAI,CAACoO,GAEvBF,EAAcE,EAAOI,IAAI,CAAC,EAAE,AAChC,CACA,IAAMC,EAAUzC,CAAU,CAACpR,EAAE,CAAC8T,MAAM,CAAC1K,EAASkK,GAC1CO,IACAzK,EAAQzN,QAAQ,CAACoY,kBAAkB,CAACF,GACpCzK,EAAQjB,IAAI,CAAC0L,GACbA,EAAQhK,YAAY,IAGxBoC,SAASmH,mBAAmB,CAAC,YAAaL,EAC9C,EACJ,CACJ,GACAH,EAAYrG,SAAS,CAAG6E,CAAU,CAACpR,EAAE,CAACvD,IAAI,AAGlD,CACAuX,mBAAmBV,CAAW,CAAEW,CAAgB,CAAE,CAC9C,IAAsBzM,EAAW4B,AAAjB,IAAI,CAAqBzN,QAAQ,CAAC6L,QAAQ,CAC1D,GAAIA,EAAU,CACV,IAEkBqM,EAAUvK,AAFfgK,CAAAA,AAA0B,SAA1BA,EAAYZ,OAAO,GAC5BY,EAAYhK,GAAG,CACfgK,CAAU,EAAkBY,OAAO,CAAC,CACpClW,GAAImJ,EAAWsM,YAAY,CAAC,MAChC,GACAjM,EAAS2M,aAAa,CAACN,GACvB,IAAM/X,EAAUR,EAAM2Y,EAAkB,CACpCtM,KAAMkM,EAAQ7V,EAAE,AACpB,GACMoW,EAAmBnD,EAASqB,YAAY,CAACxW,EAASsN,AAX5C,IAAI,CAWgDzN,QAAQ,CAAC4I,KAAK,CAAEsP,GAYhF,OAXAzK,AAZY,IAAI,CAYRzN,QAAQ,CAACmM,cAAc,GAC1B,AAAC,CAAA,UACF,IAAMsG,EAAY,MAAMgG,EACnBhG,GAGLhH,EAAU,IAAI,CAACzL,QAAQ,CAAE,gBAAiB,CACtCiF,KAAM,eACN8B,OAAQ0L,CACZ,EACJ,CAAA,IACOyF,CACX,CACJ,CAIA5N,MAAO,CACH,IAAMtK,EAAW,IAAI,CAACA,QAAQ,CACxBuW,EAAkBvW,EAASuW,eAAe,CAChD,IAAI,CAACR,gBAAgB,GACrB,IAAI,CAAClO,SAAS,CAACtB,KAAK,CAAC4B,OAAO,CAAG,OAE3BnI,EAAS0Y,mBAAmB,EAC5B1Y,EAASmM,cAAc,CAAC,CAAA,GAExBoK,aAA2BjL,GAAQiL,EAAgB5I,GAAG,EACtD3N,EAAS2Y,YAAY,CAAC,CAAC,OAAQ,MAAM,CAAEpC,GACvCA,EAAgB5I,GAAG,CAACO,YAAY,GAChCqI,EAAgBrI,YAAY,CAAC,CAAA,IAExBqI,aAA2BnB,GAAYpV,EAASoN,WAAW,GAChEpN,EAASoN,WAAW,CAACF,WAAW,CAACqJ,GACjCA,EAAgBrI,YAAY,IAEhClO,EAAS4Y,wBAAwB,CAAG,CAAA,EACpC,IAAI,CAAC3P,SAAS,CAAG,CAAA,CACrB,CAMAoH,mBAAoB,CACZ,AAAc,SAAd,IAAI,CAACpL,IAAI,EAAe,AAAc,cAAd,IAAI,CAACA,IAAI,CACjC,IAAI,CAAC6N,aAAa,CAACK,aAAa,GAGhC,IAAI,CAAC7I,IAAI,EAEjB,CACAoM,aAAatT,CAAK,CAAES,CAAO,CAAE,CACzB,GAAI,CAAC,IAAI,CAACgE,SAAS,CACf,OAEJ,IAAMgR,EAAgBjZ,EAAc,MAAO,CACvCS,UAAWZ,EAAYa,UAAU,CAACwY,iBAAiB,AACvD,EAAG,CAAC,EAAG,IAAI,CAACjR,SAAS,EACrB,IAAI,CAACA,SAAS,CAACkJ,WAAW,CAAC8H,GAC3B,IAAI,CAACA,aAAa,CAAGA,EACrB,IAAMjY,EAAO2G,EAAalB,UAAU,CAAC,IAAI,CAACwS,aAAa,CAAE,CACrDjY,KAAMiD,EACNxD,UAAWZ,EAAYa,UAAU,CAACyY,gBAAgB,AACtD,GACInY,GACAA,CAAAA,EAAKI,WAAW,CAAGoC,CAAI,EAE3B,IAAI,CAACyV,aAAa,EAAE9H,YAAY,IAAI,CAACf,WAAW,CACpD,CASA2F,kBAAkBF,CAAU,CAAE,CAC1B,IAAsBzV,EAAWyN,AAAjB,IAAI,CAAqBzN,QAAQ,CAAEgZ,EAAiBhZ,EAAS4I,KAAK,CAACoQ,cAAc,CAAEC,EAAgB,EAAE,CAmBrH,OAlBAxD,EAAWtF,OAAO,CAAC,AAAC+I,IAChB,IAAMzG,EAAYuG,CAAc,CAACE,EAAc,CAC3CzG,EACAwG,EAAcxP,IAAI,CAAC,CACf3I,KAAMd,EAASkB,IAAI,EAAEuM,OAAO,CAACyL,EAAc,EACvCzG,EAAUjR,IAAI,CAClB2W,OAAQ,SAAU1K,CAAO,CAAEkK,CAAW,EAClC,IAAMxX,EAAUsS,EAAU0G,SAAS,CAACC,gBAAgB,CAAC3L,GACrD,GAAItN,EACA,OAAOsN,EAAQ4K,kBAAkB,CAACV,EAAaxX,EAEvD,CACJ,GAEuB,QAAlB+Y,GACLD,EAAcxP,IAAI,CAAC+L,EAAa6D,MAAM,CAE9C,GACOJ,CACX,CAQAhJ,eAAe5P,EAAYZ,EAAYa,UAAU,CAACqQ,gBAAgB,CAAE,CAehE,OAbAf,EAASU,SAAU,QAAS,AAAC7P,IACzBA,EAAMC,eAAe,GACgB,UAAjC,IAAI,CAACmH,SAAS,CAACtB,KAAK,CAAC4B,OAAO,EAC5B,CAAC,IAAI,CAACN,SAAS,CAACyR,QAAQ,CAAC7Y,EAAMsG,MAAM,GACrC,IAAI,CAACc,SAAS,CAAC9E,SAAS,CAACT,KAAK,CAACiX,QAAQ,CAAC,UACpC,AAAc,SAAd,IAAI,CAACtU,IAAI,EAAe,AAAc,cAAd,IAAI,CAACA,IAAI,CACjC,IAAI,CAAC6N,aAAa,CAACK,aAAa,GAGhC,IAAI,CAAC7I,IAAI,GAGrB,GACO,KAAK,CAAC2F,eAAegC,IAAI,CAAC,IAAI,CAAE5R,EAC3C,CAUA0P,qBAAqBF,CAAS,CAAExP,EAAYZ,EAAYa,UAAU,CAACkZ,WAAW,CAAE,CAC5E,OAAO,KAAK,CAACzJ,qBAAqBkC,IAAI,CAAC,IAAI,CAAEpC,EAAWxP,EAC5D,CACJ,CA+CA,OA9CAmV,EAAa6D,MAAM,CAAG,CAClBvY,KAAMrB,EAAYyB,IAAI,CAACuM,OAAO,CAACE,GAAG,CAClCwK,OAAQ,SAAU1K,CAAO,CAAEkK,CAAW,EAClC,GAAI,CAACA,EACD,OAEJ,IAEkB/O,EAAQ+E,AAFbgK,CAAAA,AAA0B,SAA1BA,EAAYZ,OAAO,GAC5BY,EAAYhK,GAAG,CACfgK,CAAU,EAAgBE,MAAM,CAACjP,KAAK,CAAE6Q,EAAcjO,EAAWsM,YAAY,CAAC,UAAWlK,EAASpC,EAAWsM,YAAY,CAAC,QAASD,EAAS,IAAItC,EAAO3M,EAAO,CAC9JvG,GAAIoX,EACJ1B,OAAQ,GACRC,kBAAmBpP,EAAMf,SAAS,CAACxF,EAAE,CACrC4V,KAAM,CAAC,CACClK,MAAO,CAAC,CACA1L,GAAIuL,CACR,EAAE,AACV,EAAE,CACNrH,MAAO,CAAC,CACZ,GACIsR,IACAjP,EAAMgP,OAAO,CAACnO,IAAI,CAACoO,GACnBpM,EAAU7C,EAAM5I,QAAQ,CAAE,gBAAiB,CACvCiF,KAAM,YACN8B,OAAQ8Q,EACRjP,MAAAA,CACJ,IAEC0M,EAASqB,YAAY,CAAC,CACvB1R,KAAM,OACN+G,KAAM4B,EACNvN,UAAW,8CACXqZ,KAAM,CAAC;;;;;4BAKC,CAAC,AACb,EAAG9Q,EACP,CACJ,EAOO4M,CACX,GACA1W,EAAgBD,EAAU,yCAA0C,CAACA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,mCAAmC,CAAC,CAAE,SAAUY,CAAW,CAAEC,CAAC,CAAEqJ,CAAI,EAgB7N,GAAM,CAAE6G,SAAAA,CAAQ,CAAEjQ,MAAAA,CAAK,CAAE,CAAGD,CAK5B,OAAMia,UAAwB5Q,EAM1BtB,YAAYnG,CAAa,CAAEnB,CAAO,CAAEH,CAAQ,CAAE,CAS1C,GARA,KAAK,CAACA,EAAS4I,KAAK,CAACf,SAAS,CAAElI,EAAMga,EAAgB/R,cAAc,CAAEzH,GAAW,CAAC,GAAIH,GACtF,IAAI,CAACA,QAAQ,CAAGA,EAChB,IAAI,CAACG,OAAO,CAAGR,EAAMga,EAAgB/R,cAAc,CAAEzH,GAAW,CAAC,GAEjE,IAAI,CAACH,QAAQ,CAAC4I,KAAK,CAACkN,cAAc,EAAE/V,WAAW6Z,aAAa,IAAI,CAAC/R,SAAS,CAAE,IAAI,CAAC7H,QAAQ,CAAC4I,KAAK,CAACkN,cAAc,EAE9G,IAAI,CAACjO,SAAS,CAACtB,KAAK,CAAC0E,KAAK,CAAG,IAAI,CAAC9K,OAAO,CAAC8K,KAAK,CAAG,KAClD,KAAK,CAAC7B,UAAUuQ,EAAgBxQ,KAAK,EACjC,IAAI,CAAChJ,OAAO,CAACgJ,KAAK,CAAE,CACpB,IAAMA,EAAQ,EAAE,CAChB,IAAK,IAAI9E,EAAI,EAAGC,EAAO,IAAI,CAACnE,OAAO,CAACgJ,KAAK,CAAC5E,MAAM,CAAEF,EAAIC,EAAM,EAAED,EACtD,AAAiC,UAAjC,OAAO,IAAI,CAAClE,OAAO,CAACgJ,KAAK,CAAC9E,EAAE,CAC5B8E,EAAMM,IAAI,CAAC,IAAI,CAACtJ,OAAO,CAACgJ,KAAK,CAAC9E,EAAE,EAE3B,IAAI,CAAClE,OAAO,CAACgJ,KAAK,CAAC9E,EAAE,CAAChC,EAAE,EAC7B8G,EAAMM,IAAI,CAAC,IAAI,CAACtJ,OAAO,CAACgJ,KAAK,CAAC9E,EAAE,CAAChC,EAAE,EAG3C,IAAI,CAACqH,cAAc,CAACP,EACxB,CACA,IAAI,CAAC0Q,UAAU,EACnB,CAMAA,YAAa,CACT,IAAMzZ,EAAc,IAAI,CAGxBwP,EAASU,SAAU,QAAS,AAAC7P,IACrBA,EAAMsG,MAAM,GAAK,IAAI,CAACc,SAAS,EAC/BpH,EAAMsG,MAAM,GACR3G,EAAYJ,QAAQ,CAAC8Z,KAAK,CAACC,oBAAoB,EACnD,CAACtZ,EAAMsG,MAAM,CAAChE,SAAS,CAClBuW,QAAQ,CAAC7Z,EAAYa,UAAU,CAACwF,YAAY,GACjDrF,AAAyB,UAAzBA,EAAMsG,MAAM,CAACiT,OAAO,EACpB,IAAI,CAAC/Q,SAAS,EACd,IAAI,CAACgR,UAAU,CAAC,CAAA,EAExB,EACJ,CACAA,WAAWC,CAAO,CAAE,CAChB,IAA0BH,EAAuB3Z,AAA7B,IAAI,CAAqCJ,QAAQ,CAAC8Z,KAAK,CAACC,oBAAoB,AAC5F3Z,CADgB,IAAI,CACRyH,SAAS,EAAIkS,IACrBG,GACA9Z,AAHY,IAAI,CAGJyH,SAAS,CAACtB,KAAK,CAAC4B,OAAO,CAAG,QACtC/H,AAJY,IAAI,CAIJ6I,SAAS,CAAG,CAAA,EACxB8Q,EAAqB9Y,YAAY,CAAC,gBAAiB,UAGnDb,AARY,IAAI,CAQJyH,SAAS,CAACtB,KAAK,CAAC4B,OAAO,CAAG,OACtC/H,AATY,IAAI,CASJ6I,SAAS,CAAG,CAAA,EACxB8Q,EAAqB9Y,YAAY,CAAC,gBAAiB,UAG/D,CACAkZ,eAAeC,CAAS,CAAE3P,CAAC,CAAEC,CAAC,CAAE,CAC5B,IAA0BO,EAAQ7K,AAAd,IAAI,CAAsBD,OAAO,CAAC8K,KAAK,EAAI,EAAGF,EAAQqP,EACtEA,EAAUC,UAAU,CAAGpP,EAAQmP,EAAUlP,WAAW,CACpDT,EAAIO,EAAMoP,EAAYA,EAAU3I,SAAS,CAAG2I,EAAUhP,YAAY,CAAGV,EACrEK,GAAQC,IACR5K,AAJgB,IAAI,CAIRyH,SAAS,CAACtB,KAAK,CAACwE,IAAI,CAAGA,EAAO,KAC1C3K,AALgB,IAAI,CAKRyH,SAAS,CAACtB,KAAK,CAACyE,GAAG,CAAGA,EAAM,KAEhD,CACJ,CAgCA,OA1BA2O,EAAgB/R,cAAc,CAAG,CAC7BkE,QAAS,CAAA,EACTb,MAAO,IACP5K,UAAWZ,EAAYa,UAAU,CAACF,WAAW,CAC7C8H,eAAgBzI,EAAYa,UAAU,CAACga,eAAe,CACtDnR,MAAO,CAAC,WAAW,AACvB,EAIAwQ,EAAgBxQ,KAAK,CAAGxJ,EAAMoJ,EAAKI,KAAK,CAAE,CACtCnJ,SAAU,CACNqC,GAAI,WACJ4C,KAAM,SACNmD,SAAU,SAAUpE,CAAI,EACpB,OAAOA,EAAK0D,IAAI,CAAC1H,QAAQ,CAAC2H,QAAQ,EACtC,EACA5C,QAAS,WACTsD,OAAQ,CACJ5B,MAAO,WACH,IAAI,CAACiB,IAAI,CAAC1H,QAAQ,CAACua,cAAc,EACrC,CACJ,CACJ,CACJ,GAEOZ,CACX,GACA7a,EAAgBD,EAAU,yCAA0C,CAACA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAU2M,CAAU,CAAE9L,CAAC,EAgBrK,GAAM,CAAEG,QAAAA,CAAO,CAAE,CAAGH,CACpB,OAAM8a,EACF,OAAOC,yBAAyBC,CAAY,CAAEC,CAAI,CAAE,CAChD,IAAMC,EAAkB,AAACD,AAAS,QAATA,GAAkBA,AAAS,WAATA,EACvCD,EAAa/M,GAAG,CAACkK,MAAM,CAACgD,cAAc,GACtC,AAACF,AAAS,SAATA,GAAmBA,AAAS,UAATA,EAChBD,EAAa/M,GAAG,CAACmN,eAAe,GAChC,EAAE,CACJC,EAAoBH,EAAgBrW,MAAM,CAAG,EACnD,OAAQ,AAACqW,CAAe,CAACG,EAAiB,GAAKL,GAC3CC,AAAS,UAATA,GACCC,CAAe,CAACG,EAAiB,GAAKL,EAAa/M,GAAG,EACnDgN,AAAS,WAATA,GACHC,CAAe,CAAC,EAAE,GAAKF,GAAgBC,AAAS,SAATA,GACvCC,CAAe,CAAC,EAAE,GAAKF,EAAa/M,GAAG,EAAIgN,AAAS,QAATA,CACpD,CACA,OAAOK,gBAAgBN,CAAY,CAAE9P,CAAM,CAAEqQ,CAAU,CAAEN,CAAI,CAAE,CAE3D,IAAMO,EAAmBR,EAAaS,oBAAoB,CAACR,EAAM/P,EAAS,GAGpEwQ,EAAYxQ,EAASsQ,EAAiB3W,MAAM,CAE5C8W,EAAsBH,CAAgB,CAACA,EAAiB3W,MAAM,CAAG,EAAE,CACrE+W,EAAQZ,EAAa/M,GAAG,CAACkK,MAAM,CAACyD,KAAK,CAAG3J,KAAK4J,KAAK,CAACN,EAAaG,GAGpE,OAFQE,EAAQD,EAAsBA,EAAuBC,EAAQZ,EAAa/M,GAAG,CAACkK,MAAM,CAACyD,KAAK,CAC9FZ,EAAa/M,GAAG,CAACkK,MAAM,CAACyD,KAAK,CAAGA,CAExC,CACA,OAAOE,WAAWC,CAAgB,CAAE9V,CAAC,CAAEiF,CAAM,CAAE,KACvCqQ,EAEJ,IAAMS,EAA0BlQ,EAAW8B,UAAU,CAACmO,GAChD,CAAExQ,MAAAA,CAAK,CAAEE,OAAAA,CAAM,CAAE,CAAGK,EAAWmQ,iBAAiB,CAACD,GAEnDzQ,EAAQ,EAAIL,GACZA,CAAAA,EAASK,EAAQ,CAAA,EAGrB,IAAM2Q,EAAYjW,EAAE2R,OAAO,CAAGoE,EAAwB3Q,IAAI,CACpD8Q,EAAWlW,EAAE4R,OAAO,CAAGmE,EAAwB1Q,GAAG,CAEpD2P,EAAO,SAaX,OAZIiB,GAAa,CAAChR,GAAUgR,GAAahR,EACrC+P,EAAO,OAEFiB,EAAY3Q,GAAS,CAACL,GAAUgR,EAAY3Q,GAASL,EAC1D+P,EAAO,QAEFkB,GAAY,CAACjR,GAAUiR,GAAYjR,EACxC+P,EAAO,MAEFkB,EAAW1Q,GAAU,CAACP,GAAUiR,EAAW1Q,GAAUP,GAC1D+P,CAAAA,EAAO,QAAO,EAEVA,GACJ,IAAK,QACDM,EAAaW,EAAY3Q,EAAQL,EACjC,KACJ,KAAK,OACDqQ,EAAarQ,EAASgR,EACtB,KACJ,KAAK,MACDX,EAAarQ,EAASiR,EACtB,KACJ,KAAK,SACDZ,EAAaY,EAAW1Q,EAASP,CAEzC,CACA,IAAM+B,EAAU,CACZX,KAAMyP,EACNd,KAAMA,CACV,EAEA,GAAIc,EAAiB9N,GAAG,EAAEkK,OAAOyD,OAC7BX,GACAH,EAAiBC,wBAAwB,CAACgB,EAAkBd,IAC5D9a,EAAQob,GAAa,CACrB,IAAMK,EAAQd,EAAiBQ,eAAe,CAACS,EAAkB7Q,EAAQqQ,EAAYN,GAC/E3O,EAAOyP,EAAiBK,aAAa,CAACR,GACxCtP,GACAW,CAAAA,EAAQX,IAAI,CAAGA,CAAG,CAE1B,CACA,OAAOW,CACX,CACJ,CAEA,OAAO6N,CACX,GACA1b,EAAgBD,EAAU,iCAAkC,CAACA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,wBAAwB,CAAEA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,yCAAyC,CAAC,CAAE,SAAUa,CAAC,CAAEqc,CAAO,CAAEtc,CAAW,CAAE+L,CAAU,CAAEgP,CAAgB,EAgB5U,GAAM,CAAE5K,SAAAA,CAAQ,CAAEjQ,MAAAA,CAAK,CAAEuK,IAAAA,CAAG,CAAEuB,UAAAA,CAAS,CAAE7L,cAAAA,CAAa,CAAE,CAAGF,CAK3D,OAAMsc,EAgBFvU,YAAYzH,CAAQ,CAAEG,CAAO,CAAE,CAC3B,IAAI,CAACH,QAAQ,CAAGA,EAChB,IAAI,CAACG,OAAO,CAAGR,EAAMqc,EAASpU,cAAc,CAAEzH,GAC9C,IAAI,CAAC8b,WAAW,CAAGrc,EAAc,MAAO,CAAES,UAAWZ,EAAYa,UAAU,CAAC4b,QAAQ,AAAC,EAAG,CAAC,EAAGlc,EAAS4I,KAAK,CAACf,SAAS,EACpH,IAAI,CAACsU,WAAW,CAAG,CACflT,UAAW,CAAA,EACXmT,MAAO,GACPC,QAASzc,EAAc,MAAO,CAAES,UAAWZ,EAAYa,UAAU,CAAC6b,WAAW,AAAC,EAAG,CAAC,EAAGnc,EAAS4I,KAAK,CAACf,SAAS,CACjH,EACA,IAAI,CAACF,QAAQ,CAAG,CAAA,EAChB,IAAI,CAACkS,UAAU,EACnB,CAqBAyC,gBAAgBvR,CAAI,CAAEC,CAAG,CAAEC,CAAK,CAAEE,CAAM,CAAE,CACtC,IAAI,CAACgR,WAAW,CAAClT,SAAS,CAAG,CAAA,EAC7BiB,EAAI,IAAI,CAACiS,WAAW,CAACE,OAAO,CAAE,CAC1BlU,QAAS,QACT4C,KAAMA,EAAO,KACbC,IAAKA,EAAM,KACXG,OAAQA,EAAS,KACjBF,MAAOA,EAAQ,IACnB,EACJ,CAIAsR,iBAAkB,CACV,IAAI,CAACJ,WAAW,CAAClT,SAAS,GAC1B,IAAI,CAACkT,WAAW,CAAClT,SAAS,CAAG,CAAA,EAC7B,IAAI,CAACkT,WAAW,CAACC,KAAK,CAAG,GACzB,IAAI,CAACD,WAAW,CAACE,OAAO,CAAC9V,KAAK,CAAC4B,OAAO,CAAG,OAEjD,CAOAqU,uBAAuBC,CAAU,CAAE,CAC/B,IAAuBC,EAAmB7Q,AAAzB,IAAI,CAA8B7L,QAAQ,CAAC4I,KAAK,CAACf,SAAS,CAAC6J,qBAAqB,GAAI9G,EAASiB,AAA7F,IAAI,CAAkGoQ,WAAW,CAAC9M,WAAW,CAAG,EAAG1E,EAAIgS,EAAWnF,OAAO,CAAGoF,EAAiB3R,IAAI,CAAGH,EAAQF,EAAI+R,EAAWlF,OAAO,CAAGmF,EAAiB1R,GAAG,CAAGJ,EAC7PV,EAAI,IAAI,CAAC+R,WAAW,CAAE,CAAElR,KAAMN,EAAI,KAAMO,IAAKN,EAAI,IAAK,EAC1D,CAIAmP,YAAa,CAGTjK,EAASU,SAAU,YAAazE,AAFf,IAAI,CAEoB8Q,MAAM,CAACrU,IAAI,CAFnC,IAAI,GAGrBsH,EAASU,SAAU,UAAWzE,AAHb,IAAI,CAGkB+Q,SAAS,CAACtU,IAAI,CAHpC,IAAI,EAIzB,CAaA2D,YAAYtG,CAAC,CAAEgH,CAAO,CAAEkQ,CAAe,CAAE,CACrC,IAAI,CAAClV,QAAQ,CAAG,CAAA,EAChB,IAAI,CAAC3H,QAAQ,CAAC8N,YAAY,CAAC,CAAC,OAAQ,MAAM,EACtC,IAAI,CAAC9N,QAAQ,CAACqW,OAAO,EACrB,IAAI,CAACrW,QAAQ,CAACqW,OAAO,CAACC,cAAc,GAExC,IAAI,CAACkG,sBAAsB,CAAC7W,GACxBgH,GACA,IAAI,CAACA,OAAO,CAAGA,EACfA,EAAQrC,IAAI,GACRqC,EAAQoK,OAAO,KAAOgF,EAAQe,cAAc,CAAC9Q,IAAI,GAGjDP,EAAU,IAAI,CAACzL,QAAQ,CAAC4I,KAAK,CAAE,aAAc,CAAEoD,KAAMW,CAAQ,GAC7DlB,EAAUsR,AAHUpQ,EAGEgB,GAAG,CAAE,aAAc,CAAE3B,KAAMW,EAASgB,IAAKoP,AAH3CpQ,EAGuDgB,GAAG,AAAC,KAG9EkP,GACL,CAAA,IAAI,CAACA,eAAe,CAAGA,CAAc,EAEzC3S,EAAI,IAAI,CAAC+R,WAAW,CAAE,CAClBe,OAAQ,WACR7U,QAAS,OACb,EACJ,CAOAwU,OAAOhX,CAAC,CAAE,CAEFkG,AADa,IAAI,CACRlE,QAAQ,GACjBhC,EAAEI,cAAc,GAChB8F,AAHa,IAAI,CAGR2Q,sBAAsB,CAAC7W,GAC5BkG,AAJS,IAAI,CAIJc,OAAO,CACZd,AALK,IAAI,CAKAc,OAAO,CAACoK,OAAO,KACxBgF,EAAQe,cAAc,CAAC9Q,IAAI,CAC3BH,AAPK,IAAI,CAOAoR,UAAU,CAACtX,GAEfkG,AATA,IAAI,CASKc,OAAO,CAACoK,OAAO,KAC7BgF,EAAQe,cAAc,CAACnP,GAAG,EAC1B9B,AAXK,IAAI,CAWAqR,SAAS,CAACvX,GAGlBkG,AAdI,IAAI,CAcCgR,eAAe,EAC7BhR,AAfS,IAAI,CAeJoR,UAAU,CAACtX,GAGhC,CAIAiX,WAAY,CAEJ/Q,AADa,IAAI,CACRlE,QAAQ,GACjBkE,AAFa,IAAI,CAERlE,QAAQ,CAAG,CAAA,EACpBuC,EAAI2B,AAHS,IAAI,CAGJoQ,WAAW,CAAE,CACtBe,OAAQ,OACR7U,QAAS,MACb,GACI0D,AAPS,IAAI,CAOJc,OAAO,EACZd,AARK,IAAI,CAQAc,OAAO,CAACoK,OAAO,KACxBgF,EAAQe,cAAc,CAAC9Q,IAAI,CAC3BH,AAVK,IAAI,CAUA2M,aAAa,GAEjB3M,AAZA,IAAI,CAYKc,OAAO,CAACoK,OAAO,KAC7BgF,EAAQe,cAAc,CAACnP,GAAG,EAC1B9B,AAdK,IAAI,CAcAsR,YAAY,GAEzBtR,AAhBS,IAAI,CAgBJc,OAAO,CAAG,KAAK,EAEpBd,AAlBK,IAAI,CAkBA7L,QAAQ,CAACuW,eAAe,GACjC1K,AAnBK,IAAI,CAmBA7L,QAAQ,CAAC2Y,YAAY,CAAC,CAAC,MAAO,OAAO,CAAE9M,AAnB3C,IAAI,CAmBgD7L,QAAQ,CAACuW,eAAe,EAC7E1K,AApBC,IAAI,CAoBI7L,QAAQ,CAACqW,OAAO,EACzBxK,AArBC,IAAI,CAqBI7L,QAAQ,CAACqW,OAAO,CAAC+G,gBAAgB,CAACvR,AArB1C,IAAI,CAqB+C7L,QAAQ,CAACuW,eAAe,IAI/E1K,AAzBI,IAAI,CAyBCgR,eAAe,GAC7BhR,AA1BS,IAAI,CA0BJgR,eAAe,CAAChR,AA1BhB,IAAI,CA0BqB8L,WAAW,EAC7C9L,AA3BS,IAAI,CA2BJgR,eAAe,CAAG,KAAK,EAChChR,AA5BS,IAAI,CA4BJ0Q,eAAe,IAGpC,CAWAW,UAAUvX,CAAC,CAAE0X,CAAc,CAAE,CACzB,IAAuB5B,EAAmB5P,AAAzB,IAAI,CAA8B4P,gBAAgB,CAAE6B,EAAkBzR,AAAtE,IAAI,CAA2E1L,OAAO,CAACmd,eAAe,EAAI,EAAG1S,EAASiB,AAAtH,IAAI,CAA2H1L,OAAO,CAACod,aAAa,EAAI,EACrKC,EAAoB,CAAA,EACxB,GAAI/B,EAAkB,CAClB,IAAM9O,EAAW0Q,GACb7C,EAAiBgB,UAAU,CAACC,EAAkB9V,EAAGiF,GAC/CwR,EAAQzP,EAAQgO,IAAI,CAO1B,GANI9O,CAAAA,AANS,IAAI,CAMJsQ,WAAW,CAACC,KAAK,GAAKA,GAC/BvQ,AAPS,IAAI,CAOJ8L,WAAW,GAAKhL,EAAQX,IAAI,CAAC2B,GAAG,AAAD,IACxC6P,EAAoB,CAAA,EACpB3R,AATS,IAAI,CASJsQ,WAAW,CAACC,KAAK,CAAGA,EAC7BvQ,AAVS,IAAI,CAUJ8L,WAAW,CAAGhL,EAAQX,IAAI,CAAC2B,GAAG,EAEvCyO,EAAO,CACP,IAAMqB,EAAwBjS,EAAW8B,UAAU,CAACzB,AAb3C,IAAI,CAagD8L,WAAW,CAAE9L,AAbjE,IAAI,CAasE7L,QAAQ,CAAC4I,KAAK,CAACf,SAAS,EACrG,CAAEoD,MAAAA,CAAK,CAAEE,OAAAA,CAAM,CAAE,CAAGK,EACrBmQ,iBAAiB,CAAC8B,GAEnB,CAAA,CAAC5R,AAjBI,IAAI,CAiBCsQ,WAAW,CAAClT,SAAS,EAAIuU,CAAgB,GACnD3R,AAlBK,IAAI,CAkBAyQ,eAAe,CAACmB,EAAsB1S,IAAI,CAAE0S,EAAsBzS,GAAG,CAAIa,CAAAA,AAA+B,WAA/BA,AAlB7E,IAAI,CAkBkFsQ,WAAW,CAACC,KAAK,CACxGjR,EACA,CAAA,EAAKmS,EAAkB,EAAGrS,EAAOqS,EAE7C,MAEIzR,AAxBS,IAAI,CAwBJ8L,WAAW,CAAG,KAAK,EAC5B9L,AAzBS,IAAI,CAyBJ0Q,eAAe,EAEhC,CACJ,CAMAY,cAAe,CACX,IAAuBO,EAAa7R,AAAnB,IAAI,CAAwBc,OAAO,CAAEgL,EAAc9L,AAAnD,IAAI,CAAwD8L,WAAW,AACpF9L,CADa,IAAI,CACRsQ,WAAW,CAACC,KAAK,GAC1BsB,EAAW7F,MAAM,CAAC8F,UAAU,CAACD,GAES,IAAlCA,EAAW7F,MAAM,CAACI,IAAI,CAAC1T,MAAM,EAC7BmZ,EAAW7F,MAAM,CAAC7N,OAAO,GAE7B2N,EAAYE,MAAM,CAAC+F,QAAQ,CAACF,EAAY,AAAC/F,CAAAA,EAAYE,MAAM,CAACgG,WAAW,CAAClG,IAAgB,CAAA,EACnF9L,CAAAA,AAA+B,WAA/BA,AARQ,IAAI,CAQHsQ,WAAW,CAACC,KAAK,CAAgB,EAAI,CAAA,GAE/CsB,EAAW3P,KAAK,CAAC,EAAE,GACnBtC,EAAUI,AAXD,IAAI,CAWM7L,QAAQ,CAAC4I,KAAK,CAAE,aAAc,CAAEoD,KAAM0R,EAAW3P,KAAK,CAAC,EAAE,AAAC,GAC7EtC,EAAUiS,EAAY,aAAc,CAAE1R,KAAM0R,EAAW3P,KAAK,CAAC,EAAE,CAAEJ,IAAK+P,CAAW,KAGzF7R,AAfiB,IAAI,CAeZ0Q,eAAe,GACxBmB,EAAWlR,IAAI,GACff,EAAUI,AAjBO,IAAI,CAiBF7L,QAAQ,CAAE,gBAAiB,CAC1CiF,KAAM,aACN8B,OAAQ2W,EACR9U,MAAOiD,AApBM,IAAI,CAoBD7L,QAAQ,CAAC4I,KAAK,AAClC,EACJ,CAWAqU,WAAWtX,CAAC,CAAE0X,CAAc,CAAE,CAC1B,IAAuB5B,EAAmB5P,AAAzB,IAAI,CAA8B4P,gBAAgB,CAAE7Q,EAASiB,AAA7D,IAAI,CAAkE1L,OAAO,CAAC2d,cAAc,EAAI,CAC7GrC,CAAAA,GAAoB4B,EACpBxR,AAFa,IAAI,CAERkS,iBAAiB,CAACpY,EAAG0X,GAC1B7C,EAAiBgB,UAAU,CAACC,EAAkB9V,EAAGiF,IAEhDiB,AALQ,IAAI,CAKHmS,eAAe,EAC7BnS,AANa,IAAI,CAMRoS,gBAAgB,CAACtY,EAAGkG,AANhB,IAAI,CAMqBmS,eAAe,CAE7D,CAWAD,kBAAkBpY,CAAC,CAAEgH,CAAO,CAAE,CAC1B,IAAuB2Q,EAAkBzR,AAAxB,IAAI,CAA6B1L,OAAO,CAACmd,eAAe,EAAI,EAAGlB,EAAQzP,EAAQgO,IAAI,CAChG6C,EAAoB,CAAA,EAOxB,GANI3R,CAAAA,AAFa,IAAI,CAERsQ,WAAW,CAACC,KAAK,GAAKA,GAC/BvQ,AAHa,IAAI,CAGR8L,WAAW,GAAKhL,EAAQX,IAAI,AAAD,IACpCwR,EAAoB,CAAA,EACpB3R,AALa,IAAI,CAKRsQ,WAAW,CAACC,KAAK,CAAGA,EAC7BvQ,AANa,IAAI,CAMR8L,WAAW,CAAGhL,EAAQX,IAAI,EAEnCoQ,AAAU,UAAVA,GAAqBA,AAAU,SAAVA,EAAkB,CACvC,IAAM8B,EAAqB1S,EAAW8B,UAAU,CAACzB,AATpC,IAAI,CASyC8L,WAAW,CAAE9L,AAT1D,IAAI,CAS+D7L,QAAQ,CAAC4I,KAAK,CAACf,SAAS,EAClG,CAAEoD,MAAAA,CAAK,CAAEE,OAAAA,CAAM,CAAE,CAAGK,EAAWmQ,iBAAiB,CAACuC,GAEvD,GAAI,CAACrS,AAZQ,IAAI,CAYHsQ,WAAW,CAAClT,SAAS,EAAIuU,EAAmB,CACtD,IAAMW,EAAetS,AAbZ,IAAI,CAaiB8L,WAAW,CAAChK,GAAG,CAACyQ,eAAe,CAACzY,EAAE4R,OAAO,EAAG8G,EAAiBF,EACtFA,EAAaG,QAAQ,CAAC9G,MAAM,CACzB2G,EAAaG,QAAQ,CAACtT,GAAG,CAC7BG,EACJU,AAjBS,IAAI,CAiBJyQ,eAAe,CAAC4B,EAAmBnT,IAAI,CAAIqR,CAAAA,AAAU,UAAVA,EAAoBnR,EAAQ,CAAA,EAC5EqS,EAAkB,EAAGY,EAAmBlT,GAAG,CAAEsS,EAAiBe,EACtE,CACJ,MACK,GAAIjC,AAAU,QAAVA,GAAmBA,AAAU,WAAVA,EAAoB,CAC5C,IAAM8B,EAAqB1S,EAAW8B,UAAU,CAACzB,AAtBpC,IAAI,CAsByC8L,WAAW,EAAGwG,EAAetS,AAtB1E,IAAI,CAsB+E8L,WAAW,CAAChK,GAAG,CAC1GyQ,eAAe,CAACF,EAAmBlT,GAAG,EACvCmT,GACC,CAAA,AAAwB,IAAvBA,EAAaI,KAAK,EAAUnC,AAAU,QAAVA,GACzB+B,EAAaI,KAAK,GACfJ,EAAaK,SAAS,CAACja,MAAM,CAAG,GAChC6X,AAAU,WAAVA,CAAkB,GAG1BvQ,AA/BS,IAAI,CA+BJqR,SAAS,CAACvX,EAAGgH,EAE9B,MAEId,AAnCa,IAAI,CAmCR8L,WAAW,CAAG,KAAK,EAC5B9L,AApCa,IAAI,CAoCR0Q,eAAe,EAEhC,CAWA0B,iBAAiBtY,CAAC,CAAEqY,CAAe,CAAE,KAE7BhS,EAAMqB,EADV,IAAuBiQ,EAAkBzR,AAAxB,IAAI,CAA6B1L,OAAO,CAACmd,eAAe,EAAI,EAAGrO,EAAazD,EAAW8B,UAAU,CAAC0Q,GAAkBG,EAAeH,EAAgBI,eAAe,CAACzY,EAAE4R,OAAO,EAE7L,GAAI4G,EACA,IAAK,IAAI9Z,EAAI,EAAGC,EAAO6Z,EAAaG,QAAQ,CAACvQ,KAAK,CAACxJ,MAAM,CAAEF,EAAIC,EAAM,EAAED,EAAG,CACtE2H,EAAOmS,EAAaG,QAAQ,CAACvQ,KAAK,CAAC1J,EAAE,CACrCgJ,EAAc7B,EAAW8B,UAAU,CAACtB,GACpC,GAAM,CAAEf,MAAAA,CAAK,CAAEE,OAAAA,CAAM,CAAE,CAAGK,EACrBmQ,iBAAiB,CAACtO,GAAcoR,EAAc5S,AAP1C,IAAI,CAO+C7L,QAAQ,CAAC4I,KAAK,CAACf,SAAS,CAC/E6J,qBAAqB,GAAIgN,EAAeP,EAAaG,QAAQ,CAAC9G,MAAM,CACrE2G,EAAaG,QAAQ,CAACtT,GAAG,CAC7B,GAAIgB,EAAK/C,SAAS,EACd,GAAIkC,EAAS,GAAMuT,GACfrR,EAAYtC,IAAI,EAAIpF,EAAE2R,OAAO,EAC7BjK,EAAYE,KAAK,EAAI5H,EAAE2R,OAAO,CAC1BjK,EAAYrC,GAAG,CAAGrF,EAAE4R,OAAO,EAGtBlK,EAAYmK,MAAM,CAAG7R,EAAE4R,OAAO,GAEnC1L,AAnBH,IAAI,CAmBQyQ,eAAe,CAACjP,EAAYtC,IAAI,CAAG0T,EAAY1T,IAAI,CAAEsC,EAAYrC,GAAG,CAAGyT,EAAYzT,GAAG,CAAGG,EAAQF,EAAOyT,EAAcvT,GAC/HU,AApBH,IAAI,CAoBQsQ,WAAW,CAACC,KAAK,CAAG,eAC7BvQ,AArBH,IAAI,CAqBQ8L,WAAW,CAAG3L,GAE3B3H,EAAIC,OAEH,GAAI,AAAO,IAAND,GAAWgJ,EAAYtC,IAAI,CAAGpF,EAAE2R,OAAO,EAC5CjT,IAAMC,EAAO,GAAK+I,EAAYE,KAAK,CAAG5H,EAAE2R,OAAO,CAAG,CACnD,GAAIjK,EAAYtC,IAAI,CAAGpF,EAAE2R,OAAO,OAG3B,GAAIjK,EAAYE,KAAK,CAAG5H,EAAE2R,OAAO,CAAE,CAEpC,IAAMqH,EAAe1P,EAAW1B,KAAK,CAAGF,EAAYE,KAAK,CACzD1B,AAjCH,IAAI,CAiCQyQ,eAAe,CAACjP,EAAYtC,IAAI,CAAI,CAAA,AAAC1G,AAAM,IAANA,GAAWgJ,EAAYtC,IAAI,CAAGpF,EAAE2R,OAAO,CACjF,EACArM,CAAI,EAAKqS,EAAkB,EAAImB,EAAY1T,IAAI,CAAEsC,EAAYrC,GAAG,CAAGyT,EAAYzT,GAAG,CAAE2T,EAAerB,EACnGqB,EACArB,EAAiBoB,GAAevT,GACpCU,AAtCH,IAAI,CAsCQsQ,WAAW,CAACC,KAAK,CAAG,QAC7BvQ,AAvCH,IAAI,CAuCQ8L,WAAW,CAAG3L,CAC3B,CACA3H,EAAIC,CACR,OAEM0H,EAAK/C,SAAS,EAAI+C,IAASH,AA5C5B,IAAI,CA4CiCc,OAAO,GAEjDd,AA9CK,IAAI,CA8CA8L,WAAW,CAAG,KAAK,EAC5B9L,AA/CK,IAAI,CA+CA0Q,eAAe,GAEhC,CAER,CAWA/D,cAAcoG,CAAW,CAAE,CACvB,IAAuB7B,EAAc6B,GAAe/S,AAAnC,IAAI,CAAwCc,OAAO,CAChEgL,EAAc9L,AADD,IAAI,CACM8L,WAAW,CACtC,GAAI9L,AAFa,IAAI,CAERsQ,WAAW,CAACC,KAAK,EAAIzE,GAAeoF,GAM7C,GALAA,EAAYpP,GAAG,CAACkR,WAAW,CAAC9B,GAES,IAAjCA,EAAYpP,GAAG,CAACI,KAAK,CAACxJ,MAAM,EAC5BwY,EAAYpP,GAAG,CAAC3D,OAAO,GAEvB,AAAC6B,CAAAA,AAA+B,QAA/BA,AARQ,IAAI,CAQHsQ,WAAW,CAACC,KAAK,EAC3BvQ,AAA+B,WAA/BA,AATS,IAAI,CASJsQ,WAAW,CAACC,KAAK,AAAY,GACtCzE,EAAYZ,OAAO,KAAOgF,EAAQe,cAAc,CAACnP,GAAG,CAIpDmR,AAFenH,EAAYE,MAAM,CAACwB,MAAM,CAAC,CAAC,EAAG,KAAK,EAAG,AAAC1B,CAAAA,EAAYE,MAAM,CAACgG,WAAW,CAAClG,IAAgB,CAAA,EAChG9L,CAAAA,AAA+B,WAA/BA,AAbI,IAAI,CAaCsQ,WAAW,CAACC,KAAK,CAAgB,EAAI,CAAA,GAC5C2C,SAAS,CAAChC,EAAa,QAE7B,GAAIlR,AAA+B,iBAA/BA,AAhBI,IAAI,CAgBCsQ,WAAW,CAACC,KAAK,EAC/BzE,EAAYZ,OAAO,KAAOgF,EAAQe,cAAc,CAAC9Q,IAAI,CAAE,CAGvD,IAAM2B,EAAMqR,AADYrH,EACIhK,GAAG,CACzBsR,EAAuBtR,EAAIuR,YAAY,CAFrBvH,GAGxBhK,EAAIkR,WAAW,CAHSlH,GAIxB,IAAMO,EAAUvK,EAAI4K,OAAO,CAAC,CACxBlW,GAAImJ,EAAWsM,YAAY,CAAC,cAC5BD,OAAQ,CACJI,KAAM,CAAC,CAAC,EAAG,CAAC,EAAE,AAClB,CACJ,EAAG,KAAK,EAAGgH,EACP/G,CAAAA,EAAQiH,YAAY,GACpBjH,EAAQiH,YAAY,CAAClH,IAAI,CAAC,EAAE,CAAC8G,SAAS,CAXlBpH,GAYpBO,EAAQiH,YAAY,CAAClH,IAAI,CAAC,EAAE,CAAC8G,SAAS,CAAChC,GAE/C,MACSpF,EAAYZ,OAAO,KAAOgF,EAAQe,cAAc,CAAC9Q,IAAI,EAE1D2L,EAAYhK,GAAG,CAACoR,SAAS,CAAChC,EAAa,AAACpF,CAAAA,EAAYhK,GAAG,CAACuR,YAAY,CAACvH,IAAgB,CAAA,EAChF9L,CAAAA,AAA+B,UAA/BA,AArCI,IAAI,CAqCCsQ,WAAW,CAACC,KAAK,CAAe,EAAI,CAAA,GAI1D3Q,EAAUI,AAzCO,IAAI,CAyCF7L,QAAQ,CAAC4I,KAAK,CAAE,aAAc,CAAEoD,KAAM+Q,CAAY,GACrEtR,EAAUsR,EAAYpP,GAAG,CAAE,aAAc,CAAE3B,KAAM+Q,EAAapP,IAAKoP,EAAYpP,GAAG,AAAC,GACnF9B,AA3CiB,IAAI,CA2CZ0Q,eAAe,GACxBQ,EAAYvQ,IAAI,GAChBf,EAAUI,AA7CO,IAAI,CA6CF7L,QAAQ,CAAE,gBAAiB,CAC1CiF,KAAM,cACN8B,OAAQgW,EACRnU,MAAOiD,AAhDM,IAAI,CAgDD7L,QAAQ,CAAC4I,KAAK,AAClC,EACJ,CACJ,CAkBA,OAZAoT,EAASpU,cAAc,CAAG,CACtBkE,QAAS,CAAA,EACTyR,cAAe,GACfO,eAAgB,GAChBR,gBAAiB,EACrB,EAOOtB,CACX,GACAld,EAAgBD,EAAU,gCAAiC,CAACA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUY,CAAW,CAAE+L,CAAU,CAAE9L,CAAC,EACzN,GAAM,CAAEC,MAAAA,CAAK,CAAEiQ,SAAAA,CAAQ,CAAEhQ,cAAAA,CAAa,CAAE6L,UAAAA,CAAS,CAAE2T,YAAAA,CAAW,CAAE,CAAG1f,CAInE,OAAM2f,EAUF,OAAOC,SAAStf,CAAQ,CAAEuf,CAAI,CAAE,CAC5B,OAAO,IAAIF,EAAQrf,EAAUuf,EAAKpf,OAAO,CAC7C,CAeAsH,YAAYzH,CAAQ,CAAEG,CAAO,CAAE,CAC3B,IAAI,CAACH,QAAQ,CAAGA,EAChB,IAAI,CAACG,OAAO,CAAGR,EAAM,CAAC,EAAG0f,EAAQzX,cAAc,CAAE5H,EAASG,OAAO,CAACqf,MAAM,CAAErf,GAC1E,IAAI,CAACsf,WAAW,CAAG,KAAK,EACxB,IAAI,CAACC,GAAG,CAAG,IAAI,CAACvf,OAAO,CAAC8E,IAAI,CAAC0E,OAAO,CAAC,KAAO,GAC5C,IAAI,CAACgW,GAAG,CAAG,IAAI,CAACxf,OAAO,CAAC8E,IAAI,CAAC0E,OAAO,CAAC,KAAO,GAC5C,IAAI,CAAChC,QAAQ,CAAG,CAAA,EAChB,IAAI,CAACiY,MAAM,CAAG,EACd,IAAI,CAACC,iBAAiB,CAAG,EAAE,CAC3B,IAAI,CAACC,QAAQ,EACjB,CAUAA,UAAW,CACP,IAAMxc,EAAiB,IAAI,CAACtD,QAAQ,CAACsD,cAAc,CAC7Cyc,EAAY,IAAI,CAAC5f,OAAO,CAAC6f,IAAI,CAAC/U,KAAK,EAAI,EACvCgV,EAAa,IAAI,CAAC9f,OAAO,CAAC6f,IAAI,CAAC7U,MAAM,EAAI,EACzC+U,EAAqB,IAAI,CAAClgB,QAAQ,CAAC4I,KAAK,CAACf,SAAS,AAExD,CAAA,IAAI,CAACsY,SAAS,CAAGvgB,EAAc,MAAO,CAClCS,UAAWZ,EAAYa,UAAU,CAAC8f,UAAU,CAAG,IAC3C3gB,EAAYa,UAAU,CAAC+f,WAAW,CACtCxf,IAAKyC,EAAiB,mBAC1B,EAAG,CACC2H,MAAO8U,EAAY,KACnB5U,OAAQ8U,EAAa,KACrBlV,KAAM,SACV,EAAGmV,GAEH,IAAI,CAACI,UAAU,CAAG1gB,EAAc,MAAO,CACnCS,UAAWZ,EAAYa,UAAU,CAAC8f,UAAU,CAAG,IAC3C3gB,EAAYa,UAAU,CAACigB,WAAW,CACtC1f,IAAKyC,EAAiB,mBAC1B,EAAG,CACC2H,MAAO8U,EAAY,KACnB5U,OAAQ8U,EAAa,KACrBjV,IAAK,UACLD,KAAM,KACV,EAAGmV,GACH,IAAI,CAACM,eAAe,EACxB,CAKAlK,gBAAiB,CACb,IAAI,CAAC3O,QAAQ,CAAG,CAAA,EAChB,IAAI,CAAC8Y,gBAAgB,CAAG,KAAK,EAC7B,IAAI,CAAChB,WAAW,CAAG,KAAK,EACpB,IAAI,CAACU,SAAS,EACd,CAAA,IAAI,CAACA,SAAS,CAAC5Z,KAAK,CAACwE,IAAI,CAAG,SAAQ,EAEpC,IAAI,CAACuV,UAAU,EACf,CAAA,IAAI,CAACA,UAAU,CAAC/Z,KAAK,CAACwE,IAAI,CAAG,SAAQ,CAE7C,CAOAqS,iBAAiBpR,CAAI,CAAE,CAEnB,IAAI,CAACyT,WAAW,CAAGzT,EAEnB,IAAMqB,EAAc7B,EAAW8B,UAAU,CAACtB,EAAM,IAAI,CAAChM,QAAQ,CAAC4I,KAAK,CAACf,SAAS,EACvEkD,EAAOsC,EAAYtC,IAAI,EAAI,EAC3BC,EAAMqC,EAAYrC,GAAG,EAAI,EACzB,CAAEC,MAAAA,CAAK,CAAEE,OAAAA,CAAM,CAAE,CAAGK,EAAWmQ,iBAAiB,CAACtO,GACjD0S,EAAa,IAAI,CAAC5f,OAAO,CAAC6f,IAAI,CAAC/U,KAAK,EAAI,EACxCgV,EAAc,IAAI,CAAC9f,OAAO,CAAC6f,IAAI,CAAC7U,MAAM,EAAI,CAC5C,CAAA,IAAI,CAACgV,SAAS,GACd,IAAI,CAACA,SAAS,CAAC5Z,KAAK,CAACwE,IAAI,CAAG,AAACA,EAAOE,EAAQ8U,EAAa,KACzD,IAAI,CAACI,SAAS,CAAC5Z,KAAK,CAACyE,GAAG,CAAGA,EAAOG,EAAS,EAAM8U,EAAa,EAAK,MAEnE,IAAI,CAACK,UAAU,GACf,IAAI,CAACA,UAAU,CAAC/Z,KAAK,CAACyE,GAAG,CAAG,AAACA,EAAMG,EAAS8U,EAAc,KAC1D,IAAI,CAACK,UAAU,CAAC/Z,KAAK,CAACwE,IAAI,CAAG,AAACA,EAAQE,EAAQ,EAAM8U,EAAY,EAAM,KAE9E,CAMAW,sBAAuB,CACnB,IAAMjB,EAAc,IAAI,CAACA,WAAW,CACpC,GAAIA,EAAa,KAETkB,EAAe3U,EADnB,IAAMqB,EAAc7B,EAAW8B,UAAU,CAACmS,GAActB,EAAesB,EAAY9R,GAAG,CAACyQ,eAAe,CAAC/Q,EAAYrC,GAAG,EAAG4V,EAAgB,AAACzC,GAAgBA,EAAaG,QAAQ,CAACvQ,KAAK,EAAK,EAAE,CAE5L,IAAK,IAAI1J,EAAI,EAAGC,EAAOsc,EAAcrc,MAAM,CAIvC,AAJyCF,EAAIC,IAE7Cqc,EAAgB3U,AADhBA,CAAAA,EAAO4U,CAAa,CAACvc,EAAE,AAAD,EACDwD,SAAS,CAE1BmE,IAASyT,GAJsC,EAAEpb,EAOjDsc,IACAA,EAAcpa,KAAK,CAACsa,IAAI,CACpB,OAASF,EAAczV,WAAW,CAAG,KACzC,IAAI,CAAC2U,iBAAiB,CAACpW,IAAI,CAACuC,GAGxC,CACJ,CAIA8U,yBAA0B,KAElBH,EAAeI,EADnB,IAAMlB,EAAoB,IAAI,CAACA,iBAAiB,CAEhD,IAAK,IAAIxb,EAAI,EAAGC,EAAOub,EAAkBtb,MAAM,CAAEF,EAAIC,EAAM,EAAED,EACzDsc,CAAAA,EAAgBd,CAAiB,CAACxb,EAAE,CAACwD,SAAS,AAAD,IAEzC8Y,EAAcpa,KAAK,CAACsa,IAAI,CAAG,SAC3BE,EAAalB,CAAiB,CAACxb,EAAE,CAGzC,CAAA,IAAI,CAACwb,iBAAiB,CAAG,EAAE,CAEvBkB,IACAtV,EAAU,IAAI,CAACzL,QAAQ,CAAC4I,KAAK,CAAE,aAAc,CACzCoD,KAAM+U,CACV,GACAtV,EAAUsV,EAAWpT,GAAG,CAAE,aAAc,CACpC3B,KAAM+U,EACNpT,IAAKoT,EAAWpT,GAAG,AACvB,GAER,CAKA6S,iBAAkB,KAEVQ,EAAgBC,EAAgBC,EAAeC,EADnD,IAAM9K,EAAU,IAAI,AAEpBA,CAAAA,EAAQ2K,cAAc,CAAGA,EAAiB,SAAUrb,CAAC,EACjD0Q,EAAQ1O,QAAQ,CAAG,CAAA,EACnB0O,EAAQoK,gBAAgB,CAAG,IAC3BpK,EAAQrW,QAAQ,CAAC8N,YAAY,CAAC,CAAC,MAAO,OAAO,EAC7CuI,EAAQqK,oBAAoB,GAC5BrK,EAAQuJ,MAAM,CAAGja,EAAE2R,OAAO,AAC9B,EACAjB,EAAQ4K,cAAc,CAAGA,EAAiB,WACtC5K,EAAQ1O,QAAQ,CAAG,CAAA,EACnB0O,EAAQoK,gBAAgB,CAAG,IAC3BpK,EAAQrW,QAAQ,CAAC8N,YAAY,CAAC,CAAC,MAAO,OAAO,CACjD,EACAuI,EAAQ6K,aAAa,CAAGA,EAAgB,SAAUvb,CAAC,EAC3C0Q,EAAQ1O,QAAQ,EAChB0O,EAAQe,WAAW,CAACzR,EAE5B,EACA0Q,EAAQ8K,WAAW,CAAGA,EAAc,WAC5B9K,EAAQ1O,QAAQ,GAChB0O,EAAQ1O,QAAQ,CAAG,CAAA,EACnB0O,EAAQoK,gBAAgB,CAAG,KAAK,EAChCpK,EAAQyK,uBAAuB,GAC/BzK,EAAQrW,QAAQ,CAAC2Y,YAAY,CAAC,CAAC,MAAO,OAAO,CAAEtC,EAAQoJ,WAAW,EAC9DpJ,EAAQoJ,WAAW,EACnBpJ,EAAQ+G,gBAAgB,CAAC/G,EAAQoJ,WAAW,EAGxD,EAEA7P,EAAS,IAAI,CAACuQ,SAAS,CAAE,YAAaa,GACtCpR,EAAS,IAAI,CAAC0Q,UAAU,CAAE,YAAaW,GACvCrR,EAASU,SAAU,YAAa4Q,GAChCtR,EAASU,SAAU,UAAW6Q,GAQ9B,IAAMC,EAAY,KACV/K,EAAQoJ,WAAW,EACnBpJ,EAAQ+G,gBAAgB,CAAC/G,EAAQoJ,WAAW,CAEpD,EACA,GAAI,AAA0B,YAA1B,OAAO4B,eACP,IAAI,CAACC,cAAc,CAAG,IAAID,eAAeD,GACzC,IAAI,CAACE,cAAc,CAACC,OAAO,CAAClL,EAAQrW,QAAQ,CAAC4I,KAAK,CAACf,SAAS,MAE3D,CACD,IAAM2Z,EAAS5R,EAAS6R,OAAQ,SAAUL,GAC1CxR,EAAS,IAAI,CAAE,UAAW4R,EAC9B,CACJ,CAQApK,YAAYzR,CAAC,CAAE,CACX,IAAM8Z,EAAc,IAAI,CAACA,WAAW,CAC9BkB,EAAgBlB,GAAeA,EAAY5X,SAAS,CACpD4Y,EAAmB,IAAI,CAACA,gBAAgB,CAC9C,GAAIhB,GACAkB,GACA,CAAC,AAAC,CAAA,AAAClB,CAAAA,EAAY9R,GAAG,CAACkK,MAAM,CAACjP,KAAK,CAAC5I,QAAQ,EAAI,CAAC,CAAA,EAAG6L,QAAQ,EAAI,CAAC,CAAA,EACxDlE,QAAQ,CAAE,CACf,IAAM0F,EAAc7B,EAAW8B,UAAU,CAACmS,GACpC,CAAExU,MAAOyW,CAAc,CAAE,CAAGlW,EAAWmQ,iBAAiB,CAACnQ,EAAW8B,UAAU,CAACmS,EAAY9R,GAAG,GAEpG,GAAI8S,AAAqB,MAArBA,EAA0B,CAC1B,IAAMkB,EAAW,AAAChQ,KAAKiQ,GAAG,CAACjc,EAAE2R,OAAO,CAAGjK,EAAYtC,IAAI,CAAE2W,GACrDA,EACA,IACA,IACJjC,EAAYoC,OAAO,CAACF,GACpB,IAAI,CAAC/B,MAAM,CAAGja,EAAE2R,OAAO,AAC3B,CAEyB,MAArBmJ,GACAhB,EAAYoC,OAAO,CAAC,KAAK,EAAGlc,EAAE4R,OAAO,CAAGlK,EAAYrC,GAAG,EAG3DS,EAAU,IAAI,CAACzL,QAAQ,CAAC4I,KAAK,CAAE,aAAc,CACzCoD,KAAMyT,CACV,GACAhU,EAAUgU,EAAY9R,GAAG,CAAE,aAAc,CACrC3B,KAAMyT,EACN9R,IAAK8R,EAAY9R,GAAG,AACxB,GACA,IAAI,CAACyP,gBAAgB,CAACqC,EAC1B,CACJ,CAIAzV,SAAU,KAEFgW,EADJ,IAAM8B,EAAQ,CAAC,YAAa,aAAa,CAGzC1C,EAAY9O,SAAU,aACtB8O,EAAY9O,SAAU,WACtB,IAAI,CAACgR,cAAc,EAAES,UAAU,IAAI,CAAC/hB,QAAQ,CAAC4I,KAAK,CAACf,SAAS,EAC5D,IAAK,IAAIxD,EAAI,EAAGC,EAAOwd,EAAMvd,MAAM,CAAEF,EAAIC,EAAM,EAAED,EAG7C+a,EAFAY,EAAO,IAAI,CAAC8B,CAAK,CAACzd,EAAE,CAAC,CAEH,aAElB2b,EAAK/V,MAAM,EAEnB,CAQA+X,QAAS,CACL,IAAM7hB,EAAU,IAAI,CAACA,OAAO,CAC5B,MAAO,CACH8hB,OAAQ,4BACR9hB,QAAS,CACL2L,QAAS3L,EAAQ2L,OAAO,CACxBoW,OAAQ,CACJC,SAAUhiB,EAAQ+hB,MAAM,CAACC,QAAQ,CACjCC,UAAWjiB,EAAQ+hB,MAAM,CAACE,SAAS,AACvC,EACAnd,KAAM9E,EAAQ8E,IAAI,CAClB+a,KAAM,CACF/U,MAAO9K,EAAQ6f,IAAI,CAAC/U,KAAK,CACzBE,OAAQhL,EAAQ6f,IAAI,CAAC7U,MAAM,AAC/B,CACJ,CACJ,CACJ,CACJ,CAcA,OAbAkU,EAAQzX,cAAc,CAAG,CACrBkE,QAAS,CAAA,EACToW,OAAQ,CACJC,SAAU,GACVC,UAAW,EACf,EACAnd,KAAM,KACN+a,KAAM,CACF/U,MAAO,EACPE,OAAQ,EACZ,CACJ,EAEOkU,CACX,GACAvgB,EAAgBD,EAAU,kCAAmC,CAACA,CAAQ,CAAC,4BAA4B,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,sCAAsC,CAAEA,CAAQ,CAAC,iDAAiD,CAAEA,CAAQ,CAAC,gDAAgD,CAAEA,CAAQ,CAAC,sCAAsC,CAAEA,CAAQ,CAAC,yCAAyC,CAAEA,CAAQ,CAAC,iCAAiC,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,2CAA2C,CAAEA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,wBAAwB,CAAEA,CAAQ,CAAC,8BAA8B,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUyM,CAAI,CAAE8J,CAAQ,CAAE3V,CAAW,CAAE8H,CAAY,CAAEoE,CAAe,CAAE8C,CAAc,CAAE+G,CAAY,CAAEmE,CAAe,CAAEqC,CAAQ,CAAEqD,CAAO,CAAEnN,CAAiB,CAAE1G,CAAU,CAAEuQ,CAAO,CAAExG,CAAM,CAAE7V,CAAC,EAgBx6B,GAAM,CAAEkQ,SAAAA,CAAQ,CAAEhQ,cAAAA,CAAa,CAAEsK,IAAAA,CAAG,CAAEvK,MAAAA,CAAK,CAAE,CAAGD,EAiqBhD,OA3pBA,MAgBI+H,YAAYmB,CAAK,CAAEzI,CAAO,CAAE,CASxB,IAAI,CAACkiB,MAAM,CAAG,CAAA,EAId,IAAI,CAACrV,cAAc,CAAG,CAAA,EAItB,IAAI,CAAC1J,cAAc,CAAG,qEACtB,IAAI,CAACA,cAAc,CACf,AAACnD,GAAWA,EAAQmD,cAAc,EAAK,IAAI,CAACA,cAAc,CAC9D,IAAI,CAACnD,OAAO,CAAGR,EAEf,CACI4M,kBAAmB,CACf0E,MAAO,CACHrQ,KAAM,IAAI,CAAC0C,cAAc,CAAG,WAChC,CACJ,EACAlD,YAAa,CACTQ,KAAM,IAAI,CAAC0C,cAAc,CAAG,UAChC,EACAuI,SAAU,CACNC,QAAS,CAAA,CACb,EACAA,QAAS,CAAA,EACT0T,OAAQ,CACJ1T,QAAS,CAAA,CACb,EACAI,SAAU,CACNJ,QAAS,CAAA,CACb,EACAiB,SAAU,CACNf,KAAM,CACFF,QAAS,CAAA,CACb,EACA6B,IAAK,CACD7B,QAAS,CAAA,CACb,CACJ,EACAgO,MAAO,CACHwI,gBAAiB,CACbxW,QAAS,CAAA,EACTlL,KAAM,IAAI,CAAC0C,cAAc,CAAG,SAChC,CACJ,CACJ,EAAGnD,GAAW,CAAC,GACf,IAAI,CAACyI,KAAK,CAAGA,EACb,IAAI,CAAC1H,IAAI,CAAGvB,EAAM,CAAC,EAAGF,EAAYyB,IAAI,CAAE,IAAI,CAACf,OAAO,CAACe,IAAI,EACzD0H,EAAM2Z,YAAY,CAAG3Z,EAAMf,SAAS,CAChCe,EAAM4Z,UAAU,EAChB,IAAI,CAACC,UAAU,GAEnB,IAAI,CAACC,aAAa,CAAG,CAAA,EACrB,IAAI,CAAC9J,wBAAwB,CAAG,CAAA,EAChC,IAAI,CAACkB,KAAK,CAAG,CAAC,EACVlR,EAAM+Z,eAAe,GACrB,IAAI,CAAC3V,cAAc,CAAG,CAAC,IAAI,CAACpE,KAAK,CAACkN,cAAc,CAChD,IAAI,CAAC8M,cAAc,CAAG,CAClB3Z,UAAW,CAAA,EACXoT,QAASzc,EAAc,MAAO,CAC1BS,UAAWZ,EAAYa,UAAU,CAACuiB,uBAAuB,AAC7D,EAAG,CAAC,EAAGja,EAAMf,SAAS,CAC1B,EACA,IAAI,CAACib,WAAW,GAChB,IAAI,CAACvW,iBAAiB,CAAG,IAAI2F,EAAkBtJ,EAAMf,SAAS,CAAE,IAAI,CAACvE,cAAc,CAAE,IAAI,CAAE,IAAI,CAACnD,OAAO,CAACoM,iBAAiB,EAEzH,IAAI,CAACwW,WAAW,CAAGnjB,EAAc,MAAO,CACpCS,UAAWZ,EAAYa,UAAU,CAACyiB,WAAW,AACjD,EAAG,CAAC,EAAGna,EAAMf,SAAS,EACtB,IAAI,CAAC6Q,mBAAmB,CAAG,CAAA,EAC3B9P,EAAMC,UAAU,CAAG,IAAIlK,EAAWqkB,UAAU,CAACpa,GACzC,IAAI,CAACoE,cAAc,EACnBpE,EAAMf,SAAS,CAAC9E,SAAS,CAAC+B,GAAG,CAACiX,EAAQzb,UAAU,CAAC2iB,cAAc,EAG3E,CAUAtiB,mBAAoB,CAGZX,AAFa,IAAI,CAER8Z,KAAK,CAAC1Z,WAAW,GACrBJ,AAHQ,IAAI,CAGH8Z,KAAK,CAAC1Z,WAAW,CAAC6I,SAAS,EACrCjJ,AAJS,IAAI,CAIJ8Z,KAAK,CAAC1Z,WAAW,CACrB+Z,cAAc,CAACna,AALX,IAAI,CAKgB8Z,KAAK,CAACC,oBAAoB,EAE3D/Z,AAPa,IAAI,CAOR8Z,KAAK,CAAC1Z,WAAW,CAAC6Z,UAAU,CAAC,CAACja,AAP1B,IAAI,CAO+B8Z,KAAK,CAAC1Z,WAAW,CAAC6I,SAAS,EAEnF,CAIAsR,gBAAiB,CAETva,AADa,IAAI,CACRqiB,MAAM,CACfriB,AAFa,IAAI,CAERyI,UAAU,GAGnBzI,AALa,IAAI,CAKRwI,QAAQ,EAEzB,CAKA0a,MAAO,CAEC,IAAI,CAAC/iB,OAAO,CAACqf,MAAM,EAAE1T,SAAW,CAAC9L,AADpB,IAAI,CACyBgN,cAAc,EACxDhN,CAAAA,AAFa,IAAI,CAERqW,OAAO,CAAG,IAAIgJ,EAFV,IAAI,CAEwBrf,AAF5B,IAAI,CAEiCG,OAAO,CAACqf,MAAM,CAAA,EAEpExf,AAJiB,IAAI,CAIZ6L,QAAQ,CAAG,IAAImQ,EAJP,IAAI,CAIsBhc,AAJ1B,IAAI,CAI+BG,OAAO,CAAC0L,QAAQ,GAEhE7L,AANa,IAAI,CAMRG,OAAO,CAAC4M,QAAQ,EAAEY,KAAK7B,SAC/B9L,AAPY,IAAI,CAOPgP,UAAU,EACnBhP,AARY,IAAI,CAQPgN,cAAc,EACxBhN,CAAAA,AATa,IAAI,CASRgP,UAAU,CAAG,IAAIP,EATb,IAAI,CASgC,EAGjDzO,AAZa,IAAI,CAYRG,OAAO,CAAC4M,QAAQ,EAAEf,MAAMF,SAAW,CAAC9L,AAZhC,IAAI,CAYqCoN,WAAW,EACjEpN,CAAAA,AAba,IAAI,CAaRoN,WAAW,CAAG,IAAIzB,EAbd,IAAI,CAakC,EAGlD3L,AAhBY,IAAI,CAgBPyN,OAAO,EACjBzN,CAAAA,AAjBa,IAAI,CAiBRyN,OAAO,CAAG,IAAI+H,EAAa,IAAI,CAAC5M,KAAK,CAACf,SAAS,CAAE,IAAI,CAACvE,cAAc,CAjBhE,IAAI,CAiBsE,EAE3FtD,AAnBiB,IAAI,CAmBZ0iB,aAAa,CAAG,CAAA,CAC7B,CAKA7I,YAAa,CACT,IAAM7Z,EAAW,IAAI,CAAE4I,EAAQ5I,EAAS4I,KAAK,CAC7C,GAAI,IAAI,CAACoE,cAAc,CAAE,CACrB,IAAMzI,EAASqE,EAAMua,iBAAiB,CAAC5e,MAAM,CAC7C,IAAK,IAAIF,EAAI,EAAkBA,EAARE,EAAkB,EAAEF,EACvCrE,EAASojB,aAAa,CAACxa,EAAMua,iBAAiB,CAAC9e,EAAE,CAAC2H,IAAI,CAE9D,MAEI,IAAK,IAAI3H,EAAI,EAAGC,EAAOsE,EAAMgP,OAAO,CAACrT,MAAM,CAAEF,EAAIC,EAAM,EAAED,EACrDrE,EAASqjB,eAAe,CAACza,EAAMgP,OAAO,CAACvT,EAAE,CAG7CrE,CAAAA,EAASoN,WAAW,GAEpBwC,EAAS5P,EAASoN,WAAW,CAACvF,SAAS,CAAE,aAAc,WACnD7H,EAASwW,oBAAoB,EACjC,GACA5G,EAAS5P,EAASoN,WAAW,CAACvF,SAAS,CAAE,aAAc,WACnD7H,EAAS4Y,wBAAwB,CAAG,CAAA,CACxC,IAEA5Y,EAASgP,UAAU,GAEnBY,EAAS5P,EAASgP,UAAU,CAACnH,SAAS,CAAE,aAAc,WAClD7H,EAASwW,oBAAoB,EACjC,GACA5G,EAAS5P,EAASgP,UAAU,CAACnH,SAAS,CAAE,aAAc,WAClD7H,EAAS4Y,wBAAwB,CAAG,CAAA,CACxC,IAEJ,IAAM0K,EAAmB,IAAI,CAACtW,cAAc,CACxCpE,EAAMf,SAAS,CAAGe,EAAMkN,cAAc,CAC1ClG,EAAS0T,EAAkB,YAAatjB,EAASujB,eAAe,CAACjb,IAAI,CAACtI,IACtE4P,EAAS0T,EAAkB,QAAStjB,EAASwjB,gBAAgB,CAAClb,IAAI,CAACtI,IACnE4P,EAAS0T,EAAkB,aAAc,KACrCtjB,EAASyjB,kBAAkB,EAC/B,EACJ,CAMAhB,YAAa,CACT,IAAM7Z,EAAQ,IAAI,CAACA,KAAK,AAExBA,CAAAA,EAAMf,SAAS,CAAC+I,SAAS,CAAG,GAE5BhI,EAAMf,SAAS,CAAGjI,EAAc,MAAO,CACnCS,UAAW0b,EAAQzb,UAAU,CAAC2iB,cAAc,AAChD,EAAG,CAAC,EAAGra,EAAM2Z,YAAY,EAEzB3Z,EAAMkN,cAAc,CAAGlW,EAAc,MAAO,CACxCS,UAAW0b,EAAQzb,UAAU,CAACwV,cAAc,AAChD,EAAG,CAAC,EAAGlN,EAAMf,SAAS,EAClBe,EAAMzI,OAAO,CAACujB,GAAG,EACjB,IAAI,CAACC,UAAU,CAAC/a,EAAMzI,OAAO,CAACujB,GAAG,EAEjC9a,EAAMzI,OAAO,CAACyjB,WAAW,EAAI,CAAChb,EAAMgP,OAAO,CAACrT,MAAM,EAClD,IAAI,CAACsf,kBAAkB,CAACjb,EAAMzI,OAAO,CAACyjB,WAAW,CAEzD,CASAD,WAAWG,CAAU,CAAE,CACnB,IAAMlb,EAAQ,IAAI,CAACA,KAAK,CAAEmb,EAAiBD,EAAWlM,OAAO,CAC7D,IAAK,IAAIvT,EAAI,EAAGC,EAAOyf,EAAexf,MAAM,CAAEF,EAAIC,EAAM,EAAED,EACtDuE,EAAMgP,OAAO,CAACnO,IAAI,CAAC,IAAI8L,EAAO3M,EAAOjJ,EAAM,CAAC,EAAGmkB,EAAWE,aAAa,CAAED,CAAc,CAAC1f,EAAE,GAElG,CASAwf,mBAAmBtE,CAAI,CAAE,KAEjB1H,EADJ,IAAMjP,EAAQ,IAAI,CAACA,KAAK,CAExB,IAAK,IAAIvE,EAAI,EAAGC,EAAOib,EAAKhb,MAAM,CAAEF,EAAIC,EAAM,EAAED,EAC5CwT,CAAAA,EAAStC,EAAO+J,QAAQ,CAACC,CAAI,CAAClb,EAAE,CAAEuE,EAAK,GAEnCA,EAAMgP,OAAO,CAACnO,IAAI,CAACoO,EAG/B,CAKAwL,gBAAgBxL,CAAM,CAAE,CAEpB,IAAK,IAAIjO,EAAI,EAAGC,EAAOgO,EAAOI,IAAI,CAAC1T,MAAM,CAAEqF,EAAIC,EAAM,EAAED,EAAG,CACtD,IAAM+D,EAAMkK,EAAOI,IAAI,CAACrO,EAAE,CAC1B5J,AAHa,IAAI,CAGRikB,YAAY,CAACtW,GACtB,IAAK,IAAIuW,EAAI,EAAGC,EAAOxW,EAAII,KAAK,CAACxJ,MAAM,CAAE2f,EAAIC,EAAM,EAAED,EACjDlkB,AALS,IAAI,CAKJojB,aAAa,CAACzV,EAAII,KAAK,CAACmW,EAAE,CAE3C,CACJ,CAKAD,aAAatW,CAAG,CAAE,CACd,IAAM3N,EAAW,IAAI,CAErB,GAAIA,EAAS6L,QAAQ,CAAE,CACnB,IAAMA,EAAW7L,EAAS6L,QAAQ,CAClC+D,EAASjC,EAAI9F,SAAS,CAAE,aAAc,WAC9B7H,EAAS4Y,wBAAwB,EACjC5Y,CAAAA,EAASge,eAAe,CAAGrQ,CAAE,CAErC,GACAiC,EAASjC,EAAI9F,SAAS,CAAE,YAAa,SAAUlC,CAAC,EACxCkG,EAASlE,QAAQ,EAAIhC,EAAEoB,MAAM,GAAK4G,EAAI9F,SAAS,EAC/CgE,CAAAA,EAASmS,eAAe,CAAGrQ,CAAE,CAErC,GACAiC,EAASjC,EAAI9F,SAAS,CAAE,aAAc,WAC9BgE,EAASlE,QAAQ,EAAIkE,EAASmS,eAAe,GAAKrQ,GAClD9B,CAAAA,EAASmS,eAAe,CAAG,KAAK,CAAA,EAEhChe,EAAS4Y,wBAAwB,EACjC5Y,CAAAA,EAASge,eAAe,CAAG,KAAK,CAAA,CAExC,EACJ,CACJ,CAKAoF,cAAcpX,CAAI,CAAE,CAChB,IAAMhM,EAAW,IAAI,CACrB,GAAIgM,aAAgBoJ,EAChBxF,EAAS5D,EAAKnE,SAAS,CAAE,aAAc,WAC/B7H,EAAS4Y,wBAAwB,EACjC5Y,CAAAA,EAASyb,gBAAgB,CAAGzP,CAAG,CAEvC,QAGA,GAAIA,EAAKmT,YAAY,CACjBnf,EAASqjB,eAAe,CAACrX,EAAKmT,YAAY,OAEzC,GAAInf,EAASoN,WAAW,EAAIpB,EAAKnE,SAAS,GAC3C+H,EAAS5D,EAAKnE,SAAS,CAAE,aAAc,WAC/B7H,EAAS4Y,wBAAwB,EACjC5Y,CAAAA,EAASyb,gBAAgB,CAAGzP,CAAG,CAEvC,GAEKhM,EAAS6L,QAAQ,EAAI7L,EAASqW,OAAO,EAAG,CACzC,IAAMxK,EAAW7L,EAAS6L,QAAQ,CAClC+D,EAAS5D,EAAKnE,SAAS,CAAE,YAAa,SAAUlC,CAAC,EACzCkG,GACAA,EAASlE,QAAQ,EACjBhC,EAAEoB,MAAM,GAAKiF,EAAKnE,SAAS,GAC3BgE,EAAS4P,gBAAgB,CAAGzP,EAC5BH,EAASmS,eAAe,CAAG,KAAK,EAExC,GACApO,EAAS5D,EAAKnE,SAAS,CAAE,aAAc,WAC/BgE,GACAA,EAASlE,QAAQ,EACjBkE,EAAS4P,gBAAgB,GAAKzP,GAC9BH,CAAAA,EAAS4P,gBAAgB,CAAG,KAAK,CAAA,EAEjCzb,EAAS4Y,wBAAwB,EACjC5Y,CAAAA,EAASyb,gBAAgB,CAAG,KAAK,CAAA,CAEzC,EACJ,CAGZ,CAKAjT,UAAW,CAGFxI,AAFY,IAAI,CAEP0iB,aAAa,GACvB1iB,AAHa,IAAI,CAGRkjB,IAAI,GACbljB,AAJa,IAAI,CAIR6Z,UAAU,IAGvB7Z,AAPiB,IAAI,CAOZ4I,KAAK,CAACf,SAAS,CAAC9E,SAAS,CAAC+B,GAAG,CAACrF,EAAYa,UAAU,CAACqiB,eAAe,EACzE,IAAI,CAACL,eAAe,EACpB,CAAA,IAAI,CAACA,eAAe,CAAC/b,KAAK,CAAC4B,OAAO,CAAG,OAAM,EAE/CnI,AAXiB,IAAI,CAWZqiB,MAAM,CAAG,CAAA,EAClBriB,AAZiB,IAAI,CAYZ4Y,wBAAwB,CAAG,CAAA,CACxC,CAKAnQ,YAAa,CAET2b,AADsCpkB,AAArB,IAAI,CAA0B4I,KAAK,CAACf,SAAS,CACjD9E,SAAS,CAACkH,MAAM,CAACxK,EAAYa,UAAU,CAACqiB,eAAe,EAEpE3iB,AAHiB,IAAI,CAGZ8N,YAAY,GAEjB,IAAI,CAACyI,eAAe,EAAI,IAAI,CAACA,eAAe,YAAYjL,GACxD,IAAI,CAACiL,eAAe,CAAC5I,GAAG,EAAEO,eAG1B,IAAI,CAACoU,eAAe,EACpB,CAAA,IAAI,CAACA,eAAe,CAAC/b,KAAK,CAAC4B,OAAO,CAAG,MAAK,EAE1CnI,AAZa,IAAI,CAYRqW,OAAO,EAChBrW,AAba,IAAI,CAaRqW,OAAO,CAACC,cAAc,GAI/B,IAAI,CAAC1N,KAAK,CAACkN,cAAc,EACzB,CAAA,IAAI,CAAClN,KAAK,CAACkN,cAAc,CAACvP,KAAK,CAAC0E,KAAK,CAAG,MAAK,EAEjD,IAAI,CAACrC,KAAK,CAACyb,MAAM,GACjBrkB,AArBiB,IAAI,CAqBZqiB,MAAM,CAAG,CAAA,EAClBriB,AAtBiB,IAAI,CAsBZwW,oBAAoB,GAC7B,IAAI,CAACD,eAAe,CAAG,KAAK,EAC5B,IAAI,CAAC+N,oBAAoB,CAAG,KAAK,CACrC,CAQA3c,UAAW,CACP,OAAO,IAAI,CAAC0a,MAAM,AACtB,CAQAvU,aAAayW,CAAY,CAAE,CACvB,IAAuBC,EAAiBD,GAAgB,CAAC,OAAQ,MAAO,UAAU,CAClF,IAAK,IAAIlgB,EAAI,EAAGC,EAAOkgB,EAAejgB,MAAM,CAAEF,EAAIC,EAAM,EAAED,EACtD,OAAQmgB,CAAc,CAACngB,EAAE,EACrB,IAAK,OACGrE,AAJC,IAAI,CAIIoN,WAAW,EACpBpN,AALC,IAAI,CAKIoN,WAAW,CAACnE,SAAS,EAC9BjJ,AANC,IAAI,CAMIoN,WAAW,CAAC9C,IAAI,GAE7B,KAEJ,KAAK,MACGtK,AAXC,IAAI,CAWIgP,UAAU,EAAIhP,AAXtB,IAAI,CAW2BgP,UAAU,CAAC/F,SAAS,EACpDjJ,AAZC,IAAI,CAYIgP,UAAU,CAAC1E,IAAI,GAE5B,KAEJ,KAAK,UACGtK,AAjBC,IAAI,CAiBIyN,OAAO,EAAIzN,AAjBnB,IAAI,CAiBwByN,OAAO,CAACxE,SAAS,EAC9CjJ,AAlBC,IAAI,CAkBIyN,OAAO,CAACnD,IAAI,EAOjC,CAER,CAYAqO,aAAa4L,CAAY,CAAE9E,CAAW,CAAE,CACpC,IAAuBgF,EAAiBF,GAAgB,CAAC,OAAQ,MAAO,UAAU,CAClF,IAAK,IAAIlgB,EAAI,EAAGC,EAAOmgB,EAAelgB,MAAM,CAAEF,EAAIC,EAAM,EAAED,EACtD,OAAQogB,CAAc,CAACpgB,EAAE,EACrB,IAAK,OACGob,GAAezf,AAJd,IAAI,CAImBoN,WAAW,EACnCpN,AALC,IAAI,CAKIoN,WAAW,CAACF,WAAW,CAACuS,GAErC,KAEJ,KAAK,MACGA,GAAeA,EAAY9R,GAAG,EAAI3N,AAVjC,IAAI,CAUsCgP,UAAU,EACrDhP,AAXC,IAAI,CAWIgP,UAAU,CAAC9B,WAAW,CAACuS,EAAY9R,GAAG,EAEnD,KAEJ,KAAK,UACG3N,AAhBC,IAAI,CAgBIyN,OAAO,EAAI,CAACzN,AAhBpB,IAAI,CAgByByN,OAAO,CAACxE,SAAS,EAC/CjJ,AAjBC,IAAI,CAiBIyN,OAAO,CAACjB,IAAI,EAOjC,CAER,CAMAsW,aAAc,CACV,IAAM9iB,EAAW,IAAI,CACf,CAAE4I,MAAAA,CAAK,CAAEzI,QAAAA,CAAO,CAAE2Z,MAAAA,CAAK,CAAE,CAAG9Z,EAqBlC,GAnBA8Z,EAAMjS,SAAS,CAAGyI,SAAS1Q,aAAa,CAAC,OACzCka,EAAMjS,SAAS,CAAC9E,SAAS,CAAC+B,GAAG,CAACrF,EAAYa,UAAU,CAACokB,SAAS,EAC1D9b,EAAMkN,cAAc,CAEpBlN,EAAMkN,cAAc,CAAC/V,UAAU,CAAC6Z,YAAY,CAACE,EAAMjS,SAAS,CAAEe,EAAMkN,cAAc,EAIlFlN,EAAMf,SAAS,CAAC+R,YAAY,CAACE,EAAMjS,SAAS,CAAEe,EAAMf,SAAS,CAAC8c,UAAU,EAGxExkB,EAAQC,WAAW,EAAID,EAAQC,WAAW,CAAC0L,OAAO,GAClDgO,EAAMC,oBAAoB,CAAGxS,EAAazH,mBAAmB,CAACga,EAAMjS,SAAS,CAAE7H,GAE1EA,EAAS8Z,KAAK,CAAC1Z,WAAW,EAC3BJ,CAAAA,EAAS8Z,KAAK,CAAC1Z,WAAW,CAAG,IAAIuZ,EAAgB3Z,EAAS4I,KAAK,CAACf,SAAS,CAAE7H,EAASG,OAAO,CAACC,WAAW,EAAI,CAAC,EAAGJ,EAAQ,GAI3HG,EAAQ2Z,KAAK,EAAEwI,iBAAiBxW,SAChC3L,EAAQ4M,QAAQ,EAAEf,MAAMF,SACxB,CAAC,IAAI,CAACkB,cAAc,CAAE,CACtB,IAAM4X,EAAazkB,EAAQ2Z,KAAK,CAACwI,eAAe,CAAC1hB,IAAI,AACrD,CAAA,IAAI,CAAC0hB,eAAe,CAAG/a,EAAaL,YAAY,CAAC4S,EAAMjS,SAAS,CAAE,CAC9DxH,UAAWZ,EAAYa,UAAU,CAACukB,YAAY,CAC9CjkB,KAAMgkB,EACN9jB,KAAM,IAAI,CAACI,IAAI,CAACyV,YAAY,CAC5BjS,SAAU,KAEF1E,EAASyN,OAAO,GAChBzN,EAASyN,OAAO,CAACjB,IAAI,GACrBxM,EAASmM,cAAc,GAE/B,EACA5F,MAAO,CACH4B,QAAS,MACb,CACJ,EACJ,CACJ,CAIAob,iBAAkB,KAQVuB,EANJ,GAAI,AAAC9kB,AADY,IAAI,CACP2H,QAAQ,IACjB3H,AAFY,IAAI,CAEP4Y,wBAAwB,EACjC,CAAA,AAAC5Y,AAHW,IAAI,CAGNyb,gBAAgB,EAAKzb,AAHnB,IAAI,CAGwBge,eAAe,AAAD,IACvD,AAAChe,CAAAA,AAJY,IAAI,CAIP6L,QAAQ,EAAI,CAAC,CAAA,EAAGlE,QAAQ,GAKlC3H,AATa,IAAI,CASRyb,gBAAgB,CACzBqJ,EAAc9kB,AAVD,IAAI,CAUMyb,gBAAgB,CAElCzb,AAZQ,IAAI,CAYHge,eAAe,EAE7B8G,CAAAA,EAAcC,AADD/kB,AAbA,IAAI,CAaKge,eAAe,CACZnG,MAAM,CAACmN,UAAU,AAAD,EAE7C,IAAI,CAACV,oBAAoB,CAAGQ,EACxBA,GAAa,CACb,IAAMG,EAAqBzZ,EACtB8B,UAAU,CAACwX,EAAa9kB,AAnBhB,IAAI,CAmBqB4I,KAAK,CAACf,SAAS,EAC/C,CAAEoD,MAAAA,CAAK,CAAEE,OAAAA,CAAM,CAAE,CAAGK,EACrBmQ,iBAAiB,CAACsJ,GACvBjlB,AAtBa,IAAI,CAsBRklB,kBAAkB,CAACD,EAAmBla,IAAI,CAAEka,EAAmBja,GAAG,CAAEC,EAAOE,EACxF,CACJ,CAIAqL,sBAAuB,CACnB,IAAI,CAACoC,wBAAwB,CAAG,CAAA,EAC5B,IAAI,CAAC/M,QAAQ,EACb,CAAA,IAAI,CAACA,QAAQ,CAAC4P,gBAAgB,CAAG,KAAK,CAAA,EAE1C,IAAI,CAACA,gBAAgB,CAAG,KAAK,EAC7B,IAAI,CAACgI,kBAAkB,EAC3B,CAIAD,kBAAmB,CACX,IAAI,CAAC5K,wBAAwB,EAC7B,IAAI,CAAC0L,oBAAoB,EACzB,IAAI,CAAC/N,eAAe,GAAK,IAAI,CAAC+N,oBAAoB,EAClD,IAAI,CAAClM,kBAAkB,CAAC,IAAI,CAACkM,oBAAoB,CAAE,IAAI,CAAC/N,eAAe,CAE/E,CAKA6B,mBAAmB7B,CAAe,CAAE4O,CAAkB,CAAE,CAGpD,GAAI5O,aAA2BnB,GAC3BgQ,AAFeD,aAEO/P,EACtBpV,AAJa,IAAI,CAIRuW,eAAe,CAAGA,EAC3BvW,AALa,IAAI,CAKRoN,WAAW,EAAEF,YAAYqJ,OAEjC,CACD,IAAM8O,EAPSF,GAOmBxX,GAClC3N,CATa,IAAI,CASRuW,eAAe,CAAGA,EAC3BvW,AAVa,IAAI,CAUR2Y,YAAY,CAAC,CAAC,MAAO,OAAO,CAAEpC,GACnC,CAAA,CAAC8O,GAAiBA,IAAkB9O,EAAgB5I,GAAG,AAAD,IAClD0X,GAEAA,EAAcnX,YAAY,GAG1BqI,EAAgB5I,GAAG,EACnB4I,EAAgB5I,GAAG,CAACO,YAAY,IAGpClO,AArBS,IAAI,CAqBJqW,OAAO,EAChBrW,AAtBS,IAAI,CAsBJqW,OAAO,CAAC+G,gBAAgB,CAAC7G,EAE1C,CACJ,CAKA2O,mBAAmBna,CAAI,CAAEC,CAAG,CAAEC,CAAK,CAAEE,CAAM,CAAE,CACpC,IAAI,CAACyX,cAAc,GAGxB,IAAI,CAACA,cAAc,CAAC3Z,SAAS,CAAG,CAAA,EAChCiB,EAAI,IAAI,CAAC0Y,cAAc,CAACvG,OAAO,CAAE,CAC7BlU,QAAS,QACT4C,KAAMA,EAAO,KACbC,IAAKA,EAAM,KACXG,OAAQA,EAAS,KACjBF,MAAOA,EAAQ,IACnB,GACJ,CAKAwY,oBAAqB,CACb,IAAI,CAACb,cAAc,EAAE3Z,YACrB,IAAI,CAAC2Z,cAAc,CAAC3Z,SAAS,CAAG,CAAA,EAChC,IAAI,CAAC2Z,cAAc,CAACvG,OAAO,CAAC9V,KAAK,CAAC4B,OAAO,CAAG,OAEpD,CAQAgE,eAAelC,CAAM,CAAE,CACnB,IAAuBqb,EAAMtlB,AAAZ,IAAI,CAAiB+iB,WAAW,CAAEwC,EAAQD,GAAKviB,UAAUuW,SAAS7Z,EAAYa,UAAU,CAACklB,iBAAiB,CACvH,CAACvb,GAAWsb,EAIPtb,GAAUsb,IACfD,GAAKviB,UAAUkH,OAAOxK,EAAYa,UAAU,CAACklB,iBAAiB,EAC9DxlB,AAPa,IAAI,CAOR0Y,mBAAmB,CAAG,CAAA,IAL/B4M,GAAKviB,UAAU+B,IAAIrF,EAAYa,UAAU,CAACklB,iBAAiB,EAC3DxlB,AAHa,IAAI,CAGR0Y,mBAAmB,CAAG,CAAA,EAMvC,CACJ,CAQJ,GACA5Z,EAAgBD,EAAU,oCAAqC,CAACA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,wBAAwB,CAAC,CAAE,SAAUa,CAAC,CAAEqc,CAAO,EAgBnJ,GAAM,CAAEnM,SAAAA,CAAQ,CAAE,CAAGlQ,EAqFrB,OApFA,MAMI+H,YAAYge,CAAc,CAAE,CACxB,IAAI,CAACC,MAAM,CAAG,CAAA,EACd,IAAI,CAAC9c,KAAK,CAAG6c,EAEb,IAAI,CAAC7c,KAAK,CAAC2Z,YAAY,CAACxf,SAAS,CAAC+B,GAAG,CAACiX,EAAQ4J,eAAe,CAAG,cACpE,CASA3iB,QAAS,CAEL6F,AADmB,IAAI,AACb,CAAC6c,AADuB,IAAI,CAACA,MAAM,CACzB,QAAU,OAAO,EACzC,CAIAE,MAAO,CACH,GAAI,IAAI,CAACF,MAAM,CACX,OAEJ,IAAM7c,EAAa,IAAI,CAAED,EAAQC,EAAWD,KAAK,CAE3Cid,EAAejW,EAAShH,EAAM2Z,YAAY,CAACuD,aAAa,CAC9D,mBAAoB,WACZjd,EAAW6c,MAAM,EACjB7c,EAAW6c,MAAM,CAAG,CAAA,EACpB7c,EAAWoI,KAAK,KAGhBpI,EAAW6c,MAAM,CAAG,CAAA,EACpB7c,EAAWkd,aAAa,GAEhC,EACAld,CAAAA,EAAWmd,qBAAqB,CAAG,KAC/BH,GACJ,EAGAI,AAFgBrd,EAAM2Z,YAAY,CAAC2D,iBAAiB,GAE5CC,KAAK,CAAC,KACV,MAAM,AAAIC,MAAM,gCACpB,EACJ,CAIAnV,OAAQ,CACJ,IAAyBrI,EAAQC,AAAd,IAAI,CAAqBD,KAAK,AAE7CC,CAFe,IAAI,CAER6c,MAAM,EACjB9c,EAAM2Z,YAAY,CAACuD,aAAa,YAAYO,UACvCzd,EAAM2Z,YAAY,CAACuD,aAAa,CAACQ,cAAc,GAGpDzd,AAPe,IAAI,CAORmd,qBAAqB,EAChCnd,CAAAA,AARe,IAAI,CAQRmd,qBAAqB,CAC5Bnd,AATW,IAAI,CASJmd,qBAAqB,EAAC,EAEzCnd,AAXmB,IAAI,CAWZ6c,MAAM,CAAG,CAAA,EACpB,IAAI,CAACK,aAAa,EACtB,CAIAA,eAAgB,CACZ,IAAM/lB,EAAW,IAAI,CAAC4I,KAAK,CAAC5I,QAAQ,CAAEI,EAAcJ,GAAYA,EAAS8Z,KAAK,CAAC1Z,WAAW,CAAEgB,EAAShB,GAAeA,EAAY+I,KAAK,CAACT,cAAc,CACpJ,GAAItH,GAAUA,EAAO2G,YAAY,CAAE,CAC/B,IAAM7G,EAAOlB,EAASkB,IAAI,AAC1BE,CAAAA,EAAO2G,YAAY,CAAC6I,SAAS,CACzB,AAAC,CAAA,IAAI,CAAC8U,MAAM,CAAGxkB,EAAKolB,cAAc,CAAGplB,EAAKwH,cAAc,AAAD,GAAM,EACrE,CACJ,CACJ,CAGJ,GACA5J,EAAgBD,EAAU,gCAAiC,CAACA,CAAQ,CAAC,wBAAwB,CAAEA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,oCAAoC,CAAC,CAAE,SAAUkd,CAAO,CAAEwK,CAAQ,CAAEC,CAAU,EAsB/N,OARAC,AADU1K,EACRwK,QAAQ,CAAGA,EACbE,AAFU1K,EAERiH,UAAU,CAAGwD,EAFLzK,CAUd,EACJ"}