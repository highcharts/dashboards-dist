{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards Layout 2.0.0 (2024-03-13)\n *\n * (c) 2009-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/modules/layout', ['dashboards'], function (Dashboards) {\n            factory(Dashboards);\n            factory.Dashboards = Dashboards;\n            return factory;\n        });\n    } else {\n        factory(typeof Dashboards !== 'undefined' ? Dashboards : undefined);\n    }\n}(function (Dashboards) {\n    'use strict';\n    var _modules = Dashboards ? Dashboards._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Dashboards/EditMode/EditRenderer.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js']], function (EditGlobals, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, createElement, defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Function to create a context button.\n         * @internal\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param editMode\n         * EditMode instance.\n         *\n         * @returns\n         * Context button element.\n         */\n        function renderContextButton(parentNode, editMode) {\n            const contextMenuOptions = editMode.options.contextMenu;\n            let contextButton;\n            if (contextMenuOptions) {\n                contextButton = createElement('button', {\n                    className: EditGlobals.classNames.contextMenuBtn,\n                    onclick: function (event) {\n                        event.stopPropagation();\n                        editMode.onContextBtnClick();\n                    }\n                }, {}, parentNode);\n                // Add the icon if defined.\n                if (contextMenuOptions.icon) {\n                    createElement('img', {\n                        src: contextMenuOptions.icon,\n                        className: EditGlobals.classNames.icon\n                    }, {}, contextButton);\n                }\n                // Add text next to the icon if defined.\n                if (contextMenuOptions.text) {\n                    createElement('span', {\n                        className: EditGlobals.classNames.contextMenuBtnText,\n                        textContent: contextMenuOptions.text\n                    }, {}, contextButton);\n                }\n                contextButton.setAttribute('aria-label', editMode.lang.accessibility.contextMenu.button);\n                contextButton.setAttribute('aria-expanded', 'false');\n            }\n            return contextButton;\n        }\n        /**\n         * Creates the collapsable header element.\n         * @internal\n         *\n         * @param parentElement\n         * The HTMLElement to which the element should be rendered to.\n         *\n         * @param options\n         * Nested header options.\n         *\n         * @returns the outer element and content in the collapsable div.\n         */\n        function renderCollapseHeader(parentElement, options) {\n            const { name, showToggle, onchange, isEnabled, isNested, lang } = options;\n            const accordion = createElement('div', {\n                className: EditGlobals.classNames[isNested ? 'accordionNestedWrapper' : 'accordionContainer'] + ' ' + EditGlobals.classNames.collapsableContentHeader\n            }, {}, parentElement);\n            const header = createElement('div', {\n                className: EditGlobals.classNames.accordionHeader\n            }, {}, accordion);\n            const headerBtn = createElement('button', { className: EditGlobals.classNames.accordionHeaderBtn }, {}, header);\n            createElement('span', {\n                textContent: lang[name] || name\n            }, {}, headerBtn);\n            if (showToggle) {\n                renderToggle(header, {\n                    enabledOnOffLabels: true,\n                    id: name,\n                    name: '',\n                    onchange: onchange,\n                    value: isEnabled || false,\n                    lang\n                });\n            }\n            const headerIcon = createElement('span', {\n                className: EditGlobals.classNames.accordionHeaderIcon + ' ' +\n                    EditGlobals.classNames.collapsedElement\n            }, {}, headerBtn);\n            const content = createElement('div', {\n                className: EditGlobals.classNames.accordionContent + ' ' +\n                    EditGlobals.classNames.hiddenElement\n            }, {}, accordion);\n            headerBtn.addEventListener('click', function () {\n                content.classList.toggle(EditGlobals.classNames.hiddenElement);\n                headerIcon.classList.toggle(EditGlobals.classNames.collapsedElement);\n            });\n            return { outerElement: accordion, content: content };\n        }\n        /**\n         * Function to create select element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param options\n         * Select form field options.\n         *\n         * @returns\n         * Select element\n         */\n        function renderSelect(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const iconsURLPrefix = options.iconsURLPrefix || '';\n            const customSelect = createElement('div', {\n                className: EditGlobals.classNames.dropdown +\n                    ' ' +\n                    EditGlobals.classNames.collapsableContentHeader\n            }, {}, parentElement);\n            const btn = createElement('button', {\n                className: EditGlobals.classNames.dropdownButton\n            }, {}, customSelect);\n            const btnContent = createElement('div', {\n                className: EditGlobals.classNames.dropdownButtonContent\n            }, {}, btn);\n            const iconURL = (U.find(options.selectOptions, (item) => item.name === options.value) || {}).iconURL;\n            let headerIcon;\n            if (iconURL) {\n                headerIcon = createElement('img', {\n                    src: iconsURLPrefix + iconURL,\n                    className: EditGlobals.classNames.icon\n                }, {}, btnContent);\n            }\n            const placeholder = createElement('span', {\n                textContent: options.value,\n                id: options.id || ''\n            }, {}, btnContent);\n            const dropdownPointer = createElement('img', {\n                className: EditGlobals.classNames.dropdownIcon +\n                    ' ' +\n                    EditGlobals.classNames.collapsedElement,\n                src: iconsURLPrefix + 'dropdown-pointer.svg'\n            }, {}, btn);\n            const dropdown = createElement('ul', {\n                className: EditGlobals.classNames.dropdownContent +\n                    ' ' +\n                    EditGlobals.classNames.hiddenElement\n            }, {}, customSelect);\n            btn.addEventListener('click', function () {\n                dropdown.classList.toggle(EditGlobals.classNames.hiddenElement);\n                dropdownPointer.classList.toggle(EditGlobals.classNames.collapsedElement);\n            });\n            for (let i = 0, iEnd = options.selectOptions.length; i < iEnd; ++i) {\n                renderSelectElement(merge(options.selectOptions[i] || {}, { iconsURLPrefix }), dropdown, placeholder, options.id, dropdownPointer, headerIcon, options.onchange);\n            }\n            return customSelect;\n        }\n        /**\n         * @internal\n         */\n        function renderSelectElement(option, dropdown, placeholder, id, dropdownPointer, headerIcon, callback) {\n            const iconURL = option.iconsURLPrefix + option.iconURL;\n            const selectOption = createElement('li', {}, {}, dropdown);\n            const selectOptionBtn = createElement('button', { className: EditGlobals.classNames.customSelectButton }, {}, selectOption);\n            if (option.iconURL) {\n                createElement('img', {\n                    src: iconURL\n                }, {}, selectOptionBtn);\n            }\n            createElement('span', { textContent: option.name || '' }, {}, selectOptionBtn);\n            selectOptionBtn.addEventListener('click', function () {\n                dropdown.classList.add(EditGlobals.classNames.hiddenElement);\n                dropdownPointer.classList.toggle(EditGlobals.classNames.collapsedElement);\n                placeholder.textContent = option.name || '';\n                if (headerIcon && option.iconURL) {\n                    headerIcon.src = iconURL;\n                }\n                if (callback) {\n                    return callback(option.name);\n                }\n            });\n        }\n        /**\n         * Function to create toggle element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param options\n         * Form field options.\n         *\n         * @returns\n         * Toggle element.\n         */\n        function renderToggle(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            const lang = options.lang, value = options.value, title = options.title || options.name, langKey = options.langKey;\n            const toggleContainer = createElement('button', {\n                className: EditGlobals.classNames.toggleContainer,\n                type: 'button',\n                role: 'switch',\n                ariaChecked: false,\n                ariaLabel: langKey ? lang.accessibility[langKey][options.name] : ''\n            }, {}, parentElement);\n            if (title) {\n                renderText(toggleContainer, { title });\n            }\n            if (options.enabledOnOffLabels) {\n                renderText(toggleContainer, {\n                    title: lang.off,\n                    className: EditGlobals.classNames.toggleLabels\n                });\n            }\n            const toggle = createElement('label', {\n                className: EditGlobals.classNames.toggleWrapper +\n                    ' ' + (options.className || '')\n            }, {}, toggleContainer);\n            const input = renderCheckbox(toggle, value), callbackFn = options.onchange;\n            callbackFn && toggleContainer.addEventListener('click', (e) => {\n                callbackFn(!input.checked);\n                input.checked = !input.checked;\n                toggleContainer.setAttribute('aria-checked', input.checked);\n                e.stopPropagation();\n            });\n            const slider = createElement('span', {\n                className: EditGlobals.classNames.toggleSlider\n            }, {}, toggle);\n            callbackFn && slider.addEventListener('click', (e) => {\n                e.preventDefault();\n            });\n            if (options.enabledOnOffLabels) {\n                renderText(toggleContainer, {\n                    title: lang.on,\n                    className: EditGlobals.classNames.toggleLabels\n                });\n            }\n            return toggleContainer;\n        }\n        /**\n         * Function to create text element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended\n         *\n         * @param text\n         * Text to be displayed\n         *\n         * @param callback\n         * Callback function to be fired on the click\n         *\n         * @returns text Element\n         */\n        function renderText(parentElement, options) {\n            let textElem;\n            const { title: text, className, isLabel } = options;\n            if (parentElement) {\n                const labelFor = isLabel ? { htmlFor: text } : {};\n                textElem = createElement(isLabel ? 'label' : 'div', {\n                    className: EditGlobals.classNames.labelText + ' ' + (className || ''),\n                    textContent: text,\n                    ...labelFor\n                }, {}, parentElement);\n            }\n            return textElem;\n        }\n        /**\n         * Function to create Icon element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param icon\n         * Icon URL\n         *\n         * @param callback\n         * Callback function\n         *\n         * @returns\n         * Icon Element\n         */\n        function renderIcon(parentElement, options) {\n            const { icon, callback } = options;\n            if (!parentElement) {\n                return;\n            }\n            const iconElem = createElement('div', {\n                onclick: callback,\n                className: options.className || ''\n            }, {}, parentElement);\n            iconElem.style['background-image'] = 'url(' + icon + ')';\n            const mousedown = options.mousedown;\n            const click = options.click;\n            if (mousedown) {\n                iconElem.onmousedown = function () {\n                    mousedown.apply(this, arguments);\n                };\n            }\n            if (click) {\n                iconElem.addEventListener('click', function () {\n                    click.apply(this, arguments);\n                });\n            }\n            return iconElem;\n        }\n        /**\n         * Function to create input element.\n         *\n         * @param parentElement\n         * the element to which the new element should be appended\n         *\n         * @param options\n         * Form field options\n         *\n         * @returns\n         * Input Element\n         */\n        function renderInput(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const input = createElement('input', {\n                type: 'text',\n                onclick: options.callback,\n                id: options.id || '',\n                name: options.name || '',\n                value: ((defined(options.value) &&\n                    options.value.toString().replace(/\\\"/g, '')) || '')\n            }, {}, parentElement);\n            const onchange = options.onchange;\n            if (onchange) {\n                input.addEventListener('change', function (e) {\n                    onchange(e.target.value);\n                });\n            }\n            return input;\n        }\n        /**\n         * Function to create textarea element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended\n         *\n         * @param options\n         * Form field options\n         *\n         * @returns\n         * textarea Element\n         */\n        function renderTextarea(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const textarea = createElement('textarea', {\n                id: options.id,\n                name: options.name,\n                value: options.value || ''\n            }, {}, parentElement);\n            const onchange = options.onchange;\n            if (onchange) {\n                textarea.addEventListener('change', function (e) {\n                    onchange(e.target.value);\n                });\n            }\n            return textarea;\n        }\n        /**\n         * Function to render the input of type checkbox.\n         *\n         * @param parentElement\n         * An element to which render the checkbox to\n         *\n         * @param checked\n         * Whether the checkbox should be checked or not.\n         *\n         * @returns\n         * The checkbox element\n         */\n        function renderCheckbox(parentElement, checked) {\n            let input;\n            if (parentElement) {\n                input = createElement('input', {\n                    type: 'checkbox',\n                    checked: !!checked\n                }, {}, parentElement);\n            }\n            return input;\n        }\n        /**\n         * Function to create button element.\n         *\n         * @param parentElement\n         * the element to which the new element should be appended\n         *\n         * @param options\n         * Button field options\n         *\n         * @returns\n         * Button Element\n         */\n        function renderButton(parentElement, options) {\n            let button;\n            if (!parentElement) {\n                return;\n            }\n            button = createElement('button', {\n                className: (EditGlobals.classNames.button + ' ' +\n                    (options.className || '')),\n                onclick: options.callback,\n                textContent: options.text\n            }, options.style || {}, parentElement);\n            if (options.icon) {\n                button.style['background-image'] =\n                    'url(' + options.icon + ')';\n            }\n            return button;\n        }\n        /**\n         * Get the renderer function based on the type of the element to render.\n         *\n         * @param type\n         * Type of the element to render\n         *\n         * @returns\n         * function to render a specific element\n         */\n        function getRendererFunction(type) {\n            return {\n                select: renderSelect,\n                toggle: renderToggle,\n                text: renderText,\n                collapse: renderCollapseHeader,\n                icon: renderIcon,\n                contextButton: renderContextButton,\n                input: renderInput,\n                textarea: renderTextarea,\n                checkbox: renderCheckbox,\n                button: renderButton\n            }[type];\n        }\n        const EditRenderer = {\n            renderSelect,\n            renderToggle,\n            renderText,\n            renderCollapseHeader,\n            renderIcon,\n            renderContextButton,\n            renderInput,\n            renderTextarea,\n            renderCheckbox,\n            renderButton,\n            getRendererFunction\n        };\n\n        return EditRenderer;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/MenuItem.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditRenderer.js']], function (EditGlobals, U, EditRenderer) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, merge } = U;\n        class MenuItem {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(menu, options) {\n                this.menu = menu;\n                this.isActive = false;\n                this.options = merge(MenuItem.defaultOptions, options);\n                this.container = this.setContainer();\n                this.innerElement = this.setInnerElement();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            setContainer() {\n                const item = this, options = item.options;\n                let className = EditGlobals.classNames.menuItem;\n                if (item.menu.options.itemsClassName) {\n                    className += ' ' + item.menu.options.itemsClassName;\n                }\n                if (options.className) {\n                    className += ' ' + options.className;\n                }\n                return createElement('div', { className: className || '' }, merge(this.options.style || {}, \n                // To remove\n                this.isActive ? { display: 'block' } : {}), this.menu.container);\n            }\n            setInnerElement() {\n                const item = this, options = item.options, container = item.container, langKey = options.langKey;\n                if (options.type === 'toggle') {\n                    return EditRenderer.renderToggle(container, {\n                        id: options.id,\n                        name: options.id,\n                        title: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            options.text,\n                        value: !!(options.getValue && options.getValue(item)),\n                        lang: this.menu.editMode.lang,\n                        langKey: langKey,\n                        onchange: options.events?.click?.bind(item)\n                    });\n                }\n                if (options.type === 'text') {\n                    return EditRenderer.renderText(container, {\n                        title: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            options.text || '',\n                        className: options.className || ''\n                    });\n                }\n                if (options.type === 'icon') {\n                    return EditRenderer.renderIcon(container, {\n                        icon: options.icon || '',\n                        mousedown: options.events?.onmousedown?.bind(item),\n                        click: options.events?.click?.bind(item)\n                    });\n                }\n                if (options.type === 'button') {\n                    return EditRenderer.renderButton(container, {\n                        callback: options.events?.click?.bind(item),\n                        className: options.className || '',\n                        style: options.style || {},\n                        text: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            (options.text || '')\n                    });\n                }\n            }\n            update() {\n                const item = this, options = item.options;\n                if (options.events && options.events.update) {\n                    options.events.update.apply(item, arguments);\n                }\n            }\n            activate() {\n                const item = this;\n                item.update();\n                // Temp.\n                if (item.container) {\n                    item.isActive = true;\n                    item.container.style.display = 'block';\n                }\n            }\n            deactivate() {\n                const item = this;\n                // Temp.\n                if (item.container) {\n                    item.isActive = false;\n                    item.container.style.display = 'none';\n                }\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        MenuItem.defaultOptions = {\n            id: '',\n            type: 'text'\n        };\n\n        return MenuItem;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/MenuItemBindings.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const MenuItemBindings = {\n            /* *\n            *\n            *  Context menu\n            *\n            * */\n            viewFullscreen: {\n                id: 'viewFullscreen',\n                type: 'button',\n                langKey: 'viewFullscreen',\n                events: {\n                    click: function () {\n                        const fullScreen = this.menu.editMode.board.fullscreen;\n                        if (fullScreen) {\n                            fullScreen.toggle();\n                        }\n                    }\n                }\n            }\n        };\n\n        return MenuItemBindings;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/Menu.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/MenuItem.js'], _modules['Dashboards/EditMode/Menu/MenuItemBindings.js']], function (EditGlobals, U, MenuItem, MenuItemBindings) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, merge } = U;\n        class Menu {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(parentElement, options, editMode, parent) {\n                this.parentElement = parentElement;\n                this.isVisible = false;\n                this.activeItems = [];\n                this.options = options;\n                this.items = {};\n                this.editMode = editMode;\n                if (parent) {\n                    this.parent = parent;\n                }\n                this.container = this.setContainer();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            setContainer() {\n                return createElement('div', {\n                    className: EditGlobals.classNames.menu +\n                        ' ' + (this.options.className || '')\n                }, {}, this.parentElement);\n            }\n            // ItemsSchemas - default items definitions.\n            initItems(itemsSchemas, activeItems) {\n                const menu = this, optionsItems = menu.options.items || [];\n                let itemSchema, itemConfig, item, options;\n                for (let i = 0, iEnd = optionsItems.length; i < iEnd; ++i) {\n                    itemConfig = optionsItems[i];\n                    itemSchema =\n                        typeof itemConfig === 'string' ? itemsSchemas[itemConfig] :\n                            itemConfig.id ? itemsSchemas[itemConfig.id] :\n                                {};\n                    options = typeof itemConfig === 'string' ?\n                        merge(itemSchema, { id: itemConfig }) :\n                        merge(itemSchema, itemConfig);\n                    if (options.id) {\n                        item = new MenuItem(menu, options);\n                        // Save initialized item.\n                        menu.items[item.options.id] = item;\n                        if (activeItems) {\n                            item.activate();\n                            menu.activeItems.push(item);\n                        }\n                    }\n                    else {\n                        // Error - defined item needs an id.\n                    }\n                }\n            }\n            setActiveItems(items) {\n                const menu = this;\n                let item;\n                // Deactivate items.\n                for (let i = 0, iEnd = menu.activeItems.length; i < iEnd; ++i) {\n                    if (items.indexOf(menu.activeItems[i].options.id) === -1) {\n                        menu.activeItems[i].deactivate();\n                    }\n                }\n                menu.activeItems.length = 0;\n                for (let j = 0, jEnd = items.length; j < jEnd; ++j) {\n                    item = menu.items[items[j]];\n                    if (item) {\n                        // Activate item.\n                        if (!item.isActive) {\n                            item.activate();\n                        }\n                        else {\n                            item.update();\n                        }\n                        menu.activeItems.push(item);\n                    }\n                }\n            }\n            deactivateActiveItems() {\n                const menu = this;\n                for (let i = 0, iEnd = menu.activeItems.length; i < iEnd; ++i) {\n                    menu.activeItems[i].deactivate();\n                }\n            }\n            updateActiveItems() {\n                const activeItems = this.activeItems;\n                for (let i = 0, iEnd = activeItems.length; i < iEnd; ++i) {\n                    activeItems[i].update();\n                }\n            }\n            destroy() {\n                this.activeItems.length = 0;\n                this.container.remove();\n                this.items = {};\n                this.options = {};\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        Menu.items = MenuItemBindings;\n\n        return Menu;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/EditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/Menu.js']], function (U, Menu) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { defined, createElement, css } = U;\n        /**\n         * Abstract Class of Edit Toolbar.\n         * @internal\n         */\n        class EditToolbar {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode, options) {\n                this.container = createElement('div', {\n                    className: options.className\n                }, void 0, editMode.board.container);\n                this.editMode = editMode;\n                this.iconURLPrefix = editMode.iconsURLPrefix;\n                this.menu = new Menu(this.container, options.menu, editMode, this);\n                this.options = options;\n                this.isVisible = false;\n                if (this.options.outline) {\n                    this.outline = createElement('div', {\n                        className: options.outlineClassName\n                    }, void 0, this.container);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            hide() {\n                this.setPosition(void 0, void 0);\n            }\n            refreshOutline(x, y, guiElement, offset = 0) {\n                const toolbar = this, guiElemCnt = (guiElement || {}).container;\n                if (toolbar.outline && guiElemCnt) {\n                    css(toolbar.outline, {\n                        display: 'block',\n                        left: x - offset + 'px',\n                        top: y - offset + 'px',\n                        width: guiElemCnt.offsetWidth + offset * 2 + 'px',\n                        height: guiElemCnt.offsetHeight + offset * 2 + 'px'\n                    });\n                }\n            }\n            hideOutline() {\n                if (this.outline) {\n                    this.outline.style.display = 'none';\n                }\n            }\n            setPosition(x, y) {\n                const toolbar = this;\n                if (toolbar.container) {\n                    css(toolbar.container, {\n                        left: (x || '-9999') + 'px',\n                        top: (y || '-9999') + 'px'\n                    });\n                }\n                toolbar.isVisible = defined(x) && defined(y);\n            }\n        }\n\n        return EditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/CellEditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/Toolbar/EditToolbar.js'], _modules['Dashboards/Layout/GUIElement.js']], function (U, EditGlobals, EditToolbar, GUIElement) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, fireEvent, objectEach } = U;\n        /**\n         * @internal\n         */\n        class CellEditToolbar extends EditToolbar {\n            static getItemsConfig(options, iconURLPrefix) {\n                const items = [];\n                if (options.dragDrop?.enabled) {\n                    items.push({\n                        id: 'drag',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'drag.svg',\n                        events: {\n                            onmousedown: function (e) {\n                                const cellEditToolbar = this.menu\n                                    .parent;\n                                const dragDrop = cellEditToolbar.editMode.dragDrop;\n                                if (dragDrop && cellEditToolbar.cell) {\n                                    dragDrop.onDragStart(e, cellEditToolbar.cell);\n                                }\n                            }\n                        }\n                    });\n                }\n                if (options.settings?.enabled) {\n                    items.push({\n                        id: 'settings',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'settings.svg',\n                        events: {\n                            click: function () {\n                                this.menu.parent.editMode.setEditOverlay();\n                                this.menu.parent.onCellOptions();\n                            }\n                        }\n                    });\n                }\n                items.push({\n                    id: 'destroy',\n                    type: 'icon',\n                    className: EditGlobals.classNames.menuDestroy,\n                    icon: iconURLPrefix + 'destroy.svg',\n                    events: {\n                        click: function () {\n                            const parentNode = this.menu.parent, editMode = this.menu.parent.editMode, popup = editMode.confirmationPopup;\n                            popup.show({\n                                confirmButton: {\n                                    value: editMode.lang.confirmButton,\n                                    callback: parentNode.onCellDestroy,\n                                    context: parentNode\n                                },\n                                cancelButton: {\n                                    value: editMode.lang.cancelButton,\n                                    callback: () => {\n                                        popup.closePopup();\n                                    }\n                                },\n                                text: editMode.lang.confirmDestroyCell\n                            });\n                        }\n                    }\n                });\n                return items;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode) {\n                super(editMode, merge(CellEditToolbar.defaultOptions, (editMode.options.toolbars || {}).cell, {\n                    menu: {\n                        items: CellEditToolbar.getItemsConfig(editMode.options, editMode.iconsURLPrefix)\n                    }\n                }));\n                this.menu.initItems({});\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            showToolbar(cell) {\n                const toolbar = this, cellCnt = cell.container, toolbarWidth = 30, toolbarMargin = 10;\n                let x, y;\n                if (cellCnt &&\n                    toolbar.editMode.isActive() &&\n                    !(toolbar.editMode.dragDrop || {}).isActive) {\n                    const cellOffsets = GUIElement.getOffsets(cell, toolbar.editMode.board.container);\n                    x = cellOffsets.right - toolbarWidth - toolbarMargin;\n                    y = cellOffsets.top + toolbarMargin;\n                    // Temp - activate all items.\n                    objectEach(toolbar.menu.items, (item) => {\n                        item.activate();\n                    });\n                    toolbar.setPosition(x, y);\n                    toolbar.cell = cell;\n                    toolbar.refreshOutline();\n                }\n                else if (toolbar.isVisible) {\n                    toolbar.hide();\n                }\n            }\n            refreshOutline() {\n                const toolbar = this, offsetWidth = -1;\n                if (toolbar.cell && toolbar.cell.container && toolbar.outline) {\n                    super.refreshOutline(-toolbar.cell.container.offsetWidth, 0, this.cell, offsetWidth);\n                }\n            }\n            onCellOptions() {\n                const toolbar = this;\n                if (toolbar.editMode.sidebar) {\n                    toolbar.editMode.sidebar.show(toolbar.cell);\n                    if (this.cell) {\n                        this.cell.setHighlight();\n                    }\n                }\n            }\n            onCellDestroy() {\n                const toolbar = this;\n                if (toolbar.cell) {\n                    const row = toolbar.cell.row;\n                    toolbar.resetEditedCell();\n                    toolbar.cell.destroy();\n                    toolbar.cell = void 0;\n                    // Hide row and cell toolbars.\n                    toolbar.editMode.hideToolbars(['cell', 'row']);\n                    // Call cellResize dashboard event.\n                    if (row && row.cells && row.cells.length) {\n                        fireEvent(toolbar.editMode.board, 'cellResize', {\n                            cell: row.cells[0]\n                        });\n                        fireEvent(row, 'cellChange', { cell: row.cells[0], row });\n                    }\n                }\n            }\n            resetEditedCell() {\n                this.editedCell = void 0;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CellEditToolbar.defaultOptions = {\n            enabled: true,\n            className: EditGlobals.classNames.editToolbar,\n            outline: false,\n            outlineClassName: EditGlobals.classNames.editToolbarCellOutline,\n            menu: {\n                className: EditGlobals.classNames.editToolbarCell,\n                itemsClassName: EditGlobals.classNames.editToolbarItem,\n                items: []\n            }\n        };\n\n        return CellEditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/RowEditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/Toolbar/EditToolbar.js'], _modules['Dashboards/Layout/GUIElement.js']], function (U, EditGlobals, EditToolbar, GUIElement) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, objectEach } = U;\n        /**\n         * @internal\n         */\n        class RowEditToolbar extends EditToolbar {\n            static getMenuItemsConfig(options, iconURLPrefix) {\n                const items = [];\n                if (options.dragDrop?.enabled) {\n                    items.push({\n                        id: 'drag',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'drag.svg',\n                        events: {\n                            onmousedown: function (e) {\n                                const rowEditToolbar = this.menu\n                                    .parent, dragDrop = rowEditToolbar.editMode.dragDrop;\n                                if (dragDrop && rowEditToolbar.row) {\n                                    dragDrop.onDragStart(e, rowEditToolbar.row);\n                                }\n                            }\n                        }\n                    });\n                }\n                if (options.settings?.enabled) {\n                    items.push({\n                        id: 'settings',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'settings.svg',\n                        events: {\n                            click: function () {\n                                this.menu.parent.editMode.setEditOverlay();\n                                this.menu.parent.onRowOptions();\n                            }\n                        }\n                    });\n                }\n                items.push({\n                    id: 'destroy',\n                    type: 'icon',\n                    className: EditGlobals.classNames.menuDestroy,\n                    icon: iconURLPrefix + 'destroy.svg',\n                    events: {\n                        click: function () {\n                            const parentNode = this.menu.parent, editMode = this.menu.parent.editMode, popup = editMode.confirmationPopup;\n                            popup.show({\n                                confirmButton: {\n                                    value: editMode.lang.confirmButton,\n                                    callback: parentNode.onRowDestroy,\n                                    context: parentNode\n                                },\n                                cancelButton: {\n                                    value: editMode.lang.cancelButton,\n                                    callback: () => {\n                                        popup.closePopup();\n                                    }\n                                },\n                                text: editMode.lang.confirmDestroyRow\n                            });\n                        }\n                    }\n                });\n                return items;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode) {\n                super(editMode, merge(RowEditToolbar.defaultOptions, (editMode.options.toolbars || {}).row, {\n                    menu: {\n                        items: RowEditToolbar.getMenuItemsConfig(editMode.options, editMode.iconsURLPrefix)\n                    }\n                }));\n                this.menu.initItems({});\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            refreshOutline(x, y) {\n                const toolbar = this, offsetWidth = 2;\n                if (toolbar.row && toolbar.row.container) {\n                    super.refreshOutline(x, y, this.row, offsetWidth);\n                }\n            }\n            showToolbar(row) {\n                const toolbar = this, rowCnt = row.container;\n                let x, y, offsetX;\n                if (rowCnt &&\n                    toolbar.editMode.isActive() &&\n                    !(toolbar.editMode.dragDrop || {}).isActive) {\n                    const rowOffsets = GUIElement.getOffsets(row, toolbar.editMode.board.container);\n                    const rowWidth = rowOffsets.right - rowOffsets.left;\n                    // Temp - activate all items.\n                    objectEach(toolbar.menu.items, (item) => {\n                        item.activate();\n                    });\n                    offsetX = rowWidth / 2 - toolbar.container.clientWidth / 2;\n                    x = rowOffsets.left + offsetX;\n                    y = rowOffsets.top - toolbar.container.clientHeight;\n                    toolbar.setPosition(x, y);\n                    toolbar.row = row;\n                    toolbar.refreshOutline(-offsetX, toolbar.container.clientHeight);\n                }\n                else if (toolbar.isVisible) {\n                    toolbar.hide();\n                }\n            }\n            onRowOptions() {\n                const toolbar = this;\n                if (toolbar.editMode.sidebar) {\n                    toolbar.editMode.sidebar.show(toolbar.row);\n                    /// toolbar.editMode.sidebar.updateTitle('ROW OPTIONS');\n                    // @ToDo - mask is buggy - should be refactored or removed.\n                    // if (this.row) {\n                    //     super.maskNotEditedElements(\n                    //         this.row,\n                    //         true\n                    //     );\n                    //     this.editedRow = this.row;\n                    // }\n                }\n            }\n            onRowDestroy() {\n                const toolbar = this;\n                if (toolbar.row) {\n                    this.resetEditedRow();\n                    toolbar.row.destroy();\n                    toolbar.row = void 0;\n                    // Hide row and cell toolbars.\n                    toolbar.editMode.hideToolbars(['cell', 'row']);\n                }\n            }\n            resetEditedRow() {\n                /// super.resetCurrentElements(this.row as Row, true);\n                this.editedRow = void 0;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        RowEditToolbar.defaultOptions = {\n            enabled: true,\n            className: EditGlobals.classNames.editToolbar,\n            outline: true,\n            outlineClassName: EditGlobals.classNames.editToolbarRowOutline,\n            menu: {\n                className: EditGlobals.classNames.editToolbarRow,\n                itemsClassName: EditGlobals.classNames.editToolbarItem,\n                items: []\n            }\n        };\n\n        return RowEditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/AccordionMenu.js', [_modules['Dashboards/EditMode/EditRenderer.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js']], function (EditRenderer, U, EditGlobals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *  - Sebastian Bochan\n         *\n         * */\n        const { createElement, merge, error } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Accordion menu class.\n         */\n        class AccordionMenu {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(iconsURLPrefix, closeSidebar) {\n                this.changedOptions = {};\n                this.chartOptionsJSON = {};\n                this.iconsURLPrefix = iconsURLPrefix;\n                this.closeSidebar = closeSidebar;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Renders the menu for given component.\n             *\n             * @param container\n             * The HTML Element to render the menu in.\n             * @param component\n             * The component to render the menu for.\n             */\n            renderContent(container, component) {\n                const menu = this;\n                const editableOptions = component.editableOptions.getOptions();\n                let option, content;\n                const accordionContainer = createElement('div', {\n                    className: EditGlobals.classNames.accordionMenu\n                }, {}, container);\n                for (let i = 0, end = editableOptions.length; i < end; i++) {\n                    option = editableOptions[i];\n                    content = EditRenderer.renderCollapseHeader(accordionContainer, {\n                        name: option.name,\n                        iconsURLPrefix: menu.iconsURLPrefix,\n                        lang: (component.board?.editMode || EditGlobals).lang\n                    }).content;\n                    this.renderAccordion(option, content, component);\n                }\n                const buttonContainer = createElement('div', {\n                    className: EditGlobals.classNames.accordionMenuButtonsContainer\n                }, {}, accordionContainer);\n                EditRenderer.renderButton(buttonContainer, {\n                    text: (component.board?.editMode || EditGlobals)\n                        .lang.confirmButton,\n                    className: EditGlobals.classNames.popupConfirmBtn,\n                    callback: () => {\n                        const changedOptions = this\n                            .changedOptions;\n                        component.update(merge(changedOptions, {\n                            chartOptions: this.chartOptionsJSON\n                        }));\n                        menu.changedOptions = {};\n                        menu.chartOptionsJSON = {};\n                        menu.closeSidebar();\n                    }\n                });\n                EditRenderer.renderButton(buttonContainer, {\n                    text: (component.board?.editMode || EditGlobals)\n                        .lang.cancelButton,\n                    className: EditGlobals.classNames.popupCancelBtn,\n                    callback: () => {\n                        menu.changedOptions = {};\n                        menu.chartOptionsJSON = {};\n                        menu.closeSidebar();\n                    }\n                });\n            }\n            /**\n             * Update the options object with new nested value, based on the property\n             * path. If the objects in the path are not defined, the function will\n             * create them.\n             *\n             * @param propertyPath\n             * Path of the property for which the value should be updated.\n             * Example: ```['chartOptions', 'chart', 'type']```\n             * @param value\n             * New value of the property.\n             */\n            updateOptions(propertyPath, value) {\n                const pathLength = propertyPath.length - 1;\n                let currentLevel = this.changedOptions;\n                if (pathLength === 0 && propertyPath[0] === 'chartOptions') {\n                    try {\n                        const parsedValue = JSON.parse(value);\n                        this.chartOptionsJSON = parsedValue;\n                    }\n                    catch (e) {\n                        // TODO: Handle the wrong config passed from the user.\n                        error('Dashboards Error: Wrong JSON config structure passed as' +\n                            ' a chart options.');\n                    }\n                }\n                for (let i = 0; i < pathLength; i++) {\n                    const key = propertyPath[i];\n                    if (!currentLevel[key]) {\n                        currentLevel[key] = {};\n                    }\n                    currentLevel = currentLevel[key];\n                }\n                currentLevel[propertyPath[pathLength]] = value;\n            }\n            /**\n             * Renders either a basic or nested element. This function can be recursivly\n             * called, if there are multiple nested options.\n             *\n             * @param options\n             * Configuration object of the Component options.\n             * @param parentNode\n             * A container where the accordion is rendered.\n             * @param component\n             * the component for which the menu should be rendered.\n             */\n            renderAccordion(options, parentNode, component) {\n                if (options.type === 'nested') {\n                    return this.renderNested(parentNode, options, component);\n                }\n                const renderFunction = EditRenderer.getRendererFunction(options.type);\n                if (!renderFunction) {\n                    return;\n                }\n                renderFunction(parentNode, {\n                    ...options,\n                    iconsURLPrefix: this.iconsURLPrefix,\n                    value: component.getEditableOptionValue(options.propertyPath),\n                    onchange: (value) => this.updateOptions(options.propertyPath || [], value)\n                });\n            }\n            /**\n             * Render nested menu for the component.\n             *\n             * @param parentElement\n             * HTML element to which the nested structure should be rendered to\n             * @param options\n             * configuration object for the options\n             * @param component\n             * The component instance for the options should be rendered\n             */\n            renderNested(parentElement, options, component) {\n                if (!parentElement || !options.nestedOptions) {\n                    return;\n                }\n                const nestedOptions = options.nestedOptions;\n                for (let i = 0, iEnd = nestedOptions.length; i < iEnd; ++i) {\n                    const name = nestedOptions[i].name;\n                    const accordionOptions = nestedOptions[i].options;\n                    const showToggle = !!nestedOptions[i].showToggle;\n                    const propertyPath = nestedOptions[i].propertyPath || [];\n                    const collapsedHeader = EditRenderer.renderCollapseHeader(parentElement, {\n                        name,\n                        isEnabled: !!component.getEditableOptionValue(propertyPath),\n                        iconsURLPrefix: this.iconsURLPrefix,\n                        showToggle: showToggle,\n                        onchange: (value) => this.updateOptions(propertyPath, value),\n                        isNested: true,\n                        lang: (component.board?.editMode || EditGlobals).lang\n                    });\n                    for (let j = 0, jEnd = accordionOptions.length; j < jEnd; ++j) {\n                        this.renderAccordion(accordionOptions[j], collapsedHeader.content, component);\n                    }\n                }\n                return;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AccordionMenu;\n    });\n    _registerModule(_modules, 'Shared/BaseForm.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (AST, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { addEvent, createElement } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentDiv, iconsURL) {\n                this.iconsURL = iconsURL;\n                this.container = this.createPopupContainer(parentDiv);\n                this.closeButton = this.addCloseButton();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create popup div container.\n             *\n             * @param {HTMLElement} parentDiv\n             * Parent div to attach popup.\n             *\n             * @param  {string} className\n             * Class name of the popup.\n             *\n             * @return {HTMLElement}\n             * Popup div.\n             */\n            createPopupContainer(parentDiv, className = 'highcharts-popup highcharts-no-tooltip') {\n                return createElement('div', { className }, void 0, parentDiv);\n            }\n            /**\n             * Create HTML element and attach click event to close popup.\n             *\n             * @param {string} className\n             * Class name of the close button.\n             *\n             * @return {HTMLElement}\n             * Close button.\n             */\n            addCloseButton(className = 'highcharts-popup-close') {\n                const popup = this, iconsURL = this.iconsURL;\n                // Create close popup button.\n                const closeButton = createElement('button', { className }, void 0, this.container);\n                closeButton.style['background-image'] = 'url(' +\n                    (iconsURL.match(/png|svg|jpeg|jpg|gif/ig) ?\n                        iconsURL : iconsURL + 'close.svg') + ')';\n                ['click', 'touchstart'].forEach((eventName) => {\n                    addEvent(closeButton, eventName, popup.closeButtonEvents.bind(popup));\n                });\n                // Close popup when press ESC\n                addEvent(document, 'keydown', function (event) {\n                    if (event.code === 'Escape') {\n                        popup.closeButtonEvents();\n                    }\n                });\n                return closeButton;\n            }\n            /**\n             * Close button events.\n             * @return {void}\n             */\n            closeButtonEvents() {\n                this.closePopup();\n            }\n            /**\n             * Reset content of the current popup and show.\n             *\n             * @param {string} toolbarClass\n             * Class name of the toolbar which styles should be reset.\n             */\n            showPopup(toolbarClass = 'highcharts-annotation-toolbar') {\n                const popupDiv = this.container, popupCloseButton = this.closeButton;\n                this.type = void 0;\n                // Reset content.\n                popupDiv.innerHTML = AST.emptyHTML;\n                // Reset toolbar styles if exists.\n                if (popupDiv.className.indexOf(toolbarClass) >= 0) {\n                    popupDiv.classList.remove(toolbarClass);\n                    // Reset toolbar inline styles\n                    popupDiv.removeAttribute('style');\n                }\n                // Add close button.\n                popupDiv.appendChild(popupCloseButton);\n                popupDiv.style.display = 'block';\n                popupDiv.style.height = '';\n            }\n            /**\n             * Hide popup.\n             */\n            closePopup() {\n                this.container.style.display = 'none';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BaseForm;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/SidebarPopup.js', [_modules['Dashboards/EditMode/AccordionMenu.js'], _modules['Shared/BaseForm.js'], _modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Core/Utilities.js']], function (AccordionMenu, BaseForm, Bindings, EditGlobals, EditRenderer, GUIElement, Layout, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  Pawel Lysy\n         *\n         * */\n        const { addEvent, createElement, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class which creates the sidebar and handles its behavior.\n         *\n         * @internal\n         */\n        class SidebarPopup extends BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor of the SidebarPopup class.\n             *\n             * @param parentDiv\n             * Element to which the sidebar will be appended.\n             *\n             * @param iconsURL\n             * URL to the icons.\n             *\n             * @param editMode\n             * Instance of EditMode.\n             */\n            constructor(parentDiv, iconsURL, editMode) {\n                super(parentDiv, iconsURL);\n                /**\n                 * Options used in the sidebar.\n                 */\n                this.options = {\n                    components: ['HTML', 'layout', 'Highcharts', 'DataGrid', 'KPI']\n                };\n                /**\n                 * Whether the sidebar is visible.\n                 */\n                this.isVisible = false;\n                /**\n                 * List of components that can be added to the board.\n                 */\n                this.componentsList = [];\n                this.editMode = editMode;\n                this.options = merge(this.options, editMode.options.toolbars?.sidebar || {});\n                this.componentsList = this.getComponentsList(this.options.components || []);\n                this.accordionMenu = new AccordionMenu(this.iconsURL, this.hide.bind(this));\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Function to detect on which side of the screen should the sidebar be.\n             *\n             * @param context\n             * The cell or row which is the context of the sidebar.\n             *\n             * @returns\n             * Whether the sidebar should be on the right side of the screen.\n             */\n            detectRightSidebar(context) {\n                const editMode = this.editMode;\n                const layoutWrapper = editMode.board.layoutsWrapper;\n                if (!layoutWrapper) {\n                    return false;\n                }\n                return GUIElement.getOffsets(context, layoutWrapper).left < ((layoutWrapper.offsetWidth / 2) - 10); // 10 = snap\n            }\n            /**\n             * Function to remove the class names from the sidebar.\n             */\n            removeClassNames() {\n                const classNames = EditGlobals.classNames, classList = this.container.classList;\n                classList.remove(classNames.editSidebarShow);\n                classList.remove(classNames.editSidebarRightShow);\n            }\n            /**\n             * Function to add the class names to the sidebar depending on the position\n             * of the sidebar.\n             *\n             * @param isRightSidebar\n             * Whether the sidebar should be on the right side of the screen.\n             */\n            addClassNames(isRightSidebar) {\n                const classList = this.container.classList;\n                if (isRightSidebar) {\n                    classList.add(EditGlobals.classNames.editSidebarRight);\n                }\n                else {\n                    classList.remove(EditGlobals.classNames.editSidebarRight);\n                }\n                setTimeout(() => {\n                    classList.add(EditGlobals.classNames[isRightSidebar ? 'editSidebarRightShow' : 'editSidebarShow']);\n                });\n            }\n            /**\n             * Function to show the sidebar.\n             *\n             * @param context\n             * The cell or row which is the context of the sidebar.\n             */\n            show(context) {\n                const editMode = this.editMode, isRightSidebar = !!(context && this.detectRightSidebar(context));\n                this.showPopup(EditGlobals.classNames.editSidebarShow);\n                this.addClassNames(isRightSidebar);\n                if (editMode.resizer) {\n                    editMode.resizer.disableResizer();\n                }\n                // Remove highlight from the row.\n                if (editMode.editCellContext && editMode.editCellContext.row) {\n                    editMode.editCellContext.row.setHighlight(true);\n                }\n                editMode.hideToolbars(['cell', 'row']);\n                editMode.stopContextDetection();\n                this.isVisible = true;\n                this.generateContent(context);\n            }\n            generateContent(context) {\n                // Title\n                this.renderHeader(context ?\n                    this.editMode.lang.settings :\n                    this.editMode.lang.addComponent, '');\n                if (!context) {\n                    this.renderAddComponentsList();\n                    return;\n                }\n                const type = context.getType();\n                if (type === 'cell') {\n                    const component = context.mountedComponent;\n                    if (!component) {\n                        return;\n                    }\n                    this.accordionMenu.renderContent(this.container, component);\n                }\n            }\n            renderAddComponentsList() {\n                const sidebar = this;\n                const components = this.componentsList;\n                let gridElement;\n                const gridWrapper = createElement('div', {\n                    className: EditGlobals.classNames.editGridItems\n                }, {}, sidebar.container);\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    gridElement = createElement('div', {}, {}, gridWrapper);\n                    // Drag drop new component.\n                    gridElement.addEventListener('mousedown', (e) => {\n                        if (sidebar.editMode.dragDrop) {\n                            const onMouseLeave = () => {\n                                sidebar.hide();\n                            };\n                            sidebar.container.addEventListener('mouseleave', onMouseLeave);\n                            sidebar.editMode.dragDrop.onDragStart(e, void 0, (dropContext) => {\n                                // Add component if there is no layout yet.\n                                if (this.editMode.board.layouts.length === 0) {\n                                    const board = this.editMode.board, newLayoutName = GUIElement.createElementId('layout'), layout = new Layout(board, {\n                                        id: newLayoutName,\n                                        copyId: '',\n                                        parentContainerId: board.container.id,\n                                        rows: [{}],\n                                        style: {}\n                                    });\n                                    if (layout) {\n                                        board.layouts.push(layout);\n                                    }\n                                    dropContext = layout.rows[0];\n                                }\n                                const newCell = components[i].onDrop(sidebar, dropContext);\n                                if (newCell) {\n                                    const mountedComponent = newCell.mountedComponent;\n                                    // Skip init connector when is not defined by\n                                    // options f.e HTML component.\n                                    if (mountedComponent.options?.connector?.id) {\n                                        mountedComponent.initConnector();\n                                    }\n                                    sidebar.editMode.setEditCellContext(newCell);\n                                    sidebar.show(newCell);\n                                    newCell.setHighlight();\n                                }\n                                sidebar.container.removeEventListener('mouseleave', onMouseLeave);\n                            });\n                        }\n                    });\n                    gridElement.innerHTML = components[i].text;\n                }\n                return;\n            }\n            onDropNewComponent(dropContext, componentOptions) {\n                const sidebar = this, dragDrop = sidebar.editMode.dragDrop;\n                if (dragDrop) {\n                    const row = (dropContext.getType() === 'cell' ?\n                        dropContext.row :\n                        dropContext), newCell = row.addCell({\n                        id: GUIElement.createElementId('col')\n                    });\n                    dragDrop.onCellDragEnd(newCell);\n                    const options = merge(componentOptions, {\n                        cell: newCell.id\n                    });\n                    Bindings.addComponent(options, sidebar.editMode.board, newCell);\n                    sidebar.editMode.setEditOverlay();\n                    return newCell;\n                }\n            }\n            /**\n             * Function to hide the sidebar.\n             */\n            hide() {\n                const editMode = this.editMode;\n                const editCellContext = editMode.editCellContext;\n                this.removeClassNames();\n                this.container.style.display = 'none';\n                // Remove edit overlay if active.\n                if (editMode.isEditOverlayActive) {\n                    editMode.setEditOverlay(true);\n                }\n                if (editCellContext && editCellContext.row) {\n                    editMode.showToolbars(['cell', 'row'], editCellContext);\n                    editCellContext.row.setHighlight();\n                    // Remove cell highlight if active.\n                    if (editCellContext.isHighlighted) {\n                        editCellContext.setHighlight(true);\n                    }\n                }\n                editMode.isContextDetectionActive = true;\n                this.isVisible = false;\n            }\n            /**\n             * Function called when the close button is pressed.\n             */\n            closeButtonEvents() {\n                this.hide();\n            }\n            renderHeader(title, iconURL) {\n                const icon = EditRenderer.renderIcon(this.container, {\n                    icon: iconURL,\n                    className: EditGlobals.classNames.editSidebarTitle\n                });\n                if (icon) {\n                    icon.textContent = title;\n                }\n            }\n            /**\n             * Based on the provided components list, it returns the list of components\n             * with its names and functions that are called when the component is\n             * dropped.\n             *\n             * @param components\n             * List of components that can be added to the board.\n             */\n            getComponentsList(components) {\n                const sidebar = this, editMode = sidebar.editMode, componentTypes = editMode.board.componentTypes, componentList = [];\n                components.forEach((componentName) => {\n                    const component = componentTypes[componentName];\n                    if (component) {\n                        componentList.push({\n                            text: editMode.lang?.sidebar[componentName] ||\n                                component.name,\n                            onDrop: function (sidebar, dropContext) {\n                                const options = component.prototype.getOptionsOnDrop(sidebar);\n                                if (options) {\n                                    return sidebar.onDropNewComponent(dropContext, options);\n                                }\n                            }\n                        });\n                    }\n                    else if (componentName === 'layout') {\n                        componentList.push(SidebarPopup.addLayout);\n                    }\n                });\n                return componentList;\n            }\n            /**\n             * Function to create and add the close button to the sidebar.\n             *\n             * @param className\n             * Class name of the close button.\n             * @returns Close button element\n             */\n            addCloseButton(className = EditGlobals.classNames.popupCloseButton) {\n                // Close popup when click outside the popup\n                addEvent(document, 'click', (event) => {\n                    event.stopPropagation();\n                    if (this.container.style.display === 'block' &&\n                        !this.container.contains(event.target) &&\n                        this.container.classList.value.includes('show')) {\n                        this.hide();\n                    }\n                });\n                return super.addCloseButton.call(this, className);\n            }\n            /**\n             * Function that creates the container of the sidebar.\n             *\n             * @param parentDiv\n             * The parent div to which the sidebar will be appended.\n             * @param className\n             * Class name of the sidebar.\n             * @returns The container of the sidebar.\n             */\n            createPopupContainer(parentDiv, className = EditGlobals.classNames.editSidebar) {\n                return super.createPopupContainer.call(this, parentDiv, className);\n            }\n        }\n        SidebarPopup.addLayout = {\n            text: 'layout',\n            onDrop: function (sidebar, dropContext) {\n                if (!dropContext) {\n                    return;\n                }\n                const row = (dropContext.getType() === 'cell' ?\n                    dropContext.row :\n                    dropContext), board = row.layout.board, newLayoutName = GUIElement.createElementId('layout'), cellName = GUIElement.createElementId('cell'), layout = new Layout(board, {\n                    id: newLayoutName,\n                    copyId: '',\n                    parentContainerId: board.container.id,\n                    rows: [{\n                            cells: [{\n                                    id: cellName\n                                }]\n                        }],\n                    style: {}\n                });\n                if (layout) {\n                    board.layouts.push(layout);\n                }\n                Bindings.addComponent({\n                    type: 'HTML',\n                    cell: cellName,\n                    elements: [\n                        {\n                            tagName: 'div',\n                            textContent: 'Placeholder text'\n                        }\n                    ]\n                }, board);\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SidebarPopup;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditContextMenu.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/Menu.js']], function (EditGlobals, U, Menu) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, merge } = U;\n        /**\n         * Class to create context menu.\n         * @internal\n         */\n        class EditContextMenu extends Menu {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentElement, options, editMode) {\n                super(editMode.board.container, merge(EditContextMenu.defaultOptions, options || {}), editMode);\n                this.editMode = editMode;\n                this.options = merge(EditContextMenu.defaultOptions, options || {});\n                // Move it in the DOM after the edit tools so it is better accessible.\n                this.editMode.board.layoutsWrapper?.parentNode.insertBefore(this.container, this.editMode.board.layoutsWrapper);\n                // Set the context menu container width.\n                this.container.style.width = this.options.width + 'px';\n                super.initItems(EditContextMenu.items);\n                if (this.options.items) {\n                    const items = [];\n                    for (let i = 0, iEnd = this.options.items.length; i < iEnd; ++i) {\n                        if (typeof this.options.items[i] === 'string') {\n                            items.push(this.options.items[i]);\n                        }\n                        else if (this.options.items[i].id) {\n                            items.push(this.options.items[i].id);\n                        }\n                    }\n                    this.setActiveItems(items);\n                }\n                this.initEvents();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            initEvents() {\n                const contextMenu = this;\n                // Click on document close the context menu\n                // TODO refactor\n                addEvent(document, 'click', (event) => {\n                    if (event.target !== this.container &&\n                        event.target !==\n                            contextMenu.editMode.tools.contextButtonElement &&\n                        !event.target.classList\n                            .contains(EditGlobals.classNames.toggleSlider) &&\n                        event.target.tagName !== 'INPUT' &&\n                        this.isVisible) {\n                        this.setVisible(false);\n                    }\n                });\n            }\n            setVisible(visible) {\n                const contextMenu = this, contextButtonElement = contextMenu.editMode.tools.contextButtonElement;\n                if (contextMenu.container && contextButtonElement) {\n                    if (visible) {\n                        contextMenu.container.style.display = 'block';\n                        contextMenu.isVisible = true;\n                        contextButtonElement.setAttribute('aria-expanded', 'true');\n                    }\n                    else {\n                        contextMenu.container.style.display = 'none';\n                        contextMenu.isVisible = false;\n                        contextButtonElement.setAttribute('aria-expanded', 'false');\n                    }\n                }\n            }\n            updatePosition(ctxButton, x, y) {\n                const contextMenu = this, width = contextMenu.options.width || 0, left = (ctxButton ?\n                    ctxButton.offsetLeft - width + ctxButton.offsetWidth :\n                    x), top = ctxButton ? ctxButton.offsetTop + ctxButton.offsetHeight : y;\n                if (left && top) {\n                    contextMenu.container.style.left = left + 'px';\n                    contextMenu.container.style.top = top + 'px';\n                }\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        EditContextMenu.defaultOptions = {\n            enabled: true,\n            width: 150,\n            className: EditGlobals.classNames.contextMenu,\n            itemsClassName: EditGlobals.classNames.contextMenuItem,\n            items: ['editMode']\n        };\n        /**\n         * Default Context menu items.\n         */\n        EditContextMenu.items = merge(Menu.items, {\n            editMode: {\n                id: 'editMode',\n                type: 'toggle',\n                getValue: function (item) {\n                    return item.menu.editMode.isActive();\n                },\n                langKey: 'editMode',\n                events: {\n                    click: function () {\n                        this.menu.editMode.onEditModeToggle();\n                    }\n                }\n            }\n        });\n\n        return EditContextMenu;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/ContextDetection.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Layout/GUIElement.js']], function (U, GUIElement) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { defined } = U;\n        class ContextDetection {\n            static isGUIElementOnParentEdge(mouseContext, side // 'right', 'left', 'top', 'bottom'\n            ) {\n                const visibleElements = (side === 'top' || side === 'bottom') ?\n                    mouseContext.row.layout.getVisibleRows() :\n                    (side === 'left' || side === 'right') ?\n                        mouseContext.row.getVisibleCells() :\n                        [];\n                const lastElementIndex = (visibleElements.length - 1);\n                return ((visibleElements[lastElementIndex] === mouseContext &&\n                    side === 'right') ||\n                    (visibleElements[lastElementIndex] === mouseContext.row &&\n                        side === 'bottom') ||\n                    (visibleElements[0] === mouseContext && side === 'left') ||\n                    (visibleElements[0] === mouseContext.row && side === 'top'));\n            }\n            static getContextLevel(mouseContext, offset, sideOffset, side) {\n                // Array of overlapped levels.\n                const overlappedLevels = mouseContext.getOverlappingLevels(side, offset / 2);\n                // Divide offset to level sections (eg 3 nested layouts -\n                // cell edge will have 3 sections each 1/3 offset width).\n                const divOffset = offset / overlappedLevels.length;\n                // Overlapped nested layout level.\n                const lastOverlappedLevel = overlappedLevels[overlappedLevels.length - 1];\n                let level = mouseContext.row.layout.level - Math.floor(sideOffset / divOffset);\n                level = level < lastOverlappedLevel ? lastOverlappedLevel : (level > mouseContext.row.layout.level ?\n                    mouseContext.row.layout.level : level);\n                return level;\n            }\n            static getContext(mouseCellContext, e, offset) {\n                let sideOffset;\n                // Get cell offsets, width, height\n                const mouseCellContextOffsets = GUIElement.getOffsets(mouseCellContext);\n                const { width, height } = GUIElement.getDimFromOffsets(mouseCellContextOffsets);\n                // Correct offset when element to small.\n                if (width < 2 * offset) {\n                    offset = width / 2;\n                }\n                // Get mouse position relative to the mouseContext sides.\n                const leftSideX = e.clientX - mouseCellContextOffsets.left;\n                const topSideY = e.clientY - mouseCellContextOffsets.top;\n                // Get cell side - right, left, top, bottom\n                const sideY = topSideY >= -offset && topSideY <= offset ? 'top' :\n                    topSideY - height >= -offset && topSideY - height <= offset ?\n                        'bottom' :\n                        '';\n                const sideX = leftSideX >= -offset && leftSideX <= offset ? 'left' :\n                    leftSideX - width >= -offset && leftSideX - width <= offset ?\n                        'right' :\n                        '';\n                const side = sideX ? sideX : sideY; // X is prioritized.\n                switch (side) {\n                    case 'right':\n                        sideOffset = leftSideX - width + offset;\n                        break;\n                    case 'left':\n                        sideOffset = offset - leftSideX;\n                        break;\n                    case 'top':\n                        sideOffset = offset - topSideY;\n                        break;\n                    case 'bottom':\n                        sideOffset = topSideY - height + offset;\n                        break;\n                }\n                const context = {\n                    cell: mouseCellContext,\n                    side: side\n                };\n                // Nested layouts.\n                if (mouseCellContext.row.layout.level !== 0 &&\n                    side &&\n                    ContextDetection.isGUIElementOnParentEdge(mouseCellContext, side) &&\n                    defined(sideOffset)) {\n                    const level = ContextDetection.getContextLevel(mouseCellContext, offset, sideOffset, side);\n                    const cell = mouseCellContext.getParentCell(level);\n                    if (cell) {\n                        context.cell = cell;\n                    }\n                }\n                return context;\n            }\n        }\n\n        return ContextDetection;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/DragDrop.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Actions/ContextDetection.js']], function (U, Globals, EditGlobals, GUIElement, ContextDetection) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, merge, css, fireEvent, createElement } = U;\n        /**\n         * Class providing a drag and drop functionality.\n         * @internal\n         */\n        class DragDrop {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * Constructor for the DragDrop class.\n             * @internal\n             *\n             * @param {EditMode} editMode\n             * The parent editMode reference.\n             *\n             * @param {DragDrop.Options} options\n             * Options for the DragDrop.\n             */\n            constructor(editMode, options) {\n                this.editMode = editMode;\n                this.options = merge(DragDrop.defaultOptions, options);\n                this.mockElement = createElement('div', { className: EditGlobals.classNames.dragMock }, {}, editMode.board.container);\n                this.dropPointer = {\n                    isVisible: false,\n                    align: '',\n                    element: createElement('div', { className: EditGlobals.classNames.dropPointer }, {}, editMode.board.container)\n                };\n                this.isActive = false;\n                this.initEvents();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for showing and positioning drop pointer.\n             *\n             * @param {number} left\n             * Drop pointer left position.\n             *\n             * @param {number} top\n             * Drop pointer top position.\n             *\n             * @param {number} width\n             * Drop pointer width.\n             *\n             * @param {number} height\n             * Drop pointer height.\n             */\n            showDropPointer(left, top, width, height) {\n                this.dropPointer.isVisible = true;\n                css(this.dropPointer.element, {\n                    display: 'block',\n                    left: left + 'px',\n                    top: top + 'px',\n                    height: height + 'px',\n                    width: width + 'px'\n                });\n            }\n            /**\n             * Method for hiding drop pointer.\n             */\n            hideDropPointer() {\n                if (this.dropPointer.isVisible) {\n                    this.dropPointer.isVisible = false;\n                    this.dropPointer.align = '';\n                    this.dropPointer.element.style.display = 'none';\n                }\n            }\n            /**\n             * Method for positioning drag mock element.\n             *\n             * @param {PointerEvent} mouseEvent\n             * Mouse event.\n             */\n            setMockElementPosition(mouseEvent) {\n                const dragDrop = this, dashBoundingRect = dragDrop.editMode.board.container.getBoundingClientRect(), offset = dragDrop.mockElement.clientWidth / 2, x = mouseEvent.clientX - dashBoundingRect.left - offset, y = mouseEvent.clientY - dashBoundingRect.top - offset;\n                css(this.mockElement, { left: x + 'px', top: y + 'px' });\n            }\n            /**\n             * Method for initializing drag drop events.\n             */\n            initEvents() {\n                const dragDrop = this;\n                // DragDrop events.\n                addEvent(document, 'mousemove', dragDrop.onDrag.bind(dragDrop));\n                addEvent(document, 'mouseup', dragDrop.onDragEnd.bind(dragDrop));\n            }\n            /**\n             * General method used on drag start.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {Cell|Row} context\n             * Reference to the dragged context.\n             *\n             * @param {Function} dragEndCallback\n             * Callback invoked on drag end.\n             */\n            onDragStart(e, context, dragEndCallback) {\n                this.isActive = true;\n                this.editMode.hideToolbars(['cell', 'row']);\n                if (this.editMode.resizer) {\n                    this.editMode.resizer.disableResizer();\n                }\n                this.setMockElementPosition(e);\n                if (context) {\n                    this.context = context;\n                    context.hide();\n                    if (context.getType() === Globals.guiElementType.cell) {\n                        const draggedCell = context;\n                        // Call cellResize board event.\n                        fireEvent(this.editMode.board, 'cellResize', { cell: context });\n                        fireEvent(draggedCell.row, 'cellChange', { cell: context, row: draggedCell.row });\n                    }\n                }\n                else if (dragEndCallback) {\n                    this.dragEndCallback = dragEndCallback;\n                }\n                css(this.mockElement, {\n                    cursor: 'grabbing',\n                    display: 'block'\n                });\n            }\n            /**\n             * General method used while dragging.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             */\n            onDrag(e) {\n                const dragDrop = this;\n                if (dragDrop.isActive) {\n                    e.preventDefault();\n                    dragDrop.setMockElementPosition(e);\n                    if (dragDrop.context) {\n                        if (dragDrop.context.getType() ===\n                            Globals.guiElementType.cell) {\n                            dragDrop.onCellDrag(e);\n                        }\n                        else if (dragDrop.context.getType() ===\n                            Globals.guiElementType.row) {\n                            dragDrop.onRowDrag(e);\n                        }\n                    }\n                    else if (dragDrop.dragEndCallback) {\n                        dragDrop.onCellDrag(e);\n                    }\n                }\n            }\n            /**\n             * General method used when drag finish.\n             */\n            onDragEnd() {\n                const dragDrop = this;\n                if (dragDrop.isActive) {\n                    dragDrop.isActive = false;\n                    css(dragDrop.mockElement, {\n                        cursor: 'grab',\n                        display: 'none'\n                    });\n                    if (dragDrop.context) {\n                        if (dragDrop.context.getType() ===\n                            Globals.guiElementType.cell) {\n                            dragDrop.onCellDragEnd();\n                        }\n                        else if (dragDrop.context.getType() ===\n                            Globals.guiElementType.row) {\n                            dragDrop.onRowDragEnd();\n                        }\n                        dragDrop.context = void 0;\n                        // Show toolbars and snaps.\n                        if (dragDrop.editMode.editCellContext) {\n                            dragDrop.editMode.showToolbars(['row', 'cell'], dragDrop.editMode.editCellContext);\n                            if (dragDrop.editMode.resizer) {\n                                dragDrop.editMode.resizer.setSnapPositions(dragDrop.editMode.editCellContext);\n                            }\n                        }\n                    }\n                    else if (dragDrop.dragEndCallback) {\n                        dragDrop.dragEndCallback(dragDrop.dropContext);\n                        dragDrop.dragEndCallback = void 0;\n                        dragDrop.hideDropPointer();\n                    }\n                }\n            }\n            /**\n             * Sets appropriate drop context and refresh drop pointer position when\n             * row is dragged or cell is dragged as a row.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} contextDetails\n             * Context details (cell, side)\n             */\n            onRowDrag(e, contextDetails) {\n                const dragDrop = this, mouseCellContext = dragDrop.mouseCellContext, dropPointerSize = dragDrop.options.dropPointerSize || 0, offset = dragDrop.options.rowDropOffset || 0;\n                let updateDropPointer = false;\n                if (mouseCellContext) {\n                    const context = (contextDetails ||\n                        ContextDetection.getContext(mouseCellContext, e, offset));\n                    const align = context.side;\n                    if (dragDrop.dropPointer.align !== align ||\n                        dragDrop.dropContext !== context.cell.row) {\n                        updateDropPointer = true;\n                        dragDrop.dropPointer.align = align;\n                        dragDrop.dropContext = context.cell.row;\n                    }\n                    if (align) {\n                        const dropContextRowOffsets = GUIElement.getOffsets(dragDrop.dropContext, dragDrop.editMode.board.container);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(dropContextRowOffsets);\n                        // Update or show drop pointer.\n                        if (!dragDrop.dropPointer.isVisible || updateDropPointer) {\n                            dragDrop.showDropPointer(dropContextRowOffsets.left, dropContextRowOffsets.top + (dragDrop.dropPointer.align === 'bottom' ?\n                                height :\n                                0) - dropPointerSize / 2, width, dropPointerSize);\n                        }\n                    }\n                    else {\n                        dragDrop.dropContext = void 0;\n                        dragDrop.hideDropPointer();\n                    }\n                }\n            }\n            /**\n             * Unmounts dropped row and mounts it in a new position.\n             */\n            onRowDragEnd() {\n                const dragDrop = this, draggedRow = dragDrop.context, dropContext = dragDrop.dropContext;\n                if (dragDrop.dropPointer.align) {\n                    draggedRow.layout.unmountRow(draggedRow);\n                    // Destroy layout when empty.\n                    if (draggedRow.layout.rows.length === 0) {\n                        draggedRow.layout.destroy();\n                    }\n                    dropContext.layout.mountRow(draggedRow, (dropContext.layout.getRowIndex(dropContext) || 0) +\n                        (dragDrop.dropPointer.align === 'bottom' ? 1 : 0));\n                    // Call cellResize board event.\n                    if (draggedRow.cells[0]) {\n                        fireEvent(dragDrop.editMode.board, 'cellResize', { cell: draggedRow.cells[0] });\n                        fireEvent(draggedRow, 'cellChange', { cell: draggedRow.cells[0], row: draggedRow });\n                    }\n                }\n                dragDrop.hideDropPointer();\n                draggedRow.show();\n            }\n            /**\n             * Method used as middleware when cell is dragged.\n             * Decides where to pass an event depending on the mouse context.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} contextDetails\n             * Context details (cell, side)\n             */\n            onCellDrag(e, contextDetails) {\n                const dragDrop = this, mouseCellContext = dragDrop.mouseCellContext, offset = dragDrop.options.cellDropOffset || 0;\n                if (mouseCellContext || contextDetails) {\n                    dragDrop.onCellDragCellCtx(e, contextDetails ||\n                        ContextDetection.getContext(mouseCellContext, e, offset));\n                }\n                else if (dragDrop.mouseRowContext) {\n                    dragDrop.onCellDragRowCtx(e, dragDrop.mouseRowContext);\n                }\n            }\n            /**\n             * Sets appropriate drop context and refreshes the drop pointer\n             * position when a cell is dragged and a cell context is detected.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} context\n             * Context details (cell, side)\n             */\n            onCellDragCellCtx(e, context) {\n                const dragDrop = this, dropPointerSize = dragDrop.options.dropPointerSize || 0, align = context.side;\n                let updateDropPointer = false;\n                if (dragDrop.dropPointer.align !== align ||\n                    dragDrop.dropContext !== context.cell) {\n                    updateDropPointer = true;\n                    dragDrop.dropPointer.align = align;\n                    dragDrop.dropContext = context.cell;\n                }\n                if (align === 'right' || align === 'left') {\n                    const dropContextOffsets = GUIElement.getOffsets(dragDrop.dropContext, dragDrop.editMode.board.container);\n                    const { width, height } = GUIElement.getDimFromOffsets(dropContextOffsets);\n                    // Update or show drop pointer.\n                    if (!dragDrop.dropPointer.isVisible || updateDropPointer) {\n                        const rowLevelInfo = dragDrop.dropContext.row.getRowLevelInfo(e.clientY), pointerHeight = (rowLevelInfo ?\n                            (rowLevelInfo.rowLevel.bottom -\n                                rowLevelInfo.rowLevel.top) :\n                            height);\n                        dragDrop.showDropPointer(dropContextOffsets.left + (align === 'right' ? width : 0) -\n                            dropPointerSize / 2, dropContextOffsets.top, dropPointerSize, pointerHeight);\n                    }\n                }\n                else if (align === 'top' || align === 'bottom') {\n                    const dropContextOffsets = GUIElement.getOffsets(dragDrop.dropContext), rowLevelInfo = dragDrop.dropContext.row\n                        .getRowLevelInfo(dropContextOffsets.top);\n                    if (rowLevelInfo &&\n                        ((rowLevelInfo.index === 0 && align === 'top') ||\n                            (rowLevelInfo.index ===\n                                rowLevelInfo.rowLevels.length - 1 &&\n                                align === 'bottom'))) {\n                        // Checks if a cell is dragged as a row\n                        // (only when a cell edge is on a row edge)\n                        dragDrop.onRowDrag(e, context);\n                    }\n                }\n                else {\n                    dragDrop.dropContext = void 0;\n                    dragDrop.hideDropPointer();\n                }\n            }\n            /**\n             * Sets appropriate drop context and refreshes the drop pointer\n             * position when a cell is dragged and a row context is detected.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {Row} mouseRowContext\n             * Row context.\n             */\n            onCellDragRowCtx(e, mouseRowContext) {\n                const dragDrop = this, dropPointerSize = dragDrop.options.dropPointerSize || 0, rowOffsets = GUIElement.getOffsets(mouseRowContext), rowLevelInfo = mouseRowContext.getRowLevelInfo(e.clientY);\n                let cell, cellOffsets;\n                if (rowLevelInfo) {\n                    for (let i = 0, iEnd = rowLevelInfo.rowLevel.cells.length; i < iEnd; ++i) {\n                        cell = rowLevelInfo.rowLevel.cells[i];\n                        cellOffsets = GUIElement.getOffsets(cell);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(cellOffsets), dashOffsets = dragDrop.editMode.board.container\n                            .getBoundingClientRect(), levelHeight = (rowLevelInfo.rowLevel.bottom -\n                            rowLevelInfo.rowLevel.top);\n                        if (cell.isVisible) {\n                            if (height < 0.8 * levelHeight &&\n                                cellOffsets.left <= e.clientX &&\n                                cellOffsets.right >= e.clientX) {\n                                if (cellOffsets.top > e.clientY) {\n                                    // @ToDo - Mouse above the cell.\n                                }\n                                else if (cellOffsets.bottom < e.clientY) {\n                                    // Mouse below the cell.\n                                    dragDrop.showDropPointer(cellOffsets.left - dashOffsets.left, cellOffsets.top - dashOffsets.top + height, width, levelHeight - height);\n                                    dragDrop.dropPointer.align = 'nestedBottom';\n                                    dragDrop.dropContext = cell;\n                                }\n                                i = iEnd; // Stop the loop\n                            }\n                            else if ((i === 0 && cellOffsets.left > e.clientX) ||\n                                (i === iEnd - 1 && cellOffsets.right < e.clientX)) {\n                                if (cellOffsets.left > e.clientX) {\n                                    // @ToDo - Mouse on the cell left side.\n                                }\n                                else if (cellOffsets.right < e.clientX) {\n                                    // Mouse on the cell right side.\n                                    const pointerWidth = rowOffsets.right - cellOffsets.right;\n                                    dragDrop.showDropPointer(cellOffsets.left + ((i === 0 && cellOffsets.left > e.clientX) ?\n                                        0 :\n                                        width) - dropPointerSize / 2 - dashOffsets.left, cellOffsets.top - dashOffsets.top, pointerWidth > dropPointerSize ?\n                                        pointerWidth :\n                                        dropPointerSize, levelHeight || height);\n                                    dragDrop.dropPointer.align = 'right';\n                                    dragDrop.dropContext = cell;\n                                }\n                                i = iEnd; // Stop the loop\n                            }\n                        }\n                        else if (!cell.isVisible && cell === dragDrop.context) {\n                            // Element is not visible.\n                            dragDrop.dropContext = void 0;\n                            dragDrop.hideDropPointer();\n                        }\n                    }\n                }\n            }\n            /**\n             * Unmounts dropped cell and mounts it in a new position.\n             * When cell is dragged as a row also creates a new row\n             * and mounts cell there.\n             *\n             * @param {Cell} contextCell\n             * Cell used as a dragDrop context.\n             */\n            onCellDragEnd(contextCell) {\n                const dragDrop = this, draggedCell = contextCell || dragDrop.context;\n                let dropContext = dragDrop.dropContext;\n                if (dragDrop.dropPointer.align && dropContext && draggedCell) {\n                    draggedCell.row.unmountCell(draggedCell);\n                    // Destroy row when empty.\n                    if (draggedCell.row.cells.length === 0) {\n                        draggedCell.row.destroy();\n                    }\n                    if ((dragDrop.dropPointer.align === 'top' ||\n                        dragDrop.dropPointer.align === 'bottom') &&\n                        dropContext.getType() === Globals.guiElementType.row) {\n                        dropContext = dropContext;\n                        const newRow = dropContext.layout.addRow({}, void 0, (dropContext.layout.getRowIndex(dropContext) || 0) +\n                            (dragDrop.dropPointer.align === 'bottom' ? 1 : 0));\n                        newRow.mountCell(draggedCell, 0);\n                    }\n                    else if (dragDrop.dropPointer.align === 'nestedBottom' &&\n                        dropContext.getType() === Globals.guiElementType.cell) {\n                        // Create nesting.\n                        const dropContextCell = dropContext;\n                        const row = dropContextCell.row;\n                        const dropContextCellIndex = row.getCellIndex(dropContextCell);\n                        row.unmountCell(dropContextCell);\n                        const newCell = row.addCell({\n                            id: GUIElement.createElementId('col-nested-'),\n                            layout: {\n                                rows: [{}, {}]\n                            }\n                        }, void 0, dropContextCellIndex);\n                        if (newCell.nestedLayout) {\n                            newCell.nestedLayout.rows[0].mountCell(dropContextCell);\n                            newCell.nestedLayout.rows[1].mountCell(draggedCell);\n                        }\n                    }\n                    else if (dropContext.getType() === Globals.guiElementType.cell) {\n                        dropContext = dropContext;\n                        dropContext.row.mountCell(draggedCell, (dropContext.row.getCellIndex(dropContext) || 0) +\n                            (dragDrop.dropPointer.align === 'right' ? 1 : 0));\n                    }\n                }\n                // Call cellResize board event.\n                fireEvent(dragDrop.editMode.board, 'cellResize', { cell: draggedCell });\n                fireEvent(draggedCell.row, 'cellChange', { cell: draggedCell, row: draggedCell.row });\n                dragDrop.hideDropPointer();\n                draggedCell.show();\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        DragDrop.defaultOptions = {\n            enabled: true,\n            rowDropOffset: 30,\n            cellDropOffset: 30,\n            dropPointerSize: 16\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DragDrop;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/Resizer.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (EditGlobals, GUIElement, U) {\n        const { merge, addEvent, createElement, fireEvent, removeEvent } = U;\n        /**\n         * Class providing a resizing functionality.\n         */\n        class Resizer {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /**\n             * Creates a new instance of the Resizer class based on JSON.\n             * @internal\n             */\n            static fromJSON(editMode, json) {\n                return new Resizer(editMode, json.options);\n            }\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            /**\n             * Constructor for the Resizer class.\n             *\n             * @param {EditMode} editMode\n             * The parent editMode reference.\n             *\n             * @param {Resizer.Options} options\n             * Options for the Resizer.\n             */\n            constructor(editMode, options) {\n                this.editMode = editMode;\n                this.options = merge({}, Resizer.defaultOptions, editMode.options.resize, options);\n                this.currentCell = void 0;\n                this.isX = this.options.type.indexOf('x') > -1;\n                this.isY = this.options.type.indexOf('y') > -1;\n                this.isActive = false;\n                this.startX = 0;\n                this.tempSiblingsWidth = [];\n                this.addSnaps();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add Snap - create snaps and add events.\n             *\n             */\n            addSnaps() {\n                const iconsURLPrefix = this.editMode.iconsURLPrefix;\n                const snapWidth = this.options.snap.width || 0;\n                const snapHeight = this.options.snap.height || 0;\n                const dashboardContainer = this.editMode.board.container;\n                // Right snap\n                this.snapRight = createElement('img', {\n                    className: EditGlobals.classNames.resizeSnap + ' ' +\n                        EditGlobals.classNames.resizeSnapX,\n                    src: iconsURLPrefix + 'resize-handle.svg'\n                }, {\n                    width: snapWidth + 'px',\n                    height: snapHeight + 'px',\n                    left: -9999 + 'px'\n                }, dashboardContainer);\n                // Bottom snap\n                this.snapBottom = createElement('img', {\n                    className: EditGlobals.classNames.resizeSnap + ' ' +\n                        EditGlobals.classNames.resizeSnapY,\n                    src: iconsURLPrefix + 'resize-handle.svg'\n                }, {\n                    width: snapWidth + 'px',\n                    height: snapHeight + 'px',\n                    top: -9999 + 'px',\n                    left: '0px'\n                }, dashboardContainer);\n                this.addResizeEvents();\n            }\n            /**\n             * Hide snaps\n             *\n             */\n            disableResizer() {\n                this.isActive = false;\n                this.currentDimension = void 0;\n                this.currentCell = void 0;\n                if (this.snapRight) {\n                    this.snapRight.style.left = '-9999px';\n                }\n                if (this.snapBottom) {\n                    this.snapBottom.style.left = '-9999px';\n                }\n            }\n            /**\n             * Update snap position.\n             *\n             * @param cell\n             * Cell reference\n             */\n            setSnapPositions(cell) {\n                // Set current cell\n                this.currentCell = cell;\n                // Set position of snaps\n                const cellOffsets = GUIElement.getOffsets(cell, this.editMode.board.container);\n                const left = cellOffsets.left || 0;\n                const top = cellOffsets.top || 0;\n                const { width, height } = GUIElement.getDimFromOffsets(cellOffsets);\n                const snapWidth = (this.options.snap.width || 0);\n                const snapHeight = (this.options.snap.height || 0);\n                if (this.snapRight) {\n                    this.snapRight.style.left = (left + width - snapWidth) + 'px';\n                    this.snapRight.style.top = top + (height / 2) - (snapHeight / 2) + 'px';\n                }\n                if (this.snapBottom) {\n                    this.snapBottom.style.top = (top + height - snapHeight) + 'px';\n                    this.snapBottom.style.left = (left + (width / 2) - (snapWidth / 2)) + 'px';\n                }\n            }\n            /**\n             * Method detects siblings and auto-width applied by flex. The resizer\n             * requires static widths for correct calculations, so we need to apply\n             * temporary width on siblings.\n             */\n            setTempWidthSiblings() {\n                const currentCell = this.currentCell;\n                if (currentCell) {\n                    const cellOffsets = GUIElement.getOffsets(currentCell), rowLevelInfo = currentCell.row.getRowLevelInfo(cellOffsets.top), rowLevelCells = (rowLevelInfo && rowLevelInfo.rowLevel.cells) || [];\n                    let cellContainer, cell;\n                    for (let i = 0, iEnd = rowLevelCells.length; i < iEnd; ++i) {\n                        cell = rowLevelCells[i];\n                        cellContainer = cell.container;\n                        // Do not convert width on the current cell and next siblings.\n                        if (cell === currentCell) {\n                            break;\n                        }\n                        if (cellContainer) {\n                            cellContainer.style.flex =\n                                '0 0 ' + cellContainer.offsetWidth + 'px';\n                            this.tempSiblingsWidth.push(cell);\n                        }\n                    }\n                }\n            }\n            /**\n             * Revert widths to auto.\n             */\n            revertSiblingsAutoWidth() {\n                const tempSiblingsWidth = this.tempSiblingsWidth;\n                let cellContainer, cellResize;\n                for (let i = 0, iEnd = tempSiblingsWidth.length; i < iEnd; ++i) {\n                    cellContainer = tempSiblingsWidth[i].container;\n                    if (cellContainer) {\n                        cellContainer.style.flex = '1 1 0%';\n                        cellResize = tempSiblingsWidth[i];\n                    }\n                }\n                this.tempSiblingsWidth = [];\n                // Call cellResize dashboard event.\n                if (cellResize) {\n                    fireEvent(this.editMode.board, 'cellResize', {\n                        cell: cellResize\n                    });\n                    fireEvent(cellResize.row, 'cellChange', {\n                        cell: cellResize,\n                        row: cellResize.row\n                    });\n                }\n            }\n            /**\n             * Add mouse events to snaps\n             *\n             */\n            addResizeEvents() {\n                const resizer = this;\n                let mouseDownSnapX, mouseDownSnapY, mouseMoveSnap, mouseUpSnap;\n                resizer.mouseDownSnapX = mouseDownSnapX = function (e) {\n                    resizer.isActive = true;\n                    resizer.currentDimension = 'x';\n                    resizer.editMode.hideToolbars(['row', 'cell']);\n                    resizer.setTempWidthSiblings();\n                    resizer.startX = e.clientX;\n                };\n                resizer.mouseDownSnapY = mouseDownSnapY = function () {\n                    resizer.isActive = true;\n                    resizer.currentDimension = 'y';\n                    resizer.editMode.hideToolbars(['row', 'cell']);\n                };\n                resizer.mouseMoveSnap = mouseMoveSnap = function (e) {\n                    if (resizer.isActive) {\n                        resizer.onMouseMove(e);\n                    }\n                };\n                resizer.mouseUpSnap = mouseUpSnap = function () {\n                    if (resizer.isActive) {\n                        resizer.isActive = false;\n                        resizer.currentDimension = void 0;\n                        resizer.revertSiblingsAutoWidth();\n                        resizer.editMode.showToolbars(['row', 'cell'], resizer.currentCell);\n                        if (resizer.currentCell) {\n                            resizer.setSnapPositions(resizer.currentCell);\n                        }\n                    }\n                };\n                // Add mouse events\n                addEvent(this.snapRight, 'mousedown', mouseDownSnapX);\n                addEvent(this.snapBottom, 'mousedown', mouseDownSnapY);\n                addEvent(document, 'mousemove', mouseMoveSnap);\n                addEvent(document, 'mouseup', mouseUpSnap);\n                // Touch events\n                // addEvent(snapX, 'touchstart', mouseDownSnapX);\n                // addEvent(snapY, 'touchstart', mouseDownSnapY);\n                // if (!rowContainer.hcEvents.mousemove) {\n                //     addEvent(rowContainer, 'touchmove', mouseMoveSnap);\n                //     addEvent(rowContainer, 'touchend', mouseUpSnap);\n                // }\n                const runReflow = () => {\n                    if (resizer.currentCell) {\n                        resizer.setSnapPositions(resizer.currentCell);\n                    }\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(runReflow);\n                    this.resizeObserver.observe(resizer.editMode.board.container);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', runReflow);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * General method used on resizing.\n             *\n             * @param {global.Event} e\n             * A mouse event.\n             *\n             */\n            onMouseMove(e) {\n                const currentCell = this.currentCell;\n                const cellContainer = currentCell && currentCell.container;\n                const currentDimension = this.currentDimension;\n                if (currentCell &&\n                    cellContainer &&\n                    !((currentCell.row.layout.board.editMode || {}).dragDrop || {})\n                        .isActive) {\n                    const cellOffsets = GUIElement.getOffsets(currentCell);\n                    const { width: parentRowWidth } = GUIElement.getDimFromOffsets(GUIElement.getOffsets(currentCell.row));\n                    // Resize width\n                    if (currentDimension === 'x') {\n                        const newWidth = (Math.min(e.clientX - cellOffsets.left, parentRowWidth) /\n                            parentRowWidth) *\n                            100 +\n                            '%';\n                        currentCell.setSize(newWidth);\n                        this.startX = e.clientX;\n                    }\n                    // Resize height\n                    if (currentDimension === 'y') {\n                        currentCell.setSize(void 0, e.clientY - cellOffsets.top);\n                    }\n                    // Call cellResize dashboard event.\n                    fireEvent(this.editMode.board, 'cellResize', {\n                        cell: currentCell\n                    });\n                    fireEvent(currentCell.row, 'cellChange', {\n                        cell: currentCell,\n                        row: currentCell.row\n                    });\n                    this.setSnapPositions(currentCell);\n                }\n            }\n            /**\n             * Destroy resizer\n             */\n            destroy() {\n                const snaps = ['snapRight', 'snapBottom'];\n                let snap;\n                // Unbind events\n                removeEvent(document, 'mousemove');\n                removeEvent(document, 'mouseup');\n                this.resizeObserver?.unobserve(this.editMode.board.container);\n                for (let i = 0, iEnd = snaps.length; i < iEnd; ++i) {\n                    snap = this[snaps[i]];\n                    // Unbind event\n                    removeEvent(snap, 'mousedown');\n                    // Destroy snap\n                    snap.remove();\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Resizer.JSON}\n             * Class JSON of this Resizer instance.\n             */\n            toJSON() {\n                const options = this.options;\n                return {\n                    $class: 'Dashboards.Action.Resizer',\n                    options: {\n                        enabled: options.enabled,\n                        styles: {\n                            minWidth: options.styles.minWidth,\n                            minHeight: options.styles.minHeight\n                        },\n                        type: options.type,\n                        snap: {\n                            width: options.snap.width,\n                            height: options.snap.height\n                        }\n                    }\n                };\n            }\n        }\n        Resizer.defaultOptions = {\n            enabled: true,\n            styles: {\n                minWidth: 20,\n                minHeight: 50\n            },\n            type: 'xy',\n            snap: {\n                width: 9,\n                height: 17\n            }\n        };\n\n        return Resizer;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/ConfirmationPopup.js', [_modules['Core/Utilities.js'], _modules['Shared/BaseForm.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js']], function (U, BaseForm, EditGlobals, EditRenderer) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement } = U;\n        /**\n         * Class to create confirmation popup.\n         */\n        class ConfirmationPopup extends BaseForm {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the ConfirmationPopup.\n             *\n             * @param parentDiv\n             * Parent div where the popup will be added.\n             *\n             * @param iconsURL\n             * URL to the icons.\n             *\n             * @param editMode\n             * The EditMode instance.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            constructor(parentDiv, iconsURL, editMode, options) {\n                iconsURL =\n                    options && options.close && options.close.icon ?\n                        options.close.icon :\n                        iconsURL;\n                super(parentDiv, iconsURL);\n                this.editMode = editMode;\n                this.options = options;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Returns popup container.\n             *\n             * @param parentDiv\n             * Parent div where the popup will be added.\n             *\n             * @param className\n             * Class name added to the popup container.\n             */\n            createPopupContainer(parentDiv, className = EditGlobals.classNames.confirmationPopup) {\n                return super.createPopupContainer(parentDiv, className);\n            }\n            /**\n             * Adds close button to the popup.\n             *\n             * @param className\n             * Class name added to the close button.\n             */\n            addCloseButton(className = EditGlobals.classNames.popupCloseButton) {\n                return super.addCloseButton(className);\n            }\n            /**\n             * Adds content inside the popup.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            renderContent(options) {\n                // Render content wrapper\n                this.contentContainer = createElement('div', {\n                    className: EditGlobals.classNames.popupContentContainer\n                }, {}, this.container);\n                const popupContainer = this.contentContainer.parentNode;\n                popupContainer.style.marginTop = '0px';\n                const offsetTop = popupContainer.getBoundingClientRect().top;\n                popupContainer.style.marginTop = (offsetTop < 0 ? Math.abs(offsetTop - 200) : 200) + 'px';\n                // Render text\n                EditRenderer.renderText(this.contentContainer, {\n                    title: options.text || ''\n                });\n                // Render button wrapper\n                this.buttonContainer = createElement('div', {\n                    className: EditGlobals.classNames.popupButtonContainer\n                }, {}, this.container);\n                // Render cancel buttons\n                EditRenderer.renderButton(this.buttonContainer, {\n                    text: options.cancelButton.value,\n                    className: EditGlobals.classNames.popupCancelBtn,\n                    callback: options.cancelButton.callback\n                });\n                // Confirm\n                EditRenderer.renderButton(this.buttonContainer, {\n                    text: options.confirmButton.value,\n                    className: EditGlobals.classNames.popupConfirmBtn,\n                    callback: () => {\n                        // Run callback\n                        // confirmCallback.call(context);\n                        options.confirmButton.callback.call(options.confirmButton.context);\n                        // Hide popup\n                        this.closePopup();\n                    }\n                });\n            }\n            /**\n             * Shows confirmation popup.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            show(options) {\n                this.showPopup();\n                this.renderContent(options);\n                this.editMode.setEditOverlay();\n            }\n            /**\n             * Hides confirmation popup.\n             */\n            closePopup() {\n                super.closePopup();\n                this.editMode.setEditOverlay(true);\n            }\n        }\n\n        return ConfirmationPopup;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditMode.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js'], _modules['Dashboards/EditMode/Toolbar/CellEditToolbar.js'], _modules['Dashboards/EditMode/Toolbar/RowEditToolbar.js'], _modules['Dashboards/EditMode/SidebarPopup.js'], _modules['Dashboards/EditMode/EditContextMenu.js'], _modules['Dashboards/Actions/DragDrop.js'], _modules['Dashboards/Actions/Resizer.js'], _modules['Dashboards/EditMode/ConfirmationPopup.js'], _modules['Dashboards/Actions/ContextDetection.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (EditGlobals, EditRenderer, CellEditToolbar, RowEditToolbar, SidebarPopup, EditContextMenu, DragDrop, Resizer, ConfirmationPopup, ContextDetection, GUIElement, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, css, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class EditMode {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Edit mode constructor.\n             * @internal\n              *\n             * @param board\n             * Board instance\n             *\n             * @param options\n             * Edit mode options\n             */\n            constructor(board, options) {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * @internal\n                 */\n                this.active = false;\n                /**\n                 * URL from which the icons will be fetched.\n                 */\n                this.iconsURLPrefix = 'https://code.highcharts.com/dashboards/2.0.0/gfx/dashboards-icons/';\n                this.iconsURLPrefix =\n                    (options && options.iconsURLPrefix) || this.iconsURLPrefix;\n                this.options = merge(\n                // Default options.\n                {\n                    confirmationPopup: {\n                        close: {\n                            icon: this.iconsURLPrefix + 'close.svg'\n                        }\n                    },\n                    contextMenu: {\n                        icon: this.iconsURLPrefix + 'menu.svg'\n                    },\n                    dragDrop: {\n                        enabled: true\n                    },\n                    enabled: true,\n                    resize: {\n                        enabled: true\n                    },\n                    settings: {\n                        enabled: true\n                    },\n                    toolbars: {\n                        cell: {\n                            enabled: true\n                        },\n                        row: {\n                            enabled: true\n                        }\n                    },\n                    tools: {\n                        addComponentBtn: {\n                            enabled: true,\n                            icon: this.iconsURLPrefix + 'add.svg'\n                        }\n                    }\n                }, options || {});\n                this.board = board;\n                this.lang = merge({}, EditGlobals.lang, this.options.lang);\n                this.contextPointer = {\n                    isVisible: false,\n                    element: createElement('div', { className: EditGlobals.classNames.contextDetectionPointer }, {}, this.board.container)\n                };\n                this.isInitialized = false;\n                this.isContextDetectionActive = false;\n                this.tools = {};\n                this.createTools();\n                this.confirmationPopup = new ConfirmationPopup(board.container, this.iconsURLPrefix, this, this.options.confirmationPopup);\n                // Create edit overlay.\n                this.editOverlay = createElement('div', {\n                    className: EditGlobals.classNames.editOverlay\n                }, {}, board.container);\n                this.isEditOverlayActive = false;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Event to fire on click of the context button.\n             * @internal\n             */\n            onContextBtnClick() {\n                const editMode = this;\n                // Toggle context menu visibility.\n                if (editMode.tools.contextMenu) {\n                    if (!editMode.tools.contextMenu.isVisible) {\n                        editMode.tools.contextMenu\n                            .updatePosition(editMode.tools.contextButtonElement);\n                    }\n                    editMode.tools.contextMenu.setVisible(!editMode.tools.contextMenu.isVisible);\n                }\n            }\n            /**\n             * Activate or deactivate edit mode.\n             */\n            onEditModeToggle() {\n                const editMode = this;\n                if (editMode.active) {\n                    editMode.deactivate();\n                }\n                else {\n                    editMode.activate();\n                }\n            }\n            /**\n             * Init the instance of edit mode.\n             * @internal\n             */\n            init() {\n                const editMode = this;\n                if (this.options.resize?.enabled) {\n                    editMode.resizer = new Resizer(editMode, editMode.options.resize);\n                }\n                editMode.dragDrop = new DragDrop(editMode, editMode.options.dragDrop);\n                // Init rowToolbar.\n                if (editMode.options.toolbars?.row?.enabled && !editMode.rowToolbar) {\n                    editMode.rowToolbar = new RowEditToolbar(editMode);\n                }\n                // Init cellToolbar.\n                if (editMode.options.toolbars?.cell?.enabled && !editMode.cellToolbar) {\n                    editMode.cellToolbar = new CellEditToolbar(editMode);\n                }\n                // Init Sidebar.\n                if (!editMode.sidebar) {\n                    editMode.sidebar = new SidebarPopup(this.board.container, this.iconsURLPrefix, editMode);\n                }\n                editMode.isInitialized = true;\n            }\n            /**\n             * Init events for edit mode.\n             * @internal\n             */\n            initEvents() {\n                const editMode = this, board = editMode.board;\n                for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                    editMode.setLayoutEvents(board.layouts[i]);\n                }\n                if (editMode.cellToolbar) {\n                    // Stop context detection when mouse on cell toolbar.\n                    addEvent(editMode.cellToolbar.container, 'mouseenter', function () {\n                        editMode.stopContextDetection();\n                    });\n                    addEvent(editMode.cellToolbar.container, 'mouseleave', function () {\n                        editMode.isContextDetectionActive = true;\n                    });\n                }\n                if (editMode.rowToolbar) {\n                    // Stop context detection when mouse on row toolbar.\n                    addEvent(editMode.rowToolbar.container, 'mouseenter', function () {\n                        editMode.stopContextDetection();\n                    });\n                    addEvent(editMode.rowToolbar.container, 'mouseleave', function () {\n                        editMode.isContextDetectionActive = true;\n                    });\n                }\n                if (board.layoutsWrapper) {\n                    addEvent(board.layoutsWrapper, 'mousemove', editMode.onDetectContext.bind(editMode));\n                    addEvent(board.layoutsWrapper, 'click', editMode.onContextConfirm.bind(editMode));\n                    addEvent(board.layoutsWrapper, 'mouseleave', () => {\n                        editMode.hideContextPointer();\n                    });\n                }\n            }\n            /**\n             * Set events for the layout.\n             * @internal\n             */\n            setLayoutEvents(layout) {\n                const editMode = this;\n                for (let j = 0, jEnd = layout.rows.length; j < jEnd; ++j) {\n                    const row = layout.rows[j];\n                    editMode.setRowEvents(row);\n                    for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                        editMode.setCellEvents(row.cells[k]);\n                    }\n                }\n            }\n            /**\n             * Set events for the row.\n             * @internal\n             */\n            setRowEvents(row) {\n                const editMode = this;\n                // Init dragDrop row events.\n                if (editMode.dragDrop) {\n                    const dragDrop = editMode.dragDrop;\n                    addEvent(row.container, 'mouseenter', function () {\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseRowContext = row;\n                        }\n                    });\n                    addEvent(row.container, 'mousemove', function (e) {\n                        if (dragDrop.isActive && e.target === row.container) {\n                            dragDrop.mouseRowContext = row;\n                        }\n                    });\n                    addEvent(row.container, 'mouseleave', function () {\n                        if (dragDrop.isActive && dragDrop.mouseRowContext === row) {\n                            dragDrop.mouseRowContext = void 0;\n                        }\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseRowContext = void 0;\n                        }\n                    });\n                }\n            }\n            /**\n             * Set events for the cell.\n             * @internal\n             */\n            setCellEvents(cell) {\n                const editMode = this;\n                if (cell.nestedLayout) {\n                    editMode.setLayoutEvents(cell.nestedLayout);\n                }\n                else if (editMode.cellToolbar && cell.container) {\n                    // Init dragDrop cell events.\n                    if (editMode.dragDrop || editMode.resizer) {\n                        const dragDrop = editMode.dragDrop;\n                        addEvent(cell.container, 'mouseenter', function () {\n                            if (editMode.isContextDetectionActive) {\n                                editMode.mouseCellContext = cell;\n                            }\n                        });\n                        addEvent(cell.container, 'mousemove', function (e) {\n                            if (dragDrop &&\n                                dragDrop.isActive &&\n                                e.target === cell.container) {\n                                dragDrop.mouseCellContext = cell;\n                                dragDrop.mouseRowContext = void 0;\n                            }\n                        });\n                        addEvent(cell.container, 'mouseleave', function () {\n                            if (dragDrop &&\n                                dragDrop.isActive &&\n                                dragDrop.mouseCellContext === cell) {\n                                dragDrop.mouseCellContext = void 0;\n                            }\n                            if (editMode.isContextDetectionActive) {\n                                editMode.mouseCellContext = void 0;\n                            }\n                        });\n                    }\n                }\n            }\n            /**\n             * Activate the edit mode.\n             * @internal\n             */\n            activate() {\n                const editMode = this;\n                // Init edit mode.\n                if (!editMode.isInitialized) {\n                    editMode.init();\n                    editMode.initEvents();\n                }\n                // Set edit mode active class to dashboard.\n                editMode.board.container.classList.add(EditGlobals.classNames.editModeEnabled);\n                // TODO all buttons should be activated, add some wrapper?\n                if (this.addComponentBtn) {\n                    this.addComponentBtn.style.display = 'block';\n                }\n                editMode.active = true;\n                editMode.isContextDetectionActive = true;\n            }\n            /**\n             * Deactivate the edit mode.\n             * @internal\n             */\n            deactivate() {\n                const editMode = this, dashboardCnt = editMode.board.container;\n                dashboardCnt.classList.remove(EditGlobals.classNames.editModeEnabled);\n                // Hide toolbars.\n                editMode.hideToolbars();\n                // Remove highlight from the context row if exists.\n                if (this.editCellContext) {\n                    this.editCellContext.row?.setHighlight(true);\n                }\n                // TODO all buttons should be deactivated.\n                if (this.addComponentBtn) {\n                    this.addComponentBtn.style.display = 'none';\n                }\n                if (editMode.resizer) {\n                    editMode.resizer.disableResizer();\n                }\n                // Disable responsive width and restore elements to their original\n                // positions and sizes.\n                if (this.board.layoutsWrapper) {\n                    this.board.layoutsWrapper.style.width = '100%';\n                }\n                this.board.reflow();\n                editMode.active = false;\n                editMode.stopContextDetection();\n                this.editCellContext = void 0;\n                this.potentialCellContext = void 0;\n            }\n            /**\n             * Function to check whether the edit mode is activated.\n             * @internal\n             *\n             * @returns\n             * Whether the edit mode is activated.\n             */\n            isActive() {\n                return this.active;\n            }\n            /**\n             * Method for hiding edit toolbars.\n             * @internal\n             *\n             * @param toolbarTypes\n             * The array of toolbar names to hide ('cell', 'row', 'sidebar').\n             */\n            hideToolbars(toolbarTypes) {\n                const editMode = this, toolbarsToHide = toolbarTypes || ['cell', 'row', 'sidebar'];\n                for (let i = 0, iEnd = toolbarsToHide.length; i < iEnd; ++i) {\n                    switch (toolbarsToHide[i]) {\n                        case 'cell': {\n                            if (editMode.cellToolbar &&\n                                editMode.cellToolbar.isVisible) {\n                                editMode.cellToolbar.hide();\n                            }\n                            break;\n                        }\n                        case 'row': {\n                            if (editMode.rowToolbar && editMode.rowToolbar.isVisible) {\n                                editMode.rowToolbar.hide();\n                            }\n                            break;\n                        }\n                        case 'sidebar': {\n                            if (editMode.sidebar && editMode.sidebar.isVisible) {\n                                editMode.sidebar.hide();\n                            }\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Method for hiding edit toolbars.\n             * @internal\n             *\n             * @param toolbarTypes\n             * The array of toolbar names to hide ('cell', 'row', 'sidebar').\n             *\n             * @param currentCell\n             * The cell reference for toolbar.\n             *\n             */\n            showToolbars(toolbarTypes, currentCell) {\n                const editMode = this, toolbarsToShow = toolbarTypes || ['cell', 'row', 'sidebar'];\n                for (let i = 0, iEnd = toolbarsToShow.length; i < iEnd; ++i) {\n                    switch (toolbarsToShow[i]) {\n                        case 'cell': {\n                            if (currentCell && editMode.cellToolbar) {\n                                editMode.cellToolbar.isVisible = true;\n                                editMode.cellToolbar.showToolbar(currentCell);\n                            }\n                            break;\n                        }\n                        case 'row': {\n                            if (currentCell && currentCell.row && editMode.rowToolbar) {\n                                editMode.rowToolbar.isVisible = true;\n                                editMode.rowToolbar.showToolbar(currentCell.row);\n                            }\n                            break;\n                        }\n                        case 'sidebar': {\n                            if (editMode.sidebar && !editMode.sidebar.isVisible) {\n                                editMode.sidebar.show();\n                            }\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Creates the buttons such as `addComponent` button, context menu button\n             * and its container.\n             * @internal\n             */\n            createTools() {\n                const editMode = this;\n                const options = this.options;\n                // Create tools container\n                this.tools.container = document.createElement('div');\n                this.tools.container.classList.add(EditGlobals.classNames.editTools);\n                this.board.layoutsWrapper?.parentNode.insertBefore(this.tools.container, this.board.layoutsWrapper);\n                // Create context menu button\n                if (options.contextMenu && options.contextMenu.enabled) {\n                    this.tools.contextButtonElement = EditRenderer.renderContextButton(this.tools.container, editMode);\n                    // Init contextMenu if doesn't exist.\n                    if (!editMode.tools.contextMenu) {\n                        editMode.tools.contextMenu = new EditContextMenu(editMode.board.container, editMode.options.contextMenu || {}, editMode);\n                    }\n                }\n                // Create add component button\n                if (options.tools?.addComponentBtn?.enabled &&\n                    options.toolbars?.cell?.enabled) {\n                    const addIconURL = options.tools.addComponentBtn.icon;\n                    this.addComponentBtn = EditRenderer.renderButton(this.tools.container, {\n                        className: EditGlobals.classNames.editToolsBtn,\n                        icon: addIconURL,\n                        text: this.lang.addComponent,\n                        callback: () => {\n                            // Sidebar trigger\n                            if (editMode.sidebar) {\n                                editMode.sidebar.show();\n                                editMode.setEditOverlay();\n                            }\n                        },\n                        style: {\n                            display: 'none'\n                        }\n                    });\n                }\n            }\n            /**\n             * Event fired when detecting context on drag&drop.\n             *\n             * @param e\n             * Mouse pointer event.\n             */\n            onDetectContext(e) {\n                const editMode = this, offset = 50; // TODO - add it from options.\n                if (editMode.isActive() &&\n                    editMode.isContextDetectionActive &&\n                    (editMode.mouseCellContext || editMode.mouseRowContext) &&\n                    !(editMode.dragDrop || {}).isActive) {\n                    let cellContext, rowContext;\n                    if (editMode.mouseCellContext) {\n                        cellContext = ContextDetection\n                            .getContext(editMode.mouseCellContext, e, offset).cell;\n                    }\n                    else if (editMode.mouseRowContext) {\n                        rowContext = editMode.mouseRowContext;\n                        cellContext = rowContext.layout.parentCell;\n                    }\n                    this.potentialCellContext = cellContext;\n                    if (cellContext) {\n                        const cellContextOffsets = GUIElement\n                            .getOffsets(cellContext, editMode.board.container);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(cellContextOffsets);\n                        editMode.showContextPointer(cellContextOffsets.left, cellContextOffsets.top, width, height);\n                    }\n                }\n            }\n            /**\n             * Stops the context detection.\n             */\n            stopContextDetection() {\n                this.isContextDetectionActive = false;\n                if (this.dragDrop) {\n                    this.dragDrop.mouseCellContext = void 0;\n                }\n                this.mouseCellContext = void 0;\n                this.hideContextPointer();\n            }\n            /**\n             * Confirms the selected context.\n             */\n            onContextConfirm() {\n                if (this.isContextDetectionActive &&\n                    this.potentialCellContext &&\n                    this.editCellContext !== this.potentialCellContext) {\n                    this.setEditCellContext(this.potentialCellContext, this.editCellContext);\n                }\n            }\n            /**\n             * Sets the edit cell context.\n             * @internal\n             */\n            setEditCellContext(editCellContext, oldEditCellContext) {\n                const editMode = this, oldContextRow = oldEditCellContext && oldEditCellContext.row;\n                editMode.editCellContext = editCellContext;\n                editMode.showToolbars(['row', 'cell'], editCellContext);\n                if (!oldContextRow || oldContextRow !== editCellContext.row) {\n                    if (oldContextRow) {\n                        // Remove highlight from the previous row.\n                        oldContextRow.setHighlight(true);\n                    }\n                    // Add highlight to the context row.\n                    editCellContext.row.setHighlight();\n                }\n                if (editMode.resizer) {\n                    editMode.resizer.setSnapPositions(editCellContext);\n                }\n            }\n            /**\n             * Method for showing and positioning context pointer.\n             * @internal\n             */\n            showContextPointer(left, top, width, height) {\n                this.contextPointer.isVisible = true;\n                css(this.contextPointer.element, {\n                    display: 'block',\n                    left: left + 'px',\n                    top: top + 'px',\n                    height: height + 'px',\n                    width: width + 'px'\n                });\n            }\n            /**\n             * Method for hiding context pointer.\n             * @internal\n             */\n            hideContextPointer() {\n                if (this.contextPointer.isVisible) {\n                    this.contextPointer.isVisible = false;\n                    this.contextPointer.element.style.display = 'none';\n                }\n            }\n            /**\n             * Adds/Removes the edit mode overlay.\n             * @internal\n             *\n             * @param remove\n             * Whether the edit overlay should be removed.\n             */\n            setEditOverlay(remove) {\n                const editMode = this, cnt = editMode.editOverlay, isSet = cnt.classList.contains(EditGlobals.classNames.editOverlayActive);\n                if (!remove && !isSet) {\n                    cnt.classList.add(EditGlobals.classNames.editOverlayActive);\n                    editMode.isEditOverlayActive = true;\n                }\n                else if (remove && isSet) {\n                    cnt.classList.remove(EditGlobals.classNames.editOverlayActive);\n                    editMode.isEditOverlayActive = false;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return EditMode;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Fullscreen.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js']], function (U, Globals) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent } = U;\n        class Fullscreen {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(DashboardClass) {\n                this.isOpen = false;\n                this.board = DashboardClass;\n                // Add class to allow scroll element\n                this.board.boardWrapper.classList.add(Globals.classNamePrefix + '-fullscreen');\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Toggles displaying the board in fullscreen mode.\n             */\n            toggle() {\n                const fullscreen = this, isOpen = this.isOpen;\n                fullscreen[isOpen ? 'close' : 'open']();\n            }\n            /**\n             * Display board in fullscreen.\n             */\n            open() {\n                if (this.isOpen) {\n                    return;\n                }\n                const fullscreen = this, board = fullscreen.board;\n                // Handle exitFullscreen() method when user clicks 'Escape' button.\n                const unbindChange = addEvent(board.boardWrapper.ownerDocument, // Dashboard's document\n                'fullscreenchange', function () {\n                    if (fullscreen.isOpen) {\n                        fullscreen.isOpen = false;\n                        fullscreen.close();\n                    }\n                    else {\n                        fullscreen.isOpen = true;\n                        fullscreen.setButtonText();\n                    }\n                });\n                fullscreen.unbindFullscreenEvent = () => {\n                    unbindChange();\n                };\n                const promise = board.boardWrapper.requestFullscreen();\n                // eslint-disable-next-line highcharts/quote-members\n                promise.catch(() => {\n                    throw new Error('Full screen is not supported.');\n                });\n            }\n            /**\n             * Stops displaying the dashboard in fullscreen mode.\n             */\n            close() {\n                const fullscreen = this, board = fullscreen.board;\n                // Don't fire exitFullscreen() when user exited using 'Escape' button.\n                if (fullscreen.isOpen &&\n                    board.boardWrapper.ownerDocument instanceof Document) {\n                    void board.boardWrapper.ownerDocument.exitFullscreen();\n                }\n                // Unbind event as it's necessary only before exiting from fullscreen.\n                if (fullscreen.unbindFullscreenEvent) {\n                    fullscreen.unbindFullscreenEvent =\n                        fullscreen.unbindFullscreenEvent();\n                }\n                fullscreen.isOpen = false;\n                this.setButtonText();\n            }\n            /**\n             * Set the correct text depending of the fullscreen is on or of.\n             */\n            setButtonText() {\n                const editMode = this.board.editMode, contextMenu = editMode && editMode.tools.contextMenu, button = contextMenu && contextMenu.items.viewFullscreen;\n                if (button && button.innerElement) {\n                    const lang = editMode.lang;\n                    button.innerElement.innerHTML =\n                        (this.isOpen ? lang.exitFullscreen : lang.viewFullscreen) || '';\n                }\n            }\n        }\n\n        return Fullscreen;\n    });\n    _registerModule(_modules, 'masters/modules/layout.src.js', [_modules['Dashboards/Globals.js'], _modules['Dashboards/EditMode/EditMode.js'], _modules['Dashboards/EditMode/Fullscreen.js']], function (Globals, EditMode, Fullscreen) {\n\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        // Fill registries\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.EditMode = EditMode;\n        G.FullScreen = Fullscreen;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n}));"],"names":["factory","module","exports","define","amd","Dashboards","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","EditGlobals","U","merge","createElement","defined","renderContextButton","parentNode","editMode","contextButton","contextMenuOptions","options","contextMenu","className","classNames","contextMenuBtn","onclick","event","stopPropagation","onContextBtnClick","icon","src","text","contextMenuBtnText","textContent","setAttribute","lang","accessibility","button","renderCollapseHeader","parentElement","name","showToggle","onchange","isEnabled","isNested","accordion","collapsableContentHeader","header","accordionHeader","headerBtn","accordionHeaderBtn","renderToggle","enabledOnOffLabels","id","value","headerIcon","accordionHeaderIcon","collapsedElement","content","accordionContent","hiddenElement","addEventListener","classList","toggle","outerElement","renderSelect","renderText","title","isLabel","iconsURLPrefix","customSelect","dropdown","btn","dropdownButton","btnContent","dropdownButtonContent","iconURL","find","selectOptions","item","placeholder","dropdownPointer","dropdownIcon","dropdownContent","i","iEnd","length","renderSelectElement","option","callback","selectOption","selectOptionBtn","customSelectButton","add","langKey","toggleContainer","type","role","ariaChecked","ariaLabel","off","toggleLabels","toggleWrapper","input","renderCheckbox","callbackFn","e","checked","slider","toggleSlider","preventDefault","on","textElem","labelFor","htmlFor","labelText","renderIcon","iconElem","style","mousedown","click","onmousedown","arguments","renderInput","toString","replace","target","renderTextarea","textarea","renderButton","getRendererFunction","select","collapse","checkbox","EditRenderer","MenuItem","constructor","menu","isActive","defaultOptions","container","setContainer","innerElement","setInnerElement","menuItem","itemsClassName","display","getValue","events","bind","update","activate","deactivate","viewFullscreen","fullScreen","board","fullscreen","MenuItemBindings","Menu","parent","isVisible","activeItems","items","initItems","itemsSchemas","itemSchema","itemConfig","optionsItems","push","setActiveItems","indexOf","j","jEnd","deactivateActiveItems","updateActiveItems","destroy","remove","css","iconURLPrefix","outline","outlineClassName","hide","setPosition","refreshOutline","x","y","guiElement","offset","guiElemCnt","toolbar","left","top","width","offsetWidth","height","offsetHeight","hideOutline","EditToolbar","GUIElement","fireEvent","objectEach","CellEditToolbar","getItemsConfig","dragDrop","enabled","cellEditToolbar","cell","onDragStart","settings","setEditOverlay","onCellOptions","menuDestroy","popup","confirmationPopup","show","confirmButton","onCellDestroy","context","cancelButton","closePopup","confirmDestroyCell","toolbars","showToolbar","cellCnt","cellOffsets","getOffsets","right","sidebar","setHighlight","row","resetEditedCell","hideToolbars","cells","editedCell","editToolbar","editToolbarCellOutline","editToolbarCell","editToolbarItem","RowEditToolbar","getMenuItemsConfig","rowEditToolbar","onRowOptions","onRowDestroy","confirmDestroyRow","offsetX","rowCnt","rowOffsets","rowWidth","clientWidth","clientHeight","resetEditedRow","editedRow","editToolbarRowOutline","editToolbarRow","error","closeSidebar","changedOptions","chartOptionsJSON","renderContent","component","editableOptions","getOptions","accordionContainer","accordionMenu","end","renderAccordion","buttonContainer","accordionMenuButtonsContainer","popupConfirmBtn","chartOptions","popupCancelBtn","updateOptions","propertyPath","pathLength","currentLevel","parsedValue","JSON","parse","key","renderNested","renderFunction","getEditableOptionValue","nestedOptions","accordionOptions","collapsedHeader","AST","addEvent","parentDiv","iconsURL","createPopupContainer","closeButton","addCloseButton","match","forEach","eventName","closeButtonEvents","document","code","showPopup","toolbarClass","popupDiv","popupCloseButton","innerHTML","emptyHTML","removeAttribute","appendChild","AccordionMenu","BaseForm","Bindings","Layout","SidebarPopup","components","componentsList","getComponentsList","detectRightSidebar","layoutWrapper","layoutsWrapper","removeClassNames","editSidebarShow","editSidebarRightShow","addClassNames","isRightSidebar","editSidebarRight","setTimeout","resizer","disableResizer","editCellContext","stopContextDetection","generateContent","renderHeader","addComponent","renderAddComponentsList","getType","mountedComponent","gridElement","gridWrapper","editGridItems","onMouseLeave","dropContext","layouts","layout","createElementId","copyId","parentContainerId","rows","newCell","onDrop","connector","initConnector","setEditCellContext","removeEventListener","onDropNewComponent","componentOptions","addCell","onCellDragEnd","isEditOverlayActive","showToolbars","isHighlighted","isContextDetectionActive","editSidebarTitle","componentTypes","componentList","componentName","prototype","getOptionsOnDrop","addLayout","contains","includes","call","editSidebar","newLayoutName","cellName","elements","tagName","EditContextMenu","insertBefore","initEvents","tools","contextButtonElement","setVisible","visible","updatePosition","ctxButton","offsetLeft","offsetTop","contextMenuItem","onEditModeToggle","ContextDetection","isGUIElementOnParentEdge","mouseContext","side","visibleElements","getVisibleRows","getVisibleCells","lastElementIndex","getContextLevel","sideOffset","overlappedLevels","getOverlappingLevels","divOffset","lastOverlappedLevel","level","Math","floor","getContext","mouseCellContext","mouseCellContextOffsets","getDimFromOffsets","leftSideX","clientX","topSideY","clientY","sideY","sideX","getParentCell","Globals","DragDrop","mockElement","dragMock","dropPointer","align","element","showDropPointer","hideDropPointer","setMockElementPosition","mouseEvent","dashBoundingRect","getBoundingClientRect","onDrag","onDragEnd","dragEndCallback","guiElementType","draggedCell","cursor","onCellDrag","onRowDrag","onRowDragEnd","setSnapPositions","contextDetails","dropPointerSize","rowDropOffset","updateDropPointer","dropContextRowOffsets","draggedRow","unmountRow","mountRow","getRowIndex","cellDropOffset","onCellDragCellCtx","mouseRowContext","onCellDragRowCtx","dropContextOffsets","rowLevelInfo","getRowLevelInfo","pointerHeight","rowLevel","bottom","index","rowLevels","dashOffsets","levelHeight","pointerWidth","contextCell","unmountCell","newRow","addRow","mountCell","dropContextCell","dropContextCellIndex","getCellIndex","nestedLayout","removeEvent","Resizer","fromJSON","json","resize","currentCell","isX","isY","startX","tempSiblingsWidth","addSnaps","snapWidth","snap","snapHeight","dashboardContainer","snapRight","resizeSnap","resizeSnapX","snapBottom","resizeSnapY","addResizeEvents","currentDimension","setTempWidthSiblings","cellContainer","rowLevelCells","flex","revertSiblingsAutoWidth","cellResize","mouseDownSnapX","mouseDownSnapY","mouseMoveSnap","mouseUpSnap","onMouseMove","runReflow","ResizeObserver","resizeObserver","observe","unbind","parentRowWidth","newWidth","min","setSize","snaps","unobserve","toJSON","$class","styles","minWidth","minHeight","close","contentContainer","popupContentContainer","popupContainer","marginTop","abs","popupButtonContainer","ConfirmationPopup","active","addComponentBtn","contextPointer","contextDetectionPointer","isInitialized","createTools","editOverlay","init","rowToolbar","cellToolbar","setLayoutEvents","onDetectContext","onContextConfirm","hideContextPointer","setRowEvents","k","kEnd","setCellEvents","editModeEnabled","dashboardCnt","reflow","potentialCellContext","toolbarTypes","toolbarsToHide","toolbarsToShow","editTools","addIconURL","editToolsBtn","cellContext","rowContext","parentCell","cellContextOffsets","showContextPointer","oldEditCellContext","oldContextRow","cnt","isSet","editOverlayActive","DashboardClass","isOpen","boardWrapper","classNamePrefix","open","unbindChange","ownerDocument","setButtonText","unbindFullscreenEvent","promise","requestFullscreen","catch","Error","Document","exitFullscreen","EditMode","Fullscreen","G","FullScreen"],"mappings":"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"}