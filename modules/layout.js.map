{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards Layout 3.5.0 (2025-07-14)\n *\n * (c) 2009-2025 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/modules/layout', ['dashboards'], function (Dashboards) {\n            factory(Dashboards);\n            factory.Dashboards = Dashboards;\n            return factory;\n        });\n    } else {\n        factory(typeof Dashboards !== 'undefined' ? Dashboards : undefined);\n    }\n}(function (Dashboards) {\n    'use strict';\n    var _modules = Dashboards ? Dashboards._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Dashboards.win.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Dashboards/EditMode/EditRenderer.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js']], function (EditGlobals, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, createElement, defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Function to create a context button.\n         * @internal\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param editMode\n         * EditMode instance.\n         *\n         * @returns\n         * Context button element.\n         */\n        function renderContextButton(parentNode, editMode) {\n            const contextMenuOptions = editMode.options.contextMenu;\n            let contextButton;\n            if (contextMenuOptions) {\n                contextButton = createElement('button', {\n                    className: EditGlobals.classNames.contextMenuBtn,\n                    onclick: function (event) {\n                        event.stopPropagation();\n                        editMode.onContextBtnClick();\n                    }\n                }, {}, parentNode);\n                // Add the icon if defined.\n                if (contextMenuOptions.icon) {\n                    createElement('img', {\n                        src: contextMenuOptions.icon,\n                        className: EditGlobals.classNames.icon\n                    }, {}, contextButton);\n                }\n                // Add text next to the icon if defined.\n                if (contextMenuOptions.text) {\n                    createElement('span', {\n                        className: EditGlobals.classNames.contextMenuBtnText,\n                        textContent: contextMenuOptions.text\n                    }, {}, contextButton);\n                }\n                contextButton.setAttribute('aria-label', editMode.lang.accessibility.contextMenu.button);\n                contextButton.setAttribute('aria-expanded', 'false');\n            }\n            return contextButton;\n        }\n        /**\n         * Creates the collapsable header element.\n         * @internal\n         *\n         * @param parentElement\n         * The HTMLElement to which the element should be rendered to.\n         *\n         * @param options\n         * Nested header options.\n         *\n         * @returns the outer element and content in the collapsable div.\n         */\n        function renderCollapseHeader(parentElement, options) {\n            const { name, showToggle, onchange, isEnabled, isNested, isStandalone, lang } = options;\n            const accordion = createElement('div', {\n                className: EditGlobals.classNames[(isNested ? 'accordionNestedWrapper' : 'accordionContainer')] + ' ' +\n                    (isStandalone ?\n                        EditGlobals.classNames.accordionStandaloneWrapper : '') + ' ' + EditGlobals.classNames.collapsableContentHeader\n            }, {}, parentElement);\n            const header = createElement('div', {\n                className: EditGlobals.classNames.accordionHeader\n            }, {}, accordion);\n            let headerBtn;\n            if (!isStandalone || showToggle) {\n                headerBtn = createElement(isStandalone && showToggle ? 'span' : 'button', {\n                    className: EditGlobals.classNames[isStandalone ?\n                        'accordionHeaderWrapper' : 'accordionHeaderBtn']\n                }, {}, header);\n            }\n            createElement('span', {\n                textContent: lang[name] || name\n            }, {}, headerBtn);\n            if (showToggle && header) {\n                renderToggle(header, {\n                    enabledOnOffLabels: true,\n                    id: name,\n                    name: '',\n                    onchange: onchange,\n                    value: isEnabled || false,\n                    lang\n                });\n            }\n            if (!isStandalone) {\n                const headerIcon = createElement('span', {\n                    className: EditGlobals.classNames.accordionHeaderIcon + ' ' +\n                        EditGlobals.classNames.collapsedElement\n                }, {}, headerBtn);\n                headerBtn?.addEventListener('click', function () {\n                    content.classList.toggle(EditGlobals.classNames.hiddenElement);\n                    headerIcon?.classList.toggle(EditGlobals.classNames.collapsedElement);\n                });\n            }\n            const content = createElement('div', {\n                className: EditGlobals.classNames.accordionContent + ' ' +\n                    (isStandalone ?\n                        EditGlobals.classNames.standaloneElement :\n                        EditGlobals.classNames.hiddenElement)\n            }, {}, accordion);\n            return { outerElement: accordion, content: content };\n        }\n        /**\n         * Function to create select element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param options\n         * Select form field options.\n         *\n         * @returns\n         * Select element\n         */\n        function renderSelect(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const iconsURLPrefix = options.iconsURLPrefix || '';\n            const customSelect = createElement('div', {\n                className: EditGlobals.classNames.dropdown +\n                    ' ' +\n                    EditGlobals.classNames.collapsableContentHeader\n            }, {}, parentElement);\n            const btn = createElement('button', {\n                className: EditGlobals.classNames.dropdownButton\n            }, {}, customSelect);\n            const btnContent = createElement('div', {\n                className: EditGlobals.classNames.dropdownButtonContent\n            }, {}, btn);\n            const iconURL = (U.find(options.selectOptions, (item) => item.name === options.value) || {}).iconURL;\n            let headerIcon;\n            if (iconURL) {\n                headerIcon = createElement('img', {\n                    src: iconsURLPrefix + iconURL,\n                    className: EditGlobals.classNames.icon\n                }, {}, btnContent);\n            }\n            const placeholder = createElement('span', {\n                textContent: options.value,\n                id: options.id || ''\n            }, {}, btnContent);\n            const dropdownPointer = createElement('img', {\n                className: EditGlobals.classNames.dropdownIcon +\n                    ' ' +\n                    EditGlobals.classNames.collapsedElement,\n                src: iconsURLPrefix + 'dropdown-pointer.svg'\n            }, {}, btn);\n            const dropdown = createElement('ul', {\n                className: EditGlobals.classNames.dropdownContent +\n                    ' ' +\n                    EditGlobals.classNames.hiddenElement\n            }, {}, customSelect);\n            btn.addEventListener('click', function () {\n                dropdown.classList.toggle(EditGlobals.classNames.hiddenElement);\n                dropdownPointer.classList.toggle(EditGlobals.classNames.collapsedElement);\n            });\n            for (let i = 0, iEnd = options.selectOptions.length; i < iEnd; ++i) {\n                renderSelectElement(merge(options.selectOptions[i] || {}, { iconsURLPrefix }), dropdown, placeholder, options.id, dropdownPointer, headerIcon, options.onchange);\n            }\n            return customSelect;\n        }\n        /**\n         * @internal\n         */\n        function renderSelectElement(option, dropdown, placeholder, id, dropdownPointer, headerIcon, callback) {\n            const iconURL = option.iconsURLPrefix + option.iconURL;\n            const selectOption = createElement('li', {}, {}, dropdown);\n            const selectOptionBtn = createElement('button', { className: EditGlobals.classNames.customSelectButton }, {}, selectOption);\n            if (option.iconURL) {\n                createElement('img', {\n                    src: iconURL\n                }, {}, selectOptionBtn);\n            }\n            createElement('span', { textContent: option.name || '' }, {}, selectOptionBtn);\n            selectOptionBtn.addEventListener('click', function () {\n                dropdown.classList.add(EditGlobals.classNames.hiddenElement);\n                dropdownPointer.classList.toggle(EditGlobals.classNames.collapsedElement);\n                placeholder.textContent = option.name || '';\n                if (headerIcon && option.iconURL) {\n                    headerIcon.src = iconURL;\n                }\n                if (callback) {\n                    return callback(option.name);\n                }\n            });\n        }\n        /**\n         * Function to create toggle element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param options\n         * Form field options.\n         *\n         * @returns\n         * Toggle element.\n         */\n        function renderToggle(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            const lang = options.lang, value = options.value, title = options.title || options.name, langKey = options.langKey;\n            if (options.isNested) {\n                const labeledToggleWrapper = createElement('div', {\n                    className: EditGlobals.classNames.labeledToggleWrapper\n                }, {}, parentElement);\n                parentElement = labeledToggleWrapper;\n            }\n            const toggleContainer = createElement('button', {\n                className: EditGlobals.classNames.toggleContainer,\n                type: 'button',\n                role: 'switch',\n                ariaChecked: false,\n                ariaLabel: langKey ? lang.accessibility[langKey][options.name] : ''\n            }, {}, parentElement);\n            if (title) {\n                renderText(options.isNested ? parentElement : toggleContainer, { title });\n            }\n            if (options.enabledOnOffLabels) {\n                renderText(toggleContainer, {\n                    title: lang.off,\n                    className: EditGlobals.classNames.toggleLabels\n                });\n            }\n            const toggle = createElement('label', {\n                className: EditGlobals.classNames.toggleWrapper +\n                    ' ' + (options.className || '')\n            }, {}, toggleContainer);\n            const input = renderCheckbox(toggle, value), callbackFn = options.onchange;\n            callbackFn && toggleContainer.addEventListener('click', (e) => {\n                callbackFn(!input.checked);\n                input.checked = !input.checked;\n                toggleContainer.setAttribute('aria-checked', input.checked);\n                e.stopPropagation();\n            });\n            const slider = createElement('span', {\n                className: EditGlobals.classNames.toggleSlider\n            }, {}, toggle);\n            callbackFn && slider.addEventListener('click', (e) => {\n                e.preventDefault();\n            });\n            if (options.enabledOnOffLabels) {\n                renderText(toggleContainer, {\n                    title: lang.on,\n                    className: EditGlobals.classNames.toggleLabels\n                });\n            }\n            return toggleContainer;\n        }\n        /**\n         * Function to create text element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended\n         *\n         * @param text\n         * Text to be displayed\n         *\n         * @param callback\n         * Callback function to be fired on the click\n         *\n         * @returns text Element\n         */\n        function renderText(parentElement, options) {\n            let textElem;\n            const { title: text, className, isLabel } = options;\n            if (parentElement) {\n                const labelFor = isLabel ? { htmlFor: text } : {};\n                textElem = createElement(isLabel ? 'label' : 'div', {\n                    className: EditGlobals.classNames.labelText + ' ' + (className || ''),\n                    textContent: text,\n                    ...labelFor\n                }, {}, parentElement);\n            }\n            return textElem;\n        }\n        /**\n         * Function to create Icon element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended.\n         *\n         * @param icon\n         * Icon URL\n         *\n         * @param callback\n         * Callback function\n         *\n         * @returns\n         * Icon Element\n         */\n        function renderIcon(parentElement, options) {\n            const { icon, callback } = options;\n            if (!parentElement) {\n                return;\n            }\n            const iconElem = createElement('div', {\n                onclick: callback,\n                className: options.className || ''\n            }, {}, parentElement);\n            iconElem.style['background-image'] = 'url(' + icon + ')';\n            const mousedown = options.mousedown;\n            const click = options.click;\n            if (mousedown) {\n                iconElem.onmousedown = function () {\n                    mousedown.apply(this, arguments);\n                };\n            }\n            if (click) {\n                iconElem.addEventListener('click', function () {\n                    click.apply(this, arguments);\n                });\n            }\n            return iconElem;\n        }\n        /**\n         * Function to create input element.\n         *\n         * @param parentElement\n         * the element to which the new element should be appended\n         *\n         * @param options\n         * Form field options\n         *\n         * @returns\n         * Input Element\n         */\n        function renderInput(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const input = createElement('input', {\n                type: 'text',\n                onclick: options.callback,\n                id: options.id || '',\n                name: options.name || '',\n                value: ((defined(options.value) &&\n                    options.value.toString().replace(/\\\"/g, '')) || '')\n            }, {}, parentElement);\n            const onchange = options.onchange;\n            if (onchange) {\n                input.addEventListener('change', function (e) {\n                    onchange(e.target.value);\n                });\n            }\n            return input;\n        }\n        /**\n         * Function to create textarea element.\n         *\n         * @param parentElement\n         * The element to which the new element should be appended\n         *\n         * @param options\n         * Form field options\n         *\n         * @returns\n         * textarea Element\n         */\n        function renderTextarea(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            if (options.name) {\n                renderText(parentElement, { title: options.name, isLabel: true });\n            }\n            const textarea = createElement('textarea', {\n                id: options.id,\n                name: options.name,\n                value: options.value || ''\n            }, {}, parentElement);\n            const onchange = options.onchange;\n            if (onchange) {\n                textarea.addEventListener('change', function (e) {\n                    onchange(e.target.value);\n                });\n            }\n            return textarea;\n        }\n        /**\n         * Function to render the input of type checkbox.\n         *\n         * @param parentElement\n         * An element to which render the checkbox to\n         *\n         * @param checked\n         * Whether the checkbox should be checked or not.\n         *\n         * @returns\n         * The checkbox element\n         */\n        function renderCheckbox(parentElement, checked) {\n            let input;\n            if (parentElement) {\n                input = createElement('input', {\n                    type: 'checkbox',\n                    checked: !!checked\n                }, {}, parentElement);\n            }\n            return input;\n        }\n        /**\n         * Function to create button element.\n         *\n         * @param parentElement\n         * the element to which the new element should be appended\n         *\n         * @param options\n         * Button field options\n         *\n         * @returns\n         * Button Element\n         */\n        function renderButton(parentElement, options) {\n            if (!parentElement) {\n                return;\n            }\n            const button = createElement('button', {\n                className: (EditGlobals.classNames.button + ' ' +\n                    (options.className || '')),\n                onclick: options.callback,\n                textContent: options.text\n            }, options.style || {}, parentElement);\n            if (options.icon) {\n                button.style['background-image'] =\n                    'url(' + options.icon + ')';\n            }\n            return button;\n        }\n        /**\n         * Get the renderer function based on the type of the element to render.\n         *\n         * @param type\n         * Type of the element to render\n         *\n         * @returns\n         * function to render a specific element\n         */\n        function getRendererFunction(type) {\n            return {\n                select: renderSelect,\n                toggle: renderToggle,\n                text: renderText,\n                collapse: renderCollapseHeader,\n                icon: renderIcon,\n                contextButton: renderContextButton,\n                input: renderInput,\n                textarea: renderTextarea,\n                checkbox: renderCheckbox,\n                button: renderButton\n            }[type];\n        }\n        const EditRenderer = {\n            renderSelect,\n            renderToggle,\n            renderText,\n            renderCollapseHeader,\n            renderIcon,\n            renderContextButton,\n            renderInput,\n            renderTextarea,\n            renderCheckbox,\n            renderButton,\n            getRendererFunction\n        };\n\n        return EditRenderer;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/MenuItem.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditRenderer.js']], function (EditGlobals, U, EditRenderer) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, merge } = U;\n        class MenuItem {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(menu, options) {\n                this.menu = menu;\n                this.isActive = false;\n                this.options = merge(MenuItem.defaultOptions, options);\n                this.container = this.setContainer();\n                this.innerElement = this.setInnerElement();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            setContainer() {\n                const item = this, options = item.options;\n                let className = EditGlobals.classNames.menuItem;\n                if (item.menu.options.itemsClassName) {\n                    className += ' ' + item.menu.options.itemsClassName;\n                }\n                if (options.className) {\n                    className += ' ' + options.className;\n                }\n                return createElement('div', { className: className || '' }, merge(this.options.style || {}, \n                // To remove\n                this.isActive ? { display: 'block' } : {}), this.menu.container);\n            }\n            setInnerElement() {\n                const item = this, options = item.options, container = item.container, langKey = options.langKey;\n                if (options.type === 'toggle') {\n                    return EditRenderer.renderToggle(container, {\n                        id: options.id,\n                        name: options.id,\n                        title: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            options.text,\n                        value: !!(options.getValue && options.getValue(item)),\n                        lang: this.menu.editMode.lang,\n                        langKey: langKey,\n                        onchange: options.events?.click?.bind(item)\n                    });\n                }\n                if (options.type === 'text') {\n                    return EditRenderer.renderText(container, {\n                        title: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            options.text || '',\n                        className: options.className || ''\n                    });\n                }\n                if (options.type === 'icon') {\n                    return EditRenderer.renderIcon(container, {\n                        icon: options.icon || '',\n                        mousedown: options.events?.onmousedown?.bind(item),\n                        click: options.events?.click?.bind(item)\n                    });\n                }\n                if (options.type === 'button') {\n                    return EditRenderer.renderButton(container, {\n                        callback: options.events?.click?.bind(item),\n                        className: options.className || '',\n                        style: options.style || {},\n                        text: langKey ?\n                            this.menu.editMode.lang[langKey] :\n                            (options.text || '')\n                    });\n                }\n            }\n            update() {\n                const item = this, options = item.options;\n                if (options.events && options.events.update) {\n                    options.events.update.apply(item, arguments);\n                }\n            }\n            activate() {\n                const item = this;\n                item.update();\n                // Temp.\n                if (item.container) {\n                    item.isActive = true;\n                    item.container.style.display = 'block';\n                }\n            }\n            deactivate() {\n                const item = this;\n                // Temp.\n                if (item.container) {\n                    item.isActive = false;\n                    item.container.style.display = 'none';\n                }\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        MenuItem.defaultOptions = {\n            type: 'text'\n        };\n\n        return MenuItem;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/MenuItemBindings.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const MenuItemBindings = {\n            /* *\n            *\n            *  Context menu\n            *\n            * */\n            viewFullscreen: {\n                id: 'viewFullscreen',\n                type: 'button',\n                langKey: 'viewFullscreen',\n                events: {\n                    click: function () {\n                        const fullScreen = this.menu.editMode.board.fullscreen;\n                        if (fullScreen) {\n                            fullScreen.toggle();\n                        }\n                    }\n                }\n            }\n        };\n\n        return MenuItemBindings;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Menu/Menu.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/MenuItem.js'], _modules['Dashboards/EditMode/Menu/MenuItemBindings.js']], function (EditGlobals, U, MenuItem, MenuItemBindings) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement, merge } = U;\n        class Menu {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(parentElement, options, editMode, parent) {\n                this.parentElement = parentElement;\n                this.isVisible = false;\n                this.activeItems = [];\n                this.options = options;\n                this.items = {};\n                this.editMode = editMode;\n                if (parent) {\n                    this.parent = parent;\n                }\n                this.container = this.setContainer();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            setContainer() {\n                return createElement('div', {\n                    className: EditGlobals.classNames.menu +\n                        ' ' + (this.options.className || '')\n                }, {}, this.parentElement);\n            }\n            // ItemsSchemas - default items definitions.\n            initItems(itemsSchemas, activeItems) {\n                const menu = this, optionsItems = menu.options.items || [];\n                let itemSchema, itemConfig, item, options;\n                for (let i = 0, iEnd = optionsItems.length; i < iEnd; ++i) {\n                    itemConfig = optionsItems[i];\n                    itemSchema =\n                        typeof itemConfig === 'string' ? itemsSchemas[itemConfig] :\n                            itemConfig.id ? itemsSchemas[itemConfig.id] :\n                                {};\n                    options = typeof itemConfig === 'string' ?\n                        merge(itemSchema, { id: itemConfig }) :\n                        merge(itemSchema, itemConfig);\n                    if (options.id) {\n                        item = new MenuItem(menu, options);\n                        // Save initialized item.\n                        menu.items[item.options.id] = item;\n                        if (activeItems) {\n                            item.activate();\n                            menu.activeItems.push(item);\n                        }\n                    }\n                    else {\n                        // Error - defined item needs an id.\n                    }\n                }\n            }\n            setActiveItems(items) {\n                const menu = this;\n                let item;\n                // Deactivate items.\n                for (let i = 0, iEnd = menu.activeItems.length; i < iEnd; ++i) {\n                    if (items.indexOf(menu.activeItems[i].options.id) === -1) {\n                        menu.activeItems[i].deactivate();\n                    }\n                }\n                menu.activeItems.length = 0;\n                for (let j = 0, jEnd = items.length; j < jEnd; ++j) {\n                    item = menu.items[items[j]];\n                    if (item) {\n                        // Activate item.\n                        if (!item.isActive) {\n                            item.activate();\n                        }\n                        else {\n                            item.update();\n                        }\n                        menu.activeItems.push(item);\n                    }\n                }\n            }\n            deactivateActiveItems() {\n                const menu = this;\n                for (let i = 0, iEnd = menu.activeItems.length; i < iEnd; ++i) {\n                    menu.activeItems[i].deactivate();\n                }\n            }\n            updateActiveItems() {\n                const activeItems = this.activeItems;\n                for (let i = 0, iEnd = activeItems.length; i < iEnd; ++i) {\n                    activeItems[i].update();\n                }\n            }\n            destroy() {\n                this.activeItems.length = 0;\n                this.container.remove();\n                this.items = {};\n                this.options = {};\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        Menu.items = MenuItemBindings;\n\n        return Menu;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/EditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/Menu.js']], function (U, Menu) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { defined, createElement, css } = U;\n        /**\n         * Abstract Class of Edit Toolbar.\n         * @internal\n         */\n        class EditToolbar {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode, options) {\n                this.container = createElement('div', {\n                    className: options.className\n                }, void 0, editMode.board.container);\n                this.editMode = editMode;\n                this.iconURLPrefix = editMode.iconsURLPrefix;\n                this.menu = new Menu(this.container, options.menu, editMode, this);\n                this.options = options;\n                this.isVisible = false;\n                if (this.options.outline) {\n                    this.outline = createElement('div', {\n                        className: options.outlineClassName\n                    }, void 0, this.container);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            hide() {\n                this.setPosition(void 0, void 0);\n            }\n            refreshOutline(x, y, guiElement, offset = 0) {\n                const toolbar = this, guiElemCnt = (guiElement || {}).container;\n                if (toolbar.outline && guiElemCnt) {\n                    css(toolbar.outline, {\n                        display: 'block',\n                        left: x - offset + 'px',\n                        top: y - offset + 'px',\n                        width: guiElemCnt.offsetWidth + offset * 2 + 'px',\n                        height: guiElemCnt.offsetHeight + offset * 2 + 'px'\n                    });\n                }\n            }\n            hideOutline() {\n                if (this.outline) {\n                    this.outline.style.display = 'none';\n                }\n            }\n            setPosition(x, y) {\n                const toolbar = this;\n                if (toolbar.container) {\n                    css(toolbar.container, {\n                        left: (x || '-9999') + 'px',\n                        top: (y || '-9999') + 'px'\n                    });\n                }\n                toolbar.isVisible = defined(x) && defined(y);\n            }\n        }\n\n        return EditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/CellEditToolbar.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/Toolbar/EditToolbar.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Cell, EditGlobals, EditToolbar, GUIElement, H, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { isFirefox } = H;\n        const { merge, fireEvent, objectEach } = U;\n        /**\n         * @internal\n         */\n        class CellEditToolbar extends EditToolbar {\n            static getItemsConfig(options, iconURLPrefix) {\n                const items = [];\n                if (options.dragDrop?.enabled) {\n                    items.push({\n                        id: 'drag',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'drag.svg',\n                        events: {\n                            onmousedown: function (e) {\n                                // #22546, workaround for Firefox, where mouseenter\n                                // event is not fired when triggering it while dragging\n                                // another element.\n                                if (isFirefox) {\n                                    e.preventDefault();\n                                }\n                                const cellEditToolbar = this.menu\n                                    .parent;\n                                const dragDrop = cellEditToolbar.editMode.dragDrop;\n                                if (dragDrop &&\n                                    cellEditToolbar.cell &&\n                                    Cell.isCell(cellEditToolbar.cell)) {\n                                    dragDrop.onDragStart(e, cellEditToolbar.cell);\n                                }\n                            }\n                        }\n                    });\n                }\n                if (options.settings?.enabled) {\n                    items.push({\n                        id: 'settings',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'settings.svg',\n                        events: {\n                            click: function () {\n                                this.menu.parent.editMode.setEditOverlay();\n                                this.menu.parent.onCellOptions();\n                            }\n                        }\n                    });\n                }\n                items.push({\n                    id: 'destroy',\n                    type: 'icon',\n                    className: EditGlobals.classNames.menuDestroy,\n                    icon: iconURLPrefix + 'destroy.svg',\n                    events: {\n                        click: function () {\n                            const parentNode = this.menu.parent, editMode = this.menu.parent.editMode, popup = editMode.confirmationPopup;\n                            popup.show({\n                                confirmButton: {\n                                    value: editMode.lang.confirmButton,\n                                    callback: parentNode.onCellDestroy,\n                                    context: parentNode\n                                },\n                                cancelButton: {\n                                    value: editMode.lang.cancelButton,\n                                    callback: () => {\n                                        popup.closePopup();\n                                    }\n                                },\n                                text: editMode.lang.confirmDestroyCell\n                            });\n                        }\n                    }\n                });\n                return items;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode) {\n                super(editMode, merge(CellEditToolbar.defaultOptions, (editMode.options.toolbars || {}).cell, {\n                    menu: {\n                        items: CellEditToolbar.getItemsConfig(editMode.options, editMode.iconsURLPrefix)\n                    }\n                }));\n                if (editMode.customHTMLMode) {\n                    this.filterOptionsAvailableInCustomHTMLMode();\n                }\n                this.menu.initItems({});\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Show toolbar for given cell.\n             *\n             * @param cell\n             * Cell to show toolbar for.\n             */\n            showToolbar(cell) {\n                const toolbar = this;\n                const cellCnt = cell.container;\n                const toolbarWidth = 30;\n                const toolbarMargin = 10;\n                const cellToolbar = toolbar.editMode.cellToolbar;\n                if (!cellToolbar) {\n                    return;\n                }\n                if (cellCnt && toolbar.editMode.isActive() &&\n                    !(toolbar.editMode.dragDrop || {}).isActive) {\n                    const cellOffsets = GUIElement.getOffsets(cell, toolbar.editMode.board.container);\n                    const x = cellOffsets.right - toolbarWidth - toolbarMargin;\n                    const y = cellOffsets.top + toolbarMargin;\n                    objectEach(toolbar.menu.items, (item) => {\n                        if (!cell.options?.editMode?.toolbarItems) {\n                            item.activate();\n                            return;\n                        }\n                        const toolbarItems = cell.options.editMode.toolbarItems;\n                        if (toolbarItems[item.options.id]\n                            ?.enabled === false) {\n                            item.deactivate();\n                            return;\n                        }\n                        item.activate();\n                    });\n                    toolbar.setPosition(x, y);\n                    toolbar.cell = cell;\n                    toolbar.refreshOutline();\n                    cellToolbar.isVisible = true;\n                }\n                else if (toolbar.isVisible) {\n                    toolbar.hide();\n                    cellToolbar.isVisible = false;\n                }\n            }\n            refreshOutline() {\n                const toolbar = this, offsetWidth = -1;\n                if (toolbar.cell && toolbar.cell.container && toolbar.outline) {\n                    super.refreshOutline(-toolbar.cell.container.offsetWidth, 0, this.cell, offsetWidth);\n                }\n            }\n            /**\n             * When options icon is clicked, show sidebar with options.\n             */\n            onCellOptions() {\n                const toolbar = this;\n                const editMode = toolbar.editMode;\n                if (!editMode.sidebar) {\n                    return;\n                }\n                editMode.sidebar.show(toolbar.cell);\n                toolbar.highlightCell();\n            }\n            onCellDestroy() {\n                const toolbar = this;\n                if (toolbar.cell && Cell.isCell(toolbar.cell)) {\n                    const row = toolbar.cell.row;\n                    const cellId = toolbar.cell.id;\n                    // Disable row highlight.\n                    toolbar.cell.row.setHighlight();\n                    toolbar.resetEditedCell();\n                    toolbar.cell.destroy();\n                    toolbar.cell = void 0;\n                    // Hide row and cell toolbars.\n                    toolbar.editMode.hideToolbars(['cell', 'row']);\n                    // Disable resizer.\n                    toolbar.editMode.resizer?.disableResizer();\n                    // Call cellResize dashboard event.\n                    if (row && row.cells && row.cells.length) {\n                        fireEvent(toolbar.editMode.board, 'cellResize', {\n                            cell: row.cells[0]\n                        });\n                        fireEvent(row, 'cellChange', { cell: row.cells[0], row });\n                        fireEvent(toolbar.editMode, 'layoutChanged', {\n                            type: 'cellDestroyed',\n                            target: cellId,\n                            board: toolbar.editMode.board\n                        });\n                    }\n                }\n            }\n            resetEditedCell() {\n                this.editedCell = void 0;\n            }\n            /**\n             * Filter options available in custom HTML mode, only settings available.\n             */\n            filterOptionsAvailableInCustomHTMLMode() {\n                this.options.menu.items = this.options.menu.items?.filter((item) => {\n                    if (typeof item === 'string') {\n                        return false;\n                    }\n                    return item.id === 'settings';\n                });\n            }\n            /**\n             * Highlight cell and gray out the rest of the dashboard.\n             */\n            highlightCell() {\n                const toolbar = this;\n                if (!toolbar.cell) {\n                    return;\n                }\n                if (toolbar.cell.setHighlight) {\n                    toolbar.cell.setHighlight();\n                }\n                else {\n                    toolbar.cell.container.classList.add(EditGlobals.classNames.cellEditHighlight);\n                    toolbar.editMode.board.container.classList.add(EditGlobals.classNames.dashboardCellEditHighlightActive);\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CellEditToolbar.defaultOptions = {\n            enabled: true,\n            className: EditGlobals.classNames.editToolbar,\n            outline: false,\n            outlineClassName: EditGlobals.classNames.editToolbarCellOutline,\n            menu: {\n                className: EditGlobals.classNames.editToolbarCell,\n                itemsClassName: EditGlobals.classNames.editToolbarItem,\n                items: []\n            }\n        };\n\n        return CellEditToolbar;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Toolbar/RowEditToolbar.js', [_modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/Toolbar/EditToolbar.js'], _modules['Dashboards/Layout/GUIElement.js']], function (U, EditGlobals, EditToolbar, GUIElement) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { fireEvent, merge, objectEach } = U;\n        /**\n         * @internal\n         */\n        class RowEditToolbar extends EditToolbar {\n            static getMenuItemsConfig(options, iconURLPrefix) {\n                const items = [];\n                if (options.dragDrop?.enabled) {\n                    items.push({\n                        id: 'drag',\n                        type: 'icon',\n                        icon: iconURLPrefix + 'drag.svg',\n                        events: {\n                            onmousedown: function (e) {\n                                const rowEditToolbar = this.menu\n                                    .parent, dragDrop = rowEditToolbar.editMode.dragDrop;\n                                e.preventDefault();\n                                if (dragDrop && rowEditToolbar.row) {\n                                    dragDrop.onDragStart(e, rowEditToolbar.row);\n                                }\n                            }\n                        }\n                    });\n                }\n                items.push({\n                    id: 'destroy',\n                    type: 'icon',\n                    className: EditGlobals.classNames.menuDestroy,\n                    icon: iconURLPrefix + 'destroy.svg',\n                    events: {\n                        click: function () {\n                            const parentNode = this.menu.parent, editMode = this.menu.parent.editMode, popup = editMode.confirmationPopup;\n                            popup.show({\n                                confirmButton: {\n                                    value: editMode.lang.confirmButton,\n                                    callback: parentNode.onRowDestroy,\n                                    context: parentNode\n                                },\n                                cancelButton: {\n                                    value: editMode.lang.cancelButton,\n                                    callback: () => {\n                                        popup.closePopup();\n                                    }\n                                },\n                                text: editMode.lang.confirmDestroyRow\n                            });\n                        }\n                    }\n                });\n                return items;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(editMode) {\n                super(editMode, merge(RowEditToolbar.defaultOptions, (editMode.options.toolbars || {}).row, {\n                    menu: {\n                        items: RowEditToolbar.getMenuItemsConfig(editMode.options, editMode.iconsURLPrefix)\n                    }\n                }));\n                this.menu.initItems({});\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            refreshOutline(x, y) {\n                const toolbar = this, offsetWidth = 2;\n                if (toolbar.row && toolbar.row.container) {\n                    super.refreshOutline(x, y, this.row, offsetWidth);\n                }\n            }\n            showToolbar(row) {\n                const toolbar = this;\n                const rowCnt = row.container;\n                const rowToolbar = toolbar.editMode.rowToolbar;\n                let x;\n                let y;\n                let offsetX;\n                if (!rowToolbar) {\n                    return;\n                }\n                if (rowCnt &&\n                    toolbar.editMode.isActive() &&\n                    !(toolbar.editMode.dragDrop || {}).isActive) {\n                    const rowOffsets = GUIElement.getOffsets(row, toolbar.editMode.board.container);\n                    const rowWidth = rowOffsets.right - rowOffsets.left;\n                    objectEach(toolbar.menu.items, (item) => {\n                        if (!row.options?.editMode?.toolbarItems) {\n                            item.activate();\n                            return;\n                        }\n                        const toolbarItems = row.options.editMode.toolbarItems;\n                        if (toolbarItems[item.options.id]\n                            ?.enabled === false) {\n                            item.deactivate();\n                            return;\n                        }\n                        item.activate();\n                    });\n                    offsetX = rowWidth / 2 - toolbar.container.clientWidth / 2;\n                    x = rowOffsets.left + offsetX;\n                    y = rowOffsets.top - toolbar.container.clientHeight;\n                    toolbar.setPosition(x, y);\n                    toolbar.row = row;\n                    toolbar.refreshOutline(-offsetX, toolbar.container.clientHeight);\n                    rowToolbar.isVisible = true;\n                }\n                else if (toolbar.isVisible) {\n                    toolbar.hide();\n                    rowToolbar.isVisible = false;\n                }\n            }\n            onRowOptions() {\n                const toolbar = this;\n                if (toolbar.editMode.sidebar) {\n                    toolbar.editMode.sidebar.show(toolbar.row);\n                }\n            }\n            onRowDestroy() {\n                const toolbar = this;\n                if (toolbar.row) {\n                    const rowId = toolbar.row.options.id || -1;\n                    this.resetEditedRow();\n                    toolbar.row.destroy();\n                    toolbar.row = void 0;\n                    // Hide row and cell toolbars.\n                    toolbar.editMode.hideToolbars(['cell', 'row']);\n                    toolbar.editMode.resizer?.disableResizer();\n                    fireEvent(toolbar.editMode, 'layoutChanged', {\n                        type: 'rowDestroyed',\n                        target: rowId,\n                        board: toolbar.editMode.board\n                    });\n                }\n            }\n            resetEditedRow() {\n                /// super.resetCurrentElements(this.row as Row, true);\n                this.editedRow = void 0;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        RowEditToolbar.defaultOptions = {\n            enabled: true,\n            className: EditGlobals.classNames.editToolbar,\n            outline: true,\n            outlineClassName: EditGlobals.classNames.editToolbarRowOutline,\n            menu: {\n                className: EditGlobals.classNames.editToolbarRow,\n                itemsClassName: EditGlobals.classNames.editToolbarItem,\n                items: []\n            }\n        };\n\n        return RowEditToolbar;\n    });\n    _registerModule(_modules, 'Shared/BaseForm.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (AST, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { addEvent, createElement } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentDiv, iconsURL) {\n                this.iconsURL = iconsURL;\n                this.container = this.createPopupContainer(parentDiv);\n                this.closeButton = this.addCloseButton();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create popup div container.\n             *\n             * @param {HTMLElement} parentDiv\n             * Parent div to attach popup.\n             *\n             * @param  {string} className\n             * Class name of the popup.\n             *\n             * @return {HTMLElement}\n             * Popup div.\n             */\n            createPopupContainer(parentDiv, className = 'highcharts-popup highcharts-no-tooltip') {\n                return createElement('div', { className }, void 0, parentDiv);\n            }\n            /**\n             * Create HTML element and attach click event to close popup.\n             *\n             * @param {string} className\n             * Class name of the close button.\n             *\n             * @return {HTMLElement}\n             * Close button.\n             */\n            addCloseButton(className = 'highcharts-popup-close') {\n                const popup = this, iconsURL = this.iconsURL;\n                // Create close popup button.\n                const closeButton = createElement('button', { className }, void 0, this.container);\n                createElement('span', {\n                    className: 'highcharts-icon'\n                }, {\n                    backgroundImage: 'url(' + (iconsURL.match(/png|svg|jpeg|jpg|gif/ig) ?\n                        iconsURL : iconsURL + 'close.svg') + ')'\n                }, closeButton);\n                ['click', 'touchstart'].forEach((eventName) => {\n                    addEvent(closeButton, eventName, popup.closeButtonEvents.bind(popup));\n                });\n                // Close popup when press ESC\n                addEvent(document, 'keydown', function (event) {\n                    if (event.code === 'Escape') {\n                        popup.closeButtonEvents();\n                    }\n                });\n                return closeButton;\n            }\n            /**\n             * Close button events.\n             * @return {void}\n             */\n            closeButtonEvents() {\n                this.closePopup();\n            }\n            /**\n             * Reset content of the current popup and show.\n             *\n             * @param {string} toolbarClass\n             * Class name of the toolbar which styles should be reset.\n             */\n            showPopup(toolbarClass = 'highcharts-annotation-toolbar') {\n                const popupDiv = this.container, popupCloseButton = this.closeButton;\n                this.type = void 0;\n                // Reset content.\n                popupDiv.innerHTML = AST.emptyHTML;\n                // Reset toolbar styles if exists.\n                if (popupDiv.className.indexOf(toolbarClass) >= 0) {\n                    popupDiv.classList.remove(toolbarClass);\n                    // Reset toolbar inline styles\n                    popupDiv.removeAttribute('style');\n                }\n                // Add close button.\n                popupDiv.appendChild(popupCloseButton);\n                popupDiv.style.display = 'block';\n                popupDiv.style.height = '';\n            }\n            /**\n             * Hide popup.\n             */\n            closePopup() {\n                this.container.style.display = 'none';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BaseForm;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/ConfirmationPopup.js', [_modules['Core/Utilities.js'], _modules['Shared/BaseForm.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js']], function (U, BaseForm, EditGlobals, EditRenderer) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { createElement } = U;\n        /**\n         * Class to create confirmation popup.\n         */\n        class ConfirmationPopup extends BaseForm {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the ConfirmationPopup.\n             *\n             * @param parentDiv\n             * Parent div where the popup will be added.\n             *\n             * @param iconsURL\n             * URL to the icons.\n             *\n             * @param editMode\n             * The EditMode instance.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            constructor(parentDiv, iconsURL, editMode, options) {\n                iconsURL =\n                    options && options.close && options.close.icon ?\n                        options.close.icon :\n                        iconsURL;\n                super(parentDiv, iconsURL);\n                this.editMode = editMode;\n                this.options = options;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Returns popup container.\n             *\n             * @param parentDiv\n             * Parent div where the popup will be added.\n             *\n             * @param className\n             * Class name added to the popup container.\n             */\n            createPopupContainer(parentDiv, className = EditGlobals.classNames.confirmationPopup) {\n                return super.createPopupContainer(parentDiv, className);\n            }\n            /**\n             * Adds close button to the popup.\n             *\n             * @param className\n             * Class name added to the close button.\n             */\n            addCloseButton(className = EditGlobals.classNames.popupCloseButton) {\n                return super.addCloseButton(className);\n            }\n            /**\n             * Adds events to the close button.\n             *\n             * @override BaseForm.closeButtonEvents\n             */\n            closeButtonEvents() {\n                const cancelCallback = this.contentOptions?.cancelButton.callback;\n                if (!cancelCallback) {\n                    return;\n                }\n                cancelCallback();\n            }\n            /**\n             * Adds content inside the popup.\n             */\n            renderContent() {\n                const options = this.contentOptions;\n                if (!options) {\n                    return;\n                }\n                // Render content wrapper\n                this.contentContainer = createElement('div', {\n                    className: EditGlobals.classNames.popupContentContainer\n                }, {}, this.container);\n                const popupContainer = this.contentContainer.parentNode;\n                popupContainer.style.marginTop = '0px';\n                const offsetTop = popupContainer.getBoundingClientRect().top;\n                popupContainer.style.marginTop = (offsetTop < 0 ? Math.abs(offsetTop - 200) : 200) + 'px';\n                // Render text\n                EditRenderer.renderText(this.contentContainer, {\n                    title: options.text || ''\n                });\n                // Render button wrapper\n                this.buttonContainer = createElement('div', {\n                    className: EditGlobals.classNames.popupButtonContainer\n                }, {}, this.container);\n                // Render cancel buttons\n                EditRenderer.renderButton(this.buttonContainer, {\n                    text: options.cancelButton.value,\n                    className: EditGlobals.classNames.popupCancelBtn,\n                    callback: options.cancelButton.callback\n                });\n                // Confirm\n                EditRenderer.renderButton(this.buttonContainer, {\n                    text: options.confirmButton.value,\n                    className: EditGlobals.classNames.popupConfirmBtn,\n                    callback: () => {\n                        options.confirmButton.callback.call(options.confirmButton.context);\n                        this.closePopup();\n                    }\n                });\n            }\n            /**\n             * Shows confirmation popup.\n             *\n             * @param options\n             * Options for confirmation popup.\n             */\n            show(options) {\n                this.contentOptions = options;\n                this.showPopup();\n                this.renderContent();\n                this.editMode.setEditOverlay();\n            }\n            /**\n             * Hides confirmation popup.\n             */\n            closePopup() {\n                super.closePopup();\n                this.editMode.setEditOverlay(true);\n            }\n        }\n\n        return ConfirmationPopup;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/AccordionMenu.js', [_modules['Dashboards/EditMode/EditRenderer.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/ConfirmationPopup.js']], function (EditRenderer, U, EditGlobals, ConfirmationPopup) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *  - Sebastian Bochan\n         *\n         * */\n        const { createElement, merge, error, fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Accordion menu class.\n         */\n        class AccordionMenu {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(iconsURLPrefix, closeSidebar) {\n                this.changedOptions = {};\n                this.chartOptionsJSON = {};\n                this.oldOptionsBuffer = {};\n                this.waitingForConfirmation = false;\n                this.iconsURLPrefix = iconsURLPrefix;\n                this.closeSidebar = closeSidebar;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Renders the menu for given component.\n             *\n             * @param container\n             * The HTML Element to render the menu in.\n             *\n             * @param component\n             * The component to render the menu for.\n\n             * @param sidebarMainContainer\n             * The main container of the sidebar.\n             */\n            renderContent(container, component, sidebarMainContainer) {\n                const { editMode } = component.board;\n                const menu = this;\n                const editableOptions = component.editableOptions.getOptions();\n                let options;\n                let content;\n                this.component = component;\n                this.oldOptionsBuffer = component.getEditableOptions();\n                if (editMode) {\n                    this.confirmationPopup = new ConfirmationPopup(component.board.container, editMode.iconsURLPrefix, editMode, { close: { icon: '' } });\n                }\n                const accordionContainer = createElement('div', {\n                    className: EditGlobals.classNames.accordionMenu\n                }, {}, container);\n                for (let i = 0, end = editableOptions.length; i < end; i++) {\n                    options = editableOptions[i];\n                    content = EditRenderer.renderCollapseHeader(accordionContainer, merge({\n                        iconsURLPrefix: menu.iconsURLPrefix,\n                        lang: (component.board?.editMode || EditGlobals).lang\n                    }, options)).content;\n                    this.renderAccordion(options, content, component);\n                }\n                const buttonContainer = createElement('div', {\n                    className: EditGlobals.classNames.accordionMenuButtonsContainer\n                }, {}, sidebarMainContainer);\n                EditRenderer.renderButton(buttonContainer, {\n                    text: (component.board?.editMode || EditGlobals)\n                        .lang.confirmButton,\n                    className: EditGlobals.classNames.popupConfirmBtn,\n                    callback: async () => {\n                        await this.confirmChanges();\n                        fireEvent(editMode, 'confirmEditing');\n                    }\n                });\n                EditRenderer.renderButton(buttonContainer, {\n                    text: (component.board?.editMode || EditGlobals)\n                        .lang.cancelButton,\n                    className: EditGlobals.classNames.popupCancelBtn,\n                    callback: () => {\n                        this.cancelChanges();\n                        fireEvent(editMode, 'cancelEditing');\n                    }\n                });\n                sidebarMainContainer.appendChild(buttonContainer);\n            }\n            /**\n             * Update the options object with new nested value, based on the property\n             * path. If the objects in the path are not defined, the function will\n             * create them.\n             *\n             * @param propertyPath\n             * Path of the property for which the value should be updated.\n             * Example: ```['chartOptions', 'chart', 'type']```\n             *\n             * @param value\n             * New value of the property.\n             */\n            updateOptions(propertyPath, value) {\n                const pathLength = propertyPath.length - 1;\n                let currentLevel = this.changedOptions;\n                let currentChartOptionsLevel;\n                let currentOldChartOptionsBufferLevel;\n                let currentDataGridOptionsLevel;\n                let currentOldDataGridOptionsBufferLevel;\n                if (pathLength === 0 && propertyPath[0] === 'chartOptions') {\n                    try {\n                        const parsedValue = JSON.parse(value);\n                        this.chartOptionsJSON = parsedValue;\n                    }\n                    catch (e) {\n                        // TODO: Handle the wrong config passed from the user.\n                        error(`Dashboards Error: Wrong JSON config structure passed as a chart options. \\n____________\\n${e}`);\n                    }\n                }\n                for (let i = 0; i < pathLength; i++) {\n                    const key = propertyPath[i];\n                    if (!currentLevel[key]) {\n                        currentLevel[key] = {};\n                    }\n                    currentLevel = currentLevel[key];\n                    if (key === 'gridOptions') {\n                        const realGridOptions = this.component.dataGrid?.options;\n                        if (realGridOptions) {\n                            const oldOptionsBuffer = this.oldOptionsBuffer;\n                            if (!oldOptionsBuffer.gridOptions) {\n                                oldOptionsBuffer.gridOptions = {};\n                            }\n                            currentOldDataGridOptionsBufferLevel =\n                                oldOptionsBuffer.gridOptions;\n                            currentDataGridOptionsLevel = realGridOptions;\n                        }\n                    }\n                    else if (currentDataGridOptionsLevel &&\n                        currentOldDataGridOptionsBufferLevel) {\n                        currentDataGridOptionsLevel = currentDataGridOptionsLevel[key];\n                        if (currentOldDataGridOptionsBufferLevel[key] === void 0) {\n                            currentOldDataGridOptionsBufferLevel[key] = {};\n                        }\n                        currentOldDataGridOptionsBufferLevel =\n                            currentOldDataGridOptionsBufferLevel[key];\n                    }\n                    if (key === 'chartOptions') {\n                        const realChartOptions = this.component.chart?.options;\n                        if (realChartOptions) {\n                            const oldOptionsBuffer = this.oldOptionsBuffer;\n                            if (!oldOptionsBuffer.chartOptions) {\n                                oldOptionsBuffer.chartOptions = {};\n                            }\n                            currentOldChartOptionsBufferLevel =\n                                oldOptionsBuffer.chartOptions;\n                            currentChartOptionsLevel = realChartOptions;\n                        }\n                    }\n                    else if (currentChartOptionsLevel &&\n                        currentOldChartOptionsBufferLevel) {\n                        currentChartOptionsLevel = currentChartOptionsLevel[key];\n                        if (currentOldChartOptionsBufferLevel[key] === void 0) {\n                            currentOldChartOptionsBufferLevel[key] = {};\n                        }\n                        currentOldChartOptionsBufferLevel =\n                            currentOldChartOptionsBufferLevel[key];\n                    }\n                }\n                const lastKey = propertyPath[pathLength];\n                currentLevel[lastKey] = value;\n                if (currentOldChartOptionsBufferLevel && currentChartOptionsLevel) {\n                    currentOldChartOptionsBufferLevel[lastKey] = (currentOldChartOptionsBufferLevel[lastKey] ??\n                        currentChartOptionsLevel[lastKey]);\n                }\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                this.component?.update(this.changedOptions);\n            }\n            /**\n             * Renders either a basic or nested element. This function can be\n             * recursively called, if there are multiple nested options.\n             *\n             * @param options\n             * Configuration object of the Component options.\n             *\n             * @param parentNode\n             * A container where the accordion is rendered.\n             *\n             * @param component\n             * the component for which the menu should be rendered.\n             */\n            renderAccordion(options, parentNode, component) {\n                if (options.type === 'nested') {\n                    return this.renderNested(parentNode, options, component);\n                }\n                const renderFunction = EditRenderer.getRendererFunction(options.type);\n                if (!renderFunction) {\n                    return;\n                }\n                renderFunction(parentNode, {\n                    ...options,\n                    iconsURLPrefix: this.iconsURLPrefix,\n                    value: component.getEditableOptionValue(options.propertyPath),\n                    enabledOnOffLabels: options.type === 'toggle',\n                    onchange: (value) => this.updateOptions(options.propertyPath || [], value)\n                });\n            }\n            /**\n             * Render nested menu for the component.\n             *\n             * @param parentElement\n             * HTML element to which the nested structure should be rendered to\n             *\n             * @param options\n             * configuration object for the options\n             *\n             * @param component\n             * The component instance for the options should be rendered\n             */\n            renderNested(parentElement, options, component) {\n                if (!parentElement || !options.nestedOptions) {\n                    return;\n                }\n                const nestedOptions = options.nestedOptions;\n                for (let i = 0, iEnd = nestedOptions.length; i < iEnd; ++i) {\n                    const name = nestedOptions[i].name;\n                    const accordionOptions = nestedOptions[i].options;\n                    const showToggle = !!nestedOptions[i].showToggle;\n                    const propertyPath = nestedOptions[i].propertyPath || [];\n                    const lang = (component.board?.editMode || EditGlobals).lang;\n                    const collapsedHeader = EditRenderer.renderCollapseHeader(parentElement, {\n                        name,\n                        isEnabled: !!component.getEditableOptionValue(propertyPath),\n                        iconsURLPrefix: this.iconsURLPrefix,\n                        showToggle: showToggle,\n                        onchange: (value) => this.updateOptions(propertyPath, value),\n                        isNested: !!accordionOptions,\n                        isStandalone: !accordionOptions,\n                        lang\n                    });\n                    for (let j = 0, jEnd = accordionOptions?.length; j < jEnd; ++j) {\n                        this.renderAccordion(merge(accordionOptions[j], { lang, isNested: true }), collapsedHeader.content, component);\n                    }\n                }\n                return;\n            }\n            /**\n             * Closes the sidebar discarding changes. If there are any changes, it will\n             * show a confirmation popup. If no changes, it will close the sidebar.\n             */\n            cancelChanges() {\n                if (Object.keys(this.changedOptions).length < 1) {\n                    this.closeSidebar();\n                }\n                else {\n                    this.showCancelConfirmationPopup();\n                }\n            }\n            /**\n             * Confirms changes made in the component.\n             *\n             * @fires EditMode#componentChanged\n             */\n            async confirmChanges() {\n                const component = this.component;\n                if (!component) {\n                    return;\n                }\n                if (component.type === 'Highcharts' &&\n                    Object.keys(this.chartOptionsJSON).length) {\n                    await component.update({\n                        chartOptions: this.chartOptionsJSON\n                    });\n                }\n                else if (component.type === 'HTML') {\n                    const options = this.changedOptions;\n                    await component.update(options, true);\n                }\n                fireEvent(component.board.editMode, 'componentChanged', {\n                    target: component,\n                    changedOptions: merge({}, this.changedOptions),\n                    oldOptions: merge({}, this.oldOptionsBuffer)\n                });\n                this.changedOptions = {};\n                this.chartOptionsJSON = {};\n                this.closeSidebar();\n            }\n            /**\n             * Discards changes made in the component.\n             *\n             * @fires EditMode#componentChangesDiscarded\n             */\n            async discardChanges() {\n                const component = this.component;\n                if (!component) {\n                    return;\n                }\n                await component.update(this.oldOptionsBuffer);\n                fireEvent(component.board.editMode, 'componentChangesDiscarded', {\n                    target: component,\n                    changedOptions: merge({}, this.changedOptions),\n                    oldOptions: merge({}, this.oldOptionsBuffer)\n                });\n                this.changedOptions = {};\n                this.chartOptionsJSON = {};\n            }\n            /**\n             * Shows a confirmation popup when the user tries to discard changes.\n             */\n            showCancelConfirmationPopup() {\n                const popup = this.confirmationPopup;\n                const editMode = this.component?.board?.editMode;\n                if (!popup || !editMode || this.waitingForConfirmation) {\n                    return;\n                }\n                this.waitingForConfirmation = true;\n                popup.show({\n                    text: editMode.lang.confirmDiscardChanges,\n                    confirmButton: {\n                        value: editMode.lang.confirmButton,\n                        callback: async () => {\n                            await this.discardChanges();\n                            this.waitingForConfirmation = false;\n                            this.closeSidebar();\n                        },\n                        context: this\n                    },\n                    cancelButton: {\n                        value: editMode.lang.cancelButton,\n                        callback: () => {\n                            popup.closePopup();\n                            editMode.setEditOverlay();\n                            setTimeout(() => {\n                                this.waitingForConfirmation = false;\n                            }, 100);\n                        }\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AccordionMenu;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Row.js', [_modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/EditGlobals.js']], function (Globals, Cell, GUIElement, U, EditGlobals) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { pick, defined, merge, objectEach, fireEvent } = U;\n        /**\n         * @internal\n         **/\n        class Row extends GUIElement {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            static setContainerHeight(rowContainer, height) {\n                if (height) {\n                    rowContainer.style.height = height + 'px';\n                }\n            }\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Row class.\n             *\n             * @param {Layout} layout\n             * Reference to the layout instance.\n             *\n             * @param {Row.Options} options\n             * Options for the row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container of the row HTML element.\n             */\n            constructor(layout, options, rowElement) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.row;\n                this.layout = layout;\n                this.cells = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = document.getElementById(options.parentContainerId || '') ||\n                    layout.container;\n                const layoutOptions = (layout.options || {}), rowClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: layout.board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: options.id,\n                        className: Globals.classNames.row + ' ' +\n                            rowClassName\n                    },\n                    element: rowElement,\n                    elementId: options.id,\n                    style: merge(layoutOptions.style, options.style)\n                });\n                // Init rows from options.\n                if (this.options.cells) {\n                    this.setCells();\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the row cells using cell options or cellClassName.\n             */\n            setCells() {\n                const row = this, cellClassName = (row.layout.options || {}).cellClassName || '', cellsElements = pick(row.options.cells, row.container && row.container.getElementsByClassName(cellClassName)) || [];\n                let cellElement, i, iEnd;\n                for (i = 0, iEnd = cellsElements.length; i < iEnd; ++i) {\n                    cellElement = cellsElements[i];\n                    row.addCell(row.layout.board.guiEnabled ? cellElement : { id: '' }, cellElement instanceof HTMLElement ? cellElement : void 0);\n                }\n            }\n            /**\n             * Add a new Cell instance to the row cells array.\n             *\n             * @param {Cell.Options} [options]\n             * Options for the row cell.\n             *\n             * @param {HTMLElement} [cellElement]\n             * The container for a new cell HTML element.\n             *\n             * @return {Cell}\n             * Returns the Cell object.\n             */\n            addCell(options, cellElement, index) {\n                const row = this, cell = new Cell(row, options, cellElement);\n                if (!defined(index)) {\n                    row.cells.push(cell);\n                }\n                else {\n                    row.mountCell(cell, index);\n                }\n                // Set editMode events.\n                if (row.layout.board.editMode) {\n                    row.layout.board.editMode.setCellEvents(cell);\n                }\n                return cell;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner cells.\n             */\n            destroy() {\n                const row = this;\n                const { layout } = row;\n                // Copy to avoid problem with index when shifting array of cells during\n                // the destroy.\n                const rowCells = [...row.cells];\n                // Destroy cells.\n                for (let i = 0, iEnd = rowCells?.length; i < iEnd; ++i) {\n                    if (rowCells[i]) {\n                        rowCells[i].destroy();\n                    }\n                }\n                if (row.layout) {\n                    row.layout.unmountRow(row);\n                    super.destroy();\n                    if (layout.rows?.length === 0) {\n                        layout.destroy();\n                    }\n                }\n            }\n            /**\n             * Get the row's options.\n             * @returns\n             * The JSON of row's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const row = this, cells = [];\n                for (let i = 0, iEnd = row.cells.length; i < iEnd; ++i) {\n                    cells.push(row.cells[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    style: this.options.style,\n                    cells\n                };\n            }\n            setSize(height) {\n                Row.setContainerHeight(this.container, height);\n            }\n            // Get cell index from the row.cells array.\n            getCellIndex(cell) {\n                for (let i = 0, iEnd = this.cells?.length; i < iEnd; ++i) {\n                    if (this.cells[i].id === cell.id) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the row.cells array and move cell container.\n            mountCell(cell, index = 0) {\n                const row = this, nextCell = row.cells[index], prevCell = row.cells[index - 1];\n                if (cell.container) {\n                    if (nextCell && nextCell.container) {\n                        nextCell.container.parentNode.insertBefore(cell.container, nextCell.container);\n                    }\n                    else if (prevCell && prevCell.container) {\n                        prevCell.container.parentNode.insertBefore(cell.container, prevCell.container.nextSibling);\n                    }\n                    else if (!prevCell && !nextCell && row.container) {\n                        row.container.appendChild(cell.container);\n                    }\n                    row.cells.splice(index, 0, cell);\n                    cell.row = row;\n                    setTimeout(() => {\n                        fireEvent(row, 'cellChange', { row, cell });\n                    }, 0);\n                }\n            }\n            // Remove cell from the row.cells array.\n            unmountCell(cell) {\n                const cellIndex = this.getCellIndex(cell);\n                if (defined(cellIndex)) {\n                    this.cells.splice(cellIndex, 1);\n                }\n                setTimeout(() => {\n                    fireEvent(this, 'cellChange', { row: this, cell });\n                }, 0);\n            }\n            getVisibleCells() {\n                const cells = [];\n                for (let i = 0, iEnd = this.cells.length; i < iEnd; ++i) {\n                    if (this.cells[i].isVisible) {\n                        cells.push(this.cells[i]);\n                    }\n                }\n                return cells;\n            }\n            changeVisibility(setVisible = true, displayStyle) {\n                const row = this;\n                super.changeVisibility(setVisible, displayStyle);\n                // Change layout visibility if needed.\n                if (!row.layout.getVisibleRows().length) {\n                    row.layout.hide();\n                }\n                else if (row.isVisible && !row.layout.isVisible) {\n                    row.layout.show();\n                }\n            }\n            show() {\n                this.changeVisibility(true, 'flex');\n            }\n            setHighlight(remove) {\n                const classList = this.container.classList;\n                const highlightClass = EditGlobals.classNames.rowContextHighlight;\n                if (remove === true) {\n                    classList.remove(highlightClass);\n                }\n                else {\n                    classList.toggle(highlightClass, !remove);\n                }\n            }\n            // Row can have cells below each others.\n            // This method returns cells split into levels.\n            getRowLevels() {\n                const row = this, rowLevels = {}, rowLevelsArray = [];\n                let cell, cellOffsets;\n                for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                    cell = row.cells[k];\n                    if (cell.isVisible) {\n                        cellOffsets = GUIElement.getOffsets(cell);\n                        if (!rowLevels[cellOffsets.top]) {\n                            rowLevels[cellOffsets.top] = {\n                                top: cellOffsets.top,\n                                bottom: cellOffsets.bottom,\n                                cells: []\n                            };\n                        }\n                        if (rowLevels[cellOffsets.top].bottom < cellOffsets.bottom) {\n                            rowLevels[cellOffsets.top].bottom = cellOffsets.bottom;\n                        }\n                        rowLevels[cellOffsets.top].cells.push(cell);\n                    }\n                }\n                objectEach(rowLevels, (value) => {\n                    rowLevelsArray.push(value);\n                });\n                return rowLevelsArray;\n            }\n            // Get row level with additional info\n            // on a specific Y position.\n            getRowLevelInfo(posY) {\n                const rowLevels = this.getRowLevels();\n                let rowLevelInfo;\n                for (let i = 0, iEnd = rowLevels.length; i < iEnd; ++i) {\n                    if (rowLevels[i].top <= posY && rowLevels[i].bottom > posY) {\n                        rowLevelInfo = {\n                            index: i,\n                            rowLevels: rowLevels,\n                            rowLevel: rowLevels[i]\n                        };\n                    }\n                }\n                return rowLevelInfo;\n            }\n        }\n\n        return Row;\n    });\n    _registerModule(_modules, 'Dashboards/Layout/Layout.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Layout/Row.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Globals.js']], function (U, Row, GUIElement, Globals) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { pick, defined } = U;\n        /**\n         * @internal\n         **/\n        class Layout extends GUIElement {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Constructs an instance of the Layout class.\n             *\n             * @param {Dashboard} board\n             * Reference to the dashboard instance.\n             *\n             * @param {Layout.Options} options\n             * Options for the layout.\n             */\n            constructor(board, options, parentCell) {\n                super();\n                /**\n                 * The type of GUI element.\n                 */\n                this.type = Globals.guiElementType.layout;\n                this.board = board;\n                this.rows = [];\n                this.options = options;\n                this.isVisible = true;\n                // Get parent container\n                const parentContainer = parentCell ? parentCell.container :\n                    document.getElementById(options.parentContainerId || '') || board.layoutsWrapper;\n                // Set layout level.\n                if (parentCell) {\n                    this.parentCell = parentCell;\n                    this.level = parentCell.row.layout.level + 1;\n                }\n                else {\n                    this.level = 0;\n                }\n                // GUI structure\n                if (options.copyId) {\n                    this.copyId = options.copyId;\n                }\n                const layoutOptions = (this.options || {}), layoutClassName = layoutOptions.rowClassName || '';\n                this.container = this.getElementContainer({\n                    render: board.guiEnabled,\n                    parentContainer: parentContainer,\n                    attribs: {\n                        id: (options.id || '') + (this.copyId ? '_' + this.copyId : ''),\n                        className: Globals.classNames.layout + ' ' +\n                            layoutClassName\n                    },\n                    elementId: options.id,\n                    style: this.options.style\n                });\n                // Init rows from options.\n                if (this.options.rows) {\n                    this.setRows();\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Set the layout rows using rows options or rowClassName.\n             */\n            setRows() {\n                const layout = this, rowsElements = pick(layout.options.rows, layout.container && layout.container.getElementsByClassName(layout.options.rowClassName || '')) || [];\n                let rowElement, i, iEnd;\n                for (i = 0, iEnd = rowsElements.length; i < iEnd; ++i) {\n                    rowElement = rowsElements[i];\n                    layout.addRow(layout.board.guiEnabled ? rowElement : {}, rowElement instanceof HTMLElement ? rowElement : void 0);\n                }\n            }\n            /**\n             * Add a new Row instance to the layout rows array.\n             *\n             * @param {Row.Options} options\n             * Options of a row.\n             *\n             * @param {HTMLElement} rowElement\n             * The container for a new row HTML element.\n             *\n             * @return {Row}\n             * Returns the Row object.\n             */\n            addRow(options, rowElement, index) {\n                const layout = this, row = new Row(layout, options, rowElement);\n                if (!defined(index)) {\n                    layout.rows.push(row);\n                }\n                else {\n                    layout.mountRow(row, index);\n                }\n                // Set editMode events.\n                if (layout.board.editMode) {\n                    layout.board.editMode.setRowEvents(row);\n                }\n                return row;\n            }\n            /**\n             * Destroy the element, its container, event hooks\n             * and inner rows.\n             */\n            destroy() {\n                const layout = this;\n                for (let i = layout.board.layouts.length - 1; i >= 0; i--) {\n                    if (layout.board.layouts[i] === layout) {\n                        layout.board.layouts.splice(i, 1);\n                    }\n                }\n                if (layout.parentCell) {\n                    delete layout.parentCell.nestedLayout;\n                }\n                // Destroy rows.\n                for (let i = layout.rows.length - 1; i >= 0; i--) {\n                    layout.rows[i].destroy();\n                }\n                if (layout.parentCell) {\n                    layout.parentCell.destroy();\n                }\n                super.destroy();\n            }\n            // Get row index from the layout.rows array.\n            getRowIndex(row) {\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i] === row) {\n                        return i;\n                    }\n                }\n            }\n            // Add cell to the layout.rows array and move row container.\n            mountRow(row, index) {\n                const nextRow = this.rows[index], prevRow = this.rows[index - 1];\n                if (row.container) {\n                    if (nextRow && nextRow.container) {\n                        nextRow.container.parentNode.insertBefore(row.container, nextRow.container);\n                    }\n                    else if (prevRow && prevRow.container) {\n                        prevRow.container.parentNode.insertBefore(row.container, prevRow.container.nextSibling);\n                    }\n                    this.rows.splice(index, 0, row);\n                    row.layout = this;\n                }\n            }\n            // Remove row from the layout.rows array.\n            unmountRow(row) {\n                const rowIndex = this.getRowIndex(row);\n                if (defined(rowIndex)) {\n                    this.rows.splice(rowIndex, 1);\n                }\n            }\n            getVisibleRows() {\n                const rows = [];\n                for (let i = 0, iEnd = this.rows.length; i < iEnd; ++i) {\n                    if (this.rows[i].isVisible) {\n                        rows.push(this.rows[i]);\n                    }\n                }\n                return rows;\n            }\n            changeVisibility(setVisible = true) {\n                const layout = this;\n                super.changeVisibility(setVisible);\n                // Change parentCell visibility.\n                if (layout.parentCell) {\n                    if (layout.isVisible && !layout.parentCell.isVisible) {\n                        layout.parentCell.show();\n                    }\n                    else if (!layout.isVisible && layout.parentCell.isVisible) {\n                        layout.parentCell.hide();\n                    }\n                }\n            }\n            /**\n             * Get the layout's options.\n             * @returns\n             * Layout's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                const layout = this, rows = [];\n                // Get rows JSON.\n                for (let i = 0, iEnd = layout.rows.length; i < iEnd; ++i) {\n                    rows.push(layout.rows[i].getOptions());\n                }\n                return {\n                    id: this.options.id,\n                    layoutClassName: this.options.layoutClassName,\n                    rowClassName: this.options.rowClassName,\n                    cellClassName: this.options.cellClassName,\n                    style: this.options.style,\n                    rows\n                };\n            }\n        }\n\n        return Layout;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/SidebarPopup.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Layout/CellHTML.js'], _modules['Dashboards/EditMode/AccordionMenu.js'], _modules['Shared/BaseForm.js'], _modules['Dashboards/Actions/Bindings.js'], _modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Core/Utilities.js']], function (AST, CellHTML, AccordionMenu, BaseForm, Bindings, Cell, EditGlobals, EditRenderer, GUIElement, Layout, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  Pawel Lysy\n         *\n         * */\n        const { addEvent, createElement, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class which creates the sidebar and handles its behavior.\n         *\n         * @internal\n         */\n        class SidebarPopup extends BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor of the SidebarPopup class.\n             *\n             * @param parentDiv\n             * Element to which the sidebar will be appended.\n             *\n             * @param iconsURL\n             * URL to the icons.\n             *\n             * @param editMode\n             * Instance of EditMode.\n             */\n            constructor(parentDiv, iconsURL, editMode) {\n                super(parentDiv, iconsURL);\n                /**\n                 * Options used in the sidebar.\n                 */\n                this.options = {\n                    components: ['HTML', 'row', 'Highcharts', 'DataGrid', 'KPI']\n                };\n                /**\n                 * Whether the sidebar is visible.\n                 */\n                this.isVisible = false;\n                /**\n                 * List of components that can be added to the board.\n                 */\n                this.componentsList = [];\n                this.editMode = editMode;\n                this.options = merge(this.options, editMode.options.toolbars?.sidebar || {});\n                this.componentsList = this.getComponentsList(this.options.components || []);\n                this.accordionMenu = new AccordionMenu(this.iconsURL, this.hide.bind(this));\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Function to detect on which side of the screen should the sidebar be.\n             *\n             * @param context\n             * The cell or row which is the context of the sidebar.\n             *\n             * @returns\n             * Whether the sidebar should be on the right side of the screen.\n             */\n            detectRightSidebar(context) {\n                const editMode = this.editMode;\n                const layoutWrapper = editMode.customHTMLMode ?\n                    editMode.board.container : editMode.board.layoutsWrapper;\n                if (!layoutWrapper) {\n                    return false;\n                }\n                return GUIElement.getOffsets(context, layoutWrapper).left < ((layoutWrapper.offsetWidth / 2) - 10); // 10 = snap\n            }\n            /**\n             * Function to remove the class names from the sidebar.\n             */\n            removeClassNames() {\n                const classNames = EditGlobals.classNames, classList = this.container.classList;\n                classList.remove(classNames.editSidebarShow);\n                classList.remove(classNames.editSidebarRightShow);\n            }\n            /**\n             * Function to add the class names to the sidebar depending on the position\n             * of the sidebar.\n             *\n             * @param isRightSidebar\n             * Whether the sidebar should be on the right side of the screen.\n             */\n            addClassNames(isRightSidebar) {\n                const classList = this.container.classList;\n                if (isRightSidebar) {\n                    classList.add(EditGlobals.classNames.editSidebarRight);\n                }\n                else {\n                    classList.remove(EditGlobals.classNames.editSidebarRight);\n                }\n                setTimeout(() => {\n                    classList.add(EditGlobals.classNames[isRightSidebar ? 'editSidebarRightShow' : 'editSidebarShow']);\n                });\n            }\n            /**\n             * Function to show the sidebar.\n             *\n             * @param context\n             * The cell or row which is the context of the sidebar.\n             */\n            show(context) {\n                const editMode = this.editMode, isRightSidebar = !!(context && this.detectRightSidebar(context));\n                this.showPopup(EditGlobals.classNames.editSidebarShow);\n                this.addClassNames(isRightSidebar);\n                if (editMode.resizer) {\n                    editMode.resizer.disableResizer();\n                }\n                // Remove highlight from the row.\n                if (Cell.isCell(editMode.editCellContext) &&\n                    editMode.editCellContext.row) {\n                    editMode.editCellContext.row.setHighlight();\n                }\n                editMode.hideToolbars(['cell', 'row']);\n                editMode.stopContextDetection();\n                this.isVisible = true;\n                this.generateContent(context);\n            }\n            generateContent(context) {\n                // Reset\n                this.container.innerHTML = AST.emptyHTML;\n                // Title\n                this.renderHeader(context ?\n                    this.editMode.lang.settings :\n                    this.editMode.lang.addComponent, '');\n                // Render content wrapper\n                this.sidebarWrapper = createElement('div', {\n                    className: EditGlobals.classNames.editSidebarWrapper\n                }, void 0, this.container);\n                if (!context) {\n                    this.renderAddComponentsList();\n                    return;\n                }\n                this.type = context.getType();\n                if (this.type === 'cell-html' || this.type === 'cell') {\n                    const component = context.mountedComponent;\n                    if (!component) {\n                        return;\n                    }\n                    this.accordionMenu.renderContent(this.sidebarWrapper, component, this.container);\n                }\n            }\n            renderAddComponentsList() {\n                const sidebar = this;\n                const components = this.componentsList;\n                let gridElement;\n                const gridWrapper = createElement('div', {\n                    className: EditGlobals.classNames.editGridItems\n                }, {}, sidebar.sidebarWrapper);\n                for (let i = 0, iEnd = components.length; i < iEnd; ++i) {\n                    gridElement = createElement('div', {}, {}, gridWrapper);\n                    // Drag drop new component.\n                    gridElement.addEventListener('mousedown', (e) => {\n                        e.preventDefault();\n                        const dragDrop = sidebar.editMode.dragDrop;\n                        if (dragDrop) {\n                            // Workaround for Firefox, where mouseleave is not triggered\n                            // correctly when dragging.\n                            const onMouseMove = (event) => {\n                                const rect = sidebar.container.getBoundingClientRect();\n                                if (event.clientX < rect.left ||\n                                    event.clientX > rect.right ||\n                                    event.clientY < rect.top ||\n                                    event.clientY > rect.bottom) {\n                                    sidebar.hide();\n                                    document.removeEventListener('mousemove', onMouseMove);\n                                }\n                            };\n                            // Clean up event listeners\n                            const onMouseUp = () => {\n                                document.removeEventListener('mousemove', onMouseMove);\n                                document.removeEventListener('mouseup', onMouseUp);\n                            };\n                            // Add event listeners\n                            document.addEventListener('mousemove', onMouseMove);\n                            document.addEventListener('mouseup', onMouseUp);\n                            dragDrop.onDragStart(e, void 0, (dropContext) => {\n                                // Add component if there is no layout yet.\n                                if (this.editMode.board.layouts.length === 0) {\n                                    const board = this.editMode.board, newLayoutId = GUIElement.getElementId('layout'), layout = new Layout(board, {\n                                        id: newLayoutId,\n                                        copyId: '',\n                                        parentContainerId: board.container.id,\n                                        rows: [{}],\n                                        style: {}\n                                    });\n                                    if (layout) {\n                                        board.layouts.push(layout);\n                                    }\n                                    dropContext = layout.rows[0];\n                                }\n                                if (!dropContext?.type) {\n                                    const layouts = sidebar.editMode.board.layouts;\n                                    dragDrop.dropContext = dropContext =\n                                        layouts[layouts.length - 1].addRow({}, void 0);\n                                }\n                                const newCell = components[i].onDrop(sidebar, dropContext);\n                                /* eslint-disable max-len */\n                                const unbindLayoutChanged = addEvent(this.editMode, 'layoutChanged', (e) => {\n                                    if (newCell && e.type === 'newComponent') {\n                                        const chart = newCell.mountedComponent?.chart;\n                                        const settingsEnabled = this.editMode.options.settings?.enabled;\n                                        if (chart?.isDirtyBox) {\n                                            const unbind = addEvent(chart, 'render', () => {\n                                                sidebar.editMode.setEditCellContext(newCell);\n                                                if (settingsEnabled) {\n                                                    sidebar.show(newCell);\n                                                    newCell.setHighlight();\n                                                }\n                                                unbind();\n                                                unbindLayoutChanged();\n                                            });\n                                        }\n                                        else {\n                                            sidebar.editMode.setEditCellContext(newCell);\n                                            if (settingsEnabled) {\n                                                sidebar.show(newCell);\n                                                newCell.setHighlight();\n                                            }\n                                            unbindLayoutChanged();\n                                        }\n                                    }\n                                });\n                                /* eslint-enable max-len */\n                                // Clean up event listener after drop is complete\n                                document.removeEventListener('mousemove', onMouseMove);\n                            });\n                        }\n                    });\n                    gridElement.innerHTML = components[i].text;\n                }\n                return;\n            }\n            onDropNewComponent(dropContext, componentOptions) {\n                const sidebar = this, dragDrop = sidebar.editMode.dragDrop;\n                if (!dragDrop) {\n                    return;\n                }\n                const row = (dropContext.getType() === 'cell' ?\n                    dropContext.row :\n                    dropContext), newCell = row.addCell({\n                    id: GUIElement.getElementId('col')\n                });\n                dragDrop.onCellDragEnd(newCell);\n                const options = merge(componentOptions, {\n                    cell: newCell.id\n                });\n                const componentPromise = Bindings.addComponent(options, sidebar.editMode.board, newCell);\n                sidebar.editMode.setEditOverlay(!this.editMode.options.settings?.enabled);\n                void (async () => {\n                    const component = await componentPromise;\n                    if (!component) {\n                        return;\n                    }\n                    fireEvent(this.editMode, 'layoutChanged', {\n                        type: 'newComponent',\n                        target: component\n                    });\n                })();\n                return newCell;\n            }\n            /**\n             * Function to hide the sidebar.\n             */\n            hide() {\n                const editMode = this.editMode;\n                const editCellContext = editMode.editCellContext;\n                this.removeClassNames();\n                this.container.style.display = 'none';\n                // Remove edit overlay if active.\n                if (editMode.isEditOverlayActive) {\n                    editMode.setEditOverlay(true);\n                }\n                if (Cell.isCell(editCellContext) && editCellContext.row) {\n                    editMode.showToolbars(['cell', 'row'], editCellContext);\n                    editCellContext.row.setHighlight(true);\n                    editCellContext.setHighlight(true);\n                    if (editMode.resizer) {\n                        editMode.resizer.setSnapPositions(editMode.editCellContext);\n                    }\n                }\n                else if (CellHTML.isCellHTML(editCellContext) && editMode.cellToolbar) {\n                    editMode.cellToolbar.showToolbar(editCellContext);\n                    editCellContext.setHighlight();\n                }\n                editMode.isContextDetectionActive = true;\n                this.isVisible = false;\n            }\n            /**\n             * Function called when the close button is pressed.\n             *\n             * @override BaseForm.closeButtonEvents\n             */\n            closeButtonEvents() {\n                if (this.type === 'cell' || this.type === 'cell-html') {\n                    this.accordionMenu.cancelChanges();\n                }\n                else {\n                    this.hide();\n                }\n            }\n            renderHeader(title, iconURL) {\n                if (!this.container) {\n                    return;\n                }\n                const headerWrapper = createElement('div', {\n                    className: EditGlobals.classNames.editSidebarHeader\n                }, {}, this.container);\n                this.container.appendChild(headerWrapper);\n                this.headerWrapper = headerWrapper;\n                const icon = EditRenderer.renderIcon(this.headerWrapper, {\n                    icon: iconURL,\n                    className: EditGlobals.classNames.editSidebarTitle\n                });\n                if (icon) {\n                    icon.textContent = title;\n                }\n                this.headerWrapper?.appendChild(this.closeButton);\n            }\n            /**\n             * Based on the provided components list, it returns the list of components\n             * with its names and functions that are called when the component is\n             * dropped.\n             *\n             * @param components\n             * List of components that can be added to the board.\n             */\n            getComponentsList(components) {\n                const sidebar = this, editMode = sidebar.editMode, componentTypes = editMode.board.componentTypes, componentList = [];\n                components.forEach((componentName) => {\n                    const component = componentTypes[componentName];\n                    if (component) {\n                        componentList.push({\n                            text: editMode.lang?.sidebar[componentName] ||\n                                component.name,\n                            onDrop: function (sidebar, dropContext) {\n                                const options = component.prototype.getOptionsOnDrop(sidebar);\n                                if (options) {\n                                    return sidebar.onDropNewComponent(dropContext, options);\n                                }\n                            }\n                        });\n                    }\n                    else if (componentName === 'row') {\n                        componentList.push({\n                            ...SidebarPopup.addRow,\n                            text: editMode.lang?.sidebar[componentName] ||\n                                SidebarPopup.addRow.text\n                        });\n                    }\n                });\n                return componentList;\n            }\n            /**\n             * Function to create and add the close button to the sidebar.\n             *\n             * @param className\n             * Class name of the close button.\n             * @returns Close button element\n             */\n            addCloseButton(className = EditGlobals.classNames.popupCloseButton) {\n                // Close popup when click outside the popup\n                addEvent(document, 'click', (event) => {\n                    event.stopPropagation();\n                    if (this.container.style.display === 'block' &&\n                        !this.container.contains(event.target) &&\n                        this.container.classList.value.includes('show')) {\n                        if (this.type === 'cell' || this.type === 'cell-html') {\n                            this.accordionMenu.cancelChanges();\n                        }\n                        else {\n                            this.hide();\n                        }\n                    }\n                });\n                return super.addCloseButton.call(this, className);\n            }\n            /**\n             * Function that creates the container of the sidebar.\n             *\n             * @param parentDiv\n             * The parent div to which the sidebar will be appended.\n             * @param className\n             * Class name of the sidebar.\n             * @returns The container of the sidebar.\n             */\n            createPopupContainer(parentDiv, className = EditGlobals.classNames.editSidebar) {\n                return super.createPopupContainer.call(this, parentDiv, className);\n            }\n        }\n        SidebarPopup.addRow = {\n            text: EditGlobals.lang.sidebar.row,\n            onDrop: function (sidebar, dropContext) {\n                if (!dropContext) {\n                    return;\n                }\n                const isCellType = dropContext.getType() === 'cell', row = isCellType ? dropContext.row :\n                    dropContext, board = row.layout.board, cellId = GUIElement.getElementId('cell');\n                if (isCellType) {\n                    const newLayoutId = GUIElement.getElementId('layout');\n                    const layout = new Layout(board, {\n                        id: newLayoutId,\n                        copyId: '',\n                        parentContainerId: board.container.id,\n                        rows: [{\n                                cells: [{\n                                        id: cellId\n                                    }]\n                            }],\n                        style: {}\n                    });\n                    board.layouts.push(layout);\n                    fireEvent(board.editMode, 'layoutChanged', {\n                        type: 'newLayout',\n                        target: layout,\n                        board\n                    });\n                }\n                else {\n                    dropContext.layout.rows[0].addCell({\n                        id: cellId\n                    });\n                }\n                void Bindings.addComponent({\n                    type: 'HTML',\n                    cell: cellId,\n                    className: 'highcharts-dashboards-component-placeholder',\n                    html: `\n                            <h2> Placeholder </h2>\n                            <span> This placeholder can be deleted when you add extra\n                                components to this row.\n                            </span>\n                            `\n                }, board);\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SidebarPopup;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditContextMenu.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Core/Utilities.js'], _modules['Dashboards/EditMode/Menu/Menu.js']], function (EditGlobals, U, Menu) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, merge } = U;\n        /**\n         * Class to create context menu.\n         * @internal\n         */\n        class EditContextMenu extends Menu {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentElement, options, editMode) {\n                super(editMode.board.container, merge(EditContextMenu.defaultOptions, options || {}), editMode);\n                this.editMode = editMode;\n                this.options = merge(EditContextMenu.defaultOptions, options || {});\n                // Move it in the DOM after the edit tools so it is better accessible.\n                this.editMode.board.layoutsWrapper?.parentNode.insertBefore(this.container, this.editMode.board.layoutsWrapper);\n                // Set the context menu container width.\n                this.container.style.width = this.options.width + 'px';\n                super.initItems(EditContextMenu.items);\n                if (this.options.items) {\n                    const items = [];\n                    for (let i = 0, iEnd = this.options.items.length; i < iEnd; ++i) {\n                        if (typeof this.options.items[i] === 'string') {\n                            items.push(this.options.items[i]);\n                        }\n                        else if (this.options.items[i].id) {\n                            items.push(this.options.items[i].id);\n                        }\n                    }\n                    this.setActiveItems(items);\n                }\n                this.initEvents();\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            initEvents() {\n                const contextMenu = this;\n                // Click on document close the context menu\n                // TODO refactor\n                addEvent(document, 'click', (event) => {\n                    if (event.target !== this.container &&\n                        event.target !==\n                            contextMenu.editMode.tools.contextButtonElement &&\n                        !event.target.classList\n                            .contains(EditGlobals.classNames.toggleSlider) &&\n                        event.target.tagName !== 'INPUT' &&\n                        this.isVisible) {\n                        this.setVisible(false);\n                    }\n                });\n            }\n            setVisible(visible) {\n                const contextMenu = this, contextButtonElement = contextMenu.editMode.tools.contextButtonElement;\n                if (contextMenu.container && contextButtonElement) {\n                    if (visible) {\n                        contextMenu.container.style.display = 'block';\n                        contextMenu.isVisible = true;\n                        contextButtonElement.setAttribute('aria-expanded', 'true');\n                    }\n                    else {\n                        contextMenu.container.style.display = 'none';\n                        contextMenu.isVisible = false;\n                        contextButtonElement.setAttribute('aria-expanded', 'false');\n                    }\n                }\n                // Set editMode toggle state\n                const toggleEditMode = this.activeItems.find((item) => item.options.langKey === 'editMode');\n                if (toggleEditMode) {\n                    toggleEditMode.options.setValue(toggleEditMode, this.editMode.isActive());\n                }\n            }\n            updatePosition(ctxButton, x, y) {\n                const contextMenu = this, width = contextMenu.options.width || 0, left = (ctxButton ?\n                    ctxButton.offsetLeft - width + ctxButton.offsetWidth :\n                    x), top = ctxButton ? ctxButton.offsetTop + ctxButton.offsetHeight : y;\n                if (left && top) {\n                    contextMenu.container.style.left = left + 'px';\n                    contextMenu.container.style.top = top + 'px';\n                }\n            }\n        }\n        /* *\n        *\n        *  Static Properties\n        *\n        * */\n        EditContextMenu.defaultOptions = {\n            enabled: true,\n            width: 150,\n            className: EditGlobals.classNames.contextMenu,\n            itemsClassName: EditGlobals.classNames.contextMenuItem,\n            items: ['editMode']\n        };\n        /**\n         * Default Context menu items.\n         */\n        EditContextMenu.items = merge(Menu.items, {\n            editMode: {\n                id: 'editMode',\n                type: 'toggle',\n                getValue: function (item) {\n                    return item.menu.editMode.isActive();\n                },\n                setValue: function (item, value) {\n                    const inputElem = item.innerElement?.querySelector('input');\n                    if (inputElem) {\n                        inputElem.checked = value;\n                    }\n                },\n                langKey: 'editMode',\n                events: {\n                    click: function () {\n                        this.menu.editMode.toggleEditMode();\n                    }\n                }\n            }\n        });\n\n        return EditContextMenu;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/ContextDetection.js', [_modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (GUIElement, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { defined } = U;\n        class ContextDetection {\n            static isGUIElementOnParentEdge(mouseContext, side) {\n                const visibleElements = (side === 'top' || side === 'bottom') ?\n                    mouseContext.row.layout.getVisibleRows() :\n                    (side === 'left' || side === 'right') ?\n                        mouseContext.row.getVisibleCells() :\n                        [];\n                const lastElementIndex = (visibleElements.length - 1);\n                return ((visibleElements[lastElementIndex] === mouseContext &&\n                    side === 'right') ||\n                    (visibleElements[lastElementIndex] === mouseContext.row &&\n                        side === 'bottom') ||\n                    (visibleElements[0] === mouseContext && side === 'left') ||\n                    (visibleElements[0] === mouseContext.row && side === 'top'));\n            }\n            static getContextLevel(mouseContext, offset, sideOffset, side) {\n                // Array of overlapped levels.\n                const overlappedLevels = mouseContext.getOverlappingLevels(side, offset / 2);\n                // Divide offset to level sections (eg 3 nested layouts -\n                // cell edge will have 3 sections each 1/3 offset width).\n                const divOffset = offset / overlappedLevels.length;\n                // Overlapped nested layout level.\n                const lastOverlappedLevel = overlappedLevels[overlappedLevels.length - 1];\n                let level = mouseContext.row.layout.level - Math.floor(sideOffset / divOffset);\n                level = level < lastOverlappedLevel ? lastOverlappedLevel : (level > mouseContext.row.layout.level ?\n                    mouseContext.row.layout.level : level);\n                return level;\n            }\n            static getContext(mouseCellContext, e, offset) {\n                let sideOffset;\n                // Get cell offsets, width, height\n                const mouseCellContextOffsets = GUIElement.getOffsets(mouseCellContext);\n                const { width, height } = GUIElement.getDimFromOffsets(mouseCellContextOffsets);\n                // Correct offset when element to small.\n                if (width < 2 * offset) {\n                    offset = width / 2;\n                }\n                // Get mouse position relative to the mouseContext sides.\n                const leftSideX = e.clientX - mouseCellContextOffsets.left;\n                const topSideY = e.clientY - mouseCellContextOffsets.top;\n                // Get cell side - right, left, top, bottom\n                let side = 'bottom';\n                if (leftSideX >= -offset && leftSideX <= offset) {\n                    side = 'left';\n                }\n                else if (leftSideX - width >= -offset && leftSideX - width <= offset) {\n                    side = 'right';\n                }\n                else if (topSideY >= -offset && topSideY <= offset) {\n                    side = 'top';\n                }\n                else if (topSideY - height >= -offset && topSideY - height <= offset) {\n                    side = 'bottom';\n                }\n                switch (side) {\n                    case 'right':\n                        sideOffset = leftSideX - width + offset;\n                        break;\n                    case 'left':\n                        sideOffset = offset - leftSideX;\n                        break;\n                    case 'top':\n                        sideOffset = offset - topSideY;\n                        break;\n                    case 'bottom':\n                        sideOffset = topSideY - height + offset;\n                        break;\n                }\n                const context = {\n                    cell: mouseCellContext,\n                    side: side\n                };\n                // Nested layouts.\n                if (mouseCellContext.row?.layout.level &&\n                    side &&\n                    ContextDetection.isGUIElementOnParentEdge(mouseCellContext, side) &&\n                    defined(sideOffset)) {\n                    const level = ContextDetection.getContextLevel(mouseCellContext, offset, sideOffset, side);\n                    const cell = mouseCellContext.getParentCell(level);\n                    if (cell) {\n                        context.cell = cell;\n                    }\n                }\n                return context;\n            }\n        }\n\n        return ContextDetection;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/DragDrop.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Actions/ContextDetection.js']], function (U, Globals, EditGlobals, GUIElement, ContextDetection) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, merge, css, fireEvent, createElement } = U;\n        /**\n         * Class providing a drag and drop functionality.\n         * @internal\n         */\n        class DragDrop {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * Constructor for the DragDrop class.\n             * @internal\n             *\n             * @param {EditMode} editMode\n             * The parent editMode reference.\n             *\n             * @param {DragDrop.Options} options\n             * Options for the DragDrop.\n             */\n            constructor(editMode, options) {\n                this.editMode = editMode;\n                this.options = merge(DragDrop.defaultOptions, options);\n                this.mockElement = createElement('div', { className: EditGlobals.classNames.dragMock }, {}, editMode.board.container);\n                this.dropPointer = {\n                    isVisible: false,\n                    align: '',\n                    element: createElement('div', { className: EditGlobals.classNames.dropPointer }, {}, editMode.board.container)\n                };\n                this.isActive = false;\n                this.initEvents();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for showing and positioning drop pointer.\n             *\n             * @param {number} left\n             * Drop pointer left position.\n             *\n             * @param {number} top\n             * Drop pointer top position.\n             *\n             * @param {number} width\n             * Drop pointer width.\n             *\n             * @param {number} height\n             * Drop pointer height.\n             */\n            showDropPointer(left, top, width, height) {\n                this.dropPointer.isVisible = true;\n                css(this.dropPointer.element, {\n                    display: 'block',\n                    left: left + 'px',\n                    top: top + 'px',\n                    height: height + 'px',\n                    width: width + 'px'\n                });\n            }\n            /**\n             * Method for hiding drop pointer.\n             */\n            hideDropPointer() {\n                if (this.dropPointer.isVisible) {\n                    this.dropPointer.isVisible = false;\n                    this.dropPointer.align = '';\n                    this.dropPointer.element.style.display = 'none';\n                }\n            }\n            /**\n             * Method for positioning drag mock element.\n             *\n             * @param {PointerEvent} mouseEvent\n             * Mouse event.\n             */\n            setMockElementPosition(mouseEvent) {\n                const dragDrop = this, dashBoundingRect = dragDrop.editMode.board.container.getBoundingClientRect(), offset = dragDrop.mockElement.clientWidth / 2, x = mouseEvent.clientX - dashBoundingRect.left - offset, y = mouseEvent.clientY - dashBoundingRect.top - offset;\n                css(this.mockElement, { left: x + 'px', top: y + 'px' });\n            }\n            /**\n             * Method for initializing drag drop events.\n             */\n            initEvents() {\n                const dragDrop = this;\n                // DragDrop events.\n                addEvent(document, 'mousemove', dragDrop.onDrag.bind(dragDrop));\n                addEvent(document, 'mouseup', dragDrop.onDragEnd.bind(dragDrop));\n            }\n            /**\n             * General method used on drag start.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {Cell|Row} context\n             * Reference to the dragged context.\n             *\n             * @param {Function} dragEndCallback\n             * Callback invoked on drag end.\n             */\n            onDragStart(e, context, dragEndCallback) {\n                this.isActive = true;\n                this.editMode.hideToolbars(['cell', 'row']);\n                if (this.editMode.resizer) {\n                    this.editMode.resizer.disableResizer();\n                }\n                this.setMockElementPosition(e);\n                if (context) {\n                    this.context = context;\n                    context.hide();\n                    if (context.getType() === Globals.guiElementType.cell) {\n                        const draggedCell = context;\n                        // Call cellResize board event.\n                        fireEvent(this.editMode.board, 'cellResize', { cell: context });\n                        fireEvent(draggedCell.row, 'cellChange', { cell: context, row: draggedCell.row });\n                    }\n                }\n                else if (dragEndCallback) {\n                    this.dragEndCallback = dragEndCallback;\n                }\n                css(this.mockElement, {\n                    cursor: 'grabbing',\n                    display: 'block'\n                });\n            }\n            /**\n             * General method used while dragging.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             */\n            onDrag(e) {\n                const dragDrop = this;\n                if (dragDrop.isActive) {\n                    e.preventDefault();\n                    dragDrop.setMockElementPosition(e);\n                    if (dragDrop.context) {\n                        if (dragDrop.context.getType() ===\n                            Globals.guiElementType.cell) {\n                            dragDrop.onCellDrag(e);\n                        }\n                        else if (dragDrop.context.getType() ===\n                            Globals.guiElementType.row) {\n                            dragDrop.onRowDrag(e);\n                        }\n                    }\n                    else if (dragDrop.dragEndCallback) {\n                        dragDrop.onCellDrag(e);\n                    }\n                }\n            }\n            /**\n             * General method used when drag finish.\n             */\n            onDragEnd() {\n                const dragDrop = this;\n                if (dragDrop.isActive) {\n                    dragDrop.isActive = false;\n                    css(dragDrop.mockElement, {\n                        cursor: 'grab',\n                        display: 'none'\n                    });\n                    if (dragDrop.context) {\n                        if (dragDrop.context.getType() ===\n                            Globals.guiElementType.cell) {\n                            dragDrop.onCellDragEnd();\n                        }\n                        else if (dragDrop.context.getType() ===\n                            Globals.guiElementType.row) {\n                            dragDrop.onRowDragEnd();\n                        }\n                        dragDrop.context = void 0;\n                        // Show toolbars and snaps.\n                        if (dragDrop.editMode.editCellContext) {\n                            dragDrop.editMode.showToolbars(['row', 'cell'], dragDrop.editMode.editCellContext);\n                            if (dragDrop.editMode.resizer) {\n                                dragDrop.editMode.resizer.setSnapPositions(dragDrop.editMode.editCellContext);\n                            }\n                        }\n                    }\n                    else if (dragDrop.dragEndCallback) {\n                        dragDrop.dragEndCallback(dragDrop.dropContext);\n                        dragDrop.dragEndCallback = void 0;\n                        dragDrop.hideDropPointer();\n                    }\n                }\n            }\n            /**\n             * Sets appropriate drop context and refresh drop pointer position when\n             * row is dragged or cell is dragged as a row.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} contextDetails\n             * Context details (cell, side)\n             */\n            onRowDrag(e, contextDetails) {\n                const dragDrop = this, mouseCellContext = dragDrop.mouseCellContext, dropPointerSize = dragDrop.options.dropPointerSize || 0, offset = dragDrop.options.rowDropOffset || 0;\n                let updateDropPointer = false;\n                if (mouseCellContext) {\n                    const context = (contextDetails ||\n                        ContextDetection.getContext(mouseCellContext, e, offset));\n                    const align = context.side;\n                    if (dragDrop.dropPointer.align !== align ||\n                        dragDrop.dropContext !== context.cell.row) {\n                        updateDropPointer = true;\n                        dragDrop.dropPointer.align = align;\n                        dragDrop.dropContext = context.cell.row;\n                    }\n                    if (align) {\n                        const dropContextRowOffsets = GUIElement.getOffsets(dragDrop.dropContext, dragDrop.editMode.board.container);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(dropContextRowOffsets);\n                        // Update or show drop pointer.\n                        if (!dragDrop.dropPointer.isVisible || updateDropPointer) {\n                            dragDrop.showDropPointer(dropContextRowOffsets.left, dropContextRowOffsets.top + (dragDrop.dropPointer.align === 'bottom' ?\n                                height :\n                                0) - dropPointerSize / 2, width, dropPointerSize);\n                        }\n                    }\n                    else {\n                        dragDrop.dropContext = void 0;\n                        dragDrop.hideDropPointer();\n                    }\n                }\n            }\n            /**\n             * Unmounts dropped row and mounts it in a new position.\n             *\n             * @fires DragDrop#layoutChanged\n             */\n            onRowDragEnd() {\n                const dragDrop = this, draggedRow = dragDrop.context, dropContext = dragDrop.dropContext;\n                if (dragDrop.dropPointer.align) {\n                    draggedRow.layout.unmountRow(draggedRow);\n                    // Destroy layout when empty.\n                    if (draggedRow.layout.rows.length === 0) {\n                        draggedRow.layout.destroy();\n                    }\n                    dropContext.layout.mountRow(draggedRow, (dropContext.layout.getRowIndex(dropContext) || 0) +\n                        (dragDrop.dropPointer.align === 'bottom' ? 1 : 0));\n                    // Call cellResize board event.\n                    if (draggedRow.cells[0]) {\n                        fireEvent(dragDrop.editMode.board, 'cellResize', { cell: draggedRow.cells[0] });\n                        fireEvent(draggedRow, 'cellChange', { cell: draggedRow.cells[0], row: draggedRow });\n                    }\n                }\n                dragDrop.hideDropPointer();\n                draggedRow.show();\n                fireEvent(dragDrop.editMode, 'layoutChanged', {\n                    type: 'rowDragEnd',\n                    target: draggedRow,\n                    board: dragDrop.editMode.board\n                });\n            }\n            /**\n             * Method used as middleware when cell is dragged.\n             * Decides where to pass an event depending on the mouse context.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} contextDetails\n             * Context details (cell, side)\n             */\n            onCellDrag(e, contextDetails) {\n                const dragDrop = this, mouseCellContext = dragDrop.mouseCellContext, offset = dragDrop.options.cellDropOffset || 0;\n                if (mouseCellContext || contextDetails) {\n                    dragDrop.onCellDragCellCtx(e, contextDetails ||\n                        ContextDetection.getContext(mouseCellContext, e, offset));\n                }\n                else if (dragDrop.mouseRowContext) {\n                    dragDrop.onCellDragRowCtx(e, dragDrop.mouseRowContext);\n                }\n            }\n            /**\n             * Sets appropriate drop context and refreshes the drop pointer\n             * position when a cell is dragged and a cell context is detected.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {ContextDetection.ContextDetails} context\n             * Context details (cell, side)\n             */\n            onCellDragCellCtx(e, context) {\n                const dragDrop = this, dropPointerSize = dragDrop.options.dropPointerSize || 0, align = context.side;\n                let updateDropPointer = false;\n                if (dragDrop.dropPointer.align !== align ||\n                    dragDrop.dropContext !== context.cell) {\n                    updateDropPointer = true;\n                    dragDrop.dropPointer.align = align;\n                    dragDrop.dropContext = context.cell;\n                }\n                if (align === 'right' || align === 'left') {\n                    const dropContextOffsets = GUIElement.getOffsets(dragDrop.dropContext, dragDrop.editMode.board.container);\n                    const { width, height } = GUIElement.getDimFromOffsets(dropContextOffsets);\n                    // Update or show drop pointer.\n                    if (!dragDrop.dropPointer.isVisible || updateDropPointer) {\n                        const rowLevelInfo = dragDrop.dropContext.row.getRowLevelInfo(e.clientY), pointerHeight = (rowLevelInfo ?\n                            (rowLevelInfo.rowLevel.bottom -\n                                rowLevelInfo.rowLevel.top) :\n                            height);\n                        dragDrop.showDropPointer(dropContextOffsets.left + (align === 'right' ? width : 0) -\n                            dropPointerSize / 2, dropContextOffsets.top, dropPointerSize, pointerHeight);\n                    }\n                }\n                else if (align === 'top' || align === 'bottom') {\n                    const dropContextOffsets = GUIElement.getOffsets(dragDrop.dropContext), rowLevelInfo = dragDrop.dropContext.row\n                        .getRowLevelInfo(dropContextOffsets.top);\n                    if (rowLevelInfo &&\n                        ((rowLevelInfo.index === 0 && align === 'top') ||\n                            (rowLevelInfo.index ===\n                                rowLevelInfo.rowLevels.length - 1 &&\n                                align === 'bottom'))) {\n                        // Checks if a cell is dragged as a row\n                        // (only when a cell edge is on a row edge)\n                        dragDrop.onRowDrag(e, context);\n                    }\n                }\n                else {\n                    dragDrop.dropContext = void 0;\n                    dragDrop.hideDropPointer();\n                }\n            }\n            /**\n             * Sets appropriate drop context and refreshes the drop pointer\n             * position when a cell is dragged and a row context is detected.\n             *\n             * @param {PointerEvent} e\n             * Mouse event.\n             *\n             * @param {Row} mouseRowContext\n             * Row context.\n             */\n            onCellDragRowCtx(e, mouseRowContext) {\n                const dragDrop = this, dropPointerSize = dragDrop.options.dropPointerSize || 0, rowOffsets = GUIElement.getOffsets(mouseRowContext), rowLevelInfo = mouseRowContext.getRowLevelInfo(e.clientY);\n                let cell, cellOffsets;\n                if (rowLevelInfo) {\n                    for (let i = 0, iEnd = rowLevelInfo.rowLevel.cells.length; i < iEnd; ++i) {\n                        cell = rowLevelInfo.rowLevel.cells[i];\n                        cellOffsets = GUIElement.getOffsets(cell);\n                        const { width, height } = GUIElement\n                            .getDimFromOffsets(cellOffsets), dashOffsets = dragDrop.editMode.board.container\n                            .getBoundingClientRect(), levelHeight = (rowLevelInfo.rowLevel.bottom -\n                            rowLevelInfo.rowLevel.top);\n                        if (cell.isVisible) {\n                            if (height < 0.8 * levelHeight &&\n                                cellOffsets.left <= e.clientX &&\n                                cellOffsets.right >= e.clientX) {\n                                if (cellOffsets.top > e.clientY) {\n                                    // @ToDo - Mouse above the cell.\n                                }\n                                else if (cellOffsets.bottom < e.clientY) {\n                                    // Mouse below the cell.\n                                    dragDrop.showDropPointer(cellOffsets.left - dashOffsets.left, cellOffsets.top - dashOffsets.top + height, width, levelHeight - height);\n                                    dragDrop.dropPointer.align = 'nestedBottom';\n                                    dragDrop.dropContext = cell;\n                                }\n                                i = iEnd; // Stop the loop\n                            }\n                            else if ((i === 0 && cellOffsets.left > e.clientX) ||\n                                (i === iEnd - 1 && cellOffsets.right < e.clientX)) {\n                                if (cellOffsets.left > e.clientX) {\n                                    // @ToDo - Mouse on the cell left side.\n                                }\n                                else if (cellOffsets.right < e.clientX) {\n                                    // Mouse on the cell right side.\n                                    const pointerWidth = rowOffsets.right - cellOffsets.right;\n                                    dragDrop.showDropPointer(cellOffsets.left + ((i === 0 && cellOffsets.left > e.clientX) ?\n                                        0 :\n                                        width) - dropPointerSize / 2 - dashOffsets.left, cellOffsets.top - dashOffsets.top, pointerWidth > dropPointerSize ?\n                                        pointerWidth :\n                                        dropPointerSize, levelHeight || height);\n                                    dragDrop.dropPointer.align = 'right';\n                                    dragDrop.dropContext = cell;\n                                }\n                                i = iEnd; // Stop the loop\n                            }\n                        }\n                        else if (!cell.isVisible && cell === dragDrop.context) {\n                            // Element is not visible.\n                            dragDrop.dropContext = void 0;\n                            dragDrop.hideDropPointer();\n                        }\n                    }\n                }\n            }\n            /**\n             * Unmounts dropped cell and mounts it in a new position.\n             * When cell is dragged as a row also creates a new row\n             * and mounts cell there.\n             *\n             * @param {Cell} contextCell\n             * Cell used as a dragDrop context.\n             *\n             * @fires DragDrop#layoutChanged\n             */\n            onCellDragEnd(contextCell) {\n                const dragDrop = this, draggedCell = contextCell || dragDrop.context;\n                let dropContext = dragDrop.dropContext;\n                if (dragDrop.dropPointer.align && dropContext && draggedCell) {\n                    draggedCell.row.unmountCell(draggedCell);\n                    // Destroy row when empty.\n                    if (draggedCell.row.cells.length === 0) {\n                        draggedCell.row.destroy();\n                    }\n                    if ((dragDrop.dropPointer.align === 'top' ||\n                        dragDrop.dropPointer.align === 'bottom') &&\n                        dropContext.getType() === Globals.guiElementType.row) {\n                        dropContext = dropContext;\n                        const newRow = dropContext.layout.addRow({}, void 0, (dropContext.layout.getRowIndex(dropContext) || 0) +\n                            (dragDrop.dropPointer.align === 'bottom' ? 1 : 0));\n                        newRow.mountCell(draggedCell, 0);\n                    }\n                    else if (dragDrop.dropPointer.align === 'nestedBottom' &&\n                        dropContext.getType() === Globals.guiElementType.cell) {\n                        // Create nesting.\n                        const dropContextCell = dropContext;\n                        const row = dropContextCell.row;\n                        const dropContextCellIndex = row.getCellIndex(dropContextCell);\n                        row.unmountCell(dropContextCell);\n                        const newCell = row.addCell({\n                            id: GUIElement.getElementId('col-nested'),\n                            layout: {\n                                rows: [{}, {}]\n                            }\n                        }, void 0, dropContextCellIndex);\n                        if (newCell.nestedLayout) {\n                            newCell.nestedLayout.rows[0].mountCell(dropContextCell);\n                            newCell.nestedLayout.rows[1].mountCell(draggedCell);\n                        }\n                    }\n                    else if (dropContext.getType() === Globals.guiElementType.cell) {\n                        dropContext = dropContext;\n                        dropContext.row.mountCell(draggedCell, (dropContext.row.getCellIndex(dropContext) || 0) +\n                            (dragDrop.dropPointer.align === 'right' ? 1 : 0));\n                    }\n                }\n                // Call cellResize board event.\n                fireEvent(dragDrop.editMode.board, 'cellResize', { cell: draggedCell });\n                fireEvent(draggedCell.row, 'cellChange', { cell: draggedCell, row: draggedCell.row });\n                dragDrop.hideDropPointer();\n                draggedCell.show();\n                fireEvent(dragDrop.editMode, 'layoutChanged', {\n                    type: 'cellDragEnd',\n                    target: draggedCell,\n                    board: dragDrop.editMode.board\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        DragDrop.defaultOptions = {\n            enabled: true,\n            rowDropOffset: 30,\n            cellDropOffset: 30,\n            dropPointerSize: 16\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DragDrop;\n    });\n    _registerModule(_modules, 'Dashboards/Actions/Resizer.js', [_modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Core/Utilities.js']], function (EditGlobals, GUIElement, U) {\n        const { merge, addEvent, createElement, fireEvent, removeEvent } = U;\n        /**\n         * Class providing a resizing functionality.\n         */\n        class Resizer {\n            /* *\n            *\n            *  Static Properties\n            *\n            * */\n            /**\n             * Creates a new instance of the Resizer class based on JSON.\n             * @internal\n             */\n            static fromJSON(editMode, json) {\n                return new Resizer(editMode, json.options);\n            }\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            /**\n             * Constructor for the Resizer class.\n             *\n             * @param {EditMode} editMode\n             * The parent editMode reference.\n             *\n             * @param {Resizer.Options} options\n             * Options for the Resizer.\n             */\n            constructor(editMode, options) {\n                this.editMode = editMode;\n                this.options = merge({}, Resizer.defaultOptions, editMode.options.resize, options);\n                this.currentCell = void 0;\n                this.isX = this.options.type.indexOf('x') > -1;\n                this.isY = this.options.type.indexOf('y') > -1;\n                this.isActive = false;\n                this.startX = 0;\n                this.tempSiblingsWidth = [];\n                this.addSnaps();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add Snap - create snaps and add events.\n             *\n             */\n            addSnaps() {\n                const iconsURLPrefix = this.editMode.iconsURLPrefix;\n                const snapWidth = this.options.snap.width || 0;\n                const snapHeight = this.options.snap.height || 0;\n                const dashboardContainer = this.editMode.board.container;\n                // Right snap\n                this.snapRight = createElement('img', {\n                    className: EditGlobals.classNames.resizeSnap + ' ' +\n                        EditGlobals.classNames.resizeSnapX,\n                    src: iconsURLPrefix + 'resize-handle.svg'\n                }, {\n                    width: snapWidth + 'px',\n                    height: snapHeight + 'px',\n                    left: -9999 + 'px'\n                }, dashboardContainer);\n                // Bottom snap\n                this.snapBottom = createElement('img', {\n                    className: EditGlobals.classNames.resizeSnap + ' ' +\n                        EditGlobals.classNames.resizeSnapY,\n                    src: iconsURLPrefix + 'resize-handle.svg'\n                }, {\n                    width: snapWidth + 'px',\n                    height: snapHeight + 'px',\n                    top: -9999 + 'px',\n                    left: '0px'\n                }, dashboardContainer);\n                this.addResizeEvents();\n            }\n            /**\n             * Hide snaps\n             *\n             */\n            disableResizer() {\n                this.isActive = false;\n                this.currentDimension = void 0;\n                this.currentCell = void 0;\n                if (this.snapRight) {\n                    this.snapRight.style.left = '-9999px';\n                }\n                if (this.snapBottom) {\n                    this.snapBottom.style.left = '-9999px';\n                }\n            }\n            /**\n             * Update snap position.\n             *\n             * @param cell\n             * Cell reference\n             */\n            setSnapPositions(cell) {\n                // Set current cell\n                this.currentCell = cell;\n                // Set position of snaps\n                const cellOffsets = GUIElement.getOffsets(cell, this.editMode.board.container);\n                const left = cellOffsets.left || 0;\n                const top = cellOffsets.top || 0;\n                const { width, height } = GUIElement.getDimFromOffsets(cellOffsets);\n                const snapWidth = (this.options.snap.width || 0);\n                const snapHeight = (this.options.snap.height || 0);\n                if (this.snapRight) {\n                    this.snapRight.style.left = (left + width - snapWidth) + 'px';\n                    this.snapRight.style.top = top + (height / 2) - (snapHeight / 2) + 'px';\n                }\n                if (this.snapBottom) {\n                    this.snapBottom.style.top = (top + height - snapHeight) + 'px';\n                    this.snapBottom.style.left = (left + (width / 2) - (snapWidth / 2)) + 'px';\n                }\n            }\n            /**\n             * Method detects siblings and auto-width applied by flex. The resizer\n             * requires static widths for correct calculations, so we need to apply\n             * temporary width on siblings.\n             */\n            setTempWidthSiblings() {\n                const currentCell = this.currentCell;\n                if (currentCell) {\n                    const cellOffsets = GUIElement.getOffsets(currentCell), rowLevelInfo = currentCell.row.getRowLevelInfo(cellOffsets.top), rowLevelCells = (rowLevelInfo && rowLevelInfo.rowLevel.cells) || [];\n                    let cellContainer, cell;\n                    for (let i = 0, iEnd = rowLevelCells.length; i < iEnd; ++i) {\n                        cell = rowLevelCells[i];\n                        cellContainer = cell.container;\n                        // Do not convert width on the current cell and next siblings.\n                        if (cell === currentCell) {\n                            break;\n                        }\n                        if (cellContainer) {\n                            cellContainer.style.flex =\n                                '0 0 ' + cellContainer.offsetWidth + 'px';\n                            this.tempSiblingsWidth.push(cell);\n                        }\n                    }\n                }\n            }\n            /**\n             * Revert widths to auto.\n             */\n            revertSiblingsAutoWidth() {\n                const tempSiblingsWidth = this.tempSiblingsWidth;\n                let cellContainer, cellResize;\n                for (let i = 0, iEnd = tempSiblingsWidth.length; i < iEnd; ++i) {\n                    cellContainer = tempSiblingsWidth[i].container;\n                    if (cellContainer) {\n                        cellContainer.style.flex = '1 1 0%';\n                        cellResize = tempSiblingsWidth[i];\n                    }\n                }\n                this.tempSiblingsWidth = [];\n                // Call cellResize dashboard event.\n                if (cellResize) {\n                    fireEvent(this.editMode.board, 'cellResize', {\n                        cell: cellResize\n                    });\n                    fireEvent(cellResize.row, 'cellChange', {\n                        cell: cellResize,\n                        row: cellResize.row\n                    });\n                }\n            }\n            /**\n             * Add mouse events to snaps\n             *\n             */\n            addResizeEvents() {\n                const resizer = this;\n                let mouseDownSnapX, mouseDownSnapY, mouseMoveSnap, mouseUpSnap;\n                resizer.mouseDownSnapX = mouseDownSnapX = function (e) {\n                    resizer.isActive = true;\n                    resizer.currentDimension = 'x';\n                    resizer.editMode.hideToolbars(['row', 'cell']);\n                    resizer.setTempWidthSiblings();\n                    resizer.startX = e.clientX;\n                };\n                resizer.mouseDownSnapY = mouseDownSnapY = function () {\n                    resizer.isActive = true;\n                    resizer.currentDimension = 'y';\n                    resizer.editMode.hideToolbars(['row', 'cell']);\n                };\n                resizer.mouseMoveSnap = mouseMoveSnap = function (e) {\n                    if (resizer.isActive) {\n                        resizer.onMouseMove(e);\n                    }\n                };\n                resizer.mouseUpSnap = mouseUpSnap = function () {\n                    if (resizer.isActive) {\n                        resizer.isActive = false;\n                        resizer.currentDimension = void 0;\n                        resizer.revertSiblingsAutoWidth();\n                        resizer.editMode.showToolbars(['row', 'cell'], resizer.currentCell);\n                        if (resizer.currentCell) {\n                            resizer.setSnapPositions(resizer.currentCell);\n                        }\n                    }\n                };\n                // Add mouse events\n                addEvent(this.snapRight, 'mousedown', mouseDownSnapX);\n                addEvent(this.snapBottom, 'mousedown', mouseDownSnapY);\n                addEvent(document, 'mousemove', mouseMoveSnap);\n                addEvent(document, 'mouseup', mouseUpSnap);\n                // Touch events\n                // addEvent(snapX, 'touchstart', mouseDownSnapX);\n                // addEvent(snapY, 'touchstart', mouseDownSnapY);\n                // if (!rowContainer.hcEvents.mousemove) {\n                //     addEvent(rowContainer, 'touchmove', mouseMoveSnap);\n                //     addEvent(rowContainer, 'touchend', mouseUpSnap);\n                // }\n                const runReflow = () => {\n                    if (resizer.currentCell) {\n                        resizer.setSnapPositions(resizer.currentCell);\n                    }\n                };\n                if (typeof ResizeObserver === 'function') {\n                    this.resizeObserver = new ResizeObserver(runReflow);\n                    this.resizeObserver.observe(resizer.editMode.board.container);\n                }\n                else {\n                    const unbind = addEvent(window, 'resize', runReflow);\n                    addEvent(this, 'destroy', unbind);\n                }\n            }\n            /**\n             * General method used on resizing.\n             *\n             * @param {global.Event} e\n             * A mouse event.\n             *\n             */\n            onMouseMove(e) {\n                const currentCell = this.currentCell;\n                const cellContainer = currentCell && currentCell.container;\n                const currentDimension = this.currentDimension;\n                if (currentCell &&\n                    cellContainer &&\n                    !((currentCell.row.layout.board.editMode || {}).dragDrop || {})\n                        .isActive) {\n                    const cellOffsets = GUIElement.getOffsets(currentCell);\n                    const { width: parentRowWidth } = GUIElement.getDimFromOffsets(GUIElement.getOffsets(currentCell.row));\n                    // Resize width\n                    if (currentDimension === 'x') {\n                        const newWidth = (Math.min(e.clientX - cellOffsets.left, parentRowWidth) /\n                            parentRowWidth) *\n                            100 +\n                            '%';\n                        currentCell.setSize(newWidth);\n                        this.startX = e.clientX;\n                    }\n                    // Resize height\n                    if (currentDimension === 'y') {\n                        currentCell.setSize(void 0, e.clientY - cellOffsets.top);\n                    }\n                    // Call cellResize dashboard event.\n                    fireEvent(this.editMode.board, 'cellResize', {\n                        cell: currentCell\n                    });\n                    fireEvent(currentCell.row, 'cellChange', {\n                        cell: currentCell,\n                        row: currentCell.row\n                    });\n                    this.setSnapPositions(currentCell);\n                }\n            }\n            /**\n             * Destroy resizer\n             */\n            destroy() {\n                const snaps = ['snapRight', 'snapBottom'];\n                let snap;\n                // Unbind events\n                removeEvent(document, 'mousemove');\n                removeEvent(document, 'mouseup');\n                this.resizeObserver?.unobserve(this.editMode.board.container);\n                for (let i = 0, iEnd = snaps.length; i < iEnd; ++i) {\n                    snap = this[snaps[i]];\n                    // Unbind event\n                    removeEvent(snap, 'mousedown');\n                    // Destroy snap\n                    snap.remove();\n                }\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             * @internal\n             *\n             * @return {Resizer.JSON}\n             * Class JSON of this Resizer instance.\n             */\n            toJSON() {\n                const options = this.options;\n                return {\n                    $class: 'Dashboards.Action.Resizer',\n                    options: {\n                        enabled: options.enabled,\n                        styles: {\n                            minWidth: options.styles.minWidth,\n                            minHeight: options.styles.minHeight\n                        },\n                        type: options.type,\n                        snap: {\n                            width: options.snap.width,\n                            height: options.snap.height\n                        }\n                    }\n                };\n            }\n        }\n        Resizer.defaultOptions = {\n            enabled: true,\n            styles: {\n                minWidth: 20,\n                minHeight: 50\n            },\n            type: 'xy',\n            snap: {\n                width: 9,\n                height: 17\n            }\n        };\n\n        return Resizer;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/EditMode.js', [_modules['Dashboards/Layout/Cell.js'], _modules['Dashboards/Layout/CellHTML.js'], _modules['Dashboards/EditMode/EditGlobals.js'], _modules['Dashboards/EditMode/EditRenderer.js'], _modules['Dashboards/EditMode/Toolbar/CellEditToolbar.js'], _modules['Dashboards/EditMode/Toolbar/RowEditToolbar.js'], _modules['Dashboards/EditMode/SidebarPopup.js'], _modules['Dashboards/EditMode/EditContextMenu.js'], _modules['Dashboards/Actions/DragDrop.js'], _modules['Dashboards/Actions/Resizer.js'], _modules['Dashboards/EditMode/ConfirmationPopup.js'], _modules['Dashboards/Layout/GUIElement.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Layout/Layout.js'], _modules['Core/Utilities.js']], function (Cell, CellHTML, EditGlobals, EditRenderer, CellEditToolbar, RowEditToolbar, SidebarPopup, EditContextMenu, DragDrop, Resizer, ConfirmationPopup, GUIElement, Globals, Layout, U) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, css, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class EditMode {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            /**\n             * Edit mode constructor.\n             * @internal\n              *\n             * @param board\n             * Board instance\n             *\n             * @param options\n             * Edit mode options\n             */\n            constructor(board, options) {\n                /* *\n                *\n                *  Properties\n                *\n                * */\n                /**\n                 * @internal\n                 */\n                this.active = false;\n                /**\n                 * Whether the board is generated with custom HTML.\n                 */\n                this.customHTMLMode = false;\n                /**\n                 * URL from which the icons will be fetched.\n                 */\n                this.iconsURLPrefix = 'https://code.highcharts.com/dashboards/3.5.0/gfx/dashboards-icons/';\n                this.iconsURLPrefix =\n                    (options && options.iconsURLPrefix) || this.iconsURLPrefix;\n                this.options = merge(\n                // Default options.\n                {\n                    confirmationPopup: {\n                        close: {\n                            icon: this.iconsURLPrefix + 'close.svg'\n                        }\n                    },\n                    contextMenu: {\n                        icon: this.iconsURLPrefix + 'menu.svg'\n                    },\n                    dragDrop: {\n                        enabled: true\n                    },\n                    enabled: true,\n                    resize: {\n                        enabled: true\n                    },\n                    settings: {\n                        enabled: true\n                    },\n                    toolbars: {\n                        cell: {\n                            enabled: true\n                        },\n                        row: {\n                            enabled: true\n                        }\n                    },\n                    tools: {\n                        addComponentBtn: {\n                            enabled: true,\n                            icon: this.iconsURLPrefix + 'add.svg'\n                        }\n                    }\n                }, options || {});\n                this.board = board;\n                this.lang = merge({}, EditGlobals.lang, this.options.lang);\n                board.boardWrapper = board.container;\n                if (board.guiEnabled) {\n                    this.initLayout();\n                }\n                this.isInitialized = false;\n                this.isContextDetectionActive = false;\n                this.tools = {};\n                if (board.editModeEnabled) {\n                    this.customHTMLMode = !this.board.layoutsWrapper;\n                    this.contextPointer = {\n                        isVisible: false,\n                        element: createElement('div', {\n                            className: EditGlobals.classNames.contextDetectionPointer\n                        }, {}, board.container)\n                    };\n                    this.createTools();\n                    this.confirmationPopup = new ConfirmationPopup(board.container, this.iconsURLPrefix, this, this.options.confirmationPopup);\n                    // Create edit overlay.\n                    this.editOverlay = createElement('div', {\n                        className: EditGlobals.classNames.editOverlay\n                    }, {}, board.container);\n                    this.isEditOverlayActive = false;\n                    board.fullscreen = new Dashboards.Fullscreen(board);\n                    if (this.customHTMLMode) {\n                        board.container.classList.add(Globals.classNames.boardContainer);\n                    }\n                }\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Event to fire on click of the context button.\n             * @internal\n             */\n            onContextBtnClick() {\n                const editMode = this;\n                // Toggle context menu visibility.\n                if (editMode.tools.contextMenu) {\n                    if (!editMode.tools.contextMenu.isVisible) {\n                        editMode.tools.contextMenu\n                            .updatePosition(editMode.tools.contextButtonElement);\n                    }\n                    editMode.tools.contextMenu.setVisible(!editMode.tools.contextMenu.isVisible);\n                }\n            }\n            /**\n             * Activate or deactivate edit mode.\n             */\n            toggleEditMode() {\n                const editMode = this;\n                if (editMode.active) {\n                    editMode.deactivate();\n                }\n                else {\n                    editMode.activate();\n                }\n            }\n            /**\n             * Init the instance of edit mode.\n             * @internal\n             */\n            init() {\n                const editMode = this;\n                if (this.options.resize?.enabled && !editMode.customHTMLMode) {\n                    editMode.resizer = new Resizer(editMode, editMode.options.resize);\n                }\n                editMode.dragDrop = new DragDrop(editMode, editMode.options.dragDrop);\n                // Init rowToolbar.\n                if (editMode.options.toolbars?.row?.enabled &&\n                    !editMode.rowToolbar &&\n                    !editMode.customHTMLMode) {\n                    editMode.rowToolbar = new RowEditToolbar(editMode);\n                }\n                // Init cellToolbar.\n                if (editMode.options.toolbars?.cell?.enabled && !editMode.cellToolbar) {\n                    editMode.cellToolbar = new CellEditToolbar(editMode);\n                }\n                // Init Sidebar.\n                if (!editMode.sidebar) {\n                    editMode.sidebar = new SidebarPopup(this.board.container, this.iconsURLPrefix, editMode);\n                }\n                editMode.isInitialized = true;\n            }\n            /**\n             * Init events for edit mode.\n             * @internal\n             */\n            initEvents() {\n                const editMode = this, board = editMode.board;\n                if (this.customHTMLMode) {\n                    const length = board.mountedComponents.length;\n                    for (let i = 0, iEnd = length; i < iEnd; ++i) {\n                        editMode.setCellEvents(board.mountedComponents[i].cell);\n                    }\n                }\n                else {\n                    for (let i = 0, iEnd = board.layouts.length; i < iEnd; ++i) {\n                        editMode.setLayoutEvents(board.layouts[i]);\n                    }\n                }\n                addEvent(document, 'keydown', (e) => {\n                    if (e.key === 'Escape' && editMode.isActive()) {\n                        editMode.hideToolbars(['cell', 'row']);\n                        editMode.editCellContext = void 0;\n                        editMode.resizer?.disableResizer();\n                    }\n                });\n                if (editMode.cellToolbar) {\n                    // Stop context detection when mouse on cell toolbar.\n                    addEvent(editMode.cellToolbar.container, 'mouseenter', function () {\n                        editMode.stopContextDetection();\n                    });\n                    addEvent(editMode.cellToolbar.container, 'mouseleave', function () {\n                        editMode.isContextDetectionActive = true;\n                    });\n                }\n                if (editMode.rowToolbar) {\n                    // Stop context detection when mouse on row toolbar.\n                    addEvent(editMode.rowToolbar.container, 'mouseenter', function () {\n                        editMode.stopContextDetection();\n                    });\n                    addEvent(editMode.rowToolbar.container, 'mouseleave', function () {\n                        editMode.isContextDetectionActive = true;\n                    });\n                }\n                const elementForEvents = this.customHTMLMode ?\n                    board.container : board.layoutsWrapper;\n                addEvent(elementForEvents, 'mousemove', editMode.onDetectContext.bind(editMode));\n                addEvent(elementForEvents, 'click', editMode.onContextConfirm.bind(editMode));\n                addEvent(elementForEvents, 'mouseleave', () => {\n                    editMode.hideContextPointer();\n                });\n            }\n            /**\n             * Initialize the container for the layouts.\n             * @internal\n             *\n             */\n            initLayout() {\n                const board = this.board;\n                // Clear the container from any content.\n                board.container.innerHTML = '';\n                // Add container for the board.\n                board.container = createElement('div', {\n                    className: Globals.classNames.boardContainer\n                }, {}, board.boardWrapper);\n                // Create layouts wrapper.\n                board.layoutsWrapper = createElement('div', {\n                    className: Globals.classNames.layoutsWrapper\n                }, {}, board.container);\n                if (board.options.gui) {\n                    this.setLayouts(board.options.gui);\n                }\n            }\n            /**\n             * Creates a new layouts and adds it to the dashboard based on the options.\n             * @internal\n             *\n             * @param guiOptions\n             * The GUI options for the layout.\n             *\n             */\n            setLayouts(guiOptions) {\n                const board = this.board, layoutsOptions = guiOptions.layouts;\n                for (let i = 0, iEnd = layoutsOptions.length; i < iEnd; ++i) {\n                    board.layouts.push(new Layout(board, merge({}, guiOptions.layoutOptions, layoutsOptions[i])));\n                }\n            }\n            /**\n             * Set events for the layout.\n             * @internal\n             */\n            setLayoutEvents(layout) {\n                const editMode = this;\n                for (let j = 0, jEnd = layout.rows.length; j < jEnd; ++j) {\n                    const row = layout.rows[j];\n                    editMode.setRowEvents(row);\n                    for (let k = 0, kEnd = row.cells.length; k < kEnd; ++k) {\n                        editMode.setCellEvents(row.cells[k]);\n                    }\n                }\n            }\n            /**\n             * Set events for the row.\n             * @internal\n             */\n            setRowEvents(row) {\n                const editMode = this;\n                // Init dragDrop row events.\n                if (editMode.dragDrop) {\n                    const dragDrop = editMode.dragDrop;\n                    addEvent(row.container, 'mouseenter', function () {\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseRowContext = row;\n                        }\n                    });\n                    addEvent(row.container, 'mousemove', function (e) {\n                        if (dragDrop.isActive && e.target === row.container) {\n                            dragDrop.mouseRowContext = row;\n                        }\n                    });\n                    addEvent(row.container, 'mouseleave', function () {\n                        if (dragDrop.isActive && dragDrop.mouseRowContext === row) {\n                            dragDrop.mouseRowContext = void 0;\n                        }\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseRowContext = void 0;\n                        }\n                    });\n                }\n            }\n            /**\n             * Set events for the cell.\n             * @internal\n             */\n            setCellEvents(cell) {\n                const editMode = this;\n                if (CellHTML.isCellHTML(cell)) {\n                    addEvent(cell.container, 'mouseenter', function () {\n                        if (editMode.isContextDetectionActive) {\n                            editMode.mouseCellContext = cell;\n                        }\n                    });\n                }\n                else {\n                    if (cell.nestedLayout) {\n                        editMode.setLayoutEvents(cell.nestedLayout);\n                    }\n                    else if (editMode.cellToolbar && cell.container) {\n                        addEvent(cell.container, 'mouseenter', function () {\n                            if (editMode.isContextDetectionActive) {\n                                editMode.mouseCellContext = cell;\n                            }\n                        });\n                        // Init dragDrop cell events only when using layouts.\n                        if ((editMode.dragDrop || editMode.resizer)) {\n                            const dragDrop = editMode.dragDrop;\n                            addEvent(cell.container, 'mousemove', function (e) {\n                                if (dragDrop &&\n                                    dragDrop.isActive &&\n                                    e.target === cell.container) {\n                                    dragDrop.mouseCellContext = cell;\n                                    dragDrop.mouseRowContext = void 0;\n                                }\n                            });\n                            addEvent(cell.container, 'mouseleave', function () {\n                                if (dragDrop &&\n                                    dragDrop.isActive &&\n                                    dragDrop.mouseCellContext === cell) {\n                                    dragDrop.mouseCellContext = void 0;\n                                }\n                                if (editMode.isContextDetectionActive) {\n                                    editMode.mouseCellContext = void 0;\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * Activate the edit mode.\n             * @internal\n             */\n            activate() {\n                const editMode = this;\n                // Init edit mode.\n                if (!editMode.isInitialized) {\n                    editMode.init();\n                    editMode.initEvents();\n                }\n                // Set edit mode active class to dashboard.\n                editMode.board.container.classList.add(EditGlobals.classNames.editModeEnabled);\n                if (this.addComponentBtn) {\n                    this.addComponentBtn.style.display = 'block';\n                }\n                editMode.active = true;\n                editMode.isContextDetectionActive = true;\n            }\n            /**\n             * Deactivate the edit mode.\n             * @internal\n             */\n            deactivate() {\n                const editMode = this, dashboardCnt = editMode.board.container;\n                dashboardCnt.classList.remove(EditGlobals.classNames.editModeEnabled);\n                // Hide toolbars.\n                editMode.hideToolbars();\n                // Remove highlight from the context row if exists.\n                if (this.editCellContext && Cell.isCell(this.editCellContext)) {\n                    this.editCellContext.row?.setHighlight();\n                }\n                // TODO all buttons should be deactivated.\n                if (this.addComponentBtn) {\n                    this.addComponentBtn.style.display = 'none';\n                }\n                if (editMode.resizer) {\n                    editMode.resizer.disableResizer();\n                }\n                // Disable responsive width and restore elements to their original\n                // positions and sizes.\n                if (this.board.layoutsWrapper) {\n                    this.board.layoutsWrapper.style.width = '100%';\n                }\n                this.board.reflow();\n                editMode.active = false;\n                editMode.stopContextDetection();\n                this.editCellContext = void 0;\n                this.potentialCellContext = void 0;\n            }\n            /**\n             * Function to check whether the edit mode is activated.\n             * @internal\n             *\n             * @returns\n             * Whether the edit mode is activated.\n             */\n            isActive() {\n                return this.active;\n            }\n            /**\n             * Method for hiding edit toolbars.\n             * @internal\n             *\n             * @param toolbarTypes\n             * The array of toolbar names to hide ('cell', 'row', 'sidebar').\n             */\n            hideToolbars(toolbarTypes) {\n                const editMode = this, toolbarsToHide = toolbarTypes || ['cell', 'row', 'sidebar'];\n                for (let i = 0, iEnd = toolbarsToHide.length; i < iEnd; ++i) {\n                    switch (toolbarsToHide[i]) {\n                        case 'cell': {\n                            if (editMode.cellToolbar &&\n                                editMode.cellToolbar.isVisible) {\n                                editMode.cellToolbar.hide();\n                            }\n                            break;\n                        }\n                        case 'row': {\n                            if (editMode.rowToolbar && editMode.rowToolbar.isVisible) {\n                                editMode.rowToolbar.hide();\n                            }\n                            break;\n                        }\n                        case 'sidebar': {\n                            if (editMode.sidebar && editMode.sidebar.isVisible) {\n                                editMode.sidebar.hide();\n                            }\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Method for hiding edit toolbars.\n             * @internal\n             *\n             * @param toolbarTypes\n             * The array of toolbar names to hide ('cell', 'row', 'sidebar').\n             *\n             * @param currentCell\n             * The cell reference for toolbar.\n             *\n             */\n            showToolbars(toolbarTypes, currentCell) {\n                const editMode = this, toolbarsToShow = toolbarTypes || ['cell', 'row', 'sidebar'];\n                for (let i = 0, iEnd = toolbarsToShow.length; i < iEnd; ++i) {\n                    switch (toolbarsToShow[i]) {\n                        case 'cell': {\n                            if (currentCell && editMode.cellToolbar) {\n                                editMode.cellToolbar.showToolbar(currentCell);\n                            }\n                            break;\n                        }\n                        case 'row': {\n                            if (currentCell && currentCell.row && editMode.rowToolbar) {\n                                editMode.rowToolbar.showToolbar(currentCell.row);\n                            }\n                            break;\n                        }\n                        case 'sidebar': {\n                            if (editMode.sidebar && !editMode.sidebar.isVisible) {\n                                editMode.sidebar.show();\n                            }\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Creates the buttons such as `addComponent` button, context menu button\n             * and its container.\n             * @internal\n             */\n            createTools() {\n                const editMode = this;\n                const { board, options, tools } = editMode;\n                // Create tools container\n                tools.container = document.createElement('div');\n                tools.container.classList.add(EditGlobals.classNames.editTools);\n                if (board.layoutsWrapper) {\n                    // For the generated layout\n                    board.layoutsWrapper.parentNode.insertBefore(tools.container, board.layoutsWrapper);\n                }\n                else {\n                    // For the custom layout\n                    board.container.insertBefore(tools.container, board.container.firstChild);\n                }\n                // Create context menu button\n                if (options.contextMenu && options.contextMenu.enabled) {\n                    tools.contextButtonElement = EditRenderer.renderContextButton(tools.container, editMode);\n                    // Init contextMenu if doesn't exist.\n                    if (!editMode.tools.contextMenu) {\n                        editMode.tools.contextMenu = new EditContextMenu(editMode.board.container, editMode.options.contextMenu || {}, editMode);\n                    }\n                }\n                // Create add component button\n                if (options.tools?.addComponentBtn?.enabled &&\n                    options.toolbars?.cell?.enabled &&\n                    !this.customHTMLMode) {\n                    const addIconURL = options.tools.addComponentBtn.icon;\n                    this.addComponentBtn = EditRenderer.renderButton(tools.container, {\n                        className: EditGlobals.classNames.editToolsBtn,\n                        icon: addIconURL,\n                        text: this.lang.addComponent,\n                        callback: () => {\n                            // Sidebar trigger\n                            if (editMode.sidebar) {\n                                editMode.sidebar.show();\n                                editMode.setEditOverlay();\n                            }\n                        },\n                        style: {\n                            display: 'none'\n                        }\n                    });\n                }\n            }\n            /**\n             * Event fired when detecting context on drag&drop.\n             */\n            onDetectContext() {\n                const editMode = this;\n                if (!editMode.isActive() ||\n                    !editMode.isContextDetectionActive ||\n                    (!editMode.mouseCellContext && !editMode.mouseRowContext) ||\n                    (editMode.dragDrop || {}).isActive) {\n                    return;\n                }\n                let cellContext;\n                let rowContext;\n                if (editMode.mouseCellContext) {\n                    cellContext = editMode.mouseCellContext;\n                }\n                else if (editMode.mouseRowContext) {\n                    rowContext = editMode.mouseRowContext;\n                    cellContext = rowContext.layout.parentCell;\n                }\n                this.potentialCellContext = cellContext;\n                if (cellContext) {\n                    const cellContextOffsets = GUIElement\n                        .getOffsets(cellContext, editMode.board.container);\n                    const { width, height } = GUIElement\n                        .getDimFromOffsets(cellContextOffsets);\n                    editMode.showContextPointer(cellContextOffsets.left, cellContextOffsets.top, width, height);\n                }\n            }\n            /**\n             * Stops the context detection.\n             */\n            stopContextDetection() {\n                this.isContextDetectionActive = false;\n                if (this.dragDrop) {\n                    this.dragDrop.mouseCellContext = void 0;\n                }\n                this.mouseCellContext = void 0;\n                this.hideContextPointer();\n            }\n            /**\n             * Confirms the selected context.\n             */\n            onContextConfirm() {\n                if (this.isContextDetectionActive &&\n                    this.potentialCellContext &&\n                    this.editCellContext !== this.potentialCellContext) {\n                    this.setEditCellContext(this.potentialCellContext, this.editCellContext);\n                }\n            }\n            /**\n             * Sets the edit cell context.\n             * @internal\n             */\n            setEditCellContext(editCellContext, oldEditCellContext) {\n                const editMode = this;\n                const oldContext = oldEditCellContext;\n                if (CellHTML.isCellHTML(editCellContext) ||\n                    CellHTML.isCellHTML(oldContext)) {\n                    editMode.editCellContext = editCellContext;\n                    editMode.cellToolbar?.showToolbar(editCellContext);\n                }\n                else {\n                    const oldContextRow = oldContext?.row;\n                    editMode.editCellContext = editCellContext;\n                    editMode.showToolbars(['row', 'cell'], editCellContext);\n                    if (!oldContextRow || oldContextRow !== editCellContext.row) {\n                        if (oldContextRow) {\n                            // Remove highlight from the previous row.\n                            oldContextRow.setHighlight(true);\n                        }\n                        // Add highlight to the context row.\n                        if (editCellContext.row) {\n                            editCellContext.row.setHighlight();\n                        }\n                    }\n                    if (editMode.resizer) {\n                        editMode.resizer.setSnapPositions(editCellContext);\n                    }\n                }\n            }\n            /**\n             * Method for showing and positioning context pointer.\n             * @internal\n             */\n            showContextPointer(left, top, width, height) {\n                if (!this.contextPointer) {\n                    return;\n                }\n                this.contextPointer.isVisible = true;\n                css(this.contextPointer.element, {\n                    display: 'block',\n                    left: left + 'px',\n                    top: top + 'px',\n                    height: height + 'px',\n                    width: width + 'px'\n                });\n            }\n            /**\n             * Method for hiding context pointer.\n             * @internal\n             */\n            hideContextPointer() {\n                if (this.contextPointer?.isVisible) {\n                    this.contextPointer.isVisible = false;\n                    this.contextPointer.element.style.display = 'none';\n                }\n            }\n            /**\n             * Adds/Removes the edit mode overlay.\n             * @internal\n             *\n             * @param remove\n             * Whether the edit overlay should be removed.\n             */\n            setEditOverlay(remove) {\n                const editMode = this, cnt = editMode.editOverlay, isSet = cnt?.classList.contains(EditGlobals.classNames.editOverlayActive);\n                if (!remove && !isSet) {\n                    cnt?.classList.add(EditGlobals.classNames.editOverlayActive);\n                    editMode.isEditOverlayActive = true;\n                }\n                else if (remove && isSet) {\n                    cnt?.classList.remove(EditGlobals.classNames.editOverlayActive);\n                    editMode.isEditOverlayActive = false;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return EditMode;\n    });\n    _registerModule(_modules, 'Dashboards/EditMode/Fullscreen.js', [_modules['Core/Utilities.js'], _modules['Dashboards/Globals.js']], function (U, Globals) {\n        /* *\n         *\n         *  (c) 2009-2025 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent } = U;\n        class Fullscreen {\n            /* *\n            *\n            *  Constructor\n            *\n            * */\n            constructor(DashboardClass) {\n                this.isOpen = false;\n                this.board = DashboardClass;\n                // Add class to allow scroll element\n                this.board.boardWrapper.classList.add(Globals.classNamePrefix + '-fullscreen');\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Toggles displaying the board in fullscreen mode.\n             */\n            toggle() {\n                const fullscreen = this, isOpen = this.isOpen;\n                fullscreen[isOpen ? 'close' : 'open']();\n            }\n            /**\n             * Display board in fullscreen.\n             */\n            open() {\n                if (this.isOpen) {\n                    return;\n                }\n                const fullscreen = this, board = fullscreen.board;\n                // Handle exitFullscreen() method when user clicks 'Escape' button.\n                const unbindChange = addEvent(board.boardWrapper.ownerDocument, // Dashboard's document\n                'fullscreenchange', function () {\n                    if (fullscreen.isOpen) {\n                        fullscreen.isOpen = false;\n                        fullscreen.close();\n                    }\n                    else {\n                        fullscreen.isOpen = true;\n                        fullscreen.setButtonText();\n                    }\n                });\n                fullscreen.unbindFullscreenEvent = () => {\n                    unbindChange();\n                };\n                const promise = board.boardWrapper.requestFullscreen();\n                promise['catch'](() => {\n                    throw new Error('Full screen is not supported.');\n                });\n            }\n            /**\n             * Stops displaying the dashboard in fullscreen mode.\n             */\n            close() {\n                const fullscreen = this, board = fullscreen.board;\n                // Don't fire exitFullscreen() when user exited using 'Escape' button.\n                if (fullscreen.isOpen &&\n                    board.boardWrapper.ownerDocument instanceof Document) {\n                    void board.boardWrapper.ownerDocument.exitFullscreen();\n                }\n                // Unbind event as it's necessary only before exiting from fullscreen.\n                if (fullscreen.unbindFullscreenEvent) {\n                    fullscreen.unbindFullscreenEvent =\n                        fullscreen.unbindFullscreenEvent();\n                }\n                fullscreen.isOpen = false;\n                this.setButtonText();\n            }\n            /**\n             * Set the correct text depending of the fullscreen is on or of.\n             */\n            setButtonText() {\n                const editMode = this.board.editMode, contextMenu = editMode && editMode.tools.contextMenu, button = contextMenu && contextMenu.items.viewFullscreen;\n                if (button && button.innerElement) {\n                    const lang = editMode.lang;\n                    button.innerElement.innerHTML =\n                        (this.isOpen ? lang.exitFullscreen : lang.viewFullscreen) || '';\n                }\n            }\n        }\n\n        return Fullscreen;\n    });\n    _registerModule(_modules, 'masters/modules/layout.js', [_modules['Dashboards/Globals.js'], _modules['Dashboards/EditMode/EditMode.js'], _modules['Dashboards/EditMode/Fullscreen.js']], function (Globals, EditMode, Fullscreen) {\n\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        // Fill registries\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        const G = Globals;\n        G.EditMode = EditMode;\n        G.Fullscreen = Fullscreen;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Dashboards","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","EditGlobals","U","merge","createElement","defined","renderContextButton","parentNode","editMode","contextButton","contextMenuOptions","options","contextMenu","className","classNames","contextMenuBtn","onclick","event","stopPropagation","onContextBtnClick","icon","src","text","contextMenuBtnText","textContent","setAttribute","lang","accessibility","button","renderCollapseHeader","parentElement","headerBtn","name","showToggle","onchange","isEnabled","isNested","isStandalone","accordion","accordionStandaloneWrapper","collapsableContentHeader","header","accordionHeader","renderToggle","enabledOnOffLabels","id","value","headerIcon","accordionHeaderIcon","collapsedElement","addEventListener","content","classList","toggle","hiddenElement","accordionContent","standaloneElement","outerElement","renderSelect","renderText","title","isLabel","iconsURLPrefix","customSelect","dropdown","btn","dropdownButton","btnContent","dropdownButtonContent","iconURL","find","selectOptions","item","placeholder","dropdownPointer","dropdownIcon","dropdownContent","i","iEnd","length","renderSelectElement","option","callback","selectOption","selectOptionBtn","customSelectButton","add","langKey","labeledToggleWrapper","toggleContainer","type","role","ariaChecked","ariaLabel","off","toggleLabels","toggleWrapper","input","renderCheckbox","callbackFn","e","checked","slider","toggleSlider","preventDefault","on","textElem","labelFor","htmlFor","labelText","renderIcon","iconElem","style","mousedown","click","onmousedown","arguments","renderInput","toString","replace","target","renderTextarea","textarea","renderButton","getRendererFunction","select","collapse","checkbox","EditRenderer","MenuItem","constructor","menu","isActive","defaultOptions","container","setContainer","innerElement","setInnerElement","menuItem","itemsClassName","display","getValue","events","bind","update","activate","deactivate","viewFullscreen","fullScreen","board","fullscreen","MenuItemBindings","Menu","parent","isVisible","activeItems","items","initItems","itemsSchemas","itemSchema","itemConfig","optionsItems","push","setActiveItems","indexOf","j","jEnd","deactivateActiveItems","updateActiveItems","destroy","remove","css","iconURLPrefix","outline","outlineClassName","hide","setPosition","refreshOutline","x","y","guiElement","offset","guiElemCnt","toolbar","left","top","width","offsetWidth","height","offsetHeight","hideOutline","Cell","EditToolbar","GUIElement","H","isFirefox","fireEvent","objectEach","CellEditToolbar","getItemsConfig","dragDrop","enabled","cellEditToolbar","cell","isCell","onDragStart","settings","setEditOverlay","onCellOptions","menuDestroy","popup","confirmationPopup","show","confirmButton","onCellDestroy","context","cancelButton","closePopup","confirmDestroyCell","toolbars","customHTMLMode","filterOptionsAvailableInCustomHTMLMode","showToolbar","cellCnt","cellToolbar","cellOffsets","getOffsets","right","toolbarItems","sidebar","highlightCell","row","cellId","setHighlight","resetEditedCell","hideToolbars","resizer","disableResizer","cells","editedCell","filter","cellEditHighlight","dashboardCellEditHighlightActive","editToolbar","editToolbarCellOutline","editToolbarCell","editToolbarItem","RowEditToolbar","getMenuItemsConfig","rowEditToolbar","onRowDestroy","confirmDestroyRow","offsetX","rowCnt","rowToolbar","rowOffsets","rowWidth","clientWidth","clientHeight","onRowOptions","rowId","resetEditedRow","editedRow","editToolbarRowOutline","editToolbarRow","AST","addEvent","parentDiv","iconsURL","createPopupContainer","closeButton","addCloseButton","backgroundImage","match","forEach","eventName","closeButtonEvents","document","code","showPopup","toolbarClass","popupDiv","popupCloseButton","innerHTML","emptyHTML","removeAttribute","appendChild","BaseForm","close","cancelCallback","contentOptions","renderContent","contentContainer","popupContentContainer","popupContainer","marginTop","offsetTop","getBoundingClientRect","Math","abs","buttonContainer","popupButtonContainer","popupCancelBtn","popupConfirmBtn","call","ConfirmationPopup","error","closeSidebar","changedOptions","chartOptionsJSON","oldOptionsBuffer","waitingForConfirmation","component","sidebarMainContainer","editableOptions","getOptions","getEditableOptions","accordionContainer","accordionMenu","end","renderAccordion","accordionMenuButtonsContainer","confirmChanges","cancelChanges","updateOptions","propertyPath","currentChartOptionsLevel","currentOldChartOptionsBufferLevel","currentDataGridOptionsLevel","currentOldDataGridOptionsBufferLevel","pathLength","currentLevel","parsedValue","JSON","parse","key","realGridOptions","dataGrid","gridOptions","realChartOptions","chart","chartOptions","lastKey","renderNested","renderFunction","getEditableOptionValue","nestedOptions","accordionOptions","collapsedHeader","Object","keys","showCancelConfirmationPopup","oldOptions","discardChanges","confirmDiscardChanges","setTimeout","Globals","pick","Row","setContainerHeight","rowContainer","layout","rowElement","guiElementType","parentContainer","getElementById","parentContainerId","layoutOptions","rowClassName","getElementContainer","render","guiEnabled","attribs","element","elementId","setCells","cellElement","cellClassName","cellsElements","getElementsByClassName","addCell","HTMLElement","index","mountCell","setCellEvents","rowCells","unmountRow","rows","setSize","getCellIndex","nextCell","prevCell","insertBefore","nextSibling","splice","unmountCell","cellIndex","getVisibleCells","changeVisibility","setVisible","displayStyle","getVisibleRows","highlightClass","rowContextHighlight","getRowLevels","rowLevels","rowLevelsArray","k","kEnd","bottom","getRowLevelInfo","posY","rowLevelInfo","rowLevel","parentCell","layoutsWrapper","level","copyId","layoutClassName","setRows","rowsElements","addRow","mountRow","setRowEvents","layouts","nestedLayout","getRowIndex","nextRow","prevRow","rowIndex","CellHTML","AccordionMenu","Bindings","Layout","SidebarPopup","components","componentsList","getComponentsList","detectRightSidebar","layoutWrapper","removeClassNames","editSidebarShow","editSidebarRightShow","addClassNames","isRightSidebar","editSidebarRight","editCellContext","stopContextDetection","generateContent","renderHeader","addComponent","sidebarWrapper","editSidebarWrapper","renderAddComponentsList","getType","mountedComponent","gridElement","gridWrapper","editGridItems","onMouseMove","rect","clientX","clientY","removeEventListener","onMouseUp","dropContext","getElementId","newCell","onDrop","unbindLayoutChanged","settingsEnabled","isDirtyBox","unbind","setEditCellContext","onDropNewComponent","componentOptions","onCellDragEnd","componentPromise","isEditOverlayActive","showToolbars","setSnapPositions","isCellHTML","isContextDetectionActive","headerWrapper","editSidebarHeader","editSidebarTitle","componentTypes","componentList","componentName","prototype","getOptionsOnDrop","contains","includes","editSidebar","isCellType","html","EditContextMenu","initEvents","tools","contextButtonElement","tagName","visible","toggleEditMode","setValue","updatePosition","ctxButton","offsetLeft","contextMenuItem","inputElem","querySelector","ContextDetection","isGUIElementOnParentEdge","mouseContext","side","visibleElements","lastElementIndex","getContextLevel","sideOffset","overlappedLevels","getOverlappingLevels","divOffset","lastOverlappedLevel","floor","getContext","mouseCellContext","mouseCellContextOffsets","getDimFromOffsets","leftSideX","topSideY","getParentCell","DragDrop","mockElement","dragMock","dropPointer","align","showDropPointer","hideDropPointer","setMockElementPosition","mouseEvent","dashBoundingRect","onDrag","onDragEnd","dragEndCallback","draggedCell","cursor","onCellDrag","onRowDrag","onRowDragEnd","contextDetails","dropPointerSize","rowDropOffset","updateDropPointer","dropContextRowOffsets","draggedRow","cellDropOffset","onCellDragCellCtx","mouseRowContext","onCellDragRowCtx","dropContextOffsets","pointerHeight","dashOffsets","levelHeight","pointerWidth","contextCell","newRow","dropContextCell","dropContextCellIndex","removeEvent","Resizer","fromJSON","json","resize","currentCell","isX","isY","startX","tempSiblingsWidth","addSnaps","snapWidth","snap","snapHeight","dashboardContainer","snapRight","resizeSnap","resizeSnapX","snapBottom","resizeSnapY","addResizeEvents","currentDimension","setTempWidthSiblings","cellContainer","rowLevelCells","flex","revertSiblingsAutoWidth","cellResize","mouseDownSnapX","mouseDownSnapY","mouseMoveSnap","mouseUpSnap","runReflow","ResizeObserver","resizeObserver","observe","window","parentRowWidth","newWidth","min","snaps","unobserve","toJSON","$class","styles","minWidth","minHeight","active","addComponentBtn","boardWrapper","initLayout","isInitialized","editModeEnabled","contextPointer","contextDetectionPointer","createTools","editOverlay","Fullscreen","boardContainer","init","mountedComponents","setLayoutEvents","elementForEvents","onDetectContext","onContextConfirm","hideContextPointer","gui","setLayouts","guiOptions","layoutsOptions","dashboardCnt","reflow","potentialCellContext","toolbarTypes","toolbarsToHide","toolbarsToShow","editTools","firstChild","addIconURL","editToolsBtn","cellContext","rowContext","cellContextOffsets","showContextPointer","oldEditCellContext","oldContextRow","cnt","isSet","editOverlayActive","DashboardClass","isOpen","classNamePrefix","open","unbindChange","ownerDocument","setButtonText","unbindFullscreenEvent","promise","requestFullscreen","Error","Document","exitFullscreen","EditMode","G"],"mappings":"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"}