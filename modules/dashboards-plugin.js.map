{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Dashboards v1.2.1 (2024-01-10)\n *\n * (c) 2009-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n * */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('dashboards/modules/dashboards-plugin', ['dashboards'], function (Dashboards) {\n            factory(Dashboards);\n            factory.Dashboards = Dashboards;\n            return factory;\n        });\n    } else {\n        factory(typeof Dashboards !== 'undefined' ? Dashboards : undefined);\n    }\n}(function (Dashboards) {\n    'use strict';\n    var _modules = Dashboards ? Dashboards._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'DashboardsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Dashboards/Plugins/DataGridSyncHandlers.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* eslint-disable require-jsdoc, max-len */\n        const { addEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const configs = {\n            emitters: {\n                highlightEmitter: [\n                    'highlightEmitter',\n                    function () {\n                        if (this.type === 'DataGrid') {\n                            const { dataGrid, board } = this;\n                            if (board) {\n                                const { dataCursor: cursor } = board;\n                                const callbacks = [];\n                                if (!dataGrid) {\n                                    return;\n                                }\n                                callbacks.push(addEvent(dataGrid.container, 'dataGridHover', (e) => {\n                                    const table = this.connector && this.connector.table;\n                                    if (table) {\n                                        const row = e.row;\n                                        const cell = row.querySelector(`.highcharts-datagrid-cell[data-original-data=\"${row.dataset.rowXIndex}\"]`);\n                                        cursor.emitCursor(table, {\n                                            type: 'position',\n                                            row: parseInt(row.dataset.rowIndex, 10),\n                                            column: cell ? cell.dataset.columnName : void 0,\n                                            state: 'dataGrid.hoverRow'\n                                        });\n                                    }\n                                }));\n                                callbacks.push(addEvent(dataGrid.container, 'mouseout', () => {\n                                    const table = this.connector && this.connector.table;\n                                    if (table) {\n                                        cursor.emitCursor(table, {\n                                            type: 'position',\n                                            state: 'dataGrid.hoverOut'\n                                        });\n                                    }\n                                }));\n                                // Return a function that calls the callbacks\n                                return function () {\n                                    callbacks.forEach((callback) => callback());\n                                };\n                            }\n                        }\n                    }\n                ]\n            },\n            handlers: {\n                highlightHandler: [\n                    'highlightHandler',\n                    function () {\n                        const { board } = this;\n                        const handlCursor = (e) => {\n                            const cursor = e.cursor;\n                            if (cursor.type === 'position') {\n                                const { row } = cursor;\n                                const { dataGrid } = this;\n                                if (row !== void 0 && dataGrid) {\n                                    const highlightedDataRow = dataGrid.container\n                                        .querySelector(`.highcharts-datagrid-row[data-row-index=\"${row}\"]`);\n                                    if (highlightedDataRow) {\n                                        dataGrid.toggleRowHighlight(highlightedDataRow);\n                                        dataGrid.hoveredRow = highlightedDataRow;\n                                    }\n                                }\n                            }\n                        };\n                        const handleCursorOut = () => {\n                            const { dataGrid } = this;\n                            if (dataGrid) {\n                                dataGrid.toggleRowHighlight(void 0);\n                            }\n                        };\n                        const registerCursorListeners = () => {\n                            const { dataCursor: cursor } = board;\n                            if (!cursor) {\n                                return;\n                            }\n                            const table = this.connector && this.connector.table;\n                            if (!table) {\n                                return;\n                            }\n                            cursor.addListener(table.id, 'point.mouseOver', handlCursor);\n                            cursor.addListener(table.id, 'point.mouseOut', handleCursorOut);\n                        };\n                        const unregisterCursorListeners = () => {\n                            const cursor = board.dataCursor;\n                            const table = this.connector && this.connector.table;\n                            if (!table) {\n                                return;\n                            }\n                            cursor.addListener(table.id, 'point.mouseOver', handlCursor);\n                            cursor.addListener(table.id, 'point.mouseOut', handleCursorOut);\n                        };\n                        if (board) {\n                            registerCursorListeners();\n                            this.on('setConnector', () => unregisterCursorListeners());\n                            this.on('afterSetConnector', () => registerCursorListeners());\n                        }\n                    }\n                ],\n                extremesHandler: function () {\n                    const { board } = this;\n                    const handleChangeExtremes = (e) => {\n                        const cursor = e.cursor;\n                        if (cursor.type === 'position' &&\n                            this.dataGrid &&\n                            typeof cursor?.row === 'number') {\n                            const { row } = cursor;\n                            this.dataGrid.scrollToRow(row);\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor: cursor } = board;\n                        if (!cursor) {\n                            return;\n                        }\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.addListener(table.id, 'xAxis.extremes.min', handleChangeExtremes);\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        const { dataCursor: cursor } = board;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.removeListener(table.id, 'xAxis.extremes.min', handleChangeExtremes);\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        this.on('setConnector', () => unregisterCursorListeners());\n                        this.on('afterSetConnector', () => registerCursorListeners());\n                    }\n                },\n                visibilityHandler: function () {\n                    const component = this, { board } = component;\n                    const handleVisibilityChange = (e) => {\n                        const cursor = e.cursor, dataGrid = component.dataGrid;\n                        if (!(dataGrid && cursor.type === 'position' && cursor.column)) {\n                            return;\n                        }\n                        const columnName = cursor.column;\n                        dataGrid.update({\n                            columns: {\n                                [columnName]: {\n                                    show: cursor.state !== 'series.hide'\n                                }\n                            }\n                        });\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor: cursor } = board;\n                        if (!cursor) {\n                            return;\n                        }\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.addListener(table.id, 'series.show', handleVisibilityChange);\n                        cursor.addListener(table.id, 'series.hide', handleVisibilityChange);\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        const { dataCursor: cursor } = board;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.removeListener(table.id, 'series.show', handleVisibilityChange);\n                        cursor.removeListener(table.id, 'series.hide', handleVisibilityChange);\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        this.on('setConnector', () => unregisterCursorListeners());\n                        this.on('afterSetConnector', () => registerCursorListeners());\n                    }\n                }\n            }\n        };\n        const defaults = {\n            highlight: { emitter: configs.emitters.highlightEmitter, handler: configs.handlers.highlightHandler },\n            extremes: { handler: configs.handlers.extremesHandler },\n            visibility: { handler: configs.handlers.visibilityHandler }\n        };\n\n        return defaults;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/DataGridComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Data/Converters/DataConverter.js'], _modules['Dashboards/Plugins/DataGridSyncHandlers.js'], _modules['Core/Utilities.js']], function (Component, DataConverter, DataGridSyncHandlers, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        const { diffObjects, merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * DataGrid component for Highcharts Dashboards.\n         * @private\n         */\n        class DataGridComponent extends Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Default update function, if data grid has changed. This functionality can\n             * be replaced with the {@link DataGridComponent.DataGridOptions#onUpdate}\n             * option.\n             *\n             * @private\n             *\n             * @param e\n             * Related keyboard event of the change.\n             *\n             * @param connector\n             * Relate store of the change.\n             */\n            static onUpdate(e, connector) {\n                const inputElement = e.target;\n                if (inputElement) {\n                    const parentRow = inputElement\n                        .closest('.highcharts-datagrid-row');\n                    const cell = inputElement.closest('.highcharts-datagrid-cell');\n                    const converter = new DataConverter();\n                    if (parentRow &&\n                        parentRow instanceof HTMLElement &&\n                        cell &&\n                        cell instanceof HTMLElement) {\n                        const dataTableRowIndex = parentRow\n                            .dataset.rowIndex;\n                        const { columnName } = cell.dataset;\n                        if (dataTableRowIndex !== void 0 &&\n                            columnName !== void 0) {\n                            const table = connector.table;\n                            if (table) {\n                                let valueToSet = converter\n                                    .asGuessedType(inputElement.value);\n                                if (valueToSet instanceof Date) {\n                                    valueToSet = valueToSet.toString();\n                                }\n                                table.setCell(columnName, parseInt(dataTableRowIndex, 10), valueToSet);\n                            }\n                        }\n                    }\n                }\n            }\n            /** @private */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const dataGridOptions = JSON.parse(json.options.dataGridOptions || '');\n                const component = new DataGridComponent(cell, merge(options, {\n                    dataGridOptions,\n                    syncHandlers: DataGridComponent.syncHandlers\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options) {\n                options = merge(DataGridComponent.defaultOptions, options);\n                super(cell, options);\n                this.connectorListeners = [];\n                this.options = options;\n                this.type = 'DataGrid';\n                if (this.options.dataGridClassName) {\n                    this.contentElement.classList.add(this.options.dataGridClassName);\n                }\n                if (this.options.dataGridID) {\n                    this.contentElement.id = this.options.dataGridID;\n                }\n                this.sync = new DataGridComponent.Sync(this, this.syncHandlers);\n                this.dataGridOptions = (this.options.dataGridOptions ||\n                    {});\n                this.innerResizeTimeouts = [];\n                this.on('afterSetConnector', (e) => {\n                    this.disableEditingModifiedColumns(e.connector);\n                });\n            }\n            onTableChanged() {\n                if (this.dataGrid && !this.dataGrid?.cellInputEl) {\n                    this.dataGrid.update({ dataTable: this.filterColumns() });\n                }\n            }\n            /**\n             * Disable editing of the columns that are modified by the data modifier.\n             * @internal\n             *\n             * @param connector\n             * Attached connector\n             */\n            disableEditingModifiedColumns(connector) {\n                const options = this.getColumnOptions(connector);\n                this.dataGrid?.update({ columns: options });\n            }\n            /**\n             * Get the column options for the data grid.\n             * @internal\n             */\n            getColumnOptions(connector) {\n                const modifierOptions = connector.options.dataModifier;\n                if (!modifierOptions || modifierOptions.type !== 'Math') {\n                    return {};\n                }\n                const modifierColumns = modifierOptions.columnFormulas;\n                if (!modifierColumns) {\n                    return {};\n                }\n                const options = {};\n                for (let i = 0, iEnd = modifierColumns.length; i < iEnd; ++i) {\n                    const columnName = modifierColumns[i].column;\n                    options[columnName] = {\n                        editable: false\n                    };\n                }\n                return options;\n            }\n            /* *\n             *\n             *  Class methods\n             *\n             * */\n            /**\n             * Triggered on component initialization.\n             * @private\n             */\n            async load() {\n                this.emit({ type: 'load' });\n                await super.load();\n                if (this.connector &&\n                    !this.connectorListeners.length) {\n                    const connectorListeners = this.connectorListeners;\n                    // Reload the store when polling.\n                    connectorListeners.push(this.connector\n                        .on('afterLoad', (e) => {\n                        if (e.table && this.connector) {\n                            this.connector.table.setColumns(e.table.getColumns());\n                        }\n                    }));\n                    // Update the DataGrid when connector changed.\n                    connectorListeners.push(this.connector.table\n                        .on('afterSetCell', (e) => {\n                        const dataGrid = this.dataGrid;\n                        let shouldUpdateTheGrid = true;\n                        if (dataGrid) {\n                            const row = dataGrid.rowElements[e.rowIndex];\n                            let cells = [];\n                            if (row) {\n                                cells = Array.prototype.slice.call(row.childNodes);\n                            }\n                            cells.forEach((cell) => {\n                                if (cell.childElementCount > 0) {\n                                    const input = cell.childNodes[0], convertedInputValue = typeof e.cellValue === 'string' ?\n                                        input.value :\n                                        +input.value;\n                                    if (cell.dataset.columnName === e.columnName &&\n                                        convertedInputValue === e.cellValue) {\n                                        shouldUpdateTheGrid = false;\n                                    }\n                                }\n                            });\n                        }\n                        shouldUpdateTheGrid ? this.update({}) : void 0;\n                    }));\n                }\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            /** @private */\n            render() {\n                super.render();\n                if (!this.dataGrid) {\n                    this.dataGrid = this.constructDataGrid();\n                }\n                if (this.connector &&\n                    this.dataGrid &&\n                    this.dataGrid.dataTable.modified !== this.connector.table.modified) {\n                    this.dataGrid.update({ dataTable: this.filterColumns() });\n                }\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                this.setupConnectorUpdate();\n                return this;\n            }\n            /** @private */\n            resize(width, height) {\n                if (this.dataGrid) {\n                    super.resize(width, height);\n                }\n            }\n            async update(options) {\n                if (options.connector?.id !== this.connectorId) {\n                    const connectorListeners = this.connectorListeners;\n                    for (let i = 0, iEnd = connectorListeners.length; i < iEnd; ++i) {\n                        connectorListeners[i]();\n                    }\n                    connectorListeners.length = 0;\n                }\n                await super.update(options);\n                if (this.dataGrid) {\n                    this.filterAndAssignSyncOptions(DataGridSyncHandlers);\n                    this.dataGrid.update(this.options.dataGridOptions || {});\n                }\n                this.emit({ type: 'afterUpdate' });\n            }\n            /** @private */\n            constructDataGrid() {\n                if (DataGridComponent.DataGridConstructor) {\n                    const columnOptions = this.connector ?\n                        this.getColumnOptions(this.connector) :\n                        {};\n                    this.dataGrid = new DataGridComponent.DataGridConstructor(this.contentElement, {\n                        ...this.options.dataGridOptions,\n                        dataTable: this.options.dataGridOptions?.dataTable ||\n                            this.filterColumns(),\n                        columns: merge(columnOptions, this.options.dataGridOptions?.columns)\n                    });\n                    return this.dataGrid;\n                }\n                throw new Error('DataGrid not connected.');\n            }\n            setupConnectorUpdate() {\n                const { connector, dataGrid } = this;\n                if (connector && dataGrid) {\n                    dataGrid.on('cellClick', (e) => {\n                        if ('input' in e) {\n                            e.input.addEventListener('keyup', (keyEvent) => this.options.onUpdate(keyEvent, connector));\n                        }\n                    });\n                }\n            }\n            /**\n             * Based on the `visibleColumns` option, filter the columns of the table.\n             *\n             * @internal\n             */\n            filterColumns() {\n                const table = this.connector?.table.modified, visibleColumns = this.options.visibleColumns;\n                if (table) {\n                    // Show all columns if no visibleColumns is provided.\n                    if (!visibleColumns?.length) {\n                        return table;\n                    }\n                    const columnsToDelete = table\n                        .getColumnNames()\n                        .filter((columnName) => (visibleColumns?.length > 0 &&\n                        // Don't add columns that are not listed.\n                        !visibleColumns.includes(columnName)\n                    // Else show the other columns.\n                    ));\n                    // On a fresh table clone remove the columns that are not mapped.\n                    const filteredTable = table.clone();\n                    filteredTable.deleteColumns(columnsToDelete);\n                    return filteredTable;\n                }\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'DataGrid'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /** @private */\n            toJSON() {\n                const dataGridOptions = JSON.stringify(this.options.dataGridOptions);\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    options: {\n                        ...base.options,\n                        dataGridOptions\n                    }\n                };\n                this.emit({ type: 'toJSON', json });\n                return json;\n            }\n            /**\n             * Get the DataGrid component's options.\n             * @returns\n             * The JSON of DataGrid component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, DataGridComponent.defaultOptions),\n                    type: 'DataGrid'\n                };\n            }\n            /**\n             * Destroys the data grid component.\n             */\n            destroy() {\n                this.dataGrid?.containerResizeObserver.disconnect();\n                super.destroy();\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /** @private */\n        DataGridComponent.syncHandlers = DataGridSyncHandlers;\n        /** @private */\n        DataGridComponent.defaultOptions = merge(Component.defaultOptions, {\n            dataGridClassName: 'dataGrid-container',\n            dataGridID: 'dataGrid-' + uniqueKey(),\n            dataGridOptions: {},\n            editableOptions: [{\n                    name: 'connectorName',\n                    propertyPath: ['connector', 'id'],\n                    type: 'select'\n                }],\n            syncHandlers: DataGridSyncHandlers,\n            onUpdate: DataGridComponent.onUpdate\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataGridComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/DataGridPlugin.js', [_modules['Dashboards/Plugins/DataGridComponent.js']], function (DataGridComponent) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Karol Kolodziej\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects DataGrid with the Dashboard plugin.\n         *\n         * @param {Dashboards.DataGrid} dataGrid DataGrid core to connect.\n         */\n        function connectDataGrid(DataGridClass) {\n            DataGridComponent.DataGridConstructor = DataGridClass;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('DataGrid', DataGridComponent);\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e Plugin context provided by the Dashboard.\n         */\n        function onUnregister(e) {\n            const { Sync } = e;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGridCustom = {\n            connectDataGrid\n        };\n        const DataGridPlugin = {\n            custom: DataGridCustom,\n            name: 'DataGrid.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return DataGridPlugin;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/HighchartsSyncHandlers.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        /* eslint-disable require-jsdoc, max-len */\n        const { addEvent } = U;\n        /**\n         * Utility function that returns the first row index\n         * if the table has been modified by a range modifier\n         *\n         * @param {DataTable} table\n         * The table to get the offset from.\n             *\n         * @param {RangeModifierOptions} modifierOptions\n         * The modifier options to use\n         *\n         * @return {number}\n         * The row offset of the modified table.\n         */\n        function getModifiedTableOffset(table, modifierOptions) {\n            const { ranges } = modifierOptions;\n            if (ranges) {\n                const minRange = ranges.reduce((minRange, currentRange) => {\n                    if (currentRange.minValue > minRange.minValue) {\n                        minRange = currentRange;\n                    }\n                    return minRange;\n                }, ranges[0]);\n                const tableRowIndex = table.getRowIndexBy(minRange.column, minRange.minValue);\n                if (tableRowIndex) {\n                    return tableRowIndex;\n                }\n            }\n            return 0;\n        }\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const configs = {\n            emitters: {\n                highlightEmitter: [\n                    'highlightEmitter',\n                    function () {\n                        if (this.type === 'Highcharts') {\n                            const { chart, board } = this;\n                            if (board) {\n                                const { dataCursor: cursor } = board;\n                                this.on('afterRender', () => {\n                                    const table = this.connector && this.connector.table;\n                                    if (chart && chart.series && table) {\n                                        chart.series.forEach((series) => {\n                                            series.update({\n                                                point: {\n                                                    events: {\n                                                        // Emit table cursor\n                                                        mouseOver: function () {\n                                                            let offset = 0;\n                                                            const modifier = table.getModifier();\n                                                            if (modifier && modifier.options.type === 'Range') {\n                                                                offset = getModifiedTableOffset(table, modifier.options);\n                                                            }\n                                                            cursor.emitCursor(table, {\n                                                                type: 'position',\n                                                                row: offset + this.index,\n                                                                column: series.name,\n                                                                state: 'point.mouseOver'\n                                                            });\n                                                        },\n                                                        mouseOut: function () {\n                                                            let offset = 0;\n                                                            const modifier = table.getModifier();\n                                                            if (modifier && modifier.options.type === 'Range') {\n                                                                offset = getModifiedTableOffset(table, modifier.options);\n                                                            }\n                                                            cursor.emitCursor(table, {\n                                                                type: 'position',\n                                                                row: offset + this.index,\n                                                                column: series.name,\n                                                                state: 'point.mouseOut'\n                                                            });\n                                                        }\n                                                    }\n                                                }\n                                            });\n                                        });\n                                    }\n                                });\n                                // Return function that handles cleanup\n                                return function () {\n                                    if (chart && chart.series) {\n                                        chart.series.forEach((series) => {\n                                            series.update({\n                                                point: {\n                                                    events: {\n                                                        mouseOver: void 0,\n                                                        mouseOut: void 0\n                                                    }\n                                                }\n                                            });\n                                        });\n                                    }\n                                };\n                            }\n                        }\n                    }\n                ],\n                seriesVisibilityEmitter: function () {\n                    if (this.type === 'Highcharts') {\n                        const component = this;\n                        return this.on('afterRender', () => {\n                            const { chart, connector, board } = component;\n                            const table = connector && connector.table;\n                            if (table && // Has a connector\n                                board &&\n                                chart) {\n                                const { dataCursor: cursor } = board;\n                                const { series } = chart;\n                                series.forEach((series) => {\n                                    series.update({\n                                        events: {\n                                            show: function () {\n                                                cursor.emitCursor(table, {\n                                                    type: 'position',\n                                                    state: 'series.show',\n                                                    column: this.name\n                                                });\n                                            },\n                                            hide: function () {\n                                                cursor.emitCursor(table, {\n                                                    type: 'position',\n                                                    state: 'series.hide',\n                                                    column: this.name\n                                                });\n                                            }\n                                        }\n                                    });\n                                });\n                            }\n                        });\n                    }\n                },\n                extremesEmitter: function () {\n                    if (this.type === 'Highcharts') {\n                        const component = this;\n                        const callbacks = [];\n                        this.on('afterRender', () => {\n                            const { chart, connector, board } = component;\n                            const table = connector && connector.table;\n                            const { dataCursor: cursor } = board;\n                            if (table && chart) {\n                                const extremesEventHandler = (e) => {\n                                    const reset = !!e.resetSelection;\n                                    if ((!e.trigger || (e.trigger && e.trigger !== 'dashboards-sync')) && !reset) {\n                                        // TODO: investigate this type?\n                                        const axis = e.target;\n                                        // Prefer a series that's in a related table,\n                                        // but allow for other data\n                                        const seriesInTable = axis.series\n                                            .filter((series) => table.hasColumns([series.name]));\n                                        const [series] = seriesInTable.length ?\n                                            seriesInTable :\n                                            axis.series;\n                                        if (series) {\n                                            // Get the indexes of the first and last drawn points\n                                            const visiblePoints = series.points\n                                                .filter((point) => point.isInside || false);\n                                            const minCursorData = {\n                                                type: 'position',\n                                                state: `${axis.coll}.extremes.min`\n                                            };\n                                            const maxCursorData = {\n                                                type: 'position',\n                                                state: `${axis.coll}.extremes.max`\n                                            };\n                                            if (seriesInTable.length && axis.coll === 'xAxis' && visiblePoints.length) {\n                                                const columnName = axis.dateTime && table.hasColumns(['x']) ?\n                                                    'x' :\n                                                    series.name;\n                                                minCursorData.row = visiblePoints[0].index;\n                                                minCursorData.column = columnName;\n                                                maxCursorData.row = visiblePoints[visiblePoints.length - 1].index;\n                                                maxCursorData.column = columnName;\n                                            }\n                                            // Emit as lasting cursors\n                                            cursor.emitCursor(table, minCursorData, e, true).emitCursor(table, maxCursorData, e, true);\n                                        }\n                                    }\n                                };\n                                const addExtremesEvent = () => chart.axes.map((axis) => addEvent(axis, 'afterSetExtremes', extremesEventHandler));\n                                let addExtremesEventCallbacks = addExtremesEvent();\n                                const resetExtremesEvent = () => {\n                                    addExtremesEventCallbacks.forEach((callback) => {\n                                        callback();\n                                    });\n                                    addExtremesEventCallbacks = [];\n                                };\n                                const handleChartResetSelection = (e) => {\n                                    if (e.resetSelection) {\n                                        resetExtremesEvent();\n                                        cursor.emitCursor(table, {\n                                            type: 'position',\n                                            state: 'chart.zoomOut'\n                                        }, e);\n                                        addExtremesEventCallbacks.push(...addExtremesEvent());\n                                    }\n                                };\n                                callbacks.push(addEvent(chart, 'selection', handleChartResetSelection));\n                                callbacks.push(() => {\n                                    cursor.remitCursor(table.id, {\n                                        type: 'position',\n                                        state: 'xAxis.extremes.min'\n                                    });\n                                    cursor.remitCursor(table.id, {\n                                        type: 'position',\n                                        state: 'xAxis.extremes.max'\n                                    });\n                                    resetExtremesEvent();\n                                });\n                            }\n                        });\n                        // Return cleanup\n                        return function () {\n                            // Call back the cleanup callbacks\n                            callbacks.forEach((callback) => callback());\n                        };\n                    }\n                }\n            },\n            handlers: {\n                seriesVisibilityHandler: function () {\n                    const component = this;\n                    const { board } = this;\n                    const findSeries = (seriesArray, name) => {\n                        for (const series of seriesArray) {\n                            if (series.name === name) {\n                                return series;\n                            }\n                        }\n                    };\n                    const handleShow = (e) => {\n                        const chart = component.chart;\n                        if (!chart) {\n                            return;\n                        }\n                        if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                            const series = findSeries(chart.series, e.cursor.column);\n                            if (series) {\n                                series.setVisible(true, true);\n                            }\n                        }\n                    };\n                    const handleHide = (e) => {\n                        const chart = component.chart;\n                        if (!chart) {\n                            return;\n                        }\n                        if (e.cursor.type === 'position' && e.cursor.column !== void 0) {\n                            const series = findSeries(chart.series, e.cursor.column);\n                            if (series) {\n                                series.setVisible(false, true);\n                            }\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor } = board;\n                        if (!dataCursor) {\n                            return;\n                        }\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        dataCursor.addListener(table.id, 'series.show', handleShow);\n                        dataCursor.addListener(table.id, 'series.hide', handleHide);\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        if (table) {\n                            board.dataCursor.removeListener(table.id, 'series.show', handleShow);\n                            board.dataCursor.removeListener(table.id, 'series.hide', handleHide);\n                        }\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        this.on('setConnector', () => unregisterCursorListeners());\n                        this.on('afterSetConnector', () => registerCursorListeners());\n                    }\n                },\n                highlightHandler: function () {\n                    const { chart, board } = this;\n                    const handleCursor = (e) => {\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        let offset = 0;\n                        const modifier = table.getModifier();\n                        if (modifier && modifier.options.type === 'Range') {\n                            offset = getModifiedTableOffset(table, modifier.options);\n                        }\n                        if (chart && chart.series.length) {\n                            const cursor = e.cursor;\n                            if (cursor.type === 'position') {\n                                let [series] = chart.series;\n                                // #20133 - Highcharts dashboards don't sync\n                                // tooltips when charts have multiple series\n                                if (chart.series.length > 1 && cursor.column) {\n                                    const relatedSeries = chart.series.filter((series) => series.name === cursor.column);\n                                    if (relatedSeries.length > 0) {\n                                        [series] = relatedSeries;\n                                    }\n                                }\n                                if (series?.visible && cursor.row !== void 0) {\n                                    const point = series.points[cursor.row - offset], useSharedTooltip = chart.tooltip?.shared;\n                                    if (point) {\n                                        const hoverPoint = chart.hoverPoint, hoverSeries = hoverPoint?.series ||\n                                            chart.hoverSeries, points = chart.pointer.getHoverData(point, hoverSeries, chart.series, true, true);\n                                        chart.tooltip && chart.tooltip.refresh(useSharedTooltip ?\n                                            points.hoverPoints : point);\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    const handleCursorOut = () => {\n                        if (chart && chart.series.length) {\n                            chart.tooltip && chart.tooltip.hide();\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor: cursor } = board;\n                        // @todo wrap in a listener on component.update with\n                        // connector change\n                        if (cursor) {\n                            const table = this.connector && this.connector.table;\n                            if (table) {\n                                cursor.addListener(table.id, 'point.mouseOver', handleCursor);\n                                cursor.addListener(table.id, 'dataGrid.hoverRow', handleCursor);\n                                cursor.addListener(table.id, 'point.mouseOut', handleCursorOut);\n                                cursor.addListener(table.id, 'dataGrid.hoverOut', handleCursorOut);\n                            }\n                        }\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        if (table) {\n                            board.dataCursor.removeListener(table.id, 'point.mouseOver', handleCursor);\n                            board.dataCursor.removeListener(table.id, 'dataGrid.hoverRow', handleCursor);\n                            board.dataCursor.removeListener(table.id, 'point.mouseOut', handleCursorOut);\n                            board.dataCursor.removeListener(table.id, 'dataGrid.hoverOut', handleCursorOut);\n                        }\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        this.on('setConnector', () => unregisterCursorListeners());\n                        this.on('afterSetConnector', () => registerCursorListeners());\n                    }\n                },\n                extremesHandler: function () {\n                    const { chart, board } = this;\n                    if (chart && board && chart.zooming?.type) {\n                        const dimensions = chart.zooming.type.split('')\n                            .map((c) => c + 'Axis');\n                        dimensions.forEach((dimension) => {\n                            const callbacks = [];\n                            const handleUpdateExtremes = (e) => {\n                                const { cursor, event } = e;\n                                if (cursor.type === 'position') {\n                                    const eventTarget = event && event.target;\n                                    if (eventTarget && chart) {\n                                        const axes = chart[dimension];\n                                        let didZoom = false;\n                                        axes.forEach((axis) => {\n                                            if (eventTarget.coll === axis.coll &&\n                                                eventTarget !== axis &&\n                                                eventTarget.min !== null &&\n                                                eventTarget.max !== null && (axis.max !== eventTarget.max ||\n                                                axis.min !== eventTarget.min)) {\n                                                axis.setExtremes(eventTarget.min, eventTarget.max, false, void 0, {\n                                                    trigger: 'dashboards-sync'\n                                                });\n                                                didZoom = true;\n                                            }\n                                        });\n                                        if (didZoom && !chart.resetZoomButton) {\n                                            chart.showResetZoom();\n                                        }\n                                        chart.redraw();\n                                    }\n                                }\n                            };\n                            const addCursorListeners = () => {\n                                const { dataCursor: cursor } = board;\n                                const { connector } = this;\n                                if (connector) {\n                                    const { table } = connector;\n                                    cursor.addListener(table.id, `${dimension}.extremes.min`, handleUpdateExtremes);\n                                    cursor.addListener(table.id, `${dimension}.extremes.max`, handleUpdateExtremes);\n                                    const handleChartZoomOut = () => {\n                                        chart.zoomOut();\n                                        setTimeout(() => {\n                                            // Workaround for zoom button not being removed\n                                            const resetZoomButtons = this.element\n                                                .querySelectorAll('.highcharts-reset-zoom');\n                                            resetZoomButtons.forEach((button) => {\n                                                button.remove();\n                                            });\n                                        });\n                                    };\n                                    cursor.addListener(table.id, 'chart.zoomOut', handleChartZoomOut);\n                                    callbacks.push(() => {\n                                        cursor.removeListener(table.id, `${dimension}.extremes.min`, handleUpdateExtremes);\n                                        cursor.removeListener(table.id, `${dimension}.extremes.max`, handleUpdateExtremes);\n                                        cursor.removeListener(table.id, 'chart.zoomOut', handleChartZoomOut);\n                                    });\n                                }\n                            };\n                            const unregisterCursorListeners = () => {\n                                callbacks.forEach((callback) => callback());\n                            };\n                            if (board) {\n                                addCursorListeners();\n                                this.on('setConnector', () => unregisterCursorListeners());\n                                this.on('afterSetConnector', () => addCursorListeners());\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        const defaults = {\n            extremes: { emitter: configs.emitters.extremesEmitter, handler: configs.handlers.extremesHandler },\n            highlight: { emitter: configs.emitters.highlightEmitter, handler: configs.handlers.highlightHandler },\n            visibility: { emitter: configs.emitters.seriesVisibilityEmitter, handler: configs.handlers.seriesVisibilityHandler }\n        };\n\n        return defaults;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/HighchartsComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Plugins/HighchartsSyncHandlers.js'], _modules['Core/Utilities.js']], function (Component, DataConverter, DataTable, Globals, HighchartsSyncHandlers, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Gøran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sebastian Bochan\n         *  - Sophie Bremer\n         *\n         * */\n        const { addEvent, createElement, diffObjects, isString, merge, splat, uniqueKey, isObject } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a Highcharts component.\n         *\n         */\n        class HighchartsComponent extends Component {\n            /* *\n             *\n             *  Static functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the Highcharts component.\n             *\n             * @returns\n             * Highcharts component based on config from JSON.\n             *\n             * @private\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const chartOptions = JSON.parse(json.options.chartOptions || '{}');\n                // const store = json.store ? DataJSON.fromJSON(json.store) : void 0;\n                const component = new HighchartsComponent(cell, merge(options, {\n                    chartOptions,\n                    // Highcharts, // TODO: Find a solution\n                    // store: store instanceof DataConnector ? store : void 0,\n                    // Get from static registry:\n                    syncHandlers: HighchartsComponent.syncHandlers\n                }));\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a Highcharts component in the cell.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options) {\n                options = merge(HighchartsComponent.defaultOptions, options);\n                super(cell, options);\n                this.options = options;\n                this.chartConstructor = this.options.chartConstructor;\n                this.type = 'Highcharts';\n                this.chartContainer = createElement('figure', void 0, void 0, this.contentElement, true);\n                this.setOptions();\n                this.sync = new HighchartsComponent.Sync(this, this.syncHandlers);\n                this.chartOptions = merge((this.options.chartOptions ||\n                    { chart: {} }), {\n                    tooltip: {} // Temporary fix for #18876\n                });\n                if (this.connector) {\n                    // reload the store when polling\n                    this.connector.on('afterLoad', (e) => {\n                        if (e.table && this.connector) {\n                            this.connector.table.setColumns(e.table.getColumns());\n                        }\n                    });\n                }\n                this.innerResizeTimeouts = [];\n            }\n            onTableChanged() {\n                this.updateSeries();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            async load() {\n                this.emit({ type: 'load' });\n                await super.load();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            render() {\n                const hcComponent = this;\n                super.render();\n                hcComponent.chart = hcComponent.getChart();\n                hcComponent.updateSeries();\n                this.sync.start();\n                hcComponent.emit({ type: 'afterRender' });\n                hcComponent.setupConnectorUpdate();\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                while (this.innerResizeTimeouts.length) {\n                    const timeoutID = this.innerResizeTimeouts.pop();\n                    if (timeoutID) {\n                        clearTimeout(timeoutID);\n                    }\n                }\n                this.innerResizeTimeouts.push(setTimeout(() => {\n                    if (this.chart) {\n                        this.chart.setSize(null, this.contentElement.clientHeight, false);\n                    }\n                }, 33));\n                return this;\n            }\n            /**\n             * Adds call update value in store, when chart's point is updated.\n             *\n             * @private\n             * */\n            setupConnectorUpdate() {\n                const { connector: store, chart } = this;\n                if (store && chart && this.options.allowConnectorUpdate) {\n                    chart.series.forEach((series) => {\n                        series.points.forEach((point) => {\n                            addEvent(point, 'drag', () => {\n                                this.onChartUpdate(point, store);\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Internal method for handling option updates.\n             *\n             * @private\n             */\n            setOptions() {\n                if (this.options.chartClassName) {\n                    this.chartContainer.classList.add(this.options.chartClassName);\n                }\n                if (this.options.chartID) {\n                    this.chartContainer.id = this.options.chartID;\n                }\n            }\n            /**\n             * Update the store, when the point is being dragged.\n             * @param  {Point} point Dragged point.\n             * @param  {Component.ConnectorTypes} store Connector to update.\n             */\n            onChartUpdate(point, store) {\n                const table = store.table, columnName = point.series.name, rowNumber = point.index, converter = new DataConverter(), valueToSet = converter.asNumber(point.y);\n                table.setCell(columnName, rowNumber, valueToSet);\n            }\n            /**\n             * Handles updating via options.\n             * @param options\n             * The options to apply.\n             *\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options, false);\n                this.setOptions();\n                this.filterAndAssignSyncOptions(HighchartsSyncHandlers);\n                if (this.chart) {\n                    this.chart.update(merge(this.options.chartOptions) || {});\n                }\n                this.emit({ type: 'afterUpdate' });\n                shouldRerender && this.render();\n            }\n            /**\n             * Updates chart's series when the data table is changed.\n             *\n             * @private\n             */\n            updateSeries() {\n                // Heuristically create series from the connector dataTable\n                if (this.chart && this.connector) {\n                    this.presentationTable = this.presentationModifier ?\n                        this.connector.table.modified.clone() :\n                        this.connector.table;\n                    const { id: storeTableID } = this.connector.table;\n                    const { chart } = this;\n                    if (this.presentationModifier) {\n                        this.presentationTable = this.presentationModifier\n                            .modifyTable(this.presentationTable).modified;\n                    }\n                    const table = this.presentationTable, modifierOptions = table.getModifier()?.options;\n                    // Names/aliases that should be mapped to xAxis values\n                    const columnNames = table.modified.getColumnNames();\n                    const columnAssignment = this.options.columnAssignment ||\n                        this.getDefaultColumnAssignment(columnNames);\n                    const xKeyMap = {};\n                    this.emit({ type: 'afterPresentationModifier', table: table });\n                    // Remove series names that match the xKeys\n                    const seriesNames = table.modified.getColumnNames()\n                        .filter((name) => {\n                        const isVisible = this.activeGroup ?\n                            this.activeGroup\n                                .getSharedState()\n                                .getColumnVisibility(name) !== false :\n                            true;\n                        if (!isVisible || !columnAssignment[name]) {\n                            return false;\n                        }\n                        if (columnAssignment[name] === 'x') {\n                            xKeyMap[name] = name;\n                            return false;\n                        }\n                        return true;\n                    });\n                    // create empty series for mapping custom props of data\n                    Object.keys(columnAssignment).forEach(function (key) {\n                        if (isObject(columnAssignment[key])) {\n                            seriesNames.push(key);\n                        }\n                    });\n                    // Create the series or get the already added series\n                    const seriesList = seriesNames.map((seriesName, index) => {\n                        let i = 0;\n                        while (i < chart.series.length) {\n                            const series = chart.series[i];\n                            const seriesFromConnector = series.options.id === `${storeTableID}-series-${index}`;\n                            const existingSeries = seriesNames.indexOf(series.name) !== -1;\n                            i++;\n                            if (existingSeries && seriesFromConnector) {\n                                return series;\n                            }\n                            if (!existingSeries &&\n                                seriesFromConnector) {\n                                series.destroy();\n                            }\n                        }\n                        // Disable dragging on series, which were created out of a\n                        // columns which are created by MathModifier.\n                        const shouldBeDraggable = !(modifierOptions?.type === 'Math' &&\n                            modifierOptions\n                                .columnFormulas?.some((formula) => formula.column === seriesName));\n                        const seriesOptions = {\n                            name: seriesName,\n                            id: `${storeTableID}-series-${index}`,\n                            dragDrop: {\n                                draggableY: shouldBeDraggable\n                            }\n                        };\n                        const relatedSeries = chart.series.find((series) => series.name === seriesName);\n                        if (relatedSeries) {\n                            relatedSeries.update(seriesOptions, false);\n                            return relatedSeries;\n                        }\n                        return chart.addSeries(seriesOptions, false);\n                    });\n                    // Insert the data\n                    seriesList.forEach((series) => {\n                        const xKey = Object.keys(xKeyMap)[0], isSeriesColumnMap = isObject(columnAssignment[series.name]), pointColumnMapValues = [];\n                        if (isSeriesColumnMap) {\n                            const pointColumns = columnAssignment[series.name];\n                            Object.keys(pointColumns).forEach((key) => {\n                                pointColumnMapValues.push(pointColumns[key]);\n                            });\n                        }\n                        const columnKeys = isSeriesColumnMap ?\n                            [xKey].concat(pointColumnMapValues) : [xKey, series.name];\n                        const seriesTable = new DataTable({\n                            columns: table.modified.getColumns(columnKeys)\n                        });\n                        if (!isSeriesColumnMap) {\n                            seriesTable.renameColumn(series.name, 'y');\n                        }\n                        if (xKey) {\n                            seriesTable.renameColumn(xKey, 'x');\n                        }\n                        const seriesData = seriesTable.getRowObjects().reduce((arr, row) => {\n                            if (isSeriesColumnMap) {\n                                arr.push([row.x].concat(pointColumnMapValues.map(function (value) {\n                                    return row[value];\n                                })));\n                            }\n                            else {\n                                arr.push([row.x, row.y]);\n                            }\n                            return arr;\n                        }, []);\n                        series.setData(seriesData);\n                    });\n                }\n            }\n            /**\n             * Destroy chart and create a new one.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            getChart() {\n                return this.chart || this.createChart();\n            }\n            /**\n             * Creates default mapping when columnAssignment is not declared.\n             * @param  { Array<string>} columnNames all columns returned from dataTable.\n             *\n             * @returns\n             * The record of mapping\n             *\n             * @private\n             *\n             */\n            getDefaultColumnAssignment(columnNames = []) {\n                const defaultColumnAssignment = {};\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    defaultColumnAssignment[columnNames[i]] = 'y';\n                    if (i === 0) {\n                        const firstColumnValues = this.presentationTable?.getColumn(columnNames[i], true);\n                        if (firstColumnValues && isString(firstColumnValues[0])) {\n                            defaultColumnAssignment[columnNames[i]] = 'x';\n                        }\n                    }\n                }\n                return defaultColumnAssignment;\n            }\n            /**\n             * Creates chart.\n             *\n             * @returns\n             * The chart.\n             *\n             * @private\n             *\n             */\n            createChart() {\n                const charter = HighchartsComponent.charter || Globals.win.Highcharts;\n                if (!this.chartConstructor) {\n                    this.chartConstructor = 'chart';\n                }\n                const Factory = charter[this.chartConstructor];\n                if (Factory) {\n                    try {\n                        if (this.chartConstructor === 'chart') {\n                            return charter.Chart.chart(this.chartContainer, this.chartOptions);\n                        }\n                        return new Factory(this.chartContainer, this.chartOptions);\n                    }\n                    catch {\n                        throw new Error('The Highcharts component is misconfigured: `' +\n                            this.cell.id + '`');\n                    }\n                }\n                if (typeof charter.chart !== 'function') {\n                    throw new Error('Chart constructor not found');\n                }\n                return this.chart;\n            }\n            /**\n             * Registers events from the chart options to the callback register.\n             *\n             * @private\n             */\n            registerChartEvents() {\n                if (this.chart && this.chart.options) {\n                    const options = this.chart.options;\n                    const allEvents = [\n                        'chart',\n                        'series',\n                        'yAxis',\n                        'xAxis',\n                        'colorAxis',\n                        'annotations',\n                        'navigation'\n                    ].map((optionKey) => {\n                        let seriesOrAxisOptions = options[optionKey] || {};\n                        if (!Array.isArray(seriesOrAxisOptions) &&\n                            seriesOrAxisOptions.events) {\n                            seriesOrAxisOptions = [seriesOrAxisOptions];\n                        }\n                        if (seriesOrAxisOptions &&\n                            typeof seriesOrAxisOptions === 'object' &&\n                            Array.isArray(seriesOrAxisOptions)) {\n                            return seriesOrAxisOptions.reduce((acc, seriesOrAxis, i) => {\n                                if (seriesOrAxis && seriesOrAxis.events) {\n                                    acc[seriesOrAxis.id || `${optionKey}-${i}`] = seriesOrAxis.events;\n                                }\n                                return acc;\n                            }, {}) || {};\n                        }\n                        return {};\n                    });\n                    allEvents.forEach((options) => {\n                        Object.keys(options).forEach((key) => {\n                            const events = options[key];\n                            Object.keys(events).forEach((callbackKey) => {\n                                this.callbackRegistry.addCallback(`${key}-${callbackKey}`, {\n                                    type: 'seriesEvent',\n                                    func: events[callbackKey]\n                                });\n                            });\n                        });\n                    });\n                }\n            }\n            setConnector(connector) {\n                const chart = this.chart;\n                if (this.connector &&\n                    chart &&\n                    chart.series &&\n                    this.connector.table.id !== connector?.table.id) {\n                    const storeTableID = this.connector.table.id;\n                    for (let i = chart.series.length - 1; i >= 0; i--) {\n                        const series = chart.series[i];\n                        if (series.options.id?.indexOf(storeTableID) !== -1) {\n                            series.remove(false);\n                        }\n                    }\n                }\n                super.setConnector(connector);\n                return this;\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'Highcharts',\n                    chartOptions: {\n                        chart: {\n                            animation: false,\n                            type: 'column',\n                            zooming: {}\n                        }\n                    }\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @private\n             */\n            toJSON() {\n                const chartOptions = JSON.stringify(this.options.chartOptions), chartConstructor = this.options.chartConstructor;\n                this.registerChartEvents();\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    type: 'Highcharts',\n                    options: {\n                        ...base.options,\n                        chartOptions,\n                        chartConstructor,\n                        // TODO: may need to handle callback functions\n                        // Maybe have a sync.toJSON()\n                        type: 'Highcharts',\n                        sync: {}\n                    }\n                };\n                this.emit({ type: 'toJSON', json });\n                return json;\n            }\n            /**\n             * Get the HighchartsComponent component's options.\n             * @returns\n             * The JSON of HighchartsComponent component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, HighchartsComponent.defaultOptions),\n                    type: 'Highcharts'\n                };\n            }\n            getEditableOptions() {\n                const component = this;\n                const componentOptions = component.options;\n                const chart = component.chart;\n                const chartOptions = chart && chart.options;\n                const chartType = chartOptions && chartOptions.chart?.type || 'line';\n                return merge(componentOptions, {\n                    chartOptions\n                }, {\n                    chartOptions: {\n                        yAxis: splat(chart && chart.yAxis[0].options),\n                        xAxis: splat(chart && chart.xAxis[0].options),\n                        plotOptions: {\n                            series: ((chartOptions && chartOptions.plotOptions) ||\n                                {})[chartType]\n                        }\n                    }\n                });\n            }\n            getEditableOptionValue(propertyPath) {\n                const component = this;\n                if (!propertyPath) {\n                    return;\n                }\n                if (propertyPath.length === 1 && propertyPath[0] === 'chartOptions') {\n                    return JSON.stringify(component.options.chartOptions, null, 2);\n                }\n                return super.getEditableOptionValue.call(this, propertyPath);\n            }\n        }\n        /** @private */\n        HighchartsComponent.syncHandlers = HighchartsSyncHandlers;\n        /**\n         * Default options of the Highcharts component.\n         */\n        HighchartsComponent.defaultOptions = merge(Component.defaultOptions, {\n            /**\n             * Whether to allow the component to edit the store to which it is\n             * attached.\n             * @default true\n             */\n            allowConnectorUpdate: true,\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-highcharts`\n            ].join(' '),\n            chartClassName: 'chart-container',\n            chartID: 'chart-' + uniqueKey(),\n            chartOptions: {\n                chart: {\n                    styledMode: true\n                },\n                series: []\n            },\n            chartConstructor: '',\n            editableOptions: (Component.defaultOptions.editableOptions || []).concat([\n                {\n                    name: 'chartOptions',\n                    type: 'nested',\n                    nestedOptions: [{\n                            name: 'chart',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'subtitle',\n                                    propertyPath: ['chartOptions', 'subtitle', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'chart', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'column',\n                                            iconURL: 'series-types/icon-column.svg'\n                                        }, {\n                                            name: 'line',\n                                            iconURL: 'series-types/icon-line.svg'\n                                        }, {\n                                            name: 'scatter',\n                                            iconURL: 'series-types/icon-scatter.svg'\n                                        }, {\n                                            name: 'pie',\n                                            iconURL: 'series-types/icon-pie.svg'\n                                        }]\n                                }]\n                        }, {\n                            name: 'xAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'xAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'xAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'yAxis',\n                            options: [{\n                                    name: 'title',\n                                    propertyPath: ['chartOptions', 'yAxis', 'title', 'text'],\n                                    type: 'input'\n                                }, {\n                                    name: 'type',\n                                    propertyPath: ['chartOptions', 'yAxis', 'type'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'linear'\n                                        }, {\n                                            name: 'datetime'\n                                        }, {\n                                            name: 'logarithmic'\n                                        }]\n                                }]\n                        }, {\n                            name: 'legend',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'legend', 'enabled'],\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: ['chartOptions', 'legend', 'align'],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'tooltip',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'tooltip', 'enabled'],\n                            options: [{\n                                    name: 'split',\n                                    propertyPath: ['chartOptions', 'tooltip', 'split'],\n                                    type: 'toggle'\n                                }]\n                        }, {\n                            name: 'dataLabels',\n                            propertyPath: [\n                                'chartOptions',\n                                'plotOptions',\n                                'series',\n                                'dataLabels',\n                                'enabled'\n                            ],\n                            showToggle: true,\n                            options: [{\n                                    name: 'align',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'plotOptions',\n                                        'series',\n                                        'dataLabels',\n                                        'align'\n                                    ],\n                                    type: 'select',\n                                    selectOptions: [{\n                                            name: 'left'\n                                        }, {\n                                            name: 'center'\n                                        }, {\n                                            name: 'right'\n                                        }]\n                                }]\n                        }, {\n                            name: 'credits',\n                            showToggle: true,\n                            propertyPath: ['chartOptions', 'credits', 'enabled'],\n                            options: [{\n                                    name: 'name',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'text'\n                                    ],\n                                    type: 'input'\n                                }, {\n                                    name: 'url',\n                                    propertyPath: [\n                                        'chartOptions',\n                                        'credits',\n                                        'href'\n                                    ],\n                                    type: 'input'\n                                }]\n                        }]\n                }, {\n                    name: 'chartConfig',\n                    propertyPath: ['chartOptions'],\n                    type: 'textarea'\n                }, {\n                    name: 'chartClassName',\n                    propertyPath: ['chartClassName'],\n                    type: 'input'\n                }, {\n                    name: 'chartID',\n                    propertyPath: ['chartID'],\n                    type: 'input'\n                }\n            ]),\n            syncHandlers: HighchartsSyncHandlers,\n            editableOptionsBindings: merge(Component.defaultOptions.editableOptionsBindings, {\n                skipRedraw: [\n                    'chartOptions',\n                    'chartConfig'\n                ]\n            }),\n            columnAssignment: void 0\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HighchartsComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/KPISyncHandlers.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const configs = {\n            emitters: {},\n            handlers: {\n                extremesHandler: function () {\n                    const { board } = this;\n                    const handleChangeExtremes = (e) => {\n                        const cursor = e.cursor;\n                        if (cursor.type === 'position' &&\n                            typeof cursor?.row === 'number' &&\n                            defined(cursor.column) &&\n                            this.connector &&\n                            !defined(this.options.value)) {\n                            const value = this.connector.table.modified.getCellAsString(cursor.column, cursor.row);\n                            this.setValue(value);\n                        }\n                    };\n                    const registerCursorListeners = () => {\n                        const { dataCursor: cursor } = board;\n                        if (!cursor) {\n                            return;\n                        }\n                        const table = this.connector && this.connector.table;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.addListener(table.id, 'xAxis.extremes.max', handleChangeExtremes);\n                    };\n                    const unregisterCursorListeners = () => {\n                        const table = this.connector && this.connector.table;\n                        const { dataCursor: cursor } = board;\n                        if (!table) {\n                            return;\n                        }\n                        cursor.removeListener(table.id, 'xAxis.extremes.max', handleChangeExtremes);\n                    };\n                    if (board) {\n                        registerCursorListeners();\n                        this.on('setConnector', () => unregisterCursorListeners());\n                        this.on('afterSetConnector', () => registerCursorListeners());\n                    }\n                }\n            }\n        };\n        const defaults = {\n            extremes: { handler: configs.handlers.extremesHandler }\n        };\n\n        return defaults;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * General options for the chart.\n         *\n         * @optionparent chart\n         */\n        const ChartDefaults = {\n            /**\n             * Default `mapData` for all series, in terms of a GeoJSON or TopoJSON\n             * object. If set to a string, it functions as an index into the\n             * `Highcharts.maps` array.\n             *\n             * For picking out individual shapes and geometries to use for each series\n             * of the map, see [series.mapData](#series.map.mapData).\n             *\n             * @sample    maps/demo/geojson\n             *            Loading GeoJSON data\n             * @sample    maps/chart/topojson\n             *            Loading TopoJSON data\n             *\n             * @type      {string|Array<*>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.map\n             */\n            /**\n             * Set lat/lon transformation definitions for the chart. If not defined,\n             * these are extracted from the map data.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @product   highmaps\n             * @apioption chart.mapTransforms\n             */\n            /**\n             * When using multiple axes, the ticks of two or more opposite axes\n             * will automatically be aligned by adding ticks to the axis or axes\n             * with the least ticks, as if `tickAmount` were specified.\n             *\n             * This can be prevented by setting `alignTicks` to false. If the grid\n             * lines look messy, it's a good idea to hide them for the secondary\n             * axis by setting `gridLineWidth` to 0.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false,\n             * then the `alignTicks ` will be disabled for the axis.\n             *\n             * Disabled for logarithmic axes.\n             *\n             * @sample {highcharts} highcharts/chart/alignticks-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/alignticks-false/\n             *         False\n             * @sample {highstock} stock/chart/alignticks-true/\n             *         True by default\n             * @sample {highstock} stock/chart/alignticks-false/\n             *         False\n             *\n             * @type      {boolean}\n             * @default   true\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignTicks\n             */\n            /**\n             * When using multiple axes, align the thresholds. When this is true, other\n             * ticks will also be aligned.\n             *\n             * Note that for line series and some other series types, the `threshold`\n             * option is set to `null` by default. This will in turn cause their y-axis\n             * to not have a threshold. In order to avoid that, set the series\n             * `threshold` to 0 or another number.\n             *\n             * If `startOnTick` or `endOnTick` in the axis options are set to false, or\n             * if the axis is logarithmic, the threshold will not be aligned.\n             *\n             * @sample {highcharts} highcharts/chart/alignthresholds/ Set to true\n             *\n             * @since 10.0.0\n             * @product   highcharts highstock gantt\n             * @apioption chart.alignThresholds\n             */\n            alignThresholds: false,\n            /**\n             * Set the overall animation for all chart updating. Animation can be\n             * disabled throughout the chart by setting it to false here. It can\n             * be overridden for each individual API method as a function parameter.\n             * The only animation not affected by this option is the initial series\n             * animation, see [plotOptions.series.animation](\n             * #plotOptions.series.animation).\n             *\n             * The animation can either be set as a boolean or a configuration\n             * object. If `true`, it will use the 'swing' jQuery easing and a\n             * duration of 500 ms. If used as a configuration object, the following\n             * properties are supported:\n             *\n             * - `defer`: The animation delay time in milliseconds.\n             *\n             * - `duration`: The duration of the animation in milliseconds.\n             *\n             * - `easing`: A string reference to an easing function set on the\n             *   `Math` object. See\n             *   [the easing demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-animation-easing/).\n             *\n             * When zooming on a series with less than 100 points, the chart redraw\n             * will be done with animation, but in case of more data points, it is\n             * necessary to set this option to ensure animation on zoom.\n             *\n             * @sample {highcharts} highcharts/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highcharts} highcharts/chart/animation-duration/\n             *         With a longer duration\n             * @sample {highcharts} highcharts/chart/animation-easing/\n             *         With a jQuery UI easing\n             * @sample {highmaps} maps/chart/animation-none/\n             *         Updating with no animation\n             * @sample {highmaps} maps/chart/animation-duration/\n             *         With a longer duration\n             *\n             * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @default   true\n             * @apioption chart.animation\n             */\n            /**\n             * A CSS class name to apply to the charts container `div`, allowing\n             * unique CSS styling for each chart.\n             *\n             * @type      {string}\n             * @apioption chart.className\n             */\n            /**\n             * Event listeners for the chart.\n             *\n             * @apioption chart.events\n             */\n            /**\n             * Fires when a series is added to the chart after load time, using the\n             * `addSeries` method. One parameter, `event`, is passed to the\n             * function, containing common event information. Through\n             * `event.options` you can access the series options that were passed to\n             * the `addSeries` method. Returning false prevents the series from\n             * being added.\n             *\n             * @sample {highcharts} highcharts/chart/events-addseries/\n             *         Alert on add series\n             * @sample {highstock} stock/chart/events-addseries/\n             *         Alert on add series\n             *\n             * @type      {Highcharts.ChartAddSeriesCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.addSeries\n             */\n            /**\n             * Fires when clicking on the plot background. One parameter, `event`,\n             * is passed to the function, containing common event information.\n             *\n             * Information on the clicked spot can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' value at the clicked spot. The primary axes\n             * are `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * click: function(e) {\n             *     console.log(\n             *         Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', e.xAxis[0].value),\n             *         e.yAxis[0].value\n             *     )\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highcharts} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highstock} stock/chart/events-click/\n             *         Alert coordinates on click\n             * @sample {highstock} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             * @sample {highmaps} maps/chart/events-click/\n             *         Record coordinates on click\n             * @sample {highmaps} highcharts/chart/events-container/\n             *         Alternatively, attach event to container\n             *\n             * @type      {Highcharts.ChartClickCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.click\n             */\n            /**\n             * Fires when the chart is finished loading. Since v4.2.2, it also waits\n             * for images to be loaded, for example from point markers. One\n             * parameter, `event`, is passed to the function, containing common\n             * event information.\n             *\n             * There is also a second parameter to the chart constructor where a\n             * callback function can be passed to be executed on chart.load.\n             *\n             * @sample {highcharts} highcharts/chart/events-load/\n             *         Alert on chart load\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-load/\n             *         Alert on chart load\n             * @sample {highmaps} maps/chart/events-load/\n             *         Add series on chart load\n             *\n             * @type      {Highcharts.ChartLoadCallbackFunction}\n             * @context   Highcharts.Chart\n             * @apioption chart.events.load\n             */\n            /**\n             * Fires when the chart is redrawn, either after a call to\n             * `chart.redraw()` or after an axis, series or point is modified with\n             * the `redraw` option set to `true`. One parameter, `event`, is passed\n             * to the function, containing common event information.\n             *\n             * @sample {highcharts} highcharts/chart/events-redraw/\n             *         Alert on chart redraw\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             * @sample {highstock} stock/chart/events-redraw/\n             *         Alert on chart redraw when adding a series or moving the\n             *         zoomed range\n             * @sample {highmaps} maps/chart/events-redraw/\n             *         Set subtitle on chart redraw\n             *\n             * @type      {Highcharts.ChartRedrawCallbackFunction}\n             * @since     1.2.0\n             * @context   Highcharts.Chart\n             * @apioption chart.events.redraw\n             */\n            /**\n             * Fires after initial load of the chart (directly after the `load`\n             * event), and after each redraw (directly after the `redraw` event).\n             *\n             * @sample {highcharts} highcharts/chart/events-render/\n             *         Load vs Redraw vs Render\n             *\n             * @type      {Highcharts.ChartRenderCallbackFunction}\n             * @since     5.0.7\n             * @context   Highcharts.Chart\n             * @apioption chart.events.render\n             */\n            /**\n             * Fires when an area of the chart has been selected. Selection is\n             * enabled by setting the chart's zoomType. One parameter, `event`, is\n             * passed to the function, containing common event information. The\n             * default action for the selection event is to zoom the chart to the\n             * selected area. It can be prevented by calling\n             * `event.preventDefault()` or return false.\n             *\n             * Information on the selected area can be found through `event.xAxis`\n             * and `event.yAxis`, which are arrays containing the axes of each\n             * dimension and each axis' min and max values. The primary axes are\n             * `event.xAxis[0]` and `event.yAxis[0]`. Remember the unit of a\n             * datetime axis is milliseconds since 1970-01-01 00:00:00.\n             *\n             * ```js\n             * selection: function(event) {\n             *     // log the min and max of the primary, datetime x-axis\n             *     console.log(\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].min\n             *         ),\n             *         Highcharts.dateFormat(\n             *             '%Y-%m-%d %H:%M:%S',\n             *             event.xAxis[0].max\n             *         )\n             *     );\n             *     // log the min and max of the y axis\n             *     console.log(event.yAxis[0].min, event.yAxis[0].max);\n             * }\n             * ```\n             *\n             * @sample {highcharts} highcharts/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highcharts} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             * @sample {highstock} stock/chart/events-selection/\n             *         Report on selection and reset\n             * @sample {highstock} highcharts/chart/events-selection-points/\n             *         Select a range of points through a drag selection\n             *         (Highcharts)\n             *\n             * @type      {Highcharts.ChartSelectionCallbackFunction}\n             * @apioption chart.events.selection\n             */\n            /**\n             * The margin between the outer edge of the chart and the plot area.\n             * The numbers in the array designate top, right, bottom and left\n             * respectively. Use the options `marginTop`, `marginRight`,\n             * `marginBottom` and `marginLeft` for shorthand setting of one option.\n             *\n             * By default there is no margin. The actual space is dynamically\n             * calculated from the offset of axis labels, axis title, title,\n             * subtitle and legend in addition to the `spacingTop`, `spacingRight`,\n             * `spacingBottom` and `spacingLeft` options.\n             *\n             * @sample {highcharts} highcharts/chart/margins-zero/\n             *         Zero margins\n             * @sample {highstock} stock/chart/margin-zero/\n             *         Zero margins\n             *\n             * @type      {number|Array<number>}\n             * @apioption chart.margin\n             */\n            /**\n             * The margin between the bottom outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingBottom`.\n             *\n             * @sample {highcharts} highcharts/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highstock} stock/chart/marginbottom/\n             *         100px bottom margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginBottom\n             */\n            /**\n             * The margin between the left outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingLeft`.\n             *\n             * @sample {highcharts} highcharts/chart/marginleft/\n             *         150px left margin\n             * @sample {highstock} stock/chart/marginleft/\n             *         150px left margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginLeft\n             */\n            /**\n             * The margin between the right outer edge of the chart and the plot\n             * area. Use this to set a fixed pixel value for the margin as opposed\n             * to the default dynamic margin. See also `spacingRight`.\n             *\n             * @sample {highcharts} highcharts/chart/marginright/\n             *         100px right margin\n             * @sample {highstock} stock/chart/marginright/\n             *         100px right margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginRight\n             */\n            /**\n             * The margin between the top outer edge of the chart and the plot area.\n             * Use this to set a fixed pixel value for the margin as opposed to\n             * the default dynamic margin. See also `spacingTop`.\n             *\n             * @sample {highcharts} highcharts/chart/margintop/ 100px top margin\n             * @sample {highstock} stock/chart/margintop/\n             *         100px top margin\n             * @sample {highmaps} maps/chart/margin/\n             *         100px margins\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption chart.marginTop\n             */\n            /**\n             * Callback function to override the default function that formats all\n             * the numbers in the chart. Returns a string with the formatted number.\n             *\n             * @sample highcharts/members/highcharts-numberformat\n             *      Arabic digits in Highcharts\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             * @since 8.0.0\n             * @apioption chart.numberFormatter\n             */\n            /**\n             * When a chart with an x and a y-axis is rendered, we first pre-render the\n             * labels of both in order to measure them. Then, if either of the axis\n             * labels take up so much space that it significantly affects the length of\n             * the other axis, we repeat the process.\n             *\n             * By default we stop at two axis layout runs, but it may be that the second\n             * run also alter the space required by either axis, for example if it\n             * causes the labels to rotate. In this situation, a subsequent redraw of\n             * the chart may cause the tick and label placement to change for apparently\n             * no reason.\n             *\n             * Use the `axisLayoutRuns` option to set the maximum allowed number of\n             * repetitions. But keep in mind that the default value of 2 is set because\n             * every run costs performance time.\n             *\n             * **Note:** Changing that option to higher than the default might decrease\n             * performance significantly, especially with bigger sets of data.\n             *\n             * @type      {number}\n             * @default   2\n             * @since     @next\n             * @apioption chart.axisLayoutRuns\n             */\n            /**\n             * Allows setting a key to switch between zooming and panning. Can be\n             * one of `alt`, `ctrl`, `meta` (the command key on Mac and Windows\n             * key on Windows) or `shift`. The keys are mapped directly to the key\n             * properties of the click event argument (`event.altKey`,\n             * `event.ctrlKey`, `event.metaKey` and `event.shiftKey`).\n             *\n             * @type       {string}\n             * @since      4.0.3\n             * @product    highcharts gantt\n             * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n             * @apioption  chart.panKey\n             */\n            /**\n             * Allow panning in a chart. Best used with [panKey](#chart.panKey)\n             * to combine zooming and panning.\n             *\n             * On touch devices, when the [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) option is `true` (default), panning\n             * requires two fingers. To allow panning with one finger, set\n             * `followTouchMove` to `false`.\n             *\n             * @sample  {highcharts} highcharts/chart/pankey/ Zooming and panning\n             * @sample  {highstock} stock/chart/panning/ Zooming and xy panning\n             */\n            panning: {\n                /**\n                 * Enable or disable chart panning.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock|highmaps} true\n                 */\n                enabled: false,\n                /**\n                 * Decides in what dimensions the user can pan the chart. Can be\n                 * one of `x`, `y`, or `xy`.\n                 *\n                 * When this option is set to `y` or `xy`, [yAxis.startOnTick](#yAxis.startOnTick)\n                 * and [yAxis.endOnTick](#yAxis.endOnTick) are overwritten to `false`.\n                 *\n                 * @sample {highcharts} highcharts/chart/panning-type\n                 *         Zooming and xy panning\n                 *\n                 * @declare    Highcharts.OptionsChartPanningTypeValue\n                 * @type       {string}\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @default    {highcharts|highstock} x\n                 * @product    highcharts highstock gantt\n                 */\n                type: 'x'\n            },\n            /**\n             * Equivalent to [zoomType](#chart.zoomType), but for multitouch\n             * gestures only. By default, the `pinchType` is the same as the\n             * `zoomType` setting. However, pinching can be enabled separately in\n             * some cases, for example in stock charts where a mouse drag pans the\n             * chart, while pinching is enabled. When [tooltip.followTouchMove](\n             * #tooltip.followTouchMove) is true, pinchType only applies to\n             * two-finger touches.\n             *\n             * @type       {string}\n             * @default    {highcharts} undefined\n             * @default    {highstock} undefined\n             * @since      3.0\n             * @product    highcharts highstock gantt\n             * @deprecated\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @apioption  chart.pinchType\n             */\n            /**\n             * Whether to apply styled mode. When in styled mode, no presentational\n             * attributes or CSS are applied to the chart SVG. Instead, CSS rules\n             * are required to style the chart. The default style sheet is\n             * available from `https://code.highcharts.com/css/highcharts.css`.\n             *\n             * [Read more in the docs](https://www.highcharts.com/docs/chart-design-and-style/style-by-css)\n             * on what classes and variables are available.\n             *\n             * @sample highcharts/css/colors\n             *         Color theming with CSS\n             * @sample highcharts/css/prefers-color-scheme\n             *         Dynamic theme based on system settings\n             * @type       {boolean}\n             * @default    false\n             * @since      7.0\n             * @apioption  chart.styledMode\n             */\n            styledMode: false,\n            /**\n             * The corner radius of the outer chart border.\n             *\n             * @sample {highcharts} highcharts/chart/borderradius/\n             *         20px radius\n             * @sample {highstock} stock/chart/border/\n             *         10px radius\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             */\n            borderRadius: 0,\n            /**\n             * In styled mode, this sets how many colors the class names\n             * should rotate between. With ten colors, series (or points) are\n             * given class names like `highcharts-color-0`, `highcharts-color-1`\n             * [...] `highcharts-color-9`. The equivalent in non-styled mode\n             * is to set colors using the [colors](#colors) setting.\n             *\n             * @since      5.0.0\n             */\n            colorCount: 10,\n            /**\n             * By default, (because of memory and performance reasons) the chart does\n             * not copy the data but keeps it as a reference. In some cases, this might\n             * result in mutating the original data source. In order to prevent that,\n             * set that property to false. Please note that changing that might decrease\n             * performance, especially with bigger sets of data.\n             *\n             * @type       {boolean}\n             * @since 10.1.0\n             */\n            allowMutatingData: true,\n            /**\n             * If true, the axes will scale to the remaining visible series once\n             * one series is hidden. If false, hiding and showing a series will\n             * not affect the axes or the other series. For stacks, once one series\n             * within the stack is hidden, the rest of the stack will close in\n             * around it even if the axis is not affected.\n             *\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-false/\n             *         False\n             * @sample {highcharts} highcharts/chart/ignorehiddenseries-true-stacked/\n             *         True with stack\n             * @sample {highstock} stock/chart/ignorehiddenseries-true/\n             *         True by default\n             * @sample {highstock} stock/chart/ignorehiddenseries-false/\n             *         False\n             *\n             * @since   1.2.0\n             * @product highcharts highstock gantt\n             */\n            ignoreHiddenSeries: true,\n            /**\n             * Whether to invert the axes so that the x axis is vertical and y axis\n             * is horizontal. When `true`, the x axis is [reversed](#xAxis.reversed)\n             * by default.\n             *\n             * @productdesc {highcharts}\n             * If a bar series is present in the chart, it will be inverted\n             * automatically. Inverting the chart doesn't have an effect if there\n             * are no cartesian series in the chart.\n             *\n             * @sample {highcharts} highcharts/chart/inverted/\n             *         Inverted line\n             * @sample {highstock} stock/navigator/inverted/\n             *         Inverted stock chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @product   highcharts highstock gantt\n             * @apioption chart.inverted\n             */\n            /**\n             * The distance between the outer edge of the chart and the content,\n             * like title or legend, or axis title and labels if present. The\n             * numbers in the array designate top, right, bottom and left\n             * respectively. Use the options spacingTop, spacingRight, spacingBottom\n             * and spacingLeft options for shorthand setting of one option.\n             *\n             * @type    {Array<number>}\n             * @see     [chart.margin](#chart.margin)\n             * @default [10, 10, 15, 10]\n             * @since   3.0.6\n             */\n            spacing: [10, 10, 15, 10],\n            /**\n             * The button that appears after a selection zoom, allowing the user\n             * to reset zoom. This option is deprecated in favor of\n             * [zooming](#chart.zooming).\n             *\n             * @since      2.2\n             * @deprecated 10.2.1\n             */\n            resetZoomButton: {\n                /**\n                 * What frame the button placement should be related to. Can be\n                 * either `plotBox` or `spacingBox`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                 *         Relative to the chart\n                 *\n                 * @type      {Highcharts.ButtonRelativeToValue}\n                 * @apioption chart.resetZoomButton.relativeTo\n                 */\n                /**\n                 * A collection of attributes for the button. The object takes SVG\n                 * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                 * border radius. The theme also supports `style`, a collection of\n                 * CSS properties for the text. Equivalent attributes for the hover\n                 * state are given in `theme.states.hover`.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                 *         Theming the button\n                 *\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                theme: {\n                /**\n                 * zIndex of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.theme.zIndex\n                 */\n                },\n                /**\n                 * The position of the button.\n                 *\n                 * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                 *         Above the plot area\n                 *\n                 * @type {Highcharts.AlignObject}\n                 */\n                position: {\n                /**\n                 * The horizontal alignment of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.align\n                 */\n                /**\n                 * The horizontal offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.x\n                 */\n                /**\n                 * The vertical alignment of the button.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @apioption chart.resetZoomButton.position.verticalAlign\n                 */\n                /**\n                 * The vertical offset of the button.\n                 *\n                 * @type {number}\n                 * @apioption chart.resetZoomButton.position.y\n                 */\n                }\n            },\n            /**\n             * The pixel width of the plot area border.\n             *\n             * @sample {highcharts} highcharts/chart/plotborderwidth/\n             *         1px border\n             * @sample {highstock} stock/chart/plotborder/\n             *         2px border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.plotBorderWidth\n             */\n            /**\n             * Whether to apply a drop shadow to the plot area. Requires that\n             * plotBackgroundColor be set. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample {highcharts} highcharts/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highstock} stock/chart/plotshadow/\n             *         Plot shadow\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.plotShadow\n             */\n            /**\n             * When true, cartesian charts like line, spline, area and column are\n             * transformed into the polar coordinate system. This produces _polar\n             * charts_, also known as _radar charts_.\n             *\n             * @sample {highcharts} highcharts/demo/polar/\n             *         Polar chart\n             * @sample {highcharts} highcharts/demo/polar-wind-rose/\n             *         Wind rose, stacked polar column chart\n             * @sample {highcharts} highcharts/demo/polar-spider/\n             *         Spider web chart\n             * @sample {highcharts} highcharts/parallel-coordinates/polar/\n             *         Star plot, multivariate data in a polar chart\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     2.3.0\n             * @product   highcharts\n             * @requires  highcharts-more\n             * @apioption chart.polar\n             */\n            /**\n             * Whether to reflow the chart to fit the width of the container div\n             * on resizing the window.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         True by default\n             * @sample {highcharts} highcharts/chart/reflow-false/\n             *         False\n             * @sample {highstock} stock/chart/reflow-true/\n             *         True by default\n             * @sample {highstock} stock/chart/reflow-false/\n             *         False\n             * @sample {highmaps} maps/chart/reflow-true/\n             *         True by default\n             * @sample {highmaps} maps/chart/reflow-false/\n             *         False\n             *\n             * @since     2.1\n             */\n            reflow: true,\n            /**\n             * The HTML element where the chart will be rendered. If it is a string,\n             * the element by that id is used. The HTML element can also be passed\n             * by direct reference, or as the first argument of the chart\n             * constructor, in which case the option is not needed.\n             *\n             * @sample {highcharts} highcharts/chart/reflow-true/\n             *         String\n             * @sample {highcharts} highcharts/chart/renderto-object/\n             *         Object reference\n             * @sample {highstock} stock/chart/renderto-string/\n             *         String\n             * @sample {highstock} stock/chart/renderto-object/\n             *         Object reference\n             *\n             * @type      {string|Highcharts.HTMLDOMElement}\n             * @apioption chart.renderTo\n             */\n            /**\n             * The background color of the marker square when selecting (zooming\n             * in on) an area of the chart.\n             *\n             * @see In styled mode, the selection marker fill is set with the\n             *      `.highcharts-selection-marker` class.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   rgba(51,92,173,0.25)\n             * @since     2.1.7\n             * @apioption chart.selectionMarkerFill\n             */\n            /**\n             * Whether to apply a drop shadow to the global series group. This causes\n             * all the series to have the same shadow. Contrary to the `series.shadow`\n             * option, this prevents items from casting shadows on each other, like for\n             * others series in a stack. The shadow can be an object configuration\n             * containing `color`, `offsetX`, `offsetY`, `opacity` and `width`.\n             *\n             * @sample highcharts/chart/seriesgroupshadow/ Shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to apply a drop shadow to the outer chart area. Requires\n             * that backgroundColor be set. The shadow can be an object\n             * configuration containing `color`, `offsetX`, `offsetY`, `opacity` and\n             * `width`.\n             *\n             * @sample {highcharts} highcharts/chart/shadow/\n             *         Shadow\n             * @sample {highstock} stock/chart/shadow/\n             *         Shadow\n             * @sample {highmaps} maps/chart/border/\n             *         Chart border and shadow\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @default   false\n             * @apioption chart.shadow\n             */\n            /**\n             * Whether to show the axes initially. This only applies to empty charts\n             * where series are added dynamically, as axes are automatically added\n             * to cartesian series.\n             *\n             * @sample {highcharts} highcharts/chart/showaxes-false/\n             *         False by default\n             * @sample {highcharts} highcharts/chart/showaxes-true/\n             *         True\n             *\n             * @type      {boolean}\n             * @since     1.2.5\n             * @product   highcharts gantt\n             * @apioption chart.showAxes\n             */\n            /**\n             * The space between the bottom edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highstock} stock/chart/spacingbottom/\n             *         Spacing bottom set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   15\n             * @since     2.1\n             * @apioption chart.spacingBottom\n             */\n            /**\n             * The space between the left edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highstock} stock/chart/spacingleft/\n             *         Spacing left set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingLeft\n             */\n            /**\n             * The space between the right edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingright-100/\n             *         Spacing set to 100\n             * @sample {highcharts} highcharts/chart/spacingright-legend/\n             *         Legend in right position with default spacing\n             * @sample {highstock} stock/chart/spacingright/\n             *         Spacing set to 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingRight\n             */\n            /**\n             * The space between the top edge of the chart and the content (plot\n             * area, axis title and labels, title, subtitle or legend in top\n             * position).\n             *\n             * @sample {highcharts} highcharts/chart/spacingtop-100/\n             *         A top spacing of 100\n             * @sample {highcharts} highcharts/chart/spacingtop-10/\n             *         Floating chart title makes the plot area align to the default\n             *         spacingTop of 10.\n             * @sample {highstock} stock/chart/spacingtop/\n             *         A top spacing of 100\n             * @sample {highmaps} maps/chart/spacing/\n             *         Spacing 100 all around\n             *\n             * @type      {number}\n             * @default   10\n             * @since     2.1\n             * @apioption chart.spacingTop\n             */\n            /**\n             * Additional CSS styles to apply inline to the container `div` and the root\n             * SVG.\n             *\n             * Since v11, the root font size is 1rem by default, and all child element\n             * are given a relative `em` font size by default. This allows implementers\n             * to control all the chart's font sizes by only setting the root level.\n             *\n             * @see    In styled mode, general chart styles can be set with the\n             *         `.highcharts-root` class.\n             * @sample {highcharts} highcharts/chart/style-serif-font/\n             *         Using a serif type font\n             * @sample {highcharts} highcharts/members/relative-font-size/\n             *         Relative font sizes\n             * @sample {highcharts} highcharts/css/em/\n             *         Styled mode with relative font sizes\n             * @sample {highstock} stock/chart/style/\n             *         Using a serif type font\n             * @sample {highmaps} maps/chart/style-serif-font/\n             *         Using a serif type font\n             *\n             * @type      {Highcharts.CSSObject}\n             * @default   {\"fontFamily\": Helvetica, Arial, sans-serif\",\"fontSize\":\"1rem\"}\n             * @apioption chart.style\n             */\n            /**\n             * The default series type for the chart. Can be any of the chart types\n             * listed under [plotOptions](#plotOptions) and [series](#series) or can\n             * be a series provided by an additional module.\n             *\n             * In TypeScript this option has no effect in sense of typing and\n             * instead the `type` option must always be set in the series.\n             *\n             * @sample {highcharts} highcharts/chart/type-bar/\n             *         Bar\n             * @sample {highstock} stock/chart/type/\n             *         Areaspline\n             * @sample {highmaps} maps/chart/type-mapline/\n             *         Mapline\n             *\n             * @type       {string}\n             * @default    {highcharts} line\n             * @default    {highstock} line\n             * @default    {highmaps} map\n             * @since      2.1.0\n             * @apioption  chart.type\n             */\n            type: 'line',\n            /**\n             * Decides in what dimensions the user can zoom by dragging the mouse.\n             * Can be one of `x`, `y` or `xy`.\n             *\n             * @see [panKey](#chart.panKey)\n             *\n             * @sample {highcharts} highcharts/chart/zoomtype-none/\n             *         None by default\n             * @sample {highcharts} highcharts/chart/zoomtype-x/\n             *         X\n             * @sample {highcharts} highcharts/chart/zoomtype-y/\n             *         Y\n             * @sample {highcharts} highcharts/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highcharts} highcharts/chart/zoomtype-polar/\n             *         Zoom on polar chart\n             * @sample {highstock} stock/demo/basic-line/\n             *         None by default\n             * @sample {highstock} stock/chart/zoomtype-x/\n             *         X\n             * @sample {highstock} stock/chart/zoomtype-y/\n             *         Y\n             * @sample {highstock} stock/chart/zoomtype-xy/\n             *         Xy\n             * @sample {highmaps} maps/chart/zoomtype-xy/\n             *         Map with selection zoom\n             *\n             * @type       {string}\n             * @validvalue [\"x\", \"y\", \"xy\"]\n             * @deprecated\n             * @apioption  chart.zoomType\n             */\n            /**\n             * Enables zooming by a single touch, in combination with\n             * [chart.zoomType](#chart.zoomType). When enabled, two-finger pinch\n             * will still work as set up by [chart.pinchType](#chart.pinchType).\n             * However, `zoomBySingleTouch` will interfere with touch-dragging the\n             * chart to read the tooltip. And especially when vertical zooming is\n             * enabled, it will make it hard to scroll vertically on the page.\n             * @since      9.0.0\n             * @sample     highcharts/chart/zoombysingletouch\n             *             Zoom by single touch enabled, with buttons to toggle\n             * @product    highcharts highstock gantt\n             * @deprecated\n             */\n            /**\n             * Chart zooming options.\n             * @since 10.2.1\n             */\n            zooming: {\n                /**\n                 * Equivalent to [type](#chart.zooming.type), but for multitouch\n                 * gestures only. By default, the `pinchType` is the same as the\n                 * `type` setting. However, pinching can be enabled separately in\n                 * some cases, for example in stock charts where a mouse drag pans the\n                 * chart, while pinching is enabled. When [tooltip.followTouchMove](\n                 * #tooltip.followTouchMove) is true, pinchType only applies to\n                 * two-finger touches.\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @default    {highstock} x\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.pinchType\n                 */\n                /**\n                 * Decides in what dimensions the user can zoom by dragging the mouse.\n                 * Can be one of `x`, `y` or `xy`.\n                 *\n                 * @declare    Highcharts.OptionsChartZoomingTypeValue\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @product    highcharts highstock gantt\n                 * @validvalue [\"x\", \"y\", \"xy\"]\n                 * @apioption  chart.zooming.type\n                 */\n                /**\n                 * Set a key to hold when dragging to zoom the chart. This is useful to\n                 * avoid zooming while moving points. Should be set different than\n                 * [chart.panKey](#chart.panKey).\n                 *\n                 * @type       {string}\n                 * @default    {highcharts} undefined\n                 * @validvalue [\"alt\", \"ctrl\", \"meta\", \"shift\"]\n                 * @requires   modules/draggable-points\n                 * @apioption  chart.zooming.key\n                 */\n                /**\n                 * Enables zooming by a single touch, in combination with\n                 * [chart.zooming.type](#chart.zooming.type). When enabled, two-finger\n                 * pinch will still work as set up by [chart.zooming.pinchType]\n                 * (#chart.zooming.pinchType). However, `singleTouch` will interfere\n                 * with touch-dragging the chart to read the tooltip. And especially\n                 * when vertical zooming is enabled, it will make it hard to scroll\n                 * vertically on the page.\n                 *\n                 * @sample  highcharts/chart/zoombysingletouch\n                 *          Zoom by single touch enabled, with buttons to toggle\n                 *\n                 * @product highcharts highstock gantt\n                 */\n                singleTouch: false,\n                /**\n                 * The button that appears after a selection zoom, allowing the user\n                 * to reset zoom.\n                 */\n                resetButton: {\n                    /**\n                     * What frame the button placement should be related to. Can be\n                     * either `plotBox` or `spacingBox`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     * @sample {highstock} highcharts/chart/resetzoombutton-relativeto/\n                     *         Relative to the chart\n                     *\n                     * @type      {Highcharts.ButtonRelativeToValue}\n                     * @default   plot\n                     * @apioption chart.zooming.resetButton.relativeTo\n                     */\n                    /**\n                     * A collection of attributes for the button. The object takes SVG\n                     * attributes like `fill`, `stroke`, `stroke-width` or `r`, the\n                     * border radius. The theme also supports `style`, a collection of\n                     * CSS properties for the text. Equivalent attributes for the hover\n                     * state are given in `theme.states.hover`.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     * @sample {highstock} highcharts/chart/resetzoombutton-theme/\n                     *         Theming the button\n                     *\n                     * @type  {Highcharts.SVGAttributes}\n                     * @since 10.2.1\n                     */\n                    theme: {\n                        /** @internal */\n                        zIndex: 6\n                    },\n                    /**\n                     * The position of the button.\n                     *\n                     * Note: Adjusting position values might cause overlap with chart\n                     * elements. Ensure coordinates do not obstruct other components or\n                     * data visibility.\n                     *\n                     * @sample {highcharts} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highstock} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     * @sample {highmaps} highcharts/chart/resetzoombutton-position/\n                     *         Above the plot area\n                     *\n                     * @type  {Highcharts.AlignObject}\n                     * @since 10.2.1\n                     */\n                    position: {\n                        /**\n                         * The horizontal alignment of the button.\n                         */\n                        align: 'right',\n                        /**\n                         * The horizontal offset of the button.\n                         */\n                        x: -10,\n                        /**\n                         * The vertical alignment of the button.\n                         *\n                         * @type       {Highcharts.VerticalAlignValue}\n                         * @default    top\n                         * @apioption  chart.zooming.resetButton.position.verticalAlign\n                         */\n                        /**\n                         * The vertical offset of the button.\n                         */\n                        y: 10\n                    }\n                }\n            },\n            /**\n             * An explicit width for the chart. By default (when `null`) the width\n             * is calculated from the offset width of the containing element.\n             *\n             * @sample {highcharts} highcharts/chart/width/\n             *         800px wide\n             * @sample {highstock} stock/chart/width/\n             *         800px wide\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             *\n             * @type {null|number|string}\n             */\n            width: null,\n            /**\n             * An explicit height for the chart. If a _number_, the height is\n             * given in pixels. If given a _percentage string_ (for example\n             * `'56%'`), the height is given as the percentage of the actual chart\n             * width. This allows for preserving the aspect ratio across responsive\n             * sizes.\n             *\n             * By default (when `null`) the height is calculated from the offset\n             * height of the containing element, or 400 pixels if the containing\n             * element's height is 0.\n             *\n             * @sample {highcharts} highcharts/chart/height/\n             *         500px height\n             * @sample {highstock} stock/chart/height/\n             *         300px height\n             * @sample {highmaps} maps/chart/size/\n             *         Chart with explicit size\n             * @sample highcharts/chart/height-percent/\n             *         Highcharts with percentage height\n             *\n             * @type {null|number|string}\n             */\n            height: null,\n            /**\n             * The color of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/bordercolor/\n             *         Brown border\n             * @sample {highstock} stock/chart/border/\n             *         Brown border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: \"#334eff\" /* Palette.highlightColor80 */,\n            /**\n             * The pixel width of the outer chart border.\n             *\n             * @see In styled mode, the stroke is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/borderwidth/\n             *         5px border\n             * @sample {highstock} stock/chart/border/\n             *         2px border\n             * @sample {highmaps} maps/chart/border/\n             *         Border options\n             *\n             * @type      {number}\n             * @default   0\n             * @apioption chart.borderWidth\n             */\n            /**\n             * The background color or gradient for the outer chart area.\n             *\n             * @see In styled mode, the background is set with the\n             *      `.highcharts-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/backgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/backgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/backgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The background color or gradient for the plot area.\n             *\n             * @see In styled mode, the plot background is set with the\n             *      `.highcharts-plot-background` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highcharts} highcharts/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highstock} stock/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highstock} stock/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-color/\n             *         Color\n             * @sample {highmaps} maps/chart/plotbackgroundcolor-gradient/\n             *         Gradient\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption chart.plotBackgroundColor\n             */\n            /**\n             * The URL for an image to use as the plot background. To set an image\n             * as the background for the entire chart, set a CSS background image\n             * to the container element. Note that for the image to be applied to\n             * exported charts, its URL needs to be accessible by the export server.\n             *\n             * @see In styled mode, a plot background image can be set with the\n             *      `.highcharts-plot-background` class and a [custom pattern](\n             *      https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\n             *\n             * @sample {highcharts} highcharts/chart/plotbackgroundimage/\n             *         Skies\n             * @sample {highstock} stock/chart/plotbackgroundimage/\n             *         Skies\n             *\n             * @type      {string}\n             * @apioption chart.plotBackgroundImage\n             */\n            /**\n             * The color of the inner chart or plot area border.\n             *\n             * @see In styled mode, a plot border stroke can be set with the\n             *      `.highcharts-plot-border` class.\n             *\n             * @sample {highcharts} highcharts/chart/plotbordercolor/\n             *         Blue border\n             * @sample {highstock} stock/chart/plotborder/\n             *         Blue border\n             * @sample {highmaps} maps/chart/plotborder/\n             *         Plot border options\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            plotBorderColor: \"#cccccc\" /* Palette.neutralColor20 */\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartDefaults;\n    });\n    _registerModule(_modules, 'Core/Color/Palettes.js', [], function () {\n        /**\n         * Series palettes for Highcharts. Series colors are defined in highcharts.css.\n         * **Do not edit this file!** This file is generated using the 'gulp palette' task.\n         */\n        const SeriesPalettes = {\n            /**\n             * Colors for data series and points\n             */\n            colors: [\n                '#2caffe',\n                '#544fc5',\n                '#00e272',\n                '#fe6a35',\n                '#6b8abc',\n                '#d568fb',\n                '#2ee0ca',\n                '#fa4b42',\n                '#feb56a',\n                '#91e8e1'\n            ]\n        };\n\n        return SeriesPalettes;\n    });\n    _registerModule(_modules, 'Core/Time.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { defined, error, extend, isNumber, isObject, merge, objectEach, pad, pick, splat, timeUnits } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const hasNewSafariBug = H.isSafari &&\n            win.Intl &&\n            win.Intl.DateTimeFormat.prototype.formatRange;\n        // To do: Remove this when we no longer need support for Safari < v14.1\n        const hasOldSafariBug = H.isSafari &&\n            win.Intl &&\n            !win.Intl.DateTimeFormat.prototype.formatRange;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * The Time class. Time settings are applied in general for each page using\n         * `Highcharts.setOptions`, or individually for each Chart item through the\n         * [time](https://api.highcharts.com/highcharts/time) options set.\n         *\n         * The Time object is available from {@link Highcharts.Chart#time},\n         * which refers to  `Highcharts.time` if no individual time settings are\n         * applied.\n         *\n         * @example\n         * // Apply time settings globally\n         * Highcharts.setOptions({\n         *     time: {\n         *         timezone: 'Europe/London'\n         *     }\n         * });\n         *\n         * // Apply time settings by instance\n         * let chart = Highcharts.chart('container', {\n         *     time: {\n         *         timezone: 'America/New_York'\n         *     },\n         *     series: [{\n         *         data: [1, 4, 3, 5]\n         *     }]\n         * });\n         *\n         * // Use the Time object\n         * console.log(\n         *        'Current time in New York',\n         *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n         * );\n         *\n         * @since 6.0.5\n         *\n         * @class\n         * @name Highcharts.Time\n         *\n         * @param {Highcharts.TimeOptions} [options]\n         * Time options as defined in [chart.options.time](/highcharts/time).\n         */\n        class Time {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = {};\n                this.useUTC = false;\n                this.variableTimezone = false;\n                this.Date = win.Date;\n                /**\n                 * Get the time zone offset based on the current timezone information as\n                 * set in the global options.\n                 *\n                 * @function Highcharts.Time#getTimezoneOffset\n                 *\n                 * @param {number} timestamp\n                 *        The JavaScript timestamp to inspect.\n                 *\n                 * @return {number}\n                 *         The timezone offset in minutes compared to UTC.\n                 */\n                this.getTimezoneOffset = this.timezoneOffsetFunction();\n                this.update(options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Time units used in `Time.get` and `Time.set`\n             *\n             * @typedef {\"Date\"|\"Day\"|\"FullYear\"|\"Hours\"|\"Milliseconds\"|\"Minutes\"|\"Month\"|\"Seconds\"} Highcharts.TimeUnitValue\n             */\n            /**\n             * Get the value of a date object in given units, and subject to the Time\n             * object's current timezone settings. This function corresponds directly to\n             * JavaScripts `Date.getXXX / Date.getUTCXXX`, so instead of calling\n             * `date.getHours()` or `date.getUTCHours()` we will call\n             * `time.get('Hours')`.\n             *\n             * @function Highcharts.Time#get\n             *\n             * @param {Highcharts.TimeUnitValue} unit\n             * @param {Date} date\n             *\n             * @return {number}\n             *        The given time unit\n             */\n            get(unit, date) {\n                if (this.variableTimezone || this.timezoneOffset) {\n                    const realMs = date.getTime();\n                    const ms = realMs - this.getTimezoneOffset(date);\n                    date.setTime(ms); // Temporary adjust to timezone\n                    const ret = date['getUTC' + unit]();\n                    date.setTime(realMs); // Reset\n                    return ret;\n                }\n                // UTC time with no timezone handling\n                if (this.useUTC) {\n                    return date['getUTC' + unit]();\n                }\n                // Else, local time\n                return date['get' + unit]();\n            }\n            /**\n             * Set the value of a date object in given units, and subject to the Time\n             * object's current timezone settings. This function corresponds directly to\n             * JavaScripts `Date.setXXX / Date.setUTCXXX`, so instead of calling\n             * `date.setHours(0)` or `date.setUTCHours(0)` we will call\n             * `time.set('Hours', 0)`.\n             *\n             * @function Highcharts.Time#set\n             *\n             * @param {Highcharts.TimeUnitValue} unit\n             * @param {Date} date\n             * @param {number} value\n             *\n             * @return {number}\n             *        The epoch milliseconds of the updated date\n             */\n            set(unit, date, value) {\n                // UTC time with timezone handling\n                if (this.variableTimezone || this.timezoneOffset) {\n                    // For lower order time units, just set it directly using UTC\n                    // time\n                    if (unit === 'Milliseconds' ||\n                        unit === 'Seconds' ||\n                        (unit === 'Minutes' &&\n                            this.getTimezoneOffset(date) % 3600000 === 0) // #13961\n                    ) {\n                        return date['setUTC' + unit](value);\n                    }\n                    // Higher order time units need to take the time zone into\n                    // account\n                    // Adjust by timezone\n                    const offset = this.getTimezoneOffset(date);\n                    let ms = date.getTime() - offset;\n                    date.setTime(ms);\n                    date['setUTC' + unit](value);\n                    const newOffset = this.getTimezoneOffset(date);\n                    ms = date.getTime() + newOffset;\n                    return date.setTime(ms);\n                }\n                // UTC time with no timezone handling\n                if (this.useUTC ||\n                    // leap calculation in UTC only\n                    (hasNewSafariBug && unit === 'FullYear')) {\n                    return date['setUTC' + unit](value);\n                }\n                // Else, local time\n                return date['set' + unit](value);\n            }\n            /**\n             * Update the Time object with current options. It is called internally on\n             * initializing Highcharts, after running `Highcharts.setOptions` and on\n             * `Chart.update`.\n             *\n             * @private\n             * @function Highcharts.Time#update\n             *\n             * @param {Highcharts.TimeOptions} [options]\n             *\n             */\n            update(options = {}) {\n                const useUTC = pick(options.useUTC, true);\n                this.options = options = merge(true, this.options, options);\n                // Allow using a different Date class\n                this.Date = options.Date || win.Date || Date;\n                this.useUTC = useUTC;\n                this.timezoneOffset = (useUTC && options.timezoneOffset) || void 0;\n                this.getTimezoneOffset = this.timezoneOffsetFunction();\n                /*\n                 * The time object has options allowing for variable time zones, meaning\n                 * the axis ticks or series data needs to consider this.\n                 */\n                this.variableTimezone = useUTC && !!(options.getTimezoneOffset ||\n                    options.timezone);\n            }\n            /**\n             * Make a time and returns milliseconds. Interprets the inputs as UTC time,\n             * local time or a specific timezone time depending on the current time\n             * settings.\n             *\n             * @function Highcharts.Time#makeTime\n             *\n             * @param {number} year\n             *        The year\n             *\n             * @param {number} month\n             *        The month. Zero-based, so January is 0.\n             *\n             * @param {number} [date=1]\n             *        The day of the month\n             *\n             * @param {number} [hours=0]\n             *        The hour of the day, 0-23.\n             *\n             * @param {number} [minutes=0]\n             *        The minutes\n             *\n             * @param {number} [seconds=0]\n             *        The seconds\n             *\n             * @return {number}\n             *         The time in milliseconds since January 1st 1970.\n             */\n            makeTime(year, month, date, hours, minutes, seconds) {\n                let d, offset, newOffset;\n                if (this.useUTC) {\n                    d = this.Date.UTC.apply(0, arguments);\n                    offset = this.getTimezoneOffset(d);\n                    d += offset;\n                    newOffset = this.getTimezoneOffset(d);\n                    if (offset !== newOffset) {\n                        d += newOffset - offset;\n                        // A special case for transitioning from summer time to winter time.\n                        // When the clock is set back, the same time is repeated twice, i.e.\n                        // 02:30 am is repeated since the clock is set back from 3 am to\n                        // 2 am. We need to make the same time as local Date does.\n                    }\n                    else if (offset - 36e5 === this.getTimezoneOffset(d - 36e5) &&\n                        !hasOldSafariBug) {\n                        d -= 36e5;\n                    }\n                }\n                else {\n                    d = new this.Date(year, month, pick(date, 1), pick(hours, 0), pick(minutes, 0), pick(seconds, 0)).getTime();\n                }\n                return d;\n            }\n            /**\n             * Sets the getTimezoneOffset function. If the `timezone` option is set, a\n             * default getTimezoneOffset function with that timezone is returned. If\n             * a `getTimezoneOffset` option is defined, it is returned. If neither are\n             * specified, the function using the `timezoneOffset` option or 0 offset is\n             * returned.\n             *\n             * @private\n             * @function Highcharts.Time#timezoneOffsetFunction\n             *\n             * @return {Function}\n             *         A getTimezoneOffset function\n             */\n            timezoneOffsetFunction() {\n                const time = this, options = this.options, getTimezoneOffset = options.getTimezoneOffset;\n                if (!this.useUTC) {\n                    return (timestamp) => new Date(timestamp.toString()).getTimezoneOffset() * 60000;\n                }\n                if (options.timezone) {\n                    return (timestamp) => {\n                        try {\n                            const [date, gmt, hours, colon, minutes = 0] = \n                            // eslint-disable-next-line new-cap\n                            Intl.DateTimeFormat('en', {\n                                timeZone: options.timezone,\n                                timeZoneName: 'shortOffset'\n                            })\n                                .format(timestamp)\n                                .split(/(GMT|:)/)\n                                .map(Number), offset = -(hours + minutes / 60) * 60 * 60000;\n                            // Possible future NaNs stop here\n                            if (isNumber(offset)) {\n                                return offset;\n                            }\n                        }\n                        catch (e) {\n                            error(34);\n                        }\n                        return 0;\n                    };\n                }\n                // If not timezone is set, look for the getTimezoneOffset callback\n                if (this.useUTC && getTimezoneOffset) {\n                    return (timestamp) => getTimezoneOffset(timestamp.valueOf()) * 60000;\n                }\n                // Last, use the `timezoneOffset` option if set\n                return () => (time.timezoneOffset || 0) * 60000;\n            }\n            /**\n             * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970)\n             * into a human readable date string. The available format keys are listed\n             * below. Additional formats can be given in the\n             * {@link Highcharts.dateFormats} hook.\n             *\n             * Supported format keys:\n             * - `%a`: Short weekday, like 'Mon'\n             * - `%A`: Long weekday, like 'Monday'\n             * - `%d`: Two digit day of the month, 01 to 31\n             * - `%e`: Day of the month, 1 through 31\n             * - `%w`: Day of the week, 0 through 6\n             * - `%b`: Short month, like 'Jan'\n             * - `%B`: Long month, like 'January'\n             * - `%m`: Two digit month number, 01 through 12\n             * - `%y`: Two digits year, like 09 for 2009\n             * - `%Y`: Four digits year, like 2009\n             * - `%H`: Two digits hours in 24h format, 00 through 23\n             * - `%k`: Hours in 24h format, 0 through 23\n             * - `%I`: Two digits hours in 12h format, 00 through 11\n             * - `%l`: Hours in 12h format, 1 through 12\n             * - `%M`: Two digits minutes, 00 through 59\n             * - `%p`: Upper case AM or PM\n             * - `%P`: Lower case AM or PM\n             * - `%S`: Two digits seconds, 00 through 59\n             * - `%L`: Milliseconds (naming from Ruby)\n             *\n             * @example\n             * const time = new Highcharts.Time();\n             * const s = time.dateFormat('%Y-%m-%d %H:%M:%S', Date.UTC(2020, 0, 1));\n             * console.log(s); // => 2020-01-01 00:00:00\n             *\n             * @function Highcharts.Time#dateFormat\n             *\n             * @param {string} format\n             *        The desired format where various time representations are\n             *        prefixed with %.\n             *\n             * @param {number} [timestamp]\n             *        The JavaScript timestamp.\n             *\n             * @param {boolean} [capitalize=false]\n             *        Upper case first letter in the return.\n             *\n             * @return {string}\n             *         The formatted date.\n             */\n            dateFormat(format, timestamp, capitalize) {\n                if (!defined(timestamp) || isNaN(timestamp)) {\n                    return (H.defaultOptions.lang &&\n                        H.defaultOptions.lang.invalidDate ||\n                        '');\n                }\n                format = pick(format, '%Y-%m-%d %H:%M:%S');\n                const time = this, date = new this.Date(timestamp), \n                // get the basic time values\n                hours = this.get('Hours', date), day = this.get('Day', date), dayOfMonth = this.get('Date', date), month = this.get('Month', date), fullYear = this.get('FullYear', date), lang = H.defaultOptions.lang, langWeekdays = (lang && lang.weekdays), shortWeekdays = (lang && lang.shortWeekdays), \n                // List all format keys. Custom formats can be added from the\n                // outside.\n                replacements = extend({\n                    // Day\n                    // Short weekday, like 'Mon'\n                    a: shortWeekdays ?\n                        shortWeekdays[day] :\n                        langWeekdays[day].substr(0, 3),\n                    // Long weekday, like 'Monday'\n                    A: langWeekdays[day],\n                    // Two digit day of the month, 01 to 31\n                    d: pad(dayOfMonth),\n                    // Day of the month, 1 through 31\n                    e: pad(dayOfMonth, 2, ' '),\n                    // Day of the week, 0 through 6\n                    w: day,\n                    // Week (none implemented)\n                    // 'W': weekNumber(),\n                    // Month\n                    // Short month, like 'Jan'\n                    b: lang.shortMonths[month],\n                    // Long month, like 'January'\n                    B: lang.months[month],\n                    // Two digit month number, 01 through 12\n                    m: pad(month + 1),\n                    // Month number, 1 through 12 (#8150)\n                    o: month + 1,\n                    // Year\n                    // Two digits year, like 09 for 2009\n                    y: fullYear.toString().substr(2, 2),\n                    // Four digits year, like 2009\n                    Y: fullYear,\n                    // Time\n                    // Two digits hours in 24h format, 00 through 23\n                    H: pad(hours),\n                    // Hours in 24h format, 0 through 23\n                    k: hours,\n                    // Two digits hours in 12h format, 00 through 11\n                    I: pad((hours % 12) || 12),\n                    // Hours in 12h format, 1 through 12\n                    l: (hours % 12) || 12,\n                    // Two digits minutes, 00 through 59\n                    M: pad(this.get('Minutes', date)),\n                    // Upper case AM or PM\n                    p: hours < 12 ? 'AM' : 'PM',\n                    // Lower case AM or PM\n                    P: hours < 12 ? 'am' : 'pm',\n                    // Two digits seconds, 00 through  59\n                    S: pad(this.get('Seconds', date)),\n                    // Milliseconds (naming from Ruby)\n                    L: pad(Math.floor(timestamp % 1000), 3)\n                }, H.dateFormats);\n                // Do the replaces\n                objectEach(replacements, function (val, key) {\n                    // Regex would do it in one line, but this is faster\n                    while (format.indexOf('%' + key) !== -1) {\n                        format = format.replace('%' + key, typeof val === 'function' ? val.call(time, timestamp) : val);\n                    }\n                });\n                // Optionally capitalize the string and return\n                return capitalize ?\n                    (format.substr(0, 1).toUpperCase() +\n                        format.substr(1)) :\n                    format;\n            }\n            /**\n             * Resolve legacy formats of dateTimeLabelFormats (strings and arrays) into\n             * an object.\n             * @private\n             * @param {string|Array<T>|Highcharts.Dictionary<T>} f\n             * General format description\n             * @return {Highcharts.Dictionary<T>}\n             * The object definition\n             */\n            resolveDTLFormat(f) {\n                if (!isObject(f, true)) { // check for string or array\n                    f = splat(f);\n                    return {\n                        main: f[0],\n                        from: f[1],\n                        to: f[2]\n                    };\n                }\n                return f;\n            }\n            /**\n             * Return an array with time positions distributed on round time values\n             * right and right after min and max. Used in datetime axes as well as for\n             * grouping data on a datetime axis.\n             *\n             * @function Highcharts.Time#getTimeTicks\n             *\n             * @param {Highcharts.TimeNormalizedObject} normalizedInterval\n             *        The interval in axis values (ms) and the count\n             *\n             * @param {number} [min]\n             *        The minimum in axis values\n             *\n             * @param {number} [max]\n             *        The maximum in axis values\n             *\n             * @param {number} [startOfWeek=1]\n             *\n             * @return {Highcharts.AxisTickPositionsArray}\n             * Time positions\n             */\n            getTimeTicks(normalizedInterval, min, max, startOfWeek) {\n                const time = this, Date = time.Date, tickPositions = [], higherRanks = {}, \n                // When crossing DST, use the max. Resolves #6278.\n                minDate = new Date(min), interval = normalizedInterval.unitRange, count = normalizedInterval.count || 1;\n                let i, minYear, // used in months and years as a basis for Date.UTC()\n                variableDayLength, minDay;\n                startOfWeek = pick(startOfWeek, 1);\n                if (defined(min)) { // #1300\n                    time.set('Milliseconds', minDate, interval >= timeUnits.second ?\n                        0 : // #3935\n                        count * Math.floor(time.get('Milliseconds', minDate) / count)); // #3652, #3654\n                    if (interval >= timeUnits.second) { // second\n                        time.set('Seconds', minDate, interval >= timeUnits.minute ?\n                            0 : // #3935\n                            count * Math.floor(time.get('Seconds', minDate) / count));\n                    }\n                    if (interval >= timeUnits.minute) { // minute\n                        time.set('Minutes', minDate, interval >= timeUnits.hour ?\n                            0 :\n                            count * Math.floor(time.get('Minutes', minDate) / count));\n                    }\n                    if (interval >= timeUnits.hour) { // hour\n                        time.set('Hours', minDate, interval >= timeUnits.day ?\n                            0 :\n                            count * Math.floor(time.get('Hours', minDate) / count));\n                    }\n                    if (interval >= timeUnits.day) { // day\n                        time.set('Date', minDate, interval >= timeUnits.month ?\n                            1 :\n                            Math.max(1, count * Math.floor(time.get('Date', minDate) / count)));\n                    }\n                    if (interval >= timeUnits.month) { // month\n                        time.set('Month', minDate, interval >= timeUnits.year ? 0 :\n                            count * Math.floor(time.get('Month', minDate) / count));\n                        minYear = time.get('FullYear', minDate);\n                    }\n                    if (interval >= timeUnits.year) { // year\n                        minYear -= minYear % count;\n                        time.set('FullYear', minDate, minYear);\n                    }\n                    // week is a special case that runs outside the hierarchy\n                    if (interval === timeUnits.week) {\n                        // get start of current week, independent of count\n                        minDay = time.get('Day', minDate);\n                        time.set('Date', minDate, (time.get('Date', minDate) -\n                            minDay + startOfWeek +\n                            // We don't want to skip days that are before\n                            // startOfWeek (#7051)\n                            (minDay < startOfWeek ? -7 : 0)));\n                    }\n                    // Get basics for variable time spans\n                    minYear = time.get('FullYear', minDate);\n                    const minMonth = time.get('Month', minDate), minDateDate = time.get('Date', minDate), minHours = time.get('Hours', minDate);\n                    // Redefine min to the floored/rounded minimum time (#7432)\n                    min = minDate.getTime();\n                    // Handle local timezone offset\n                    if ((time.variableTimezone || !time.useUTC) && defined(max)) {\n                        // Detect whether we need to take the DST crossover into\n                        // consideration. If we're crossing over DST, the day length may\n                        // be 23h or 25h and we need to compute the exact clock time for\n                        // each tick instead of just adding hours. This comes at a cost,\n                        // so first we find out if it is needed (#4951).\n                        variableDayLength = (\n                        // Long range, assume we're crossing over.\n                        max - min > 4 * timeUnits.month ||\n                            // Short range, check if min and max are in different time\n                            // zones.\n                            time.getTimezoneOffset(min) !==\n                                time.getTimezoneOffset(max));\n                    }\n                    // Iterate and add tick positions at appropriate values\n                    let t = minDate.getTime();\n                    i = 1;\n                    while (t < max) {\n                        tickPositions.push(t);\n                        // if the interval is years, use Date.UTC to increase years\n                        if (interval === timeUnits.year) {\n                            t = time.makeTime(minYear + i * count, 0);\n                            // if the interval is months, use Date.UTC to increase months\n                        }\n                        else if (interval === timeUnits.month) {\n                            t = time.makeTime(minYear, minMonth + i * count);\n                            // if we're using global time, the interval is not fixed as it\n                            // jumps one hour at the DST crossover\n                        }\n                        else if (variableDayLength &&\n                            (interval === timeUnits.day || interval === timeUnits.week)) {\n                            t = time.makeTime(minYear, minMonth, minDateDate +\n                                i * count * (interval === timeUnits.day ? 1 : 7));\n                        }\n                        else if (variableDayLength &&\n                            interval === timeUnits.hour &&\n                            count > 1) {\n                            // make sure higher ranks are preserved across DST (#6797,\n                            // #7621)\n                            t = time.makeTime(minYear, minMonth, minDateDate, minHours + i * count);\n                            // else, the interval is fixed and we use simple addition\n                        }\n                        else {\n                            t += interval * count;\n                        }\n                        i++;\n                    }\n                    // push the last time\n                    tickPositions.push(t);\n                    // Handle higher ranks. Mark new days if the time is on midnight\n                    // (#950, #1649, #1760, #3349). Use a reasonable dropout threshold\n                    // to prevent looping over dense data grouping (#6156).\n                    if (interval <= timeUnits.hour && tickPositions.length < 10000) {\n                        tickPositions.forEach(function (t) {\n                            if (\n                            // Speed optimization, no need to run dateFormat unless\n                            // we're on a full or half hour\n                            t % 1800000 === 0 &&\n                                // Check for local or global midnight\n                                time.dateFormat('%H%M%S%L', t) === '000000000') {\n                                higherRanks[t] = 'day';\n                            }\n                        });\n                    }\n                }\n                // record information on the chosen unit - for dynamic label formatter\n                tickPositions.info = extend(normalizedInterval, {\n                    higherRanks,\n                    totalRange: interval * count\n                });\n                return tickPositions;\n            }\n            /**\n             * Get the optimal date format for a point, based on a range.\n             *\n             * @private\n             * @function Highcharts.Time#getDateFormat\n             *\n             * @param {number} range\n             *        The time range\n             *\n             * @param {number} timestamp\n             *        The timestamp of the date\n             *\n             * @param {number} startOfWeek\n             *        An integer representing the first day of the week, where 0 is\n             *        Sunday.\n             *\n             * @param {Highcharts.Dictionary<string>} dateTimeLabelFormats\n             *        A map of time units to formats.\n             *\n             * @return {string}\n             *         The optimal date format for a point.\n             */\n            getDateFormat(range, timestamp, startOfWeek, dateTimeLabelFormats) {\n                const dateStr = this.dateFormat('%m-%d %H:%M:%S.%L', timestamp), blank = '01-01 00:00:00.000', strpos = {\n                    millisecond: 15,\n                    second: 12,\n                    minute: 9,\n                    hour: 6,\n                    day: 3\n                };\n                let n = 'millisecond', \n                // for sub-millisecond data, #4223\n                lastN = n;\n                for (n in timeUnits) { // eslint-disable-line guard-for-in\n                    // If the range is exactly one week and we're looking at a\n                    // Sunday/Monday, go for the week format\n                    if (range === timeUnits.week &&\n                        +this.dateFormat('%w', timestamp) === startOfWeek &&\n                        dateStr.substr(6) === blank.substr(6)) {\n                        n = 'week';\n                        break;\n                    }\n                    // The first format that is too great for the range\n                    if (timeUnits[n] > range) {\n                        n = lastN;\n                        break;\n                    }\n                    // If the point is placed every day at 23:59, we need to show\n                    // the minutes as well. #2637.\n                    if (strpos[n] &&\n                        dateStr.substr(strpos[n]) !== blank.substr(strpos[n])) {\n                        break;\n                    }\n                    // Weeks are outside the hierarchy, only apply them on\n                    // Mondays/Sundays like in the first condition\n                    if (n !== 'week') {\n                        lastN = n;\n                    }\n                }\n                return this.resolveDTLFormat(dateTimeLabelFormats[n]).main;\n            }\n        }\n        /* *\n         *\n         * Default export\n         *\n         * */\n        /* *\n         *\n         * API Declarations\n         *\n         * */\n        /**\n         * Normalized interval.\n         *\n         * @interface Highcharts.TimeNormalizedObject\n         */ /**\n        * The count.\n        *\n        * @name Highcharts.TimeNormalizedObject#count\n        * @type {number|undefined}\n        */ /**\n        * The interval in axis values (ms).\n        *\n        * @name Highcharts.TimeNormalizedObject#unitRange\n        * @type {number}\n        */\n        /**\n         * Function of an additional date format specifier.\n         *\n         * @callback Highcharts.TimeFormatCallbackFunction\n         *\n         * @param {number} timestamp\n         *        The time to format.\n         *\n         * @return {string}\n         *         The formatted portion of the date.\n         */\n        /**\n         * Time ticks.\n         *\n         * @interface Highcharts.AxisTickPositionsArray\n         * @extends global.Array<number>\n         */ /**\n        * @name Highcharts.AxisTickPositionsArray#info\n        * @type {Highcharts.TimeTicksInfoObject|undefined}\n        */\n        /**\n         * A callback to return the time zone offset for a given datetime. It\n         * takes the timestamp in terms of milliseconds since January 1 1970,\n         * and returns the timezone offset in minutes. This provides a hook\n         * for drawing time based charts in specific time zones using their\n         * local DST crossover dates, with the help of external libraries.\n         *\n         * @callback Highcharts.TimezoneOffsetCallbackFunction\n         *\n         * @param {number} timestamp\n         * Timestamp in terms of milliseconds since January 1 1970.\n         *\n         * @return {number}\n         * Timezone offset in minutes.\n         */\n        ''; // keeps doclets above in JS file\n\n        return Time;\n    });\n    _registerModule(_modules, 'Core/Defaults.js', [_modules['Core/Chart/ChartDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Color/Palettes.js'], _modules['Core/Time.js'], _modules['Core/Utilities.js']], function (ChartDefaults, H, Palettes, Time, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice, svg } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Global default settings.\n         *\n         * @name Highcharts.defaultOptions\n         * @type {Highcharts.Options}\n         */ /**\n        * @optionparent\n        * @private\n        */\n        const defaultOptions = {\n            /**\n             * An array containing the default colors for the chart's series. When\n             * all colors are used, new colors are pulled from the start again.\n             *\n             * Default colors can also be set on a series or series.type basis,\n             * see [column.colors](#plotOptions.column.colors),\n             * [pie.colors](#plotOptions.pie.colors).\n             *\n             * In styled mode, the colors option doesn't exist. Instead, colors\n             * are defined in CSS and applied either through series or point class\n             * names, or through the [chart.colorCount](#chart.colorCount) option.\n             *\n             * @sample {highcharts} highcharts/chart/colors/\n             *         Assign a global color theme\n             * @sample highcharts/members/theme-v10/\n             *         Latest release styled like version 10\n             *\n             * @type    {Array<(Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject)>}\n             * @default [\n             *     \"#2caffe\",\n             *     \"#544fc5\",\n             *     \"#00e272\",\n             *     \"#fe6a35\",\n             *     \"#6b8abc\",\n             *     \"#d568fb\",\n             *     \"#2ee0ca\",\n             *     \"#fa4b42\",\n             *     \"#feb56a\",\n             *     \"#91e8e1\"\n             * ]\n             */\n            colors: Palettes.colors,\n            /**\n             * Styled mode only. Configuration object for adding SVG definitions for\n             * reusable elements. See [gradients, shadows and\n             * patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns)\n             * for more information and code examples.\n             *\n             * @type      {*}\n             * @since     5.0.0\n             * @apioption defs\n             */\n            /**\n             * @ignore-option\n             */\n            symbols: ['circle', 'diamond', 'square', 'triangle', 'triangle-down'],\n            /**\n             * The language object is global and it can't be set on each chart\n             * initialization. Instead, use `Highcharts.setOptions` to set it before any\n             * chart is initialized.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     lang: {\n             *         months: [\n             *             'Janvier', 'Février', 'Mars', 'Avril',\n             *             'Mai', 'Juin', 'Juillet', 'Août',\n             *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n             *         ],\n             *         weekdays: [\n             *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n             *             'Jeudi', 'Vendredi', 'Samedi'\n             *         ]\n             *     }\n             * });\n             * ```\n             */\n            lang: {\n                /**\n                 * The loading text that appears when the chart is set into the loading\n                 * state following a call to `chart.showLoading`.\n                 */\n                loading: 'Loading...',\n                /**\n                 * An array containing the months names. Corresponds to the `%B` format\n                 * in `Highcharts.dateFormat()`.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                 *          \"July\", \"August\", \"September\", \"October\", \"November\",\n                 *          \"December\"]\n                 */\n                months: [\n                    'January', 'February', 'March', 'April', 'May', 'June', 'July',\n                    'August', 'September', 'October', 'November', 'December'\n                ],\n                /**\n                 * An array containing the months names in abbreviated form. Corresponds\n                 * to the `%b` format in `Highcharts.dateFormat()`.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 *          \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n                 */\n                shortMonths: [\n                    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n                    'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n                ],\n                /**\n                 * An array containing the weekday names.\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n                 *          \"Friday\", \"Saturday\"]\n                 */\n                weekdays: [\n                    'Sunday', 'Monday', 'Tuesday', 'Wednesday',\n                    'Thursday', 'Friday', 'Saturday'\n                ],\n                /**\n                 * Short week days, starting Sunday. If not specified, Highcharts uses\n                 * the first three letters of the `lang.weekdays` option.\n                 *\n                 * @sample highcharts/lang/shortweekdays/\n                 *         Finnish two-letter abbreviations\n                 *\n                 * @type      {Array<string>}\n                 * @since     4.2.4\n                 * @apioption lang.shortWeekdays\n                 */\n                /**\n                 * What to show in a date field for invalid dates. Defaults to an empty\n                 * string.\n                 *\n                 * @type      {string}\n                 * @since     4.1.8\n                 * @product   highcharts highstock\n                 * @apioption lang.invalidDate\n                 */\n                /**\n                 * The title appearing on hovering the zoom in button. The text itself\n                 * defaults to \"+\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom in\n                 * @product   highmaps\n                 * @apioption lang.zoomIn\n                 */\n                /**\n                 * The title appearing on hovering the zoom out button. The text itself\n                 * defaults to \"-\" and can be changed in the button options.\n                 *\n                 * @type      {string}\n                 * @default   Zoom out\n                 * @product   highmaps\n                 * @apioption lang.zoomOut\n                 */\n                /**\n                 * The default decimal point used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments.\n                 *\n                 * @since 1.2.2\n                 */\n                decimalPoint: '.',\n                /**\n                 * [Metric prefixes](https://en.wikipedia.org/wiki/Metric_prefix) used\n                 * to shorten high numbers in axis labels. Replacing any of the\n                 * positions with `null` causes the full number to be written. Setting\n                 * `numericSymbols` to `undefined` disables shortening altogether.\n                 *\n                 * @sample {highcharts} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 * @sample {highstock} highcharts/lang/numericsymbols/\n                 *         Replacing the symbols with text\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\"]\n                 * @since   2.3.0\n                 */\n                numericSymbols: ['k', 'M', 'G', 'T', 'P', 'E'],\n                /**\n                 * The magnitude of [numericSymbols](#lang.numericSymbol) replacements.\n                 * Use 10000 for Japanese, Korean and various Chinese locales, which\n                 * use symbols for 10^4, 10^8 and 10^12.\n                 *\n                 * @sample highcharts/lang/numericsymbolmagnitude/\n                 *         10000 magnitude for Japanese\n                 *\n                 * @type      {number}\n                 * @default   1000\n                 * @since     5.0.3\n                 * @apioption lang.numericSymbolMagnitude\n                 */\n                /**\n                 * The text for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoom: 'Reset zoom',\n                /**\n                 * The tooltip title for the label appearing when a chart is zoomed.\n                 *\n                 * @since 1.2.4\n                 */\n                resetZoomTitle: 'Reset zoom level 1:1',\n                /**\n                 * The default thousands separator used in the `Highcharts.numberFormat`\n                 * method unless otherwise specified in the function arguments. Defaults\n                 * to a single space character, which is recommended in\n                 * [ISO 31-0](https://en.wikipedia.org/wiki/ISO_31-0#Numbers) and works\n                 * across Anglo-American and continental European languages.\n                 *\n                 * @default \\u0020\n                 * @since   1.2.2\n                 */\n                thousandsSep: ' '\n            },\n            /**\n             * Global options that don't apply to each chart. These options, like\n             * the `lang` options, must be set using the `Highcharts.setOptions`\n             * method.\n             *\n             * ```js\n             * Highcharts.setOptions({\n             *     global: {\n             *         useUTC: false\n             *     }\n             * });\n             * ```\n             */\n            /**\n             * _Canvg rendering for Android 2.x is removed as of Highcharts 5.0\\.\n             * Use the [libURL](#exporting.libURL) option to configure exporting._\n             *\n             * The URL to the additional file to lazy load for Android 2.x devices.\n             * These devices don't support SVG, so we download a helper file that\n             * contains [canvg](https://github.com/canvg/canvg), its dependency\n             * rbcolor, and our own CanVG Renderer class. To avoid hotlinking to\n             * our site, you can install canvas-tools.js on your own server and\n             * change this option accordingly.\n             *\n             * @deprecated\n             *\n             * @type      {string}\n             * @default   https://code.highcharts.com/{version}/modules/canvas-tools.js\n             * @product   highcharts highmaps\n             * @apioption global.canvasToolsURL\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.useUTC](#time.useUTC) that supports individual time settings\n             * per chart.\n             *\n             * @deprecated\n             *\n             * @type      {boolean}\n             * @apioption global.useUTC\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.Date](#time.Date) that supports individual time settings\n             * per chart.\n             *\n             * @deprecated\n             *\n             * @type      {Function}\n             * @product   highcharts highstock\n             * @apioption global.Date\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.getTimezoneOffset](#time.getTimezoneOffset) that supports\n             * individual time settings per chart.\n             *\n             * @deprecated\n             *\n             * @type      {Function}\n             * @product   highcharts highstock\n             * @apioption global.getTimezoneOffset\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.timezone](#time.timezone) that supports individual time\n             * settings per chart.\n             *\n             * @deprecated\n             *\n             * @type      {string}\n             * @product   highcharts highstock\n             * @apioption global.timezone\n             */\n            /**\n             * This option is deprecated since v6.0.5. Instead, use\n             * [time.timezoneOffset](#time.timezoneOffset) that supports individual\n             * time settings per chart.\n             *\n             * @deprecated\n             *\n             * @type      {number}\n             * @product   highcharts highstock\n             * @apioption global.timezoneOffset\n             */\n            global: {},\n            /**\n             * Time options that can apply globally or to individual charts. These\n             * settings affect how `datetime` axes are laid out, how tooltips are\n             * formatted, how series\n             * [pointIntervalUnit](#plotOptions.series.pointIntervalUnit) works and how\n             * the Highcharts Stock range selector handles time.\n             *\n             * The common use case is that all charts in the same Highcharts object\n             * share the same time settings, in which case the global settings are set\n             * using `setOptions`.\n             *\n             * ```js\n             * // Apply time settings globally\n             * Highcharts.setOptions({\n             *     time: {\n             *         timezone: 'Europe/London'\n             *     }\n             * });\n             * // Apply time settings by instance\n             * let chart = Highcharts.chart('container', {\n             *     time: {\n             *         timezone: 'America/New_York'\n             *     },\n             *     series: [{\n             *         data: [1, 4, 3, 5]\n             *     }]\n             * });\n             *\n             * // Use the Time object\n             * console.log(\n             *        'Current time in New York',\n             *        chart.time.dateFormat('%Y-%m-%d %H:%M:%S', Date.now())\n             * );\n             * ```\n             *\n             * Since v6.0.5, the time options were moved from the `global` obect to the\n             * `time` object, and time options can be set on each individual chart.\n             *\n             * @sample {highcharts|highstock}\n             *         highcharts/time/timezone/\n             *         Set the timezone globally\n             * @sample {highcharts}\n             *         highcharts/time/individual/\n             *         Set the timezone per chart instance\n             * @sample {highstock}\n             *         stock/time/individual/\n             *         Set the timezone per chart instance\n             *\n             * @since     6.0.5\n             * @optionparent time\n             */\n            time: {\n                /**\n                 * A custom `Date` class for advanced date handling. For example,\n                 * [JDate](https://github.com/tahajahangir/jdate) can be hooked in to\n                 * handle Jalali dates.\n                 *\n                 * @type      {*}\n                 * @since     4.0.4\n                 * @product   highcharts highstock gantt\n                 */\n                Date: void 0,\n                /**\n                 * A callback to return the time zone offset for a given datetime. It\n                 * takes the timestamp in terms of milliseconds since January 1 1970,\n                 * and returns the timezone offset in minutes. This provides a hook\n                 * for drawing time based charts in specific time zones using their\n                 * local DST crossover dates, with the help of external libraries.\n                 *\n                 * @see [global.timezoneOffset](#global.timezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/gettimezoneoffset/\n                 *         Use moment.js to draw Oslo time regardless of browser locale\n                 *\n                 * @type      {Highcharts.TimezoneOffsetCallbackFunction}\n                 * @since     4.1.0\n                 * @product   highcharts highstock gantt\n                 */\n                getTimezoneOffset: void 0,\n                /**\n                 * A named time zone. Supported time zone names rely on the browser\n                 * implementations, as described in the [mdn\n                 * docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#timezone).\n                 * If the given time zone is not recognized by the browser, Highcharts\n                 * provides a warning and falls back to returning a 0 offset,\n                 * corresponding to the UCT time zone.\n                 *\n                 * Until v11.2.0, this option depended on moment.js.\n                 *\n                 * @see [getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezone/ Europe/Oslo\n                 *\n                 * @type      {string}\n                 * @since     5.0.7\n                 * @product   highcharts highstock gantt\n                 */\n                timezone: void 0,\n                /**\n                 * The timezone offset in minutes. Positive values are west, negative\n                 * values are east of UTC, as in the ECMAScript\n                 * [getTimezoneOffset](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset)\n                 * method. Use this to display UTC based data in a predefined time zone.\n                 *\n                 * @see [time.getTimezoneOffset](#time.getTimezoneOffset)\n                 *\n                 * @sample {highcharts|highstock} highcharts/time/timezoneoffset/\n                 *         Timezone offset\n                 *\n                 * @since     3.0.8\n                 * @product   highcharts highstock gantt\n                 */\n                timezoneOffset: 0,\n                /**\n                 * Whether to use UTC time for axis scaling, tickmark placement and\n                 * time display in `Highcharts.dateFormat`. Advantages of using UTC\n                 * is that the time displays equally regardless of the user agent's\n                 * time zone settings. Local time can be used when the data is loaded\n                 * in real time or when correct Daylight Saving Time transitions are\n                 * required.\n                 *\n                 * @sample {highcharts} highcharts/time/useutc-true/\n                 *         True by default\n                 * @sample {highcharts} highcharts/time/useutc-false/\n                 *         False\n                 */\n                useUTC: true\n            },\n            chart: ChartDefaults,\n            /**\n             * The chart's main title.\n             *\n             * @sample {highmaps} maps/title/title/\n             *         Title options demonstrated\n             */\n            title: {\n                /**\n                 * When the title is floating, the plot area will not move to make space\n                 * for it.\n                 *\n                 * @sample {highcharts} highcharts/chart/zoomtype-none/\n                 *         False by default\n                 * @sample {highcharts} highcharts/title/floating/\n                 *         True - title on top of the plot area\n                 * @sample {highstock} stock/chart/title-floating/\n                 *         True - title on top of the plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption title.floating\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption title.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When a value is given, the title behaves\n                 * as if [floating](#title.floating) were `true`.\n                 *\n                 * @sample {highcharts} highcharts/title/verticalalign/\n                 *         Chart title in bottom right corner\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption title.verticalAlign\n                 */\n                /**\n                 * The x position of the title relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption title.x\n                 */\n                /**\n                 * The y position of the title relative to the alignment within\n                 * [chart.spacingTop](#chart.spacingTop) and [chart.spacingBottom](\n                 * #chart.spacingBottom). By default it depends on the font size.\n                 *\n                 * @sample {highcharts} highcharts/title/y/\n                 *         Title inside the plot area\n                 * @sample {highstock} stock/chart/title-verticalalign/\n                 *         Chart title in bottom right corner\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption title.y\n                 */\n                /**\n                 * CSS styles for the title. Use this for font styling, but use `align`,\n                 * `x` and `y` for text alignment.\n                 *\n                 * In styled mode, the title style is given in the `.highcharts-title`\n                 * class.\n                 *\n                 * @sample {highcharts} highcharts/title/style/\n                 *         Custom color and weight\n                 * @sample {highstock} stock/chart/title-style/\n                 *         Custom color and weight\n                 * @sample highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {highcharts|highmaps} { \"color\": \"#333333\", \"fontSize\": \"18px\" }\n                 * @default   {highstock} { \"color\": \"#333333\", \"fontSize\": \"16px\" }\n                 */\n                style: {\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    fontWeight: 'bold'\n                },\n                /**\n                 * The title of the chart. To disable the title, set the `text` to\n                 * `undefined`.\n                 *\n                 * @sample {highcharts} highcharts/title/text/\n                 *         Custom title\n                 * @sample {highstock} stock/chart/title-text/\n                 *         Custom title\n                 *\n                 * @default {highcharts|highmaps} Chart title\n                 * @default {highstock} undefined\n                 */\n                text: 'Chart title',\n                /**\n                 * The horizontal alignment of the title. Can be one of \"left\", \"center\"\n                 * and \"right\".\n                 *\n                 * @sample {highcharts} highcharts/title/align/\n                 *         Aligned to the plot area (x = 70px = margin left - spacing\n                 *         left)\n                 * @sample {highstock} stock/chart/title-align/\n                 *         Aligned to the plot area (x = 50px = margin left - spacing\n                 *         left)\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * The margin between the title and the plot area, or if a subtitle\n                 * is present, the margin between the subtitle and the plot area.\n                 *\n                 * @sample {highcharts} highcharts/title/margin-50/\n                 *         A chart title margin of 50\n                 * @sample {highcharts} highcharts/title/margin-subtitle/\n                 *         The same margin applied with a subtitle\n                 * @sample {highstock} stock/chart/title-margin/\n                 *         A chart title margin of 50\n                 *\n                 * @since 2.1\n                 */\n                margin: 15,\n                /**\n                 * Adjustment made to the title width, normally to reserve space for\n                 * the exporting burger menu.\n                 *\n                 * @sample highcharts/title/widthadjust/\n                 *         Wider menu, greater padding\n                 *\n                 * @since 4.2.5\n                 */\n                widthAdjust: -44\n            },\n            /**\n             * The chart's subtitle. This can be used both to display a subtitle below\n             * the main title, and to display random text anywhere in the chart. The\n             * subtitle can be updated after chart initialization through the\n             * `Chart.setTitle` method.\n             *\n             * @sample {highmaps} maps/title/subtitle/\n             *         Subtitle options demonstrated\n             */\n            subtitle: {\n                /**\n                 * When the subtitle is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/floating/\n                 *         Floating title and subtitle\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote floating at bottom right of plot area\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption subtitle.floating\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 * @apioption subtitle.style\n                 */\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption subtitle.useHTML\n                 */\n                /**\n                 * The vertical alignment of the title. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the subtitle behaves as\n                 * floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 * @since     2.1\n                 * @apioption subtitle.verticalAlign\n                 */\n                /**\n                 * The x position of the subtitle relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption subtitle.x\n                 */\n                /**\n                 * The y position of the subtitle relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`. By default the subtitle\n                 * is laid out below the title unless the title is floating.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/verticalalign/\n                 *         Footnote at the bottom right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at the bottom right of plot area\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption subtitle.y\n                 */\n                /**\n                 * CSS styles for the title.\n                 *\n                 * In styled mode, the subtitle style is given in the\n                 * `.highcharts-subtitle` class.\n                 *\n                 * @sample {highcharts} highcharts/subtitle/style/\n                 *         Custom color and weight\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highstock} stock/chart/subtitle-style\n                 *         Custom color and weight\n                 * @sample {highstock} highcharts/css/titles/\n                 *         Styled mode\n                 * @sample {highmaps} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The subtitle of the chart.\n                 *\n                 * @sample {highcharts|highstock} highcharts/subtitle/text/\n                 *         Custom subtitle\n                 * @sample {highcharts|highstock} highcharts/subtitle/text-formatted/\n                 *         Formatted and linked text.\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the subtitle. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @sample {highcharts} highcharts/subtitle/align/\n                 *         Footnote at right of plot area\n                 * @sample {highstock} stock/chart/subtitle-footnote\n                 *         Footnote at bottom right of plot area\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * Adjustment made to the subtitle width, normally to reserve space\n                 * for the exporting burger menu.\n                 *\n                 * @see [title.widthAdjust](#title.widthAdjust)\n                 *\n                 * @sample highcharts/title/widthadjust/\n                 *         Wider menu, greater padding\n                 *\n                 * @since 4.2.5\n                 */\n                widthAdjust: -44\n            },\n            /**\n             * The chart's caption, which will render below the chart and will be part\n             * of exported charts. The caption can be updated after chart initialization\n             * through the `Chart.update` or `Chart.caption.update` methods.\n             *\n             * @sample highcharts/caption/text/\n             *         A chart with a caption\n             * @since  7.2.0\n             */\n            caption: {\n                /**\n                 * When the caption is floating, the plot area will not move to make\n                 * space for it.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.floating\n                 */\n                /**\n                 * The margin between the caption and the plot area.\n                 */\n                margin: 15,\n                /**\n                 * Whether to\n                 * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the text.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption caption.useHTML\n                 */\n                /**\n                 * The x position of the caption relative to the alignment within\n                 * `chart.spacingLeft` and `chart.spacingRight`.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption caption.x\n                 */\n                /**\n                 * The y position of the caption relative to the alignment within\n                 * `chart.spacingTop` and `chart.spacingBottom`.\n                 *\n                 * @type      {number}\n                 * @apioption caption.y\n                 */\n                /**\n                 * CSS styles for the caption.\n                 *\n                 * In styled mode, the caption style is given in the\n                 * `.highcharts-caption` class.\n                 *\n                 * @sample {highcharts} highcharts/css/titles/\n                 *         Styled mode\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @default   {\"color\": \"#666666\"}\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                },\n                /**\n                 * The caption text of the chart.\n                 *\n                 * @sample {highcharts} highcharts/caption/text/\n                 *         Custom caption\n                 */\n                text: '',\n                /**\n                 * The horizontal alignment of the caption. Can be one of \"left\",\n                 *  \"center\" and \"right\".\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * The vertical alignment of the caption. Can be one of `\"top\"`,\n                 * `\"middle\"` and `\"bottom\"`. When middle, the caption behaves as\n                 * floating.\n                 *\n                 * @type      {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'bottom'\n            },\n            /**\n             * The plotOptions is a wrapper object for config objects for each series\n             * type. The config objects for each series can also be overridden for\n             * each series item as given in the series array.\n             *\n             * Configuration options for the series are given in three levels. Options\n             * for all series in a chart are given in the [plotOptions.series](\n             * #plotOptions.series) object. Then options for all series of a specific\n             * type are given in the plotOptions of that type, for example\n             * `plotOptions.line`. Next, options for one single series are given in\n             * [the series array](#series).\n             */\n            plotOptions: {},\n            /**\n             * The legend is a box containing a symbol and name for each series\n             * item or point item in the chart. Each series (or points in case\n             * of pie charts) is represented by a symbol and its name in the legend.\n             *\n             * It is possible to override the symbol creator function and create\n             * [custom legend symbols](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/studies/legend-custom-symbol/).\n             *\n             * @productdesc {highmaps}\n             * A Highmaps legend by default contains one legend item per series, but if\n             * a `colorAxis` is defined, the axis will be displayed in the legend.\n             * Either as a gradient, or as multiple legend items for `dataClasses`.\n             */\n            legend: {\n                /**\n                 * The background color of the legend.\n                 *\n                 * @see In styled mode, the legend background fill can be applied with\n                 *      the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/backgroundcolor/\n                 *         Yellowish background\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption legend.backgroundColor\n                 */\n                /**\n                 * The width of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke width can be applied\n                 *      with the `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderwidth/\n                 *         2px border width\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @apioption legend.borderWidth\n                 */\n                /**\n                 * Enable or disable the legend. There is also a series-specific option,\n                 * [showInLegend](#plotOptions.series.showInLegend), that can hide the\n                 * series from the legend. In some series types this is `false` by\n                 * default, so it must set to `true` in order to show the legend for the\n                 * series.\n                 *\n                 * @sample {highcharts} highcharts/legend/enabled-false/ Legend disabled\n                 * @sample {highstock} stock/legend/align/ Various legend options\n                 * @sample {highmaps} maps/legend/enabled-false/ Legend disabled\n                 *\n                 * @default {highstock} false\n                 * @default {highmaps} true\n                 * @default {gantt} false\n                 */\n                enabled: true,\n                /**\n                 * The horizontal alignment of the legend box within the chart area.\n                 * Valid values are `left`, `center` and `right`.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/align/\n                 *         Legend at the right of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'center',\n                /**\n                 * If the [layout](legend.layout) is `horizontal` and the legend items\n                 * span over two lines or more, whether to align the items into vertical\n                 * columns. Setting this to `false` makes room for more items, but will\n                 * look more messy.\n                 *\n                 * @since 6.1.0\n                 */\n                alignColumns: true,\n                /**\n                 * A CSS class name to apply to the legend group.\n                 */\n                className: 'highcharts-no-tooltip',\n                /**\n                 * When the legend is floating, the plot area ignores it and is allowed\n                 * to be placed below it.\n                 *\n                 * @sample {highcharts} highcharts/legend/floating-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/legend/floating-true/\n                 *         True\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Floating legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.1\n                 * @apioption legend.floating\n                 */\n                /**\n                 * The layout of the legend items. Can be one of `horizontal` or\n                 * `vertical` or `proximate`. When `proximate`, the legend items will be\n                 * placed as close as possible to the graphs they're representing,\n                 * except in inverted charts or when the legend position doesn't allow\n                 * it.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highcharts} highcharts/legend/layout-vertical/\n                 *         Vertical\n                 * @sample highcharts/legend/layout-proximate\n                 *         Labels proximate to the data\n                 * @sample {highstock} stock/legend/layout-horizontal/\n                 *         Horizontal by default\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Vertical with data classes\n                 * @sample {highmaps} maps/legend/layout-vertical/\n                 *         Vertical with color axis gradient\n                 *\n                 * @validvalue [\"horizontal\", \"vertical\", \"proximate\"]\n                 */\n                layout: 'horizontal',\n                /**\n                 * In a legend with horizontal layout, the itemDistance defines the\n                 * pixel distance between each item.\n                 *\n                 * @sample {highcharts} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 * @sample {highstock} highcharts/legend/layout-horizontal/\n                 *         50px item distance\n                 *\n                 * @type      {number}\n                 * @default   {highcharts} 20\n                 * @default   {highstock} 20\n                 * @default   {highmaps} 8\n                 * @since     3.0.3\n                 * @apioption legend.itemDistance\n                 */\n                /**\n                 * The pixel bottom margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginBottom: 2,\n                /**\n                 * The pixel top margin for each legend item.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @since     2.2.0\n                 */\n                itemMarginTop: 2,\n                /**\n                 * The width for each legend item. By default the items are laid out\n                 * successively. In a [horizontal layout](legend.layout), if the items\n                 * are laid out across two rows or more, they will be vertically aligned\n                 * depending on the [legend.alignColumns](legend.alignColumns) option.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemwidth-default/\n                 *         Undefined by default\n                 * @sample {highcharts} highcharts/legend/itemwidth-80/\n                 *         80 for aligned legend items\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption legend.itemWidth\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for each legend label. Available variables relates to properties on\n                 * the series, or the point in case of pies.\n                 *\n                 * @type      {string}\n                 * @default   {name}\n                 * @since     1.3\n                 * @apioption legend.labelFormat\n                 */\n                /* eslint-disable valid-jsdoc */\n                /**\n                 * Callback function to format each of the series' labels. The `this`\n                 * keyword refers to the series object, or the point object in case of\n                 * pie charts. By default the series or point name is printed.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps the context can also be a data class in case of a\n                 * `colorAxis`.\n                 *\n                 * @sample {highcharts} highcharts/legend/labelformatter/\n                 *         Add text\n                 * @sample {highmaps} maps/legend/labelformatter/\n                 *         Data classes with label formatter\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Point|Series>}\n                 */\n                labelFormatter: function () {\n                    /** eslint-enable valid-jsdoc */\n                    return this.name;\n                },\n                /**\n                 * Line height for the legend items. Deprecated as of 2.1\\. Instead,\n                 * the line height for each item can be set using\n                 * `itemStyle.lineHeight`, and the padding between items using\n                 * `itemMarginTop` and `itemMarginBottom`.\n                 *\n                 * @sample {highcharts} highcharts/legend/lineheight/\n                 *         Setting padding\n                 *\n                 * @deprecated\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @since     2.0\n                 * @product   highcharts gantt\n                 * @apioption legend.lineHeight\n                 */\n                /**\n                 * If the plot area sized is calculated automatically and the legend is\n                 * not floating, the legend margin is the space between the legend and\n                 * the axis labels or plot area.\n                 *\n                 * @sample {highcharts} highcharts/legend/margin-default/\n                 *         12 pixels by default\n                 * @sample {highcharts} highcharts/legend/margin-30/\n                 *         30 pixels\n                 *\n                 * @type      {number}\n                 * @default   12\n                 * @since     2.1\n                 * @apioption legend.margin\n                 */\n                /**\n                 * Maximum pixel height for the legend. When the maximum height is\n                 * extended, navigation will show.\n                 *\n                 * @type      {number}\n                 * @since     2.3.0\n                 * @apioption legend.maxHeight\n                 */\n                /**\n                 * The color of the drawn border around the legend.\n                 *\n                 * @see In styled mode, the legend border stroke can be applied with the\n                 *      `.highcharts-legend-box` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/bordercolor/\n                 *         Brown border\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                /**\n                 * The border corner radius of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/borderradius-default/\n                 *         Square by default\n                 * @sample {highcharts} highcharts/legend/borderradius-round/\n                 *         5px rounded\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 */\n                borderRadius: 0,\n                /**\n                 * Options for the paging or navigation appearing when the legend is\n                 * overflown. Navigation works well on screen, but not in static\n                 * exported images. One way of working around that is to\n                 * [increase the chart height in\n                 * export](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/legend/navigation-enabled-false/).\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 */\n                navigation: {\n                    /**\n                     * How to animate the pages when navigating up or down. A value of\n                     * `true` applies the default navigation given in the\n                     * `chart.animation` option. Additional options can be given as an\n                     * object containing values for easing and duration.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @default   true\n                     * @since     2.2.4\n                     * @apioption legend.navigation.animation\n                     */\n                    /**\n                     * The pixel size of the up and down arrows in the legend paging\n                     * navigation.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {number}\n                     * @default   12\n                     * @since     2.2.4\n                     * @apioption legend.navigation.arrowSize\n                     */\n                    /**\n                     * Whether to enable the legend navigation. In most cases, disabling\n                     * the navigation results in an unwanted overflow.\n                     *\n                     * See also the\n                     * [adapt chart to legend](https://github.com/highcharts/adapt-chart-to-legend)\n                     * plugin for a solution to extend the chart height to make room for\n                     * the legend, optionally in exported charts only.\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     4.2.4\n                     * @apioption legend.navigation.enabled\n                     */\n                    /**\n                     * Text styles for the legend page navigation.\n                     *\n                     * @see In styled mode, the navigation items are styled with the\n                     *      `.highcharts-legend-navigation` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type      {Highcharts.CSSObject}\n                     * @since     2.2.4\n                     * @apioption legend.navigation.style\n                     */\n                    style: {\n                        fontSize: '0.8em'\n                    },\n                    /**\n                     * The color for the active up or down arrow in the legend page\n                     * navigation.\n                     *\n                     * @see In styled mode, the active arrow be styled with the\n                     *      `.highcharts-legend-nav-active` class.\n                     *\n                     * @sample  {highcharts} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     * @sample  {highstock} highcharts/legend/navigation/\n                     *          Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    activeColor: \"#0022ff\" /* Palette.highlightColor100 */,\n                    /**\n                     * The color of the inactive up or down arrow in the legend page\n                     * navigation. .\n                     *\n                     * @see In styled mode, the inactive arrow be styled with the\n                     *      `.highcharts-legend-nav-inactive` class.\n                     *\n                     * @sample {highcharts} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     * @sample {highstock} highcharts/legend/navigation/\n                     *         Legend page navigation demonstrated\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.2.4\n                     */\n                    inactiveColor: \"#cccccc\" /* Palette.neutralColor20 */\n                },\n                /**\n                 * The inner padding of the legend box.\n                 *\n                 * @sample {highcharts|highstock} highcharts/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 *\n                 * @type      {number}\n                 * @default   8\n                 * @since     2.2.0\n                 * @apioption legend.padding\n                 */\n                /**\n                 * Whether to reverse the order of the legend items compared to the\n                 * order of the series or points as defined in the configuration object.\n                 *\n                 * @see [yAxis.reversedStacks](#yAxis.reversedStacks),\n                 *      [series.legendIndex](#series.legendIndex)\n                 *\n                 * @sample {highcharts} highcharts/legend/reversed/\n                 *         Stacked bar with reversed legend\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     1.2.5\n                 * @apioption legend.reversed\n                 */\n                /**\n                 * Whether to show the symbol on the right side of the text rather than\n                 * the left side. This is common in Arabic and Hebrew.\n                 *\n                 * @sample {highcharts} highcharts/legend/rtl/\n                 *         Symbol to the right\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption legend.rtl\n                 */\n                /**\n                 * CSS styles for the legend area. In the 1.x versions the position\n                 * of the legend area was determined by CSS. In 2.x, the position is\n                 * determined by properties like `align`, `verticalAlign`, `x` and `y`,\n                 * but the styles are still parsed for backwards compatibility.\n                 *\n                 * @deprecated\n                 *\n                 * @type      {Highcharts.CSSObject}\n                 * @product   highcharts highstock\n                 * @apioption legend.style\n                 */\n                /**\n                 * CSS styles for each legend item. Only a subset of CSS is supported,\n                 * notably those options related to text. The default `textOverflow`\n                 * property makes long texts truncate. Set it to `undefined` to wrap\n                 * text instead. A `width` property can be added to control the text\n                 * width.\n                 *\n                 * @see In styled mode, the legend items can be styled with the\n                 *      `.highcharts-legend-item` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemstyle/\n                 *         Bold black text\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#333333\", \"cursor\": \"pointer\", \"fontSize\": \"0.75em\", \"fontWeight\": \"bold\", \"textOverflow\": \"ellipsis\"}\n                 */\n                itemStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /**\n                     * @ignore\n                     */\n                    cursor: 'pointer',\n                    /**\n                     * @ignore\n                     */\n                    fontSize: '0.8em',\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'none',\n                    /**\n                     * @ignore\n                     */\n                    textOverflow: 'ellipsis'\n                },\n                /**\n                 * CSS styles for each legend item in hover mode. Only a subset of\n                 * CSS is supported, notably those options related to text. Properties\n                 * are inherited from `style` unless overridden here.\n                 *\n                 * @see In styled mode, the hovered legend items can be styled with\n                 *      the `.highcharts-legend-item:hover` pesudo-class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhoverstyle/\n                 *         Red on hover\n                 * @sample {highmaps} maps/legend/itemstyle/\n                 *         Item text styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#000000\"}\n                 */\n                itemHoverStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * CSS styles for each legend item when the corresponding series or\n                 * point is hidden. Only a subset of CSS is supported, notably those\n                 * options related to text. Properties are inherited from `style`\n                 * unless overridden here.\n                 *\n                 * @see In styled mode, the hidden legend items can be styled with\n                 *      the `.highcharts-legend-item-hidden` class.\n                 *\n                 * @sample {highcharts} highcharts/legend/itemhiddenstyle/\n                 *         Darker gray color\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"color\": \"#cccccc\"}\n                 */\n                itemHiddenStyle: {\n                    /**\n                     * @ignore\n                     */\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * @ignore\n                     */\n                    textDecoration: 'line-through'\n                },\n                /**\n                 * Whether to apply a drop shadow to the legend. A `backgroundColor`\n                 * also needs to be applied for this to take effect. The shadow can be\n                 * an object configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @sample {highcharts} highcharts/legend/shadow/\n                 *         White background and drop shadow\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/border-background/\n                 *         Border and background options\n                 *\n                 * @type {boolean|Highcharts.CSSObject}\n                 */\n                shadow: false,\n                /**\n                 * Default styling for the checkbox next to a legend item when\n                 * `showCheckbox` is true.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 * @default {\"width\": \"13px\", \"height\": \"13px\", \"position\":\"absolute\"}\n                 */\n                itemCheckboxStyle: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    width: '13px',\n                    /**\n                     * @ignore\n                     */\n                    height: '13px'\n                },\n                // itemWidth: undefined,\n                /**\n                 * When this is true, the legend symbol width will be the same as\n                 * the symbol height, which in turn defaults to the font size of the\n                 * legend items.\n                 *\n                 * @since 5.0.0\n                 */\n                squareSymbol: true,\n                /**\n                 * The pixel height of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to the font size of legend items.\n                 *\n                 * Note: This option is a default source of color axis height, if the\n                 * [colorAxis.height](https://api.highcharts.com/highcharts/colorAxis.height)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a vertical color\n                 * axis, the height defaults to 200.\n                 *\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         No distance between data classes\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolHeight\n                 */\n                /**\n                 * The border radius of the symbol for series types that use a rectangle\n                 * in the legend. Defaults to half the `symbolHeight`, effectively\n                 * creating a circle.\n                 *\n                 * For color axis scales, it defaults to 3.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highstock} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 * @sample {highmaps} highcharts/legend/symbolradius/\n                 *         Round symbols\n                 *\n                 * @type      {number}\n                 * @since     3.0.8\n                 * @apioption legend.symbolRadius\n                 */\n                /**\n                 * The pixel width of the legend item symbol. When the `squareSymbol`\n                 * option is set, this defaults to the `symbolHeight`, otherwise 16.\n                 *\n                 * Note: This option is a default source of color axis width, if the\n                 * [colorAxis.width](https://api.highcharts.com/highcharts/colorAxis.width)\n                 * option is not set.\n                 *\n                 * @productdesc {highmaps}\n                 * In Highmaps, when the symbol is the gradient of a horizontal color\n                 * axis, the width defaults to 200.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolwidth/\n                 *         Greater symbol width and padding\n                 * @sample {highmaps} maps/legend/padding-itemmargin/\n                 *         Padding and item margins demonstrated\n                 * @sample {highmaps} maps/legend/layout-vertical-sized/\n                 *         Sized vertical gradient\n                 *\n                 * @type      {number}\n                 * @apioption legend.symbolWidth\n                 */\n                /**\n                 * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the legend item texts.\n                 *\n                 * Prior to 4.1.7, when using HTML, [legend.navigation](\n                 * #legend.navigation) was disabled.\n                 *\n                 * @sample highcharts/legend/scrollable-vertical/\n                 *         Legend with vertical scrollable extension\n                 * @sample highcharts/legend/scrollable-horizontal/\n                 *         Legend with horizontal scrollable extension\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @apioption legend.useHTML\n                 */\n                /**\n                 * For a color axis with data classes, how many decimals to render in\n                 * the legend. The default preserves the decimals of the range numbers.\n                 *\n                 * @type      {number}\n                 * @default   -1\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueDecimals\n                 */\n                /**\n                 * For a color axis with data classes, a suffix for the range numbers in\n                 * the legend.\n                 *\n                 * @type      {string}\n                 * @default   ''\n                 * @product   highcharts highmaps\n                 * @apioption legend.valueSuffix\n                 */\n                /**\n                 * The width of the legend box. If a number is set, it translates to\n                 * pixels. Since v7.0.2 it allows setting a percent string of the full\n                 * chart width, for example `40%`.\n                 *\n                 * Defaults to the full chart width for legends below or above the\n                 * chart, half the chart width for legends to the left and right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 * @sample {highcharts} highcharts/legend/width-percent/\n                 *         A percent of the chart width\n                 *\n                 * @type      {number|string}\n                 * @since     2.0\n                 * @apioption legend.width\n                 */\n                /**\n                 * The pixel padding between the legend item symbol and the legend\n                 * item text.\n                 *\n                 * @sample {highcharts} highcharts/legend/symbolpadding/\n                 *         Greater symbol width and padding\n                 */\n                symbolPadding: 5,\n                /**\n                 * The vertical alignment of the legend box. Can be one of `top`,\n                 * `middle` or `bottom`. Vertical position can be further determined\n                 * by the `y` option.\n                 *\n                 * In the case that the legend is aligned in a corner position, the\n                 * `layout` option will determine whether to place it above/below\n                 * or on the side of the plot area.\n                 *\n                 * When the [layout](#legend.layout) option is `proximate`, the\n                 * `verticalAlign` option doesn't apply.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'bottom',\n                // width: undefined,\n                /**\n                 * The x offset of the legend relative to its horizontal alignment\n                 * `align` within chart.spacingLeft and chart.spacingRight. Negative\n                 * x moves it to the left, positive x moves it to the right.\n                 *\n                 * @sample {highcharts} highcharts/legend/width/\n                 *         Aligned to the plot area\n                 *\n                 * @since 2.0\n                 */\n                x: 0,\n                /**\n                 * The vertical offset of the legend relative to it's vertical alignment\n                 * `verticalAlign` within chart.spacingTop and chart.spacingBottom.\n                 *  Negative y moves it up, positive y moves it down.\n                 *\n                 * @sample {highcharts} highcharts/legend/verticalalign/\n                 *         Legend 100px from the top of the chart\n                 * @sample {highstock} stock/legend/align/\n                 *         Various legend options\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend alignment\n                 *\n                 * @since 2.0\n                 */\n                y: 0,\n                /**\n                 * A title to be added on top of the legend.\n                 *\n                 * @sample {highcharts} highcharts/legend/title/\n                 *         Legend title\n                 * @sample {highmaps} maps/legend/alignment/\n                 *         Legend with title\n                 *\n                 * @since 3.0\n                 */\n                title: {\n                    /**\n                     * A text or HTML string for the title.\n                     *\n                     * @type      {string}\n                     * @since     3.0\n                     * @apioption legend.title.text\n                     */\n                    /**\n                     * Generic CSS styles for the legend title.\n                     *\n                     * @see In styled mode, the legend title is styled with the\n                     *      `.highcharts-legend-title` class.\n                     *\n                     * @type    {Highcharts.CSSObject}\n                     * @default {\"fontSize\": \"0.75em\", \"fontWeight\": \"bold\"}\n                     * @since   3.0\n                     */\n                    style: {\n                        /**\n                         * @ignore\n                         */\n                        fontSize: '0.8em',\n                        /**\n                         * @ignore\n                         */\n                        fontWeight: 'bold'\n                    }\n                }\n            },\n            /**\n             * The loading options control the appearance of the loading screen\n             * that covers the plot area on chart operations. This screen only\n             * appears after an explicit call to `chart.showLoading()`. It is a\n             * utility for developers to communicate to the end user that something\n             * is going on, for example while retrieving new data via an XHR connection.\n             * The \"Loading...\" text itself is not part of this configuration\n             * object, but part of the `lang` object.\n             */\n            loading: {\n                /**\n                 * The duration in milliseconds of the fade out effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.hideDuration\n                 */\n                /**\n                 * The duration in milliseconds of the fade in effect.\n                 *\n                 * @sample highcharts/loading/hideduration/\n                 *         Fade in and out over a second\n                 *\n                 * @type      {number}\n                 * @default   100\n                 * @since     1.2.0\n                 * @apioption loading.showDuration\n                 */\n                /**\n                 * CSS styles for the loading label `span`.\n                 *\n                 * @see In styled mode, the loading label is styled with the\n                 *      `.highcharts-loading-inner` class.\n                 *\n                 * @sample {highcharts|highmaps} highcharts/loading/labelstyle/\n                 *         Vertically centered\n                 * @sample {highstock} stock/loading/general/\n                 *         Label styles\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"fontWeight\": \"bold\", \"position\": \"relative\", \"top\": \"45%\"}\n                 * @since   1.2.0\n                 */\n                labelStyle: {\n                    /**\n                     * @ignore\n                     */\n                    fontWeight: 'bold',\n                    /**\n                     * @ignore\n                     */\n                    position: 'relative',\n                    /**\n                     * @ignore\n                     */\n                    top: '45%'\n                },\n                /**\n                 * CSS styles for the loading screen that covers the plot area.\n                 *\n                 * In styled mode, the loading label is styled with the\n                 * `.highcharts-loading` class.\n                 *\n                 * @sample  {highcharts|highmaps} highcharts/loading/style/\n                 *          Gray plot area, white text\n                 * @sample  {highstock} stock/loading/general/\n                 *          Gray plot area, white text\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"position\": \"absolute\", \"backgroundColor\": \"#ffffff\", \"opacity\": 0.5, \"textAlign\": \"center\"}\n                 * @since   1.2.0\n                 */\n                style: {\n                    /**\n                     * @ignore\n                     */\n                    position: 'absolute',\n                    /**\n                     * @ignore\n                     */\n                    backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                    /**\n                     * @ignore\n                     */\n                    opacity: 0.5,\n                    /**\n                     * @ignore\n                     */\n                    textAlign: 'center'\n                }\n            },\n            /**\n             * Options for the tooltip that appears when the user hovers over a\n             * series or point.\n             *\n             * @declare Highcharts.TooltipOptions\n             */\n            tooltip: {\n                /**\n                 * The color of the tooltip border. When `undefined`, the border takes\n                 * the color of the corresponding series or point.\n                 *\n                 * Note that the [borderWidth](#tooltip.borderWidth) is usually 0 by\n                 * default, so the border color may not be visible until a border width\n                 * is set.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/ Follow\n                 *         series by default\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-black/ Black\n                 *         border\n                 * @sample {highstock} stock/tooltip/general/ Styled tooltip\n                 * @sample {highmaps} maps/tooltip/background-border/ Background and\n                 *         border demo\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption tooltip.borderColor\n                 */\n                /**\n                 * A CSS class name to apply to the tooltip's container div,\n                 * allowing unique CSS styling for each chart.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.className\n                 */\n                /**\n                 * Since 4.1, the crosshair definitions are moved to the Axis object\n                 * in order for a better separation from the tooltip. See\n                 * [xAxis.crosshair](#xAxis.crosshair).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/crosshairs-x/\n                 *         Enable a crosshair for the x value\n                 *\n                 * @deprecated\n                 *\n                 * @type      {*}\n                 * @default   true\n                 * @apioption tooltip.crosshairs\n                 */\n                /**\n                 * Distance from point to tooltip in pixels.\n                 *\n                 * @type      {number}\n                 * @default   16\n                 * @apioption tooltip.distance\n                 */\n                /**\n                 * Whether the tooltip should follow the mouse as it moves across\n                 * columns, pie slices and other point types with an extent.\n                 * By default it behaves this way for pie, polygon, map, sankey\n                 * and wordcloud series by override in the `plotOptions`\n                 * for those series types.\n                 *\n                 * Does not apply if [split](#tooltip.split) is `true`.\n                 *\n                 * For touch moves to behave the same way, [followTouchMove](\n                 * #tooltip.followTouchMove) must be `true` also.\n                 *\n                 * @sample highcharts/tooltip/followpointer/\n                 *         Tooltip follow pointer comparison\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} false\n                 * @default   {highmaps} true\n                 * @since     3.0\n                 * @apioption tooltip.followPointer\n                 */\n                /**\n                 * Whether the tooltip should update as the finger moves on a touch\n                 * device. If this is `true` and [chart.panning](#chart.panning) is\n                 * set,`followTouchMove` will take over one-finger touches, so the user\n                 * needs to use two fingers for zooming and panning.\n                 *\n                 * Note the difference to [followPointer](#tooltip.followPointer) that\n                 * only defines the _position_ of the tooltip. If `followPointer` is\n                 * false in for example a column series, the tooltip will show above or\n                 * below the column, but as `followTouchMove` is true, the tooltip will\n                 * jump from column to column as the user swipes across the plot area.\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} true\n                 * @default   {highstock} true\n                 * @default   {highmaps} false\n                 * @since     3.0.1\n                 * @apioption tooltip.followTouchMove\n                 */\n                /**\n                 * A [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * for the whole tooltip. When format strings are a requirement, it is\n                 * usually more convenient to use `headerFormat`, `pointFormat` and\n                 * `footerFormat`, but the `format` option allows combining them into\n                 * one setting.\n                 *\n                 * The context of the format string is the same as that of the\n                 * `formatter` callback.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/format-shared/\n                 *         Format for shared tooltip\n                 *\n                 * @type      {string}\n                 * @default   undefined\n                 * @since 11.1.0\n                 * @apioption tooltip.format\n                 */\n                /**\n                 * Callback function to format the text of the tooltip from scratch. In\n                 * case of single or [shared](#tooltip.shared) tooltips, a string should\n                 * be returned. In case of [split](#tooltip.split) tooltips, it should\n                 * return an array where the first item is the header, and subsequent\n                 * items are mapped to the points. Return `false` to disable tooltip for\n                 * a specific point on series.\n                 *\n                 * A subset of HTML is supported. Unless `useHTML` is true, the HTML of\n                 * the tooltip is parsed and converted to SVG, therefore this isn't a\n                 * complete HTML renderer. The following HTML tags are supported: `b`,\n                 * `br`, `em`, `i`, `span`, `strong`. Spans can be styled with a `style`\n                 * attribute, but only text-related CSS, that is shared with SVG, is\n                 * handled.\n                 *\n                 * The available data in the formatter differ a bit depending on whether\n                 * the tooltip is shared or split, or belongs to a single point. In a\n                 * shared/split tooltip, all properties except `x`, which is common for\n                 * all points, are kept in an array, `this.points`.\n                 *\n                 * Available data are:\n                 *\n                 * - **this.percentage (not shared) /**\n                 *   **this.points[i].percentage (shared)**:\n                 *   Stacked series and pies only. The point's percentage of the total.\n                 *\n                 * - **this.point (not shared) / this.points[i].point (shared)**:\n                 *   The point object. The point name, if defined, is available through\n                 *   `this.point.name`.\n                 *\n                 * - **this.points**:\n                 *   In a shared tooltip, this is an array containing all other\n                 *   properties for each point.\n                 *\n                 * - **this.series (not shared) / this.points[i].series (shared)**:\n                 *   The series object. The series name is available through\n                 *   `this.series.name`.\n                 *\n                 * - **this.total (not shared) / this.points[i].total (shared)**:\n                 *   Stacked series only. The total value at this point's x value.\n                 *\n                 * - **this.x**:\n                 *   The x value. This property is the same regardless of the tooltip\n                 *   being shared or not.\n                 *\n                 * - **this.y (not shared) / this.points[i].y (shared)**:\n                 *   The y value.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/formatter-simple/\n                 *         Simple string formatting\n                 * @sample {highcharts} highcharts/tooltip/formatter-shared/\n                 *         Formatting with shared tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Formatting with split tooltip\n                 * @sample highcharts/tooltip/formatter-conditional-default/\n                 *         Extending default formatter\n                 * @sample {highstock} stock/tooltip/formatter/\n                 *         Formatting with shared tooltip\n                 * @sample {highmaps} maps/tooltip/formatter/\n                 *         String formatting\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.formatter\n                 */\n                /**\n                 * Callback function to format the text of the tooltip for\n                 * visible null points.\n                 * Works analogously to [formatter](#tooltip.formatter).\n                 *\n                 * @sample highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {Highcharts.TooltipFormatterCallbackFunction}\n                 * @apioption tooltip.nullFormatter\n                 */\n                /**\n                 * Whether to allow the tooltip to render outside the chart's SVG\n                 * element box. By default (`false`), the tooltip is rendered within the\n                 * chart's SVG element, which results in the tooltip being aligned\n                 * inside the chart area. For small charts, this may result in clipping\n                 * or overlapping. When `true`, a separate SVG element is created and\n                 * overlaid on the page, allowing the tooltip to be aligned inside the\n                 * page itself.\n                 *\n                 * Defaults to `true` if `chart.scrollablePlotArea` is activated,\n                 * otherwise `false`.\n                 *\n                 * @sample highcharts/tooltip/outside\n                 *         Small charts with tooltips outside\n                 *\n                 * @type      {boolean|undefined}\n                 * @default   undefined\n                 * @since     6.1.1\n                 * @apioption tooltip.outside\n                 */\n                /**\n                 * A callback function for formatting the HTML output for a single point\n                 * in the tooltip. Like the `pointFormat` string, but with more\n                 * flexibility.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n                 * @since     4.1.0\n                 * @context   Highcharts.Point\n                 * @apioption tooltip.pointFormatter\n                 */\n                /**\n                 * A callback function to place the tooltip in a custom position. The\n                 * callback receives three parameters: `labelWidth`, `labelHeight` and\n                 * `point`, where point contains values for `plotX` and `plotY` telling\n                 * where the reference point is in the plot area. Add `chart.plotLeft`\n                 * and `chart.plotTop` to get the full coordinates.\n                 *\n                 * To find the actual hovered `Point` instance, use\n                 * `this.chart.hoverPoint`. For shared or split tooltips, all the hover\n                 * points are available in `this.chart.hoverPoints`.\n                 *\n                 * Since v7, when [tooltip.split](#tooltip.split) option is enabled,\n                 * positioner is called for each of the boxes separately, including\n                 * xAxis header. xAxis header is not a point, instead `point` argument\n                 * contains info: `{ plotX: Number, plotY: Number, isHeader: Boolean }`\n                 *\n                 * The return should be an object containing x and y values, for example\n                 * `{ x: 100, y: 100 }`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/positioner/\n                 *         A fixed tooltip position on top of the chart\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         A fixed tooltip position\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Split tooltip with fixed positions\n                 * @sample {highstock} stock/tooltip/positioner-scrollable-plotarea/\n                 *         Scrollable plot area combined with tooltip positioner\n                 *\n                 * @type      {Highcharts.TooltipPositionerCallbackFunction}\n                 * @since     2.2.4\n                 * @apioption tooltip.positioner\n                 */\n                /**\n                 * Split the tooltip into one label per series, with the header close\n                 * to the axis. This is recommended over [shared](#tooltip.shared)\n                 * tooltips for charts with multiple line series, generally making them\n                 * easier to read. This option takes precedence over `tooltip.shared`.\n                 *\n                 * Not supported for [polar](#chart.polar) and [inverted](#chart.inverted) charts.\n                 *\n                 * @productdesc {highstock} In Highcharts Stock, tooltips are split\n                 * by default since v6.0.0. Stock charts typically contain\n                 * multi-dimension points and multiple panes, making split tooltips\n                 * the preferred layout over\n                 * the previous `shared` tooltip.\n                 *\n                 * @sample highcharts/tooltip/split/\n                 *         Split tooltip\n                 * @sample {highcharts|highstock} highcharts/tooltip/formatter-split/\n                 *         Split tooltip and custom formatter callback\n                 *\n                 * @type      {boolean}\n                 * @default   {highcharts} false\n                 * @default   {highstock} true\n                 * @since     5.0.0\n                 * @product   highcharts highstock\n                 * @apioption tooltip.split\n                 */\n                /**\n                 * Prevents the tooltip from switching or closing, when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @type      {boolean}\n                 * @since     8.0.1\n                 * @apioption tooltip.stickOnContact\n                 */\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     2.2\n                 * @apioption tooltip.useHTML\n                 */\n                /**\n                 * How many decimals to show in each series' y value. This is\n                 * overridable in each series' tooltip options object. The default is to\n                 * preserve all decimals.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {number|undefined}\n                 * @since     2.2\n                 * @apioption tooltip.valueDecimals\n                 */\n                /**\n                 * A string to prepend to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valuePrefix\n                 */\n                /**\n                 * A string to append to each series' y value. Overridable in each\n                 * series' tooltip options object.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 * @sample {highmaps} maps/tooltip/valuedecimals/\n                 *         Set decimals, prefix and suffix for the value\n                 *\n                 * @type      {string}\n                 * @since     2.2\n                 * @apioption tooltip.valueSuffix\n                 */\n                /**\n                 * The format for the date in the tooltip header if the X axis is a\n                 * datetime axis. The default is a best guess based on the smallest\n                 * distance between points in the chart.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/xdateformat/\n                 *         A different format\n                 *\n                 * @type      {string}\n                 * @product   highcharts highstock gantt\n                 * @apioption tooltip.xDateFormat\n                 */\n                /**\n                 * How many decimals to show for the `point.change`\n                 * or the `point.cumulativeSum` value when the `series.compare`\n                 * or the `series.cumulative` option is set.\n                 * This is overridable in each series' tooltip options object.\n                 *\n                 * @type      {number}\n                 * @default   2\n                 * @since     1.0.1\n                 * @product   highstock\n                 * @apioption tooltip.changeDecimals\n                 */\n                /**\n                 * Enable or disable the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/enabled/\n                 *         Disabled\n                 * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n                 *         Disable tooltip and show values on chart instead\n                 */\n                enabled: true,\n                /**\n                 * Enable or disable animation of the tooltip.\n                 *\n                 * @type       {boolean}\n                 * @default    true\n                 * @since      2.3.0\n                 */\n                animation: svg,\n                /**\n                 * The radius of the rounded border corners.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         Default border radius\n                 * @sample {highcharts} highcharts/tooltip/borderradius-0/\n                 *         Square borders\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 */\n                borderRadius: 3,\n                /**\n                 * For series on datetime axes, the date format in the tooltip's\n                 * header will by default be guessed based on the closest data points.\n                 * This member gives the default string representations used for\n                 * each unit. For an overview of the replacement codes, see\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat).\n                 *\n                 * @see [xAxis.dateTimeLabelFormats](#xAxis.dateTimeLabelFormats)\n                 *\n                 * @type    {Highcharts.Dictionary<string>}\n                 * @product highcharts highstock gantt\n                 */\n                dateTimeLabelFormats: {\n                    /** @internal */\n                    millisecond: '%A, %e %b, %H:%M:%S.%L',\n                    /** @internal */\n                    second: '%A, %e %b, %H:%M:%S',\n                    /** @internal */\n                    minute: '%A, %e %b, %H:%M',\n                    /** @internal */\n                    hour: '%A, %e %b, %H:%M',\n                    /** @internal */\n                    day: '%A, %e %b %Y',\n                    /** @internal */\n                    week: 'Week from %A, %e %b %Y',\n                    /** @internal */\n                    month: '%B %Y',\n                    /** @internal */\n                    year: '%Y'\n                },\n                /**\n                 * A string to append to the tooltip format.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @since 2.2\n                 */\n                footerFormat: '',\n                /**\n                 * The name of a symbol to use for the border around the tooltip\n                 * header. Applies only when [tooltip.split](#tooltip.split) is\n                 * enabled.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @see [tooltip.shape](#tooltip.shape)\n                 *\n                 * @sample {highstock} stock/tooltip/split-positioner/\n                 *         Different shapes for header and split boxes\n                 *\n                 * @type       {Highcharts.TooltipShapeValue}\n                 * @validvalue [\"callout\", \"rect\"]\n                 * @since      7.0\n                 */\n                headerShape: 'callout',\n                /**\n                 * The number of milliseconds to wait until the tooltip is hidden when\n                 * mouse out from a point or chart.\n                 *\n                 * @since 3.0\n                 */\n                hideDelay: 500,\n                /**\n                 * Padding inside the tooltip, in pixels.\n                 *\n                 * @since 5.0.0\n                 */\n                padding: 8,\n                /**\n                 * The name of a symbol to use for the border around the tooltip. Can\n                 * be one of: `\"callout\"`, `\"circle\"` or `\"rect\"`. When\n                 * [tooltip.split](#tooltip.split)\n                 * option is enabled, shape is applied to all boxes except header, which\n                 * is controlled by\n                 * [tooltip.headerShape](#tooltip.headerShape).\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols` the same way as for\n                 * [series.marker.symbol](plotOptions.line.marker.symbol).\n                 *\n                 * @type  {Highcharts.TooltipShapeValue}\n                 * @since 4.0\n                 */\n                shape: 'callout',\n                /**\n                 * When the tooltip is shared, the entire plot area will capture mouse\n                 * movement or touch events. Tooltip texts for series types with ordered\n                 * data (not pie, scatter, flags etc) will be shown in a single bubble.\n                 * This is recommended for single series charts and for tablet/mobile\n                 * optimized charts.\n                 *\n                 * See also [tooltip.split](#tooltip.split), that is better suited for\n                 * charts with many series, especially line-type series. The\n                 * `tooltip.split` option takes precedence over `tooltip.shared`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/shared-false/\n                 *         False by default\n                 * @sample {highcharts} highcharts/tooltip/shared-true/\n                 *         True\n                 * @sample {highcharts} highcharts/tooltip/shared-x-crosshair/\n                 *         True with x axis crosshair\n                 * @sample {highcharts} highcharts/tooltip/shared-true-mixed-types/\n                 *         True with mixed series types\n                 *\n                 * @since   2.1\n                 * @product highcharts highstock\n                 */\n                shared: false,\n                /**\n                 * Proximity snap for graphs or single points. It defaults to 10 for\n                 * mouse-powered devices and 25 for touch devices.\n                 *\n                 * Note that in most cases the whole plot area captures the mouse\n                 * movement, and in these cases `tooltip.snap` doesn't make sense. This\n                 * applies when [stickyTracking](#plotOptions.series.stickyTracking)\n                 * is `true` (default) and when the tooltip is [shared](#tooltip.shared)\n                 * or [split](#tooltip.split).\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         10 px by default\n                 * @sample {highcharts} highcharts/tooltip/snap-50/\n                 *         50 px on graph\n                 *\n                 * @type    {number}\n                 * @default 10/25\n                 * @since   1.2.0\n                 * @product highcharts highstock\n                 */\n                snap: isTouchDevice ? 25 : 10,\n                /**\n                 * The HTML of the tooltip header line. Variables are enclosed by\n                 * curly brackets. Available variables are `point.key`, `series.name`,\n                 * `series.color` and other members from the `point` and `series`\n                 * objects. The `point.key` variable contains the category name, x\n                 * value or datetime string depending on the type of axis. For datetime\n                 * axes, the `point.key` date format can be set using\n                 * `tooltip.xDateFormat`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highstock} highcharts/tooltip/footerformat/\n                 *         An HTML table in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.headerFormat\n                 */\n                headerFormat: '<span style=\"font-size: 0.8em\">{point.key}</span><br/>',\n                /**\n                 * The HTML of the null point's line in the tooltip. Works analogously\n                 * to [pointFormat](#tooltip.pointFormat).\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-nullformat\n                 *         Format data label and tooltip for null point.\n                 *\n                 * @type      {string}\n                 * @apioption tooltip.nullFormat\n                 */\n                /**\n                 * The HTML of the point's line in the tooltip. Variables are enclosed\n                 * by curly brackets. Available variables are `point.x`, `point.y`,\n                 * `series.name` and `series.color` and other properties on the same\n                 * form. Furthermore, `point.y` can be extended by the\n                 * `tooltip.valuePrefix` and `tooltip.valueSuffix` variables. This can\n                 * also be overridden for each series, which makes it a good hook for\n                 * displaying units.\n                 *\n                 * In styled mode, the dot is colored by a class name rather\n                 * than the point color.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/pointformat/\n                 *         A different point format with value suffix\n                 * @sample {highcharts|highstock} highcharts/tooltip/pointformat-extra-information/\n                 *         Show extra information about points in the tooltip\n                 * @sample {highmaps} maps/tooltip/format/\n                 *         Format demo\n                 *\n                 * @type       {string}\n                 * @since      2.2\n                 * @apioption  tooltip.pointFormat\n                 */\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>',\n                /**\n                 * The background color or gradient for the tooltip.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-solid/\n                 *         Yellowish background\n                 * @sample {highcharts} highcharts/tooltip/backgroundcolor-gradient/\n                 *         Gradient\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#ffffff\" /* Palette.backgroundColor */,\n                /**\n                 * The pixel width of the tooltip border. Defaults to 0 for single\n                 * tooltips and 1 for split tooltips.\n                 *\n                 * In styled mode, the stroke width is set in the\n                 * `.highcharts-tooltip-box` class.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         2 pixels\n                 * @sample {highcharts} highcharts/tooltip/borderwidth/\n                 *         No border (shadow only)\n                 * @sample {highcharts} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highstock} stock/tooltip/general/\n                 *         Custom tooltip\n                 * @sample {highstock} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 * @sample {highmaps} maps/tooltip/background-border/\n                 *         Background and border demo\n                 * @sample {highmaps} highcharts/css/tooltip-border-background/\n                 *         Tooltip in styled mode\n                 *\n                 * @type {number}\n                 */\n                borderWidth: void 0,\n                /**\n                 * Whether to apply a drop shadow to the tooltip.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/bordercolor-default/\n                 *         True by default\n                 * @sample {highcharts} highcharts/tooltip/shadow/\n                 *         False\n                 * @sample {highmaps} maps/tooltip/positioner/\n                 *         Fixed tooltip position, border and shadow disabled\n                 *\n                 * @type {boolean|Highcharts.ShadowOptionsObject}\n                 */\n                shadow: true,\n                /**\n                 * Prevents the tooltip from switching or closing when touched or\n                 * pointed.\n                 *\n                 * @sample highcharts/tooltip/stickoncontact/\n                 *         Tooltip sticks on pointer contact\n                 *\n                 * @since 8.0.1\n                 */\n                stickOnContact: false,\n                /**\n                 * CSS styles for the tooltip. The tooltip can also be styled through\n                 * the CSS class `.highcharts-tooltip`.\n                 *\n                 * Note that the default `pointerEvents` style makes the tooltip ignore\n                 * mouse events, so in order to use clickable tooltips, this value must\n                 * be set to `auto`.\n                 *\n                 * @sample {highcharts} highcharts/tooltip/style/\n                 *         Greater padding, bold text\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @internal */\n                    cursor: 'default',\n                    /** @internal */\n                    fontSize: '0.8em'\n                },\n                /**\n                 * Use HTML to render the contents of the tooltip instead of SVG. Using\n                 * HTML allows advanced formatting like tables and images in the\n                 * tooltip. It is also recommended for rtl languages as it works around\n                 * rtl bugs in early Firefox.\n                 *\n                 * @sample {highcharts|highstock} highcharts/tooltip/footerformat/\n                 *         A table for value alignment\n                 * @sample {highcharts|highstock} highcharts/tooltip/fullhtml/\n                 *         Full HTML tooltip\n                 * @sample {highmaps} maps/tooltip/usehtml/\n                 *         Pure HTML tooltip\n                 *\n                 * @since 2.2\n                 */\n                useHTML: false\n            },\n            /**\n             * Highchart by default puts a credits label in the lower right corner\n             * of the chart. This can be changed using these options.\n             */\n            credits: {\n                /**\n                 * Credits for map source to be concatenated with conventional credit\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapTextFull](#credits.mapTextFull)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   \\u00a9 <a href=\"{geojson.copyrightUrl}\">{geojson.copyrightShort}</a>\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapText\n                 */\n                /**\n                 * Detailed credits for map source to be displayed on hover of credits\n                 * text. By default this is a format string that collects copyright\n                 * information from the map if available.\n                 *\n                 * @see [mapText](#credits.mapText)\n                 * @see [text](#credits.text)\n                 *\n                 * @type      {string}\n                 * @default   {geojson.copyright}\n                 * @since     4.2.2\n                 * @product   highmaps\n                 * @apioption credits.mapTextFull\n                 */\n                /**\n                 * Whether to show the credits text.\n                 *\n                 * @sample {highcharts} highcharts/credits/enabled-false/\n                 *         Credits disabled\n                 * @sample {highstock} stock/credits/enabled/\n                 *         Credits disabled\n                 * @sample {highmaps} maps/credits/enabled-false/\n                 *         Credits disabled\n                 */\n                enabled: true,\n                /**\n                 * The URL for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                href: 'https://www.highcharts.com?credits',\n                /**\n                 * Position configuration for the credits label.\n                 *\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highcharts} highcharts/credits/position-left/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Left aligned\n                 *\n                 * @type    {Highcharts.AlignObject}\n                 * @since   2.1\n                 */\n                position: {\n                    /** @internal */\n                    align: 'right',\n                    /** @internal */\n                    x: -10,\n                    /** @internal */\n                    verticalAlign: 'bottom',\n                    /** @internal */\n                    y: -5\n                },\n                /**\n                 * CSS styles for the credits label.\n                 *\n                 * @see In styled mode, credits styles can be set with the\n                 *      `.highcharts-credits` class.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    cursor: 'pointer',\n                    /** @internal */\n                    color: \"#999999\" /* Palette.neutralColor40 */,\n                    /** @internal */\n                    fontSize: '0.6em'\n                },\n                /**\n                 * The text for the credits label.\n                 *\n                 * @productdesc {highmaps}\n                 * If a map is loaded as GeoJSON, the text defaults to\n                 * `Highcharts @ {map-credits}`. Otherwise, it defaults to\n                 * `Highcharts.com`.\n                 *\n                 * @sample {highcharts} highcharts/credits/href/\n                 *         Custom URL and text\n                 * @sample {highmaps} maps/credits/customized/\n                 *         Custom URL and text\n                 */\n                text: 'Highcharts.com'\n            }\n        };\n        /* eslint-disable spaced-comment */\n\n        defaultOptions.chart.styledMode = false;\n\n        '';\n        const defaultTime = new Time(defaultOptions.time);\n        /**\n         * Get the updated default options. Until 3.0.7, merely exposing defaultOptions\n         * for outside modules wasn't enough because the setOptions method created a new\n         * object.\n         *\n         * @function Highcharts.getOptions\n         *\n         * @return {Highcharts.Options}\n         * Default options.\n         */\n        function getOptions() {\n            return defaultOptions;\n        }\n        /**\n         * Merge the default options with custom options and return the new options\n         * structure. Commonly used for defining reusable templates.\n         *\n         * @sample highcharts/global/useutc-false Setting a global option\n         * @sample highcharts/members/setoptions Applying a global theme\n         *\n         * @function Highcharts.setOptions\n         *\n         * @param {Highcharts.Options} options\n         * The new custom chart options.\n         *\n         * @return {Highcharts.Options}\n         * Updated options.\n         */\n        function setOptions(options) {\n            // Copy in the default options\n            merge(true, defaultOptions, options);\n            // Update the time object\n            if (options.time || options.global) {\n                if (H.time) {\n                    H.time.update(merge(defaultOptions.global, defaultOptions.time, options.global, options.time));\n                }\n                else {\n                    /**\n                     * Global `Time` object with default options. Since v6.0.5, time\n                     * settings can be applied individually for each chart. If no\n                     * individual settings apply, this `Time` object is shared by all\n                     * instances.\n                     *\n                     * @name Highcharts.time\n                     * @type {Highcharts.Time}\n                     */\n                    H.time = defaultTime;\n                }\n            }\n            return defaultOptions;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DefaultOptions = {\n            defaultOptions,\n            defaultTime,\n            getOptions,\n            setOptions\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"plotBox\"|\"spacingBox\"} Highcharts.ButtonRelativeToValue\n         */\n        /**\n         * Gets fired when a series is added to the chart after load time, using the\n         * `addSeries` method. Returning `false` prevents the series from being added.\n         *\n         * @callback Highcharts.ChartAddSeriesCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {Highcharts.ChartAddSeriesEventObject} event\n         *        The event that occured.\n         */\n        /**\n         * Contains common event information. Through the `options` property you can\n         * access the series options that were passed to the `addSeries` method.\n         *\n         * @interface Highcharts.ChartAddSeriesEventObject\n         */ /**\n        * The series options that were passed to the `addSeries` method.\n        * @name Highcharts.ChartAddSeriesEventObject#options\n        * @type {Highcharts.SeriesOptionsType}\n        */ /**\n        * Prevents the default behaviour of the event.\n        * @name Highcharts.ChartAddSeriesEventObject#preventDefault\n        * @type {Function}\n        */ /**\n        * The event target.\n        * @name Highcharts.ChartAddSeriesEventObject#target\n        * @type {Highcharts.Chart}\n        */ /**\n        * The event type.\n        * @name Highcharts.ChartAddSeriesEventObject#type\n        * @type {\"addSeries\"}\n        */\n        /**\n         * Gets fired when clicking on the plot background.\n         *\n         * @callback Highcharts.ChartClickCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {Highcharts.PointerEventObject} event\n         *        The event that occured.\n         */\n        /**\n         * Contains an axes of the clicked spot.\n         *\n         * @interface Highcharts.ChartClickEventAxisObject\n         */ /**\n        * Axis at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#axis\n        * @type {Highcharts.Axis}\n        */ /**\n        * Axis value at the clicked spot.\n        * @name Highcharts.ChartClickEventAxisObject#value\n        * @type {number}\n        */\n        /**\n         * Contains information about the clicked spot on the chart. Remember the unit\n         * of a datetime axis is milliseconds since 1970-01-01 00:00:00.\n         *\n         * @interface Highcharts.ChartClickEventObject\n         * @extends Highcharts.PointerEventObject\n         */ /**\n        * Information about the x-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#xAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the y-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#yAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>}\n        */ /**\n        * Information about the z-axis on the clicked spot.\n        * @name Highcharts.ChartClickEventObject#zAxis\n        * @type {Array<Highcharts.ChartClickEventAxisObject>|undefined}\n        */\n        /**\n         * Gets fired when the chart is finished loading.\n         *\n         * @callback Highcharts.ChartLoadCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Fires when the chart is redrawn, either after a call to `chart.redraw()` or\n         * after an axis, series or point is modified with the `redraw` option set to\n         * `true`.\n         *\n         * @callback Highcharts.ChartRedrawCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired after initial load of the chart (directly after the `load` event),\n         * and after each redraw (directly after the `redraw` event).\n         *\n         * @callback Highcharts.ChartRenderCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired when an area of the chart has been selected. The default action\n         * for the selection event is to zoom the chart to the selected area. It can be\n         * prevented by calling `event.preventDefault()` or return false.\n         *\n         * @callback Highcharts.ChartSelectionCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occured.\n         *\n         * @param {Highcharts.SelectEventObject} event\n         *        Event informations\n         *\n         * @return {boolean|undefined}\n         *         Return false to prevent the default action, usually zoom.\n         */\n        (''); // detach doclets above\n\n        return DefaultOptions;\n    });\n    _registerModule(_modules, 'Core/Templating.js', [_modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (D, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, defaultTime } = D;\n        const { extend, getNestedProperty, isArray, isNumber, isObject, isString, pick, pInt } = U;\n        const helpers = {\n            // Built-in helpers\n            add: (a, b) => a + b,\n            divide: (a, b) => (b !== 0 ? a / b : ''),\n            // eslint-disable-next-line eqeqeq\n            eq: (a, b) => a == b,\n            each: function (arr) {\n                const match = arguments[arguments.length - 1];\n                return isArray(arr) ?\n                    arr.map((item, i) => format(match.body, extend(isObject(item) ? item : { '@this': item }, {\n                        '@index': i,\n                        '@first': i === 0,\n                        '@last': i === arr.length - 1\n                    }))).join('') :\n                    false;\n            },\n            ge: (a, b) => a >= b,\n            gt: (a, b) => a > b,\n            'if': (condition) => !!condition,\n            le: (a, b) => a <= b,\n            lt: (a, b) => a < b,\n            multiply: (a, b) => a * b,\n            // eslint-disable-next-line eqeqeq\n            ne: (a, b) => a != b,\n            subtract: (a, b) => a - b,\n            unless: (condition) => !condition\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\n         * human readable date string. The format is a subset of the formats for PHP's\n         * [strftime](https://www.php.net/manual/en/function.strftime.php) function.\n         * Additional formats can be given in the {@link Highcharts.dateFormats} hook.\n         *\n         * Since v6.0.5, all internal dates are formatted through the\n         * {@link Highcharts.Chart#time} instance to respect chart-level time settings.\n         * The `Highcharts.dateFormat` function only reflects global time settings set\n         * with `setOptions`.\n         *\n         * Supported format keys:\n         * - `%a`: Short weekday, like 'Mon'\n         * - `%A`: Long weekday, like 'Monday'\n         * - `%d`: Two digit day of the month, 01 to 31\n         * - `%e`: Day of the month, 1 through 31\n         * - `%w`: Day of the week, 0 through 6\n         * - `%b`: Short month, like 'Jan'\n         * - `%B`: Long month, like 'January'\n         * - `%m`: Two digit month number, 01 through 12\n         * - `%y`: Two digits year, like 09 for 2009\n         * - `%Y`: Four digits year, like 2009\n         * - `%H`: Two digits hours in 24h format, 00 through 23\n         * - `%k`: Hours in 24h format, 0 through 23\n         * - `%I`: Two digits hours in 12h format, 00 through 11\n         * - `%l`: Hours in 12h format, 1 through 12\n         * - `%M`: Two digits minutes, 00 through 59\n         * - `%p`: Upper case AM or PM\n         * - `%P`: Lower case AM or PM\n         * - `%S`: Two digits seconds, 00 through 59\n         * - `%L`: Milliseconds (naming from Ruby)\n         *\n         * @function Highcharts.dateFormat\n         *\n         * @param {string} format\n         *        The desired format where various time representations are prefixed\n         *        with `%`.\n         *\n         * @param {number} timestamp\n         *        The JavaScript timestamp.\n         *\n         * @param {boolean} [capitalize=false]\n         *        Upper case first letter in the return.\n         *\n         * @return {string}\n         *         The formatted date.\n         */\n        function dateFormat(format, timestamp, capitalize) {\n            return defaultTime.dateFormat(format, timestamp, capitalize);\n        }\n        /**\n         * Format a string according to a subset of the rules of Python's String.format\n         * method.\n         *\n         * @example\n         * let s = Highcharts.format(\n         *     'The {color} fox was {len:.2f} feet long',\n         *     { color: 'red', len: Math.PI }\n         * );\n         * // => The red fox was 3.14 feet long\n         *\n         * @function Highcharts.format\n         *\n         * @param {string} str\n         *        The string to format.\n         *\n         * @param {Record<string, *>} ctx\n         *        The context, a collection of key-value pairs where each key is\n         *        replaced by its value.\n         *\n         * @param {Highcharts.Chart} [chart]\n         *        A `Chart` instance used to get numberFormatter and time.\n         *\n         * @return {string}\n         *         The formatted string.\n         */\n        function format(str = '', ctx, chart) {\n            const regex = /\\{([a-zA-Z0-9\\:\\.\\,;\\-\\/<>%_@\"'= #\\(\\)]+)\\}/g, \n            // The sub expression regex is the same as the top expression regex,\n            // but except parens and block helpers (#), and surrounded by parens\n            // instead of curly brackets.\n            subRegex = /\\(([a-zA-Z0-9\\:\\.\\,;\\-\\/<>%_@\"'= ]+)\\)/g, matches = [], floatRegex = /f$/, decRegex = /\\.([0-9])/, lang = defaultOptions.lang, time = chart && chart.time || defaultTime, numberFormatter = chart && chart.numberFormatter || numberFormat;\n            /*\n             * Get a literal or variable value inside a template expression. May be\n             * extended with other types like string or null if needed, but keep it\n             * small for now.\n             */\n            const resolveProperty = (key = '') => {\n                let n;\n                // Literals\n                if (key === 'true') {\n                    return true;\n                }\n                if (key === 'false') {\n                    return false;\n                }\n                if ((n = Number(key)).toString() === key) {\n                    return n;\n                }\n                // Variables and constants\n                return getNestedProperty(key, ctx);\n            };\n            let match, currentMatch, depth = 0, hasSub;\n            // Parse and create tree\n            while ((match = regex.exec(str)) !== null) {\n                // When a sub expression is found, it is evaluated first, and the\n                // results recursively evaluated until no subexpression exists.\n                const subMatch = subRegex.exec(match[1]);\n                if (subMatch) {\n                    match = subMatch;\n                    hasSub = true;\n                }\n                if (!currentMatch || !currentMatch.isBlock) {\n                    currentMatch = {\n                        ctx,\n                        expression: match[1],\n                        find: match[0],\n                        isBlock: match[1].charAt(0) === '#',\n                        start: match.index,\n                        startInner: match.index + match[0].length,\n                        length: match[0].length\n                    };\n                }\n                // Identify helpers\n                const fn = match[1].split(' ')[0].replace('#', '');\n                if (helpers[fn]) {\n                    // Block helper, only 0 level is handled\n                    if (currentMatch.isBlock && fn === currentMatch.fn) {\n                        depth++;\n                    }\n                    if (!currentMatch.fn) {\n                        currentMatch.fn = fn;\n                    }\n                }\n                // Closing a block helper\n                const startingElseSection = match[1] === 'else';\n                if (currentMatch.isBlock &&\n                    currentMatch.fn && (match[1] === `/${currentMatch.fn}` ||\n                    startingElseSection)) {\n                    if (!depth) { // === 0\n                        const start = currentMatch.startInner, body = str.substr(start, match.index - start);\n                        // Either closing without an else section, or when encountering\n                        // an else section\n                        if (currentMatch.body === void 0) {\n                            currentMatch.body = body;\n                            currentMatch.startInner = match.index + match[0].length;\n                            // The body exists already, so this is the else section\n                        }\n                        else {\n                            currentMatch.elseBody = body;\n                        }\n                        currentMatch.find += body + match[0];\n                        if (!startingElseSection) {\n                            matches.push(currentMatch);\n                            currentMatch = void 0;\n                        }\n                    }\n                    else if (!startingElseSection) {\n                        depth--;\n                    }\n                    // Common expression\n                }\n                else if (!currentMatch.isBlock) {\n                    matches.push(currentMatch);\n                }\n                // Evaluate sub-matches one by one to prevent orphaned block closers\n                if (subMatch && !currentMatch?.isBlock) {\n                    break;\n                }\n            }\n            // Execute\n            matches.forEach((match) => {\n                const { body, elseBody, expression, fn } = match;\n                let replacement, i;\n                // Helper function\n                if (fn) {\n                    // Pass the helpers the amount of arguments defined by the function,\n                    // then the match as the last argument.\n                    const args = [match], parts = expression.split(' ');\n                    i = helpers[fn].length;\n                    while (i--) {\n                        args.unshift(resolveProperty(parts[i + 1]));\n                    }\n                    replacement = helpers[fn].apply(ctx, args);\n                    // Block helpers may return true or false. They may also return a\n                    // string, like the `each` helper.\n                    if (match.isBlock && typeof replacement === 'boolean') {\n                        replacement = format(replacement ? body : elseBody, ctx);\n                    }\n                    // Simple variable replacement\n                }\n                else {\n                    const valueAndFormat = expression.split(':');\n                    replacement = resolveProperty(valueAndFormat.shift() || '');\n                    // Format the replacement\n                    if (valueAndFormat.length && typeof replacement === 'number') {\n                        const segment = valueAndFormat.join(':');\n                        if (floatRegex.test(segment)) { // float\n                            const decimals = parseInt((segment.match(decRegex) || ['', '-1'])[1], 10);\n                            if (replacement !== null) {\n                                replacement = numberFormatter(replacement, decimals, lang.decimalPoint, segment.indexOf(',') > -1 ? lang.thousandsSep : '');\n                            }\n                        }\n                        else {\n                            replacement = time.dateFormat(segment, replacement);\n                        }\n                    }\n                }\n                str = str.replace(match.find, pick(replacement, ''));\n            });\n            return hasSub ? format(str, ctx, chart) : str;\n        }\n        /**\n         * Format a number and return a string based on input settings.\n         *\n         * @sample highcharts/members/highcharts-numberformat/\n         *         Custom number format\n         *\n         * @function Highcharts.numberFormat\n         *\n         * @param {number} number\n         *        The input number to format.\n         *\n         * @param {number} decimals\n         *        The amount of decimals. A value of -1 preserves the amount in the\n         *        input number.\n         *\n         * @param {string} [decimalPoint]\n         *        The decimal point, defaults to the one given in the lang options, or\n         *        a dot.\n         *\n         * @param {string} [thousandsSep]\n         *        The thousands separator, defaults to the one given in the lang\n         *        options, or a space character.\n         *\n         * @return {string}\n         *         The formatted number.\n         */\n        function numberFormat(number, decimals, decimalPoint, thousandsSep) {\n            number = +number || 0;\n            decimals = +decimals;\n            let ret, fractionDigits;\n            const lang = defaultOptions.lang, origDec = (number.toString().split('.')[1] || '').split('e')[0].length, exponent = number.toString().split('e'), firstDecimals = decimals;\n            if (decimals === -1) {\n                // Preserve decimals. Not huge numbers (#3793).\n                decimals = Math.min(origDec, 20);\n            }\n            else if (!isNumber(decimals)) {\n                decimals = 2;\n            }\n            else if (decimals && exponent[1] && exponent[1] < 0) {\n                // Expose decimals from exponential notation (#7042)\n                fractionDigits = decimals + +exponent[1];\n                if (fractionDigits >= 0) {\n                    // remove too small part of the number while keeping the notation\n                    exponent[0] = (+exponent[0]).toExponential(fractionDigits)\n                        .split('e')[0];\n                    decimals = fractionDigits;\n                }\n                else {\n                    // fractionDigits < 0\n                    exponent[0] = exponent[0].split('.')[0] || 0;\n                    if (decimals < 20) {\n                        // use number instead of exponential notation (#7405)\n                        number = (exponent[0] * Math.pow(10, exponent[1]))\n                            .toFixed(decimals);\n                    }\n                    else {\n                        // or zero\n                        number = 0;\n                    }\n                    exponent[1] = 0;\n                }\n            }\n            // Add another decimal to avoid rounding errors of float numbers. (#4573)\n            // Then use toFixed to handle rounding.\n            const roundedNumber = (Math.abs(exponent[1] ? exponent[0] : number) +\n                Math.pow(10, -Math.max(decimals, origDec) - 1)).toFixed(decimals);\n            // A string containing the positive integer component of the number\n            const strinteger = String(pInt(roundedNumber));\n            // Leftover after grouping into thousands. Can be 0, 1 or 2.\n            const thousands = strinteger.length > 3 ? strinteger.length % 3 : 0;\n            // Language\n            decimalPoint = pick(decimalPoint, lang.decimalPoint);\n            thousandsSep = pick(thousandsSep, lang.thousandsSep);\n            // Start building the return\n            ret = number < 0 ? '-' : '';\n            // Add the leftover after grouping into thousands. For example, in the\n            // number 42 000 000, this line adds 42.\n            ret += thousands ? strinteger.substr(0, thousands) + thousandsSep : '';\n            if (+exponent[1] < 0 && !firstDecimals) {\n                ret = '0';\n            }\n            else {\n                // Add the remaining thousands groups, joined by the thousands separator\n                ret += strinteger\n                    .substr(thousands)\n                    .replace(/(\\d{3})(?=\\d)/g, '$1' + thousandsSep);\n            }\n            // Add the decimal point and the decimal component\n            if (decimals) {\n                // Get the decimal component\n                ret += decimalPoint + roundedNumber.slice(-decimals);\n            }\n            if (exponent[1] && +ret !== 0) {\n                ret += 'e' + exponent[1];\n            }\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Templating = {\n            dateFormat,\n            format,\n            helpers,\n            numberFormat\n        };\n\n        return Templating;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/KPIComponent.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Dashboards/Components/Component.js'], _modules['Dashboards/Plugins/KPISyncHandlers.js'], _modules['Core/Templating.js'], _modules['Core/Utilities.js']], function (AST, Component, KPISyncHandlers, Templating, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sebastian Bochan\n         *  - Wojciech Chmiel\n         *  - Gøran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { format } = Templating;\n        const { createElement, css, defined, diffObjects, isArray, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * Class that represents a KPI component.\n         *\n         */\n        class KPIComponent extends Component {\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the KPI component.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @returns\n             * KPI component based on config from JSON.\n             *\n             * @internal\n             */\n            static fromJSON(json, cell) {\n                const options = json.options;\n                const chartOptions = options.chartOptions && JSON.parse(options.chartOptions);\n                const subtitle = JSON.parse(options.subtitle || '{}');\n                const title = options.title && JSON.parse(options.title);\n                return new KPIComponent(cell, merge(options, {\n                    chartOptions,\n                    title,\n                    subtitle\n                }));\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Creates a KPI component in the cell.\n             *\n             * @param cell\n             * Instance of cell, where component is attached.\n             *\n             * @param options\n             * The options for the component.\n             */\n            constructor(cell, options) {\n                options = merge(KPIComponent.defaultOptions, options);\n                super(cell, options);\n                this.options = options;\n                this.type = 'KPI';\n                this.sync = new KPIComponent.Sync(this, this.syncHandlers);\n                this.value = createElement('span', {\n                    className: `${options.className}-value`\n                }, {}, this.contentElement);\n                this.subtitle = createElement('span', {\n                    className: this.getSubtitleClassName()\n                }, {}, this.contentElement);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @internal */\n            async load() {\n                await super.load();\n                this.linkValueToChart();\n                return this;\n            }\n            resize(width, height) {\n                super.resize(width, height);\n                if (this.chart) {\n                    this.chart.reflow();\n                }\n                return this;\n            }\n            render() {\n                super.render();\n                this.updateElements();\n                const charter = KPIComponent.charter?.Chart;\n                if (charter &&\n                    this.options.chartOptions &&\n                    !this.chart) {\n                    if (!this.chartContainer) {\n                        this.chartContainer = createElement('div', {\n                            className: `${this.options.className}-chart-container`\n                        }, {\n                            height: '100%'\n                        }, this.contentElement);\n                        if (!this.cell.container.style.height) {\n                            // If the cell height is specified, clear dimensions to make\n                            // the container to adjust to the chart height.\n                            this.contentElement.style.height = '100%';\n                            super.resize(null, null);\n                        }\n                    }\n                    this.chart = charter.chart(this.chartContainer, merge(KPIComponent.defaultChartOptions, this.options.chartOptions));\n                }\n                else if (this.chart &&\n                    !this.options.chartOptions &&\n                    'chartOptions' in this.options) {\n                    this.chart.destroy();\n                    this.chart = void 0;\n                }\n                this.sync.start();\n                this.emit({ type: 'afterRender' });\n                return this;\n            }\n            /**\n             * Internal method for handling option updates.\n             *\n             * @private\n             */\n            setOptions() {\n                this.filterAndAssignSyncOptions(KPISyncHandlers);\n            }\n            /**\n             * Handles updating via options.\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                await super.update(options);\n                this.setOptions();\n                if (options.chartOptions && this.chart) {\n                    this.chart.update(options.chartOptions);\n                }\n                shouldRerender && this.render();\n            }\n            /**\n             * @internal\n             */\n            onTableChanged() {\n                this.setValue();\n            }\n            /**\n             * Gets the default value that should be displayed in the KPI.\n             *\n             * @returns\n             * The value that should be displayed in the KPI.\n             */\n            getValue() {\n                if (defined(this.options.value)) {\n                    return this.options.value;\n                }\n                if (this.connector && this.options.columnName) {\n                    const table = this.connector?.table.modified, column = table.getColumn(this.options.columnName), length = column?.length || 0;\n                    return table.getCellAsString(this.options.columnName, length - 1);\n                }\n            }\n            /**\n             * Sets the value that should be displayed in the KPI.\n             * @param value\n             * The value to display in the KPI.\n             */\n            setValue(value = this.getValue()) {\n                const { valueFormat, valueFormatter } = this.options;\n                if (defined(value)) {\n                    let prevValue;\n                    if (isNumber(+value)) {\n                        prevValue = +value;\n                    }\n                    if (valueFormatter) {\n                        value = valueFormatter.call(this, value);\n                    }\n                    else if (valueFormat) {\n                        value = format(valueFormat, { value });\n                    }\n                    else if (isNumber(value)) {\n                        value = value.toLocaleString();\n                    }\n                    AST.setElementHTML(this.value, '' + value);\n                    this.linkValueToChart(prevValue);\n                    this.prevValue = prevValue;\n                }\n            }\n            /**\n             * Handles updating chart point value.\n             *\n             * @internal\n             */\n            linkValueToChart(value = this.getValue()) {\n                const chart = this.chart;\n                const linkedValueTo = this.options.linkedValueTo;\n                if (!chart || !linkedValueTo.enabled ||\n                    !defined(value) || !isNumber(+value)) {\n                    return;\n                }\n                value = +value;\n                const targetSeries = chart.series[linkedValueTo.seriesIndex ?? 0], targetPoint = targetSeries?.points[linkedValueTo.pointIndex ?? 0];\n                if (targetSeries) {\n                    if (targetPoint) {\n                        targetPoint.update({\n                            y: value\n                        });\n                        return;\n                    }\n                    targetSeries.addPoint({\n                        y: value\n                    });\n                    return;\n                }\n                chart.addSeries({\n                    data: [{\n                            y: value\n                        }]\n                });\n            }\n            /**\n             * Handles updating elements via options\n             *\n             * @internal\n             */\n            updateElements() {\n                const { style, subtitle } = this.options;\n                this.setValue();\n                AST.setElementHTML(this.subtitle, this.getSubtitle());\n                if (style) {\n                    css(this.element, style);\n                }\n                if (typeof subtitle === 'object') {\n                    if (subtitle.style) {\n                        css(this.subtitle, subtitle.style);\n                    }\n                    this.subtitle.className = this.getSubtitleClassName();\n                }\n                if (this.chartContainer) {\n                    this.chartContainer.style.flex =\n                        this.options.chartOptions ? '1' : '0';\n                }\n                if (this.chart) {\n                    this.chart.reflow();\n                }\n                this.value.style.color = this.getValueColor();\n            }\n            /**\n             * Gets KPI subtitle text.\n             *\n             * @returns\n             * The subtitle's text.\n             *\n             * @internal\n             */\n            getSubtitle() {\n                const { subtitle, value } = this.options;\n                if (typeof subtitle === 'string') {\n                    return subtitle;\n                }\n                if (subtitle) {\n                    if (isNumber(this.prevValue) && isNumber(value)) {\n                        const diff = value - this.prevValue;\n                        let prefix = '';\n                        if (diff > 0) {\n                            prefix = '<span style=\"color:green\">&#9650;</span> +';\n                        }\n                        else if (diff < 0) {\n                            prefix = '<span style=\"color:red\">&#9660;</span> ';\n                        }\n                        else {\n                            return this.subtitle.innerHTML;\n                        }\n                        if (subtitle.type === 'diff') {\n                            return prefix + diff.toLocaleString();\n                        }\n                        if (subtitle.type === 'diffpercent') {\n                            return prefix + format('{v:,.2f}%', {\n                                v: diff / this.prevValue * 100\n                            });\n                        }\n                    }\n                    return subtitle.text || '';\n                }\n                return '';\n            }\n            /**\n             * Gets CSS class name of the KPI subtitle.\n             *\n             * @returns\n             * The name of class.\n             *\n             * @internal\n             */\n            getSubtitleClassName() {\n                const { subtitle } = this.options;\n                return `${Component.defaultOptions.className}-subtitle` +\n                    ((typeof subtitle === 'object' && subtitle.className) || '');\n            }\n            /**\n             * Applies title's color according to the threshold.\n             *\n             * @returns\n             * Hex of color.\n             *\n             * @internal\n             */\n            getValueColor() {\n                const { threshold, thresholdColors, value } = this.options;\n                if (thresholdColors && threshold && isNumber(value)) {\n                    if (isArray(threshold)) {\n                        for (let i = threshold.length - 1; i >= 0; i--) {\n                            if (value >= threshold[i]) {\n                                if (i + 1 < thresholdColors.length) {\n                                    return thresholdColors[i + 1];\n                                }\n                                return thresholdColors[thresholdColors.length - 1];\n                            }\n                        }\n                    }\n                    else if (value >= threshold) {\n                        return thresholdColors[1];\n                    }\n                    return thresholdColors[0];\n                }\n                return '';\n            }\n            getOptionsOnDrop(sidebar) {\n                const connectorsIds = sidebar.editMode.board.dataPool.getConnectorIds();\n                let options = {\n                    cell: '',\n                    type: 'KPI'\n                };\n                if (connectorsIds.length) {\n                    options = {\n                        ...options,\n                        connector: {\n                            id: connectorsIds[0]\n                        }\n                    };\n                }\n                return options;\n            }\n            /**\n             * Converts the class instance to a class JSON.\n             *\n             * @returns\n             * Class JSON of this Component instance.\n             *\n             * @internal\n             */\n            toJSON() {\n                const base = super.toJSON();\n                const json = {\n                    ...base,\n                    type: 'KPI',\n                    options: {\n                        ...base.options,\n                        type: 'KPI',\n                        value: this.options.value,\n                        subtitle: JSON.stringify(this.options.subtitle),\n                        title: JSON.stringify(this.options.title),\n                        threshold: this.options.threshold,\n                        thresholdColors: this.options.thresholdColors,\n                        chartOptions: JSON.stringify(this.options.chartOptions),\n                        valueFormat: this.options.valueFormat\n                    }\n                };\n                this.emit({ type: 'toJSON', json: base });\n                return json;\n            }\n            /**\n             * Get the KPI component's options.\n             * @returns\n             * The JSON of KPI component's options.\n             *\n             * @internal\n             *\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, KPIComponent.defaultOptions),\n                    type: 'KPI'\n                };\n            }\n        }\n        /* *\n         *\n         *  Static functions\n         *\n         * */\n        KPIComponent.syncHandlers = KPISyncHandlers;\n        /**\n         * Default options of the KPI component.\n         */\n        KPIComponent.defaultOptions = merge(Component.defaultOptions, {\n            type: 'KPI',\n            className: [\n                Component.defaultOptions.className,\n                `${Component.defaultOptions.className}-kpi`\n            ].join(' '),\n            minFontSize: 20,\n            syncHandlers: KPISyncHandlers,\n            thresholdColors: ['#f45b5b', '#90ed7d'],\n            editableOptions: (Component.defaultOptions.editableOptions || []).concat([{\n                    name: 'Value',\n                    type: 'input',\n                    propertyPath: ['value']\n                }, {\n                    name: 'Column name',\n                    type: 'input',\n                    propertyPath: ['columnName']\n                }, {\n                    name: 'Value format',\n                    type: 'input',\n                    propertyPath: ['valueFormat']\n                }]),\n            linkedValueTo: {\n                enabled: true,\n                seriesIndex: 0,\n                pointIndex: 0\n            }\n        });\n        /* *\n         *\n         *  Static functions\n         *\n         * */\n        /**\n         * Default options of the KPI component.\n         */\n        KPIComponent.defaultChartOptions = {\n            chart: {\n                type: 'spline',\n                styledMode: true,\n                zooming: {\n                    mouseWheel: {\n                        enabled: false\n                    }\n                }\n            },\n            title: {\n                text: void 0\n            },\n            xAxis: {\n                visible: false\n            },\n            yAxis: {\n                visible: false,\n                title: {\n                    text: null\n                }\n            },\n            legend: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            tooltip: {\n                outside: true\n            },\n            plotOptions: {\n                series: {\n                    marker: {\n                        enabled: false\n                    }\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return KPIComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/NavigatorComponentDefaults.js', [_modules['Dashboards/Components/Component.js']], function (Component) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const NavigatorComponentDefaults = {\n            type: 'Navigator',\n            chartOptions: {\n                chart: {\n                    animation: false,\n                    height: 200,\n                    styledMode: true,\n                    type: 'column',\n                    zooming: {\n                        mouseWheel: {\n                            enabled: false\n                        }\n                    }\n                },\n                credits: {\n                    enabled: false\n                },\n                legend: {\n                    enabled: false\n                },\n                navigator: {\n                    enabled: true,\n                    outlineWidth: 0,\n                    series: {\n                        animation: false,\n                        lineWidth: 0\n                    },\n                    xAxis: {\n                        endOnTick: true,\n                        gridZIndex: 4,\n                        labels: {\n                            x: 1,\n                            y: 22\n                        },\n                        opposite: true,\n                        showFirstLabel: true,\n                        showLastLabel: true,\n                        startOnTick: true,\n                        tickPosition: 'inside'\n                    },\n                    yAxis: {\n                        maxPadding: 0.5\n                    }\n                },\n                plotOptions: {\n                    series: {\n                        borderRadius: 0,\n                        marker: {\n                            enabled: false\n                        },\n                        states: {\n                            hover: {\n                                enabled: false\n                            }\n                        }\n                    }\n                },\n                scrollbar: {\n                    enabled: true\n                },\n                title: {\n                    text: ''\n                },\n                tooltip: {\n                    enabled: false\n                },\n                xAxis: {\n                    visible: false,\n                    minRange: Number.MIN_VALUE\n                },\n                yAxis: {\n                    visible: false\n                }\n            },\n            editableOptions: (Component.defaultOptions.editableOptions || []).concat()\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponentDefaults;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/NavigatorComponent.js', [_modules['Dashboards/Components/Component.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Plugins/NavigatorComponentDefaults.js'], _modules['Core/Utilities.js']], function (Component, DataModifier, Globals, NavigatorComponentDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { Range: RangeModifier } = DataModifier.types;\n        const { addEvent, defined, diffObjects, isNumber, isObject, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const navigatorComponentSync = {\n            crossfilter: {\n                emitter: crossfilterEmitter\n            },\n            extremes: {\n                emitter: extremesEmitter,\n                handler: extremesReceiver\n            }\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @internal */\n        function crossfilterEmitter() {\n            const component = this;\n            const afterSetExtremes = async (axis, extremes) => {\n                if (component.connector) {\n                    const table = component.connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = getAxisExtremes(axis, extremes);\n                    let modifier = table.getModifier();\n                    if (modifier instanceof RangeModifier) {\n                        setRangeOptions(modifier.options.ranges, filterColumn, min, max);\n                    }\n                    else {\n                        modifier = new RangeModifier({\n                            ranges: [{\n                                    column: filterColumn,\n                                    maxValue: max,\n                                    minValue: min\n                                }]\n                        });\n                    }\n                    await table.setModifier(modifier);\n                    dataCursor.emitCursor(table, {\n                        type: 'range',\n                        columns: [filterColumn],\n                        firstRow: 0,\n                        lastRow: table.getRowCount() - 1,\n                        state: 'crossfilter'\n                    }, extremes);\n                }\n            };\n            let delay;\n            return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                clearTimeout(delay);\n                delay = setTimeout(afterSetExtremes, 50, this, extremes);\n            });\n        }\n        /** @internal */\n        function extremesEmitter() {\n            const component = this;\n            const afterSetExtremes = (axis, extremes) => {\n                if (component.connector) {\n                    const table = component.connector.table, dataCursor = component.board.dataCursor, filterColumn = component.getColumnAssignment()[0], [min, max] = getAxisExtremes(axis, extremes);\n                    dataCursor.emitCursor(table, {\n                        type: 'position',\n                        column: filterColumn,\n                        row: table.getRowIndexBy(filterColumn, min),\n                        state: 'xAxis.extremes.min'\n                    }, extremes);\n                    dataCursor.emitCursor(table, {\n                        type: 'position',\n                        column: filterColumn,\n                        row: table.getRowIndexBy(filterColumn, max),\n                        state: 'xAxis.extremes.max'\n                    }, extremes);\n                }\n            };\n            let delay;\n            return addEvent(component.chart.xAxis[0], 'afterSetExtremes', function (extremes) {\n                clearTimeout(delay);\n                delay = setTimeout(afterSetExtremes, 50, this, extremes);\n            });\n        }\n        /** @internal */\n        function extremesReceiver() {\n            const component = this, dataCursor = component.board.dataCursor;\n            const extremesListener = (e) => {\n                const cursor = e.cursor;\n                if (!component.connector) {\n                    return;\n                }\n                const table = component.connector.table;\n                // assume first column with unique keys as fallback\n                let extremesColumn = table.getColumnNames()[0], maxIndex = table.getRowCount(), minIndex = 0;\n                if (cursor.type === 'range') {\n                    maxIndex = cursor.lastRow;\n                    minIndex = cursor.firstRow;\n                    if (cursor.columns) {\n                        extremesColumn = pick(cursor.columns[0], extremesColumn);\n                    }\n                }\n                else if (cursor.state === 'xAxis.extremes.max') {\n                    extremesColumn = pick(cursor.column, extremesColumn);\n                    maxIndex = pick(cursor.row, maxIndex);\n                }\n                else {\n                    extremesColumn = pick(cursor.column, extremesColumn);\n                    minIndex = pick(cursor.row, minIndex);\n                }\n                const modifier = table.getModifier();\n                if (typeof extremesColumn === 'string' &&\n                    modifier instanceof RangeModifier) {\n                    const ranges = modifier.options.ranges, min = table.getCell(extremesColumn, minIndex), max = table.getCell(extremesColumn, maxIndex);\n                    if (max !== null && typeof max !== 'undefined' &&\n                        min !== null && typeof min !== 'undefined') {\n                        unsetRangeOptions(ranges, extremesColumn);\n                        ranges.unshift({\n                            column: extremesColumn,\n                            maxValue: max,\n                            minValue: min\n                        });\n                        table.setModifier(modifier);\n                    }\n                }\n            };\n            const registerCursorListeners = () => {\n                const table = component.connector && component.connector.table;\n                if (table) {\n                    dataCursor.addListener(table.id, 'xAxis.extremes', extremesListener);\n                    dataCursor.addListener(table.id, 'xAxis.extremes.max', extremesListener);\n                    dataCursor.addListener(table.id, 'xAxis.extremes.min', extremesListener);\n                }\n            };\n            const unregisterCursorListeners = () => {\n                const table = component.connector && component.connector.table;\n                if (table) {\n                    dataCursor.removeListener(table.id, 'xAxis.extremes', extremesListener);\n                    dataCursor.removeListener(table.id, 'xAxis.extremes.max', extremesListener);\n                    dataCursor.removeListener(table.id, 'xAxis.extremes.min', extremesListener);\n                }\n            };\n            registerCursorListeners();\n            component.on('setConnector', () => unregisterCursorListeners());\n            component.on('afterSetConnector', () => registerCursorListeners());\n        }\n        /** @internal */\n        function getAxisExtremes(axis, extremes) {\n            let max = (typeof extremes.max === 'number' ?\n                extremes.max :\n                extremes.dataMax), min = (typeof extremes.min === 'number' ?\n                extremes.min :\n                extremes.dataMin);\n            if (axis.hasNames) {\n                return [\n                    axis.names[Math.round(min)],\n                    axis.names[Math.round(max)]\n                ];\n            }\n            return [min, max];\n        }\n        /** @internal */\n        function setRangeOptions(ranges, column, minValue, maxValue) {\n            let changed = false;\n            for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                if (ranges[i].column === column) {\n                    ranges[i].maxValue = maxValue;\n                    ranges[i].minValue = minValue;\n                    changed = true;\n                    break;\n                }\n            }\n            if (!changed) {\n                ranges.push({ column, maxValue, minValue });\n            }\n        }\n        /** @internal */\n        function unsetRangeOptions(ranges, column) {\n            for (let i = 0, iEnd = ranges.length; i < iEnd; ++i) {\n                if (ranges[i].column === column) {\n                    return ranges.splice(i, 1)[0];\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Setup a component with data navigation.\n         */\n        class NavigatorComponent extends Component {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Creates component from JSON.\n             *\n             * @param json\n             * Set of component options, used for creating the Highcharts component.\n             *\n             * @returns\n             * Highcharts component based on config from JSON.\n             *\n             * @private\n             */\n            static fromJSON(json, cell) {\n                const options = json.options, component = new NavigatorComponent(cell, options);\n                component.emit({\n                    type: 'fromJSON',\n                    json\n                });\n                return component;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(cell, options) {\n                super(cell, options);\n                this.options = merge(NavigatorComponent.defaultOptions, options);\n                const charter = (NavigatorComponent.charter.Chart ||\n                    Globals.win.Highcharts);\n                this.chartContainer = Globals.win.document.createElement('div');\n                this.chart = charter\n                    .chart(this.chartContainer, (this.options.chartOptions || {}));\n                this.chartContainer.classList\n                    .add(Globals.classNamePrefix + 'navigator');\n                this.filterAndAssignSyncOptions(navigatorComponentSync);\n                this.sync = new NavigatorComponent.Sync(this, this.syncHandlers);\n                const crossfilterOptions = this.options.sync?.crossfilter;\n                if (crossfilterOptions === true || (isObject(crossfilterOptions) && crossfilterOptions.enabled)) {\n                    this.chart.update({ navigator: { xAxis: { labels: { format: '{value}' } } } }, false);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            adjustNavigator() {\n                const chart = this.chart, height = pick(chart.chartHeight, this.contentElement.clientHeight), width = this.contentElement.clientWidth, chartUpdates = {};\n                if (chart.chartHeight !== height ||\n                    chart.chartWidth !== width) {\n                    chartUpdates.chart = {\n                        height,\n                        width\n                    };\n                }\n                if (chart.navigator) {\n                    const navigator = chart.navigator, navigatorHeight = (navigator.top - chart.plotTop + navigator.height);\n                    if (navigator.height !== navigatorHeight) {\n                        chartUpdates.navigator = {\n                            handles: {\n                                height: Math.round(height / 4)\n                            },\n                            height: navigatorHeight\n                        };\n                    }\n                    if (Object.keys(chartUpdates).length) {\n                        chart.update(chartUpdates, false);\n                    }\n                    if (navigator.series && navigator.series[0]) {\n                        navigator.series[0].update({\n                            type: chart.series[0].type\n                        }, false);\n                    }\n                }\n                else if (Object.keys(chartUpdates).length) {\n                    chart.update(chartUpdates, false);\n                }\n            }\n            /**\n             * Returns the first column of columnAssignments to use for navigator data.\n             * @private\n             *\n             * @return\n             * Navigator column assignment.\n             */\n            getColumnAssignment() {\n                const columnAssignments = (this.options.columnAssignments || {});\n                let columnsAssignment;\n                for (const column of Object.keys(columnAssignments)) {\n                    columnsAssignment = columnAssignments[column];\n                    if (columnsAssignment !== null) {\n                        return [column, columnsAssignment];\n                    }\n                }\n                if (this.connector) {\n                    const columns = this.connector.table.getColumnNames();\n                    if (columns.length) {\n                        return [columns[0], 'y'];\n                    }\n                }\n                return ['', 'y'];\n            }\n            /**\n             * Gets the component's options.\n             * @internal\n             */\n            getOptions() {\n                return {\n                    ...diffObjects(this.options, NavigatorComponentDefaults),\n                    type: 'Navigator'\n                };\n            }\n            /** @private */\n            async load() {\n                await super.load();\n                this.contentElement.appendChild(this.chartContainer);\n                this.parentElement.appendChild(this.element);\n                this.adjustNavigator();\n                this.emit({ type: 'afterLoad' });\n                return this;\n            }\n            onTableChanged() {\n                this.renderNavigator();\n            }\n            /** @private */\n            redrawNavigator() {\n                const timeouts = this.resizeTimeouts;\n                for (let i = 0, iEnd = timeouts.length; i < iEnd; ++i) {\n                    clearTimeout(timeouts[i]);\n                }\n                timeouts.length = 0;\n                timeouts.push(setTimeout(() => {\n                    this.adjustNavigator();\n                    this.chart.redraw();\n                }, 33));\n            }\n            /** @private */\n            render() {\n                const component = this;\n                super.render();\n                component.renderNavigator();\n                component.sync.start();\n                component.emit({ type: 'afterRender' });\n                return component;\n            }\n            /** @private */\n            renderNavigator() {\n                const chart = this.chart;\n                if (this.connector) {\n                    const table = this.connector.table, options = this.options, column = this.getColumnAssignment(), columnValues = table.getColumn(column[0], true) || [], crossfilterOptions = options.sync?.crossfilter;\n                    let values = [], data;\n                    if (crossfilterOptions === true || (isObject(crossfilterOptions) && crossfilterOptions.enabled)) {\n                        const seriesData = [], xData = [], modifierOptions = table.getModifier()?.options;\n                        let index, max = void 0, min = void 0;\n                        if (crossfilterOptions !== true &&\n                            crossfilterOptions.affectNavigator &&\n                            modifierOptions?.type === 'Range') {\n                            const appliedRanges = [], rangedColumns = [], { ranges } = modifierOptions;\n                            for (let i = 0, iEnd = ranges.length; i < iEnd; i++) {\n                                if (ranges[i].column !== column[0]) {\n                                    appliedRanges.push(ranges[i]);\n                                    rangedColumns.push(table.getColumn(ranges[i].column, true) || []);\n                                }\n                            }\n                            const appliedRagesLength = appliedRanges.length;\n                            for (let i = 0, iEnd = columnValues.length; i < iEnd; i++) {\n                                let value = columnValues[i];\n                                if (!defined(value) || !isNumber(+value)) {\n                                    continue;\n                                }\n                                value = +value;\n                                if (max === void 0 || max < value) {\n                                    max = value;\n                                }\n                                if (min === void 0 || min > value) {\n                                    min = value;\n                                }\n                                let allConditionsMet = true;\n                                for (let j = 0; j < appliedRagesLength; j++) {\n                                    const range = appliedRanges[j];\n                                    if (!(rangedColumns[j][i] >=\n                                        (range.minValue ?? -Infinity) &&\n                                        rangedColumns[j][i] <=\n                                            (range.maxValue ?? Infinity))) {\n                                        allConditionsMet = false;\n                                        break;\n                                    }\n                                }\n                                if (allConditionsMet) {\n                                    values.push(value);\n                                }\n                            }\n                        }\n                        else {\n                            values = columnValues;\n                        }\n                        for (let i = 0, iEnd = values.length; i < iEnd; i++) {\n                            let value = values[i];\n                            if (value === null) {\n                                continue;\n                            }\n                            else if (!isNumber(value)) {\n                                value = `${value}`;\n                            }\n                            index = xData.indexOf(value);\n                            if (index === -1) {\n                                index = xData.length;\n                                xData[index] = value;\n                                seriesData[index] = [value, 1];\n                            }\n                            else {\n                                seriesData[index][1] = seriesData[index][1] + 1;\n                            }\n                        }\n                        seriesData.sort((pointA, pointB) => (pick(pointA[0], NaN) < pick(pointB[0], NaN) ? -1 :\n                            pointA[0] === pointB[0] ? 0 : 1));\n                        data = seriesData;\n                        // Add a minimum and maximum of the unmodified column with null\n                        // values to maintain the correct extremes without having to\n                        // refresh them.\n                        if (min !== void 0) {\n                            data.unshift([min, null]);\n                        }\n                        if (max !== void 0) {\n                            data.push([max, null]);\n                        }\n                    }\n                    else if (typeof values[0] === 'string') {\n                        data = values.slice();\n                    }\n                    else {\n                        data = values.slice();\n                    }\n                    if (!chart.series[0]) {\n                        chart.addSeries({ id: table.id, data }, false);\n                    }\n                    else {\n                        chart.series[0].setData(data, false);\n                    }\n                }\n                this.redrawNavigator();\n            }\n            /** @private */\n            resize(width, height) {\n                super.resize(width, height);\n                this.redrawNavigator();\n                return this;\n            }\n            /**\n             * Handles updating via options.\n             *\n             * @param options\n             * The options to apply.\n             */\n            async update(options, shouldRerender = true) {\n                const chart = this.chart, crossfilterOptions = this.options.sync?.crossfilter;\n                await super.update(options, false);\n                if (options.sync) {\n                    this.filterAndAssignSyncOptions(navigatorComponentSync);\n                }\n                if (options.chartOptions) {\n                    chart.update(merge((crossfilterOptions === true || (isObject(crossfilterOptions) &&\n                        crossfilterOptions.enabled) ?\n                        {\n                            navigator: {\n                                xAxis: {\n                                    labels: {\n                                        format: '{value}'\n                                    }\n                                }\n                            }\n                        } :\n                        {}), options.chartOptions), false);\n                }\n                this.emit({ type: 'afterUpdate' });\n                if (shouldRerender) {\n                    this.render();\n                }\n            }\n            getOptionsOnDrop(sidebar) {\n                return {};\n            }\n        }\n        /**\n         * Default options of the Navigator component.\n         */\n        NavigatorComponent.defaultOptions = merge(Component.defaultOptions, NavigatorComponentDefaults);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorComponent;\n    });\n    _registerModule(_modules, 'Dashboards/Plugins/HighchartsPlugin.js', [_modules['Dashboards/Plugins/HighchartsComponent.js'], _modules['Dashboards/Plugins/HighchartsSyncHandlers.js'], _modules['Dashboards/Plugins/KPIComponent.js'], _modules['Dashboards/Plugins/NavigatorComponent.js']], function (HighchartsComponent, HighchartsSyncHandlers, KPIComponent, NavigatorComponent) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Connects Highcharts core with the Dashboard plugin.\n         *\n         * @param {Highcharts} highcharts\n         * Highcharts core to connect.\n         */\n        function connectHighcharts(highcharts) {\n            HighchartsComponent.charter = highcharts;\n            KPIComponent.charter = highcharts;\n            NavigatorComponent.charter = highcharts;\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboards.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onRegister(e) {\n            const { Sync, ComponentRegistry } = e;\n            ComponentRegistry.registerComponent('Highcharts', HighchartsComponent);\n            ComponentRegistry.registerComponent('KPI', KPIComponent);\n            ComponentRegistry.registerComponent('Navigator', NavigatorComponent);\n            Sync.defaultHandlers = {\n                ...Sync.defaultHandlers,\n                ...HighchartsSyncHandlers\n            };\n        }\n        /**\n         * Callback function of the Dashboard plugin.\n         *\n         * @param {Dashboard.PluginHandler.Event} e\n         * Plugin context provided by the Dashboard.\n         */\n        function onUnregister(e) {\n            const { Sync } = e;\n            Object\n                .keys(HighchartsSyncHandlers)\n                .forEach((handler) => {\n                if (Sync.defaultHandlers[handler] ===\n                    HighchartsSyncHandlers[handler]) {\n                    delete Sync.defaultHandlers[handler];\n                }\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const HighchartsCustom = {\n            connectHighcharts\n        };\n        const HighchartsPlugin = {\n            custom: HighchartsCustom,\n            name: 'Highcharts.DashboardsPlugin',\n            onRegister,\n            onUnregister\n        };\n\n        return HighchartsPlugin;\n    });\n    _registerModule(_modules, 'masters/modules/dashboards-plugin.src.js', [_modules['Dashboards/Plugins/DataGridPlugin.js'], _modules['Dashboards/Globals.js'], _modules['Dashboards/Plugins/HighchartsPlugin.js']], function (DataGridPlugin, Globals, HighchartsPlugin) {\n\n        /* *\n         *\n         *  Namespaces\n         *\n         * */\n        const G = Globals;\n        G.DataGridPlugin = DataGridPlugin;\n        G.HighchartsPlugin = HighchartsPlugin;\n        if (G.win.Highcharts) {\n            HighchartsPlugin.custom.connectHighcharts(G.win.Highcharts);\n            G.PluginHandler.addPlugin(HighchartsPlugin);\n        }\n        if (G.win.DataGrid) {\n            DataGridPlugin.custom.connectDataGrid(G.win.DataGrid.DataGrid);\n            G.PluginHandler.addPlugin(DataGridPlugin);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return G;\n    });\n}));"],"names":["factory","module","exports","define","amd","Dashboards","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","U","addEvent","configs","emitters","highlightEmitter","type","dataGrid","board","dataCursor","cursor","callbacks","push","container","e","table","connector","row","cell","querySelector","dataset","rowXIndex","emitCursor","parseInt","rowIndex","column","columnName","state","forEach","callback","handlers","highlightHandler","handlCursor","highlightedDataRow","toggleRowHighlight","hoveredRow","handleCursorOut","registerCursorListeners","addListener","id","unregisterCursorListeners","on","extremesHandler","handleChangeExtremes","scrollToRow","removeListener","visibilityHandler","component","handleVisibilityChange","update","columns","show","defaults","highlight","emitter","handler","extremes","visibility","Component","DataConverter","DataGridSyncHandlers","diffObjects","merge","uniqueKey","DataGridComponent","onUpdate","inputElement","target","parentRow","closest","converter","HTMLElement","dataTableRowIndex","valueToSet","asGuessedType","value","Date","toString","setCell","fromJSON","json","options","dataGridOptions","JSON","parse","syncHandlers","emit","constructor","defaultOptions","connectorListeners","dataGridClassName","contentElement","classList","add","dataGridID","sync","Sync","innerResizeTimeouts","disableEditingModifiedColumns","onTableChanged","cellInputEl","dataTable","filterColumns","getColumnOptions","modifierOptions","dataModifier","modifierColumns","columnFormulas","i","iEnd","length","editable","load","setColumns","getColumns","shouldUpdateTheGrid","rowElements","cells","Array","prototype","slice","call","childNodes","childElementCount","input","convertedInputValue","cellValue","render","constructDataGrid","modified","start","setupConnectorUpdate","resize","width","height","connectorId","filterAndAssignSyncOptions","DataGridConstructor","columnOptions","Error","addEventListener","keyEvent","visibleColumns","columnsToDelete","getColumnNames","filter","includes","filteredTable","clone","deleteColumns","getOptionsOnDrop","sidebar","connectorsIds","editMode","dataPool","getConnectorIds","toJSON","stringify","base","getOptions","destroy","containerResizeObserver","disconnect","editableOptions","name","propertyPath","custom","connectDataGrid","DataGridClass","onRegister","ComponentRegistry","registerComponent","onUnregister","getModifiedTableOffset","ranges","minRange","reduce","currentRange","minValue","tableRowIndex","getRowIndexBy","chart","series","point","events","mouseOver","offset","modifier","getModifier","index","mouseOut","seriesVisibilityEmitter","hide","extremesEmitter","extremesEventHandler","reset","resetSelection","trigger","axis","seriesInTable","hasColumns","visiblePoints","points","isInside","minCursorData","coll","maxCursorData","dateTime","addExtremesEvent","axes","map","addExtremesEventCallbacks","resetExtremesEvent","remitCursor","seriesVisibilityHandler","findSeries","seriesArray","handleShow","setVisible","handleHide","handleCursor","relatedSeries","visible","useSharedTooltip","tooltip","shared","hoverPoint","hoverSeries","pointer","getHoverData","refresh","hoverPoints","zooming","dimensions","split","c","dimension","handleUpdateExtremes","event","eventTarget","didZoom","min","max","setExtremes","resetZoomButton","showResetZoom","redraw","addCursorListeners","handleChartZoomOut","zoomOut","setTimeout","resetZoomButtons","element","querySelectorAll","button","remove","DataTable","Globals","HighchartsSyncHandlers","createElement","isString","splat","isObject","HighchartsComponent","chartOptions","chartConstructor","chartContainer","setOptions","updateSeries","hcComponent","getChart","timeoutID","pop","clearTimeout","setSize","clientHeight","store","allowConnectorUpdate","onChartUpdate","chartClassName","chartID","rowNumber","asNumber","y","shouldRerender","presentationTable","presentationModifier","storeTableID","modifyTable","columnNames","columnAssignment","getDefaultColumnAssignment","xKeyMap","seriesNames","isVisible","activeGroup","getSharedState","getColumnVisibility","Object","keys","key","seriesList","seriesName","seriesFromConnector","existingSeries","indexOf","shouldBeDraggable","some","formula","seriesOptions","dragDrop","draggableY","find","addSeries","xKey","isSeriesColumnMap","pointColumnMapValues","pointColumns","columnKeys","concat","seriesTable","renameColumn","seriesData","getRowObjects","arr","x","setData","createChart","defaultColumnAssignment","firstColumnValues","getColumn","charter","win","Highcharts","Factory","Chart","registerChartEvents","allEvents","optionKey","seriesOrAxisOptions","isArray","acc","seriesOrAxis","callbackKey","callbackRegistry","addCallback","func","setConnector","animation","getEditableOptions","componentOptions","chartType","yAxis","xAxis","plotOptions","getEditableOptionValue","className","join","styledMode","nestedOptions","selectOptions","iconURL","showToggle","editableOptionsBindings","skipRedraw","defined","getCellAsString","setValue","alignThresholds","panning","enabled","borderRadius","colorCount","allowMutatingData","ignoreHiddenSeries","spacing","theme","position","reflow","singleTouch","resetButton","zIndex","align","borderColor","backgroundColor","plotBorderColor","colors","H","error","extend","isNumber","objectEach","pad","pick","timeUnits","hasNewSafariBug","isSafari","Intl","DateTimeFormat","formatRange","hasOldSafariBug","useUTC","variableTimezone","getTimezoneOffset","timezoneOffsetFunction","get","unit","date","timezoneOffset","realMs","getTime","ms","setTime","ret","set","newOffset","timezone","makeTime","year","month","hours","minutes","seconds","d","UTC","arguments","time","timestamp","gmt","colon","timeZone","timeZoneName","format","Number","valueOf","dateFormat","capitalize","isNaN","lang","invalidDate","day","dayOfMonth","fullYear","langWeekdays","weekdays","shortWeekdays","replacements","a","substr","A","w","b","shortMonths","B","months","m","o","Y","k","I","l","M","p","P","S","L","Math","floor","dateFormats","val","replace","toUpperCase","resolveDTLFormat","f","main","from","to","getTimeTicks","normalizedInterval","startOfWeek","minYear","variableDayLength","minDay","tickPositions","higherRanks","minDate","interval","unitRange","count","second","minute","hour","week","minMonth","minDateDate","minHours","t","info","totalRange","getDateFormat","range","dateTimeLabelFormats","dateStr","blank","strpos","millisecond","n","lastN","ChartDefaults","Palettes","Time","isTouchDevice","svg","symbols","loading","decimalPoint","numericSymbols","resetZoom","resetZoomTitle","thousandsSep","global","title","style","color","fontWeight","text","margin","widthAdjust","subtitle","fontSize","caption","verticalAlign","legend","alignColumns","layout","itemMarginBottom","itemMarginTop","labelFormatter","navigation","activeColor","inactiveColor","itemStyle","textDecoration","textOverflow","itemHoverStyle","itemHiddenStyle","shadow","itemCheckboxStyle","squareSymbol","symbolPadding","labelStyle","top","opacity","textAlign","footerFormat","headerShape","hideDelay","padding","shape","snap","headerFormat","pointFormat","borderWidth","stickOnContact","useHTML","credits","href","defaultTime","D","getNestedProperty","pInt","helpers","divide","eq","each","match","item","body","ge","gt","condition","le","lt","multiply","ne","subtract","unless","str","ctx","regex","subRegex","matches","floatRegex","decRegex","numberFormatter","numberFormat","resolveProperty","currentMatch","depth","hasSub","exec","subMatch","isBlock","expression","charAt","startInner","startingElseSection","elseBody","replacement","parts","unshift","valueAndFormat","shift","segment","test","decimals","number","fractionDigits","origDec","exponent","firstDecimals","toExponential","pow","toFixed","roundedNumber","abs","strinteger","String","thousands","AST","KPISyncHandlers","Templating","css","KPIComponent","getSubtitleClassName","linkValueToChart","updateElements","defaultChartOptions","getValue","valueFormat","valueFormatter","prevValue","toLocaleString","setElementHTML","linkedValueTo","targetSeries","seriesIndex","targetPoint","pointIndex","addPoint","data","getSubtitle","flex","getValueColor","diff","prefix","innerHTML","v","threshold","thresholdColors","minFontSize","mouseWheel","outside","marker","NavigatorComponentDefaults","navigator","outlineWidth","lineWidth","endOnTick","gridZIndex","labels","opposite","showFirstLabel","showLastLabel","startOnTick","tickPosition","maxPadding","states","hover","scrollbar","MIN_VALUE","DataModifier","Range","RangeModifier","types","navigatorComponentSync","crossfilter","delay","afterSetExtremes","filterColumn","getColumnAssignment","getAxisExtremes","setRangeOptions","maxValue","changed","setModifier","firstRow","lastRow","getRowCount","extremesListener","extremesColumn","maxIndex","minIndex","getCell","unsetRangeOptions","splice","dataMax","dataMin","hasNames","names","round","NavigatorComponent","document","classNamePrefix","crossfilterOptions","adjustNavigator","chartHeight","clientWidth","chartUpdates","chartWidth","navigatorHeight","plotTop","handles","columnsAssignment","columnAssignments","appendChild","parentElement","renderNavigator","redrawNavigator","timeouts","resizeTimeouts","columnValues","values","xData","affectNavigator","appliedRanges","rangedColumns","appliedRagesLength","allConditionsMet","j","Infinity","sort","pointA","pointB","NaN","connectHighcharts","highcharts","defaultHandlers","DataGridPlugin","HighchartsPlugin","G","PluginHandler","addPlugin","DataGrid"],"mappings":"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"}